<!--
doc/src/sgml/ref/pgbench.sgml
PostgreSQL documentation
-->

<refentry id="pgbench">
 <indexterm zone="pgbench">
  <primary>pgbench</primary>
 </indexterm>

 <refmeta>
  <refentrytitle><application>pgbench</application></refentrytitle>
  <manvolnum>1</manvolnum>
<!--
  <refmiscinfo>Application</refmiscinfo>
-->
  <refmiscinfo>アプリケーション</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pgbench</refname>
<!--
  <refpurpose>run a benchmark test on <productname>PostgreSQL</productname></refpurpose>
-->
  <refpurpose><productname>PostgreSQL</productname>に対してベンチマーク試験を行う</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pgbench</command>
   <arg choice="plain"><option>-i</option></arg>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="opt"><replaceable>dbname</replaceable></arg>
  </cmdsynopsis>
  <cmdsynopsis>
   <command>pgbench</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="opt"><replaceable>dbname</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>
 <para>
<!--
  <application>pgbench</application> is a simple program for running benchmark
  tests on <productname>PostgreSQL</productname>.  It runs the same sequence of SQL
  commands over and over, possibly in multiple concurrent database sessions,
  and then calculates the average transaction rate (transactions per second).
  By default, <application>pgbench</application> tests a scenario that is
  loosely based on TPC-B, involving five <command>SELECT</command>,
  <command>UPDATE</command>, and <command>INSERT</command> commands per transaction.
  However, it is easy to test other cases by writing your own transaction
  script files.
-->
<application>pgbench</application>は<productname>PostgreSQL</productname>上でベンチマーク試験を行う単純なプログラムです。
これは同一のSQLコマンドの並びを何度も実行します。複数の同時実行データベースセッションで実行することもできます。
そして、トランザクションの速度（1秒当たりのトランザクション数）の平均を計算します。
デフォルトで<application>pgbench</application>は、1トランザクション当たり5つの<command>SELECT</command>、<command>UPDATE</command>、<command>INSERT</command>コマンドを含むおおよそTPC-Bに基いたシナリオを試験します。
しかし、独自のトランザクションスクリプトファイルを作成することで他の試験ケースを簡単に実行することができます。
 </para>

 <para>
<!--
  Typical output from <application>pgbench</application> looks like:
-->
<application>pgbench</application>の典型的な出力を以下に示します。

<screen>
transaction type: &lt;builtin: TPC-B (sort of)&gt;
scaling factor: 10
query mode: simple
number of clients: 10
number of threads: 1
number of transactions per client: 1000
number of transactions actually processed: 10000/10000
latency average = 11.013 ms
latency stddev = 7.351 ms
initial connection time = 45.758 ms
tps = 896.967014 (without initial connection time)
</screen>

<!--
  The first six lines report some of the most important parameter
  settings.  The next line reports the number of transactions completed
  and intended (the latter being just the product of number of clients
  and number of transactions per client); these will be equal unless the run
  failed before completion.  (In <option>-T</option> mode, only the actual
  number of transactions is printed.)
  The last line reports the number of transactions per second.
-->
最初の6行はいくつかの最重要パラメータの設定を表示しています。
次行が完了トランザクション数と予定トランザクション数です（後者は単なるクライアント数とクライアント毎のトランザクション数の積算結果です。）
実行が完了する前に失敗しない限りこれは等しくなります。
(<option>-T</option>モードでは、トランザクションの実際の数が表示されます。)
最後の行は1秒当たりのトランザクション数を示します。
 </para>

  <para>
<!--
   The default TPC-B-like transaction test requires specific tables to be
   set up beforehand.  <application>pgbench</application> should be invoked with
   the <option>-i</option> (initialize) option to create and populate these
   tables.  (When you are testing a custom script, you don't need this
   step, but will instead need to do whatever setup your test needs.)
   Initialization looks like:
-->
デフォルトのTPC-Bと似たトランザクション試験では、あらかじめ設定する特定のテーブルが必要です。
これらのテーブルを作成し、データを投入するためには、<option>-i</option>(初期化)オプションを付けて<application>pgbench</application>を呼び出さなければなりません。
(独自スクリプトを試験する場合、この手順は必要ありません。
しかし代わりに試験に必要な何らかの設定を行わなければならないでしょう。)
初期化は以下のようになります。

<programlisting>
pgbench -i <optional> <replaceable>other-options</replaceable> </optional> <replaceable>dbname</replaceable>
</programlisting>

<!--
   where <replaceable>dbname</replaceable> is the name of the already-created
   database to test in.  (You may also need <option>-h</option>,
   <option>-p</option>, and/or <option>-U</option> options to specify how to
   connect to the database server.)
-->
ここで<replaceable>dbname</replaceable>は試験用に前もって作成されたデータベースの名前です。
（またデータベースサーバの接続方法を指定するために、<option>-h</option>、<option>-p</option>、<option>-U</option>が必要になるかもしれません。）
  </para>

  <caution>
   <para>
<!--
    <literal>pgbench -i</literal> creates four tables <structname>pgbench_accounts</structname>,
    <structname>pgbench_branches</structname>, <structname>pgbench_history</structname>, and
    <structname>pgbench_tellers</structname>,
    destroying any existing tables of these names.
    Be very careful to use another database if you have tables having these
    names!
-->
<literal>pgbench -i</literal>は4つのテーブル<structname>pgbench_accounts</structname>、<structname>pgbench_branches</structname>、<structname>pgbench_history</structname>、<structname>pgbench_tellers</structname>を作成します。
もしあればこうした名前のテーブルは破壊されます。
もし同じ名前のテーブルが存在する場合にはよく注意してください。
   </para>
  </caution>

  <para>
<!--
   At the default <quote>scale factor</quote> of 1, the tables initially
   contain this many rows:
-->
デフォルトの<quote>倍数</quote>の1では、テーブルは初期状態で以下の行数を含みます。
<screen>
table                   # of rows
---------------------------------
pgbench_branches        1
pgbench_tellers         10
pgbench_accounts        100000
pgbench_history         0
</screen>
<!--
   You can (and, for most purposes, probably should) increase the number
   of rows by using the <option>-s</option> (scale factor) option.  The
   <option>-F</option> (fillfactor) option might also be used at this point.
-->
<option>-s</option>（倍数）オプションを使用して行数を増加させることができます（また、ほとんどの目的ではおそらく増加させるべきです）。
また、<option>-F</option> （フィルファクタ）オプションをここで使用しても構いません。
  </para>

  <para>
<!--
   Once you have done the necessary setup, you can run your benchmark
   with a command that doesn't include <option>-i</option>, that is
-->
一度この必要な設定を行った後、以下のように<option>-i</option>を持たないコマンドでベンチマークを行うことができます。

<programlisting>
pgbench <optional> <replaceable>options</replaceable> </optional> <replaceable>dbname</replaceable>
</programlisting>

<!--
   In nearly all cases, you'll need some options to make a useful test.
   The most important options are <option>-c</option> (number of clients),
   <option>-t</option> (number of transactions), <option>-T</option> (time limit),
   and <option>-f</option> (specify a custom script file).
   See below for a full list.
-->
ほとんどすべての場合、有用な試験とするためにいくつかのオプションが必要になります。
最重要オプションは<option>-c</option>（クライアント数）、<option>-t</option>（トランザクション数）、<option>-T</option> (制限時間)、<option>-f</option>（独自スクリプトファイルの指定）です。
以下の全一覧を参照してください。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Options</title>
-->
  <title>オプション</title>

  <para>
<!--
   The following is divided into three subsections.  Different options are
   used during database initialization and while running benchmarks, but some
   options are useful in both cases.
-->
以下では、データベース初期化時に使用されるオプション、ベンチマーク実行時に使用されるオプション、どちらの場合でも使われるオプションの３つに分けて説明します。
  </para>

 <refsect2 id="pgbench-init-options">
<!--
  <title>Initialization Options</title>
-->
  <title>初期化用のオプション</title>

   <para>
<!--
    <application>pgbench</application> accepts the following command-line
    initialization arguments:
-->
<application>pgbench</application>は以下の初期化用のコマンドライン引数を受け付けます。

    <variablelist>

     <varlistentry>
      <term><replaceable class="parameter">dbname</replaceable></term>
      <listitem>
       <para>
<!--
        Specifies the name of the database to test in. If this is
        not specified, the environment variable
        <envar>PGDATABASE</envar> is used. If that is not set, the
        user name specified for the connection is used.
-->
試験するデータベースの名前を指定します。
これが指定されていなければ、環境変数<envar>PGDATABASE</envar>が使われます。
環境変数が設定されていなければ、接続に指定されたユーザ名が使われます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-i</option></term>
      <term><option>--initialize</option></term>
      <listitem>
       <para>
<!--
        Required to invoke initialization mode.
-->
初期化モードを呼び出すために必要です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-I <replaceable>init_steps</replaceable></option></term>
      <term><option>--init-steps=<replaceable>init_steps</replaceable></option></term>
      <listitem>
       <para>
<!--
        Perform just a selected set of the normal initialization steps.
        <replaceable>init_steps</replaceable> specifies the
        initialization steps to be performed, using one character per step.
        Each step is invoked in the specified order.
        The default is <literal>dtgvp</literal>.
        The available steps are:
-->
標準の初期化ステップの内、選択したものだけを実行します。
<replaceable>init_steps</replaceable>では、各ステップ毎に1文字を使って、実行する初期化ステップを指定します。
各ステップは指定した順で実行されます。
デフォルトは<literal>dtgvp</literal>です。
有効なステップは以下の通りです。

        <variablelist>
         <varlistentry>
          <term><literal>d</literal> (Drop)</term>
          <listitem>
           <para>
<!--
            Drop any existing <application>pgbench</application> tables.
-->
既存の<application>pgbench</application>のテーブルを全て削除します。
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term><literal>t</literal> (create Tables)</term>
          <listitem>
           <para>
<!--
            Create the tables used by the
            standard <application>pgbench</application> scenario, namely
            <structname>pgbench_accounts</structname>,
            <structname>pgbench_branches</structname>,
            <structname>pgbench_history</structname>, and
            <structname>pgbench_tellers</structname>.
-->
標準の<application>pgbench</application>シナリオで使われるテーブル、すなわち<structname>pgbench_accounts</structname>、<structname>pgbench_branches</structname>、<structname>pgbench_history</structname>および<structname>pgbench_tellers</structname>を作成します。
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
<!--
          <term><literal>g</literal> or <literal>G</literal> (Generate data, client-side or server-side)</term>
-->
          <term><literal>g</literal>または<literal>G</literal> (Generate data, クライアント側、またはサーバ側)</term>
          <listitem>
           <para>
<!--
            Generate data and load it into the standard tables,
            replacing any data already present.
-->
データを生成し、既存データを置き換えて、標準の各テーブルに読み込みます。
           </para>
           <para>
<!--
            With <literal>g</literal> (client-side data generation),
            data is generated in <command>pgbench</command> client and then
            sent to the server. This uses the client/server bandwidth
            extensively through a <command>COPY</command>.
            Using <literal>g</literal> causes logging to print one message
            every 100,000 rows while generating data for the
            <structname>pgbench_accounts</structname> table.
-->
<literal>g</literal>(クライアント側データ生成)は、データは<command>pgbench</command>クライアントで生成されてからサーバに送られます。
これは<command>COPY</command>でクライアント/サーバの帯域を大きく使います。
<literal>g</literal>を使うと、<structname>pgbench_accounts</structname>テーブルのためにデータを生成する間、100,000行毎にメッセージを1つログ出力するようになります。
           </para>
           <para>
<!--
            With <literal>G</literal> (server-side data generation),
            only small queries are sent from the <command>pgbench</command>
            client and then data is actually generated in the server.
            No significant bandwidth is required for this variant, but
            the server will do more work.
            Using <literal>G</literal> causes logging not to print any progress
            message while generating data.
-->
<literal>G</literal>(サーバ側データ生成)では、小さな問い合わせだけが<command>pgbench</command>クライアントから送られ、データは実際にはサーバで生成されます。
こちらは帯域を著しく要求することはありませんが、サーバが、より多くの作業をすることになります。
<literal>G</literal>を使うと、データを生成する間は進捗メッセージをログ出力しなくなります。
           </para>
           <para>
<!--
            The default initialization behavior uses client-side data
            generation (equivalent to <literal>g</literal>).
-->
デフォルトの初期化動作は、クライアント側のデータ生成(<literal>g</literal>と同じ)を使います。
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term><literal>v</literal> (Vacuum)</term>
          <listitem>
           <para>
<!--
            Invoke <command>VACUUM</command> on the standard tables.
-->
標準の各テーブルに対して<command>VACUUM</command>を実行します。
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term><literal>p</literal> (create Primary keys)</term>
          <listitem>
           <para>
<!--
            Create primary key indexes on the standard tables.
-->
標準の各テーブルにプライマリキーインデックスを作成します。
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
         <term><literal>f</literal> (create Foreign keys)</term>
          <listitem>
           <para>
<!--
            Create foreign key constraints between the standard tables.
            (Note that this step is not performed by default.)
-->
標準のテーブル間に外部キー制約を作成します。
（このステップはデフォルトでは実行されないことに注意してください）
           </para>
          </listitem>
         </varlistentry>
        </variablelist></para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-F</option> <replaceable>fillfactor</replaceable></term>
      <term><option>--fillfactor=</option><replaceable>fillfactor</replaceable></term>
      <listitem>
       <para>
<!--
        Create the <structname>pgbench_accounts</structname>,
        <structname>pgbench_tellers</structname> and
        <structname>pgbench_branches</structname> tables with the given fillfactor.
        Default is 100.
-->
指定したフィルファクタで<structname>pgbench_accounts</structname>、<structname>pgbench_tellers</structname>、<structname>pgbench_branches</structname>テーブルを作成します。
デフォルトは100です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n</option></term>
      <term><option>--no-vacuum</option></term>
      <listitem>
       <para>
<!--
        Perform no vacuuming during initialization.
        (This option suppresses the <literal>v</literal> initialization step,
        even if it was specified in <option>-I</option>.)
-->
初期化でバキュームを実行しません。
（このオプションは<option>-I</option>で指定されていたとしても初期化ステップ<literal>v</literal>を抑止します。）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-q</option></term>
      <term><option>--quiet</option></term>
      <listitem>
       <para>
<!--
        Switch logging to quiet mode, producing only one progress message per 5
        seconds. The default logging prints one message each 100,000 rows, which
        often outputs many lines per second (especially on good hardware).
-->
ログ処理を、5秒に１つの進行メッセージのみを生成する静寂モードに切り替えます。
デフォルトのログ処理では、100,000行毎にメッセージを１つ出力し、（特に優れたハードウェアでは）1秒当たりに多くのメッセージを出力します。
       </para>
       <para>
<!--
        This setting has no effect if <literal>G</literal> is specified
        in <option>-I</option>.
-->
<option>-I</option>の中で<literal>G</literal>が指定されていれば、この設定は影響しません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s</option> <replaceable>scale_factor</replaceable></term>
      <term><option>--scale=</option><replaceable>scale_factor</replaceable></term>
      <listitem>
       <para>
<!--
        Multiply the number of rows generated by the scale factor.
        For example, <literal>-s 100</literal> will create 10,000,000 rows
        in the <structname>pgbench_accounts</structname> table. Default is 1.
        When the scale is 20,000 or larger, the columns used to
        hold account identifiers (<structfield>aid</structfield> columns)
        will switch to using larger integers (<type>bigint</type>),
        in order to be big enough to hold the range of account
        identifiers.
-->
この倍率で生成される行数を積算します。
例えば、<literal>-s 100</literal>は <structname>pgbench_accounts</structname>テーブルに10,000,000行を生成することを意味します。
デフォルトは1です。
この倍率が20000以上になると、アカウント識別子の範囲を保持できる程度に大きくなるように、アカウント識別子を保持するために使用される列（<structfield>aid</structfield>列）はより大きな整数（<type>bigint</type>）を使用するように切り替わります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--foreign-keys</option></term>
      <listitem>
       <para>
<!--
        Create foreign key constraints between the standard tables.
        (This option adds the <literal>f</literal> step to the initialization
        step sequence, if it is not already present.)
-->
標準テーブル間で外部キー制約を作成します。
（このオプションは初期化ステップの並びに、もし無かったなら<literal>f</literal>ステップを追加します。）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--index-tablespace=<replaceable>index_tablespace</replaceable></option></term>
      <listitem>
       <para>
<!--
        Create indexes in the specified tablespace, rather than the default
        tablespace.
-->
デフォルトのテーブル空間ではなく、指定したテーブル空間の中にインデックスを作成します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--partition-method=<replaceable>NAME</replaceable></option></term>
      <listitem>
       <para>
<!--
        Create a partitioned <literal>pgbench_accounts</literal> table with
        <replaceable>NAME</replaceable> method.
        Expected values are <literal>range</literal> or <literal>hash</literal>.
        This option requires that <option>&#45;-partitions</option> is set to non-zero.
        If unspecified, default is <literal>range</literal>.
-->
<replaceable>NAME</replaceable>メソッドでパーティション化された<literal>pgbench_accounts</literal>テーブルを作成します。
期待される値は<literal>range</literal>または<literal>hash</literal>です。
このオプションは<option>--partitions</option>が0でない値に設定されていることを要求します。
指定されなければ、デフォルトは<literal>range</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--partitions=<replaceable>NUM</replaceable></option></term>
      <listitem>
       <para>
<!--
        Create a partitioned <literal>pgbench_accounts</literal> table with
        <replaceable>NUM</replaceable> partitions of nearly equal size for
        the scaled number of accounts.
        Default is <literal>0</literal>, meaning no partitioning.
-->
アカウントの数に比例したほぼ等しい大きさの<replaceable>NUM</replaceable>個のパーティションにパーティション化された<literal>pgbench_accounts</literal>テーブルを作成します。
デフォルトは<literal>0</literal>で、パーティション化しないことを意味します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--tablespace=<replaceable>tablespace</replaceable></option></term>
      <listitem>
       <para>
<!--
        Create tables in the specified tablespace, rather than the default
        tablespace.
-->
デフォルトのテーブル空間ではなく、指定したテーブル空間の中にテーブルを作成します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--unlogged-tables</option></term>
      <listitem>
       <para>
<!--
        Create all tables as unlogged tables, rather than permanent tables.
-->
永続テーブルではなくログを取らないテーブルとしてテーブルを作成します。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>

 </refsect2>

 <refsect2 id="pgbench-run-options">
<!--
  <title>Benchmarking Options</title>
-->
  <title>ベンチマーク用オプション</title>

   <para>
<!--
    <application>pgbench</application> accepts the following command-line
    benchmarking arguments:
-->
<application>pgbench</application>は以下のベンチマーク用コマンドライン引数を受け付けます。

    <variablelist>
     <varlistentry>
      <term><option>-b</option> <replaceable>scriptname[@weight]</replaceable></term>
      <term><option>--builtin</option>=<replaceable>scriptname[@weight]</replaceable></term>
      <listitem>
       <para>
<!--
        Add the specified built-in script to the list of scripts to be executed.
        Available built-in scripts are: <literal>tpcb-like</literal>,
        <literal>simple-update</literal> and <literal>select-only</literal>.
        Unambiguous prefixes of built-in names are accepted.
        With the special name <literal>list</literal>, show the list of built-in scripts
        and exit immediately.
-->
指定の組み込みスクリプトを実行されるスクリプトのリストに追加します。
利用可能な組み込みのスクリプトは、<literal>tpcb-like</literal>、<literal>simple-update</literal>、<literal>select-only</literal>です。
組み込みの名前の曖昧な接頭辞も受け付けられます。
特別な名前<literal>list</literal>を使うと、組み込みスクリプトのリストを表示して、即座に終了します。
       </para>
       <para>
<!--
        Optionally, write an integer weight after <literal>@</literal> to
        adjust the probability of selecting this script versus other ones.
        The default weight is 1.
        See below for details.
-->
オプションで<literal>@</literal>の後に整数のweight（重み）をつけることで、そのスクリプトが選ばれる確率を調整できます。
デフォルトのweightは1です。
詳細は以下を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-c</option> <replaceable>clients</replaceable></term>
      <term><option>--client=</option><replaceable>clients</replaceable></term>
      <listitem>
       <para>
<!--
        Number of clients simulated, that is, number of concurrent database
        sessions.  Default is 1.
-->
模擬するクライアント数、つまり、同時に実行されるデータベースセッション数です。
デフォルトは1です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-C</option></term>
      <term><option>--connect</option></term>
      <listitem>
       <para>
<!--
        Establish a new connection for each transaction, rather than
        doing it just once per client session.
        This is useful to measure the connection overhead.
-->
各クライアントセッションが一度だけ接続を確立するのではなく、各トランザクションが新しい接続を確立します。
これは接続オーバーヘッドを測定する場合に有用です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-d</option></term>
      <term><option>--debug</option></term>
      <listitem>
       <para>
<!--
        Print debugging output.
-->
デバッグ用出力を表示します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-D</option> <replaceable>varname</replaceable><literal>=</literal><replaceable>value</replaceable></term>
      <term><option>--define=</option><replaceable>varname</replaceable><literal>=</literal><replaceable>value</replaceable></term>
      <listitem>
       <para>
<!--
        Define a variable for use by a custom script (see below).
        Multiple <option>-D</option> options are allowed.
-->
独自スクリプト（後述）で使用される変数を定義します。
複数の<option>-D</option>オプションを使用することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-f</option> <replaceable>filename[@weight]</replaceable></term>
      <term><option>--file=</option><replaceable>filename[@weight]</replaceable></term>
      <listitem>
       <para>
<!--
        Add a transaction script read from <replaceable>filename</replaceable>
        to the list of scripts to be executed.
-->
<replaceable>filename</replaceable>から読み取ったトランザクションスクリプトを実行されるスクリプトのリストに追加します。
       </para>
       <para>
<!--
        Optionally, write an integer weight after <literal>@</literal> to
        adjust the probability of selecting this script versus other ones.
        The default weight is 1.
        (To use a script file name that includes an <literal>@</literal>
        character, append a weight so that there is no ambiguity, for
        example <literal>filen@me@1</literal>.)
        See below for details.
-->
オプションで<literal>@</literal>の後に整数のweight（重み）をつけることで、そのスクリプトが選ばれる確率を調整できます。
デフォルトのweightは1です。
(<literal>@</literal>文字を含むスクリプトファイル名を使うには、曖昧さがないよう、例えば<literal>filen@me@1</literal>とweightをつけてください。)
詳細は後で説明します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-j</option> <replaceable>threads</replaceable></term>
      <term><option>--jobs=</option><replaceable>threads</replaceable></term>
      <listitem>
       <para>
<!--
        Number of worker threads within <application>pgbench</application>.
        Using more than one thread can be helpful on multi-CPU machines.
        Clients are distributed as evenly as possible among available threads.
        Default is 1.
-->
<application>pgbench</application>内のワーカスレッド数です。
複数のスレッドを使用することはマルチCPUマシンで有用になります。
クライアントは利用可能なスレッドの間でできる限り均等に分散されます。
デフォルトは1です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-l</option></term>
      <term><option>--log</option></term>
      <listitem>
       <para>
<!--
        Write information about each transaction to a log file.
        See below for details.
-->
各トランザクションに関する情報をログファイルに書き出します。
後で詳細を説明します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-L</option> <replaceable>limit</replaceable></term>
      <term><option>--latency-limit=</option><replaceable>limit</replaceable></term>
      <listitem>
       <para>
<!--
        Transactions that last more than <replaceable>limit</replaceable> milliseconds
        are counted and reported separately, as <firstterm>late</firstterm>.
-->
<replaceable>limit</replaceable>ミリ秒以上続くトランザクションが計数され、別途<firstterm>遅いトランザクション</firstterm>として報告されます。
       </para>
       <para>
<!--
        When throttling is used (<option>&#045;&#045;rate=...</option>), transactions that
        lag behind schedule by more than <replaceable>limit</replaceable> ms, and thus
        have no hope of meeting the latency limit, are not sent to the server
        at all. They are counted and reported separately as
        <firstterm>skipped</firstterm>.
-->
制限が使用されると(<option>--rate=...</option>)、<replaceable>limit</replaceable>ミリ秒以上遅延がスケジュールされたトランザクションは遅延制限を満たす可能性がないため、サーバに送信されることは決してありません。
これらのトランザクションは計数され、別途<firstterm>スキップされた</firstterm>として報告されます。
       </para>
       </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-M</option> <replaceable>querymode</replaceable></term>
      <term><option>--protocol=</option><replaceable>querymode</replaceable></term>
      <listitem>
       <para>
<!--
        Protocol to use for submitting queries to the server:
-->
サーバへ問い合わせを送信するために使用するプロトコルです。
          <itemizedlist>
           <listitem>
<!--
            <para><literal>simple</literal>: use simple query protocol.</para>
-->
            <para><literal>simple</literal>: 簡易問い合わせプロトコルを使用します。</para>
           </listitem>
           <listitem>
<!--
            <para><literal>extended</literal>: use extended query protocol.</para>
-->
            <para><literal>extended</literal>: 拡張問い合わせプロトコルを使用します。</para>
           </listitem>
           <listitem>
<!--
            <para><literal>prepared</literal>: use extended query protocol with prepared statements.</para>
-->
            <para><literal>prepared</literal>: プリペアドステートメントを伴う拡張問い合わせプロトコルを使用します。</para>
           </listitem>
          </itemizedlist>

<!--
        In the <literal>prepared</literal> mode, <application>pgbench</application>
        reuses the parse analysis result starting from the second query
        iteration, so <application>pgbench</application> runs faster
        than in other modes.
-->
<literal>prepared</literal>モードでは、<application>pgbench</application>は問い合わせの2回目の繰り返しからは構文解析結果を再利用しますので、<application>pgbench</application>は他のモードよりも速く動作します。
       </para>
       <para>
<!--
        The default is simple query protocol.  (See <xref linkend="protocol"/>
        for more information.)
-->
デフォルトは簡易問い合わせプロトコルです。
（詳しい情報は<xref linkend="protocol"/>を参照してください）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n</option></term>
      <term><option>--no-vacuum</option></term>
      <listitem>
       <para>
<!--
        Perform no vacuuming before running the test.
        This option is <emphasis>necessary</emphasis>
        if you are running a custom test scenario that does not include
        the standard tables <structname>pgbench_accounts</structname>,
        <structname>pgbench_branches</structname>, <structname>pgbench_history</structname>, and
        <structname>pgbench_tellers</structname>.
-->
試験を実行する前にバキュームを行いません。
<structname>pgbench_accounts</structname>、<structname>pgbench_branches</structname>、<structname>pgbench_history</structname>、
<structname>pgbench_tellers</structname>標準テーブルを含まない独自試験シナリオを実行する場合、このオプションは<emphasis>必要</emphasis>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-N</option></term>
      <term><option>--skip-some-updates</option></term>
      <listitem>
       <para>
<!--
        Run built-in simple-update script.
        Shorthand for <option>-b simple-update</option>.
-->
組み込みのsimple-update（単純な更新）のスクリプトを実行します。
<option>-b simple-update</option>の短縮形です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-P</option> <replaceable>sec</replaceable></term>
      <term><option>--progress=</option><replaceable>sec</replaceable></term>
      <listitem>
       <para>
<!--
        Show progress report every <replaceable>sec</replaceable> seconds.  The report
        includes the time since the beginning of the run, the TPS since the
        last report, and the transaction latency average and standard
        deviation since the last report.  Under throttling (<option>-R</option>),
        the latency is computed with respect to the transaction scheduled
        start time, not the actual transaction beginning time, thus it also
        includes the average schedule lag time.
-->
<replaceable>sec</replaceable>秒毎の進捗レポートを表示します。
レポートには起動からの経過時間、前回レポート時からのTPS、前回レポート時からのトランザクションの平均待ち時間、標準偏差を含んでいます。
(<option>-R</option>)オプションによる制限下では、待ち時間はトランザクションの実開始時間ではなく、予定開始時間で算出されていますので、平均予定遅延時間が含まれています。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-r</option></term>
      <term><option>--report-latencies</option></term>
      <listitem>
       <para>
<!--
        Report the average per-statement latency (execution time from the
        perspective of the client) of each command after the benchmark
        finishes.  See below for details.
-->
ベンチマーク完了後の各コマンドにおけるステートメント毎の平均レイテンシ(クライアントから見た実行時間)を報告します。詳しくは下を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-R</option> <replaceable>rate</replaceable></term>
      <term><option>--rate=</option><replaceable>rate</replaceable></term>
      <listitem>
       <para>
<!--
        Execute transactions targeting the specified rate instead of running
        as fast as possible (the default).  The rate is given in transactions
        per second.  If the targeted rate is above the maximum possible rate,
        the rate limit won't impact the results.
-->
トランザクションを可能な限り高速（デフォルト）で実行するのではなく、指定された目標レートで実行します。
レートは1秒あたりのトランザクション数で与えられます。目標レートが実施可能な最大レートを越えている場合、レート制限は結果に影響を与えません。
       </para>
       <para>
<!--
        The rate is targeted by starting transactions along a
        Poisson-distributed schedule time line.  The expected start time
        schedule moves forward based on when the client first started, not
        when the previous transaction ended.  That approach means that when
        transactions go past their original scheduled end time, it is
        possible for later ones to catch up again.
-->
レートはトランザクションの開始予定タイムラインがポアソン分布に沿う事を目標としています。
期待される開始時刻の予定は、前トランザクションの終了時ではなくクライアントの初期起動時に基づいて動かします。
このアプローチはトランザクションがオリジナルの終了予定時刻を過ぎた場合でも、後でまた追い付けることを意味します。
       </para>
       <para>
<!--
        When throttling is active, the transaction latency reported at the
        end of the run is calculated from the scheduled start times, so it
        includes the time each transaction had to wait for the previous
        transaction to finish. The wait time is called the schedule lag time,
        and its average and maximum are also reported separately. The
        transaction latency with respect to the actual transaction start time,
        i.e., the time spent executing the transaction in the database, can be
        computed by subtracting the schedule lag time from the reported
        latency.
-->
制限がアクティブになると、実行終了時に報告されるトランザクション待ち時間は、予定開始時刻から計算されるので、
各トランザクションが前トランザクションの終了を待たねばならなかった時間を含んでいます。
この待ち時間はスケジュールラグタイムと呼ばれ、平均と最大値も別々に報告されます。
実トランザクション開始時刻についてのトランザクション待ち時間、つまりデータベース内でトランザクションの実行に要した時間は、報告された待ち時間からスケジュールラグタイムを減算することで算出することができます。
       </para>

       <para>
<!--
        If <option>&#045;&#045;latency-limit</option> is used together with <option>&#045;&#045;rate</option>,
        a transaction can lag behind so much that it is already over the
        latency limit when the previous transaction ends, because the latency
        is calculated from the scheduled start time. Such transactions are
        not sent to the server, but are skipped altogether and counted
        separately.
-->
<option>--latency-limit</option>が<option>--rate</option>と一緒に指定された場合、トランザクションは、先行するトランザクションが終了した際にすでに遅延制限を超えていて、非常に遅れてしまうことがあり得ます。
そのようなトランザクションはサーバに送信さることなくスキップされ、別途カウントされます。
       </para>

       <para>
<!--
        A high schedule lag time is an indication that the system cannot
        process transactions at the specified rate, with the chosen number of
        clients and threads. When the average transaction execution time is
        longer than the scheduled interval between each transaction, each
        successive transaction will fall further behind, and the schedule lag
        time will keep increasing the longer the test run is. When that
        happens, you will have to reduce the specified transaction rate.
-->
スケジュールラグタイムの高い値は、システムが選択されたクライアント数とスレッド数で、指定されたレートでトランザクションを処理できなかったことを示しています。
トランザクションの平均実行時間が各トランザクション間で予定されていた間隔より長い場合、各逐次トランザクションは更に遅くなり、
スケジュールラグタイムはテスト実行がより長く増加し続けます。
これが起こる場合、指定トランザクションレートを減らす必要があります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s</option> <replaceable>scale_factor</replaceable></term>
      <term><option>--scale=</option><replaceable>scale_factor</replaceable></term>
      <listitem>
       <para>
<!--
        Report the specified scale factor in <application>pgbench</application>'s
        output.  With the built-in tests, this is not necessary; the
        correct scale factor will be detected by counting the number of
        rows in the <structname>pgbench_branches</structname> table.
        However, when testing only custom benchmarks (<option>-f</option> option),
        the scale factor will be reported as 1 unless this option is used.
-->
<application>pgbench</application>の出力で指定した倍率を報告します。
これは組み込みの試験では必要ありません。
正確な倍率が<structname>pgbench_branches</structname>テーブルの行数を数えることで検出されます。
しかし、独自ベンチマーク（<option>-f</option>オプション）のみを試験している場合、このオプションを使用しない限り、倍率は1として報告されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-S</option></term>
      <term><option>--select-only</option></term>
      <listitem>
       <para>
<!--
        Run built-in select-only script.
        Shorthand for <option>-b select-only</option>.
-->
組み込みのselect-only（SELECTのみ）のスクリプトを実行します。
<option>-b select-only</option>の短縮形です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-t</option> <replaceable>transactions</replaceable></term>
      <term><option>--transactions=</option><replaceable>transactions</replaceable></term>
      <listitem>
       <para>
<!--
        Number of transactions each client runs.  Default is 10.
-->
各クライアントが実行するトランザクション数です。
デフォルトは10です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-T</option> <replaceable>seconds</replaceable></term>
      <term><option>--time=</option><replaceable>seconds</replaceable></term>
      <listitem>
       <para>
<!--
        Run the test for this many seconds, rather than a fixed number of
        transactions per client. <option>-t</option> and
        <option>-T</option> are mutually exclusive.
-->
クライアントあたりのトランザクション数を固定で指定するよりも長くテストを実行したい場合、ここに指定した秒数でテストを実行します。
<option>-t</option>と<option>-T</option>は互いに排他的です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-v</option></term>
      <term><option>--vacuum-all</option></term>
      <listitem>
       <para>
<!--
        Vacuum all four standard tables before running the test.
        With neither <option>-n</option> nor <option>-v</option>, <application>pgbench</application> will vacuum the
        <structname>pgbench_tellers</structname> and <structname>pgbench_branches</structname>
        tables, and will truncate <structname>pgbench_history</structname>.
-->
試験前に4つの標準テーブルすべてをバキュームします。
<option>-n</option>も<option>-v</option>もなければ、<application>pgbench</application>は<structname>pgbench_tellers</structname>と<structname>pgbench_branches</structname>テーブルをバキュームし、<structname>pgbench_history</structname>内のデータをすべて消去します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--aggregate-interval=<replaceable>seconds</replaceable></option></term>
      <listitem>
       <para>
<!--
        Length of aggregation interval (in seconds).  May be used only
        with <option>-l</option> option.  With this option, the log contains
        per-interval summary data, as described below.
-->
集約間隔の長さ（秒単位）です。
これは<option>-l</option>と一緒でのみ使用できます。
このオプションを付けると、ログには以下で説明するような指定間隔単位の要約が含まれます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--log-prefix=<replaceable>prefix</replaceable></option></term>
      <listitem>
       <para>
<!--
        Set the filename prefix for the log files created by
        <option>&#045;&#045;log</option>.  The default is <literal>pgbench_log</literal>.
-->
<option>--log</option>により作成されるログファイルのファイル名の先頭につける文字列を設定します。
デフォルトは<literal>pgbench_log</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--progress-timestamp</option></term>
      <listitem>
       <para>
<!--
        When showing progress (option <option>-P</option>), use a timestamp
        (Unix epoch) instead of the number of seconds since the
        beginning of the run.  The unit is in seconds, with millisecond
        precision after the dot.
        This helps compare logs generated by various tools.
-->
進捗を表示（<option>-P</option>オプション）しているとき、実行開始以後の経過秒数の代わりにタイムスタンプ（Unixエポック時刻）を使用します。
単位は秒で、ドットの後にミリ秒の精度が付きます。
これは様々なツールで生成されたログを比較するのに役立つでしょう。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--random-seed=</option><replaceable>seed</replaceable></term>
      <listitem>
       <para>
<!--
        Set random generator seed.  Seeds the system random number generator,
        which then produces a sequence of initial generator states, one for
        each thread.
        Values for <replaceable>seed</replaceable> may be:
        <literal>time</literal> (the default, the seed is based on the current time),
        <literal>rand</literal> (use a strong random source, failing if none
        is available), or an unsigned decimal integer value.
        The random generator is invoked explicitly from a pgbench script
        (<literal>random...</literal> functions) or implicitly (for instance option
        <option>-&#045;rate</option> uses it to schedule transactions).
        When explicitly set, the value used for seeding is shown on the terminal.
        Any value allowed for <replaceable>seed</replaceable> may also be
        provided through the environment variable
        <literal>PGBENCH_RANDOM_SEED</literal>.
        To ensure that the provided seed impacts all possible uses, put this option
        first or use the environment variable.
-->
ランダムジェネレータのシードを設定します。
各スレッド毎の初期ジェネレータ状態から一連の値を生成する、システム乱数ジェネレータの種となります。
<replaceable>seed</replaceable>の値は以下が可能です。
<literal>time</literal>（デフォルト、現在時刻に基づくシード）、<literal>rand</literal>（強いランダムソースを使用、使用できなければ失敗します）、あるいは符号無し整数値です。
ランダムジェネレータはpgbenchスクリプト（<literal>random...</literal>関数）から明示的に、あるいは暗黙に（例えばオプション<option>--rate</option>がトランザクションのスケジュールに使用します）、実行されます。
明示的に設定した場合、シードに使われる値はターミナルにあらわれます。
<replaceable>seed</replaceable>に与えることのできる値は何であれ、環境変数<literal>PGBENCH_RANDOM_SEED</literal>を通して付与しても良いです。
設定したシードがありうる全ての実行に影響を及ぼすようにするためには、本オプションを最初に置くか、環境変数を使ってください。
      </para>
      <para>
<!--
        Setting the seed explicitly allows to reproduce a <command>pgbench</command>
        run exactly, as far as random numbers are concerned.
        As the random state is managed per thread, this means the exact same
        <command>pgbench</command> run for an identical invocation if there is one
        client per thread and there are no external or data dependencies.
        From a statistical viewpoint reproducing runs exactly is a bad idea because
        it can hide the performance variability or improve performance unduly,
        e.g., by hitting the same pages as a previous run.
        However, it may also be of great help for debugging, for instance
        re-running a tricky case which leads to an error.
        Use wisely.
-->
明示的にシードを設定することは、乱数に関しては、正確に<command>pgbench</command>実行を再現することを可能にします。
ランダム状態はスレッド毎に制御されているので、スレッド毎に一つのクライアントであり、外的な依存やデータ依存が無い場合、同一の起動に対して正確に同じ<command>pgbench</command>実行することを意味します。
統計的観点からは、性能のばらつきを隠したり、例えば前回実行と同じページにヒットすることで不当に性能改善するので、正確な再現実行は悪い考えです。
しかしながら、例えばエラーを起こすトリッキーなケースを再実行するなど、デバッグには大きな助けとなるでしょう。
賢く使ってください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--sampling-rate=<replaceable>rate</replaceable></option></term>
      <listitem>
       <para>
<!--
        Sampling rate, used when writing data into the log, to reduce the
        amount of log generated. If this option is given, only the specified
        fraction of transactions are logged. 1.0 means all transactions will
        be logged, 0.05 means only 5% of the transactions will be logged.
-->
データをログに書き出す際に使用される、生成されるログの量を減少するためのサンプリング割合です。
このオプションが指定された場合、指定された割合のトランザクションがログに残ります。
1.0はすべてのトランザクションが、0.05はトランザクションの5%のみがログに残ることを意味します。
       </para>
       <para>
<!--
        Remember to take the sampling rate into account when processing the
        log file. For example, when computing TPS values, you need to multiply
        the numbers accordingly (e.g., with 0.01 sample rate, you'll only get
        1/100 of the actual TPS).
-->
ログファイルを処理する際にはこのサンプリング割合を考慮することを忘れないでください。
例えば、TPS値を計算する際には、比例した数を掛け合わせなければなりません（例：サンプリング割合が0.01の場合実際のTPSの1/100を得るだけです。）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--show-script=</option><replaceable>scriptname</replaceable></term>
      <listitem>
       <para>
<!--
        Show the actual code of builtin script <replaceable>scriptname</replaceable>
        on stderr, and exit immediately.
-->
組み込みスクリプト<replaceable>scriptname</replaceable>の実際のコードを標準エラーに出力し、即座に終了します。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>

 </refsect2>

 <refsect2 id="pgbench-common-options">
<!--
  <title>Common Options</title>
-->
  <title>共通オプション</title>

   <para>
<!--
    <application>pgbench</application> also accepts the following common command-line
    arguments for connection parameters:
-->
<application>pgbench</application>は接続パラメータとして以下の共通コマンドライン引数も受け付けます。

    <variablelist>

     <varlistentry>
      <term><option>-h</option> <replaceable>hostname</replaceable></term>
      <term><option>--host=</option><replaceable>hostname</replaceable></term>
      <listitem>
       <para>
<!--
        The database server's host name
-->
      データベースサーバのホスト名
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-p</option> <replaceable>port</replaceable></term>
      <term><option>--port=</option><replaceable>port</replaceable></term>
      <listitem>
       <para>
<!--
        The database server's port number
-->
データベースサーバのポート番号
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-U</option> <replaceable>login</replaceable></term>
      <term><option>--username=</option><replaceable>login</replaceable></term>
      <listitem>
       <para>
<!--
        The user name to connect as
-->
接続ユーザ名
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</option></term>
      <term><option>--version</option></term>
      <listitem>
       <para>
<!--
        Print the <application>pgbench</application> version and exit.
-->
<application>pgbench</application>のバージョンを表示し、終了します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</option></term>
      <term><option>--help</option></term>
      <listitem>
       <para>
<!--
        Show help about <application>pgbench</application> command line
        arguments, and exit.
-->
<application>pgbench</application>のコマンドライン引数の説明を表示し、終了します。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

 </refsect2>
 </refsect1>

 <refsect1>
<!--
  <title>Exit Status</title>
-->
  <title>終了ステータス</title>

  <para>
<!--
   A successful run will exit with status 0.  Exit status 1 indicates static
   problems such as invalid command-line options.  Errors during the run such
   as database errors or problems in the script will result in exit status 2.
   In the latter case, <application>pgbench</application> will print partial
   results.
-->
実行に成功すればステータス0で終了します。
終了ステータス1は、無効なコマンドラインオプションのような静的な問題を示します。
データベースエラーやスクリプトでの問題などの実行中のエラーは終了ステータス2になります。
後者の場合、<application>pgbench</application>は部分的な結果を表示します。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Environment</title>
-->
  <title>環境</title>

  <variablelist>
   <varlistentry>
    <term><envar>PGDATABASE</envar></term>
    <term><envar>PGHOST</envar></term>
    <term><envar>PGPORT</envar></term>
    <term><envar>PGUSER</envar></term>

    <listitem>
     <para>
<!--
      Default connection parameters.
-->
デフォルトの接続パラメータです。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
<!--
   This utility, like most other <productname>PostgreSQL</productname> utilities,
   uses the environment variables supported by <application>libpq</application>
   (see <xref linkend="libpq-envars"/>).
-->
このユーティリティは、他のほとんどの<productname>PostgreSQL</productname>ユーティリティと同様、<application>libpq</application>でサポートされる環境変数を使用します（<xref linkend="libpq-envars"/>を参照してください）。
  </para>

  <para>
<!--
   The environment variable <envar>PG_COLOR</envar> specifies whether to use
   color in diagnostic messages. Possible values are
   <literal>always</literal>, <literal>auto</literal> and
   <literal>never</literal>.
-->
環境変数<envar>PG_COLOR</envar>は診断メッセージで色を使うかどうかを指定します。
可能な値は<literal>always</literal>、<literal>auto</literal>、<literal>never</literal>です。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

 <refsect2>
<!--
  <title>What Is the <quote>Transaction</quote> Actually Performed in <application>pgbench</application>?</title>
-->
  <title><application>pgbench</application>で実際に実行される<quote>トランザクション</quote>は何か?</title>

  <para>
<!--
   <application>pgbench</application> executes test scripts chosen randomly
   from a specified list.
   The scripts may include built-in scripts specified with <option>-b</option>
   and user-provided scripts specified with <option>-f</option>.
   Each script may be given a relative weight specified after an
   <literal>@</literal> so as to change its selection probability.
   The default weight is <literal>1</literal>.
   Scripts with a weight of <literal>0</literal> are ignored.
-->
<application>pgbench</application>は指定したリストからランダムに選択したテストスクリプトを実行します。
スクリプトには<option>-b</option>で指定された組み込みスクリプトと<option>-f</option>で指定されたユーザ定義スクリプトが含まれます。
各スクリプトには<literal>@</literal>の後に指定される相対的な重みを与えることができ、それが選ばれる確率を変更できます。
デフォルトの重みは<literal>1</literal>です。
重みが<literal>0</literal>のスクリプトは無視されます。
 </para>

  <para>
<!--
   The default built-in transaction script (also invoked with <option>-b tpcb-like</option>)
   issues seven commands per transaction over randomly chosen <literal>aid</literal>,
   <literal>tid</literal>, <literal>bid</literal> and <literal>delta</literal>.
   The scenario is inspired by the TPC-B benchmark, but is not actually TPC-B,
   hence the name.
-->
デフォルトの組み込みトランザクションスクリプト（<option>-b tpcb-like</option>とすることでも実行されます）は、<literal>aid</literal>、<literal>tid</literal>、<literal>bid</literal>、<literal>delta</literal>からランダムに選択され、トランザクション毎に7つのコマンドを発行します。
このシナリオはTPC-Bベンチマークに示唆を受けたものですが、実際にはTPC-Bではないので、この名前になっています。
  </para>

  <orderedlist>
   <listitem><para><literal>BEGIN;</literal></para></listitem>
   <listitem><para><literal>UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;</literal></para></listitem>
   <listitem><para><literal>SELECT abalance FROM pgbench_accounts WHERE aid = :aid;</literal></para></listitem>
   <listitem><para><literal>UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;</literal></para></listitem>
   <listitem><para><literal>UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;</literal></para></listitem>
   <listitem><para><literal>INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);</literal></para></listitem>
   <listitem><para><literal>END;</literal></para></listitem>
  </orderedlist>

  <para>
<!--
   If you select the <literal>simple-update</literal> built-in (also <option>-N</option>),
   steps 4 and 5 aren't included in the transaction.
   This will avoid update contention on these tables, but
   it makes the test case even less like TPC-B.
-->
<literal>simple-update</literal>の組み込みを選択した（あるいは<option>-N</option>を指定した）場合、第4ステップと第5ステップはトランザクションに含まれません。
これにより、これらのテーブルに対する更新の競合を避けられますが、テストケースはさらにTPC-Bらしくなくなります。
  </para>

  <para>
<!--
   If you select the <literal>select-only</literal> built-in (also <option>-S</option>),
   only the <command>SELECT</command> is issued.
-->
<literal>select-only</literal>の組み込みを選択した（あるいは<option>-S</option>を指定した）場合、<command>SELECT</command>のみが発行されます。
  </para>
 </refsect2>

 <refsect2>
<!--
  <title>Custom Scripts</title>
-->
  <title>独自スクリプト</title>

  <para>
<!--
   <application>pgbench</application> has support for running custom
   benchmark scenarios by replacing the default transaction script
   (described above) with a transaction script read from a file
   (<option>-f</option> option).  In this case a <quote>transaction</quote>
   counts as one execution of a script file.
-->
<application>pgbench</application>は、ファイルから読み込んだトランザクションスクリプト（<option>-f</option>オプション）でデフォルトのトランザクションスクリプト（上述）を置き換えて独自のベンチマークシナリオを実行する機能をサポートします。
この場合、<quote>トランザクション</quote>はスクリプトファイルの1回の実行として数えられます。
  </para>

  <para>
<!--
   A script file contains one or more SQL commands terminated by
   semicolons.  Empty lines and lines beginning with
   <literal>&#045;&#045;</literal> are ignored.  Script files can also contain
   <quote>meta commands</quote>, which are interpreted by <application>pgbench</application>
   itself, as described below.
-->
スクリプトファイルにはセミコロンで終了するSQLコマンドが1つ以上含まれます。
空行および<literal>--</literal>から始まる行は無視されます。
スクリプトファイルの行には、<application>pgbench</application>自身が解釈する<quote>メタコマンド</quote>（後述）も記述することができます。
  </para>

  <note>
   <para>
<!--
    Before <productname>PostgreSQL</productname> 9.6, SQL commands in script files
    were terminated by newlines, and so they could not be continued across
    lines.  Now a semicolon is <emphasis>required</emphasis> to separate consecutive
    SQL commands (though an SQL command does not need one if it is followed
    by a meta command).  If you need to create a script file that works with
    both old and new versions of <application>pgbench</application>, be sure to write
    each SQL command on a single line ending with a semicolon.
-->
<productname>PostgreSQL</productname>の9.6より前では、スクリプトファイル内のSQLコマンドは改行で終了しており、そのため行をまたがって継続することができませんでした。
これからは連続するSQLコマンドを区切るためにセミコロンが<emphasis>必要</emphasis>です（ただし、SQLコマンドの後にメタコマンドが続く場合は、セミコロンは必要ありません）。
<application>pgbench</application>の古いバージョンと新しいバージョンの両方で動作するスクリプトを作る必要があるなら、各SQLコマンドを1行で書き、終わりにセミコロンを付けるようにしてください。
   </para>
  </note>

  <para>
<!--
   There is a simple variable-substitution facility for script files.
   Variable names must consist of letters (including non-Latin letters),
   digits, and underscores, with the first character not being a digit.
   Variables can be set by the command-line <option>-D</option> option,
   explained above, or by the meta commands explained below.
   In addition to any variables preset by <option>-D</option> command-line options,
   there are a few variables that are preset automatically, listed in
   <xref linkend="pgbench-automatic-variables"/>. A value specified for these
   variables using <option>-D</option> takes precedence over the automatic presets.
   Once set, a variable's
   value can be inserted into an SQL command by writing
   <literal>:</literal><replaceable>variablename</replaceable>.  When running more than
   one client session, each session has its own set of variables.
   <application>pgbench</application> supports up to 255 variable uses in one
   statement.
-->
スクリプトファイル向けの簡単な変数置換機能があります。
変数名は文字（非ラテン文字を含む）、数字およびアンダースコアで構成されていなければならず、最初の文字は数字であってはなりません。
上で説明したように変数を<option>-D</option>コマンドラインオプションで設定することができます。
また、後で説明するようにメタコマンドで設定することもできます。
<option>-D</option>コマンドラインオプションで設定された変数の他に、<xref linkend="pgbench-automatic-variables"/>に記載されているように、自動的に設定される変数がいくつかあります。
<option>-D</option> を使ってこれらの変数に設定された値は、自動設定の値より優先されます。
一度設定すると、変数の値は、<literal>:</literal><replaceable>variablename</replaceable>と書かれてSQLコマンドに挿入されます。
1つ以上のクライアントセッションが実行される場合、セッション毎に独自の変数群を持ちます。
<application>pgbench</application>は1つの文内で255個までの変数の利用をサポートします。
  </para>

   <table id="pgbench-automatic-variables">
    <title>pgbench Automatic Variables</title>
    <tgroup cols="2">
     <colspec colname="col1" colwidth="1*"/>
     <colspec colname="col2" colwidth="2*"/>
     <thead>
      <row>
<!--
       <entry>Variable</entry>
       <entry>Description</entry>
-->
       <entry>変数</entry>
       <entry>説明</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry> <literal>client_id</literal> </entry>
<!--
       <entry>unique number identifying the client session (starts from zero)</entry>
-->
       <entry>クライアントセッションを識別する一意の数値（ゼロから始まる）</entry>
      </row>

      <row>
       <entry> <literal>default_seed</literal> </entry>
<!--
       <entry>seed used in hash and pseudorandom permutation functions by default</entry>
-->
       <entry>デフォルトでハッシュ関数と疑似ランダム置換関数で使われるシード</entry>
      </row>

      <row>
       <entry> <literal>random_seed</literal> </entry>
<!--
       <entry>random generator seed (unless overwritten with <option>-D</option>)</entry>
-->
       <entry>ランダムジェネレータのシード（<option>-D</option>で上書きされていないなら）</entry>
      </row>

      <row>
       <entry> <literal>scale</literal> </entry>
<!--
       <entry>current scale factor</entry>
-->
       <entry>現在のスケールファクタ</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
<!--
   Script file meta commands begin with a backslash (<literal>\</literal>) and
   normally extend to the end of the line, although they can be continued
   to additional lines by writing backslash-return.
   Arguments to a meta command are separated by white space.
   These meta commands are supported:
-->
スクリプトファイルのメタコマンドはバックスラッシュ（<literal>\</literal>）から始まり、通常は行末まで続きますが、バックスラッシュと改行を書くことで、追加の行に続けることができます。
メタコマンドへの引数は空白文字で区切られます。
以下のメタコマンドがサポートされています。
  </para>

  <variablelist>
   <varlistentry id='pgbench-metacommand-gset'>
    <term>
     <literal>\gset [<replaceable>prefix</replaceable>]</literal>
     <literal>\aset [<replaceable>prefix</replaceable>]</literal>
    </term>

    <listitem>
     <para>
<!--
      These commands may be used to end SQL queries, taking the place of the
      terminating semicolon (<literal>;</literal>).
-->
このコマンドは、終了を意味するセミコロン(<literal>;</literal>)の置き換えで、SQL問い合わせを終えるために使われます。
     </para>

     <para>
<!--
      When the <literal>\gset</literal> command is used, the preceding SQL query is
      expected to return one row, the columns of which are stored into variables
      named after column names, and prefixed with <replaceable>prefix</replaceable>
      if provided.
-->
<literal>\gset</literal>コマンドが使われると、それまでのSQL問い合わせは1行を返すものと期待され、その行の列は列名にちなんだ名前の変数に格納されます。<replaceable>prefix</replaceable>が指定されていれば、変数名の前に付きます。
     </para>

     <para>
<!--
      When the <literal>\aset</literal> command is used, all combined SQL queries
      (separated by <literal>\;</literal>) have their columns stored into variables
      named after column names, and prefixed with <replaceable>prefix</replaceable>
      if provided. If a query returns no row, no assignment is made and the variable
      can be tested for existence to detect this. If a query returns more than one
      row, the last value is kept.
-->
<literal>\aset</literal>コマンドが使われると、(<literal>\;</literal>で分けられた)すべての結合したSQL問い合わせは、その列が列名にちなんだ名前の変数に格納されます。<replaceable>prefix</replaceable>が指定されていれば、変数名の前に付きます。
問い合わせが行を返さなければ、割り当ては行なわれませんので、これを検出するために変数の存在をテストできます。
問い合わせが2行以上返した場合、最後の値が保持されます。
     </para>

     <para>
<!--
      <literal>\gset</literal> and <literal>\aset</literal> cannot be used in
      pipeline mode, since the query results are not yet available by the time
      the commands would need them.
-->
コマンドが必要とする時までに問い合わせの結果が利用可能になりませんので、<literal>\gset</literal>と<literal>\aset</literal>はパイプラインモードでは使えません。
     </para>

     <para>
<!--
      The following example puts the final account balance from the first query
      into variable <replaceable>abalance</replaceable>, and fills variables
      <replaceable>p_two</replaceable> and <replaceable>p_three</replaceable>
      with integers from the third query.
      The result of the second query is discarded.
      The result of the two last combined queries are stored in variables
      <replaceable>four</replaceable> and <replaceable>five</replaceable>.
-->
以下の例は、最初の問い合わせからの最終的な口座残高を変数<replaceable>abalance</replaceable>に入れ、変数<replaceable>p_two</replaceable>と<replaceable>p_three</replaceable>を3番目の問い合わせからの整数で埋めます。
2番目の問い合わせの結果は捨てられます。
最後の2つの結合した問い合わせの結果は、変数<replaceable>four</replaceable>と<replaceable>five</replaceable>に格納されます。
<programlisting>
UPDATE pgbench_accounts
  SET abalance = abalance + :delta
  WHERE aid = :aid
  RETURNING abalance \gset
<!--
&#45;- compound of two queries
-->
-- 2つの問い合わせの組み合わせ
SELECT 1 \;
SELECT 2 AS two, 3 AS three \gset p_
SELECT 4 AS four \; SELECT 5 AS five \aset
</programlisting></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>\if</literal> <replaceable class="parameter">expression</replaceable></term>
    <term><literal>\elif</literal> <replaceable class="parameter">expression</replaceable></term>
    <term><literal>\else</literal></term>
    <term><literal>\endif</literal></term>
    <listitem>
     <para>
<!--
      This group of commands implements nestable conditional blocks,
      similarly to <literal>psql</literal>'s <xref linkend="psql-metacommand-if"/>.
      Conditional expressions are identical to those with <literal>\set</literal>,
      with non-zero values interpreted as true.
-->
このコマンド群は<literal>psql</literal>の<xref linkend="psql-metacommand-if"/>と似た、入れ子にできる条件ブロックを実現します。
条件式は<literal>\set</literal>と同じで、非ゼロ値は真と解釈されます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id='pgbench-metacommand-set'>
    <term>
     <literal>\set <replaceable>varname</replaceable> <replaceable>expression</replaceable></literal>
    </term>

    <listitem>
     <para>
<!--
      Sets variable <replaceable>varname</replaceable> to a value calculated
      from <replaceable>expression</replaceable>.
      The expression may contain the <literal>NULL</literal> constant,
      Boolean constants <literal>TRUE</literal> and <literal>FALSE</literal>,
      integer constants such as <literal>5432</literal>,
      double constants such as <literal>3.14159</literal>,
      references to variables <literal>:</literal><replaceable>variablename</replaceable>,
      <link linkend="pgbench-builtin-operators">operators</link>
      with their usual SQL precedence and associativity,
      <link linkend="pgbench-builtin-functions">function calls</link>,
      SQL <link linkend="functions-case"><token>CASE</token> generic conditional
      expressions</link> and parentheses.
-->
<replaceable>varname</replaceable>変数を<replaceable>expression</replaceable>から計算された値に設定します。
式（expression）には、<literal>NULL</literal>定数、真理値定数の<literal>TRUE</literal>と<literal>FALSE</literal>、<literal>5432</literal>のような整数の定数、<literal>3.14159</literal>のような倍精度実数の定数、変数を参照する <literal>:</literal><replaceable>variablename</replaceable>、通常のSQLの優先度と結合規則での<link linkend="pgbench-builtin-operators">演算子</link>、<link linkend="pgbench-builtin-functions">関数呼び出し</link>、SQLの<link linkend="functions-case"><token>CASE</token>一般条件式</link>および括弧を含むことができます。
     </para>

     <para>
<!--
      Functions and most operators return <literal>NULL</literal> on
      <literal>NULL</literal> input.
-->
関数と大部分の演算子は<literal>NULL</literal>入力に<literal>NULL</literal>を返します。
     </para>

     <para>
<!--
      For conditional purposes, non zero numerical values are
      <literal>TRUE</literal>, zero numerical values and <literal>NULL</literal>
      are <literal>FALSE</literal>.
-->
条件の用途では非ゼロの数値は<literal>TRUE</literal>、ゼロ数値と<literal>NULL</literal>は<literal>FALSE</literal>です。
     </para>

     <para>
<!--
      Too large or small integer and double constants, as well as
      integer arithmetic operators (<literal>+</literal>,
      <literal>-</literal>, <literal>*</literal> and <literal>/</literal>)
      raise errors on overflows.
-->
大きすぎるもしくは小さすぎる整数や倍精度実数の定数は、整数算術演算子(<literal>+</literal>、<literal>-</literal>、<literal>*</literal>、<literal>/</literal>)と同様にオーバーフローエラーになります。
     </para>

     <para>
<!--
      When no final <token>ELSE</token> clause is provided to a
      <token>CASE</token>, the default value is <literal>NULL</literal>.
-->
<token>CASE</token>に最後の<token>ELSE</token>句が与えられないとき、デフォルト値は<literal>NULL</literal>です。
     </para>

     <para>
<!--
      Examples:
-->
例
<programlisting>
\set ntellers 10 * :scale
\set aid (1021 * random(1, 100000 * :scale)) % \
           (100000 * :scale) + 1
\set divx CASE WHEN :x &lt;&gt; 0 THEN :y/:x ELSE NULL END
</programlisting></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>\sleep <replaceable>number</replaceable> [ us | ms | s ]</literal>
    </term>

    <listitem>
     <para>
<!--
      Causes script execution to sleep for the specified duration in
      microseconds (<literal>us</literal>), milliseconds (<literal>ms</literal>) or seconds
      (<literal>s</literal>).  If the unit is omitted then seconds are the default.
      <replaceable>number</replaceable> can be either an integer constant or a
      <literal>:</literal><replaceable>variablename</replaceable> reference to a variable
      having an integer value.
-->
スクリプトの実行をマイクロ秒（<literal>us</literal>）、ミリ秒（<literal>ms</literal>）、秒（<literal>s</literal>）単位で指定した間待機させます。
単位を省略した場合、デフォルトは秒です。
<replaceable>number</replaceable>は整数定数か整数値を持つ変数への<literal>:</literal><replaceable>variablename</replaceable>参照のいずれかです。
     </para>

     <para>
<!--
      Example:
-->
例
<programlisting>
\sleep 10 ms
</programlisting></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>\setshell <replaceable>varname</replaceable> <replaceable>command</replaceable> [ <replaceable>argument</replaceable> ... ]</literal>
    </term>

    <listitem>
     <para>
<!--
      Sets variable <replaceable>varname</replaceable> to the result of the shell command
      <replaceable>command</replaceable> with the given <replaceable>argument</replaceable>(s).
      The command must return an integer value through its standard output.
-->
<replaceable>command</replaceable>シェルコマンドを指定の<replaceable>argument</replaceable>で実行した結果を<replaceable>varname</replaceable>変数に設定します。
このコマンドは標準出力を通して整数値を返さなければなりません。
     </para>

     <para>
<!--
      <replaceable>command</replaceable> and each <replaceable>argument</replaceable> can be either
      a text constant or a <literal>:</literal><replaceable>variablename</replaceable> reference
      to a variable. If you want to use an <replaceable>argument</replaceable> starting
      with a colon, write an additional colon at the beginning of
      <replaceable>argument</replaceable>.
-->
<replaceable>command</replaceable>および各<replaceable>argument</replaceable>は、テキスト定数または変数を参照する<literal>:</literal><replaceable>variablename</replaceable>とすることができます。
コロンから始まる<replaceable>argument</replaceable>を使用したい場合、<replaceable>argument</replaceable>の先頭にさらにコロンを付けなければなりません。
     </para>

     <para>
<!--
      Example:
-->
例:
<programlisting>
\setshell variable_to_be_assigned command literal_argument :variable ::literal_starting_with_colon
</programlisting></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>\shell <replaceable>command</replaceable> [ <replaceable>argument</replaceable> ... ]</literal>
    </term>

    <listitem>
     <para>
<!--
      Same as <literal>\setshell</literal>, but the result of the command
      is discarded.
-->
<literal>\setshell</literal>と同じですが、コマンドの結果は廃棄されます。
     </para>

     <para>
<!--
      Example:
-->
例:
<programlisting>
\shell command literal_argument :variable ::literal_starting_with_colon
</programlisting></para>
    </listitem>
   </varlistentry>

   <varlistentry id='pgbench-metacommand-pipeline'>
    <term><literal>\startpipeline</literal></term>
    <term><literal>\endpipeline</literal></term>

    <listitem>
      <para>
<!--
        These commands delimit the start and end of a pipeline of SQL
        statements.  In pipeline mode, statements are sent to the server
        without waiting for the results of previous statements.  See
        <xref linkend="libpq-pipeline-mode"/> for more details.
        Pipeline mode requires the use of extended query protocol.
-->
このコマンドはSQL文のパイプラインの開始と終了を定めます。
パイプラインモードでは、文は前の文の結果を待つことなくサーバへ送られます。
より詳細は<xref linkend="libpq-pipeline-mode"/>を参照してください。
パイプラインモードでは拡張問い合わせプロトコルを使うことが必要です。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </refsect2>

 <refsect2 id="pgbench-builtin-operators">
<!--
  <title>Built-in Operators</title>
-->
  <title>組み込み演算子</title>

  <para>
<!--
   The arithmetic, bitwise, comparison and logical operators listed in
   <xref linkend="pgbench-operators"/> are built into <application>pgbench</application>
   and may be used in expressions appearing in
   <link linkend="pgbench-metacommand-set"><literal>\set</literal></link>.
   The operators are listed in increasing precedence order.
   Except as noted, operators taking two numeric inputs will produce
   a double value if either input is double, otherwise they produce
   an integer result.
-->
<xref linkend="pgbench-operators"/>に載っている算術、ビットごと、比較、論理の演算子は<application>pgbench</application>に組み込まれていて、<link linkend="pgbench-metacommand-set"><literal>\set</literal></link>の式で使用できます。
演算子は優先度の低い順に載っています。
注意書きがある場合を除いて、2つの数値を取る演算子は、入力の片方が倍精度実数であれば倍精度実数の値を結果とし、そうでなければ整数の結果になります。
  </para>

   <table id="pgbench-operators">
<!--
    <title>pgbench Operators</title>
-->
    <title>pgbenchの演算子</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Operator
-->
        演算子
       </para>
       <para>
<!--
        Description
-->
        説明
       </para>
       <para>
<!--
        Example(s)
-->
        例
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>boolean</replaceable> <literal>OR</literal> <replaceable>boolean</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
<!--
        Logical OR
-->
論理OR
       </para>
       <para>
        <literal>5 or 0</literal>
        <returnvalue>TRUE</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>boolean</replaceable> <literal>AND</literal> <replaceable>boolean</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
<!--
        Logical AND
-->
論理AND
       </para>
       <para>
        <literal>3 and 0</literal>
        <returnvalue>FALSE</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <literal>NOT</literal> <replaceable>boolean</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
<!--
        Logical NOT
-->
論理NOT
       </para>
       <para>
        <literal>not false</literal>
        <returnvalue>TRUE</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>boolean</replaceable> <literal>IS [NOT] (NULL|TRUE|FALSE)</literal>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
<!--
        Boolean value tests
-->
ブール値のテスト
       </para>
       <para>
        <literal>1 is null</literal>
        <returnvalue>FALSE</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>value</replaceable> <literal>ISNULL|NOTNULL</literal>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
<!--
        Nullness tests
-->
NULLであるかのテスト
       </para>
       <para>
        <literal>1 notnull</literal>
        <returnvalue>TRUE</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>=</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
<!--
        Equal
-->
等価
       </para>
       <para>
        <literal>5 = 4</literal>
        <returnvalue>FALSE</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>&lt;&gt;</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
<!--
        Not equal
-->
不等
       </para>
       <para>
        <literal>5 &lt;&gt; 4</literal>
        <returnvalue>TRUE</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>!=</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
<!--
        Not equal
-->
不等
       </para>
       <para>
        <literal>5 != 5</literal>
        <returnvalue>FALSE</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>&lt;</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
<!--
        Less than
-->
より小さい
       </para>
       <para>
        <literal>5 &lt; 4</literal>
        <returnvalue>FALSE</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>&lt;=</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
<!--
        Less than or equal to
-->
以下
       </para>
       <para>
        <literal>5 &lt;= 4</literal>
        <returnvalue>FALSE</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>&gt;</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
<!--
        Greater than
-->
より大きい
       </para>
       <para>
        <literal>5 &gt; 4</literal>
        <returnvalue>TRUE</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>&gt;=</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
<!--
        Greater than or equal to
-->
以上
       </para>
       <para>
        <literal>5 &gt;= 4</literal>
        <returnvalue>TRUE</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>integer</replaceable> <literal>|</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
<!--
        Bitwise OR
-->
ビット毎のOR
       </para>
       <para>
        <literal>1 | 2</literal>
        <returnvalue>3</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>integer</replaceable> <literal>#</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
<!--
        Bitwise XOR
-->
ビット毎のXOR
       </para>
       <para>
        <literal>1 # 3</literal>
        <returnvalue>2</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>integer</replaceable> <literal>&amp;</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
<!--
        Bitwise AND
-->
ビット毎のAND
       </para>
       <para>
        <literal>1 &amp; 3</literal>
        <returnvalue>1</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <literal>~</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
<!--
        Bitwise NOT
-->
ビット毎のNOT
       </para>
       <para>
        <literal>~ 1</literal>
        <returnvalue>-2</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>integer</replaceable> <literal>&lt;&lt;</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
<!--
        Bitwise shift left
-->
ビット毎の左シフト
       </para>
       <para>
        <literal>1 &lt;&lt; 2</literal>
        <returnvalue>4</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>integer</replaceable> <literal>&gt;&gt;</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
<!--
        Bitwise shift right
-->
ビット毎の右シフト
       </para>
       <para>
        <literal>8 &gt;&gt; 2</literal>
        <returnvalue>2</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>+</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>number</replaceable></returnvalue>
       </para>
       <para>
<!--
        Addition
-->
加算
       </para>
       <para>
        <literal>5 + 4</literal>
        <returnvalue>9</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>-</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>number</replaceable></returnvalue>
       </para>
       <para>
<!--
        Subtraction
-->
減算
       </para>
       <para>
        <literal>3 - 2.0</literal>
        <returnvalue>1.0</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>*</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>number</replaceable></returnvalue>
       </para>
       <para>
<!--
        Multiplication
-->
乗算
       </para>
       <para>
        <literal>5 * 4</literal>
        <returnvalue>20</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>/</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>number</replaceable></returnvalue>
       </para>
       <para>
<!--
        Division (truncates the result towards zero if both inputs are integers)
-->
除算(入力が両方とも整数であれば、結果は0に向けて丸められる)
       </para>
       <para>
        <literal>5 / 3</literal>
        <returnvalue>1</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>integer</replaceable> <literal>%</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
<!--
        Modulo (remainder)
-->
剰余(余り)
       </para>
       <para>
        <literal>3 % 2</literal>
        <returnvalue>1</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <literal>-</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>number</replaceable></returnvalue>
       </para>
       <para>
<!--
        Negation
-->
符号反転
       </para>
       <para>
        <literal>- 2.0</literal>
        <returnvalue>-2.0</returnvalue>
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
 </refsect2>

 <refsect2 id="pgbench-builtin-functions">
<!--
  <title>Built-In Functions</title>
-->
  <title>組み込み関数</title>

  <para>
<!--
   The functions listed in <xref linkend="pgbench-functions"/> are built
   into <application>pgbench</application> and may be used in expressions appearing in
   <link linkend="pgbench-metacommand-set"><literal>\set</literal></link>.
-->
<xref linkend="pgbench-functions"/>に示す関数は<application>pgbench</application>に組み込まれており、<link linkend="pgbench-metacommand-set"><literal>\set</literal></link>に現れる式の中で使うことができます。
  </para>

   <!-- list pgbench functions in alphabetical order -->
   <table id="pgbench-functions">
<!--
    <title>pgbench Functions</title>
-->
    <title>pgbenchの関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
        関数
       </para>
       <para>
<!--
        Description
-->
        説明
       </para>
       <para>
<!--
        Example(s)
-->
        例
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>abs</function> ( <replaceable>number</replaceable> )
<!--
        <returnvalue></returnvalue> same type as input
-->
        <returnvalue></returnvalue>入力と同じ型
       </para>
       <para>
<!--
        Absolute value
-->
絶対値
       </para>
       <para>
        <literal>abs(-17)</literal>
        <returnvalue>17</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>debug</function> ( <replaceable>number</replaceable> )
<!--
        <returnvalue></returnvalue> same type as input
-->
        <returnvalue></returnvalue>入力と同じ型
       </para>
       <para>
<!--
        Prints the argument to <systemitem>stderr</systemitem>,
        and returns the argument.
-->
引数を<systemitem>stderr</systemitem>に出力し、引数を返す。
       </para>
       <para>
        <literal>debug(5432.1)</literal>
        <returnvalue>5432.1</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>double</function> ( <replaceable>number</replaceable> )
        <returnvalue>double</returnvalue>
       </para>
       <para>
<!--
        Casts to double.
-->
倍精度実数にキャストする。
       </para>
       <para>
        <literal>double(5432)</literal>
        <returnvalue>5432.0</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>exp</function> ( <replaceable>number</replaceable> )
        <returnvalue>double</returnvalue>
       </para>
       <para>
<!--
        Exponential (<literal>e</literal> raised to the given power)
-->
指数(<literal>e</literal>の指定した冪)
       </para>
       <para>
        <literal>exp(1.0)</literal>
        <returnvalue>2.718281828459045</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>greatest</function> ( <replaceable>number</replaceable> <optional>, <literal>...</literal> </optional> )
        <returnvalue></returnvalue> <type>double</type> if any argument is double, else <type>integer</type>
       </para>
       <para>
<!--
        Selects the largest value among the arguments.
-->
引数の中で最大の値を選択する。
       </para>
       <para>
        <literal>greatest(5, 4, 3, 2)</literal>
        <returnvalue>5</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>hash</function> ( <parameter>value</parameter> <optional>, <parameter>seed</parameter> </optional> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        This is an alias for <function>hash_murmur2</function>.
-->
これは<function>hash_murmur2</function>の別名です。
       </para>
       <para>
        <literal>hash(10, 5432)</literal>
        <returnvalue>-5817877081768721676</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>hash_fnv1a</function> ( <parameter>value</parameter> <optional>, <parameter>seed</parameter> </optional> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Computes <ulink url="https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function">FNV-1a hash</ulink>.
-->
<ulink url="https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function">FNV-1aハッシュ</ulink>を計算する。
       </para>
       <para>
        <literal>hash_fnv1a(10, 5432)</literal>
        <returnvalue>-7793829335365542153</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>hash_murmur2</function> ( <parameter>value</parameter> <optional>, <parameter>seed</parameter> </optional> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Computes <ulink url="https://en.wikipedia.org/wiki/MurmurHash">MurmurHash2 hash</ulink>.
-->
<ulink url="https://en.wikipedia.org/wiki/MurmurHash">MurmurHash2ハッシュ</ulink>を計算する。
       </para>
       <para>
        <literal>hash_murmur2(10, 5432)</literal>
        <returnvalue>-5817877081768721676</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>int</function> ( <replaceable>number</replaceable> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Casts to integer.
-->
整数にキャストする。
       </para>
       <para>
        <literal>int(5.4 + 3.8)</literal>
        <returnvalue>9</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>least</function> ( <replaceable>number</replaceable> <optional>, <literal>...</literal> </optional> )
        <returnvalue></returnvalue> <type>double</type> if any argument is double, else <type>integer</type>
       </para>
       <para>
<!--
        Selects the smallest value among the arguments.
-->
引数の中で最小の値を選択する。
       </para>
       <para>
        <literal>least(5, 4, 3, 2.1)</literal>
        <returnvalue>2.1</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>ln</function> ( <replaceable>number</replaceable> )
        <returnvalue>double</returnvalue>
       </para>
       <para>
<!--
        Natural logarithm
-->
自然対数
       </para>
       <para>
        <literal>ln(2.718281828459045)</literal>
        <returnvalue>1.0</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
<function>mod</function> ( <replaceable>integer</replaceable>, <replaceable>integer</replaceable> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Modulo (remainder)
-->
剰余(余り)
       </para>
       <para>
        <literal>mod(54, 32)</literal>
        <returnvalue>22</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>permute</function> ( <parameter>i</parameter>, <parameter>size</parameter> [, <parameter>seed</parameter> ] )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Permuted value of <parameter>i</parameter>, in the range
        <literal>[0, size)</literal>.  This is the new position of
        <parameter>i</parameter> (modulo <parameter>size</parameter>) in a
        pseudorandom permutation of the integers <literal>0...size-1</literal>,
        parameterized by <parameter>seed</parameter>, see below.
-->
<literal>[0, size)</literal>の範囲での、<parameter>i</parameter>の置換された値。
これは、<parameter>seed</parameter>によりパラメータ化された、整数<literal>0...size-1</literal>の疑似ランダム置換での<parameter>i</parameter> (modulo <parameter>size</parameter>)の新しい位置です。以下を参照してください。
       </para>
       <para>
        <literal>permute(0, 4)</literal>
<!--
        <returnvalue>an integer between 0 and 3</returnvalue>
-->
        <returnvalue>0から3の間の整数</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>pi</function> ()
        <returnvalue>double</returnvalue>
       </para>
       <para>
<!--
        Approximate value of <phrase role="symbol_font">&pi;</phrase>
-->
<phrase role="symbol_font">&pi;</phrase>の近似値
       </para>
       <para>
        <literal>pi()</literal>
        <returnvalue>3.14159265358979323846</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>pow</function> ( <parameter>x</parameter>, <parameter>y</parameter> )
        <returnvalue>double</returnvalue>
       </para>
       <para role="func_signature">
        <function>power</function> ( <parameter>x</parameter>, <parameter>y</parameter> )
        <returnvalue>double</returnvalue>
       </para>
       <para>
<!--
        <parameter>x</parameter> raised to the power of <parameter>y</parameter>
-->
<parameter>x</parameter>の<parameter>y</parameter>乗
       </para>
       <para>
        <literal>pow(2.0, 10)</literal>
        <returnvalue>1024.0</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>random</function> ( <parameter>lb</parameter>, <parameter>ub</parameter> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Computes a uniformly-distributed random integer in <literal>[lb,
        ub]</literal>.
-->
<literal>[lb, ub]</literal>内の一様分布の整数の乱数を計算する。
       </para>
       <para>
        <literal>random(1, 10)</literal>
<!--
        <returnvalue>an integer between 1 and 10</returnvalue>
-->
        <returnvalue>1と10の間の整数</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>random_exponential</function> ( <parameter>lb</parameter>, <parameter>ub</parameter>, <parameter>parameter</parameter> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Computes an exponentially-distributed random integer in <literal>[lb,
        ub]</literal>, see below.
-->
<literal>[lb, ub]</literal>内の指数分布の整数の乱数を計算する、後述。
       </para>
       <para>
        <literal>random_exponential(1, 10, 3.0)</literal>
<!--
        <returnvalue>an integer between 1 and 10</returnvalue>
-->
        <returnvalue>1と10の間の整数</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>random_gaussian</function> ( <parameter>lb</parameter>, <parameter>ub</parameter>, <parameter>parameter</parameter> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Computes a Gaussian-distributed random integer in <literal>[lb,
        ub]</literal>, see below.
-->
<literal>[lb, ub]</literal>内のガウス分布の整数の乱数を計算する、後述。
       </para>
       <para>
        <literal>random_gaussian(1, 10, 2.5)</literal>
<!--
        <returnvalue>an integer between 1 and 10</returnvalue>
-->
        <returnvalue>1と10の間の整数</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>random_zipfian</function> ( <parameter>lb</parameter>, <parameter>ub</parameter>, <parameter>parameter</parameter> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Computes a Zipfian-distributed random integer in <literal>[lb,
        ub]</literal>, see below.
-->
<literal>[lb, ub]</literal>内のジップ分布の整数の乱数を計算する、後述。
       </para>
       <para>
        <literal>random_zipfian(1, 10, 1.5)</literal>
<!--
        <returnvalue>an integer between 1 and 10</returnvalue>
-->
        <returnvalue>1と10の間の整数</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>sqrt</function> ( <replaceable>number</replaceable> )
        <returnvalue>double</returnvalue>
       </para>
       <para>
<!--
        Square root
-->
平方根
       </para>
       <para>
        <literal>sqrt(2.0)</literal>
        <returnvalue>1.414213562</returnvalue>
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    The <literal>random</literal> function generates values using a uniform
    distribution, that is all the values are drawn within the specified
    range with equal probability. The <literal>random_exponential</literal>,
    <literal>random_gaussian</literal> and <literal>random_zipfian</literal>
    functions require an additional double parameter which determines the precise
    shape of the distribution.
-->
<literal>random</literal>関数は一様分布を使って値を生成します。
つまり、すべての値は指定された範囲内で同じ確率で発生します。
<literal>random_exponential</literal>、<literal>random_gaussian</literal>、および、<literal>random_zipfian</literal>関数は追加の倍精度実数のパラメータを必要とし、それによって分布の正確な形が決まります。
   </para>

   <itemizedlist>
    <listitem>
     <para>
<!--
      For an exponential distribution, <replaceable>parameter</replaceable>
      controls the distribution by truncating a quickly-decreasing
      exponential distribution at <replaceable>parameter</replaceable>, and then
      projecting onto integers between the bounds.
      To be precise, with
-->
指数分布では、<replaceable>parameter</replaceable>が分布を制御します。
急速に減少する指数分布を<replaceable>parameter</replaceable>で切り捨て、境界範囲内の整数に射影します。
正確には、以下の式に従います。
<literallayout>
f(x) = exp(-parameter * (x - min) / (max - min + 1)) / (1 - exp(-parameter))
</literallayout>
<!--
      Then value <replaceable>i</replaceable> between <replaceable>min</replaceable> and
      <replaceable>max</replaceable> inclusive is drawn with probability:
      <literal>f(i) - f(i + 1)</literal>.
-->
これにより、<replaceable>min</replaceable>と<replaceable>max</replaceable>の間（両端を含む）の間の値<replaceable>i</replaceable>が<literal>f(i) - f(i + 1)</literal>の確率で生成されます。
     </para>

     <para>
<!--
      Intuitively, the larger the <replaceable>parameter</replaceable>, the more
      frequently values close to <replaceable>min</replaceable> are accessed, and the
      less frequently values close to <replaceable>max</replaceable> are accessed.
      The closer to 0 <replaceable>parameter</replaceable> is, the flatter (more
      uniform) the access distribution.
      A crude approximation of the distribution is that the most frequent 1%
      values in the range, close to <replaceable>min</replaceable>, are drawn
      <replaceable>parameter</replaceable>% of the time.
      The <replaceable>parameter</replaceable> value must be strictly positive.
-->
直感的には、<replaceable>parameter</replaceable>が大きければ、<replaceable>min</replaceable>に近い値が発生する確率が高くなり、<replaceable>max</replaceable>に近い値が発生する確率が低くなります。
<replaceable>parameter</replaceable>が0に近ければ、発生の分布はより平ら（より一様）になります。
大雑把に分布を近似すると、<replaceable>min</replaceable>に近い最頻の1%の範囲の値は、<replaceable>parameter</replaceable>%の割合で発生します。
<replaceable>parameter</replaceable>の値は厳密に正でなければなりません。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      For a Gaussian distribution, the interval is mapped onto a standard
      normal distribution (the classical bell-shaped Gaussian curve) truncated
      at <literal>-parameter</literal> on the left and <literal>+parameter</literal>
      on the right.
      Values in the middle of the interval are more likely to be drawn.
      To be precise, if <literal>PHI(x)</literal> is the cumulative distribution
      function of the standard normal distribution, with mean <literal>mu</literal>
      defined as <literal>(max + min) / 2.0</literal>, with
-->
ガウス分布では、標準的な正規分布（古典的なベルの形をしたガウス曲線）で、左に<literal>-parameter</literal>、右に<literal>+parameter</literal>のところで切り捨てられたものに間隔が射影されます。
間隔の中間の値が発生する確率が最も高くなります。
正確に言うと、<literal>PHI(x)</literal>は標準正規分布の累積分布関数、平均値<literal>mu</literal>を<literal>(max + min) / 2.0</literal>と定義し、さらに
<literallayout>
f(x) = PHI(2.0 * parameter * (x - mu) / (max - min + 1)) /
       (2.0 * PHI(parameter) - 1)
</literallayout>
<!--
      then value <replaceable>i</replaceable> between <replaceable>min</replaceable> and
      <replaceable>max</replaceable> inclusive is drawn with probability:
      <literal>f(i + 0.5) - f(i - 0.5)</literal>.
      Intuitively, the larger the <replaceable>parameter</replaceable>, the more
      frequently values close to the middle of the interval are drawn, and the
      less frequently values close to the <replaceable>min</replaceable> and
      <replaceable>max</replaceable> bounds. About 67% of values are drawn from the
      middle <literal>1.0 / parameter</literal>, that is a relative
      <literal>0.5 / parameter</literal> around the mean, and 95% in the middle
      <literal>2.0 / parameter</literal>, that is a relative
      <literal>1.0 / parameter</literal> around the mean; for instance, if
      <replaceable>parameter</replaceable> is 4.0, 67% of values are drawn from the
      middle quarter (1.0 / 4.0) of the interval (i.e., from
      <literal>3.0 / 8.0</literal> to <literal>5.0 / 8.0</literal>) and 95% from
      the middle half (<literal>2.0 / 4.0</literal>) of the interval (second and third
      quartiles). The minimum allowed <replaceable>parameter</replaceable>
      value is 2.0.
-->
とすると、<replaceable>min</replaceable>と<replaceable>max</replaceable>の間（両端を含む）の値<replaceable>i</replaceable>が発生する確率は<literal>f(i + 0.5) - f(i - 0.5)</literal>になります。
直感的には、<replaceable>parameter</replaceable>が大きくなれば、間隔の中間に近い値になる確率が高く、また、<replaceable>min</replaceable>と<replaceable>max</replaceable>の境界に近い値になる確率は低くなります。
約67%の値は、中間の<literal>1.0 / parameter</literal>の範囲、つまり平均値から<literal>0.5 / parameter</literal>の範囲から、また95%は中間の<literal>2.0 / parameter</literal>の範囲、つまり平均値から<literal>1.0 / parameter</literal>の範囲に発生します。
例えば<replaceable>parameter</replaceable>が4.0なら、67%の値は間隔の中間の4分の1(1.0/4.0)から（つまり<literal>3.0 / 8.0</literal>から<literal>5.0 / 8.0</literal>まで）、95%は間隔の中間の半分（<literal>2.0 / 4.0</literal>）から（2番目と3番目の四分位）から発生します。
許される最小の<replaceable>parameter</replaceable>値は2.0です。
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      <literal>random_zipfian</literal> generates a bounded Zipfian
      distribution.
      <replaceable>parameter</replaceable> defines how skewed the distribution
      is. The larger the <replaceable>parameter</replaceable>, the more
      frequently values closer to the beginning of the interval are drawn.
      The distribution is such that, assuming the range starts from 1,
      the ratio of the probability of drawing <replaceable>k</replaceable>
      versus drawing <replaceable>k+1</replaceable> is
      <literal>((<replaceable>k</replaceable>+1)/<replaceable>k</replaceable>)**<replaceable>parameter</replaceable></literal>.
      For example, <literal>random_zipfian(1, ..., 2.5)</literal> produces
      the value <literal>1</literal> about <literal>(2/1)**2.5 =
      5.66</literal> times more frequently than <literal>2</literal>, which
      itself is produced <literal>(3/2)**2.5 = 2.76</literal> times more
      frequently than <literal>3</literal>, and so on.
-->
<literal>random_zipfian</literal>は制限付きのジップ分布を生成します。
<replaceable>parameter</replaceable>はどれほど歪んだ分布かを定義します。
より大きい<replaceable>parameter</replaceable>ほど、より高頻度に区間の始点に近い値が描かれます。
範囲が1から始まるとして、<replaceable>k</replaceable>を描く確率と<replaceable>k+1</replaceable>を描く確率の比が<literal>((<replaceable>k</replaceable>+1)/<replaceable>k</replaceable>)**<replaceable>parameter</replaceable></literal>という分布になります。
例えば、<literal>random_zipfian(1, ..., 2.5)</literal>は、値<literal>1</literal>を<literal>2</literal>の約<literal>(2/1)**2.5 = 5.66</literal>倍高い頻度で生成し、値<literal>2</literal>を<literal>3</literal>の約<literal>(3/2)**2.5 = 2.76</literal>倍高い頻度で生成し、以下同様に続きます。
     </para>
     <para>
<!--
      <application>pgbench</application>'s implementation is based on
      "Non-Uniform Random Variate Generation", Luc Devroye, p. 550-551,
      Springer 1986.  Due to limitations of that algorithm,
      the <replaceable>parameter</replaceable> value is restricted to
      the range [1.001, 1000].
-->
<application>pgbench</application>の実装は「Non-Uniform Random Variate Generation」Luc Devroye(Springer 1986, p. 550-551)に基づいており、<replaceable>parameter</replaceable>値は[1.001, 1000]の範囲に限定されています。
     </para>
    </listitem>
   </itemizedlist>

   <note>
    <para>
<!--
      When designing a benchmark which selects rows non-uniformly, be aware
      that the rows chosen may be correlated with other data such as IDs from
      a sequence or the physical row ordering, which may skew performance
      measurements.
-->
行を一様にではなく選択するベンチマークを設計する場合には、選択された行がシーケンスのIDなどの他のデータや物理的な行の順序と相関があるかもしれないことに気をつけてください。相関があれば性能の測定をゆがめてしまうかもしれません。
    </para>
    <para>
<!--
      To avoid this, you may wish to use the <function>permute</function>
      function, or some other additional step with similar effect, to shuffle
      the selected rows and remove such correlations.
-->
これを避けるために、<function>permute</function>関数や同様の効果のある他の追加の手順を使って、選択される行をシャッフルし、そのような相関を取り除きたいと思うかもしれません。
    </para>
   </note>

  <para>
<!--
    Hash functions <literal>hash</literal>, <literal>hash_murmur2</literal> and
    <literal>hash_fnv1a</literal> accept an input value and an optional seed parameter.
    In case the seed isn't provided the value of <literal>:default_seed</literal>
    is used, which is initialized randomly unless set by the command-line
    <literal>-D</literal> option.
-->
ハッシュ関数<literal>hash</literal>、<literal>hash_murmur2</literal>および<literal>hash_fnv1a</literal>は入力値とオプションシードパラメータを受け付けます。
シードが与えられなかった場合、<literal>:default_seed</literal>の値が使われます。これは、コマンドライン<literal>-D</literal>オプションで設定されない限りランダムに初期化されたものです。
  </para>

  <para>
<!---
    <literal>permute</literal> accepts an input value, a size, and an optional
    seed parameter.  It generates a pseudorandom permutation of integers in
    the range <literal>[0, size)</literal>, and returns the index of the input
    value in the permuted values.  The permutation chosen is parameterized by
    the seed, which defaults to <literal>:default_seed</literal>, if not
    specified.  Unlike the hash functions, <literal>permute</literal> ensures
    that there are no collisions or holes in the output values.  Input values
    outside the interval are interpreted modulo the size.  The function raises
    an error if the size is not positive.  <function>permute</function> can be
    used to scatter the distribution of non-uniform random functions such as
    <literal>random_zipfian</literal> or <literal>random_exponential</literal>
    so that values drawn more often are not trivially correlated.  For
    instance, the following <application>pgbench</application> script
    simulates a possible real world workload typical for social media and
    blogging platforms where a few accounts generate excessive load:
-->
<literal>permute</literal>は入力値、サイズ、オプションのシードパラメータを受け付けます。
<literal>[0, size)</literal>の範囲での整数の疑似ランダム置換を生成し、置換された値で入力値のインデックスを返します。
選択される置換はシードでパラメータ化されていて、指定されていなければシードのデフォルトは<literal>:default_seed</literal>です。
ハッシュ関数とは異なり、出力の値に衝突や穴が存在しないことは<literal>permute</literal>では確実です。
間隔の外の入力値はサイズの剰余として解釈されます。
サイズが正でなければ関数はエラーを起こします。
<function>permute</function>は、より頻繁に取り出される値が単純な相関を持たないように<literal>random_zipfian</literal>や<literal>random_exponential</literal>のような非一様ランダム関数の分布を散らすのに使えます。
例えば、以下の<application>pgbench</application>スクリプトは、僅かなアカウントが過大な負荷をかけるというソーシャルメディアやブログプラットフォームで起こりえる現実世界の典型的な負荷をシミュレートします。 

<programlisting>
\set size 1000000
\set r random_zipfian(1, :size, 1.07)
\set k 1 + permute(:r, :size)
</programlisting>

<!--
    In some cases several distinct distributions are needed which don't correlate
    with each other and this is when the optional seed parameter comes in handy:
-->
一部のケースでは、互いに無関係ないくつかの異なる分布が必要で、これはオプションのシードパラメータが役立ちます。

<programlisting>
\set k1 1 + permute(:r, :size, :default_seed + 123)
\set k2 1 + permute(:r, :size, :default_seed + 321)
</programlisting>

<!--
    A similar behavior can also be approximated with <function>hash</function>:
-->
同様の振舞いは<function>hash</function>でも近似できます。

<programlisting>
\set size 1000000
\set r random_zipfian(1, 100 * :size, 1.07)
\set k 1 + abs(hash(:r)) % :size
</programlisting>

<!--
    However, since <function>hash</function> generates collisions, some values
    will not be reachable and others will be more frequent than expected from
    the original distribution.
-->
しかしながら、<function>hash</function>は衝突を生成しますので、いくつかの値は到達不能であり、他の値は元の分布から予想されるよりもより頻繁に出現することになります。
  </para>

  <para>
<!--
   As an example, the full definition of the built-in TPC-B-like
   transaction is:
-->
例えば、組み込みのTPC-Bのようなトランザクションの完全な定義を示します。

<programlisting>
\set aid random(1, 100000 * :scale)
\set bid random(1, 1 * :scale)
\set tid random(1, 10 * :scale)
\set delta random(-5000, 5000)
BEGIN;
UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
END;
</programlisting>

<!--
   This script allows each iteration of the transaction to reference
   different, randomly-chosen rows.  (This example also shows why it's
   important for each client session to have its own variables &mdash;
   otherwise they'd not be independently touching different rows.)
-->
 このスクリプトにより、トランザクションを繰り返す度に異なる、ランダムに選ばれた行を参照することができます。
 （この例はまた、各クライアントセッションがなぜ独自の変数を持つことが重要なのかも表しています。
 これがないと、異なる行を独立して参照することができないのです。）
  </para>

 </refsect2>

 <refsect2>
<!--
  <title>Per-Transaction Logging</title>
-->
  <title>トランザクション毎のログ処理</title>

  <para>
<!--
   With the <option>-l</option> option (but without
   the <option>&#045;&#045;aggregate-interval</option> option),
   <application>pgbench</application> writes information about each transaction
   to a log file.  The log file will be named
   <filename><replaceable>prefix</replaceable>.<replaceable>nnn</replaceable></filename>,
   where <replaceable>prefix</replaceable> defaults to <literal>pgbench_log</literal>, and
   <replaceable>nnn</replaceable> is the PID of the
   <application>pgbench</application> process.
   The prefix can be changed by using the <option>&#045;&#045;log-prefix</option> option.
   If the <option>-j</option> option is 2 or higher, so that there are multiple
   worker threads, each will have its own log file. The first worker will
   use the same name for its log file as in the standard single worker case.
   The additional log files for the other workers will be named
   <filename><replaceable>prefix</replaceable>.<replaceable>nnn</replaceable>.<replaceable>mmm</replaceable></filename>,
   where <replaceable>mmm</replaceable> is a sequential number for each worker starting
   with 1.
-->
（<option>--aggregate-interval</option>オプションなしで）<option>-l</option>オプションを使用すると、<application>pgbench</application>は各トランザクションに関する情報をログファイルに書き出します。
ログファイルの名前は<filename><replaceable>prefix</replaceable>.<replaceable>nnn</replaceable></filename>で、<replaceable>prefix</replaceable>のデフォルトは<literal>pgbench_log</literal>、<replaceable>nnn</replaceable>は<application>pgbench</application>プロセスのPIDです。
ファイル名の先頭の文字列は<option>--log-prefix</option>オプションを使って変更することができます。
<option>-j</option>オプションが2以上で複数のワーカスレッドがある場合、それぞれが独自のログファイルを持つことになります。
最初のワーカは標準的な単一ワーカの場合と同じ名前を持つログファイルを使用します。
他のワーカ用の追加のログファイルは<filename><replaceable>prefix</replaceable>.<replaceable>nnn</replaceable>.<replaceable>mmm</replaceable></filename>と命名され、ここで<replaceable>mmm</replaceable>は1から始まる各ワーカの連番です。
  </para>

  <para>
<!--
   The format of the log is:
-->
ログの書式は以下の通りです。

<synopsis>
<replaceable>client_id</replaceable> <replaceable>transaction_no</replaceable> <replaceable>time</replaceable> <replaceable>script_no</replaceable> <replaceable>time_epoch</replaceable> <replaceable>time_us</replaceable> <optional> <replaceable>schedule_lag</replaceable> </optional>
</synopsis>

<!--
   where
   <replaceable>client_id</replaceable> indicates which client session ran the transaction,
   <replaceable>transaction_no</replaceable> counts how many transactions have been
   run by that session,
   <replaceable>time</replaceable> is the total elapsed transaction time in microseconds,
   <replaceable>script_no</replaceable> identifies which script file was used (useful when
   multiple scripts were specified with <option>-f</option> or <option>-b</option>),
   and <replaceable>time_epoch</replaceable>/<replaceable>time_us</replaceable> are a
   Unix-epoch time stamp and an offset
   in microseconds (suitable for creating an ISO 8601
   time stamp with fractional seconds) showing when
   the transaction completed.
   The <replaceable>schedule_lag</replaceable> field is the difference between the
   transaction's scheduled start time, and the time it actually started, in
   microseconds. It is only present when the <option>&#045;&#045;rate</option> option is used.
   When both <option>&#045;&#045;rate</option> and <option>&#045;&#045;latency-limit</option> are used,
   the <replaceable>time</replaceable> for a skipped transaction will be reported as
   <literal>skipped</literal>.
-->
<replaceable>client_id</replaceable>はどのクライアントセッションがそのトランザクションを実行したかを示します。
<replaceable>transaction_no</replaceable>はそのセッションで何個のトランザクションが実行されたかを示します。
<replaceable>time</replaceable>はトランザクションの合計消費時間をマイクロ秒単位で示します。
<replaceable>script_no</replaceable>はどのスクリプトファイルが使用されたかを識別するものです（<option>-f</option>または<option>-b</option>で複数のスクリプトが指定された場合に有用です）。
<replaceable>time_epoch</replaceable>/<replaceable>time_us</replaceable>はトランザクション完了時のUnixエポック時間とマイクロ秒単位のオフセットです（小数秒付きのISO 8601タイムスタンプの作成に適します）。
<replaceable>schedule_lag</replaceable>フィールドは、マイクロ秒単位のトランザクションの予定開始時刻と実開始時刻の差です。
これは<option>--rate</option>オプションを使用した時だけ表示されます。
<option>--rate</option>と<option>--latency-limit</option>の両方のオプションを使用した時は、スキップされたトランザクションの<replaceable>time</replaceable>が<literal>skipped</literal>として表示されます。
  </para>

  <para>
<!--
   Here is a snippet of a log file generated in a single-client run:
-->
単一クライアントでの実行で生成されたログファイルの一部を示します。
<screen>
0 199 2241 0 1175850568 995598
0 200 2465 0 1175850568 998079
0 201 2513 0 1175850569 608
0 202 2038 0 1175850569 2663
</screen>

<!--
   Another example with <literal>&#045;&#045;rate=100</literal>
   and <literal>&#045;&#045;latency-limit=5</literal> (note the additional
   <replaceable>schedule_lag</replaceable> column):
-->
<literal>--rate=100</literal>と<literal>--latency-limit=5</literal>を指定した例を示します。(<replaceable>schedule_lag</replaceable>列が追加されていることに注意)
<screen>
0 81 4621 0 1412881037 912698 3005
0 82 6173 0 1412881037 914578 4304
0 83 skipped 0 1412881037 914578 5217
0 83 skipped 0 1412881037 914578 5099
0 83 4722 0 1412881037 916203 3108
0 84 4142 0 1412881037 918023 2333
0 85 2465 0 1412881037 919759 740
</screen>
<!--
   In this example, transaction 82 was late, because its latency (6.173 ms) was
   over the 5 ms limit. The next two transactions were skipped, because they
   were already late before they were even started.
-->
この例では、トランザクション82は遅延(6.173ミリ秒)が5ミリ秒を越えており、遅れています。
次の2つのトランザクションは、開始する前にすでに遅れてしまっているため、スキップされています。
  </para>

  <para>
<!--
   When running a long test on hardware that can handle a lot of transactions,
   the log files can become very large.  The <option>&#045;&#045;sampling-rate</option> option
   can be used to log only a random sample of transactions.
-->
大量のトランザクションを処理することができるハードウェアで長時間試験を実行する場合、ログファイルは非常に大きくなる可能性があります。
<option>--sampling-rate</option>オプションを使用して、トランザクションのランダムなサンプルだけをログに記録することができます。
  </para>
 </refsect2>

 <refsect2>
<!--
  <title>Aggregated Logging</title>
-->
  <title>ログ処理の集約</title>

  <para>
<!--
   With the <option>&#045;&#045;aggregate-interval</option> option, a different
   format is used for the log files:
-->
<option>--aggregate-interval</option>オプションを付ける場合、以下のようにログの書式が異なります。

<synopsis>
<replaceable>interval_start</replaceable> <replaceable>num_transactions</replaceable>&zwsp; <replaceable>sum_latency</replaceable> <replaceable>sum_latency_2</replaceable> <replaceable>min_latency</replaceable> <replaceable>max_latency</replaceable>&zwsp; <optional> <replaceable>sum_lag</replaceable> <replaceable>sum_lag_2</replaceable> <replaceable>min_lag</replaceable> <replaceable>max_lag</replaceable> <optional> <replaceable>skipped</replaceable> </optional> </optional>
</synopsis>

<!--
   where
   <replaceable>interval_start</replaceable> is the start of the interval (as a Unix
   epoch time stamp),
   <replaceable>num_transactions</replaceable> is the number of transactions
   within the interval,
   <replaceable>sum_latency</replaceable> is the sum of the transaction
   latencies within the interval,
   <replaceable>sum_latency_2</replaceable> is the sum of squares of the
   transaction latencies within the interval,
   <replaceable>min_latency</replaceable> is the minimum latency within the interval,
   and
   <replaceable>max_latency</replaceable> is the maximum latency within the interval.
   The next fields,
   <replaceable>sum_lag</replaceable>, <replaceable>sum_lag_2</replaceable>, <replaceable>min_lag</replaceable>,
   and <replaceable>max_lag</replaceable>, are only present if the <option>&#045;&#045;rate</option>
   option is used.
   They provide statistics about the time each transaction had to wait for the
   previous one to finish, i.e., the difference between each transaction's
   scheduled start time and the time it actually started.
   The very last field, <replaceable>skipped</replaceable>,
   is only present if the <option>&#045;&#045;latency-limit</option> option is used, too.
   It counts the number of transactions skipped because they would have
   started too late.
   Each transaction is counted in the interval when it was committed.
-->
<replaceable>interval_start</replaceable>はインターバルの開始時刻（Unixエポック時間）です。
<replaceable>num_of_transactions</replaceable>はインターバル内のトランザクション数です。
<replaceable>latency_sum</replaceable>はインターバル内のトランザクションレイテンシの総和です。
<replaceable>sum_latency_2</replaceable>はインターバル内のトランザクションレイテンシの2乗の総和です。
<replaceable>min_latency</replaceable>はインターバル内の最小レイテンシです。
<replaceable>max_latency</replaceable>はインターバル内の最大レイテンシです。
これに続くフィールド<replaceable>sum_lag</replaceable>、<replaceable>sum_lag_2</replaceable>、<replaceable>min_lag</replaceable>、<replaceable>max_lag</replaceable>は<option>--rate</option>オプションが指定された場合にのみ表示されます。
これらは、各トランザクションが直前のトランザクションの終了を待機しなければならなかった時間、つまりトランザクションの予定開始時刻と実際の開始時刻の差に関する統計を提供します。
一番最後のフィールド<replaceable>skipped</replaceable>は<option>--latency-limit</option>オプションも使用されたときにのみ表示されます。
これは開始時刻が遅くなったためにスキップされたトランザクションの数を数えます。
各トランザクションはインターバル内でコミットされた時に数えられます。
  </para>

  <para>
<!--
   Here is some example output:
-->
いくつか出力例を示します。
<screen>
1345828501 5601 1542744 483552416 61 2573
1345828503 7884 1979812 565806736 60 1479
1345828505 7208 1979422 567277552 59 1391
1345828507 7685 1980268 569784714 60 1398
1345828509 7073 1979779 573489941 236 1411
</screen></para>

  <para>
<!--
   Notice that while the plain (unaggregated) log file shows which script
   was used for each transaction, the aggregated log does not. Therefore if
   you need per-script data, you need to aggregate the data on your own.
-->
通常の（集約されていない）ログファイルは、各トランザクションについてどのスクリプトファイルが使用されたかを示しますが、集約されたログにはそれがないことに注意してください。
このためスクリプト単位のデータが必要な場合は、自身でデータを集約する必要があります。
  </para>

 </refsect2>

 <refsect2>
<!--
  <title>Per-Statement Latencies</title>
-->
  <title>ステートメント毎のレイテンシ</title>

  <para>
<!--
   With the <option>-r</option> option, <application>pgbench</application> collects
   the elapsed transaction time of each statement executed by every
   client.  It then reports an average of those values, referred to
   as the latency for each statement, after the benchmark has finished.
-->
<option>-r</option>オプションを付けると、<application>pgbench</application>は各クライアントにより実行されたトランザクションのステートメント毎の経過時間を収集します。
ベンチマークが終了した後、各値の平均値(各ステートメントのレイテンシと呼びます)が報告されます。
  </para>

  <para>
<!--
   For the default script, the output will look similar to this:
-->
標準スクリプトでは、次のような出力になります。
<screen>
starting vacuum...end.
transaction type: &lt;builtin: TPC-B (sort of)&gt;
scaling factor: 1
query mode: simple
number of clients: 10
number of threads: 1
number of transactions per client: 1000
number of transactions actually processed: 10000/10000
latency average = 10.870 ms
latency stddev = 7.341 ms
initial connection time = 30.954 ms
tps = 907.949122 (without initial connection time)
statement latencies in milliseconds:
    0.001  \set aid random(1, 100000 * :scale)
    0.001  \set bid random(1, 1 * :scale)
    0.001  \set tid random(1, 10 * :scale)
    0.000  \set delta random(-5000, 5000)
    0.046  BEGIN;
    0.151  UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
    0.107  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
    4.241  UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
    5.245  UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
    0.102  INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
    0.974  END;
</screen>
  </para>

  <para>
<!--
   If multiple script files are specified, the averages are reported
   separately for each script file.
-->
複数のスクリプトファイルが定義された場合、平均値はそれぞれのスクリプトファイル毎に分けて報告されます。
  </para>

  <para>
<!--
   Note that collecting the additional timing information needed for
   per-statement latency computation adds some overhead.  This will slow
   average execution speed and lower the computed TPS.  The amount
   of slowdown varies significantly depending on platform and hardware.
   Comparing average TPS values with and without latency reporting enabled
   is a good way to measure if the timing overhead is significant.
-->
ステートメント毎のレイテンシを計算するために必要となる、追加のタイミング情報を収集することは、オーバーヘッドが加わることに注意してください。
これは平均実行速度を遅くし、計測TPSを小さくするでしょう。
低下量はプラットフォームとハードウェアに依存して著しく変わります。
レイテンシの報告を有効にする、有効にしないで平均TPS値を比較することは、タイミング・オーバーヘッドが顕著かどうかを測定するには良い方法です。
  </para>
 </refsect2>

 <refsect2>
<!--
  <title>Good Practices</title>
-->
  <title>優れた実践</title>

  <para>
<!--
   It is very easy to use <application>pgbench</application> to produce completely
   meaningless numbers.  Here are some guidelines to help you get useful
   results.
-->
まったく無意味な数値を生み出すように<application>pgbench</application>を使用することは非常に簡単です。
以下に有意な結果を生み出す手助けとなるガイドラインをいくつか示します。
  </para>

  <para>
<!--
   In the first place, <emphasis>never</emphasis> believe any test that runs
   for only a few seconds.  Use the <option>-t</option> or <option>-T</option> option
   to make the run last at least a few minutes, so as to average out noise.
   In some cases you could need hours to get numbers that are reproducible.
   It's a good idea to try the test run a few times, to find out if your
   numbers are reproducible or not.
-->
まず第一に、数秒で終わる試験を<emphasis>決して</emphasis>信用しないでください。
<option>-t</option>または<option>-T</option>オプションを使って、雑音を取り除くために、少なくとも数分試験にかかるようにしてください。
再現可能な数値を得るために数時間必要になる場合もあります。
数回試験を繰り返し、数値が再現できるかどうか確認することを勧めます。
  </para>

  <para>
<!--
   For the default TPC-B-like test scenario, the initialization scale factor
   (<option>-s</option>) should be at least as large as the largest number of
   clients you intend to test (<option>-c</option>); else you'll mostly be
   measuring update contention.  There are only <option>-s</option> rows in
   the <structname>pgbench_branches</structname> table, and every transaction wants to
   update one of them, so <option>-c</option> values in excess of <option>-s</option>
   will undoubtedly result in lots of transactions blocked waiting for
   other transactions.
-->
デフォルトのTPC-Bのような試験シナリオでは、初期倍率（<option>-s</option>）を試験予定のクライアント数（<option>-c</option>）の最大値と同程度にしなければなりません。
<structname>pgbench_branches</structname>テーブルには<option>-s</option>行しかありません。
また、全トランザクションはその内の1つを更新しようとします。
ですので、<option>-c</option>値を<option>-s</option>より大きくすると、他のトランザクションを待機するためにブロックされるトランザクションが多くなることは間違いありません。
  </para>

  <para>
<!--
   The default test scenario is also quite sensitive to how long it's been
   since the tables were initialized: accumulation of dead rows and dead space
   in the tables changes the results.  To understand the results you must keep
   track of the total number of updates and when vacuuming happens.  If
   autovacuum is enabled it can result in unpredictable changes in measured
   performance.
-->
デフォルトの試験シナリオはまた、テーブルを初期化してからの経過時間に非常に敏感です。
テーブル内の不要行や不要空間の累積により結果が変わります。
結果を理解するためには、更新された行数とバキューム時期を把握する必要があります。
自動バキュームが有効な場合、性能を測定する上で結果は予測できないほど変わる可能性があります。
  </para>

  <para>
<!--
   A limitation of <application>pgbench</application> is that it can itself become
   the bottleneck when trying to test a large number of client sessions.
   This can be alleviated by running <application>pgbench</application> on a different
   machine from the database server, although low network latency will be
   essential.  It might even be useful to run several <application>pgbench</application>
   instances concurrently, on several client machines, against the same
   database server.
-->
<application>pgbench</application>の制限は、多くのクライアントセッションを試験しようとする際に<application>pgbench</application>自身がボトルネックになる可能性があることです。
これは、データベースサーバとは別のマシンで<application>pgbench</application>を実行することで緩和させることが可能です。
しかし、多少のネットワーク遅延が重要です。
同一データベースサーバに対し複数のクライアントマシンから複数の<application>pgbench</application>インスタンスを同時に実行することが有用かもしれません。
  </para>
 </refsect2>
 <refsect2>
<!--
  <title>Security</title>
-->
  <title>セキュリティ</title>

  <para>
<!--
    If untrusted users have access to a database that has not adopted a
    <link linkend="ddl-schemas-patterns">secure schema usage pattern</link>,
    do not run <application>pgbench</application> in that
    database.  <application>pgbench</application> uses unqualified names and
    does not manipulate the search path.
-->
<link linkend="ddl-schemas-patterns">安全なスキーマの利用パターン</link>を適用していないデータベースに信頼できないユーザがアクセス可能な場合、そのデータベースで<application>pgbench</application>を実行しないでください。
<application>pgbench</application>は修飾していない名前を使っており、またサーチパスを操作していません。
  </para>
 </refsect2>
 </refsect1>
</refentry>
