<!-- doc/src/sgml/json.sgml -->

<sect1 id="datatype-json">
<!--
 <title><acronym>JSON</> Types</title>
-->
 <title><acronym>JSON</>データ型</title>

 <indexterm zone="datatype-json">
  <primary>JSON</primary>
 </indexterm>

 <indexterm zone="datatype-json">
  <primary>JSONB</primary>
 </indexterm>

 <para>
<!--
  JSON data types are for storing JSON (JavaScript Object Notation)
  data, as specified in <ulink url="http://rfc7159.net/rfc7159">RFC
  7159</ulink>. Such data can also be stored as <type>text</type>, but
  the JSON data types have the advantage of enforcing that each
  stored value is valid according to the JSON rules.  There are also
  assorted JSON-specific functions and operators available for data stored
  in these data types; see <xref linkend="functions-json">.
-->
 JSONデータ型はJSON(JavaScript Object Notation)データを格納するためのものです。JSONの仕様は<ulink url="http://rfc7159.net/rfc7159">RFC 7159</ulink>に定義されています。
このようなデータは、<type>text</type>型として格納することもできますが、JSONデータ型は、それぞれ格納された値がJSONルールに従って有効に施行されるという利点があります。
これらのデータ型に格納されたデータのために利用可能な各種JSON固有の関数と演算子もあります。
<xref linkend="functions-json">を参照してください。
 </para>

 <para>
<!--
  There are two JSON data types: <type>json</> and <type>jsonb</>.
  They accept <emphasis>almost</> identical sets of values as
  input.  The major practical difference is one of efficiency.  The
  <type>json</> data type stores an exact copy of the input text,
  which processing functions must reparse on each execution; while
  <type>jsonb</> data is stored in a decomposed binary format that
  makes it slightly slower to input due to added conversion
  overhead, but significantly faster to process, since no reparsing
  is needed.  <type>jsonb</> also supports indexing, which can be a
  significant advantage.
-->
JSONデータ型には<type>json</>型と<type>jsonb</>型という2種類のデータ型があります。
それらは <emphasis>ほとんど</> 同一の入力値セットを受け入れます。現実的に主要な違いは効率です。
<type>json</>データ型は入力テキストの正確なコピーで格納し、処理関数を実行するたびに再解析する必要があります。
<type>jsonb</>データ型では、分解されたバイナリ形式で格納されます。
格納するときには変換のオーバーヘッドのため少し遅くなりますが、処理するときには、全く再解析が必要とされないので大幅に高速化されます。
また <type>jsonb</>型の重要な利点はインデックスをサポートしていることです。
 </para>

 <para>
<!--
  Because the <type>json</> type stores an exact copy of the input text, it
  will preserve semantically-insignificant white space between tokens, as
  well as the order of keys within JSON objects. Also, if a JSON object
  within the value contains the same key more than once, all the key/value
  pairs are kept.  (The processing functions consider the last value as the
  operative one.)  By contrast, <type>jsonb</> does not preserve white
  space, does not preserve the order of object keys, and does not keep
  duplicate object keys.  If duplicate keys are specified in the input,
  only the last value is kept.
-->
<type>json</>型は入力値のコピーを格納しているので、意味的に重要でないトークン間の空白だけでなく、JSONオブジェクト内のキーの順序も維持します。
また、JSONオブジェクト内に同じキーと値が複数含まれていてもすべてのキー/値のペアが保持されます。(この処理関数は最後の値１つを処理させるようすれば済みます。)
これとは対照的に、 <type>jsonb</>は空白を保持しません。オブジェクトキーの順序を保持せず、重複したオブジェクトキーを保持しません。重複キーを入力で指定された場合は、最後の値が保持されます。
 </para>

 <para>
<!--
  In general, most applications should prefer to store JSON data as
  <type>jsonb</>, unless there are quite specialized needs, such as
  legacy assumptions about ordering of object keys.
-->
一般的に、ほとんどのアプリケーションではJSONデータ型として<type>jsonb</>型のほうが望ましいでしょう。ただし、オブジェクトキーを従来のような順序であることを仮定する非常に特殊なニーズが存在するような場合は除きます。
 </para>

 <para>
<!--
  <productname>PostgreSQL</productname> allows only one character set
  encoding per database.  It is therefore not possible for the JSON
  types to conform rigidly to the JSON specification unless the database
  encoding is UTF8. Attempts to directly include characters that
  cannot be represented in the database encoding will fail; conversely,
  characters that can be represented in the database encoding but not
  in UTF8 will be allowed.
-->
<productname>PostgreSQL</productname>はデータベースごとに1つの文字セットエンコーディングのみが許可されています。従ってデータベースエンコーディングがUTF8でない限り、厳密にはJSON型がJSON仕様に準拠することはできません。
データベースのエンコーディングで表現できない文字を直接含めようとすると失敗します。逆に、UTF8で許可されずにデータベースのエンコーディングで許可される文字が許されてしまいます。
 </para>

 <para>
<!--
  RFC 7159 permits JSON strings to contain Unicode escape sequences
  denoted by <literal>\u<replaceable>XXXX</></literal>.  In the input
  function for the <type>json</> type, Unicode escapes are allowed
  regardless of the database encoding, and are checked only for syntactic
  correctness (that is, that four hex digits follow <literal>\u</>).
  However, the input function for <type>jsonb</> is stricter: it disallows
  Unicode escapes for non-ASCII characters (those
  above <literal>U+007F</>) unless the database encoding is UTF8.  It also
  insists that any use of Unicode surrogate pairs to designate characters
  outside the Unicode Basic Multilingual Plane be correct.  Valid Unicode
  escapes, except for <literal>\u0000</>, are then converted to the
  equivalent ASCII or UTF8 character for storage.
-->
 RFC 7159 では、JSON文字列はUnicodeエスケープシーケンス <literal>\u<replaceable>XXXX</></literal> を許可するように記述されています。
 <type>json</>型の入力関数は、データベースエンコーディング方式に関係なくUnicodeエスケープが許可されています。それは、構文上の正しさ(つまり<literal>\u</>に続けて16進数が4桁)だけをチェックしています。
 しかし、<type>jsonb</>の入力関数はより厳しくなります:
 データベースのエンコードがUTF8でない限り、Unicodeは非ASCII文字（<literal>U+007F</>より上位の文字）に対してエスケープを禁止します。
 また、Unicode基本多言語面以外の文字はUnicodeのサロゲートペアを使用することが正しいと主張しています。
<literal>\u0000</>は除いて有効なUnicodeは同等のASCIIまたはUTF8文字に変換されて格納されます。
[訳注:9.4.1以降では<literal>\u0000</>は許可されなくなります]
 </para>

 <note>
  <para>
<!--
   Many of the JSON processing functions described
   in <xref linkend="functions-json"> will convert Unicode escapes to
   regular characters, and will therefore throw the same types of errors
   just described even if their input is of type <type>json</>
   not <type>jsonb</>. The fact that the <type>json</> input function does
   not make these checks may be considered a historical artifact, although
   it does allow for simple storage (without processing) of JSON Unicode
   escapes in a non-UTF8 database encoding.  In general, it is best to
   avoid mixing Unicode escapes in JSON with a non-UTF8 database encoding,
   if possible.
-->
<xref linkend="functions-json">で説明されているJSONの処理関数の多くは、Unicodeエスケープを通常の文字に変換します。
そして、それらの入力は<type>jsonb</>でない<type>json</>の場合でも記載された同じ種類のエラーになります。
<type>json</>入力関数は歴史的経緯によりこれらのチェックをしないため、非UTF8のデータベースエンコーディングで、JSON Unicodeエスケープされた文字を単に格納(処理を必要としない場合)できてしまいます。
一般的には、可能であれば非UTF8のデータベースエンコーディングではUnicodeのJSONエスケープを混在させないようにすることをお勧めします。
  </para>
 </note>

 <para>
<!--
  When converting textual JSON input into <type>jsonb</>, the primitive
  types described by <acronym>RFC</> 7159 are effectively mapped onto
  native <productname>PostgreSQL</productname> types, as shown
  in <xref linkend="json-type-mapping-table">.
  Therefore, there are some minor additional constraints on what
  constitutes valid <type>jsonb</type> data that do not apply to
  the <type>json</type> type, nor to JSON in the abstract, corresponding
  to limits on what can be represented by the underlying data type.
  Specifically, <type>jsonb</> will reject numbers that are outside the
  range of the <productname>PostgreSQL</productname> <type>numeric</> data
  type, while <type>json</> will not.  Such implementation-defined
  restrictions are permitted by <acronym>RFC</> 7159.  However, in
  practice such problems are far more likely to occur in other
  implementations, as it is common to represent JSON's <type>number</>
  primitive type as IEEE 754 double precision floating point
  (which <acronym>RFC</> 7159 explicitly anticipates and allows for).
  When using JSON as an interchange format with such systems, the danger
  of losing numeric precision compared to data originally stored
  by <productname>PostgreSQL</productname> should be considered.
-->
原文のJSONが<type>jsonb</>型に変換されるときには、<acronym>RFC</> 7159に記載されているプリミティブ型を<xref linkend="json-type-mapping-table">に記されているように<productname>PostgreSQL</productname>のネイティブな型に変換されます。
そのため、<type>jsonb</type>データ型には、<type>json</type>型になく、また理論上JSONにはないマイナーな制約があります。それは基礎となるデータ型に付随する制限によって表されます。
具体的には、<type>jsonb</>型は、<productname>PostgreSQL</productname>の<type>numeric</>型の範囲外の数を拒否します。このような処理系で定義される制限は<acronym>RFC</> 7159で許可されています。
 しかし、それは IEEE 754 倍精度浮動小数点がJSONの<type>number</>プリミティブ型を表すのが一般的であるように、実際には他の実装でこのような問題が発生することの方がはるかに可能性が高いです(<acronym>RFC</> 7159が明示的に予測して、許可しています）。
 このようなシステムと<productname>PostgreSQL</productname>で交換フォーマットとしてJSONを使用する場合は、数値精度を失う危険性があることを把握しておく必要があります。
 </para>

 <para>
<!--
  Conversely, as noted in the table there are some minor restrictions on
  the input format of JSON primitive types that do not apply to
  the corresponding <productname>PostgreSQL</productname> types.
-->
 逆に、表に示すようにJSONプリミティブ型の入力フォーマットには、対応する<productname>PostgreSQL</productname>型と適合しない、いくつかのマイナーな制限があります。
 </para>

  <table id="json-type-mapping-table">
<!--
     <title>JSON primitive types and corresponding <productname>PostgreSQL</productname> types</title>
-->
     <title>JSONプリミティブ型と<productname>PostgreSQL</productname>型の対応表</title>
     <tgroup cols="3">
      <thead>
       <row>
<!--
        <entry>JSON primitive type</entry>
        <entry><productname>PostgreSQL</productname> type</entry>
        <entry>Notes</entry>
-->
        <entry>JSON プリミティブ型</entry>
        <entry><productname>PostgreSQL</productname>型</entry>
        <entry>注釈</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><type>string</></entry>
        <entry><type>text</></entry>
<!--
        <entry>See notes above concerning encoding restrictions</entry>
-->
        <entry>エンコーディングの制限に関する上記の注意事項を参照してください</entry>
       </row>
       <row>
        <entry><type>number</></entry>
        <entry><type>numeric</></entry>
<!--
        <entry><literal>NaN</literal> and <literal>infinity</literal> values are disallowed</entry>
-->
        <entry><literal>NaN</literal> と <literal>infinity</literal> 値は許可されません</entry>
       </row>
       <row>
        <entry><type>boolean</></entry>
        <entry><type>boolean</></entry>
<!--
        <entry>Only lowercase <literal>true</literal> and <literal>false</literal> spellings are accepted</entry>
-->
        <entry>小文字の<literal>true</literal> と <literal>false</literal> という綴りのみ許可されます</entry>
       </row>
       <row>
        <entry><type>null</></entry>
        <entry>(none)</entry>
<!--
        <entry>SQL <literal>NULL</literal> is a different concept</entry>
-->
        <entry>SQLの<literal>NULL</literal>とは概念が異なります</entry>
       </row>
      </tbody>
     </tgroup>
   </table>

 <sect2 id="json-keys-elements">
<!--
  <title>JSON Input and Output Syntax</title>
-->
  <title>JSONの入出力構文</title>
  <para>
<!--
   The input/output syntax for the JSON data types is as specified in
   <acronym>RFC</> 7159.
-->
 JSON型の入出力構文の仕様は<acronym>RFC</> 7159 に規定されています。
  </para>
  <para>
<!--
   The following are all valid <type>json</> (or <type>jsonb</>) expressions:
-->
 以下は、すべて有効な<type>json</>型(または <type>jsonb</>型)の式です:
<programlisting>
<!--
&#045;&#045; Simple scalar/primitive value
&#045;&#045; Primitive values can be numbers, quoted strings, true, false, or null
-->
-- シンプルなスカラ/プリミティブ値
-- プリミティブ値は、数値、引用符で括られた文字列、true、 false、またはnullです。
SELECT '5'::json;

<!--
&#045;&#045; Array of zero or more elements (elements need not be of same type)
-->
-- 0個以上の要素の配列（要素は同じ型である必要はありません)。
SELECT '[1, 2, "foo", null]'::json;

<!--
&#045;&#045; Object containing pairs of keys and values
&#045;&#045; Note that object keys must always be quoted strings
-->
-- キーと値のペアを含むオブジェクト
-- 注意: オブジェクトキーは引用符で括られた文字列である必要があります。
SELECT '{"bar": "baz", "balance": 7.77, "active": false}'::json;

<!--
&#045;&#045; Arrays and objects can be nested arbitrarily
-->
-- 配列とオブジェクトは任意に入れ子にすることができます。
SELECT '{"foo": [true, "bar"], "tags": {"a": 1, "b": null}}'::json;
</programlisting>
  </para>

  <para>
<!--
   As previously stated, when a JSON value is input and then printed without
   any additional processing, <type>json</> outputs the same text that was
   input, while <type>jsonb</> does not preserve semantically-insignificant
   details such as whitespace.  For example, note the differences here:
-->
先に述べたようにJSONの値が入力されたときに、その後、追加の処理を行わずに表示する場合、<type>json</>は入力と同じテキストが出力されます、<type>jsonb</>では、空白のような意味を持たない情報を保持しません。
例えば、ここでは相違点に注意してください:
<programlisting>
SELECT '{"bar": "baz", "balance": 7.77, "active":false}'::json;
                      json                       
-------------------------------------------------
 {"bar": "baz", "balance": 7.77, "active":false}
(1 row)

SELECT '{"bar": "baz", "balance": 7.77, "active":false}'::jsonb;
                      jsonb                       
--------------------------------------------------
 {"bar": "baz", "active": false, "balance": 7.77}
(1 row)
</programlisting>
<!--
   One semantically-insignificant detail worth noting is that
   in <type>jsonb</>, numbers will be printed according to the behavior of the
   underlying <type>numeric</> type.  In practice this means that numbers
   entered with <literal>E</> notation will be printed without it, for
   example:
-->
 もう一つ注目に値するのは、<type>jsonb</>では、数値は<type>numeric</>型の動作に応じて表示され、意味を持たない情報を保持しません。実際には数字は<literal>E</>表記なしで表示されることを意味します。
例えば:
<programlisting>
SELECT '{"reading": 1.230e-5}'::json, '{"reading": 1.230e-5}'::jsonb;
         json          |          jsonb          
-----------------------+-------------------------
 {"reading": 1.230e-5} | {"reading": 0.00001230}
(1 row)
</programlisting>
<!--
   However, <type>jsonb</> will preserve trailing fractional zeroes, as seen
   in this example, even though those are semantically insignificant for
   purposes such as equality checks.
-->
 しかし、この例に見られるように<type>jsonb</>は小数の末尾のゼロを保持します。それにも関わらず、等しいかチェックする場合等では、意味的に重要ではありません。
  </para>
 </sect2>

 <sect2 id="json-doc-design">
<!--
  <title>Designing JSON documents effectively</title>
-->
  <title>効果的なJSONドキュメントの設計</title>
  <para>
<!--
   Representing data as JSON can be considerably more flexible than
   the traditional relational data model, which is compelling in
   environments where requirements are fluid.  It is quite possible
   for both approaches to co-exist and complement each other within
   the same application.  However, even for applications where maximal
   flexibility is desired, it is still recommended that JSON documents
   have a somewhat fixed structure.  The structure is typically
   unenforced (though enforcing some business rules declaratively is
   possible), but having a predictable structure makes it easier to write
   queries that usefully summarize a set of <quote>documents</> (datums)
   in a table.
-->
 JSONデータは従来のリレーショナルデータモデルよりもかなり柔軟に表現することができます。そのため、変わりやすさを求められる環境では説得力があります。
 そして、それは同じアプリケーション内で、両方のアプローチが共存し相互に補完することが可能です。
しかし、最大の柔軟性が要求されるアプリケーションのためでもJSONドキュメントには、まだいくらかの固定構造を持つことを推奨します。
構造は（いくつかのビジネスルールを強制することは宣言的に可能であるが）、一般的に強制されないですが、テーブル内の<quote>ドキュメント</>（データ）セットをまとめて予測可能な構造にすることで、簡単に問い合わせを記述することができます。
  </para>
  <para>
<!--
   JSON data is subject to the same concurrency-control
   considerations as any other data type when stored in a table.
   Although storing large documents is practicable, keep in mind that
   any update acquires a row-level lock on the whole row.
   Consider limiting JSON documents to a
   manageable size in order to decrease lock contention among updating
   transactions.  Ideally, JSON documents should each
   represent an atomic datum that business rules dictate cannot
   reasonably be further subdivided into smaller datums that
   could be modified independently.
-->
 JSONデータはテーブルに格納するとき、他のデータ型と同一の同時実行制御の対象となります。大きな文章を保存することは実行可能ですが、すべての更新が行レベルロックを取得することに留意してください。
 更新トランザクション間のロックの競合を減少させるために、管理可能なサイズにJSONドキュメントを制限することを検討してください。
 理想的には、JSONドキュメントはビジネス・ルール上、独立して変更することができない単位までデータを分割すべきです。
  </para>
 </sect2>

 <sect2 id="json-containment">
<!--
  <title><type>jsonb</> Containment and Existence</title>
-->
  <title><type>jsonb</>型用包含演算子と存在演算子</title>
  <indexterm>
    <primary>jsonb</primary>
    <secondary>containment</secondary>
  </indexterm>
  <indexterm>
    <primary>jsonb</primary>
    <secondary>existence</secondary>
  </indexterm>
  <para>
<!--
    Testing <firstterm>containment</> is an important capability of
    <type>jsonb</>.  There is no parallel set of facilities for the
    <type>json</> type.  Containment tests whether
    one <type>jsonb</> document has contained within it another one.
    These examples return true except as noted:
-->
包含演算子のテストはjsonb型の重要な機能です。これらのセットはjson型には全くありません。
<type>jsonb</>ドキュメントが、その中に指定する値を含むかどうかをテストします。
これらの例は、特に記載がないかぎりtrueを返します：
  </para>
<programlisting>
<!--
&#045;&#045; Simple scalar/primitive values contain only the identical value:
-->
-- 単純なスカラ/プリミティブ値は、同一の値が含まれています:
SELECT '"foo"'::jsonb @> '"foo"'::jsonb;

<!--
&#045;&#045; The array on the right side is contained within the one on the left:
-->
-- 左辺の配列に右辺の配列が含まれています:
SELECT '[1, 2, 3]'::jsonb @> '[1, 3]'::jsonb;

<!--
&#045;&#045; Order of array elements is not significant, so this is also true:
-->
-- 配列要素の順序は重要ではありませんので、これもまた真になります:
SELECT '[1, 2, 3]'::jsonb @> '[3, 1]'::jsonb;

<!--
&#045;&#045; Duplicate array elements don't matter either:
-->
-- 配列要素に重複が含まれているかは問題ではありません:
SELECT '[1, 2, 3]'::jsonb @> '[1, 2, 2]'::jsonb;

<!--
&#045;&#045; The object with a single pair on the right side is contained
&#045;&#045; within the object on the left side:
-->
-- 右辺の単一ペアを持つオブジェクトが左辺のオブジェクト内に含まれています:
SELECT '{"product": "PostgreSQL", "version": 9.4, "jsonb":true}'::jsonb @> '{"version":9.4}'::jsonb;

<!--
&#045;&#045; The array on the right side is <emphasis>not</> considered contained within the
&#045;&#045; array on the left, even though a similar array is nested within it:
-->
-- 右辺の配列は左辺の配列に含まれま<emphasis>せん</>、
-- 類似の配列が、その中のネストに含まれているにも関わらず:
<!--
SELECT '[1, 2, [1, 3]]'::jsonb @> '[1, 3]'::jsonb;  &#045;&#045; yields false
-->
SELECT '[1, 2, [1, 3]]'::jsonb @> '[1, 3]'::jsonb;  -- falseになる

<!--
&#045;&#045; But with a layer of nesting, it is contained:
-->
-- しかし、ネストで層を合わせれば含まれるようになります:
SELECT '[1, 2, [1, 3]]'::jsonb @> '[[1, 3]]'::jsonb;

<!--
&#045;&#045; Similarly, containment is not reported here:
-->
-- 同様に、これも含まれません:
<!--
SELECT '{"foo": {"bar": "baz"}}'::jsonb @> '{"bar": "baz"}'::jsonb;  &#045;&#045; yields false
-->
SELECT '{"foo": {"bar": "baz"}}'::jsonb @> '{"bar": "baz"}'::jsonb;  -- falseになる
</programlisting>

  <para>
<!--
   The general principle is that the contained object must match the
   containing object as to structure and data contents, possibly after
   discarding some non-matching array elements or object key/value pairs
   from the containing object.
   But remember that the order of array elements is not significant when
   doing a containment match, and duplicate array elements are effectively
   considered only once.
-->
 一般原則では、オブジェクトにオブジェクトが含まれているかを判断するには、いくつかの条件に一致しない配列要素とキー／値のペアを含むオブジェクトを捨てた後に構造とデータを一致させる必要があります。
 しかし、条件に一致するには配列要素の順序は重要ではなく、重複要素は一回のみ有効に評価されることを覚えておく必要があります。
  </para>

  <para>
<!--
   As a special exception to the general principle that the structures
   must match, an array may contain a primitive value:
-->
構造が一致しなければならないという一般原則の特別な例外として、配列はプリミティブな値を含めることができます:
  </para>
<programlisting>
<!--
&#045;&#045; This array contains the primitive string value:
-->
-- この配列はプリミティブな文字列を含みます:
SELECT '["foo", "bar"]'::jsonb @> '"bar"'::jsonb;

<!--
&#045;&#045; This exception is not reciprocal &#045;&#045; non-containment is reported here:
-->
-- この例外は相互的ではありません。 -- これは含まれません:
<!--
SELECT '"bar"'::jsonb @> '["bar"]'::jsonb;  &#045;&#045; yields false
-->
SELECT '"bar"'::jsonb @> '["bar"]'::jsonb;  -- falseになります
</programlisting>

  <para>
<!--
    <type>jsonb</> also has an <firstterm>existence</> operator, which is
    a variation on the theme of containment: it tests whether a string
    (given as a <type>text</> value) appears as an object key or array
    element at the top level of the <type>jsonb</> value.
    These examples return true except as noted:
-->
 <type>jsonb</>型は、また<firstterm>存在</>演算子を持ちます。包含の変種です。それは文字列(与えられた<type>text</>値)が、<type>jsonb</>値のオブジェクトキーまたは配列のトップレベルに存在するかどうかをテストします。
これらの例は、特に記載がないかぎりtrueを返します。
  </para>
<programlisting>
<!--
&#045;&#045; String exists as array element:
-->
-- 文字列が配列要素に存在する:
SELECT '["foo", "bar", "baz"]'::jsonb ? 'bar';

<!--
&#045;&#045; String exists as object key:
-->
-- 文字列がオブジェクトキーに存在する:
SELECT '{"foo": "bar"}'::jsonb ? 'foo';

<!--
&#045;&#045; Object values are not considered:
-->
-- オブジェクト値は考慮されません:
<!--
SELECT '{"foo": "bar"}'::jsonb ? 'bar';  &#045;&#045; yields false
-->
SELECT '{"foo": "bar"}'::jsonb ? 'bar';  -- falseになる

<!--
&#045;&#045; As with containment, existence must match at the top level:
-->
-- オブジェクトはトップレベルから一致するように存在する必要があります:
<!--
SELECT '{"foo": {"bar": "baz"}}'::jsonb ? 'bar'; &#045;&#045; yields false
-->
SELECT '{"foo": {"bar": "baz"}}'::jsonb ? 'bar'; -- falseになる

<!--
&#045;&#045; A string is considered to exist if it matches a primitive JSON string:
-->
-- 文字列はJSONプリミティブ文字列と一致させることができます:
SELECT '"foo"'::jsonb ? 'foo';
</programlisting>

  <para>
<!--
    JSON objects are better suited than arrays for testing containment or
    existence when there are many keys or elements involved, because
    unlike arrays they are internally optimized for searching, and do not
    need to be searched linearly.
-->
 JSONオブジェクトは、関係するキーや要素が多く存在する場合、含むかどうかまたは存在するかどうかのテストに適しています。なぜなら配列とは異なり、リニア検索をする必要がなく、内部的に検索に最適化されています。
  </para>

  <para>
<!--
    The various containment and existence operators, along with all other
    JSON operators and functions are documented
    in <xref linkend="functions-json">.
-->
 JSONの様々な包含演算子や存在演算子、他のすべてのJSON演算子と関数は <xref linkend="functions-json">に記載されています。
  </para>
 </sect2>

 <sect2 id="json-indexing">
<!--
  <title><type>jsonb</> Indexing</title>
-->
  <title><type>jsonb</> インデックス</title>
  <indexterm>
    <primary>jsonb</primary>
    <secondary>indexes on</secondary>
  </indexterm>

  <para>
<!--
    GIN indexes can be used to efficiently search for
    keys or key/value pairs occurring within a large number of
    <type>jsonb</> documents (datums).
    Two GIN <quote>operator classes</> are provided, offering different
    performance and flexibility trade-offs.
-->
 GINインデックスは、多数の<type>jsonb</>ドキュメント(データ)のキーやキー／値ペアを効率的に検索するときに用いることができます。
 異なるパフォーマンスと柔軟性のトレードオフを持つ、2つのGIN <quote>演算子クラス</> が提供されています。
  </para>
  <para>
<!--
    The default GIN operator class for <type>jsonb</> supports queries with
    the <literal>@&gt;</>, <literal>?</>, <literal>?&amp;</>
    and <literal>?|</> operators.
    (For details of the semantics that these operators
    implement, see <xref linkend="functions-jsonb-op-table">.)
    An example of creating an index with this operator class is:
-->
 <type>jsonb</>型では、デフォルトのGIN演算子クラスとして <literal>@&gt;</>、<literal>?</>、 <literal>?&amp;</>、<literal>?|</>をサポートしています。
（これらの演算子の意味の詳細は、<xref linkend="functions-jsonb-op-table">を参照してください。）
この演算子クラスのインデックスを作成する例。
<programlisting>
CREATE INDEX idxgin ON api USING gin (jdoc);
</programlisting>
<!--
    The non-default GIN operator class <literal>jsonb_path_ops</>
    supports indexing the <literal>@&gt;</> operator only.
    An example of creating an index with this operator class is:
-->
 デフォルトでないGIN演算子クラスは、<literal>@&gt;</>演算子のみサポートする<literal>jsonb_path_ops</>があります。
この演算子クラスのインデックスを作成する例:
<programlisting>
CREATE INDEX idxginp ON api USING gin (jdoc jsonb_path_ops);
</programlisting>
  </para>

  <para>
<!--
    Consider the example of a table that stores JSON documents
    retrieved from a third-party web service, with a documented schema
    definition.  A typical document is:
-->
 サードパーティのWebサービスから、ドキュメント化されたスキーマ定義を持つJSONドキュメントを取得し、格納するテーブルの例を考えてみましょう。
 典型的なドキュメントは、次のとおりです:
<programlisting>
{
    "guid": "9c36adc1-7fb5-4d5b-83b4-90356a46061a",
    "name": "Angela Barton",
    "is_active": true,
    "company": "Magnafone",
    "address": "178 Howard Place, Gulf, Washington, 702",
    "registered": "2009-11-07T08:53:22 +08:00",
    "latitude": 19.793713,
    "longitude": 86.513373,
    "tags": [
        "enim",
        "aliquip",
        "qui"
    ]
}
</programlisting>
<!--
    We store these documents in a table named <structname>api</>,
    in a <type>jsonb</> column named <structfield>jdoc</>.
    If a GIN index is created on this column,
    queries like the following can make use of the index:
-->
 テーブル名 <structname>api</>に<type>jsonb</>型で<structfield>jdoc</>をカラム名として格納します。
 このカラムにGINインデックスを作成した場合、以下のような問い合わせがインデックスを利用することができます:
<programlisting>
<!--
&#045;&#045; Find documents in which the key "company" has value "Magnafone"
-->
-- "company"キー が "Magnafone"値であるものを見つける
SELECT jdoc-&gt;'guid', jdoc-&gt;'name' FROM api WHERE jdoc @&gt; '{"company": "Magnafone"}';
</programlisting>
<!--
    However, the index could not be used for queries like the
    following, because though the operator <literal>?</> is indexable,
    it is not applied directly to the indexed column <structfield>jdoc</>:
-->
 しかし 次のような問い合わせはインデックスを使用しません。なぜなら、<literal>?</>演算子はインデックス可能ですが、<structfield>jdoc</>カラムのインデックスが直接適用されていないため:
<programlisting>
<!--
&#045;&#045; Find documents in which the key "tags" contains key or array element "qui"
-->
-- キー "tags" の配列要素に "qui"が含まれているか見つける
SELECT jdoc-&gt;'guid', jdoc-&gt;'name' FROM api WHERE jdoc -&gt; 'tags' ? 'qui';
</programlisting>
<!--
    Still, with appropriate use of expression indexes, the above
    query can use an index.  If querying for particular items within
    the <literal>"tags"</> key is common, defining an index like this
    may be worthwhile:
-->
 それでも、上記の問い合わせは、式インデックスを適切に使用することでインデックスを使用することができます。一般的な <literal>"tags"</>キーから特定の項目を照会する場合、このようなインデックスを定義すると良いかもしれません:
<programlisting>
CREATE INDEX idxgintags ON api USING gin ((jdoc -&gt; 'tags'));
</programlisting>
<!--
    Now, the <literal>WHERE</> clause <literal>jdoc -&gt; 'tags' ? 'qui'</>
    will be recognized as an application of the indexable
    operator <literal>?</> to the indexed
    expression <literal>jdoc -&gt; 'tags'</>.
    (More information on expression indexes can be found in <xref
    linkend="indexes-expressional">.)
-->
 さて、 <literal>WHERE</>句の <literal>jdoc -&gt; 'tags' ? 'qui'</>は、インデックス式では 、<literal>?</>演算子はインデックス可能として認識されます。
（式インデックスに関する詳細情報は<xref linkend="indexes-expressional">を参照してください。）
  </para>
  <para>
<!--
    Another approach to querying is to exploit containment, for example:
-->
  別のアプローチとして包含を利用する問い合わせがあります。例えば:
<programlisting>
<!--
#045;&#045; Find documents in which the key "tags" contains array element "qui"
-->
-- キー "tags"に 要素"qui"が含まれるかどうか見つける
SELECT jdoc-&gt;'guid', jdoc-&gt;'name' FROM api WHERE jdoc @&gt; '{"tags": ["qui"]}';
</programlisting>
<!--
    A simple GIN index on the <structfield>jdoc</> column can support this
    query.  But note that such an index will store copies of every key and
    value in the <structfield>jdoc</> column, whereas the expression index
    of the previous example stores only data found under
    the <literal>tags</> key.  While the simple-index approach is far more
    flexible (since it supports queries about any key), targeted expression
    indexes are likely to be smaller and faster to search than a simple
    index.
-->
 <structfield>jdoc</>カラムのシンプルなGINインデックスは、この問い合わせをサポートすることができます。
しかし、前の例では、<literal>tags</>キーの下にあるデータのみをインデックスに格納していたのに対して、そのようなインデックスは、<structfield>jdoc</>のすべてのキーと値のコピーを保存しますので、注意が必要です。
シンプルなインデックスアプローチは（それが全てのキーについての問い合わせをサポートしているため）はるかに柔軟ですが、ターゲット式インデックスは単純なインデックスより小さく、検索のときに高速である可能性が高くなります。
  </para>

  <para>
<!--
    Although the <literal>jsonb_path_ops</literal> operator class supports
    only queries with the <literal>@&gt;</> operator, it has notable
    performance advantages over the default operator
    class <literal>jsonb_ops</literal>.  A <literal>jsonb_path_ops</literal>
    index is usually much smaller than a <literal>jsonb_ops</literal>
    index over the same data, and the specificity of searches is better,
    particularly when queries contain keys that appear frequently in the
    data.  Therefore search operations typically perform better
    than with the default operator class.
-->
 <literal>jsonb_path_ops</literal>演算子クラスは、<literal>@&gt;</>演算子をサポートしているだけですが、デフォルト演算子クラスの<literal>jsonb_ops</literal>よりも顕著なパフォーマンス上の利点があります。
 <literal>jsonb_path_ops</literal>インデックスは、通常同じデータの<literal>jsonb_ops</literal>インデックスよりもはるかに小さく、データの中で頻繁に表示されるキーを含む場合のような特別な検索には、より良くなります。
 そのため、デフォルトの演算子クラスよりも検索操作よくなります。
  </para>

  <para>
<!--
    The technical difference between a <literal>jsonb_ops</literal>
    and a <literal>jsonb_path_ops</literal> GIN index is that the former
    creates independent index items for each key and value in the data,
    while the latter creates index items only for each value in the
    data.
-->
 <literal>jsonb_ops</literal>と<literal>jsonb_path_ops</literal>のGINインデックスの技術的差異は、前者はデータのキーと値のための独立したインデックスを作成しますが、後者は、データの値に対してのみインデックスを作成します。
    <footnote>
     <para>
<!--
      For this purpose, the term <quote>value</> includes array elements,
      though JSON terminology sometimes considers array elements distinct
      from values within objects.
-->
 この目的のために、<quote>値</> という用語は配列の要素を含みますが、JSONの専門用語では、オブジェクト内の値と配列の要素が時々違うことがあります。
     </para>
    </footnote>
<!--
    Basically, each <literal>jsonb_path_ops</literal> index item is
    a hash of the value and the key(s) leading to it; for example to index
    <literal>{"foo": {"bar": "baz"}}</literal>, a single index item would
    be created incorporating all three of <literal>foo</>, <literal>bar</>,
    and <literal>baz</> into the hash value.  Thus a containment query
    looking for this structure would result in an extremely specific index
    search; but there is no way at all to find out whether <literal>foo</>
    appears as a key.  On the other hand, a <literal>jsonb_ops</literal>
    index would create three index items representing <literal>foo</>,
    <literal>bar</>, and <literal>baz</> separately; then to do the
    containment query, it would look for rows containing all three of
    these items.  While GIN indexes can perform such an AND search fairly
    efficiently, it will still be less specific and slower than the
    equivalent <literal>jsonb_path_ops</literal> search, especially if
    there are a very large number of rows containing any single one of the
    three index items.
-->
 基本的に、<literal>jsonb_path_ops</literal>インテックス項目は、値とキーのハッシュです。例えば、<literal>{"foo": {"bar": "baz"}}</literal>のインデックスはハッシュ値に<literal>foo</>、<literal>bar</>、 <literal>baz</>すべてを組み込んで作成されます。したがって、包含問い合わせのためのインデックス検索は、非常に特定の構造を返すようになっています。 しかしfooがキーとして表示されるかどうかを調べるには全く方法はありません。
一方、jsonb_opsインデックスは個別にはfoo、bar、bazを表す3つのインデックス項目を作成します。その後、包含問い合わせをおこなうには、これらの項目の3つすべてを含む行を探します。
GINインデックスは、かなり効率的に検索することができますが、特に3つの索引項目のいずれかで、非常に多数の行が単一の場合に、同等のjsonb_path_ops検索よりも遅くなります。
  </para>

  <para>
<!--
    A disadvantage of the <literal>jsonb_path_ops</literal> approach is
    that it produces no index entries for JSON structures not containing
    any values, such as <literal>{"a": {}}</literal>.  If a search for
    documents containing such a structure is requested, it will require a
    full-index scan, which is quite slow.  <literal>jsonb_path_ops</> is
    therefore ill-suited for applications that often perform such searches.
-->
 <literal>jsonb_path_ops</literal>アプローチの欠点は、<literal>{"a": {}}</literal>のような、任意の値を含まないJSON構造のためのインデックスエントリを生成しません。このような構造を含むドキュメントの検索が要求された場合、それは、フルインデックススキャンを必要とします。それは非常に遅くなります。そのため、<literal>jsonb_path_ops</>は、多くの場合、そのような検索を実行するのには不適当です。
  </para>

  <para>
<!--
    <type>jsonb</> also supports <literal>btree</> and <literal>hash</>
    indexes.  These are usually useful only if it's important to check
    equality of complete JSON documents.
    The <literal>btree</> ordering for <type>jsonb</> datums is seldom
    of great interest, but for completeness it is:
-->
 <type>jsonb</>型は、<literal>btree</> と <literal>hash</> インデックスもサポートします。これらは通常、JSONドキュメントの完全性をチェックすることが重要な場合のみ有用です。
<type>jsonb</>のための<literal>btree</>順序には、興味深いことはほとんどありませんが、しかし、完全さのために次に示します:
<synopsis>
<replaceable>Object</replaceable> > <replaceable>Array</replaceable> > <replaceable>Boolean</replaceable> > <replaceable>Number</replaceable> > <replaceable>String</replaceable> > <replaceable>Null</replaceable>

<replaceable>Object with n pairs</replaceable> > <replaceable>object with n - 1 pairs</replaceable>

<replaceable>Array with n elements</replaceable> > <replaceable>array with n - 1 elements</replaceable>
</synopsis>
<!--
      Objects with equal numbers of pairs are compared in the order:
-->
 ペアの同じ番号を持つオブジェクトは、順に比較されます:
<synopsis>
<replaceable>key-1</replaceable>, <replaceable>value-1</replaceable>, <replaceable>key-2</replaceable> ...
</synopsis>
<!--
      Note that object keys are compared in their storage order;
      in particular, since shorter keys are stored before longer keys, this
      can lead to results that might be unintuitive, such as:
-->
そのオブジェクトのキーは、その格納順に比較されることに注意してください。
短いキーは長いキーの前に格納されているため、特にこれは、次のような直感的でない結果に結果につながるかもしれません:
<programlisting>
{ "aa": 1, "c": 1} > {"b": 1, "d": 1}
</programlisting>
<!--
      Similarly, arrays with equal numbers of elements are compared in the
      order:
-->
 同様に、配列と同じ番号を持つ要素を比較する順番:
<synopsis>
<replaceable>element-1</replaceable>, <replaceable>element-2</replaceable> ...
</synopsis>
<!--
      Primitive JSON values are compared using the same
      comparison rules as for the underlying
      <productname>PostgreSQL</productname> data type.  Strings are
      compared using the default database collation.
-->
 JSONプリミティブ値は基本的に<productname>PostgreSQL</productname>データ型と同じルールで比較されます。文字列は、デフォルトのデータベース照合を使用して比較されます
  </para>
 </sect2>
</sect1>
