<!--
doc/src/sgml/ref/alter_function.sgml
PostgreSQL documentation
-->

<refentry id="SQL-ALTERFUNCTION">
 <indexterm zone="sql-alterfunction">
  <primary>ALTER FUNCTION</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>ALTER FUNCTION</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
  <refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>ALTER FUNCTION</refname>
<!--
  <refpurpose>change the definition of a function</refpurpose>
-->
  <refpurpose>関数定義を変更する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
ALTER FUNCTION <replaceable>name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] )
    <replaceable class="PARAMETER">action</replaceable> [ ... ] [ RESTRICT ]
ALTER FUNCTION <replaceable>name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] )
    RENAME TO <replaceable>new_name</replaceable>
ALTER FUNCTION <replaceable>name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] )
    OWNER TO <replaceable>new_owner</replaceable>
ALTER FUNCTION <replaceable>name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] )
    SET SCHEMA <replaceable>new_schema</replaceable>

<!--
<phrase>where <replaceable class="PARAMETER">action</replaceable> is one of:</phrase>
-->
<phrase>ここで、<replaceable class="PARAMETER">action</replaceable>は以下のいずれかです。</phrase>

    CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT
    IMMUTABLE | STABLE | VOLATILE | [ NOT ] LEAKPROOF
    [ EXTERNAL ] SECURITY INVOKER | [ EXTERNAL ] SECURITY DEFINER
    COST <replaceable class="parameter">execution_cost</replaceable>
    ROWS <replaceable class="parameter">result_rows</replaceable>
    SET <replaceable class="parameter">configuration_parameter</replaceable> { TO | = } { <replaceable class="parameter">value</replaceable> | DEFAULT }
    SET <replaceable class="parameter">configuration_parameter</replaceable> FROM CURRENT
    RESET <replaceable class="parameter">configuration_parameter</replaceable>
    RESET ALL
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>ALTER FUNCTION</command> changes the definition of a
   function.
-->
<command>ALTER FUNCTION</command>は関数定義を変更します。
  </para>

  <para>
<!--
   You must own the function to use <command>ALTER FUNCTION</>.
   To change a function's schema, you must also have <literal>CREATE</>
   privilege on the new schema.
   To alter the owner, you must also be a direct or indirect member of the new
   owning role, and that role must have <literal>CREATE</literal> privilege on
   the function's schema.  (These restrictions enforce that altering the owner
   doesn't do anything you couldn't do by dropping and recreating the function.
   However, a superuser can alter ownership of any function anyway.)
-->
<command>ALTER FUNCTION</>を使用するには関数の所有者でなければなりません。
関数のスキーマを変更するには、新しいスキーマにおける<literal>CREATE</>権限も必要です。
所有者を変更するには、直接または間接的に新しいロールのメンバでなければなりません。
また、そのロールは関数のスキーマにおいて<literal>CREATE</literal>権限を持たなければなりません。
（この制限により、関数の削除と再作成で行うことができない処理を所有者の変更で行えないようになります。
しかし、スーパーユーザはすべての関数の所有者を変更することができます。）
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <para>
<!--
      The name (optionally schema-qualified) of an existing function.
-->
既存の関数名です（スキーマ修飾名も可）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argmode</replaceable></term>

    <listitem>
     <para>
<!--
      The mode of an argument: <literal>IN</>, <literal>OUT</>,
      <literal>INOUT</>, or <literal>VARIADIC</>.
      If omitted, the default is <literal>IN</>.
      Note that <command>ALTER FUNCTION</command> does not actually pay
      any attention to <literal>OUT</> arguments, since only the input
      arguments are needed to determine the function's identity.
      So it is sufficient to list the <literal>IN</>, <literal>INOUT</>,
      and <literal>VARIADIC</> arguments.
-->
引数のモードで、<literal>IN</>、<literal>OUT</>、<literal>INOUT</>、<literal>VARIADIC</>のいずれかです。
省略された場合のデフォルトは<literal>IN</>です。
関数の識別を行うには入力引数のみが必要ですので、実際には<command>ALTER FUNCTION</command>が<literal>OUT</>引数を無視することに注意してください。
ですので、<literal>IN</>、<literal>INOUT</>および<literal>VARIADIC</>引数を列挙することで十分です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argname</replaceable></term>

    <listitem>
     <para>
<!--
      The name of an argument.
      Note that <command>ALTER FUNCTION</command> does not actually pay
      any attention to argument names, since only the argument data
      types are needed to determine the function's identity.
-->
引数の名前です。
関数の識別を行うには引数のデータ型のみが必要ですので、実際には<command>ALTER FUNCTION</command>は引数の名前を無視することに注意してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argtype</replaceable></term>

    <listitem>
     <para>
<!--
      The data type(s) of the function's arguments (optionally
      schema-qualified), if any.
-->
もしあれば、その関数の引数のデータ型（スキーマ修飾可能）です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_name</replaceable></term>
    <listitem>
     <para>
<!--
      The new name of the function.
-->
新しい関数名です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_owner</replaceable></term>
    <listitem>
     <para>
<!--
      The new owner of the function.  Note that if the function is
      marked <literal>SECURITY DEFINER</literal>, it will subsequently
      execute as the new owner.
-->
新しい関数の所有者です。
関数に<literal>SECURITY DEFINER</literal>が指定されている場合、その後は新しい所有者の権限で関数が実行されることに注意してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_schema</replaceable></term>
    <listitem>
     <para>
<!--
      The new schema for the function.
-->
関数の新しいスキーマです。
     </para>
    </listitem>
   </varlistentry>

    <varlistentry>
     <term><literal>CALLED ON NULL INPUT</literal></term>
     <term><literal>RETURNS NULL ON NULL INPUT</literal></term>
     <term><literal>STRICT</literal></term>

     <listitem>
<!--
      <para><literal>CALLED ON NULL INPUT</literal> changes the function so
       that it will be invoked when some or all of its arguments are
       null. <literal>RETURNS NULL ON NULL INPUT</literal> or
       <literal>STRICT</literal> changes the function so that it is not
       invoked if any of its arguments are null; instead, a null result
       is assumed automatically.  See <xref linkend="sql-createfunction">
       for more information.
-->
<para><literal>CALLED ON NULL INPUT</literal>は、引数の一部またはすべてがNULLの場合に関数が呼び出されるように変更します。
<literal>RETURNS NULL ON NULL INPUT</literal>もしくは<literal>STRICT</literal>は、引数の一部がNULLの場合に関数が呼び出されないように変更します。
代わりに自動的にNULLという結果とされます。
詳細は<xref linkend="sql-createfunction">を参照してください。
      </para>
     </listitem>
   </varlistentry>

    <varlistentry>
     <term><literal>IMMUTABLE</literal></term>
     <term><literal>STABLE</literal></term>
     <term><literal>VOLATILE</literal></term>

     <listitem>
      <para>
<!--
       Change the volatility of the function to the specified setting.
       See <xref linkend="sql-createfunction"> for details.
-->
関数の揮発性を指定した設定に変更します。
詳細については<xref linkend="sql-createfunction">を参照してください。
      </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal><optional> EXTERNAL </optional> SECURITY INVOKER</literal></term>
    <term><literal><optional> EXTERNAL </optional> SECURITY DEFINER</literal></term>

    <listitem>
     <para>
<!--
      Change whether the function is a security definer or not. The
      key word <literal>EXTERNAL</literal> is ignored for SQL
      conformance. See <xref linkend="sql-createfunction"> for more information about
      this capability.
-->
関数のセキュリティを定義者にするか否かを変更します。
<literal>EXTERNAL</literal>キーワードはSQLとの互換性のためのものであり、無視されます。
この機能の詳細については<xref linkend="sql-createfunction">を参照してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>LEAKPROOF</literal></term>
    <listitem>
     <para>
<!--
      Change whether the function is considered leakproof or not.
      See <xref linkend="sql-createfunction"> for more information about
      this capability.
-->
関数を漏洩防止関数とみなすか否かを変更します。
この機能に関する詳細については<xref linkend="sql-createfunction">を参照してください。
     </para>
    </listitem>
   </varlistentry>

    <varlistentry>
     <term><literal>COST</literal> <replaceable class="parameter">execution_cost</replaceable></term>

     <listitem>
      <para>
<!--
       Change the estimated execution cost of the function.
       See <xref linkend="sql-createfunction"> for more information.
-->
関数の推定実行コストを変更します。
詳細については<xref linkend="sql-createfunction">を参照してください。
      </para>
     </listitem>
   </varlistentry>

    <varlistentry>
     <term><literal>ROWS</literal> <replaceable class="parameter">result_rows</replaceable></term>

     <listitem>
      <para>
<!--
       Change the estimated number of rows returned by a set-returning
       function.  See <xref linkend="sql-createfunction"> for more information.
-->
集合を返す関数で返される推定行数を変更します。
詳細については<xref linkend="sql-createfunction">を参照してください。
      </para>
     </listitem>
   </varlistentry>

     <varlistentry>
      <term><replaceable>configuration_parameter</replaceable></term>
      <term><replaceable>value</replaceable></term>
      <listitem>
       <para>
<!--
        Add or change the assignment to be made to a configuration parameter
        when the function is called.  If
        <replaceable>value</replaceable> is <literal>DEFAULT</literal>
        or, equivalently, <literal>RESET</literal> is used, the function-local
        setting is removed, so that the function executes with the value
        present in its environment.  Use <literal>RESET
        ALL</literal> to clear all function-local settings.
        <literal>SET FROM CURRENT</> saves the session's current value of
        the parameter as the value to be applied when the function is entered.
-->
関数呼び出し時に設定パラメータに対して行われる設定を追加または変更します。
<replaceable>value</replaceable>が<literal>DEFAULT</literal>、またはそれと等価な<literal>RESET</literal>が使用された場合、関数の局所的な設定は削除されます。
このため、関数はその環境内に存在する値で実行されます。
すべての関数の局所的な設定を消去したければ<literal>RESET ALL</literal>を使用してください。
<literal>SET FROM CURRENT</>は、セッションにおけるパラメータの現在値を関数起動時に適用される値として保管します。
       </para>

       <para>
<!--
        See <xref linkend="sql-set"> and
        <xref linkend="runtime-config">
        for more information about allowed parameter names and values.
-->
設定可能なパラメータとその値に関する詳細については、<xref linkend="sql-set">および<xref linkend="runtime-config">を参照してください。

       </para>
      </listitem>
     </varlistentry>

   <varlistentry>
    <term><literal>RESTRICT</literal></term>

    <listitem>
     <para>
<!--
      Ignored for conformance with the SQL standard.
-->
標準SQLとの互換性のためのものであり、無視されます。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   To rename the function <literal>sqrt</literal> for type
   <type>integer</type> to <literal>square_root</literal>:
-->
<type>integer</type>型用の<literal>sqrt</literal>関数の名前を<literal>square_root</literal>に変更します。
<programlisting>
ALTER FUNCTION sqrt(integer) RENAME TO square_root;
</programlisting>
  </para>

  <para>
<!--
   To change the owner of the function <literal>sqrt</literal> for type
   <type>integer</type> to <literal>joe</literal>:
-->
<type>integer</type>型用の<literal>sqrt</literal>関数の所有者を<literal>joe</literal>に変更します。
<programlisting>
ALTER FUNCTION sqrt(integer) OWNER TO joe;
</programlisting>
  </para>

  <para>
<!--
   To change the schema of the function <literal>sqrt</literal> for type
   <type>integer</type> to <literal>maths</literal>:
-->
<type>integer</type>型用の<literal>sqrt</literal>関数のスキーマを<literal>maths</literal>に変更します。
<programlisting>
ALTER FUNCTION sqrt(integer) SET SCHEMA maths;
</programlisting>
  </para>

  <para>
<!--
   To adjust the search path that is automatically set for a function:
-->
関数用に検索パスを自動的に設定するように調整します。
<programlisting>
ALTER FUNCTION check_password(text) SET search_path = admin, pg_temp;
</programlisting>
  </para>

  <para>
<!--
   To disable automatic setting of <varname>search_path</> for a function:
-->
関数用の<varname>search_path</>の自動設定を無効にします。
<programlisting>
ALTER FUNCTION check_password(text) RESET search_path;
</programlisting>
<!--
   The function will now execute with whatever search path is used by its
   caller.
-->
呼び出し元で使用される検索パスでこの関数が実行されるようになります。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   This statement is partially compatible with the <command>ALTER
   FUNCTION</> statement in the SQL standard. The standard allows more
   properties of a function to be modified, but does not provide the
   ability to rename a function, make a function a security definer,
   attach configuration parameter values to a function,
   or change the owner, schema, or volatility of a function. The standard also
   requires the <literal>RESTRICT</> key word, which is optional in
   <productname>PostgreSQL</>.
-->
この文は標準SQLの<command>ALTER FUNCTION</>文に部分的に従っています。
標準ではより多くの関数の属性を変更できますが、関数名の変更、関数を定義者の権限で実行するかどうかの変更、関数と設定パラメータ値の関連付け、関数の所有者やスキーマ、揮発性の変更を行う機能はありません。
また、標準では<literal>RESTRICT</>キーワードを必須としていますが、<productname>PostgreSQL</>では省略可能です。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createfunction"></member>
   <member><xref linkend="sql-dropfunction"></member>
  </simplelist>
 </refsect1>
</refentry>
