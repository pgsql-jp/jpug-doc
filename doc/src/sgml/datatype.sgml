<!-- doc/src/sgml/datatype.sgml -->

 <chapter id="datatype">
<!--
  <title>Data Types</title>
-->
  <title>データ型</title>

  <indexterm zone="datatype">
<!--
   <primary>data type</primary>
-->
   <primary>データ型</primary>
  </indexterm>

  <indexterm>
<!--
   <primary>type</primary>
   <see>data type</see>
-->
   <primary>型</primary>
   <see>データ型</see>
  </indexterm>

  <para>
<!--
   <productname>PostgreSQL</productname> has a rich set of native data
   types available to users.  Users can add new types to
   <productname>PostgreSQL</productname> using the <xref
   linkend="sql-createtype"> command.
-->

<productname>PostgreSQL</productname>にはユーザが使用可能な豊富なデータ型が始めから備わっています。
<xref linkend="sql-createtype">コマンドで<productname>PostgreSQL</productname>に対し新しいデータ型を追加できます。
  </para>

  <para>
<!--
   <xref linkend="datatype-table"> shows all the built-in general-purpose data
   types. Most of the alternative names listed in the
   <quote>Aliases</quote> column are the names used internally by
   <productname>PostgreSQL</productname> for historical reasons.  In
   addition, some internally used or deprecated types are available,
   but are not listed here.
-->
<xref linkend="datatype-table">に組み込みの汎用データ型をすべて示します。
<quote>別名</quote>欄に列挙された代替名称のほとんどは、歴史的な理由により<productname>PostgreSQL</productname>の内部で使用されている名前です。
他にも、内部で使用されるデータ型、削除予定のデータ型もありますが、ここにはリストされていません。
  </para>

   <table id="datatype-table">
<!--
    <title>Data Types</title>
-->
<title>データ型</title>
    <tgroup cols="3">
     <thead>
      <row>
<!--
       <entry>Name</entry>
       <entry>Aliases</entry>
       <entry>Description</entry>
-->
<entry>名称</entry>
<entry>別名</entry>
<entry>説明</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><type>bigint</type></entry>
       <entry><type>int8</type></entry>
<!--
       <entry>signed eight-byte integer</entry>
-->
<entry>8バイト符号付き整数</entry>
      </row>

      <row>
       <entry><type>bigserial</type></entry>
       <entry><type>serial8</type></entry>
<!--
       <entry>autoincrementing eight-byte integer</entry>
-->
<entry>自動増分8バイト整数</entry>
      </row>

      <row>
       <entry><type>bit [ (<replaceable>n</replaceable>) ]</type></entry>
       <entry></entry>
<!--
       <entry>fixed-length bit string</entry>
-->
<entry>固定長ビット列</entry>
      </row>

      <row>
       <entry><type>bit varying [ (<replaceable>n</replaceable>) ]</type></entry>
       <entry><type>varbit</type></entry>
<!--
       <entry>variable-length bit string</entry>
-->
<entry>可変長ビット列</entry>
      </row>

      <row>
       <entry><type>boolean</type></entry>
       <entry><type>bool</type></entry>
<!--
       <entry>logical Boolean (true/false)</entry>
-->
<entry>論理値（真/偽）</entry>
      </row>

      <row>
       <entry><type>box</type></entry>
       <entry></entry>
<!--
       <entry>rectangular box on a plane</entry>
-->
<entry>平面上の矩形</entry>
      </row>

      <row>
       <entry><type>bytea</type></entry>
       <entry></entry>
<!--
       <entry>binary data (<quote>byte array</>)</entry>
-->
<entry>バイナリデータ（<quote>バイトの配列（byte array）</>）</entry>
      </row>

      <row>
       <entry><type>character varying [ (<replaceable>n</replaceable>) ]</type></entry>
       <entry><type>varchar [ (<replaceable>n</replaceable>) ]</type></entry>
<!--
       <entry>variable-length character string</entry>
-->
<entry>可変長文字列</entry>
      </row>

      <row>
       <entry><type>character [ (<replaceable>n</replaceable>) ]</type></entry>
       <entry><type>char [ (<replaceable>n</replaceable>) ]</type></entry>
<!--
       <entry>fixed-length character string</entry>
-->
<entry>固定長文字列</entry>
      </row>

      <row>
       <entry><type>cidr</type></entry>
       <entry></entry>
<!--
       <entry>IPv4 or IPv6 network address</entry>
-->
<entry>IPv4もしくはIPv6ネットワークアドレス</entry>
      </row>

      <row>
       <entry><type>circle</type></entry>
       <entry></entry>
<!--
       <entry>circle on a plane</entry>
-->
<entry>平面上の円</entry>
      </row>

      <row>
       <entry><type>date</type></entry>
       <entry></entry>
<!--
       <entry>calendar date (year, month, day)</entry>
-->
<entry>暦の日付（年月日）</entry>
      </row>

      <row>
       <entry><type>double precision</type></entry>
       <entry><type>float8</type></entry>
<!--
       <entry>double precision floating-point number (8 bytes)</entry>
-->
<entry>倍精度浮動小数点（8バイト）</entry>
      </row>

      <row>
       <entry><type>inet</type></entry>
       <entry></entry>
<!--
       <entry>IPv4 or IPv6 host address</entry>
-->
<entry>IPv4もしくはIPv6ホストアドレス</entry>
      </row>

      <row>
       <entry><type>integer</type></entry>
       <entry><type>int</type>, <type>int4</type></entry>
<!--
       <entry>signed four-byte integer</entry>
-->
<entry>4バイト符号付き整数</entry>
      </row>

      <row>
       <entry><type>interval [ <replaceable>fields</replaceable> ] [ (<replaceable>p</replaceable>) ]</type></entry>
       <entry></entry>
<!--
       <entry>time span</entry>
-->
<entry>時間間隔</entry>
      </row>

      <row>
       <entry><type>json</type></entry>
       <entry></entry>
<!--
       <entry>textual JSON data</entry>
-->
       <entry>テキストのJSONデータ</entry>
      </row>

      <row>
       <entry><type>jsonb</type></entry>
       <entry></entry>
<!--
       <entry>binary JSON data, decomposed</entry>
-->
       <entry>バイナリ JSON データ, 展開型</entry>
      </row>

      <row>
       <entry><type>line</type></entry>
       <entry></entry>
<!--
       <entry>infinite line on a plane</entry>
-->
       <entry>平面上の無限直線</entry>
      </row>

      <row>
       <entry><type>lseg</type></entry>
       <entry></entry>
<!--
       <entry>line segment on a plane</entry>
-->
<entry>平面上の線分</entry>
      </row>

      <row>
       <entry><type>macaddr</type></entry>
       <entry></entry>
<!--
       <entry>MAC (Media Access Control) address</entry>
-->
<entry>MAC（メディアアクセスコントロール）アドレス</entry>
      </row>

      <row>
       <entry><type>money</type></entry>
       <entry></entry>
<!--
       <entry>currency amount</entry>
-->
       <entry>貨幣金額</entry>
      </row>

      <row>
       <entry><type>numeric [ (<replaceable>p</replaceable>,
         <replaceable>s</replaceable>) ]</type></entry>
       <entry><type>decimal [ (<replaceable>p</replaceable>,
         <replaceable>s</replaceable>) ]</type></entry>
<!--
       <entry>exact numeric of selectable precision</entry>
-->
<entry>精度の選択可能な高精度数値</entry>
      </row>

      <row>
       <entry><type>path</type></entry>
       <entry></entry>
<!--
       <entry>geometric path on a plane</entry>
-->
<entry>平面上の幾何学的経路</entry>
      </row>

      <row>
       <entry><type>pg_lsn</type></entry>
       <entry></entry>
<!--
       <entry><productname>PostgreSQL</productname> Log Sequence Number</entry>
-->
       <entry><productname>PostgreSQL</productname>ログ順序番号</entry>
      </row>

      <row>
       <entry><type>point</type></entry>
       <entry></entry>
<!--
       <entry>geometric point on a plane</entry>
-->
<entry>平面上の幾何学的点</entry>
      </row>

      <row>
       <entry><type>polygon</type></entry>
       <entry></entry>
<!--
       <entry>closed geometric path on a plane</entry>
-->
       <entry>平面上の閉じた幾何学的経路</entry>
      </row>

      <row>
       <entry><type>real</type></entry>
       <entry><type>float4</type></entry>
<!--
       <entry>single precision floating-point number (4 bytes)</entry>
-->
<entry>単精度浮動小数点（4バイト）</entry>
      </row>

      <row>
       <entry><type>smallint</type></entry>
       <entry><type>int2</type></entry>
<!--
       <entry>signed two-byte integer</entry>
-->
<entry>2バイト符号付き整数</entry>
      </row>

      <row>
       <entry><type>smallserial</type></entry>
       <entry><type>serial2</type></entry>
<!--
       <entry>autoincrementing two-byte integer</entry>
-->
<entry>自動増分2バイト整数</entry>
      </row>

      <row>
       <entry><type>serial</type></entry>
       <entry><type>serial4</type></entry>
<!--
       <entry>autoincrementing four-byte integer</entry>
-->
<entry>自動増分4バイト整数</entry>
      </row>

      <row>
       <entry><type>text</type></entry>
       <entry></entry>
<!--
       <entry>variable-length character string</entry>
-->
<entry>可変長文字列</entry>
      </row>

      <row>
       <entry><type>time [ (<replaceable>p</replaceable>) ] [ without time zone ]</type></entry>
       <entry></entry>
<!--
       <entry>time of day (no time zone)</entry>
-->
<entry>時刻（時間帯なし）</entry>
      </row>

      <row>
       <entry><type>time [ (<replaceable>p</replaceable>) ] with time zone</type></entry>
       <entry><type>timetz</type></entry>
<!--
       <entry>time of day, including time zone</entry>
-->
<entry>時間帯付き時刻</entry>
      </row>

      <row>
       <entry><type>timestamp [ (<replaceable>p</replaceable>) ] [ without time zone ]</type></entry>
       <entry></entry>
<!--
       <entry>date and time (no time zone)</entry>
-->
<entry>日付と時刻（時間帯なし）</entry>
      </row>

      <row>
       <entry><type>timestamp [ (<replaceable>p</replaceable>) ] with time zone</type></entry>
       <entry><type>timestamptz</type></entry>
<!--
       <entry>date and time, including time zone</entry>
-->
<entry>時間帯付き日付と時刻</entry>
      </row>

      <row>
       <entry><type>tsquery</type></entry>
       <entry></entry>
<!--
       <entry>text search query</entry>
-->
       <entry>テキスト検索問い合わせ</entry>
      </row>

      <row>
       <entry><type>tsvector</type></entry>
       <entry></entry>
<!--
       <entry>text search document</entry>
-->
       <entry>テキスト検索文書</entry>
      </row>

      <row>
       <entry><type>txid_snapshot</type></entry>
       <entry></entry>
<!--
       <entry>user-level transaction ID snapshot</entry>
-->
       <entry>ユーザレベルのトランザクションIDスナップショット</entry>
      </row>

      <row>
       <entry><type>uuid</type></entry>
       <entry></entry>
<!--
       <entry>universally unique identifier</entry>
-->
       <entry>汎用一意識別子</entry>
      </row>

      <row>
       <entry><type>xml</type></entry>
       <entry></entry>
<!--
       <entry>XML data</entry>
-->
       <entry>XMLデータ</entry>
      </row>

     </tbody>
    </tgroup>
   </table>

  <note>
<!--
   <title>Compatibility</title>
-->
<title>互換性</title>
   <para>
<!--
    The following types (or spellings thereof) are specified by
    <acronym>SQL</acronym>: <type>bigint</type>, <type>bit</type>, <type>bit
    varying</type>, <type>boolean</type>, <type>char</type>,
    <type>character varying</type>, <type>character</type>,
    <type>varchar</type>, <type>date</type>, <type>double
    precision</type>, <type>integer</type>, <type>interval</type>,
    <type>numeric</type>, <type>decimal</type>, <type>real</type>,
    <type>smallint</type>, <type>time</type> (with or without time zone),
    <type>timestamp</type> (with or without time zone),
    <type>xml</type>.
-->
次に挙げるデータ型（あるいはその綴り方）は<acronym>SQL</acronym>で規定されています。
<type>bigint</type>、<type>bit</type>、<type>bit varying</type>、<type>boolean</type>、<type>char</type>、
<type>character varying</type>、<type>character</type>、<type>varchar</type>、
<type>date</type>、<type>double precision</type>、<type>integer</type>、
<type>interval</type>、<type>numeric</type>、<type>decimal</type>、<type>real</type>、
<type>smallint</type>、<type>time</type>（時間帯付き、なしの両方）、
<type>timestamp</type>（時間帯付き、なしの両方）、<type>xml</type>。
   </para>
  </note>

  <para>
<!--
   Each data type has an external representation determined by its input
   and output functions.  Many of the built-in types have
   obvious external formats.  However, several types are either unique
   to <productname>PostgreSQL</productname>, such as geometric
   paths, or have several possible formats, such as the date
   and time types.
   Some of the input and output functions are not invertible, i.e.,
   the result of an output function might lose accuracy when compared to
   the original input.
-->
それぞれのデータ型はそのデータ型の入出力関数で決定される外部表現を保有しています。
組み込みデータ型の多くには、はっきりとした外部書式があります。
とは言っても、経路のような<productname>PostgreSQL</productname>に特有な型や、あるいは、日付や時刻データ型のように書式を複数選択できる型が多くあります。
一部の入出力関数は転置することができません。
つまり、出力関数による結果は最初の入力と比較した場合精度を失う可能性があります。
  </para>

  <sect1 id="datatype-numeric">
<!--
   <title>Numeric Types</title>
-->
<title>数値データ型</title>

   <indexterm zone="datatype-numeric">
<!--
    <primary>data type</primary>
    <secondary>numeric</secondary>
-->
    <primary>データ型</primary>
    <secondary>数値</secondary>
   </indexterm>

   <para>
<!--
    Numeric types consist of two-, four-, and eight-byte integers,
    four- and eight-byte floating-point numbers, and selectable-precision
    decimals.  <xref linkend="datatype-numeric-table"> lists the
    available types.
-->
数値データ型には2、4、8バイト整数と、4、8バイト浮動小数点および精度設定が可能な数があります。
<xref linkend="datatype-numeric-table">に使用可能な型を列挙します。
   </para>

    <table id="datatype-numeric-table">
<!--
     <title>Numeric Types</title>
-->
<title>数値データ型</title>
     <tgroup cols="4">
      <thead>
       <row>
<!--
        <entry>Name</entry>
        <entry>Storage Size</entry>
        <entry>Description</entry>
        <entry>Range</entry>
-->
    <entry>型名</entry>
    <entry>格納サイズ</entry>
    <entry>説明</entry>
    <entry>範囲</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><type>smallint</></entry>
<!--
        <entry>2 bytes</entry>
        <entry>small-range integer</entry>
        <entry>-32768 to +32767</entry>
-->
    <entry>2バイト</entry>
    <entry>狭範囲の整数</entry>
    <entry>-32768から+32767</entry>
       </row>
       <row>
        <entry><type>integer</></entry>
<!--
        <entry>4 bytes</entry>
        <entry>typical choice for integer</entry>
        <entry>-2147483648 to +2147483647</entry>
-->
    <entry>4バイト</entry>
    <entry>典型的に使用する整数</entry>
    <entry>-2147483648から+2147483647</entry>
       </row>
       <row>
        <entry><type>bigint</></entry>
<!--
        <entry>8 bytes</entry>
        <entry>large-range integer</entry>
        <entry>-9223372036854775808 to +9223372036854775807</entry>
-->
    <entry>8バイト</entry>
    <entry>広範囲整数</entry>
    <entry>-9223372036854775808から+9223372036854775807</entry>
       </row>

       <row>
        <entry><type>decimal</></entry>
<!--
        <entry>variable</entry>
        <entry>user-specified precision, exact</entry>
        <entry>up to 131072 digits before the decimal point; up to 16383 digits after the decimal point</entry>
-->
    <entry>可変長</entry>
    <entry>ユーザ指定精度、正確</entry>
    <entry>小数点前までは131072桁、小数点以降は16383桁</entry>
       </row>
       <row>
        <entry><type>numeric</></entry>
<!--
        <entry>variable</entry>
        <entry>user-specified precision, exact</entry>
        <entry>up to 131072 digits before the decimal point; up to 16383 digits after the decimal point</entry>
-->
    <entry>可変長</entry>
    <entry>ユーザ指定精度、正確</entry>
    <entry>小数点前までは131072桁、小数点以降は16383桁</entry>
       </row>

       <row>
        <entry><type>real</></entry>
<!--
        <entry>4 bytes</entry>
        <entry>variable-precision, inexact</entry>
        <entry>6 decimal digits precision</entry>
-->
    <entry>4バイト</entry>
    <entry>可変精度、不正確</entry>
    <entry>6桁精度</entry>
       </row>
       <row>
        <entry><type>double precision</></entry>
<!--
        <entry>8 bytes</entry>
        <entry>variable-precision, inexact</entry>
        <entry>15 decimal digits precision</entry>
-->
    <entry>8バイト</entry>
    <entry>可変精度、不正確</entry>
    <entry>15桁精度</entry>
       </row>

       <row>
        <entry><type>smallserial</type></entry>
<!--
        <entry>2 bytes</entry>
        <entry>small autoincrementing integer</entry>
        <entry>1 to 32767</entry>
-->
    <entry>2バイト</entry>
    <entry>狭範囲自動整数</entry>
    <entry>1から32767</entry>
       </row>

       <row>
        <entry><type>serial</></entry>
<!--
        <entry>4 bytes</entry>
        <entry>autoincrementing integer</entry>
        <entry>1 to 2147483647</entry>
-->
    <entry>4バイト</entry>
    <entry>自動増分整数</entry>
    <entry>1から2147483647</entry>
       </row>

       <row>
        <entry><type>bigserial</type></entry>
<!--
        <entry>8 bytes</entry>
        <entry>large autoincrementing integer</entry>
        <entry>1 to 9223372036854775807</entry>
-->
    <entry>8バイト</entry>
    <entry>広範囲自動増分整数</entry>
    <entry>1から9223372036854775807</entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
<!--
    The syntax of constants for the numeric types is described in
    <xref linkend="sql-syntax-constants">.  The numeric types have a
    full set of corresponding arithmetic operators and
    functions. Refer to <xref linkend="functions"> for more
    information.  The following sections describe the types in detail.
-->
数値データ型に対する定数の構文は<xref linkend="sql-syntax-constants">で説明しています。
数値データ型には対応する算術演算子と関数の一式が揃っています。
詳細は<xref linkend="functions">を参照してください。
次節でデータ型について詳しく説明します。
   </para>

   <sect2 id="datatype-int">
<!--
    <title>Integer Types</title>
-->
<title>整数データ型</title>

    <indexterm zone="datatype-int">
     <primary>integer</primary>
    </indexterm>

    <indexterm zone="datatype-int">
     <primary>smallint</primary>
    </indexterm>

    <indexterm zone="datatype-int">
     <primary>bigint</primary>
    </indexterm>

    <indexterm>
     <primary>int4</primary>
     <see>integer</see>
    </indexterm>

    <indexterm>
     <primary>int2</primary>
     <see>smallint</see>
    </indexterm>

    <indexterm>
     <primary>int8</primary>
     <see>bigint</see>
    </indexterm>

    <para>
<!--
     The types <type>smallint</type>, <type>integer</type>, and
     <type>bigint</type> store whole numbers, that is, numbers without
     fractional components, of various ranges.  Attempts to store
     values outside of the allowed range will result in an error.
-->
<type>smallint</type>、<type>integer</type>、<type>bigint</type>は各種範囲の整数、つまり小数点以下の端数がない数を保持します。
許容範囲から外れた値を保存しようとするとエラーになります。
    </para>

    <para>
<!--
     The type <type>integer</type> is the common choice, as it offers
     the best balance between range, storage size, and performance.
     The <type>smallint</type> type is generally only used if disk
     space is at a premium.  The <type>bigint</type> type is designed to be
     used when the range of the <type>integer</type> type is insufficient.
-->
<type>integer</type>型は数値の範囲、格納サイズおよび性能において最も釣合いが取れていますので、一般的に使用されます。
<type>smallint</type>型は通常はディスク容量に制限が付いている場合にのみ使用します。
<type>bigint</type>型は<type>integer</type>の許容範囲では十分ではない場合にのみ使用すべきです。
    </para>

    <para>
<!--
     On very minimal operating systems the <type>bigint</type> type
     might not function correctly, because it relies on compiler support
     for eight-byte integers.  On such machines, <type>bigint</type>
     acts the same as <type>integer</type>, but still takes up eight
     bytes of storage.  (We are not aware of any modern
     platform where this is the case.)
-->
非常にわずかなオペレーティングシステムで<type>bigint</type>型は、8バイト整数をコンパイラがサポートしているかどうかに依存しますので正常に機能するとは限りません。
そのようなマシンでは<type>bigint</type>は<type>integer</type>と同じように振舞いますが、領域は8バイトまで必要です。
（この状況が当てはまる最近のプラットフォームは把握していません。）
    </para>

    <para>
<!--
     <acronym>SQL</acronym> only specifies the integer types
     <type>integer</type> (or <type>int</type>),
     <type>smallint</type>, and <type>bigint</type>.  The
     type names <type>int2</type>, <type>int4</type>, and
     <type>int8</type> are extensions, which are also used by some
     other <acronym>SQL</acronym> database systems.
-->
<acronym>SQL</acronym>では整数の型として<type>integer</type>（または<type>int</type>）と<type>smallint</type>、<type>bigint</type>のみを規定しています。
<type>int2</type>、<type>int4</type>および<type>int8</type>は拡張ですが、いくつか他の<acronym>SQL</acronym>データベースシステムでも使われています。
    </para>

   </sect2>

   <sect2 id="datatype-numeric-decimal">
<!--
    <title>Arbitrary Precision Numbers</title>
-->
<title>任意の精度を持つ数</title>

    <indexterm>
<!--
     <primary>numeric (data type)</primary>
-->
     <primary>numeric（データ型）</primary>
    </indexterm>

   <indexterm>
<!--
    <primary>arbitrary precision numbers</primary>
-->
    <primary>任意の精度数</primary>
   </indexterm>

    <indexterm>
<!--
     <primary>decimal</primary>
-->
     <primary>10進数</primary>
     <see>numeric</see>
    </indexterm>

    <para>
<!--
     The type <type>numeric</type> can store numbers with a
     very large number of digits and perform calculations exactly. It is
     especially recommended for storing monetary amounts and other
     quantities where exactness is required. However, arithmetic on
     <type>numeric</type> values is very slow compared to the integer
     types, or to the floating-point types described in the next section.
-->
<type>numeric</type>型は、非常に大きな桁数で数値を格納でき、正確な計算を行えます。
通貨金額やその他正確性が求められる数量を保存する時は特に、この型を推奨します。
とは言っても、<type>numeric</type>の値に対する算術演算の動作は次節で説明する整数型、もしくは浮動小数点データ型に比較し非常に遅くなります。
    </para>

    <para>
<!--
     We use the following terms below:  The
     <firstterm>scale</firstterm> of a <type>numeric</type> is the
     count of decimal digits in the fractional part, to the right of
     the decimal point.  The <firstterm>precision</firstterm> of a
     <type>numeric</type> is the total count of significant digits in
     the whole number, that is, the number of digits to both sides of
     the decimal point.  So the number 23.5141 has a precision of 6
     and a scale of 4.  Integers can be considered to have a scale of
     zero.
-->
この後の説明では、次の用語を使用します。
<type>numeric</type>の<firstterm>位取り</firstterm>とは、小数点の右側の小数点以下の桁数をいいます。
<type>numeric</type>の<firstterm>精度</firstterm>とは数字全体の有効桁数です。
すなわち、小数点をはさんでいる両側の桁数の合計です。
そのため、23.5141という数値の精度は6で位取りは4となります。
整数の位取りは、ゼロであるとみなすことができます。
    </para>

    <para>
<!--
     Both the maximum precision and the maximum scale of a
     <type>numeric</type> column can be
     configured.  To declare a column of type <type>numeric</type> use
     the syntax:
-->
<type>numeric</type>列の数値の最大精度と最大位取りはともに設定することができます。
列のデータ型を<type>numeric</type>と宣言するには次の構文を使います。
<programlisting>
NUMERIC(<replaceable>precision</replaceable>, <replaceable>scale</replaceable>)
</programlisting>
<!--
     The precision must be positive, the scale zero or positive.
     Alternatively:
-->
精度は正数、位取りは0もしくは正数でなければなりません。
他に
<programlisting>
NUMERIC(<replaceable>precision</replaceable>)
</programlisting>
<!--
     selects a scale of 0.  Specifying:
-->
は位取りが0であることを選択します。
<programlisting>
NUMERIC
</programlisting>
<!--
     without any precision or scale creates a column in which numeric
     values of any precision and scale can be stored, up to the
     implementation limit on precision.  A column of this kind will
     not coerce input values to any particular scale, whereas
     <type>numeric</type> columns with a declared scale will coerce
     input values to that scale.  (The <acronym>SQL</acronym> standard
     requires a default scale of 0, i.e., coercion to integer
     precision.  We find this a bit useless.  If you're concerned
     about portability, always specify the precision and scale
     explicitly.)
-->
精度または位取りの指定がない場合、実装されている限界の精度まで、いかなる精度あるいは位取りの値も格納できる列が作られます。
この類の列はいかなる特定の位取りに対しても入力値を強要しませんが、宣言された位取りを持つ<type>numeric</type>列は入力値にその位取りを強要します。
（標準<acronym>SQL</acronym>はデフォルトとして位取り0を要求していて、整数に対する厳密性を強制しています。
しかし、この方法はあまり役に立たないと思われます。
もし移植性を心配するなら、常に精度と位取りを明示的に設定してください。）
    </para>

    <note>
     <para>
<!--
      The maximum allowed precision when explicitly specified in the
      type declaration is 1000; <type>NUMERIC</type> without a specified
      precision is subject to the limits described in <xref
      linkend="datatype-numeric-table">.
-->
明示的に型宣言で指定される場合に許される最大精度は1000です。
精度の指定がない<type>NUMERIC</type>は<xref linkend="datatype-numeric-table">で説明する制限に従います。

     </para>
    </note>


    <para>
<!--
     If the scale of a value to be stored is greater than the declared
     scale of the column, the system will round the value to the specified
     number of fractional digits.  Then, if the number of digits to the
     left of the decimal point exceeds the declared precision minus the
     declared scale, an error is raised.
-->
格納される値の位取りが宣言された列の位取りより大きかった場合、システムは指定された小数部の桁まで値を丸めます。
そして、小数点の左側の桁数が、宣言された精度から宣言された位取りを差し引いた数を超える場合にエラーとなります。
    </para>

    <para>
<!--
     Numeric values are physically stored without any extra leading or
     trailing zeroes.  Thus, the declared precision and scale of a column
     are maximums, not fixed allocations.  (In this sense the <type>numeric</>
     type is more akin to <type>varchar(<replaceable>n</>)</type>
     than to <type>char(<replaceable>n</>)</type>.)  The actual storage
     requirement is two bytes for each group of four decimal digits,
     plus three to eight bytes overhead.

-->
数値は物理的に先頭や末尾に0を付与されることなく格納されます。
したがって、列の宣言された精度と位取りは最大であり、固定的に割り当てられていません。
（この意味では<type>numeric</>は<type>char(<replaceable>n</>)</type>よりも<type>varchar(<replaceable>n</>)</type>に似ています。）
実際の格納に必要な容量は、10進数4桁のそれぞれのグループに対して2バイトと、3から8バイトのオーバヘッドです。
    </para>

    <indexterm>
     <primary>NaN</primary>
<!--
     <see>not a number</see>
-->
     <see>非数</see>
   </indexterm>

    <indexterm>
<!--
     <primary>not a number</primary>
     <secondary>numeric (data type)</secondary>
-->
     <primary>非数</primary>
     <secondary>数値（データ型）</secondary>
    </indexterm>

    <para>
<!--
     In addition to ordinary numeric values, the <type>numeric</type>
     type allows the special value <literal>NaN</>, meaning
     <quote>not-a-number</quote>.  Any operation on <literal>NaN</>
     yields another <literal>NaN</>.  When writing this value
     as a constant in an SQL command, you must put quotes around it,
     for example <literal>UPDATE table SET x = 'NaN'</>.  On input,
     the string <literal>NaN</> is recognized in a case-insensitive manner.
-->
通常の数値に加え、<type>numeric</type>型は、<quote>非数値</quote>を意味する<literal>NaN</>という特別な値を取ることができます。
<literal>NaN</>に対する操作はすべて、別の<literal>NaN</>を生成します。
この値をSQLコマンドの定数として記述する場合は、例えば<literal>UPDATE table SET x = 'NaN'</>のように、引用符でくくらなければなりません。
入力の際は、<literal>NaN</>という文字列は大文字小文字の区別なく認識されます。
    </para>

    <note>
     <para>
<!--
      In most implementations of the <quote>not-a-number</> concept,
      <literal>NaN</> is not considered equal to any other numeric
      value (including <literal>NaN</>).  In order to allow
      <type>numeric</> values to be sorted and used in tree-based
      indexes, <productname>PostgreSQL</> treats <literal>NaN</>
      values as equal, and greater than all non-<literal>NaN</>
      values.
-->
ほとんどの<quote>非数</>の実装において、<literal>NaN</>は（<literal>NaN</>を含む）他の数値と等価になるとみなされていません。
<type>numeric</>値をソートできる、また、ツリーを基にしたインデックスで使用できるように、<productname>PostgreSQL</>は<literal>NaN</>同士は等しく、すべての<literal>NaN</>以外の値よりも大きな値となるものとして扱います。
     </para>
    </note>

    <para>
<!--
     The types <type>decimal</type> and <type>numeric</type> are
     equivalent.  Both types are part of the <acronym>SQL</acronym>
     standard.
-->
<type>decimal</type>と<type>numeric</type>型は等価です。
2つのデータ型はともに標準<acronym>SQL</acronym>に従っています。
    </para>
   </sect2>


   <sect2 id="datatype-float">
<!--
    <title>Floating-Point Types</title>
-->
<title>浮動小数点データ型</title>

    <indexterm zone="datatype-float">
     <primary>real</primary>
    </indexterm>

    <indexterm zone="datatype-float">
     <primary>double precision</primary>
    </indexterm>

    <indexterm>
     <primary>float4</primary>
     <see>real</see>
    </indexterm>

    <indexterm>
     <primary>float8</primary>
     <see>double precision</see>
    </indexterm>

    <indexterm zone="datatype-float">
<!--
     <primary>floating point</primary>
-->
     <primary>浮動小数点</primary>
    </indexterm>

    <para>
<!--
     The data types <type>real</type> and <type>double
     precision</type> are inexact, variable-precision numeric types.
     In practice, these types are usually implementations of
     <acronym>IEEE</acronym> Standard 754 for Binary Floating-Point
     Arithmetic (single and double precision, respectively), to the
     extent that the underlying processor, operating system, and
     compiler support it.
-->
<type>real</type>と<type>double precision</type>は不正確な可変精度の数値データ型です。
実際にはこれらのデータ型は、使用しているプロセッサ、オペレーティングシステムおよびコンパイラがサポートしていれば、通常は（それぞれ単精度および倍精度の）バイナリ浮動小数点演算用の<acronym>IEEE</acronym>規格754の実装です。
    </para>

    <para>
<!--
     Inexact means that some values cannot be converted exactly to the
     internal format and are stored as approximations, so that storing
     and retrieving a value might show slight discrepancies.
     Managing these errors and how they propagate through calculations
     is the subject of an entire branch of mathematics and computer
     science and will not be discussed here, except for the
     following points:
-->
不正確というのは、ある値はそのままで内部形式に変換されずに近似値として保存されるということです。
ですから、保存しようとする値と抽出しようとする値の間に多少の差異が認められます。
これらのエラーを管理し計算によって補正をどうするかについては、数学とコンピュータ科学の系統すべてに関わることで、以下の点を除き触れません。
     <itemizedlist>
      <listitem>
       <para>
<!--
        If you require exact storage and calculations (such as for
        monetary amounts), use the <type>numeric</type> type instead.
-->
（金銭金額など）正確な記録と計算が必要な時は代わりに<type>numeric</type>を使用してください。
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        If you want to do complicated calculations with these types
        for anything important, especially if you rely on certain
        behavior in boundary cases (infinity, underflow), you should
        evaluate the implementation carefully.
-->
これらのデータ型で何か重要な件に対し複雑な計算を必要とする時、特に（無限大やアンダーフローのような）境界線におけるある種の振舞いについて信頼を置かなければならないのであれば、実装を注意深く検証しなければなりません。
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        Comparing two floating-point values for equality might not
        always work as expected.
-->
2つの浮動小数点値が等価であるのかどうかの比較は予想通りに行かない時もあります。
       </para>
      </listitem>
     </itemizedlist>
    </para>

    <para>
<!--
     On most platforms, the <type>real</type> type has a range of at least
     1E-37 to 1E+37 with a precision of at least 6 decimal digits.  The
     <type>double precision</type> type typically has a range of around
     1E-307 to 1E+308 with a precision of at least 15 digits.  Values that
     are too large or too small will cause an error.  Rounding might
     take place if the precision of an input number is too high.
     Numbers too close to zero that are not representable as distinct
     from zero will cause an underflow error.
-->
ほとんどのプラットフォームでは<type>real</type>は最低6桁の精度を持った少なくとも-1E+37と+1E+37の範囲です。
<type>double precision</type>は通常最低15桁の精度でおよそ-1E+308と+1E+308の範囲です。
大き過ぎたり小さ過ぎる値はエラーの原因となります。
入力値の精度が高過ぎる場合は丸められることがあります。
ゼロに限りなく近い値で、しかもゼロとは区別されているようにみなされない数値はアンダーフローエラーを引き起こします。
    </para>

    <note>
     <para>
<!--
      The <xref linkend="guc-extra-float-digits"> setting controls the
      number of extra significant digits included when a floating point
      value is converted to text for output.  With the default value of
      <literal>0</literal>, the output is the same on every platform
      supported by PostgreSQL.  Increasing it will produce output that
      more accurately represents the stored value, but may be unportable.
-->
浮動小数点を含む値がテキスト型に変換される場合、<xref linkend="guc-extra-float-digits">によって有効数字を制御します。
デフォルト値の<literal>0</literal>が指定されている場合、出力はPostgreSQLをサポートする全てのプラットホームで同じです。
この値を大きくすることで格納された値をより精密に表現できますが、プラットホーム間の移植性が失われるかもしれません。

     </para>
    </note>


    <indexterm>
<!--
     <primary>not a number</primary>
     <secondary>double precision</secondary>
-->
     <primary>非数</primary>
     <secondary>倍精度</secondary>
    </indexterm>

    <para>
<!--
     In addition to ordinary numeric values, the floating-point types
     have several special values:
-->
通常の数値に加え、浮動小数点型では以下の特殊な値を取ります。
<literallayout>
<literal>Infinity</literal>
<literal>-Infinity</literal>
<literal>NaN</literal>
</literallayout>
<!--
     These represent the IEEE 754 special values
     <quote>infinity</quote>, <quote>negative infinity</quote>, and
     <quote>not-a-number</quote>, respectively.  (On a machine whose
     floating-point arithmetic does not follow IEEE 754, these values
     will probably not work as expected.)  When writing these values
     as constants in an SQL command, you must put quotes around them,
     for example <literal>UPDATE table SET x = 'Infinity'</>.  On input,
     these strings are recognized in a case-insensitive manner.
-->
これらはそれぞれ、IEEE 754の特殊な値、<quote>無限大</quote>、<quote>負の無限大</quote>、<quote>非数値</quote>を表します。
（浮動小数点計算がIEEE 754に従わないマシンでは、これらの値はおそらく正しく動作しません。）
これらの値をSQLコマンドの定数として記述する場合、例えば<literal>UPDATE table SET x = 'Infinity'</>のように引用符でくくる必要があります。
入力の際、これらの文字列は大文字小文字の区別なく認識されます。
    </para>

    <note>
     <para>
<!--
      IEEE754 specifies that <literal>NaN</> should not compare equal
      to any other floating-point value (including <literal>NaN</>).
      In order to allow floating-point values to be sorted and used
      in tree-based indexes, <productname>PostgreSQL</> treats
      <literal>NaN</> values as equal, and greater than all
      non-<literal>NaN</> values.
-->
IEEE754では、<literal>NaN</>は（<literal>NaN</>を含む）他のすべての浮動小数点値と比べた時に不等でなければならないと規定しています。
浮動小数点値をソートできる、また、ツリーを基にしたインデックスで使用できるように、<productname>PostgreSQL</>は<literal>NaN</>同士は等しく、すべての<literal>NaN</>以外の値よりも大きな値となるものとして扱います。
     </para>
    </note>

    <para>
<!--
     <productname>PostgreSQL</productname> also supports the SQL-standard
     notations <type>float</type> and
     <type>float(<replaceable>p</replaceable>)</type> for specifying
     inexact numeric types.  Here, <replaceable>p</replaceable> specifies
     the minimum acceptable precision in <emphasis>binary</> digits.
     <productname>PostgreSQL</productname> accepts
     <type>float(1)</type> to <type>float(24)</type> as selecting the
     <type>real</type> type, while
     <type>float(25)</type> to <type>float(53)</type> select
     <type>double precision</type>.  Values of <replaceable>p</replaceable>
     outside the allowed range draw an error.
     <type>float</type> with no precision specified is taken to mean
     <type>double precision</type>.
-->
また、<productname>PostgreSQL</productname>では不正確な数値型を規定する標準SQLの<type>float</type>と<type>float(<replaceable>p</replaceable>)</type>をサポートしています。
ここで、<replaceable>p</replaceable>は<emphasis>2進数</>桁数で最低受け付ける精度を指定します。
<productname>PostgreSQL</productname>は<type>float(1)</type>から<type>float(24)</type>を<type>real</type>を選択するものとして受け付け、<type>float(25)</type>から<type>float(53)</type>を<type>double precision</type>を選択するものとして受け付けます。
許容範囲外の<replaceable>p</replaceable>の値はエラーになります。
精度指定のない<type>float</type>は<type>double precision</type>として解釈されます。
    </para>

    <note>
     <para>
<!--
      The assumption that <type>real</type> and
      <type>double precision</type> have exactly 24 and 53 bits in the
      mantissa respectively is correct for IEEE-standard floating point
      implementations.  On non-IEEE platforms it might be off a little, but
      for simplicity the same ranges of <replaceable>p</replaceable> are used
      on all platforms.
-->
<type>real</type>と<type>double precision</type>の仮数がそれぞれ24ビットと53ビットであるという前提は、IEEE標準浮動小数点の実装では正しいものです。
非IEEEのプラットフォームでは、一部無効になる可能性がありますが、単純化のためにすべてのプラットフォームで<replaceable>p</replaceable>の範囲は同一です。
     </para>
    </note>

   </sect2>

   <sect2 id="datatype-serial">
<!--
    <title>Serial Types</title>
-->
    <title>連番型</title>

    <indexterm zone="datatype-serial">
     <primary>smallserial</primary>
    </indexterm>

    <indexterm zone="datatype-serial">
     <primary>serial</primary>
    </indexterm>

    <indexterm zone="datatype-serial">
     <primary>bigserial</primary>
    </indexterm>

    <indexterm zone="datatype-serial">
     <primary>serial2</primary>
    </indexterm>

    <indexterm zone="datatype-serial">
     <primary>serial4</primary>
    </indexterm>

    <indexterm zone="datatype-serial">
     <primary>serial8</primary>
    </indexterm>

    <indexterm>
<!--
     <primary>auto-increment</primary>
-->
     <primary>自動増分</primary>
     <see>serial</see>
    </indexterm>

    <indexterm>
<!--
     <primary>sequence</primary>
     <secondary>and serial type</secondary>
-->
     <primary>シーケンス</primary>
     <secondary>連番型</secondary>
    </indexterm>

    <para>
<!--
     The data types <type>smallserial</type>, <type>serial</type> and
     <type>bigserial</type> are not true types, but merely
     a notational convenience for creating unique identifier columns
     (similar to the <literal>AUTO_INCREMENT</literal> property
     supported by some other databases). In the current
     implementation, specifying:
-->
<type>smallserial</type>、<type>serial</type>および<type>bigserial</type>データ型は正確にはデータ型ではなく、テーブルの列に一意の識別子を作成する簡便な表記法です
（他のデータベースでサポートされる<literal>AUTO_INCREMENT</literal>プロパティに似ています）。
現在の実装では、

<programlisting>
CREATE TABLE <replaceable class="parameter">tablename</replaceable> (
    <replaceable class="parameter">colname</replaceable> SERIAL
);
</programlisting>

<!--
     is equivalent to specifying:
-->
は以下を指定することと同じです。

<programlisting>
CREATE SEQUENCE <replaceable class="parameter">tablename</replaceable>_<replaceable class="parameter">colname</replaceable>_seq;
CREATE TABLE <replaceable class="parameter">tablename</replaceable> (
    <replaceable class="parameter">colname</replaceable> integer NOT NULL DEFAULT nextval('<replaceable class="parameter">tablename</replaceable>_<replaceable class="parameter">colname</replaceable>_seq')
);
ALTER SEQUENCE <replaceable class="parameter">tablename</replaceable>_<replaceable class="parameter">colname</replaceable>_seq OWNED BY <replaceable class="parameter">tablename</replaceable>.<replaceable class="parameter">colname</replaceable>;
</programlisting>

<!--
     Thus, we have created an integer column and arranged for its default
     values to be assigned from a sequence generator.  A <literal>NOT NULL</>
     constraint is applied to ensure that a null value cannot be
     inserted.  (In most cases you would also want to attach a
     <literal>UNIQUE</> or <literal>PRIMARY KEY</> constraint to prevent
     duplicate values from being inserted by accident, but this is
     not automatic.)  Lastly, the sequence is marked as <quote>owned by</>
     the column, so that it will be dropped if the column or table is dropped.
-->
このように整数列を作成し、その列のデフォルト値が連番ジェネレータから割り当てられるようにしました。
また、<literal>NOT NULL</>制約を適用することによって、NULL値が挿入されないようにします。
（たいていの場合は、重複する値を間違って挿入しないように、<literal>UNIQUE</>制約または<literal>PRIMARY KEY</>制約も追加することが推奨されますが、これは自動的には行われません。）
最後に、シーケンスは列に<quote>より所有</>されるものと印が付きます。
したがって、テーブルの列が削除された場合にシーケンスは削除されます。
    </para>

    <note>
      <para>
<!--
        Because <type>smallserial</type>, <type>serial</type> and
        <type>bigserial</type> are implemented using sequences, there may
        be "holes" or gaps in the sequence of values which appears in the
        column, even if no rows are ever deleted.  A value allocated
        from the sequence is still "used up" even if a row containing that
        value is never successfully inserted into the table column.  This
        may happen, for example, if the inserting transaction rolls back.
        See <literal>nextval()</literal> in <xref linkend="functions-sequence">
        for details.
-->
<type>smallserial</type>、 <type>serial</type>および<type>bigserial</type>はシーケンスを使って実装されているため、行の削除が行われていなくとも、列に"穴"や連番の抜けが発生するかもしれません。また、テーブルへ正常に挿入されていないにも関わらず、シーケンスの値を"消費してしまう"こともあります。これは、例えば挿入したトランザクションがロールバックされた時に発生することがあります。詳細は<xref linkend="functions-sequence">の<literal>nextval()</literal>を参照してください。
      </para>
    </note>

    <para>
<!--
     To insert the next value of the sequence into the <type>serial</type>
     column, specify that the <type>serial</type>
     column should be assigned its default value. This can be done
     either by excluding the column from the list of columns in
     the <command>INSERT</command> statement, or through the use of
     the <literal>DEFAULT</literal> key word.
-->
<type>serial</type>列にシーケンスの次の値を挿入するには、<type>serial</type>列にそのデフォルト値を割り当てるよう指定してください。
これは、<command>INSERT</command>文の列リストからその列を除外する、もしくは<literal>DEFAULT</literal>キーワードを使用することで行うことができます。
    </para>

    <para>
<!--
     The type names <type>serial</type> and <type>serial4</type> are
     equivalent: both create <type>integer</type> columns.  The type
     names <type>bigserial</type> and <type>serial8</type> work
     the same way, except that they create a <type>bigint</type>
     column.  <type>bigserial</type> should be used if you anticipate
     the use of more than 2<superscript>31</> identifiers over the
     lifetime of the table. The type names <type>smallserial</type> and
     <type>serial2</type> also work the same way, except that they
     create a <type>smallint</type> column.
-->
<type>serial</type>と<type>serial4</type>という型の名称は等価です。
ともに<type>integer</type>列を作成します。
<type>bigserial</type>と<type>serial8</type>という型の名称も<type>bigint</type>列を作成することを除いて同じ振舞いをします。
もしテーブルを使用する期間で2<superscript>31</>以上の識別子を使用すると予測される場合、<type>bigserial</type>を使用しなければいけません。<type>smallserial</type>と<type>serial2</type>という型の名称もまた、<type>smallint</type>列を作成することを除いて同じ振舞いをします。
    </para>

    <para>
<!--
     The sequence created for a <type>serial</type> column is
     automatically dropped when the owning column is dropped.
     You can drop the sequence without dropping the column, but this
     will force removal of the column default expression.
-->
<type>serial</type>列用に作成されたシーケンスは、それを所有する列が削除された時に自動的に削除されます。
列を削除せずにシーケンスを削除することができますが、これにより強制的に列のデフォルト式が削除されます。
    </para>
   </sect2>
  </sect1>

  <sect1 id="datatype-money">
<!--
   <title>Monetary Types</title>
-->
<title>通貨型</title>

   <para>
<!--
    The <type>money</type> type stores a currency amount with a fixed
    fractional precision; see <xref
    linkend="datatype-money-table">.  The fractional precision is
    determined by the database's <xref linkend="guc-lc-monetary"> setting.
    The range shown in the table assumes there are two fractional digits.
    Input is accepted in a variety of formats, including integer and
    floating-point literals, as well as typical
    currency formatting, such as <literal>'$1,000.00'</literal>.
    Output is generally in the latter form but depends on the locale.
-->
<type>money</type>型は貨幣金額を固定精度の小数点で格納します。
<xref linkend="datatype-money-table">を参照してください。
小数点精度はデータベースの<xref linkend="guc-lc-monetary">設定で決定されます。この表が示すように範囲は小数点2桁を想定しています。

<literal>'$1,000.00'</literal>などの典型的な通貨書式の他、整数、浮動小数点リテラルなど様々な書式の入力を受け付けます。
出力形式は通常は<quote>典型的な</quote>通貨書式となりますが、ロケールによって異なります。

   </para>

    <table id="datatype-money-table">
<!--
     <title>Monetary Types</title>
-->
<title>通貨型</title>
     <tgroup cols="4">
      <thead>
       <row>
<!--
        <entry>Name</entry>
        <entry>Storage Size</entry>
        <entry>Description</entry>
        <entry>Range</entry>
-->
    <entry>型名</entry>
    <entry>格納サイズ</entry>
    <entry>説明</entry>
    <entry>範囲</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>money</entry>
<!--
        <entry>8 bytes</entry>
        <entry>currency amount</entry>
        <entry>-92233720368547758.08 to +92233720368547758.07</entry>
-->
    <entry>8バイト</entry>
    <entry>貨幣金額</entry>
    <entry>-92233720368547758.08 から +92233720368547758.07</entry>
       </row>
      </tbody>
     </tgroup>
    </table>


   <para>
<!--
    Since the output of this data type is locale-sensitive, it might not
    work to load <type>money</> data into a database that has a different
    setting of <varname>lc_monetary</>.  To avoid problems, before
    restoring a dump into a new database make sure <varname>lc_monetary</> has
    the same or equivalent value as in the database that was dumped.
-->
このデータ型の出力はロケールにより変動しますので、<varname>lc_monetary</>設定が異なるデータベースに<type>money</>データをロードする場合には動作しない可能性があります。
この問題を防ぐためには、ダンプを新しいデータベースにリストアする前に、<varname>lc_monetary</>がダンプを行ったデータベースと同じまたは等価であることを確認してください。

   </para>

   <para>
<!--
    Values of the <type>numeric</type>, <type>int</type>, and
    <type>bigint</type> data types can be cast to <type>money</type>.
    Conversion from the <type>real</type> and <type>double precision</type>
    data types can be done by casting to <type>numeric</type> first, for
    example:
-->
<type>numeric</type>、<type>int</type>そして<type>bigint</type>型は<type>money</type>型にキャストすることができます。<type>real</type>型や<type>double precision</type>型は最初に<type>numeric</type> 型にキャストした後に行なう必要があります。以下に例を示します。

<programlisting>
SELECT '12.34'::float8::numeric::money;
</programlisting>
<!--
    However, this is not recommended.  Floating point numbers should not be
    used to handle money due to the potential for rounding errors.
-->
しかしこれは推奨されません。浮動小数点数値は丸めの可能性がありますので貨幣を扱うために使用すべきではありません。

   </para>

   <para>
<!--
    A <type>money</type> value can be cast to <type>numeric</type> without
    loss of precision. Conversion to other types could potentially lose
    precision, and must also be done in two stages:
-->
<type>money</type>型の値は精度を落とすことなく<type>numeric</type>にキャストすることができます。
他の型への変換では精度を落とす可能性がありますので、２段階で行う必要があります。


<programlisting>
SELECT '52093.89'::money::numeric::float8;
</programlisting>
   </para>

   <para>
<!--
    When a <type>money</type> value is divided by another <type>money</type>
    value, the result is <type>double precision</type> (i.e., a pure number,
    not money); the currency units cancel each other out in the division.
-->

<type>money</type>型の値を別の<type>money</type>型の値で除算すると、結果は<type>double precision</type>型（通貨ではなく純粋な数値）になります。
除算では通貨の単位は相殺されます。

   </para>

  </sect1>


  <sect1 id="datatype-character">
<!--
   <title>Character Types</title>
-->
<title>文字型</title>

   <indexterm zone="datatype-character">
<!--
    <primary>character string</primary>
    <secondary>data types</secondary>
-->
    <primary>文字の並び</primary>
    <secondary>データ型</secondary>
   </indexterm>

   <indexterm>
<!--
    <primary>string</primary>
    <see>character string</see>
-->
    <primary>文字列</primary>
    <see>文字の並び</see>
   </indexterm>

   <indexterm zone="datatype-character">
    <primary>character</primary>
   </indexterm>

   <indexterm zone="datatype-character">
    <primary>character varying</primary>
   </indexterm>

   <indexterm zone="datatype-character">
    <primary>text</primary>
   </indexterm>

   <indexterm zone="datatype-character">
    <primary>char</primary>
   </indexterm>

   <indexterm zone="datatype-character">
    <primary>varchar</primary>
   </indexterm>

    <table id="datatype-character-table">
<!--
     <title>Character Types</title>
-->
<title>文字型</title>
     <tgroup cols="2">
      <thead>
       <row>
<!--
        <entry>Name</entry>
        <entry>Description</entry>
-->
    <entry>型名</entry>
    <entry>説明</entry>
       </row>
      </thead>
      <tbody>
       <row>
<!--
        <entry><type>character varying(<replaceable>n</>)</type>, <type>varchar(<replaceable>n</>)</type></entry> 
-->
        <entry><type>character varying(<replaceable>n</>)</type>、<type>varchar(<replaceable>n</>)</type></entry>
<!--
        <entry>variable-length with limit</entry>
-->
        <entry>上限付き可変長</entry>
       </row>
       <row>
<!--
        <entry><type>character(<replaceable>n</>)</type>, <type>char(<replaceable>n</>)</type></entry> 
-->
        <entry><type>character(<replaceable>n</>)</type>、<type>char(<replaceable>n</>)</type></entry>
<!--
        <entry>fixed-length, blank padded</entry>
-->
    <entry>空白で埋められた固定長</entry>
       </row>
       <row>
        <entry><type>text</type></entry>
<!--
        <entry>variable unlimited length</entry>
-->
    <entry>制限なし可変長</entry>
       </row>
     </tbody>
     </tgroup>
    </table>

   <para>
<!--
    <xref linkend="datatype-character-table"> shows the
    general-purpose character types available in
    <productname>PostgreSQL</productname>.
-->
<xref linkend="datatype-character-table">は<productname>PostgreSQL</productname>で使用可能な汎用文字型を示したものです。
   </para>

   <para>
<!--
    <acronym>SQL</acronym> defines two primary character types:
    <type>character varying(<replaceable>n</>)</type> and
    <type>character(<replaceable>n</>)</type>, where <replaceable>n</>
    is a positive integer.  Both of these types can store strings up to
    <replaceable>n</> characters (not bytes) in length.  An attempt to store a
    longer string into a column of these types will result in an
    error, unless the excess characters are all spaces, in which case
    the string will be truncated to the maximum length. (This somewhat
    bizarre exception is required by the <acronym>SQL</acronym>
    standard.) If the string to be stored is shorter than the declared
    length, values of type <type>character</type> will be space-padded;
    values of type <type>character varying</type> will simply store the
    shorter
    string.
-->
<acronym>SQL</acronym>は2つの主要な文字データ型を定義しています。
<type>character varying(<replaceable>n</>)</type>と<type>character(<replaceable>n</>)</type>です。
ここで<replaceable>n</>は正の整数です。
これらのデータ型は2つとも<replaceable>n</>文字長（バイト数ではなく）までの文字列を保存できます。
超過している文字がすべて空白の場合を除いて、上限を越えた文字列をこの型の列に保存しようとするとエラーになります。
すべて空白の場合は長さの限界で切り捨てられます。
（この一風変わった例外は標準<acronym>SQL</acronym>で要求されています。）
もし宣言された上限よりも文字列が短い時は<type>character</type>の値は空白で埋められ、<type>character varying</type>の値は単にその短い文字列で保存されます。
   </para>

   <para>
<!--
    If one explicitly casts a value to <type>character
    varying(<replaceable>n</>)</type> or
    <type>character(<replaceable>n</>)</type>, then an over-length
    value will be truncated to <replaceable>n</> characters without
    raising an error. (This too is required by the
    <acronym>SQL</acronym> standard.)
-->
明示的に値を<type>character varying(<replaceable>n</>)</type>または<type>character(<replaceable>n</>)</type>にキャストした場合、指定長を超えるとエラーなしで<replaceable>n</>文字まで切り詰められます。
（これもまた標準<acronym>SQL</acronym>の仕様です。）

   </para>

   <para>
<!--
    The notations <type>varchar(<replaceable>n</>)</type> and
    <type>char(<replaceable>n</>)</type> are aliases for <type>character
    varying(<replaceable>n</>)</type> and
    <type>character(<replaceable>n</>)</type>, respectively.
    <type>character</type> without length specifier is equivalent to
    <type>character(1)</type>. If <type>character varying</type> is used
    without length specifier, the type accepts strings of any size. The
    latter is a <productname>PostgreSQL</> extension.
-->
<type>char(<replaceable>n</>)</type>および<type>varchar(<replaceable>n</>)</type>という表記法はそれぞれ<type>character(<replaceable>n</>)</type>と<type>character varying(<replaceable>n</>)</type>の別名です。
長さ指定がない<type>character</type>は<type>character(1)</type>と同じです。
<type>character varying</type>が長さ指定なしで使われた時は、いかなる長さの文字列でも受け付けます。
後者は<productname>PostgreSQL</>の拡張です。
   </para>

   <para>
<!--
    In addition, <productname>PostgreSQL</productname> provides the
    <type>text</type> type, which stores strings of any length.
    Although the type <type>text</type> is not in the
    <acronym>SQL</acronym> standard, several other SQL database
    management systems have it as well.
-->
さらに<productname>PostgreSQL</productname>は、いかなる長さの文字列でも格納できる<type>text</type>をサポートします。
<type>text</type>型は標準<acronym>SQL</acronym>にはありませんが、多くの他のSQLデータベース管理システムも同様にサポートしています。
   </para>

   <para>
<!--
    Values of type <type>character</type> are physically padded
    with spaces to the specified width <replaceable>n</>, and are
    stored and displayed that way.  However, trailing spaces are treated as
    semantically insignificant and disregarded when comparing two values
    of type <type>character</type>.  In collations where whitespace
    is significant, this behavior can produce unexpected results,
    e.g. <command>SELECT 'a '::CHAR(2) collate "C" &lt;
    'a\n'::CHAR(2)</command> returns true.
    Trailing spaces are removed when converting a <type>character</type> value
    to one of the other string types.  Note that trailing spaces
    <emphasis>are</> semantically significant in
    <type>character varying</type> and <type>text</type> values, and
    when using pattern matching, e.g. <literal>LIKE</>,
    regular expressions.
-->
<type>character</type>型の値は、指定長<replaceable>n</>になるまで物理的に空白で埋められ、そのまま格納、表示されます。
しかし、最後の空白は、重要ではないものとして扱われ、2つの<type>character</type>型の値を比べる際には無視されます。この挙動は予期しない結果を返す可能性があります。例えば、<command>SELECT 'a '::CHAR(2) collate "C" &lt;
    'a\n'::CHAR(2)</command>は真を返します。
また、<type>character</type>値を他の文字列型に変換する際には除去されます。
<type>character varying</type>型と<type>text</type>型の値では、<literal>LIKE</>や正規表現でのパターンマッチを行なう際、最後の空白は意味的に重要<emphasis>なもの</>ですので、注意してください。
   </para>

   <para>
<!--
    The storage requirement for a short string (up to 126 bytes) is 1 byte
    plus the actual string, which includes the space padding in the case of
    <type>character</type>.  Longer strings have 4 bytes of overhead instead
    of 1.  Long strings are compressed by the system automatically, so
    the physical requirement on disk might be less. Very long values are also
    stored in background tables so that they do not interfere with rapid
    access to shorter column values. In any case, the longest
    possible character string that can be stored is about 1 GB. (The
    maximum value that will be allowed for <replaceable>n</> in the data
    type declaration is less than that. It wouldn't be useful to
    change this because with multibyte character encodings the number of
    characters and bytes can be quite different. If you desire to
    store long strings with no specific upper limit, use
    <type>text</type> or <type>character varying</type> without a length
    specifier, rather than making up an arbitrary length limit.)
-->
短い文字列（126バイトまで）の保存には、実際の文字列に１バイト加えたサイズが必要です。
<type>character</type>では空白埋め込み分が加わります。
より長い文字列では１バイトではなく４バイトのオーバーヘッドになります。
長い文字列はシステムにより自動的に圧縮されますので、ディスク上の物理的必要容量サイズはより小さくなるかもしれません。
また、非常に長い値はより短い列の値への高速アクセスに干渉しないように、バックグラウンドテーブルに格納されます。
いずれの場合にあっても保存できる最長の文字列は約1ギガバイトです。
（データ型宣言に使われる<replaceable>n</>に許される最大値はこれより小さいものです。
マルチバイト文字符号化方式においては文字数とバイト数はまったく異なっているため、この値の変更は便利ではありません。
特定の上限を設けずに長い文字列を保存したい場合は、任意の上限を設けるよりも長さの指定がない<type>text</type>もしくは<type>character varying</type>を使用してください。）
   </para>

   <tip>
    <para>
<!--
     There is no performance difference among these three types,
     apart from increased storage space when using the blank-padded
     type, and a few extra CPU cycles to check the length when storing into
     a length-constrained column.  While
     <type>character(<replaceable>n</>)</type> has performance
     advantages in some other database systems, there is no such advantage in
     <productname>PostgreSQL</productname>; in fact
     <type>character(<replaceable>n</>)</type> is usually the slowest of
     the three because of its additional storage costs.  In most situations
     <type>text</type> or <type>character varying</type> should be used
     instead.
-->
空白で埋められる型を使用した場合の保存領域の増加、および、長さ制限付きの列に格納する際に長さを検査するためにいくつか余計なCPUサイクルが加わる点を別にして、これら3つの型の間で性能に関する差異はありません。
他の一部のデータベースシステムでは<type>character(<replaceable>n</>)</type>には性能的な優位性がありますが、<productname>PostgreSQL</productname>ではこうした利点はありません。
実際には、格納の際に追加のコストがあるため、<type>character(<replaceable>n</>)</type>は3つの中でもっとも低速です。
    </para>
   </tip>

   <para>
<!--
    Refer to <xref linkend="sql-syntax-strings"> for information about
    the syntax of string literals, and to <xref linkend="functions">
    for information about available operators and functions. The
    database character set determines the character set used to store
    textual values; for more information on character set support,
    refer to <xref linkend="multibyte">.
-->
文字列リテラルの構文については<xref linkend="sql-syntax-strings">、利用可能な演算子と関数については<xref linkend="functions">を参照してください。
データベースの文字セットは、テキストの値を格納する時に使用される文字セットを決定します。
文字セットのサポートに関する詳細については<xref linkend="multibyte">を参照してください。
   </para>

   <example>
<!--
    <title>Using the Character Types</title>
-->
<title>文字データ型を使って</title>

<programlisting>
CREATE TABLE test1 (a character(4));
INSERT INTO test1 VALUES ('ok');
SELECT a, char_length(a) FROM test1; -- <co id="co.datatype-char">
<computeroutput>
  a   | char_length
------+-------------
 ok   |           2
</computeroutput>

CREATE TABLE test2 (b varchar(5));
INSERT INTO test2 VALUES ('ok');
INSERT INTO test2 VALUES ('good      ');
INSERT INTO test2 VALUES ('too long');
<computeroutput>ERROR:  value too long for type character varying(5)</computeroutput>
<!--
INSERT INTO test2 VALUES ('too long'::varchar(5)); &#045;- explicit truncation
-->
INSERT INTO test2 VALUES ('too long'::varchar(5)); -- 明示的な切り捨て
SELECT b, char_length(b) FROM test2;
<computeroutput>
   b   | char_length
-------+-------------
 ok    |           2
 good  |           5
 too l |           5
</computeroutput>
</programlisting>
    <calloutlist>
     <callout arearefs="co.datatype-char">
      <para>
<!--
       The <function>char_length</function> function is discussed in
       <xref linkend="functions-string">.
-->
<function>char_length</function>関数は<xref linkend="functions-string">で説明されています。
      </para>
     </callout>
    </calloutlist>
   </example>

   <para>
<!--
    There are two other fixed-length character types in
    <productname>PostgreSQL</productname>, shown in <xref
    linkend="datatype-character-special-table">. The <type>name</type>
    type exists <emphasis>only</emphasis> for the storage of identifiers
    in the internal system catalogs and is not intended for use by the general user. Its
    length is currently defined as 64 bytes (63 usable characters plus
    terminator) but should be referenced using the constant
    <symbol>NAMEDATALEN</symbol> in <literal>C</> source code.
    The length is set at compile time (and
    is therefore adjustable for special uses); the default maximum
    length might change in a future release. The type <type>"char"</type>
    (note the quotes) is different from <type>char(1)</type> in that it
    only uses one byte of storage. It is internally used in the system
    catalogs as a simplistic enumeration type.
-->
<productname>PostgreSQL</productname>には、<xref linkend="datatype-character-special-table">に示すように、この他2つの固定長文字型があります。
<type>name</type>型は内部のシステムカタログ内の識別子の格納のために<emphasis>のみ</emphasis>存在するもので、一般ユーザによって使用されることを意図していません。
現在長さは64バイト（63バイトの利用可能文字と終止文字）と定義されていますが、<literal>C</>ソースコードにある<symbol>NAMEDATALEN</symbol>定数を使って参照される必要があります。
この長さはコンパイル時に設定されます（そのため特別な用途に合わせ調整できます）。
デフォルトの最大長は今後のリリースで変更される可能性があります。
<type>"char"</type>（二重引用符に注意）は、<type>char(1)</type>とは異なり、1バイトの領域しか使用しません。
過度に単純化した列挙型としてシステムカタログで内部的に使用されます。
   </para>

    <table id="datatype-character-special-table">
<!--
     <title>Special Character Types</title>
-->
     <title>特別な文字データ型</title>
     <tgroup cols="3">
      <thead>
       <row>
<!--
        <entry>Name</entry>
        <entry>Storage Size</entry>
        <entry>Description</entry>
-->
    <entry>型名</entry>
    <entry>格納サイズ</entry>
    <entry>説明</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><type>"char"</type></entry>
<!--
        <entry>1 byte</entry>
        <entry>single-byte internal type</entry>
-->
    <entry>1バイト</entry>
    <entry>単一バイト内部データ型</entry>
       </row>
       <row>
        <entry><type>name</type></entry>
<!--
        <entry>64 bytes</entry>
        <entry>internal type for object names</entry>
-->
    <entry>64バイト</entry>
    <entry>オブジェクト名用の内部データ型</entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  </sect1>

 <sect1 id="datatype-binary">
<!--
  <title>Binary Data Types</title>
-->
<title>バイナリ列データ型</title>

  <indexterm zone="datatype-binary">
<!--
   <primary>binary data</primary>
-->
   <primary>バイナリデータ</primary>
  </indexterm>

  <indexterm zone="datatype-binary">
   <primary>bytea</primary>
  </indexterm>

   <para>
<!--
    The <type>bytea</type> data type allows storage of binary strings;
    see <xref linkend="datatype-binary-table">.
-->
<type>bytea</type>データ型はバイナリ列の保存を可能にします。
<xref linkend="datatype-binary-table">を参照してください。
   </para>

   <table id="datatype-binary-table">
<!--
    <title>Binary Data Types</title>
-->
<title>バイナリ列データ型</title>
    <tgroup cols="3">
     <thead>
      <row>
<!--
       <entry>Name</entry>
       <entry>Storage Size</entry>
       <entry>Description</entry>
-->
<entry>型名</entry>
<entry>格納サイズ</entry>
<entry>説明</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><type>bytea</type></entry>
<!--
       <entry>1 or 4 bytes plus the actual binary string</entry>
       <entry>variable-length binary string</entry>
-->
<entry>1または4バイトと実際のバイナリ列の長さ</entry>
<entry>可変長のバイナリ列</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    A binary string is a sequence of octets (or bytes).  Binary
    strings are distinguished from character strings in two
    ways.  First, binary strings specifically allow storing
    octets of value zero and other <quote>non-printable</quote>
    octets (usually, octets outside the range 32 to 126).
    Character strings disallow zero octets, and also disallow any
    other octet values and sequences of octet values that are invalid
    according to the database's selected character set encoding.
    Second, operations on binary strings process the actual bytes,
    whereas the processing of character strings depends on locale settings.
    In short, binary strings are appropriate for storing data that the
    programmer thinks of as <quote>raw bytes</>, whereas character
    strings are appropriate for storing text.
-->
バイナリ列はオクテット（またはバイト）の連続です。
バイナリ列は２つの方法で文字列と区別されます。
1点目は、バイナリ列はゼロの値のオクテットと他の<quote>表示できない</quote>オクテット（通常32から126の範囲外のオクテット）を保存できるということです。
文字列ではゼロというオクテットは使用できません。
また、データベースで選択している文字セット符号化方式で無効なオクテット値やオクテット値の並びも使用できません。
2点目は、バイナリ列を演算すると実際のバイトが処理されるのに対して、文字列の処理はロケール設定に従うということです。
まとめると、バイナリ列はプログラマが<quote>バイト列そのもの</>と考えるものを格納するのに適し、文字列はテキストを格納するのに適しています。
   </para>

   <para>
<!--
    The <type>bytea</type> type supports two external formats for
    input and output: <productname>PostgreSQL</productname>'s historical
    <quote>escape</quote> format, and <quote>hex</quote> format.  Both
    of these are always accepted on input.  The output format depends
    on the configuration parameter <xref linkend="guc-bytea-output">;
    the default is hex.  (Note that the hex format was introduced in
    <productname>PostgreSQL</productname> 9.0; earlier versions and some
    tools don't understand it.)
-->
<type>bytea</type>型は入出力用に2つの外部書式をサポートします。
<productname>PostgreSQL</productname>の歴史的な<quote>エスケープ</quote>書式と<quote>hex</quote>です。
入力ではこれらの両方とも常に受け入れられます。
出力書式は<xref linkend="guc-bytea-output">設定パラメータに依存し、デフォルトではhexです。
（hex書式は<productname>PostgreSQL</productname> 9.0から導入されたものであることに注意してください。
以前のバージョンや一部のツールではこれを理解しません。）
   </para>

   <para>
<!--
    The <acronym>SQL</acronym> standard defines a different binary
    string type, called <type>BLOB</type> or <type>BINARY LARGE
    OBJECT</type>.  The input format is different from
    <type>bytea</type>, but the provided functions and operators are
    mostly the same.
-->
標準<acronym>SQL</acronym>は、<type>BLOB</type>または<type>BINARY LARGE OBJECT</type>という、異なるバイナリ列型を定義します。
入力書式は<type>bytea</type>と異なりますが、提供される関数および演算子はほぼ同じです。
   </para>

  <sect2>
<!--
   <title><type>bytea</> Hex Format</title>
-->
   <title><type>bytea</> hex書式</title>

   <para>
<!--
    The <quote>hex</> format encodes binary data as 2 hexadecimal digits
    per byte, most significant nibble first.  The entire string is
    preceded by the sequence <literal>\x</literal> (to distinguish it
    from the escape format).  In some contexts, the initial backslash may
    need to be escaped by doubling it, in the same cases in which backslashes
    have to be doubled in escape format; details appear below.
    The hexadecimal digits can
    be either upper or lower case, and whitespace is permitted between
    digit pairs (but not within a digit pair nor in the starting
    <literal>\x</literal> sequence).
    The hex format is compatible with a wide
    range of external applications and protocols, and it tends to be
    faster to convert than the escape format, so its use is preferred.
-->
<quote>hex</>書式ではバイナリデータをバイト単位で上位の1/2バイトを先頭に2桁の16進数に符号化します。
（エスケープ書式と区別するために）文字列全体は<literal>\x</literal>という並びの後に付けられます。
一部の文脈では、エスケープ書式でバックスラッシュを二重にしなければならない一部の場合において、先頭のバックスラッシュを二重にしてエスケープさせる必要があるかもしれません。
詳細に付いては後で説明します。
16進数の桁は大文字でも小文字でも構いません。
桁の組み合わせと次の組み合わせの間に空白文字を入れることができます。
（しかし桁の組み合わせの間や先頭の<literal>\x</literal>の間には入れることはできません。）
hex書式は外部のアプリケーションおよびプロトコルの間で広く互換性を持ち、また、エスケープ書式と比べ変換が高速になる傾向があります。
このため使用が好まれます。
   </para>

   <para>
<!--
    Example:
-->
例
<programlisting>
SELECT E'\\xDEADBEEF';
</programlisting>
   </para>
  </sect2>

  <sect2>
<!--
   <title><type>bytea</> Escape Format</title>
-->
   <title><type>bytea</>エスケープ書式</title>

   <para>
<!--
    The <quote>escape</quote> format is the traditional
    <productname>PostgreSQL</productname> format for the <type>bytea</type>
    type.  It
    takes the approach of representing a binary string as a sequence
    of ASCII characters, while converting those bytes that cannot be
    represented as an ASCII character into special escape sequences.
    If, from the point of view of the application, representing bytes
    as characters makes sense, then this representation can be
    convenient.  But in practice it is usually confusing because it
    fuzzes up the distinction between binary strings and character
    strings, and also the particular escape mechanism that was chosen is
    somewhat unwieldy.  So this format should probably be avoided
    for most new applications.
-->
<quote>エスケープ</quote>書式は<type>bytea</type>型用の伝統的な<productname>PostgreSQL</productname>の書式です。
これは、バイナリ列をASCII文字の並びとして表現しASCII文字として表現できないバイトは特殊なエスケープシーケンスとして表現するという方式を取ります。
アプリケーションの見地から文字として表現されたバイトが有意であれば、この表現は簡便です。
しかし現実にはバイナリ列と文字列の間の区別があいまいになりますので、通常は混乱します。
また特に選択されたエスケープ機構は多少非効率的です。
このためこの書式はおそらくほとんどの新しいアプリケーションでは避けるべきでしょう。
   </para>

   <para>
<!--
    When entering <type>bytea</type> values in escape format,
    octets of certain
    values <emphasis>must</emphasis> be escaped, while all octet
    values <emphasis>can</emphasis> be escaped.  In
    general, to escape an octet, convert it into its three-digit
    octal value and precede it
    by a backslash (or two backslashes, if writing the value as a
    literal using escape string syntax).
    Backslash itself (octet value 92) can alternatively be represented by
    double backslashes.
    <xref linkend="datatype-binary-sqlesc">
    shows the characters that must be escaped, and gives the alternative
    escape sequences where applicable.
-->
エスケープ書式で<type>bytea</type>値を入力する際に、特定の値のオクテットをエスケープする<emphasis>必要</emphasis>があります。
なお、すべてのオクテットの値をエスケープすることが<emphasis>できます</emphasis>。
一般的にあるオクテットをエスケープするには、それをその3桁の8進番号に変換し、バックスラッシュ(エスケープ文字列構文を使用してリテラルとして値を記述する場合は2つのバックスラッシュ)を前に付けます。
他にもバックスラッシュ自体(オクテット値92)を二重のバックスラッシュとして表現することができます。
<xref linkend="datatype-binary-sqlesc">には、エスケープする必要がある文字と、その適用可能な代替エスケープシーケンスを示しています。
   </para>

   <table id="datatype-binary-sqlesc">
<!--
    <title><type>bytea</> Literal Escaped Octets</title>
-->
    <title>オクテットをエスケープした<type>bytea</>リテラル</title>
    <tgroup cols="5">
     <thead>
      <row>
<!--
       <entry>Decimal Octet Value</entry>
       <entry>Description</entry>
       <entry>Escaped Input Representation</entry>
       <entry>Example</entry>
       <entry>Output Representation</entry>
-->
<entry>10進オクテット値</entry>
<entry>説明</entry>
<entry>エスケープされた入力表現</entry>
<entry>例</entry>
<entry>出力表現</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry>0</entry>
<!--
       <entry>zero octet</entry>
-->
<entry>ゼロオクテット</entry>
       <entry><literal>E'\\000'</literal></entry>
       <entry><literal>SELECT E'\\000'::bytea;</literal></entry>
       <entry><literal>\000</literal></entry>
      </row>

      <row>
       <entry>39</entry>
<!--
       <entry>single quote</entry>
-->
<entry>単一引用符</entry>
<!--
       <entry><literal>''''</literal> or <literal>E'\\047'</literal></entry>
-->
       <entry><literal>''''</literal>もしくは<literal>E'\\047'</literal></entry>
       <entry><literal>SELECT E'\''::bytea;</literal></entry>
       <entry><literal>'</literal></entry>
      </row>

      <row>
       <entry>92</entry>
<!--
       <entry>backslash</entry>
-->
<entry>バックスラッシュ</entry>
<!--
       <entry><literal>E'\\\\'</literal> or <literal>E'\\134'</literal></entry>
-->
       <entry><literal>E'\\\\'</literal>もしくは<literal>E'\\134'</literal></entry>
       <entry><literal>SELECT E'\\\\'::bytea;</literal></entry>
       <entry><literal>\\</literal></entry>
      </row>

      <row>
       <entry>0 to 31 and 127 to 255</entry>
<!--
       <entry><quote>non-printable</quote> octets</entry>
-->
       <entry><quote>表示できない</quote>オクテット</entry>
<!--
       <entry><literal>E'\\<replaceable>xxx'</></literal> (octal value)</entry>
-->
       <entry><literal>E'\\<replaceable>xxx'</></literal> (8進数)</entry>
       <entry><literal>SELECT E'\\001'::bytea;</literal></entry>
       <entry><literal>\001</literal></entry>
      </row>

     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    The requirement to escape <emphasis>non-printable</emphasis> octets
    varies depending on locale settings. In some instances you can get away
    with leaving them unescaped. Note that the result in each of the examples
    in <xref linkend="datatype-binary-sqlesc"> was exactly one octet in
    length, even though the output representation is sometimes
    more than one character.
-->
実際には、<emphasis>表示できない</emphasis>オクテットに対するエスケープ要求はロケールの設定に依存して変化します。
インスタンスによっては、エスケープをしないで済むこともあります。
<xref linkend="datatype-binary-sqlesc">の例の各結果は、出力表現が時として１文字以上であっても、長さは正確に1オクテットであることに注意してください。
   </para>

   <para>
<!--
    The reason multiple backslashes are required, as shown
    in <xref linkend="datatype-binary-sqlesc">, is that an input
    string written as a string literal must pass through two parse
    phases in the <productname>PostgreSQL</productname> server.
    The first backslash of each pair is interpreted as an escape
    character by the string-literal parser (assuming escape string
    syntax is used) and is therefore consumed, leaving the second backslash of the
    pair.  (Dollar-quoted strings can be used to avoid this level
    of escaping.)  The remaining backslash is then recognized by the
    <type>bytea</type> input function as starting either a three
    digit octal value or escaping another backslash.  For example,
    a string literal passed to the server as <literal>E'\\001'</literal>
    becomes <literal>\001</literal> after passing through the
    escape string parser. The <literal>\001</literal> is then sent
    to the <type>bytea</type> input function, where it is converted
    to a single octet with a decimal value of 1.  Note that the
    single-quote character is not treated specially by <type>bytea</type>,
    so it follows the normal rules for string literals.  (See also
    <xref linkend="sql-syntax-strings">.)
-->
<xref linkend="datatype-binary-sqlesc">で示したように、複数バックスラッシュが必要な理由は、文字列リテラルとして記述された入力文字列は、<productname>PostgreSQL</productname>サーバ上で2つの解析段階を通過する必要があることです。
各組み合わせの最初のバックスラッシュは文字列リテラル用パーサでエスケープ文字と解釈（エスケープ文字列構文の使用を前提）され、2番目のバックスラッシュを残して、そこで消費されます。
（この段階のエスケープを避けるためにドル引用符による文字列を使用することができます。）
残りのバックスラッシュは、<type>bytea</type>入力関数が3桁のオクテット値の先頭に付く記号、もしくは、他のバックスラッシュをエスケープする記号として認識します。
例えば、<literal>E'\\001'</literal>としてサーバに渡された文字列リテラルは、エスケープ文字列パーサを通過した後<literal>\001</literal>のようになります。
<literal>\001</literal>はその後<type>bytea</type>入力関数に送られ、10進数値1の1つのオクテットに変換されます。
単一引用符文字は<type>bytea</type>では特別に扱われず、通常の文字列リテラルの規則に従うことに注意してください。
（<xref linkend="sql-syntax-strings">も参照してください。）
   </para>

   <para>
<!--
    <type>Bytea</type> octets are sometimes escaped when output. In general, each
    <quote>non-printable</quote> octet is converted into
    its equivalent three-digit octal value and preceded by one backslash.
    Most <quote>printable</quote> octets are represented by their standard
    representation in the client character set. The octet with decimal
    value 92 (backslash) is doubled in the output.
    Details are in <xref linkend="datatype-binary-resesc">.
-->
また、<type>Bytea</type>オクテットは出力時も時々エスケープされます。
一般的には、各<quote>表示できない</quote>オクテットは、1つのバックスラッシュの後に等価な3桁8進数という形に変換されます。
ほとんどの<quote>表示できる</quote>オクテットは、クライアント文字セットにおける標準表現で表されます。
10進数で92となるオクテット（バックスラッシュ）は出力では二重になります。
詳細は<xref linkend="datatype-binary-resesc">に示します。
   </para>

   <table id="datatype-binary-resesc">
<!--
    <title><type>bytea</> Output Escaped Octets</title>
-->
    <title><type>bytea</>出力のエスケープされたオクテット</title>
    <tgroup cols="5">
     <thead>
      <row>
<!--
       <entry>Decimal Octet Value</entry>
       <entry>Description</entry>
       <entry>Escaped Output Representation</entry>
       <entry>Example</entry>
       <entry>Output Result</entry>
-->
<entry>10進オクテット値</entry>
<entry>説明</entry>
<entry>エスケープされた出力表現</entry>
<entry>例</entry>
<entry>出力結果</entry>
      </row>
     </thead>

     <tbody>

      <row>
       <entry>92</entry>
<!--
       <entry>backslash</entry>
-->
<entry>バックスラッシュ</entry>
       <entry><literal>\\</literal></entry>
       <entry><literal>SELECT E'\\134'::bytea;</literal></entry>
       <entry><literal>\\</literal></entry>
      </row>

      <row>
<!--
       <entry>0 to 31 and 127 to 255</entry>
       <entry><quote>non-printable</quote> octets</entry>
-->
       <entry>0から31および127から255</entry>
<entry><quote>表示できない</quote>オクテット</entry>
<!--
       <entry><literal>\<replaceable>xxx</></literal> (octal value)</entry>
-->
       <entry><literal>\<replaceable>xxx</></literal>（8進数）</entry>
       <entry><literal>SELECT E'\\001'::bytea;</literal></entry>
       <entry><literal>\001</literal></entry>
      </row>

      <row>
<!--
       <entry>32 to 126</entry>
       <entry><quote>printable</quote> octets</entry>
       <entry>client character set representation</entry>
-->
       <entry>32から126</entry>
       <entry><quote>表示できる</quote>オクテット</entry>
       <entry>クライアント文字セットにおける表現</entry>
       <entry><literal>SELECT E'\\176'::bytea;</literal></entry>
       <entry><literal>~</literal></entry>
      </row>

     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    Depending on the front end to <productname>PostgreSQL</> you use,
    you might have additional work to do in terms of escaping and
    unescaping <type>bytea</type> strings. For example, you might also
    have to escape line feeds and carriage returns if your interface
    automatically translates these.
-->
使用する<productname>PostgreSQL</>のフロントエンドによっては、<type>bytea</type>文字列をエスケープまたはアンエスケープする際に、追加的な作業が必要になることがあります。
例えば、使用するインタフェースが改行文字や復帰文字を自動的に翻訳してしまう場合、これらの文字もエスケープしなければならないかもしれません。
   </para>

  </sect2>
 </sect1>


  <sect1 id="datatype-datetime">
<!--
   <title>Date/Time Types</title>
-->
<title>日付/時刻データ型</title>

   <indexterm zone="datatype-datetime">
    <primary>date</primary>
   </indexterm>
   <indexterm zone="datatype-datetime">
    <primary>time</primary>
   </indexterm>
   <indexterm zone="datatype-datetime">
    <primary>time without time zone</primary>
   </indexterm>
   <indexterm zone="datatype-datetime">
    <primary>time with time zone</primary>
   </indexterm>
   <indexterm zone="datatype-datetime">
    <primary>timestamp</primary>
   </indexterm>
   <indexterm zone="datatype-datetime">
    <primary>timestamptz</primary>
   </indexterm>
   <indexterm zone="datatype-datetime">
    <primary>timestamp with time zone</primary>
   </indexterm>
   <indexterm zone="datatype-datetime">
    <primary>timestamp without time zone</primary>
   </indexterm>
   <indexterm zone="datatype-datetime">
    <primary>interval</primary>
   </indexterm>
   <indexterm zone="datatype-datetime">
<!--
    <primary>time span</primary>
-->
    <primary>時間間隔</primary>
   </indexterm>

   <para>
<!--
    <productname>PostgreSQL</productname> supports the full set of
    <acronym>SQL</acronym> date and time types, shown in <xref
    linkend="datatype-datetime-table">.  The operations available
    on these data types are described in
    <xref linkend="functions-datetime">.
    Dates are counted according to the Gregorian calendar, even in
    years before that calendar was introduced (see <xref
    linkend="datetime-units-history"> for more information).
-->
<productname>PostgreSQL</productname>では、<xref linkend="datatype-datetime-table">に示されている<acronym>SQL</acronym>の日付と時刻データ型のすべてがサポートされています。
これらのデータ型で利用できる演算子については<xref linkend="functions-datetime">で説明します。
グレゴリオ暦が導入される前の年であっても（<xref linkend="datetime-units-history">参照）、日付はグレゴリオ暦にしたがって計算されます。


   </para>

    <table id="datatype-datetime-table">
<!--
     <title>Date/Time Types</title>
-->
<title>日付/時刻データ型</title>
     <tgroup cols="6">
      <thead>
       <row>
<!--
        <entry>Name</entry>
        <entry>Storage Size</entry>
        <entry>Description</entry>
        <entry>Low Value</entry>
        <entry>High Value</entry>
        <entry>Resolution</entry>
-->
    <entry>型名</entry>
    <entry>格納サイズ</entry>
<entry>説明</entry>
<entry>最遠の過去</entry>
<entry>最遠の未来</entry>
<entry>精度</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><type>timestamp [ (<replaceable>p</replaceable>) ] [ without time zone ]</type></entry>
<!--
        <entry>8 bytes</entry>
        <entry>both date and time (no time zone)</entry>
-->
<entry>8 バイト</entry>
<entry>日付と時刻両方（時間帯なし）</entry>
        <entry>4713 BC</entry>
        <entry>294276 AD</entry>
<!--
        <entry>1 microsecond / 14 digits</entry>
-->
<entry>1μ秒、14桁</entry>
       </row>
       <row>
        <entry><type>timestamp [ (<replaceable>p</replaceable>) ] with time zone</type></entry>
<!--
        <entry>8 bytes</entry>
        <entry>both date and time, with time zone</entry>
-->
<entry>8バイト</entry>
<entry>日付と時刻両方、時間帯付き</entry>
        <entry>4713 BC</entry>
        <entry>294276 AD</entry>
<!--
        <entry>1 microsecond / 14 digits</entry>
-->
<entry>1μ秒、14桁</entry>
       </row>

       <row>
        <entry><type>date</type></entry>
<!--
        <entry>4 bytes</entry>
        <entry>date (no time of day)</entry>
-->
<entry>4バイト</entry>
<entry>日付（時刻なし）</entry>
        <entry>4713 BC</entry>
        <entry>5874897 AD</entry>
<!--
        <entry>1 day</entry>
-->
<entry>1日</entry>
       </row>
       <row>
        <entry><type>time [ (<replaceable>p</replaceable>) ] [ without time zone ]</type></entry>
<!--
        <entry>8 bytes</entry>
        <entry>time of day (no date)</entry>
-->
<entry>8バイト</entry>
<entry>時刻（日付なし）</entry>
        <entry>00:00:00</entry>
        <entry>24:00:00</entry>
<!--
        <entry>1 microsecond / 14 digits</entry>
-->
<entry>1μ秒、14桁</entry>
       </row>
       <row>
        <entry><type>time [ (<replaceable>p</replaceable>) ] with time zone</type></entry>
<!--
        <entry>12 bytes</entry>
        <entry>times of day only, with time zone</entry>
-->
<entry>12バイト</entry>
<entry>その日の時刻のみ、時間帯付き</entry>
        <entry>00:00:00+1459</entry>
        <entry>24:00:00-1459</entry>
<!--
        <entry>1 microsecond / 14 digits</entry>
-->
<entry>1μ秒、14桁</entry>
       </row>
       <row>
        <entry><type>interval [ <replaceable>fields</replaceable> ] [ (<replaceable>p</replaceable>) ]</type></entry>
    <!--
        <entry>16 bytes</entry>
        <entry>time interval</entry>
    <entry>-178000000 years</entry>
        <entry>178000000 years</entry>
        <entry>1 microsecond / 14 digits</entry>
    -->
    <entry>16バイト</entry>
        <entry>時間間隔</entry>
    <entry>-178000000年</entry>
        <entry>178000000年</entry>
        <entry>1μ秒、14桁</entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <note>
    <para>
<!--
     The SQL standard requires that writing just <type>timestamp</type>
     be equivalent to <type>timestamp without time
     zone</type>, and <productname>PostgreSQL</productname> honors that
     behavior.  <type>timestamptz</type> is accepted as an
     abbreviation for <type>timestamp with time zone</type>; this is a
     <productname>PostgreSQL</productname> extension.
-->
標準SQLでは、単なる<type>timestamp</type>という記述は<type>timestamp without time zone</type>と同じであることを要求します。
<productname>PostgreSQL</productname>はこれに準じます。
<type>timestamp with time zone</type>は<type>timestamptz</type>と省略することが許容されています。これは<productname>PostgreSQL</productname>独自の拡張です。
    </para>
   </note>

   <para>
<!--
    <type>time</type>, <type>timestamp</type>, and
    <type>interval</type> accept an optional precision value
    <replaceable>p</replaceable> which specifies the number of
    fractional digits retained in the seconds field. By default, there
    is no explicit bound on precision.  The allowed range of
    <replaceable>p</replaceable> is from 0 to 6 for the
    <type>timestamp</type> and <type>interval</type> types.
-->
<type>time</type>、<type>timestamp</type>および<type>interval</type>は秒フィールドに保有されている小数点以下の桁数を指定するオプションの精度値である<replaceable>p</replaceable>を受け付けます。
デフォルトでは、明示的な精度に対する限界はありません。
<replaceable>p</replaceable>の許容範囲は<type>timestamp</type>型と<type>interval</type>型の場合は0から6です。
   </para>

   <note>
   <para>
<!--
    When <type>timestamp</> values are stored as eight-byte integers
    (currently the default), microsecond precision is available over
    the full range of values. When <type>timestamp</> values are
    stored as double precision floating-point numbers instead (a
    deprecated compile-time option), the effective limit of precision
    might be less than 6. <type>timestamp</type> values are stored as
    seconds before or after midnight 2000-01-01.  When
    <type>timestamp</type> values are implemented using floating-point
    numbers, microsecond precision is achieved for dates within a few
    years of 2000-01-01, but the precision degrades for dates further
    away. Note that using floating-point datetimes allows a larger
    range of <type>timestamp</type> values to be represented than
    shown above: from 4713 BC up to 5874897 AD.
    -->
<type>timestamp</>の値が8バイト整数（現在のデフォルト）で格納されていれば、すべての値についてμ秒精度が有効です。
<type>timestamp</>の値が倍精度浮動小数点数（将来のサポートが保証されないコンパイル時のオプション）で格納されていると、有効な精度は6より小さいかもしれません。
<type>timestamp</>の値は2000-01-01深夜を基準にした経過秒数として格納されます。
<type>timestamp</type>の値が浮動小数点数として格納されていれば、2000-01-01から数年の範囲でμ秒精度が得られますが、それより離脱すると精度は劣化します。
浮動小数点datetimesを使用すると上で示した範囲より広い<type>timestamp</type>の値（4713 BCから5874897 ADまで）が認められます。
   </para>

   <para>
   <!--
    The same compile-time option also determines whether
    <type>time</type> and <type>interval</type> values are stored as
    floating-point numbers or eight-byte integers.  In the
    floating-point case, large <type>interval</type> values degrade in
    precision as the size of the interval increases.
    -->
同じコンパイル時オプションは<type>time</type>および<type>interval</type>の値が浮動小数点数か、8バイト整数のいずれかによって格納されるかを決定します。
浮動小数点の場合、大きな<type>interval</type>では間隔が増加する際に精度が落ちます。
   </para>
   </note>

   <para>
<!--
    For the <type>time</type> types, the allowed range of
    <replaceable>p</replaceable> is from 0 to 6 when eight-byte integer
    storage is used, or from 0 to 10 when floating-point storage is used.
-->
<type>time</type>型で8バイト整数が使用された場合には、<replaceable>p</replaceable>は0から6までの範囲で使用可能です。
また、浮動小数点が使用される場合には0から10までが使用可能です。
   </para>

   <para>
   <!--
    The <type>interval</type> type has an additional option, which is
    to restrict the set of stored fields by writing one of these phrases:
    -->
<type>interval</type>データ型には追加のオプションがあり、以下の１つの語句を使用して格納されるフィールドの集合を制約します。
<literallayout class="monospaced">
YEAR
MONTH
DAY
HOUR
MINUTE
SECOND
YEAR TO MONTH
DAY TO HOUR
DAY TO MINUTE
DAY TO SECOND
HOUR TO MINUTE
HOUR TO SECOND
MINUTE TO SECOND
</literallayout>
　　<!--
    Note that if both <replaceable>fields</replaceable> and
    <replaceable>p</replaceable> are specified, the
    <replaceable>fields</replaceable> must include <literal>SECOND</>,
    since the precision applies only to the seconds.
    -->
<replaceable>fields</replaceable>および<replaceable>p</replaceable>が共に指定されると、精度は秒のみに適用されるので、<replaceable>fields</replaceable>は<literal>SECOND</>を含まなければならないことに注意してください。
   </para>
   
   <para>
<!--
    The type <type>time with time zone</type> is defined by the SQL
    standard, but the definition exhibits properties which lead to
    questionable usefulness. In most cases, a combination of
    <type>date</type>, <type>time</type>, <type>timestamp without time
    zone</type>, and <type>timestamp with time zone</type> should
    provide a complete range of date/time functionality required by
    any application.
-->
<type>time with time zone</type>は標準SQLで定義されていますが、その定義は、その有用性を疑問視することになりかねない特性を示しています。
ほとんどの場合、<type>date</type>、<type>time</type>、<type>timestamp without time zone</type>、<type>timestamp with time zone</type>の組み合わせで、すべてのアプリケーションで要求される日付/時刻機能すべてを提供しているはずです。
   </para>

   <para>
<!--
    The types <type>abstime</type>
    and <type>reltime</type> are lower precision types which are used internally.
    You are discouraged from using these types in
    applications;  these internal types
    might disappear in a future release.
-->
<type>abstime</type>と<type>reltime</type>は精度の低いデータ型で、内部で使用されます。
アプリケーションでこれらの型の使用を避けてください。
これら内部型は今後のリリースで削除される可能性があります。
   </para>

   <sect2 id="datatype-datetime-input">
<!--
    <title>Date/Time Input</title>
-->
<title>日付/時刻の入力</title>

    <para>
<!--
     Date and time input is accepted in almost any reasonable format, including
     ISO 8601, <acronym>SQL</acronym>-compatible,
     traditional <productname>POSTGRES</productname>, and others.
     For some formats, ordering of day, month, and year in date input is
     ambiguous and there is support for specifying the expected
     ordering of these fields.  Set the <xref linkend="guc-datestyle"> parameter
     to <literal>MDY</> to select month-day-year interpretation,
     <literal>DMY</> to select day-month-year interpretation, or
     <literal>YMD</> to select year-month-day interpretation.
-->
日付と時刻の入力は、ISO 8601、<acronym>SQL</acronym>互換、伝統的な<productname>POSTGRES</productname>、その他を含むほとんどの適正とみなされる書式を受け付けます。
日付の入力における日-月-年の順序のようないずれとも解釈されるいくつかの書式については、それらのフィールドを好きな順序に指定できるようになっています。
<xref linkend="guc-datestyle">パラメータを<literal>MDY</>に設定すれば、月日年という順で解釈され、<literal>DMY</>に設定すれば日月年という順で、<literal>YMD</>に設定すれば年月日という順で解釈されます。
    </para>

    <para>
<!--
     <productname>PostgreSQL</productname> is more flexible in
     handling date/time input than the
     <acronym>SQL</acronym> standard requires.
     See <xref linkend="datetime-appendix">
     for the exact parsing rules of date/time input and for the
     recognized text fields including months, days of the week, and
     time zones.
-->
<productname>PostgreSQL</productname>は日付/時刻の運用において標準<acronym>SQL</acronym>の要求よりも柔軟です。
日付/時刻の入力における正確な構文解析規則と、月および週、そして時間帯を含む使用可能なテキストフィールドに関しては<xref linkend="datetime-appendix">を参照してください。 
    </para>

    <para>
<!--
     Remember that any date or time literal input needs to be enclosed
     in single quotes, like text strings.  Refer to
     <xref linkend="sql-syntax-constants-generic"> for more
     information.
     <acronym>SQL</acronym> requires the following syntax
-->
テキスト文字列のように、日付や時刻リテラルは単一引用符で囲む必要があることを思い出してください。
詳細は<xref linkend="sql-syntax-constants-generic">を参照してください。 
<acronym>SQL</acronym>では下記の構文が必要です。
<synopsis>
<replaceable>type</replaceable> [ (<replaceable>p</replaceable>) ] '<replaceable>value</replaceable>'
</synopsis>
<!--
     where <replaceable>p</replaceable> is an optional precision
     specification giving the number of
     fractional digits in the seconds field. Precision can be
     specified for <type>time</type>, <type>timestamp</type>, and
     <type>interval</type> types.  The allowed values are mentioned
     above.  If no precision is specified in a constant specification,
     it defaults to the precision of the literal value.
-->
ここで、<replaceable>p</replaceable>は秒フィールドの小数点以下の桁数を与えるオプションの精度の指定です。
精度は<type>time</type>、<type>timestamp</type>および<type>interval</type>型に対して設定できます。
値の許容範囲は既に説明しています。
定数指定において精度指定がない場合は、デフォルトのリテラル値の精度になります。
    </para>

    <sect3>
<!--
    <title>Dates</title>
-->
    <title>日付</title>

    <indexterm>
     <primary>date</primary>
    </indexterm>

    <para>
<!--
     <xref linkend="datatype-datetime-date-table"> shows some possible
     inputs for the <type>date</type> type.
-->
<xref linkend="datatype-datetime-date-table">は<type>date</type>型で入力可能なものの一部を示します。
    </para>

     <table id="datatype-datetime-date-table">
<!--
      <title>Date Input</title>
-->
<title>日付入力</title>
      <tgroup cols="2">
       <thead>
        <row>
<!--
         <entry>Example</entry>
         <entry>Description</entry>
-->
     <entry>例</entry>
     <entry>説明</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>1999-01-08</entry>
<!--
         <entry>ISO 8601; January 8 in any mode
         (recommended format)</entry>
-->
     <entry>ISO 8601。すべてのモードで1月8日になります（推奨書式）。</entry>
        </row>
    <row>
    <entry>January 8, 1999</entry>
<!--
         <entry>unambiguous in any <varname>datestyle</varname> input mode</entry>
-->
     <entry>すべての<varname>datestyle</varname>入力モードにおいて曖昧さがありません。</entry>
        </row>
        <row>
         <entry>1/8/1999</entry>
<!--
         <entry>January 8 in <literal>MDY</> mode;
          August 1 in <literal>DMY</> mode</entry>
-->
         <entry><literal>MDY</>モードでは1月8日、<literal>DMY</>モードでは8月1日。</entry>
        </row>
        <row>
         <entry>1/18/1999</entry>
<!--
         <entry>January 18 in <literal>MDY</> mode;
          rejected in other modes</entry>
-->
         <entry><literal>MDY</>モードでは1月18日、他のモードでは拒絶されます。</entry>
        </row>
        <row>
         <entry>01/02/03</entry>
<!--
         <entry>January 2, 2003 in <literal>MDY</> mode;
          February 1, 2003 in <literal>DMY</> mode;
          February 3, 2001 in <literal>YMD</> mode
-->
         <entry>
<literal>MDY</>モードでは2003年1月2日、<literal>DMY</>モードでは2003年2月1日、<literal>YMD</>モードでは2001年2月3日。
         </entry>
        </row>
        <row>
         <entry>1999-Jan-08</entry>
<!--
         <entry>January 8 in any mode</entry>
-->
     <entry>すべてのモードで1月8日になります。</entry>
        </row>
        <row>
         <entry>Jan-08-1999</entry>
<!--
         <entry>January 8 in any mode</entry>
-->
     <entry>すべてのモードで1月8日になります。</entry>
        </row>
        <row>
         <entry>08-Jan-1999</entry>
<!--
         <entry>January 8 in any mode</entry>
-->
     <entry>すべてのモードで1月8日になります。</entry>
        </row>
        <row>
         <entry>99-Jan-08</entry>
<!--
         <entry>January 8 in <literal>YMD</> mode, else error</entry>
-->
         <entry><literal>YMD</>モードで1月8日、他のモードではエラー。</entry>
        </row>
        <row>
         <entry>08-Jan-99</entry>
<!--
         <entry>January 8, except error in <literal>YMD</> mode</entry>
-->
     <entry>1月8日。ただし<literal>YMD</>モードではエラー。</entry>
        </row>
        <row>
         <entry>Jan-08-99</entry>
<!--
         <entry>January 8, except error in <literal>YMD</> mode</entry>
-->
     <entry>1月8日。ただし<literal>YMD</>モードではエラー。</entry>
        </row>
        <row>
         <entry>19990108</entry>
<!--
         <entry>ISO 8601; January 8, 1999 in any mode</entry>
-->
     <entry>ISO 8601。すべてのモードで1月8日になります。</entry>
        </row>
        <row>
         <entry>990108</entry>
<!--
         <entry>ISO 8601; January 8, 1999 in any mode</entry>
-->
     <entry>ISO 8601。すべてのモードで1月8日になります。</entry>
        </row>
        <row>
         <entry>1999.008</entry>
<!--
         <entry>year and day of year</entry>
-->
     <entry>年とその日までの累計</entry>
        </row>
        <row>
         <entry>J2451187</entry>
<!--
         <entry>Julian date</entry>
-->
     <entry>ユリウス日</entry>
        </row>
        <row>
         <entry>January 8, 99 BC</entry>
<!--
         <entry>year 99 BC</entry>
-->
     <entry>西暦紀元前99年</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </sect3>

    <sect3>
<!--
     <title>Times</title>
-->
     <title>時刻</title>

     <indexterm>
      <primary>time</primary>
     </indexterm>
     <indexterm>
      <primary>time without time zone</primary>
     </indexterm>
     <indexterm>
      <primary>time with time zone</primary>
     </indexterm>

     <para>
<!--
      The time-of-day types are <type>time [
      (<replaceable>p</replaceable>) ] without time zone</type> and
      <type>time [ (<replaceable>p</replaceable>) ] with time
      zone</type>.  <type>time</type> alone is equivalent to
      <type>time without time zone</type>.
-->
ある一日の時刻を表す型は<type>time [(<replaceable>p</replaceable>) ] without time zone</type>と<type>time [ (<replaceable>p</replaceable>) ] with time zone</type>です。
<type>time</type>単独では<type>time without time zone</type>と同じです。
     </para>

     <para>
<!--
      Valid input for these types consists of a time of day followed
      by an optional time zone. (See <xref
      linkend="datatype-datetime-time-table">
      and <xref linkend="datatype-timezone-table">.)  If a time zone is
      specified in the input for <type>time without time zone</type>,
      it is silently ignored. You can also specify a date but it will
      be ignored, except when you use a time zone name that involves a
      daylight-savings rule, such as
      <literal>America/New_York</literal>. In this case specifying the date
      is required in order to determine whether standard or daylight-savings
      time applies.  The appropriate time zone offset is recorded in the
      <type>time with time zone</type> value.
-->
これらの型への有効な入力は、時刻、その後にオプションで時間帯からなります。
（<xref linkend="datatype-datetime-time-table">と<xref linkend="datatype-timezone-table">を参照してください。）
<type>time without time zone</type>への入力に時間帯が指定された場合、時間帯は警告なく無視されます。
また、<literal>America/New_York</literal>など夏時間規則を含む時間帯名を使用していない限り、日付を指定することはできますが、これは無視されます。
この場合、標準か夏時間かどちらを適用するかを決定できるように、日付の指定が必要です。
適切な時間帯オフセットは<type>time with time zone</type>型の値に記録されています。
     </para>

      <table id="datatype-datetime-time-table">
<!--
       <title>Time Input</title>
-->
       <title>時刻入力</title>
       <tgroup cols="2">
        <thead>
         <row>
<!--
          <entry>Example</entry>
          <entry>Description</entry>
-->
     <entry>例</entry>
     <entry>説明</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><literal>04:05:06.789</literal></entry>
          <entry>ISO 8601</entry>
         </row>
         <row>
          <entry><literal>04:05:06</literal></entry>
          <entry>ISO 8601</entry>
         </row>
         <row>
          <entry><literal>04:05</literal></entry>
          <entry>ISO 8601</entry>
         </row>
         <row>
          <entry><literal>040506</literal></entry>
          <entry>ISO 8601</entry>
         </row>
         <row>
          <entry><literal>04:05 AM</literal></entry>
<!--
          <entry>same as 04:05; AM does not affect value</entry>
-->
          <entry>04:05と同じ。AMは値に影響を与えない。</entry>
         </row>
         <row>
          <entry><literal>04:05 PM</literal></entry>
<!--
          <entry>same as 16:05; input hour must be <= 12</entry>
-->
          <entry>16:05と同じ。時の入力は12以下でなければなりません。</entry>
         </row>
         <row>
          <entry><literal>04:05:06.789-8</literal></entry>
          <entry>ISO 8601</entry>
         </row>
         <row>
          <entry><literal>04:05:06-08:00</literal></entry>
          <entry>ISO 8601</entry>
         </row>
         <row>
          <entry><literal>04:05-08:00</literal></entry>
          <entry>ISO 8601</entry>
         </row>
         <row>
          <entry><literal>040506-08</literal></entry>
          <entry>ISO 8601</entry>
         </row>
         <row>
          <entry><literal>04:05:06 PST</literal></entry>
<!--
          <entry>time zone specified by abbreviation</entry>
-->
          <entry>省略形による時間帯の指定。</entry>
         </row>
         <row>
          <entry><literal>2003-04-12 04:05:06 America/New_York</literal></entry>
<!--
          <entry>time zone specified by full name</entry>
-->
          <entry>名前による時間帯の指定。</entry>
         </row>
        </tbody>
       </tgroup>
      </table>

      <table tocentry="1" id="datatype-timezone-table">
<!--
       <title>Time Zone Input</title>
-->
       <title>時間帯入力</title>
       <tgroup cols="2">
        <thead>
         <row>
<!--
          <entry>Example</entry>
          <entry>Description</entry>
-->
     <entry>例</entry>
     <entry>説明</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><literal>PST</literal></entry>
<!--
          <entry>Abbreviation (for Pacific Standard Time)</entry>
-->
          <entry>省略形（米国太平洋標準時間）</entry>
         </row>
         <row>
          <entry><literal>America/New_York</literal></entry>
<!--
          <entry>Full time zone name</entry>
-->
          <entry>完全な時間帯名</entry>
         </row>
         <row>
          <entry><literal>PST8PDT</literal></entry>
<!--
          <entry>POSIX-style time zone specification</entry>
-->
          <entry>POSIX書式の time zone 仕様</entry>
         </row>
         <row>
          <entry><literal>-8:00</literal></entry>
<!--
          <entry>ISO-8601 offset for PST</entry>
-->
          <entry>ISO 8601。PST用のオフセット</entry>
         </row>
         <row>
          <entry><literal>-800</literal></entry>
<!--
          <entry>ISO-8601 offset for PST</entry>
-->
          <entry>ISO 8601。PST用のオフセット</entry>
         </row>
         <row>
          <entry><literal>-8</literal></entry>
<!--
          <entry>ISO-8601 offset for PST</entry>
-->
          <entry>ISO 8601。PST用のオフセット</entry>
         </row>
         <row>
          <entry><literal>zulu</literal></entry>
<!--
          <entry>Military abbreviation for UTC</entry>
-->
          <entry>UTC用の軍事用略記</entry>
         </row>
         <row>
          <entry><literal>z</literal></entry>
<!--
          <entry>Short form of <literal>zulu</literal></entry>
-->
          <entry><literal>zulu</literal>の略記</entry>
         </row>
        </tbody>
       </tgroup>
      </table>

     <para>
<!--
     Refer to <xref linkend="datatype-timezones"> for more information on how
     to specify time zones.
-->
時間帯の指定方法に関する詳細は<xref linkend="datatype-timezones">を参照してください。
    </para>
    </sect3>

    <sect3>
<!--
    <title>Time Stamps</title>
-->
    <title>タイムスタンプ</title>

    <indexterm>
     <primary>timestamp</primary>
    </indexterm>

    <indexterm>
     <primary>timestamp with time zone</primary>
    </indexterm>

    <indexterm>
     <primary>timestamp without time zone</primary>
    </indexterm>

     <para>
<!--
      Valid input for the time stamp types consists of the concatenation
      of a date and a time, followed by an optional time zone,
      followed by an optional <literal>AD</literal> or <literal>BC</literal>.
      (Alternatively, <literal>AD</literal>/<literal>BC</literal> can appear
      before the time zone, but this is not the preferred ordering.)
      Thus:
-->
タイムスタンプ型への有効な入力は、日付と時刻を連結し、さらにその後にオプションで時間帯、その後にオプションで<literal>AD</literal>もしくは<literal>BC</literal>からなります。
（他に<literal>AD</literal>/<literal>BC</literal>を時間帯の前に付ける方法もありますが、これは推奨される順序ではありません。）
したがって、
<programlisting>
1999-01-08 04:05:06
</programlisting>
<!--
      and:
-->
と
<programlisting>
1999-01-08 04:05:06 -8:00
</programlisting>

<!--
      are valid values, which follow the <acronym>ISO</acronym> 8601
      standard.  In addition, the common format:
-->
は有効な値で、<acronym>ISO</acronym> 8601に準拠しています。
また、広く使用されている

<programlisting>
January 8 04:05:06 1999 PST
</programlisting>
<!--
      is supported.
-->
という書式もサポートされます。
     </para>

     <para>
<!--
      The <acronym>SQL</acronym> standard differentiates
      <type>timestamp without time zone</type>
      and <type>timestamp with time zone</type> literals by the presence of a
      <quote>+</quote> or <quote>-</quote> symbol and time zone offset after
      the time.  Hence, according to the standard,
      
      <programlisting>TIMESTAMP '2004-10-19 10:23:54'</programlisting>
      
      is a <type>timestamp without time zone</type>, while
      
      <programlisting>TIMESTAMP '2004-10-19 10:23:54+02'</programlisting>
      
      is a <type>timestamp with time zone</type>.
      <productname>PostgreSQL</productname> never examines the content of a
      literal string before determining its type, and therefore will treat
      both of the above as <type>timestamp without time zone</type>.  To
      ensure that a literal is treated as <type>timestamp with time
      zone</type>, give it the correct explicit type:
      <programlisting>TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'</programlisting>
      In a literal that has been determined to be <type>timestamp without time
      zone</type>, <productname>PostgreSQL</productname> will silently ignore
      any time zone indication.
      That is, the resulting value is derived from the date/time
      fields in the input value, and is not adjusted for time zone.
-->
標準<acronym>SQL</acronym>では、<type>timestamp without time zone</type>のリテラルと<type>timestamp with time zone</type>のリテラルを、<quote>+</quote>もしくは<quote>-</quote>記号と時刻の後の時間帯補正を付けて区別します。
そのため、標準に従うと、

<programlisting>TIMESTAMP '2004-10-19 10:23:54'</programlisting>

は<type>timestamp without time zone</type>に、

<programlisting>TIMESTAMP '2004-10-19 10:23:54+02'</programlisting>

は<type>timestamp with time zone</type>になります。
<productname>PostgreSQL</productname>は、その型が決まる前に文字列リテラルの内容を検証しません。
そのため上のように<type>timestamp without time zone</type>を扱います。
リテラルが確実に<type>timestamp with time zone</type>として扱われるようにするには、例えば、<programlisting>TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'</programlisting>のように正しい明示的な型を指定してください。
<type>timestamp without time zone</type>と決定済みのリテラルでは、<productname>PostgreSQL</productname>は警告なく時間帯情報をすべて無視します。
つまり、結果の値は明示された入力値の日付/時刻フィールドから持ち込まれますが、時間帯の調整はなされません。
     </para>

     <para>
<!--
      For <type>timestamp with time zone</type>, the internally stored
      value is always in UTC (Universal
      Coordinated Time, traditionally known as Greenwich Mean Time,
      <acronym>GMT</>).  An input value that has an explicit
      time zone specified is converted to UTC using the appropriate offset
      for that time zone.  If no time zone is stated in the input string,
      then it is assumed to be in the time zone indicated by the system's
      <xref linkend="guc-timezone"> parameter, and is converted to UTC using the
      offset for the <varname>timezone</> zone.
-->
<type>timestamp with time zone</type>について内部に格納されている値は常にUTCです（協定世界時、歴史的にグリニッジ標準時<acronym>GMT</>として知られています）。
時間帯が明示的に指定された入力値は、その時間帯に適したオフセットを使用してUTCに変換されます。
入力文字列に時間帯が指定されていない場合は、システムの<xref linkend="guc-timezone">パラメータに示されている値が時間帯とみなされ、<varname>timezone</>時間帯用のオフセットを使用してUTCに変換されます。
     </para>

     <para>
<!--
      When a <type>timestamp with time
      zone</type> value is output, it is always converted from UTC to the
      current <varname>timezone</> zone, and displayed as local time in that
      zone.  To see the time in another time zone, either change
      <varname>timezone</> or use the <literal>AT TIME ZONE</> construct
      (see <xref linkend="functions-datetime-zoneconvert">).
-->
<type>timestamp with time zone</type>値が出力されると、この値はUTCから現行の<varname>timezone</>に変換され、その時間帯のローカル時間として表示されます。
他の時間帯での時間を表示するには、<varname>timezone</>を変更するか、あるいは<literal>AT TIME ZONE</>構文（<xref linkend="functions-datetime-zoneconvert"> を参照）を使用します。
     </para>

     <para>
<!--
      Conversions between <type>timestamp without time zone</type> and
      <type>timestamp with time zone</type> normally assume that the
      <type>timestamp without time zone</type> value should be taken or given
      as <varname>timezone</> local time.  A different time zone can
      be specified for the conversion using <literal>AT TIME ZONE</>.
-->
<type>timestamp without time zone</type>と<type>timestamp with time zone</type>間の変換では、通常<type>timestamp without time zone</type>値は<varname>timezone</>ローカル時間としてみなされる、または、指定されるものと想定されます。
<literal>AT TIME ZONE</>を使用する変換では、異なる時間帯を指定できます。
     </para>
    </sect3>

    <sect3>
<!--
     <title>Special Values</title>
-->
<title>特殊な値</title>

     <indexterm>
<!--
      <primary>time</primary>
      <secondary>constants</secondary>
-->
      <primary>time</primary>
      <secondary>定数</secondary>
     </indexterm>

     <indexterm>
      <primary>date</primary>
<!--
      <secondary>constants</secondary>
-->
      <secondary>定数</secondary>
     </indexterm>

     <para>
<!--
      <productname>PostgreSQL</productname> supports several
      special date/time input values for convenience, as shown in <xref
      linkend="datatype-datetime-special-table">.  The values
      <literal>infinity</literal> and <literal>-infinity</literal>
      are specially represented inside the system and will be displayed
      unchanged; but the others are simply notational shorthands
      that will be converted to ordinary date/time values when read.
      (In particular, <literal>now</> and related strings are converted
      to a specific time value as soon as they are read.)
      All of these values need to be enclosed in single quotes when used
      as constants in SQL commands.
-->
<productname>PostgreSQL</productname>では利便性のために、<xref linkend="datatype-datetime-special-table">に示されているような特別な日付/時刻入力値をサポートしています。
<literal>infinity</literal>と<literal>-infinity</literal>の値は、特別にシステム内部で表現され、変更されずに表示されます。
他のものは、単に簡略化された表記で、読み込まれる際には通常の日付/時刻値に変換されます。
（特に<literal>now</>とその関連文字列は読み込まれるとすぐにその時点の値に変換されます。）
これらの値はすべて、SQLコマンドで定数として使う場合は、単一引用符でくくらなければなりません。
     </para>

      <table id="datatype-datetime-special-table">
<!--
       <title>Special Date/Time Inputs</title>
-->
       <title>特殊な日付/時刻定数</title>
<!--
     <tgroup cols="3">
-->
       <tgroup cols="3">
        <thead>
         <row>
<!--
          <entry>Input String</entry>
          <entry>Valid Types</entry>
          <entry>Description</entry>
-->
      <entry>入力文字列</entry>
          <entry>有効な型</entry>
      <entry>説明</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><literal>epoch</literal></entry>
          <entry><type>date</type>, <type>timestamp</type></entry>
<!--
          <entry>1970-01-01 00:00:00+00 (Unix system time zero)</entry>
-->
          <entry>1970-01-01 00:00:00+00（Unixシステム時間におけるゼロ）</entry>
         </row>
         <row>
          <entry><literal>infinity</literal></entry>
          <entry><type>date</type>, <type>timestamp</type></entry>
<!--
          <entry>later than all other time stamps</entry>
-->
      <entry>他のすべてのタイムスタンプより将来</entry>
         </row>
         <row>
          <entry><literal>-infinity</literal></entry>
          <entry><type>date</type>, <type>timestamp</type></entry>
<!--
          <entry>earlier than all other time stamps</entry>
-->
      <entry>他のすべてのタイムスタンプより過去</entry>
         </row>
         <row>
          <entry><literal>now</literal></entry>
          <entry><type>date</type>, <type>time</type>, <type>timestamp</type></entry>
<!--
          <entry>current transaction's start time</entry>
-->
      <entry>現トランザクションの開始時刻</entry>
         </row>
         <row>
          <entry><literal>today</literal></entry>
          <entry><type>date</type>, <type>timestamp</type></entry>
<!--
          <entry>midnight today</entry>
-->
      <entry>今日の始まり</entry>
         </row>
         <row>
          <entry><literal>tomorrow</literal></entry>
          <entry><type>date</type>, <type>timestamp</type></entry>
<!--
          <entry>midnight tomorrow</entry>
-->
      <entry>明日の始まり</entry>
         </row>
         <row>
          <entry><literal>yesterday</literal></entry>
          <entry><type>date</type>, <type>timestamp</type></entry>
<!--
          <entry>midnight yesterday</entry>
-->
      <entry>昨日の始まり</entry>
         </row>
         <row>
          <entry><literal>allballs</literal></entry>
          <entry><type>time</type></entry>
          <entry>00:00:00.00 UTC</entry>
         </row>
        </tbody>
       </tgroup>
      </table>

     <para>
<!--
      The following <acronym>SQL</acronym>-compatible functions can also
      be used to obtain the current time value for the corresponding data
      type:
      <literal>CURRENT_DATE</literal>, <literal>CURRENT_TIME</literal>,
      <literal>CURRENT_TIMESTAMP</literal>, <literal>LOCALTIME</literal>,
      <literal>LOCALTIMESTAMP</literal>.  The latter four accept an
      optional subsecond precision specification.  (See <xref
      linkend="functions-datetime-current">.)  Note that these are
      SQL functions and are <emphasis>not</> recognized in data input strings.
-->
<acronym>SQL</acronym>互換の関数である、<literal>CURRENT_DATE</literal>、<literal>CURRENT_TIME</literal>、<literal>CURRENT_TIMESTAMP</literal>、<literal>LOCALTIME</literal>、<literal>LOCALTIMESTAMP</literal>も、対応するデータ型の日付または時間の値として使用できます。
後の4つでは、オプションとして秒以下の精度指定が可能です。
（<xref linkend="functions-datetime-current"> を参照してください。）
これらはSQL関数であり、データ入力文字列として認識<emphasis>されない</>ことに注意してください。
     </para>

    </sect3>
   </sect2>

   <sect2 id="datatype-datetime-output">
<!--
    <title>Date/Time Output</title>
-->
<title>日付/時刻出力</title>

    <indexterm>
     <primary>date</primary>
<!--
     <secondary>output format</secondary>
     <seealso>formatting</seealso>
-->
     <secondary>出力書式</secondary>
     <seealso>書式設定</seealso>
    </indexterm>

    <indexterm>
     <primary>time</primary>
<!--
     <secondary>output format</secondary>
     <seealso>formatting</seealso>
-->
     <secondary>出力書式</secondary>
     <seealso>書式設定</seealso>
    </indexterm>

    <para>
<!--
     The output format of the date/time types can be set to one of the four
     styles ISO 8601,
     <acronym>SQL</acronym> (Ingres), traditional <productname>POSTGRES</>
     (Unix <application>date</> format), or
     German.  The default
     is the <acronym>ISO</acronym> format.  (The
     <acronym>SQL</acronym> standard requires the use of the ISO 8601
     format.  The name of the <quote>SQL</quote> output format is a
     historical accident.)  <xref
     linkend="datatype-datetime-output-table"> shows examples of each
     output style.  The output of the <type>date</type> and
     <type>time</type> types is generally only the date or time part
     in accordance with the given examples.  However, the
     <productname>POSTGRES</> style outputs date-only values in
     <acronym>ISO</acronym> format.
-->
日付/時刻型の出力書式は、ISO 8601、<acronym>SQL</acronym>（Ingres）、伝統的な<productname>POSTGRES</>（Unix <application>date</>書式）またはGermanの４つのいずれかに設定されます。
デフォルトは<acronym>ISO</acronym>書式です。
（標準<acronym>SQL</acronym>ではISO 8601書式の使用が定められています。
<quote>SQL</quote>という出力書式名は歴史的な事故です。）
<xref linkend="datatype-datetime-output-table">に各出力書式の例を示します。
<type>date</type>と<type>time</type>の書式は、例にあるとおり、それぞれ日付と時刻の部分です。しかし、<productname>POSTGRES</>では<acronym>ISO</acronym>書式の日付部分のみを出力します。(YMDやMDYの場合12-17-1997を返し、DMYの場合17-12-1997を返します。)
<!--
However以下が原文のみだとわかりにくかったため
http://www.postgresql.org/message-id/2598E90D3D534989905115C5C1172679@maumau
より補足を追加
-->
    </para>

     <table id="datatype-datetime-output-table">
<!--
      <title>Date/Time Output Styles</title>
-->
<title>日付/時刻出力形式</title>
      <tgroup cols="3">
       <thead>
        <row>
<!--
         <entry>Style Specification</entry>
         <entry>Description</entry>
         <entry>Example</entry>
-->
     <entry>様式仕様</entry>
     <entry>説明</entry>
     <entry>例</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><literal>ISO</literal></entry>
<!--
         <entry>ISO 8601/SQL standard</entry>
-->
         <entry>ISO 8601/標準SQL</entry>
        <entry><literal>1997-12-17 07:37:16-08</literal></entry>
        </row>
        <row>
         <entry><literal>SQL</literal></entry>
<!--
         <entry>traditional style</entry>
-->
     <entry>伝統的な様式</entry>
         <entry><literal>12/17/1997 07:37:16.00 PST</literal></entry>
        </row>
        <row>
         <entry><literal>Postgres</literal></entry>
<!--
         <entry>original style</entry>
-->
     <entry>特有の様式</entry>
         <entry><literal>Wed Dec 17 07:37:16 1997 PST</literal></entry>
        </row>
        <row>
        <entry><literal>German</literal></entry>
<!--
         <entry>regional style</entry>
-->
     <entry>地域限定様式</entry>
         <entry><literal>17.12.1997 07:37:16.00 PST</literal></entry>
        </row>
       </tbody>
      </tgroup>
     </table>

    <note>
     <para>
<!--
      ISO 8601 specifies the use of uppercase letter <literal>T</> to separate
      the date and time.  <productname>PostgreSQL</> accepts that format on
      input, but on output it uses a space rather than <literal>T</>, as shown
      above.  This is for readability and for consistency with RFC 3339 as
      well as some other database systems.
-->
ISO 8601の仕様では大文字の<literal>T</>は日付と時間を分割します。
<productname>PostgreSQL</>は入力ではこの書式を受け付けますが、上記のように出力では<literal>T</>ではなく空白を使用します。
これは読みやすさと他のデータベースシステムと同様のRFC3339に準拠し整合性を保つためです。
     </para>
    </note>

    <para>
<!--
     In the <acronym>SQL</acronym> and POSTGRES styles, day appears before
     month if DMY field ordering has been specified, otherwise month appears
     before day.
     (See <xref linkend="datatype-datetime-input">
     for how this setting also affects interpretation of input values.)
     <xref linkend="datatype-datetime-output2-table"> shows examples.
-->
<acronym>SQL</acronym>とPOSTGRESでは、DMYフィールド順が指定された場合は月の前に日が現れます。
指定がなければ日の前に月が現れます。
（この設定が入力値の解釈にどう影響を与えるのかについては<xref linkend="datatype-datetime-input">を参考にしてください）。
<xref linkend="datatype-datetime-output2-table">に例を示します。
    </para>

     <table id="datatype-datetime-output2-table">
<!--
      <title>Date Order Conventions</title>
-->
      <title>日付の順序の慣習</title>
      <tgroup cols="3">
       <thead>
        <row>
<!--
         <entry><varname>datestyle</varname> Setting</entry>
         <entry>Input Ordering</entry>
         <entry>Example Output</entry>
-->
         <entry><varname>datestyle</varname>の設定</entry>
         <entry>入力の順序</entry>
         <entry>出力例</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><literal>SQL, DMY</></entry>
<!--
         <entry><replaceable>day</replaceable>/<replaceable>month</replaceable>/<replaceable>year</replaceable></entry>
-->
         <entry><replaceable>day</replaceable>（日）/<replaceable>month</replaceable>（月）/<replaceable>year</replaceable>（年）</entry>
         <entry><literal>17/12/1997 15:37:16.00 CET</literal></entry>
        </row>
        <row>
         <entry><literal>SQL, MDY</></entry>
<!--
         <entry><replaceable>month</replaceable>/<replaceable>day</replaceable>/<replaceable>year</replaceable></entry>
-->
         <entry><replaceable>month</replaceable>（月）/<replaceable>day</replaceable>（日）/<replaceable>year</replaceable>（年）</entry>
         <entry><literal>12/17/1997 07:37:16.00 PST</literal></entry>
        </row>
        <row>
         <entry><literal>Postgres, DMY</></entry>
<!--
         <entry><replaceable>day</replaceable>/<replaceable>month</replaceable>/<replaceable>year</replaceable></entry>
-->
         <entry><replaceable>day</replaceable>（日）/<replaceable>month</replaceable>（月）/<replaceable>year</replaceable>（年）</entry>
         <entry><literal>Wed 17 Dec 07:37:16 1997 PST</literal></entry>
        </row>
       </tbody>
      </tgroup>
     </table>

    <para>
<!--
     The date/time style can be selected by the user using the
     <command>SET datestyle</command> command, the <xref
     linkend="guc-datestyle"> parameter in the
     <filename>postgresql.conf</filename> configuration file, or the
     <envar>PGDATESTYLE</envar> environment variable on the server or
     client.
-->
ユーザは<command>SET DATESTYLE</command>コマンド、<filename>postgresql.conf</filename>構成ファイルの<xref linkend="guc-datestyle">パラメータ、そしてサーバかクライアントの<envar>PGDATESTYLE</envar>環境変数を使用して、日付/時刻の様式を選択することができます。
    </para>

    <para>
<!--
     The formatting function <function>to_char</function>
     (see <xref linkend="functions-formatting">) is also available as
     a more flexible way to format date/time output.
-->
日付/時刻出力のより柔軟な書式設定方法として、書式設定関数<function>to_char</function>（<xref linkend="functions-formatting">を参照）を使用することもできます。
    </para>
   </sect2>

   <sect2 id="datatype-timezones">
<!--
    <title>Time Zones</title>
-->
<title>時間帯</title>

    <indexterm zone="datatype-timezones">
<!--
     <primary>time zone</primary>
-->
<primary>時間帯</primary>
    </indexterm>

   <para>
<!--
    Time zones, and time-zone conventions, are influenced by
    political decisions, not just earth geometry. Time zones around the
    world became somewhat standardized during the 1900s,
    but continue to be prone to arbitrary changes, particularly with
    respect to daylight-savings rules.
    <productname>PostgreSQL</productname> uses the widely-used
    IANA (Olson) time zone database for information about
    historical time zone rules.  For times in the future, the assumption
    is that the latest known rules for a given time zone will
    continue to be observed indefinitely far into the future.
-->
時間帯および時間帯の取り決めは地球の幾何学的要素のみでなく政治的判断に影響されます。
世界にまたがる時間帯は1900年代に標準化されたようですが、特に夏時間規則の点で、勝手に変更する傾向が続いています。
<productname>PostgreSQL</productname>は歴史的な時間帯ルールについての情報に、広く使われているIANA時間帯データベースを使用します。
将来の時間は、ある与えられた時間帯に対する最新の既知のルールが、将来長きに渡りそのまま遵守が継続されるということを前提としています。
   </para>

    <para>
<!--
     <productname>PostgreSQL</productname> endeavors to be compatible with
     the <acronym>SQL</acronym> standard definitions for typical usage.
     However, the <acronym>SQL</acronym> standard has an odd mix of date and
     time types and capabilities. Two obvious problems are:
-->
<productname>PostgreSQL</productname>は汎用的に使用できるように標準<acronym>SQL</acronym>への互換性に対し最大限の努力をしています。
しかし、標準<acronym>SQL</acronym>には、日付と時刻のデータ型と機能に関する混乱が見受けられます。
2つの明らかな問題点を以下に示します。

     <itemizedlist>
      <listitem>
       <para>
<!--
        Although the <type>date</type> type
        cannot have an associated time zone, the
        <type>time</type> type can.
        Time zones in the real world have little meaning unless
        associated with a date as well as a time,
        since the offset can vary through the year with daylight-saving
        time boundaries.
-->
<type>date</type>型にはそれに関連する時間帯を持てませんが、<type>time</type>型にはあります。
現実の世界において、時間帯のオフセットが夏時間への切り替えにより年間を通じて変化することから、時刻と同様に日付もそれに結び付けられていないと意味がありません。
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        The default time zone is specified as a constant numeric offset
        from <acronym>UTC</>. It is therefore impossible to adapt to
        daylight-saving time when doing date/time arithmetic across
        <acronym>DST</acronym> boundaries.
-->
デフォルトの時間帯は<acronym>UTC</>からの整数定数オフセットとして指定されています。
したがって<acronym>DST</acronym>（夏時間）への切り替えをまたいで日付/時刻演算を行う場合、夏時間を適用することは不可能です。
       </para>
      </listitem>

     </itemizedlist>
    </para>

    <para>
<!--
     To address these difficulties, we recommend using date/time types
     that contain both date and time when using time zones. We
     do <emphasis>not</> recommend using the type <type>time with
     time zone</type> (though it is supported by
     <productname>PostgreSQL</productname> for legacy applications and
     for compliance with the <acronym>SQL</acronym> standard).
     <productname>PostgreSQL</productname> assumes
     your local time zone for any type containing only date or time.
-->
このような問題を解決するためには、時間帯を使用する際に日付と時刻の両方を保持できる日付/時刻データ型を使用することを勧めます。
<type>time with time zone</type>型の使用はお勧め<emphasis>しません</emphasis> 
（もっとも<productname>PostgreSQL</productname>では、旧式のアプリケーションや、標準<acronym>SQL</acronym>との互換性のために、<type>time with time zone</type>型の使用をサポートしています）。
<productname>PostgreSQL</productname>は、日付または時刻のみを保持するデータ型のすべては使用中の時間帯であると前提しています。
    </para>

    <para>
<!--
     All timezone-aware dates and times are stored internally in
     <acronym>UTC</acronym>.  They are converted to local time
     in the zone specified by the <xref linkend="guc-timezone"> configuration
     parameter before being displayed to the client.
-->
すべての時間帯付きの日付と時刻は<acronym>UTC</acronym>で内部的に保存されます。
これらはクライアントに表示される前に<xref linkend="guc-timezone">設定パラメータで指定された時間帯におけるローカル時間に変換されます。
    </para>

    <para>
<!--
     <productname>PostgreSQL</productname> allows you to specify time zones in
     three different forms:
-->
<productname>PostgreSQL</productname>では、3つの形式で時間帯を指定することができます。
     <itemizedlist>
      <listitem>
       <para>
<!--
        A full time zone name, for example <literal>America/New_York</>.
        The recognized time zone names are listed in the
        <literal>pg_timezone_names</literal> view (see <xref
        linkend="view-pg-timezone-names">).
        <productname>PostgreSQL</productname> uses the widely-used
        <literal>zoneinfo</> time zone data for this purpose, so the same
        names are also recognized by much other software.
-->
<literal>America/New_York</>などの完全な時間帯名称。
認識できる時間帯名称は<literal>pg_timezone_names</literal>ビューに列挙されています（<xref linkend="view-pg-timezone-names">を参照してください）。
<productname>PostgreSQL</productname>はこの目的のためによく使用されている<literal>zoneinfo</>時間帯データを使用します。
したがって、多くの他のソフトウェアでも同じ名前が認識されます。
       </para>
      </listitem>
      <listitem>
       <para>
<!--
        A time zone abbreviation, for example <literal>PST</>.  Such a
        specification merely defines a particular offset from UTC, in
        contrast to full time zone names which can imply a set of daylight
        savings transition-date rules as well.  The recognized abbreviations
        are listed in the <literal>pg_timezone_abbrevs</> view (see <xref
        linkend="view-pg-timezone-abbrevs">).  You cannot set the
        configuration parameters <xref linkend="guc-timezone"> or
        <xref linkend="guc-log-timezone"> to a time
        zone abbreviation, but you can use abbreviations in
        date/time input values and with the <literal>AT TIME ZONE</>
        operator.
-->
<literal>PST</>などの時間帯省略形。
こうした指定は、単に特定のUTCからのオフセットを定義します。
一方、完全な時間帯名称では夏時間遷移規則群も組み込まれます。
認識可能な省略形は<literal>pg_timezone_abbrevs</>ビューに列挙されています（<xref linkend="view-pg-timezone-abbrevs">を参照してください）。
時間帯省略形に対して<xref linkend="guc-timezone">設定パラメータおよび<xref linkend="guc-log-timezone">設定パラメータを設定することはできませんが、日付時刻型の入力値や<literal>AT TIME ZONE</>演算子に省略形を使用することができます。
       </para>
      </listitem>
      <listitem>
       <para>
<!--
        In addition to the timezone names and abbreviations,
        <productname>PostgreSQL</productname> will accept POSIX-style time zone
        specifications of the form <replaceable>STD</><replaceable>offset</> or
        <replaceable>STD</><replaceable>offset</><replaceable>DST</>, where
        <replaceable>STD</> is a zone abbreviation, <replaceable>offset</> is a
        numeric offset in hours west from UTC, and <replaceable>DST</> is an
        optional daylight-savings zone abbreviation, assumed to stand for one
        hour ahead of the given offset. For example, if <literal>EST5EDT</>
        were not already a recognized zone name, it would be accepted and would
        be functionally equivalent to United States East Coast time.  In this　
        syntax, a zone abbreviation can be a string of letters, or an
        arbitrary string surrounded by angle brackets (<literal>&lt;&gt;</>).
        When a daylight-savings zone abbreviation is present,
        it is assumed to be used
        according to the same daylight-savings transition rules used in the
        IANA time zone database's <filename>posixrules</> entry.
        In a standard <productname>PostgreSQL</productname> installation,
        <filename>posixrules</> is the same as <literal>US/Eastern</>, so
        that POSIX-style time zone specifications follow USA daylight-savings
        rules.  If needed, you can adjust this behavior by replacing the
        <filename>posixrules</> file.
-->
時間帯名やその省略形に加え、<productname>PostgreSQL</productname>は、<replaceable>STD</><replaceable>offset</>や<replaceable>STD</><replaceable>offset</><replaceable>DST</>という形式のPOSIX様式の時間帯指定を受付けます。
ここで、<replaceable>STD</>は時間帯省略形、<replaceable>offset</>はUTCから西に数えた時間単位のオフセットです。
また、<replaceable>DST</>は省略可能で夏時間時間帯の省略形で、指定オフセットから1時間進むことを意味します。
例えば、<literal>EST5EDT</>が認識済みの時間帯名でない場合でも、受付けられ、合衆国東海岸時間と同じものとして動作します。
この文法では、文字列による時間帯の短縮を指定したり文字列の周りを山括弧で囲むことができるようになります(<literal>&lt;&gt;</>)。
夏時間時間帯名があると、IANA時間帯データベースの<filename>posixrules</>項目で使用される夏時間変換規則と同じ規則に従って使用されるものと前提されます。
標準的な<productname>PostgreSQL</productname>インストレーションでは、<filename>posixrules</>は<literal>US/Eastern</>と同じです。
このためPOSIX書式の時間帯指定はUSA夏時間規則に従います。
必要に応じて<filename>posixrules</>ファイルを置き換えることで、この動作を調整することができます。
       </para>
      </listitem>
     </itemizedlist>
<!--
     In short, this is the difference between abbreviations
     and full names: abbreviations always represent a fixed offset from
     UTC, whereas most of the full names imply a local daylight-savings time
     rule, and so have two possible UTC offsets.  As an example,
     <literal>2014-06-04 12:00 America/New_York</> represents noon local
     time in New York, which for this particular date was Eastern Daylight
     Time (UTC-4).  So <literal>2014-06-04 12:00 EDT</> specifies that
     same time instant.  But <literal>2014-06-04 12:00 EST</> specifies
     noon Eastern Standard Time (UTC-5), regardless of whether daylight
     savings was nominally in effect on that date.
-->
一言で言うと、これは省略形と正式名称間の差異です。
省略形はUTCから固定したオフセットを表わすのに対して、ほとんどの省略なしの名称はローカルの夏時間規定を意味するので、UTCオフセットには２つの可能性があります。
例えば<literal>2014-06-04 12:00 America/New_York</>はニューヨークの正午と個別に東部夏時間(UTC-4)を示します。つまり<literal>2014-06-04 12:00 EDT</>と同時刻を示します。しかし、<literal>2014-06-04 12:00 EST</>は東部標準時間(UTC-5)を示し、夏時間かどうかに関わらず、実質標準的な時間です。
    </para>

    <para>
<!--
     To complicate matters, some jurisdictions have used the same timezone
     abbreviation to mean different UTC offsets at different times; for
     example, in Moscow <literal>MSK</> has meant UTC+3 in some years and
     UTC+4 in others.  <application>PostgreSQL</> interprets such
     abbreviations according to whatever they meant (or had most recently
     meant) on the specified date; but, as with the <literal>EST</> example
     above, this is not necessarily the same as local civil time on that date.
-->
管轄によって同じ略号を使っていることがさらに問題を複雑にしています。
例えばモスクワでは<literal>MSK</>はここ数年ではUTC+3を意味しますが、他ではUTC+4を意味します。
<application>PostgreSQL</>ではそのような固有の日付の略号(ほぼ最新の)のを実装しています。
しかし、<literal>EST</>の例にあるように、必ずしも常用時間を示しているわけではありません。

    </para>


    <para>
<!--
     One should be wary that the POSIX-style time zone feature can
     lead to silently accepting bogus input, since there is no check on the
     reasonableness of the zone abbreviations.  For example, <literal>SET
     TIMEZONE TO FOOBAR0</> will work, leaving the system effectively using
     a rather peculiar abbreviation for UTC.
     Another issue to keep in mind is that in POSIX time zone names,
     positive offsets are used for locations <emphasis>west</> of Greenwich.
     Everywhere else, <productname>PostgreSQL</productname> follows the
     ISO-8601 convention that positive timezone offsets are <emphasis>east</>
     of Greenwich.
-->
時間帯省略形の正当性を検査しないため、POSIX書式時間帯機能ではおかしな入力を警告なく受け付けてしまう可能性があることに注意すべきです。
例えば、システムの動作はより独特なUTCの省略形を使用し続けた状態で、<literal>SET TIMEZONE TO FOOBAR0</>でも動作します。
他にも、POSIX時間帯名称では正のオフセットがグリニッジの<emphasis>西</>側で使用されるという問題には注意しなければなりません。
<productname>PostgreSQL</productname>は、他ではすべてISO-8601規約にしたがい、正の時間帯オフセットはグリニッジの<emphasis>東</>としています。
    </para>

    <para>
<!--
     In all cases, timezone names and abbreviations are recognized
     case-insensitively.  (This is a change from <productname>PostgreSQL</>
     versions prior to 8.2, which were case-sensitive in some contexts but
     not others.)
-->
すべての場合において、時間帯名や略号は大文字小文字の区別なく認識されます。
（これは<productname>PostgreSQL</productname>のバージョン8.2以前からの変更です。
以前はすべてではありませんが、ある文脈では大文字小文字が区別されました。） 
    </para>

    <para>
<!--
     Neither timezone names nor abbreviations are hard-wired into the server;
     they are obtained from configuration files stored under
     <filename>.../share/timezone/</> and <filename>.../share/timezonesets/</>
     of the installation directory
     (see <xref linkend="datetime-config-files">).
-->
時間帯名、省略形のどちらもサーバ内に組み込まれるわけではありません。
インストールディレクトリの<filename>.../share/timezone/</>および<filename>.../share/timezonesets/</>の下に保存される構成ファイルから取得されます（<xref linkend="datetime-config-files">を参照ください）。
    </para>

    <para>
<!--
     The <xref linkend="guc-timezone"> configuration parameter can
     be set in the file <filename>postgresql.conf</>, or in any of the
     other standard ways described in <xref linkend="runtime-config">.
     There are also some special ways to set it:
-->
<xref linkend="guc-timezone">は<filename>postgresql.conf</>ファイルや<xref linkend="runtime-config">で説明する他の標準的な方法で設定することができます。
以下に、いくつか特別な設定方法を示します。
     <itemizedlist>
      <listitem>
       <para>
<!--
        The <acronym>SQL</acronym> command <command>SET TIME ZONE</command>
        sets the time zone for the session.  This is an alternative spelling
        of <command>SET TIMEZONE TO</> with a more SQL-spec-compatible syntax.
-->
<command>SET TIME ZONE</command> <acronym>SQL</acronym>コマンドはセッションの時間帯を設定します。
これはSQL仕様互換の文法により従っている<command>SET TIMEZONE TO</>の別名です。
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        The <envar>PGTZ</envar> environment variable is used by
        <application>libpq</application> clients
        to send a <command>SET TIME ZONE</command>
        command to the server upon connection.
-->
<envar>PGTZ</envar>環境変数は、<application>libpq</application>クライアントが接続時にサーバに<command>SET TIME ZONE</command>コマンドを送信するために用いられます。
       </para>
      </listitem>

     </itemizedlist>
    </para>

   </sect2>
   
   <sect2 id="datatype-interval-input">
   <!--
    <title>Interval Input</title>
    -->
    <title>時間間隔入力</title>

    <indexterm>
    <!--
     <primary>interval</primary>
     -->
     <primary>時間間隔</primary>
    </indexterm>

     <para>
     <!--
      <type>interval</type> values can be written using the following
      verbose syntax:
      -->
<type>interval</type>値は以下の冗長な構文を使って記述されます。

<synopsis>
<optional>@</> <replaceable>quantity</> <replaceable>unit</> <optional><replaceable>quantity</> <replaceable>unit</>...</> <optional><replaceable>direction</></optional>
</synopsis>
<!--
     where <replaceable>quantity</> is a number (possibly signed);
     <replaceable>unit</> is <literal>microsecond</literal>,
     <literal>millisecond</literal>, <literal>second</literal>,
     <literal>minute</literal>, <literal>hour</literal>, <literal>day</literal>,
     <literal>week</literal>, <literal>month</literal>, <literal>year</literal>,
     <literal>decade</literal>, <literal>century</literal>, <literal>millennium</literal>,
     or abbreviations or plurals of these units;
     <replaceable>direction</> can be <literal>ago</literal> or
     empty.  The at sign (<literal>@</>) is optional noise.  The amounts
     of the different units are implicitly added with appropriate
     sign accounting.  <literal>ago</literal> negates all the fields.
     This syntax is also used for interval output, if
     <xref linkend="guc-intervalstyle"> is set to
     <literal>postgres_verbose</>.
     -->
ここで、<replaceable>quantity</>は（符号付き）時間量、<replaceable>unit</replaceable>（単位）は<literal>microsecond</literal>、<literal>millisecond</literal>、<literal>second</literal>（秒）、<literal>minute</literal>（分）、<literal>hour</literal>（時）、<literal>day</literal>（日）、<literal>week</literal>（週）、<literal>month</literal>（月）、<literal>year</literal>（年）、<literal>decade</literal>（10年単位）、<literal>century</literal>（100年単位）、<literal>millennium</literal>（1000年単位）あるいはこれらの単位の簡略形または複数形です。
<replaceable>direction</>（方向）は<literal>ago</literal>もしくは空です。
アットマーク（<literal>@</>）はオプションで、付けても付けなくても構いません。
異なる単位における時間量は適切に符号を考慮して暗黙的に足されます。
<literal>ago</literal>はすべてのフィールドを反転させます。
この構文はまた、<xref linkend="guc-intervalstyle">が<literal>postgres_verbose</>に設定されている場合に時間間隔の出力でも使用されます。
    </para>

    <para>
    <!--
     Quantities of days, hours, minutes, and seconds can be specified without
     explicit unit markings.  For example, <literal>'1 12:59:10'</> is read
     the same as <literal>'1 day 12 hours 59 min 10 sec'</>.  Also,
     a combination of years and months can be specified with a dash;
     for example <literal>'200-10'</> is read the same as <literal>'200 years
     10 months'</>.  (These shorter forms are in fact the only ones allowed
     by the <acronym>SQL</acronym> standard, and are used for output when
     <varname>IntervalStyle</> is set to <literal>sql_standard</literal>.)
     -->
日、時、分、および秒の時間量は明示的に単位を指定しなくても構いません。
例えば、<literal>'1 12:59:10'</>は<literal>'1 day 12 hours 59 min 10 sec'</>（1日と12時間59分10秒）と解釈されます。
また年と月の組み合わせはダッシュを使って指定することができます。
例えば、<literal>'200-10'</>は<literal>'200 years 10 months'</>（200年と10か月）と解釈されます。
（実際これらの簡略形は標準SQLで許されたもののみです。
そして<varname>IntervalStyle</>が<literal>sql_standard</literal>に設定されている場合に出力でも使用されます。）
    </para>

    <para>
    <!--
     Interval values can also be written as ISO 8601 time intervals, using
     either the <quote>format with designators</> of the standard's section
     4.4.3.2 or the <quote>alternative format</> of section 4.4.3.3.  The
     format with designators looks like this:
     -->
標準の4.4.3.2節の<quote>指定文字付書式</>または4.4.3.3節の<quote>代替書式</>のどちらかを使用して、時間間隔値はISO 8601時間間隔として書くこともできます。
指定文字付の書式は以下のようなものです。
<synopsis>
P <replaceable>quantity</> <replaceable>unit</> <optional> <replaceable>quantity</> <replaceable>unit</> ...</optional> <optional> T <optional> <replaceable>quantity</> <replaceable>unit</> ...</optional></optional>
</synopsis>
<!--
      The string must start with a <literal>P</>, and may include a
      <literal>T</> that introduces the time-of-day units.  The
      available unit abbreviations are given in <xref
      linkend="datatype-interval-iso8601-units">.  Units may be
      omitted, and may be specified in any order, but units smaller than
      a day must appear after <literal>T</>.  In particular, the meaning of
      <literal>M</> depends on whether it is before or after
      <literal>T</>.
      -->
文字列は<literal>P</>で始まらなければならず、また、一日における時間をもたらす<literal>T</>を含めることができます。
利用可能な単位の省略形を<xref linkend="datatype-interval-iso8601-units">に示します。
単位は省略しても構いません。
また任意の順番で指定できます。
しかし、1日より小さな単位は<literal>T</>の後に書かなければなりません。
特に<literal>M</>の意味は<literal>T</>の前にあるか後にあるかに依存します。
     </para>

     <table id="datatype-interval-iso8601-units">
<!--
      <title>ISO 8601 Interval Unit Abbreviations</title>
-->
      <title>ISO 8601における時間間隔単位の省略形</title>
     <tgroup cols="2">
       <thead>
        <row>
    <!--
         <entry>Abbreviation</entry>
         <entry>Meaning</entry>
     -->
     <entry>省略形</entry>
         <entry>意味</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>Y</entry>
     <!--
         <entry>Years</entry>
     -->
     <entry>年</entry>
        </row>
        <row>
         <entry>M</entry>
     <!--
         <entry>Months (in the date part)</entry>
     -->
     <entry>月（日付部分における）</entry>
        </row>
        <row>
         <entry>W</entry>
     <!--
         <entry>Weeks</entry>
     -->
     <entry>週</entry>
        </row>
        <row>
         <entry>D</entry>
     <!--
         <entry>Days</entry>
     -->
     <entry>日</entry>
        </row>
        <row>
         <entry>H</entry>
     <!--
         <entry>Hours</entry>
     -->
     <entry>時間</entry>
        </row>
        <row>
         <entry>M</entry>
     <!--
         <entry>Minutes (in the time part)</entry>
     -->
     <entry>分（時刻部分における）</entry>
        </row>
        <row>
         <entry>S</entry>
     <!--
         <entry>Seconds</entry>
     -->
     <entry>秒</entry>
        </row>
       </tbody>
      </tgroup>
     </table>

     <para>
     <!--
      In the alternative format:
      -->
別の書式を示します。
<synopsis>
P <optional> <replaceable>years</>-<replaceable>months</>-<replaceable>days</> </optional> <optional> T <replaceable>hours</>:<replaceable>minutes</>:<replaceable>seconds</> </optional>
</synopsis>
      <!--
      the string must begin with <literal>P</literal>, and a
      <literal>T</> separates the date and time parts of the interval.
      The values are given as numbers similar to ISO 8601 dates.
      -->
上の代替書式では、文字列は<literal>P</literal>から始まらなければなりません。
そして、<literal>T</>は時間間隔の日付部分と時刻部分とを分割します。
値はISO 8601日付と同様の数字で指定されます。
    </para>

    <para>
    <!--
     When writing an interval constant with a <replaceable>fields</>
     specification, or when assigning a string to an interval column that was
     defined with a <replaceable>fields</> specification, the interpretation of
     unmarked quantities depends on the <replaceable>fields</>.  For
     example <literal>INTERVAL '1' YEAR</> is read as 1 year, whereas
     <literal>INTERVAL '1'</> means 1 second.  Also, field values
     <quote>to the right</> of the least significant field allowed by the
     <replaceable>fields</> specification are silently discarded.  For
     example, writing <literal>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</>
     results in dropping the seconds field, but not the day field.
     -->
<replaceable>fields</>指定を使って時間間隔定数を記述する場合、または、<replaceable>fields</>仕様で定義された時間間隔列に文字列を割り当てる場合、マークされていない時間量の解釈は<replaceable>fields</>に依存します。
例えば<literal>INTERVAL '1' YEAR</>は1年と解釈され、一方で<literal>INTERVAL '1'</>は1秒と解釈されます。
同時に、<replaceable>fields</>仕様によって許可される最下位フィールドの<quote>右側の</>フィールド値は警告なしに破棄されます。
例えば、<literal>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</>と書くことで、二番目のフィールドは削除されますが、日付フィールドは削除されません。
    </para>

    <para>
    <!--
     According to the <acronym>SQL</> standard all fields of an interval
     value must have the same sign, so a leading negative sign applies to all
     fields; for example the negative sign in the interval literal
     <literal>'-1 2:03:04'</> applies to both the days and hour/minute/second
     parts.  <productname>PostgreSQL</> allows the fields to have different
     signs, and traditionally treats each field in the textual representation
     as independently signed, so that the hour/minute/second part is
     considered positive in this example.  If <varname>IntervalStyle</> is
     set to <literal>sql_standard</literal> then a leading sign is considered
     to apply to all fields (but only if no additional signs appear).
     Otherwise the traditional <productname>PostgreSQL</> interpretation is
     used.  To avoid ambiguity, it's recommended to attach an explicit sign
     to each field if any field is negative.
     -->
標準<acronym>SQL</>に従うと、時間間隔値のフィールドはすべて同じ符号を持たなければなりません。
このため、先頭の負の符号はすべてのフィールドに適用されます。
例えば時間間隔リテラル<literal>'-1 2:03:04'</>の負の符号は、日付部分にも時、分、秒部分にも適用されます。
<productname>PostgreSQL</>ではフィールドに異なる符号を持たせることができます。
また伝統的にテキスト形式表現における各フィールドは独立した符号を持つものとして扱われます。
このため、この例では時、分、秒部分は正であるとみなされます。
<varname>IntervalStyle</>が<literal>sql_standard</literal>に設定されている場合、先頭の符号はすべてのフィールドに適用されるものとみなされます（ただし他に符号がない場合のみです）。
さもなくば、伝統的な<productname>PostgreSQL</>の解釈が使用されます。
あいまいさを防ぐために、負のフィールドがある場合には個別に明示的な符号を付けることを勧めます。
    </para>

    <para>
    <!--
     Internally <type>interval</> values are stored as months, days,
     and seconds. This is done because the number of days in a month
     varies, and a day can have 23 or 25 hours if a daylight savings
     time adjustment is involved.  The months and days fields are integers
     while the seconds field can store fractions.  Because intervals are
     usually created from constant strings or <type>timestamp</> subtraction,
     this storage method works well in most cases. Functions
     <function>justify_days</> and <function>justify_hours</> are
     available for adjusting days and hours that overflow their normal
     ranges.
     -->
内部的には、<type>interval</>の値は月数、日数および秒数として格納されています。
ある月の日数は月によって変わりますし、夏時間が導入されていると1日が23時間であったり25時間であったりするからです。
月数と日数フィールドは整数ですが、秒数フィールドは小数を保管することができます。
時間間隔は通常定数列、もしくは<type>timestamp</>からの引き算で生成されますので、このように保存すればほとんどの場合うまく行きます。
<function>justify_days</>と<function>justify_hours</>関数で通常の範囲を越えた日にちと時刻を調整できます。
    </para>

    <para>
    <!--
     In the verbose input format, and in some fields of the more compact
     input formats, field values can have fractional parts; for example
     <literal>'1.5 week'</> or <literal>'01:02:03.45'</>.  Such input is
     converted to the appropriate number of months, days, and seconds
     for storage.  When this would result in a fractional number of
     months or days, the fraction is added to the lower-order fields
     using the conversion factors 1 month = 30 days and 1 day = 24 hours.
     For example, <literal>'1.5 month'</> becomes 1 month and 15 days.
     Only seconds will ever be shown as fractional on output.
     -->
冗長な入力書式、および、より簡略な書式の一部のフィールドでは、フィールド値は小数部分を持つことができます。
例えば<literal>'1.5 week'</>や<literal>'01:02:03.45'</>です。
こうした入力は格納の際適切な月数、日数、秒数に変換されます。
これが月または日数が小数になる結果となる場合、小数部分は1月は30日、1日は24時間という変換規則を使用して、より低い順のフィールドに加えられます。
例えば<literal>'1.5 month'</>は1月と15日となります。
秒だけが出力において小数を示すことになります。
    </para>

    <para>
    <!--
     <xref linkend="datatype-interval-input-examples"> shows some examples
     of valid <type>interval</> input.
     -->
<xref linkend="datatype-interval-input-examples">は有効な<type>interval</>入力のいくつかの例を示しています。
    </para>

     <table id="datatype-interval-input-examples">
     <!--
      <title>Interval Input</title>
      -->
      <title>時間間隔入力</title>
      <tgroup cols="2">
       <thead>
        <row>
    <!--
         <entry>Example</entry>
         <entry>Description</entry>
     -->
     <entry>例</entry>
         <entry>説明</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>1-2</entry>
     <!--
         <entry>SQL standard format: 1 year 2 months</entry>
     -->
     <entry>標準SQL書式。1年2ヶ月</entry>
        </row>
        <row>
         <entry>3 4:05:06</entry>
     <!--
         <entry>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</entry>
     -->
     <entry>標準SQL書式。3日4時間5分6秒</entry>
        </row>
        <row>
         <entry>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</entry>
     <!--
         <entry>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</entry>
     -->
     <entry>伝統的Postgres書式。1年2月3日4時間5分6秒</entry>
        </row>
        <row>
         <entry>P1Y2M3DT4H5M6S</entry>
     <!--
         <entry>ISO 8601 <quote>format with designators</>: same meaning as above</entry>
     -->
     <entry>ISO 8601 <quote>指定文字付き書式</>。意味は上と同じ</entry>
        </row>
        <row>
         <entry>P0001-02-03T04:05:06</entry>
     <!--
         <entry>ISO 8601 <quote>alternative format</>: same meaning as above</entry>
     -->
     <entry>ISO 8601 <quote>代替書式</>。意味は上と同じ</entry>
        </row>
       </tbody>
      </tgroup>
     </table>

   </sect2>

   <sect2 id="datatype-interval-output">
   <!--
    <title>Interval Output</title>
    -->
    <title>時間間隔出力</title>

    <indexterm>
    <!--
     <primary>interval</primary>
     <secondary>output format</secondary>
     <seealso>formatting</seealso>
     -->
     <primary>時間間隔</primary>
     <secondary>出力書式</secondary>
     <seealso>書式設定</seealso>
    </indexterm>

    <para>
    <!--
     The output format of the interval type can be set to one of the
     four styles <literal>sql_standard</>, <literal>postgres</>,
     <literal>postgres_verbose</>, or <literal>iso_8601</>,
     using the command <literal>SET intervalstyle</literal>.
     The default is the <literal>postgres</> format.
     <xref linkend="interval-style-output-table"> shows examples of each
     output style.
     -->
時間間隔型の出力書式は、<literal>SET intervalstyle</literal>コマンドを使用して、<literal>sql_standard</>、<literal>postgres</>、<literal>postgres_verbose</>または<literal>iso_8601</>の４つのうちの１つを設定できます。
デフォルトは<literal>postgres</>書式です。
<xref linkend="interval-style-output-table">はそれぞれの出力形式を示した例です。
    </para>

    <para>
    <!--
     The <literal>sql_standard</> style produces output that conforms to
     the SQL standard's specification for interval literal strings, if
     the interval value meets the standard's restrictions (either year-month
     only or day-time only, with no mixing of positive
     and negative components).  Otherwise the output looks like a standard
     year-month literal string followed by a day-time literal string,
     with explicit signs added to disambiguate mixed-sign intervals.
     -->
<literal>sql_standard</>形式は、時間間隔値が標準制約（構成要素に正負が混在していない年数と月数のみ、または日数と時間のみ）を満足する場合、時間間隔リテラル文字列に対し標準SQLに準拠する出力を作成します。
そうでなければ、出力は、正負混在した時間間隔のあいまいさを無くす明示的な符号が付加され、日数-時間数リテラル文字列を伴った標準年数-月数リテラル文字列のようになります。
    </para>

    <para>
    <!--
     The output of the <literal>postgres</> style matches the output of
     <productname>PostgreSQL</> releases prior to 8.4 when the
     <xref linkend="guc-datestyle"> parameter was set to <literal>ISO</>.
     -->
<literal>postgres</>書式の出力は、<xref linkend="guc-datestyle">パラメータが<literal>ISO</>に設定されたとき、8.4以前のリリースと一致します。
    </para>

    <para>
    <!--
     The output of the <literal>postgres_verbose</> style matches the output of
     <productname>PostgreSQL</> releases prior to 8.4 when the
     <varname>DateStyle</> parameter was set to non-<literal>ISO</> output.
     -->
<literal>postgres_verbose</>書式の出力は、<xref linkend="guc-datestyle">パラメータが<literal>ISO</>に設定されたとき、8.4以前のリリースと一致します。
    </para>

    <para>
    <!--
     The output of the <literal>iso_8601</> style matches the <quote>format
     with designators</> described in section 4.4.3.2 of the
     ISO 8601 standard.
     -->
<literal>iso_8601</>書式の出力はISO 8601 標準の4.4.3.2セクションに記述の<quote>format with designators（指名付き書式）</>に一致します。
    </para>

     <table id="interval-style-output-table">
     <!--
       <title>Interval Output Style Examples</title>
       -->
       <title>時間間隔出力形式の例</title>
       <tgroup cols="4">
        <thead>
         <row>
     <!--
          <entry>Style Specification</entry>
          <entry>Year-Month Interval</entry>
          <entry>Day-Time Interval</entry>
          <entry>Mixed Interval</entry>
      -->
      <entry>形式指定</entry>
          <entry>年-月時間間隔</entry>
          <entry>日-時刻時間間隔</entry>
          <entry>混在した時間間隔</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><literal>sql_standard</></entry>
          <entry>1-2</entry>
          <entry>3 4:05:06</entry>
          <entry>-1-2 +3 -4:05:06</entry>
         </row>
         <row>
          <entry><literal>postgres</></entry>
          <entry>1 year 2 mons</entry>
          <entry>3 days 04:05:06</entry>
          <entry>-1 year -2 mons +3 days -04:05:06</entry>
         </row>
         <row>
          <entry><literal>postgres_verbose</></entry>
          <entry>@ 1 year 2 mons</entry>
          <entry>@ 3 days 4 hours 5 mins 6 secs</entry>
          <entry>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</entry>
         </row>
         <row>
          <entry><literal>iso_8601</></entry>
          <entry>P1Y2M</entry>
          <entry>P3DT4H5M6S</entry>
          <entry>P-1Y-2M3DT-4H-5M-6S</entry>
         </row>
        </tbody>
       </tgroup>
    </table>

   </sect2>

  </sect1>

  <sect1 id="datatype-boolean">
<!--
   <title>Boolean Type</title>
-->
<title>論理値データ型</title>

   <indexterm zone="datatype-boolean">
    <primary>Boolean</primary>
<!--
    <secondary>data type</secondary>
-->
    <secondary>データ型</secondary>
   </indexterm>

   <indexterm zone="datatype-boolean">
<!--
    <primary>true</primary>
-->
    <primary>真</primary>
   </indexterm>

   <indexterm zone="datatype-boolean">
<!--
    <primary>false</primary>
-->
    <primary>偽</primary>
   </indexterm>

   <para>
<!--
    <productname>PostgreSQL</productname> provides the
    standard <acronym>SQL</acronym> type <type>boolean</type>;
    see <xref linkend="datatype-boolean-table">.
    The <type>boolean</type> type can have several states:
    <quote>true</quote>, <quote>false</quote>, and a third state,
    <quote>unknown</quote>, which is represented by the
    <acronym>SQL</acronym> null value.
-->
<productname>PostgreSQL</productname>では、標準<acronym>SQL</acronym>の<type>boolean</type>型が提供されています。
<xref linkend="datatype-boolean-table">を参照してください。
<type>boolean</type>型はいくつかの状態を取ることができます。
<quote>真</quote>もしくは<quote>偽</quote>、そして第3の状態は<acronym>SQL</acronym>ではNULL値で表現される<quote>不明</quote>の状態です。
   </para>

   <table id="datatype-boolean-table">
<!--
    <title>Boolean Data Type</title>
-->
    <title>論理値データ型</title>
    <tgroup cols="3">
     <thead>
      <row>
<!--
       <entry>Name</entry>
       <entry>Storage Size</entry>
       <entry>Description</entry>
-->
       <entry>名前</entry>
       <entry>格納サイズ</entry>
       <entry>説明</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><type>boolean</type></entry>
<!--
       <entry>1 byte</entry>
       <entry>state of true or false</entry>
-->
       <entry>1バイト</entry>
       <entry>真または偽の状態</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    Valid literal values for the <quote>true</quote> state are:
-->
<quote>真</quote>状態に対する有効なリテラル値には次のものがあります。
    <simplelist>
     <member><literal>TRUE</literal></member>
     <member><literal>'t'</literal></member>
     <member><literal>'true'</literal></member>
     <member><literal>'y'</literal></member>
     <member><literal>'yes'</literal></member>
     <member><literal>'on'</literal></member>
     <member><literal>'1'</literal></member>
    </simplelist>
<!--
    For the <quote>false</quote> state, the following values can be
    used:
-->
<quote>偽</quote>状態に対する有効なリテラル値には次のものがあります。
    <simplelist>
     <member><literal>FALSE</literal></member>
     <member><literal>'f'</literal></member>
     <member><literal>'false'</literal></member>
     <member><literal>'n'</literal></member>
     <member><literal>'no'</literal></member>
     <member><literal>'off'</literal></member>
     <member><literal>'0'</literal></member>
    </simplelist>
<!--
    Leading or trailing whitespace is ignored, and case does not matter.
    The key words
    <literal>TRUE</literal> and <literal>FALSE</literal> are the preferred
    (<acronym>SQL</acronym>-compliant) usage.
-->
先頭または末尾の空白文字は無視され、大文字小文字の区別は関係ありません。
<literal>TRUE</literal>キーワードと<literal>FALSE</literal>キーワードは（<acronym>SQL</acronym>互換の）推奨の使用法です。
   </para>

   <para>
<!--
    <xref linkend="datatype-boolean-example"> shows that
    <type>boolean</type> values are output using the letters
    <literal>t</literal> and <literal>f</literal>.
-->
<xref linkend="datatype-boolean-example">は、<type>boolean</type>値の出力に<literal>t</literal>および<literal>f</literal>という文字が使用されることを示しています。
   </para>

   <example id="datatype-boolean-example">
<!--
    <title>Using the <type>boolean</type> Type</title>
-->
<title><type>boolean</type>型を使って</title>

<programlisting>
CREATE TABLE test1 (a boolean, b text);
INSERT INTO test1 VALUES (TRUE, 'sic est');
INSERT INTO test1 VALUES (FALSE, 'non est');
SELECT * FROM test1;
 a |    b
---+---------
 t | sic est
 f | non est

SELECT * FROM test1 WHERE a;
 a |    b
---+---------
 t | sic est
</programlisting>
   </example>

  </sect1>

  <sect1 id="datatype-enum">
<!--
   <title>Enumerated Types</title>
-->
   <title>列挙型</title>

   <indexterm zone="datatype-enum">
<!--
    <primary>data type</primary>
    <secondary>enumerated (enum)</secondary>
-->
    <primary>データ型</primary>
    <secondary>列挙（enum）</secondary>
   </indexterm>
   
   <indexterm zone="datatype-enum">
   <!--
    <primary>enumerated types</primary>
    -->
    <primary>列挙型</primary>
   </indexterm>

   <para>
<!--
    Enumerated (enum) types are data types that
    comprise a static, ordered set of values.
    They are equivalent to the <type>enum</type>
    types supported in a number of programming languages. An example of an enum
    type might be the days of the week, or a set of status values for
    a piece of data.
-->
列挙（enum）型は静的、順序付き集合から構成されるデータ型です。
これは、多くのプログラミング言語でサポートされている<type>enum</type>型と同じです。
列挙型の例として、曜日や個々のデータについての状態値の集合が挙げられます。
   </para>

   <sect2>
<!--
    <title>Declaration of Enumerated Types</title>
-->
    <title>列挙型の宣言</title>

    <para>
<!--
     Enum types are created using the <xref
     linkend="sql-createtype"> command,
     for example:
-->
列挙型は<xref linkend="sql-createtype">コマンドを使用して作成されます。
以下に例を示します。

<programlisting>
CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');
</programlisting>

<!--
     Once created, the enum type can be used in table and function
     definitions much like any other type:
-->
作成後、他のデータ型とほとんど同じように、列挙型をテーブルや関数定義で使用することができます。
<programlisting>
CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');
CREATE TABLE person (
    name text,
    current_mood mood
);
INSERT INTO person VALUES ('Moe', 'happy');
SELECT * FROM person WHERE current_mood = 'happy';
 name | current_mood 
------+--------------
 Moe  | happy
(1 row)
</programlisting>
    </para>
    </sect2>

    <sect2>
<!--
     <title>Ordering</title>
-->
     <title>順序</title>

     <para>
<!--
      The ordering of the values in an enum type is the
      order in which the values were listed when the type was created.
      All standard comparison operators and related
      aggregate functions are supported for enums.  For example:

-->
列挙型内の値の順序はその型が作成された時に値を列挙した順番になります。
列挙型に対して、すべての比較演算子と関連する集約関数がサポートされます。
以下に例を示します。
<programlisting>
INSERT INTO person VALUES ('Larry', 'sad');
INSERT INTO person VALUES ('Curly', 'ok');
SELECT * FROM person WHERE current_mood > 'sad';
 name  | current_mood 
-------+--------------
 Moe   | happy
 Curly | ok
(2 rows)

SELECT * FROM person WHERE current_mood > 'sad' ORDER BY current_mood;
 name  | current_mood 
-------+--------------
 Curly | ok
 Moe   | happy
(2 rows)

SELECT name
FROM person
WHERE current_mood = (SELECT MIN(current_mood) FROM person);
 name  
-------
 Larry
(1 row)
</programlisting>
     </para>
   </sect2>

   <sect2>
<!--
    <title>Type Safety</title>
-->
    <title>型の安全性</title>

    <para>
<!--
     Each enumerated data type is separate and cannot
     be compared with other enumerated types.  See this example:
-->
それぞれの列挙型データ型は別個のもので、他の列挙型と比較することはできません。
以下の例を参照してください。

<programlisting>
CREATE TYPE happiness AS ENUM ('happy', 'very happy', 'ecstatic');
CREATE TABLE holidays (
    num_weeks integer,
    happiness happiness
);
INSERT INTO holidays(num_weeks,happiness) VALUES (4, 'happy');
INSERT INTO holidays(num_weeks,happiness) VALUES (6, 'very happy');
INSERT INTO holidays(num_weeks,happiness) VALUES (8, 'ecstatic');
INSERT INTO holidays(num_weeks,happiness) VALUES (2, 'sad');
ERROR:  invalid input value for enum happiness: "sad"
SELECT person.name, holidays.num_weeks FROM person, holidays
  WHERE person.current_mood = holidays.happiness;
ERROR:  operator does not exist: mood = happiness
</programlisting>
    </para>

    <para>
<!--
     If you really need to do something like that, you can either
     write a custom operator or add explicit casts to your query:
-->
もし本当に上のようなことが必要ならば、独自の演算子を作成するか、問い合わせに明示的なキャストを付けることで行うことができます。

<programlisting>
SELECT person.name, holidays.num_weeks FROM person, holidays
  WHERE person.current_mood::text = holidays.happiness::text;
 name | num_weeks 
------+-----------
 Moe  |         4
(1 row)

</programlisting>
    </para>
   </sect2>

   <sect2>
<!--
    <title>Implementation Details</title>
-->
    <title>実装の詳細</title>

    <para>
<!--
     An enum value occupies four bytes on disk.  The length of an enum
     value's textual label is limited by the <symbol>NAMEDATALEN</symbol>
     setting compiled into <productname>PostgreSQL</productname>; in standard
     builds this means at most 63 bytes.
-->
列挙型の値はディスク上では4バイトを占めます。
列挙型の値のテキストラベルの長さは、<productname>PostgreSQL</productname>に組み込まれた<symbol>NAMEDATALEN</symbol>設定により制限されます。
標準の構築では、これは最大63バイトを意味します。
    </para>

    <para>
<!--
     Enum labels are case sensitive, so
     <type>'happy'</type> is not the same as <type>'HAPPY'</type>.
     White space in the labels is significant too.
-->
列挙型のラベルは大文字小文字を区別します。
このため<type>'happy'</type>は<type>'HAPPY'</type>と同じではありません。
ラベル内の空白文字も意味を持ちます。
    </para>

    <para>
    <!--
     The translations from internal enum values to textual labels are
     kept in the system catalog
     <link linkend="catalog-pg-enum"><structname>pg_enum</structname></link>.
     Querying this catalog directly can be useful.
     -->
列挙型の内部値からテキスト形式のラベルへの変換は、<link linkend="catalog-pg-enum"><structname>pg_enum</structname></link>システムカタログ内に保持されます。
このカタログを直接問い合わせることが役に立つ場合があります。
    </para>
    
   </sect2>
  </sect1>

  <sect1 id="datatype-geometric">
<!--
   <title>Geometric Types</title>
-->
<title>幾何データ型</title>

   <para>
<!--
    Geometric data types represent two-dimensional spatial
    objects. <xref linkend="datatype-geo-table"> shows the geometric
    types available in <productname>PostgreSQL</productname>.
-->
幾何データ型は2次元空間オブジェクトを表現します。
<xref linkend="datatype-geo-table">は、<productname>PostgreSQL</productname>で使用可能な幾何データ型を列挙したものです。
   </para>

    <table id="datatype-geo-table">
<!--
     <title>Geometric Types</title>
-->
<title>幾何データ型</title>
     <tgroup cols="4">
      <thead>
       <row>
<!--
        <entry>Name</entry>
        <entry>Storage Size</entry>
        <entry>Representation</entry>
        <entry>Description</entry>
-->
    <entry>型名</entry>
    <entry>格納サイズ</entry>
    <entry>表現</entry>
    <entry>説明</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><type>point</type></entry>
<!--
        <entry>16 bytes</entry>
        <entry>Point on a plane</entry>
-->
    <entry>16バイト</entry>
    <entry>平面における座標点</entry>
        <entry>(x,y)</entry>
       </row>
       <row>
        <entry><type>line</type></entry>
<!--
        <entry>32 bytes</entry>
         <entry>Infinite line</entry>
-->
    <entry>32バイト</entry>
    <entry>無限の直線</entry>
         <entry>((x1,y1),(x2,y2))</entry>
       </row>
       <row>
        <entry><type>lseg</type></entry>
<!--
        <entry>32 bytes</entry>
        <entry>Finite line segment</entry>
-->
    <entry>32バイト</entry>
    <entry>有限の線分</entry>
        <entry>((x1,y1),(x2,y2))</entry>
       </row>
       <row>
        <entry><type>box</type></entry>
<!--
        <entry>32 bytes</entry>
        <entry>Rectangular box</entry>
-->
    <entry>32バイト</entry>
    <entry>矩形</entry>
        <entry>((x1,y1),(x2,y2))</entry>
       </row>
       <row>
        <entry><type>path</type></entry>
<!--
        <entry>16+16n bytes</entry>
        <entry>Closed path (similar to polygon)</entry>
-->
    <entry>16+16nバイト</entry>
    <entry>閉経路（多角形に類似）</entry>
        <entry>((x1,y1),...)</entry>
       </row>
       <row>
        <entry><type>path</type></entry>
<!--
        <entry>16+16n bytes</entry>
        <entry>Open path</entry>
-->
    <entry>16+16nバイト</entry>
    <entry>開経路</entry>
        <entry>[(x1,y1),...]</entry>
       </row>
       <row>
        <entry><type>polygon</type></entry>
<!--
        <entry>40+16n bytes</entry>
        <entry>Polygon (similar to closed path)</entry>
-->
    <entry>40+16nバイト</entry>
    <entry>多角形（閉経路に類似）</entry>
        <entry>((x1,y1),...)</entry>
       </row>
       <row>
        <entry><type>circle</type></entry>
<!--
        <entry>24 bytes</entry>
        <entry>Circle</entry>
        <entry>&lt;(x,y),r&gt; (center point and radius)</entry>
-->
    <entry>24バイト</entry>
    <entry>円</entry>
    <entry>&lt;(x,y),r&gt;（中心と半径）</entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
<!--
    A rich set of functions and operators is available to perform various geometric
    operations such as scaling, translation, rotation, and determining
    intersections.  They are explained in <xref linkend="functions-geometry">.
-->
拡大縮小、変形、回転、交点の算出といった様々な幾何学的操作を行う関数と演算子の集合が豊富に揃っています。
このことについては<xref linkend="functions-geometry">に説明があります。
   </para>

   <sect2>
<!--
    <title>Points</title>
-->
    <title>座標点</title>

    <indexterm>
     <primary>point</primary>
    </indexterm>

    <para>
<!--
     Points are the fundamental two-dimensional building block for geometric
     types.  Values of type <type>point</type> are specified using either of
     the following syntaxes:
-->
座標点は幾何データ型の基礎となる2次元構成要素です。
<type>point</type>型の値は次の構文のいずれかで指定されます。

<synopsis>
( <replaceable>x</replaceable> , <replaceable>y</replaceable> )
  <replaceable>x</replaceable> , <replaceable>y</replaceable>
</synopsis>

<!--
     where <replaceable>x</> and <replaceable>y</> are the respective
     coordinates, as floating-point numbers.
-->
ここで<replaceable>x</>と<replaceable>y</>は、それぞれの座標を浮動小数点数数値で表したものです。
    </para>

    <para>
<!--
     Points are output using the first syntax.
-->
座標点は1番目の構文で出力されます。
    </para>
   </sect2>

   <sect2 id="datatype-line">
<!--    <title>Lines</title> -->
    <title>線</title>
    <indexterm>
     <primary>line</primary>
    </indexterm>

    <para>
<!--
     Lines are represented by the linear
     equation <replaceable>A</>x + <replaceable>B</>y + <replaceable>C</> = 0,
     where <replaceable>A</> and <replaceable>B</> are not both zero.  Values
     of type <type>line</type> are input and output in the following form:
-->
線は以下の式で表現されます。
等式　<replaceable>A</>x + <replaceable>B</>y + <replaceable>C</> = 0
<replaceable>A</> と <replaceable>B</>は共に0ではありません。
 <type>line</type>型の値は以下の書式で入出力されます。

<synopsis>
{ <replaceable>A</replaceable>, <replaceable>B</replaceable>, <replaceable>C</replaceable> }
</synopsis>
<!--
     Alternatively, any of the following forms can be used for input:
-->
入力のためには以下の書式を代替として使用することもできます。

<synopsis>
[ ( <replaceable>x1</replaceable> , <replaceable>y1</replaceable> ) , ( <replaceable>x2</replaceable> , <replaceable>y2</replaceable> ) ]
( ( <replaceable>x1</replaceable> , <replaceable>y1</replaceable> ) , ( <replaceable>x2</replaceable> , <replaceable>y2</replaceable> ) )
  ( <replaceable>x1</replaceable> , <replaceable>y1</replaceable> ) , ( <replaceable>x2</replaceable> , <replaceable>y2</replaceable> )
    <replaceable>x1</replaceable> , <replaceable>y1</replaceable>   ,   <replaceable>x2</replaceable> , <replaceable>y2</replaceable>
</synopsis>

<!--
     where
     <literal>(<replaceable>x1</replaceable>,<replaceable>y1</replaceable>)</literal>
     and
     <literal>(<replaceable>x2</replaceable>,<replaceable>y2</replaceable>)</literal>
     are two different points on the line.
-->
     <literal>(<replaceable>x1</replaceable>,<replaceable>y1</replaceable>)</literal>
と
     <literal>(<replaceable>x2</replaceable>,<replaceable>y2</replaceable>)</literal>

は1つの直線上の2つの異なる点です。
    </para>
   </sect2>

   <sect2 id="datatype-lseg">
<!--
    <title>Line Segments</title>
-->
    <title>線分</title>

    <indexterm>
     <primary>lseg</primary>
    </indexterm>

    <indexterm>
<!--
     <primary>line segment</primary>
-->
     <primary>線分</primary>
    </indexterm>

    <para>
<!--
     Line segments are represented by pairs of points that are the endpoints
     of the segment.  Values of type <type>lseg</type> are specified using any
     of the following syntaxes:
-->

線分は終点を示す2つの点の組み合わせで表現されます。
線分は以下の式で表すことができます。

<synopsis>
[ ( <replaceable>x1</replaceable> , <replaceable>y1</replaceable> ) , ( <replaceable>x2</replaceable> , <replaceable>y2</replaceable> ) ]
( ( <replaceable>x1</replaceable> , <replaceable>y1</replaceable> ) , ( <replaceable>x2</replaceable> , <replaceable>y2</replaceable> ) )
  ( <replaceable>x1</replaceable> , <replaceable>y1</replaceable> ) , ( <replaceable>x2</replaceable> , <replaceable>y2</replaceable> )
    <replaceable>x1</replaceable> , <replaceable>y1</replaceable>   ,   <replaceable>x2</replaceable> , <replaceable>y2</replaceable>
</synopsis>

<!--
     where
     <literal>(<replaceable>x1</replaceable>,<replaceable>y1</replaceable>)</literal>
     and
     <literal>(<replaceable>x2</replaceable>,<replaceable>y2</replaceable>)</literal>
     are the end points of the line segment.
-->
ここで、<literal>(<replaceable>x1</replaceable>,<replaceable>y1</replaceable>)</literal>と<literal>(<replaceable>x2</replaceable>,<replaceable>y2</replaceable>)</literal>は線分の終端点です。
    </para>

    <para>
<!--
     Line segments are output using the first syntax.
-->
線分は1番目の構文で出力されます。
    </para>
   </sect2>

   <sect2>
<!--
    <title>Boxes</title>
-->
<title>矩形</title>

    <indexterm>
<!--
     <primary>box (data type)</primary>
-->
     <primary>box（データ型）</primary>
    </indexterm>

    <indexterm>
<!--
     <primary>rectangle</primary>
-->
     <primary>矩形</primary>
    </indexterm>

    <para>
<!--
     Boxes are represented by pairs of points that are opposite
     corners of the box.
     Values of type <type>box</type> are specified using any of the following
     syntaxes:
-->
矩形は、矩形の対角線の両端の座標点の組み合わせで表されます。
<type>box</type>型の値は以下の構文のいずれかで指定されます。

<synopsis>
( ( <replaceable>x1</replaceable> , <replaceable>y1</replaceable> ) , ( <replaceable>x2</replaceable> , <replaceable>y2</replaceable> ) )
  ( <replaceable>x1</replaceable> , <replaceable>y1</replaceable> ) , ( <replaceable>x2</replaceable> , <replaceable>y2</replaceable> )
    <replaceable>x1</replaceable> , <replaceable>y1</replaceable>   ,   <replaceable>x2</replaceable> , <replaceable>y2</replaceable>
</synopsis>

<!--
     where
     <literal>(<replaceable>x1</replaceable>,<replaceable>y1</replaceable>)</literal>
     and
     <literal>(<replaceable>x2</replaceable>,<replaceable>y2</replaceable>)</literal>
     are any two opposite corners of the box.
-->
ここで<literal>(<replaceable>x1</replaceable>,<replaceable>y1</replaceable>)</literal>と<literal>(<replaceable>x2</replaceable>,<replaceable>y2</replaceable>)</literal>は矩形の対角線の両端です。
    </para>

    <para>
<!--
     Boxes are output using the second syntax.
-->
矩形は最初に示した構文で出力されます。
    </para>

    <para>
<!--
     Any two opposite corners can be supplied on input, but the values
     will be reordered as needed to store the
     upper right and lower left corners, in that order.
     -->
任意の対角頂点を入力として指定することができます。
しかし頂点は右上の頂点を最初に、左下の頂点をその後に格納するよう必要に応じて並べられます。
    </para>
   </sect2>

   <sect2>
<!--
    <title>Paths</title>
-->
    <title>経路</title>

    <indexterm>
<!--
     <primary>path (data type)</primary>
-->
     <primary>path（データ型）</primary>
    </indexterm>

    <para>
<!--
     Paths are represented by lists of connected points. Paths can be
     <firstterm>open</firstterm>, where
     the first and last points in the list are considered not connected, or
     <firstterm>closed</firstterm>,
     where the first and last points are considered connected.
-->
経路は接続している座標点のリストで表現されます。
経路は最初の座標点と最後の座標点が接続されていないとみなされる<firstterm>開いている</firstterm>状態か、最初の座標点と最後の座標点が接続されているとみなされる<firstterm>閉じた</firstterm>状態かのいずれかです。
    </para>

    <para>
<!--
     Values of type <type>path</type> are specified using any of the following
     syntaxes:
-->
<type>path</type>型の値は次の構文のいずれかで指定されます。

<synopsis>
[ ( <replaceable>x1</replaceable> , <replaceable>y1</replaceable> ) , ... , ( <replaceable>xn</replaceable> , <replaceable>yn</replaceable> ) ]
( ( <replaceable>x1</replaceable> , <replaceable>y1</replaceable> ) , ... , ( <replaceable>xn</replaceable> , <replaceable>yn</replaceable> ) )
  ( <replaceable>x1</replaceable> , <replaceable>y1</replaceable> ) , ... , ( <replaceable>xn</replaceable> , <replaceable>yn</replaceable> )
  ( <replaceable>x1</replaceable> , <replaceable>y1</replaceable>   , ... ,   <replaceable>xn</replaceable> , <replaceable>yn</replaceable> )
    <replaceable>x1</replaceable> , <replaceable>y1</replaceable>   , ... ,   <replaceable>xn</replaceable> , <replaceable>yn</replaceable>
</synopsis>

<!--
     where the points are the end points of the line segments
     comprising the path.  Square brackets (<literal>[]</>) indicate
     an open path, while parentheses (<literal>()</>) indicate a
     closed path.  When the outermost parentheses are omitted, as
     in the third through fifth syntaxes, a closed path is assumed.
-->
ここで、各座標点は、経路を構成する線分の終端点です。
大括弧（<literal>[]</>）は開経路を、括弧（<literal>()</>）は閉経路を示します。
3番目から4番目の構文のようにもっとも外側の括弧が省略された場合、閉経路と仮定されます。
    </para>

    <para>
<!--
     Paths are output using the first or second syntax, as appropriate.
-->
経路は最初または２番目の適切な構文で出力されます。
    </para>
   </sect2>

   <sect2 id="datatype-polygon">
<!--
    <title>Polygons</title>
-->
    <title>多角形(ポリゴン)</title>

    <indexterm>
     <primary>polygon</primary>
    </indexterm>

    <para>
<!--
     Polygons are represented by lists of points (the vertexes of the
     polygon). Polygons are very similar to closed paths, but are
     stored differently and have their own set of support routines.
-->
多角形は座標点（多角形の頂点）のリストで表現されます。
多角形は閉経路ととても良く似ていますが、異なった方式で格納されると同時にそれぞれ独自のサポート関数群を持っています。
    </para>

    <para>
<!--
     Values of type <type>polygon</type> are specified using any of the
     following syntaxes:
-->
<type>polygon</type>型の値は次の構文のいずれかで指定されます。

<synopsis>
( ( <replaceable>x1</replaceable> , <replaceable>y1</replaceable> ) , ... , ( <replaceable>xn</replaceable> , <replaceable>yn</replaceable> ) )
  ( <replaceable>x1</replaceable> , <replaceable>y1</replaceable> ) , ... , ( <replaceable>xn</replaceable> , <replaceable>yn</replaceable> )
  ( <replaceable>x1</replaceable> , <replaceable>y1</replaceable>   , ... ,   <replaceable>xn</replaceable> , <replaceable>yn</replaceable> )
    <replaceable>x1</replaceable> , <replaceable>y1</replaceable>   , ... ,   <replaceable>xn</replaceable> , <replaceable>yn</replaceable>
</synopsis>

<!--
     where the points are the end points of the line segments
     comprising the boundary of the polygon.
-->
各座標点は多角形の境界を構成する線分の終端点です。
    </para>

    <para>
<!--
     Polygons are output using the first syntax.
-->
多角形は最初の構文で出力されます。
    </para>
   </sect2>

   <sect2 id="datatype-circle">
<!--
    <title>Circles</title>
-->
    <title>円</title>

    <indexterm>
     <primary>circle</primary>
    </indexterm>

    <para>
<!--
     Circles are represented by a center point and radius.
     Values of type <type>circle</type> are specified using any of the
     following syntaxes:
-->
円は中心座標点と半径で表現されます。
<type>circle</type>型の値は次の構文のいずれかで指定されます。

<synopsis>
&lt; ( <replaceable>x</replaceable> , <replaceable>y</replaceable> ) , <replaceable>r</replaceable> &gt;
( ( <replaceable>x</replaceable> , <replaceable>y</replaceable> ) , <replaceable>r</replaceable> )
  ( <replaceable>x</replaceable> , <replaceable>y</replaceable> ) , <replaceable>r</replaceable>
    <replaceable>x</replaceable> , <replaceable>y</replaceable>   , <replaceable>r</replaceable>
</synopsis>

<!--
     where
     <literal>(<replaceable>x</replaceable>,<replaceable>y</replaceable>)</>
     is the center point and <replaceable>r</replaceable> is the radius of the
     circle.
-->
ここで<literal>(<replaceable>x</replaceable>,<replaceable>y</replaceable>)</>は円の中心点、<replaceable>r</replaceable>は円の半径です。
    </para>

    <para>
<!--
     Circles are output using the first syntax.
-->
円は最初の構文で出力されます。
    </para>
   </sect2>

  </sect1>

  <sect1 id="datatype-net-types">
<!--
   <title>Network Address Types</title>
-->
<title>ネットワークアドレス型</title>

   <indexterm zone="datatype-net-types">
<!--
    <primary>network</primary>
    <secondary>data types</secondary>
-->
    <primary>ネットワーク</primary>
    <secondary>データ型</secondary>
   </indexterm>

   <para>
<!--
    <productname>PostgreSQL</> offers data types to store IPv4, IPv6, and MAC
    addresses, as shown in <xref linkend="datatype-net-types-table">.  It
    is better to use these types instead of plain text types to store
    network addresses, because
    these types offer input error checking and specialized
    operators and functions (see <xref linkend="functions-net">).
-->
<productname>PostgreSQL</>は、<xref linkend="datatype-net-types-table">に示すように、IPv4アドレス、IPv6アドレス、MACアドレスを格納するデータ型を提供します。
ネットワークアドレスを格納するには普通のテキストデータ型の代わりにこれらの型を使うことの方が優れています。
なぜなら、これらのデータ型は入力値のエラー検査と専用の演算子と関数を提供しているからです
（<xref linkend="functions-net">を参照してください）。
   </para>

    <table tocentry="1" id="datatype-net-types-table">
<!--
     <title>Network Address Types</title>
-->
<title>ネットワークアドレスデータ型</title>
     <tgroup cols="3">
      <thead>
       <row>
<!--
        <entry>Name</entry>
        <entry>Storage Size</entry>
        <entry>Description</entry>
-->
    <entry>名前</entry>
    <entry>格納サイズ</entry>
    <entry>説明</entry>
       </row>
      </thead>
      <tbody>

       <row>
        <entry><type>cidr</type></entry>
<!--
        <entry>7 or 19 bytes</entry>
        <entry>IPv4 and IPv6 networks</entry>
-->
        <entry>7もしくは19バイト</entry>
        <entry>IPv4、およびIPv6ネットワーク</entry>
       </row>

       <row>
        <entry><type>inet</type></entry>
<!--
        <entry>7 or 19 bytes</entry>
        <entry>IPv4 and IPv6 hosts and networks</entry>
-->
        <entry>7もしくは19バイト</entry>
        <entry>IPv4もしくはIPv6ホスト、およびネットワーク</entry>
       </row>

       <row>
        <entry><type>macaddr</type></entry>
<!--
        <entry>6 bytes</entry>
        <entry>MAC addresses</entry>
-->
    <entry>6バイト</entry>
    <entry>MACアドレス</entry>
       </row>

      </tbody>
     </tgroup>
    </table>

   <para>
<!--
    When sorting <type>inet</type> or <type>cidr</type> data types,
    IPv4 addresses will always sort before IPv6 addresses, including
    IPv4 addresses encapsulated or mapped to IPv6 addresses, such as
    ::10.2.3.4 or ::ffff:10.4.3.2.
-->
<type>inet</type>もしくは<type>cidr</type>をソートする時、IPv4アドレスは常にIPv6よりも前にソートされます。
::10.2.3.4や::ffff:10.4.3.2などIPv6アドレス内に埋め込まれた、もしくは関連付けされたIPv4アドレスも同様です。
   </para>


   <sect2 id="datatype-inet">
    <title><type>inet</type></title>

    <indexterm>
<!--
     <primary>inet (data type)</primary>
-->
     <primary>inet（データ型）</primary>
    </indexterm>

    <para>
<!--
     The <type>inet</type> type holds an IPv4 or IPv6 host address, and
     optionally its subnet, all in one field.
     The subnet is represented by the number of network address bits
     present in the host address (the
     <quote>netmask</quote>).  If the netmask is 32 and the address is IPv4,
     then the value does not indicate a subnet, only a single host.
     In IPv6, the address length is 128 bits, so 128 bits specify a
     unique host address.  Note that if you
     want to accept only networks, you should use the
     <type>cidr</type> type rather than <type>inet</type>.
-->
<type>inet</type>型はIPv4もしくはIPv6ホストアドレスとオプションでそのサブネットを１つのフィールドに保持します。
サブネットはホストアドレスのうち何ビットがネットワークアドレス（<quote>ネットマスク</quote>）を表すかを指定することで表現されます。
もしネットマスクが32の場合、IPv4では単一ホストを意味し、サブネットを示しません。
IPv6ではアドレス長は128ビットです。
そのため128ビットが一意なホストアドレスを指定します。
ネットワークのみを使用したい場合は<type>inet</type>ではなく<type>cidr</type>型を利用してください。
    </para>

    <para>
<!--
      The input format for this type is
      <replaceable class="parameter">address/y</replaceable>
      where
      <replaceable class="parameter">address</replaceable>
      is an IPv4 or IPv6 address and
      <replaceable class="parameter">y</replaceable>
      is the number of bits in the netmask.  If the
      <replaceable class="parameter">/y</replaceable>
      portion is missing, the
      netmask is 32 for IPv4 and 128 for IPv6, so the value represents
      just a single host.  On display, the
      <replaceable class="parameter">/y</replaceable>
      portion is suppressed if the netmask specifies a single host.
-->
このデータ型に対する入力書式は、IPv4、IPv6両方とも<replaceable class="parameter">address/y</replaceable>です。
<replaceable class="parameter">y</replaceable>がネットマスクのビット数です。
もし<replaceable class="parameter">/y</replaceable>部分がない場合、ネットマスクはIPv4では32、IPv6では128となり、つまり、その値は単一ホストを表現します。
ネットマスクが単一ホストを表す場合、その表示時、<replaceable class="parameter">/y</replaceable>の部分は抑制されます。
    </para>
   </sect2>

   <sect2 id="datatype-cidr">
    <title><type>cidr</></title>

    <indexterm>
     <primary>cidr</primary>
    </indexterm>

    <para>
<!--
     The <type>cidr</type> type holds an IPv4 or IPv6 network specification.
     Input and output formats follow Classless Internet Domain Routing
     conventions.
     The format for specifying networks is <replaceable
     class="parameter">address/y</> where <replaceable
     class="parameter">address</> is the network represented as an
     IPv4 or IPv6 address, and <replaceable
     class="parameter">y</> is the number of bits in the netmask.  If
     <replaceable class="parameter">y</> is omitted, it is calculated
     using assumptions from the older classful network numbering system, except
     it will be at least large enough to include all of the octets
     written in the input.  It is an error to specify a network address
     that has bits set to the right of the specified netmask.
-->
<type>cidr</type>データ型はIPv4、IPv6ネットワーク仕様を保持します。
入出力書式はクラス分けのないインターネットドメインルーティング協定に従います。
ネットワークを指定する時の書式は<replaceable class="parameter">address/y</>で、<replaceable class="parameter">address</>がIPv4もしくはIPv6アドレスで表したネットワークです。
<replaceable class="parameter">y</>はネットマスクのビット数です。
もし<replaceable class="parameter">y</>が省略された場合には、入力時に書き込まれたオクテットすべてが含まれるように大きさが確保されること以外は、従来のクラス付きアドレス番号指定システムに従って計算されます。
指定したネットマスクの右側にビットをセットしたネットワークアドレスを指定するとエラーになります。
    </para>

    <para>
<!--
     <xref linkend="datatype-net-cidr-table"> shows some examples.
-->
     <xref linkend="datatype-net-cidr-table">に例をいくつか示します。
    </para>

     <table id="datatype-net-cidr-table">
<!--
      <title><type>cidr</> Type Input Examples</title>
-->
<title><type>cidr</>データ型入力例</title>
      <tgroup cols="3">
       <thead>
        <row>
<!--
         <entry><type>cidr</type> Input</entry>
         <entry><type>cidr</type> Output</entry>
-->
         <entry><type>cidr</type>入力</entry>
         <entry><type>cidr</type>出力</entry>
         <entry><literal><function>abbrev(<type>cidr</type>)</function></literal></entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>192.168.100.128/25</entry>
         <entry>192.168.100.128/25</entry>
         <entry>192.168.100.128/25</entry>
        </row>
        <row>
         <entry>192.168/24</entry>
         <entry>192.168.0.0/24</entry>
         <entry>192.168.0/24</entry>
        </row>
        <row>
         <entry>192.168/25</entry>
         <entry>192.168.0.0/25</entry>
         <entry>192.168.0.0/25</entry>
        </row>
        <row>
         <entry>192.168.1</entry>
         <entry>192.168.1.0/24</entry>
         <entry>192.168.1/24</entry>
        </row>
        <row>
         <entry>192.168</entry>
         <entry>192.168.0.0/24</entry>
         <entry>192.168.0/24</entry>
        </row>
        <row>
         <entry>128.1</entry>
         <entry>128.1.0.0/16</entry>
         <entry>128.1/16</entry>
        </row>
        <row>
         <entry>128</entry>
         <entry>128.0.0.0/16</entry>
         <entry>128.0/16</entry>
        </row>
        <row>
         <entry>128.1.2</entry>
         <entry>128.1.2.0/24</entry>
         <entry>128.1.2/24</entry>
        </row>
        <row>
         <entry>10.1.2</entry>
         <entry>10.1.2.0/24</entry>
         <entry>10.1.2/24</entry>
        </row>
        <row>
         <entry>10.1</entry>
         <entry>10.1.0.0/16</entry>
         <entry>10.1/16</entry>
        </row>
        <row>
         <entry>10</entry>
         <entry>10.0.0.0/8</entry>
         <entry>10/8</entry>
        </row>
        <row>
         <entry>10.1.2.3/32</entry>
         <entry>10.1.2.3/32</entry>
         <entry>10.1.2.3/32</entry>
        </row>
        <row>
         <entry>2001:4f8:3:ba::/64</entry>
         <entry>2001:4f8:3:ba::/64</entry>
         <entry>2001:4f8:3:ba::/64</entry>
        </row>
        <row>
         <entry>2001:4f8:3:ba:2e0:81ff:fe22:d1f1/128</entry>
         <entry>2001:4f8:3:ba:2e0:81ff:fe22:d1f1/128</entry>
         <entry>2001:4f8:3:ba:2e0:81ff:fe22:d1f1</entry>
        </row>
        <row>
         <entry>::ffff:1.2.3.0/120</entry>
         <entry>::ffff:1.2.3.0/120</entry>
         <entry>::ffff:1.2.3/120</entry>
        </row>
        <row>
         <entry>::ffff:1.2.3.0/128</entry>
         <entry>::ffff:1.2.3.0/128</entry>
         <entry>::ffff:1.2.3.0/128</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
   </sect2>

   <sect2 id="datatype-inet-vs-cidr">
<!--
    <title><type>inet</type> vs. <type>cidr</type></title>
-->
<title><type>inet</type>と<type>cidr</type>データ型の違い</title>

    <para>
<!--
    The essential difference between <type>inet</type> and <type>cidr</type>
    data types is that <type>inet</type> accepts values with nonzero bits to
    the right of the netmask, whereas <type>cidr</type> does not.
-->
<type>inet</type>データ型と<type>cidr</type>データ型との基本的な相違は、<type>inet</type>ではネットマスクの右側に0でないビット値を受け付けますが、<type>cidr</type>では受け付けないことです。
    </para>

      <tip>
        <para>
<!--
        If you do not like the output format for <type>inet</type> or
        <type>cidr</type> values, try the functions <function>host</>,
        <function>text</>, and <function>abbrev</>.
-->
もし<type>inet</type>もしくは<type>cidr</type>の値の出力書式が気に入らないのであれば、関数<function>host</>、<function>text</>および<function>abbrev</>を試してください。
        </para>
      </tip>
   </sect2>

   <sect2 id="datatype-macaddr">
    <title><type>macaddr</type></title>

    <indexterm>
<!--
     <primary>macaddr (data type)</primary>
-->
     <primary>macaddr（データ型）</primary>
    </indexterm>

    <indexterm>
<!--
     <primary>MAC address</primary>
-->
     <primary>MACアドレス</primary>
     <see>macaddr</see>
    </indexterm>

    <para>
<!--
     The <type>macaddr</> type stores MAC addresses, known for example
     from Ethernet card hardware addresses (although MAC addresses are
     used for other purposes as well).  Input is accepted in the
     following formats:
-->
<type>macaddr</>データ型は例えばイーサネットカードのハードウェアアドレスとして知られるMACアドレスを保持します（MACアドレスは他の目的でも使われますが）。
入力は以下の形式を受け入れます。

     <simplelist>
      <member><literal>'08:00:2b:01:02:03'</></member>
      <member><literal>'08-00-2b-01-02-03'</></member>
      <member><literal>'08002b:010203'</></member>
      <member><literal>'08002b-010203'</></member>
      <member><literal>'0800.2b01.0203'</></member>
      <member><literal>'08002b010203'</></member>
     </simplelist>

<!--
     These examples would all specify the same address.  Upper and
     lower case is accepted for the digits
     <literal>a</> through <literal>f</>.  Output is always in the
     first of the forms shown.
-->
これらの例はすべて同一のアドレスを指定します。
<literal>a</>から<literal>f</>までの桁は大文字小文字どちらでも構いません。
出力は常に最初に示された形式となります。
    </para>
    
    <para>
    <!--
     IEEE Std 802-2001 specifies the second shown form (with hyphens)
     as the canonical form for MAC addresses, and specifies the first
     form (with colons) as the bit-reversed notation, so that
     08-00-2b-01-02-03 = 01:00:4D:08:04:0C.  This convention is widely
     ignored nowadays, and it is relevant only for obsolete network
     protocols (such as Token Ring).  PostgreSQL makes no provisions
     for bit reversal, and all accepted formats use the canonical LSB
     order.
     -->
IEEE標準802-2001では、2番目の書式（ハイフンを使用）をMACアドレスの正規の表現と規定しています。
また、最初の書式（コロンを使用）をビット反転記法、つまり08-00-2b-01-02-03は01:00:4D:08:04:0Cであると規定しています。
この規約は現在ではほぼ無視され、古びたネットワーク（トークンリングなど）のみに関連するものです。
PostgreSQLではビット反転に関する準備をしていません。
また、すべての受付け可能な書式では正規のLSB順を使用します。
    </para>

    <para>
    <!--
     The remaining four input formats are not part of any standard.
     -->
残る４つの入力書式はどの標準にも属しません。
    </para>


   </sect2>

  </sect1>

  <sect1 id="datatype-bit">
<!--
   <title>Bit String Types</title>
-->
<title>ビット列データ型</title>

   <indexterm zone="datatype-bit">
<!--
    <primary>bit string</primary>
    <secondary>data type</secondary>
-->
<primary>ビット列</primary>
<secondary>データ型</secondary>
   </indexterm>

   <para>
<!--
    Bit strings are strings of 1's and 0's.  They can be used to store
    or visualize bit masks.  There are two SQL bit types:
    <type>bit(<replaceable>n</replaceable>)</type> and <type>bit
    varying(<replaceable>n</replaceable>)</type>, where
    <replaceable>n</replaceable> is a positive integer.
-->
ビット列とは1と0のビットが連続したものです。
ビットマスクを格納したり顕在化するために使用されます。
SQLのビット型には2つあります。
<type>bit(<replaceable>n</replaceable>)</type>と<type>bit varying(<replaceable>n</replaceable>)</type>です。
ここで<replaceable>n</replaceable>は正の整数です。
   </para>

   <para>
<!--
    <type>bit</type> type data must match the length
    <replaceable>n</replaceable> exactly; it is an error to attempt to
    store shorter or longer bit strings.  <type>bit varying</type> data is
    of variable length up to the maximum length
    <replaceable>n</replaceable>; longer strings will be rejected.
    Writing <type>bit</type> without a length is equivalent to
    <literal>bit(1)</literal>, while <type>bit varying</type> without a length
    specification means unlimited length.
-->
<type>bit</type>型のデータは厳密に<replaceable>n</replaceable>で表される長さに一致しなければなりません。
この長さより長いか短いビット列を格納しようとするとエラーになります。
<type>bit varying</type>型のデータは最大<replaceable>n</replaceable>までの可変長です。
最大長を越えるビット列は受け付けません。
長さ指定のない<type>bit</type>データ型は<literal>bit(1)</literal>データ型と同一で、長さ指定のない<type>bit varying</type>データ型は無限長を意味します。
   </para>

   <note>
    <para>
<!--
     If one explicitly casts a bit-string value to
     <type>bit(<replaceable>n</>)</type>, it will be truncated or
     zero-padded on the right to be exactly <replaceable>n</> bits,
     without raising an error.  Similarly,
     if one explicitly casts a bit-string value to
     <type>bit varying(<replaceable>n</>)</type>, it will be truncated
     on the right if it is more than <replaceable>n</> bits.
-->
ビット列の値を明示的に<type>bit(<replaceable>n</>)</type>にキャストすると、厳密に<replaceable>n</>ビットになるように、切り捨てられるか右側をゼロ詰めされ、エラーにはなりません。
同様に、ビット列の値を明示的に<type>bit varying(<replaceable>n</>)</type>にキャストすると、ビット数が<replaceable>n</>を超える場合は右側が切り捨てられます。 
    </para>
   </note>

   <para>
<!--
    Refer to <xref
    linkend="sql-syntax-bit-strings"> for information about the syntax
    of bit string constants.  Bit-logical operators and string
    manipulation functions are available; see <xref
    linkend="functions-bitstring">.
-->
ビット列定数に関する構文についての情報は<xref linkend="sql-syntax-bit-strings">を参照してください。
ビット論理演算子とビット列操作関数が用意されています。
<xref linkend="functions-bitstring">を参照してください。
   </para>

   <example>
<!--
    <title>Using the Bit String Types</title>
-->
<title>ビット列データ型を使って</title>

<programlisting>
CREATE TABLE test (a BIT(3), b BIT VARYING(5));
INSERT INTO test VALUES (B'101', B'00');
INSERT INTO test VALUES (B'10', B'101');
<computeroutput>
ERROR:  bit string length 2 does not match type bit(3)
</computeroutput>
INSERT INTO test VALUES (B'10'::bit(3), B'101');
SELECT * FROM test;
<computeroutput>
  a  |  b
-----+-----
 101 | 00
 100 | 101
</computeroutput>
</programlisting>
   </example>

   <para>
<!--
    A bit string value requires 1 byte for each group of 8 bits, plus
    5 or 8 bytes overhead depending on the length of the string
    (but long values may be compressed or moved out-of-line, as explained
    in <xref linkend="datatype-character"> for character strings).
-->
ビット列の値は8ビット毎に1バイト、さらにビット列長に応じた5または8バイトのオーバーヘッドが必要です。
（しかし、文字列に関する<xref linkend="datatype-character">の説明と同様、長い値は圧縮または行外に移動する可能性があります。）

   </para>
  </sect1>

  <sect1 id="datatype-textsearch">
<!--
   <title>Text Search Types</title>
-->
   <title>テキスト検索に関する型</title>

   <indexterm zone="datatype-textsearch">
<!--
    <primary>full text search</primary>
    <secondary>data types</secondary>
-->
    <primary>全文検索</primary>
    <secondary>データ型</secondary>
   </indexterm>

   <indexterm zone="datatype-textsearch">
<!--
    <primary>text search</primary>
    <secondary>data types</secondary>
-->
    <primary>テキスト検索</primary>
    <secondary>データ型</secondary>
   </indexterm>

   <para>
<!--
    <productname>PostgreSQL</productname> provides two data types that
    are designed to support full text search, which is the activity of
    searching through a collection of natural-language <firstterm>documents</>
    to locate those that best match a <firstterm>query</>.
    The <type>tsvector</type> type represents a document in a form optimized
    for text search; the <type>tsquery</type> type similarly represents
    a text query.
    <xref linkend="textsearch"> provides a detailed explanation of this
    facility, and <xref linkend="functions-textsearch"> summarizes the
    related functions and operators.
-->
<productname>PostgreSQL</productname>は、自然言語の<firstterm>文書</>の集合を通して検索を行い<firstterm>問い合わせ</>に最も合致する文書を見つける機能である全文検索をサポートするために設計された2つのデータ型を提供します。
<type>tsvector</type>型はテキスト検索に最適化された形式で文書を表現します。
<type>tsquery</type>型は同様に問い合わせを表現します。
<xref linkend="textsearch">ではこの機能を詳しく説明します。
また、<xref linkend="functions-textsearch">では、関連する関数や演算子を要約します。

   </para>

   <sect2 id="datatype-tsvector">
    <title><type>tsvector</type></title>

    <indexterm>
<!--
     <primary>tsvector (data type)</primary>
-->
     <primary>tsvector（データ型）</primary>
    </indexterm>

    <para>
<!--
     A <type>tsvector</type> value is a sorted list of distinct
     <firstterm>lexemes</>, which are words that have been
     <firstterm>normalized</> to merge different variants of the same word
     (see <xref linkend="textsearch"> for details).  Sorting and
     duplicate-elimination are done automatically during input, as shown in
     this example:
-->
<type>tsvector</type>の値は重複がない<firstterm>字句単位</>のソート済みリストです。
また、これらの単語は同じ単語の変種を吸収するために<firstterm>正規化</>が行われます（詳細は<xref linkend="textsearch">を参照）。
以下の例に示すようにソートと重複除去は入力の際に自動的になされます。

<programlisting>
SELECT 'a fat cat sat on a mat and ate a fat rat'::tsvector;
                      tsvector
----------------------------------------------------
 'a' 'and' 'ate' 'cat' 'fat' 'mat' 'on' 'rat' 'sat'
</programlisting>

<!--
     To represent
     lexemes containing whitespace or punctuation, surround them with quotes:
-->
空白文字または句読点を含む字句単位を表現するには、引用符でくくってください。

<programlisting>
SELECT $$the lexeme '    ' contains spaces$$::tsvector;
                 tsvector                  
-------------------------------------------
 '    ' 'contains' 'lexeme' 'spaces' 'the'
</programlisting>

<!--
     (We use dollar-quoted string literals in this example and the next one
     to avoid the confusion of having to double quote marks within the
     literals.)  Embedded quotes and backslashes must be doubled:
-->
（この例と次の例では、リテラル内の二重引用符記号が含まれることによる混乱を防ぐためにドル引用符付け文字列を使用します。）
引用符およびバックスラッシュが埋め込まれている場合は、以下のように二重にしなければなりません。

<programlisting>
SELECT $$the lexeme 'Joe''s' contains a quote$$::tsvector;
                    tsvector                    
------------------------------------------------
 'Joe''s' 'a' 'contains' 'lexeme' 'quote' 'the'
</programlisting>

<!--
     Optionally, integer <firstterm>positions</>
     can be attached to lexemes:
-->
オプションとして、字句要素に整数の<firstterm>位置</>を付けることもできます。

<programlisting>
SELECT 'a:1 fat:2 cat:3 sat:4 on:5 a:6 mat:7 and:8 ate:9 a:10 fat:11 rat:12'::tsvector;
                                  tsvector
-------------------------------------------------------------------------------
 'a':1,6,10 'and':8 'ate':9 'cat':3 'fat':2,11 'mat':7 'on':5 'rat':12 'sat':4
</programlisting>

<!-- 
     A position normally indicates the source word's location in the
     document.  Positional information can be used for
     <firstterm>proximity ranking</firstterm>.  Position values can
     range from 1 to 16383; larger numbers are silently set to 16383.
     Duplicate positions for the same lexeme are discarded.
-->
位置は通常、元の単語の文書中の位置を示します。
位置情報を<firstterm>近接順序</firstterm>に使用することができます。
位置の値は1から16383までで、これより大きな値は警告なく16383に設定されます。
同一字句要素に対する重複する位置項目は破棄されます。
    </para>

    <para>
<!--
     Lexemes that have positions can further be labeled with a
     <firstterm>weight</>, which can be <literal>A</literal>,
     <literal>B</literal>, <literal>C</literal>, or <literal>D</literal>.
     <literal>D</literal> is the default and hence is not shown on output:
-->
位置を持つ字句単位はさらに<firstterm>重み</>付きのラベルを付与することができます。
ラベルは<literal>A</literal>、<literal>B</literal>、<literal>C</literal>、<literal>D</literal>を取ることができます。
<literal>D</literal>はデフォルトですので、以下の結果には現れません。

<programlisting>
SELECT 'a:1A fat:2B,4C cat:5D'::tsvector;
          tsvector          
----------------------------
 'a':1A 'cat':5 'fat':2B,4C
</programlisting>

<!--
     Weights are typically used to reflect document structure, for example
     by marking title words differently from body words.  Text search
     ranking functions can assign different priorities to the different
     weight markers.
-->
典型的に重みは、例えば、表題の単語には本文の単語と異なる印をつけるといった、文書構造を反映させるために使用されます。
テキスト検索の順序付け関数は異なる重み印に異なる優先度を割り当てることができます。
    </para>

    <para>
<!--
     It is important to understand that the
     <type>tsvector</type> type itself does not perform any normalization;
     it assumes the words it is given are normalized appropriately
     for the application.  For example,
-->
<type>tsvector</type>型自体は正規化を行わないことを理解することは重要です。
与えられる単語はアプリケーションで適切に正規化されていると仮定しています。
以下に例を示します。

<programlisting>
select 'The Fat Rats'::tsvector;
      tsvector      
--------------------
 'Fat' 'Rats' 'The'
</programlisting>

<!--
     For most English-text-searching applications the above words would
     be considered non-normalized, but <type>tsvector</type> doesn't care.
     Raw document text should usually be passed through
     <function>to_tsvector</> to normalize the words appropriately
     for searching:
-->
ほとんどの英文テキスト検索アプリケーションでは、上の単語は正規化されていないとみなされますが、<type>tsvector</type>は気にしません。
検索が適切に行われるように単語を正規化するために、生の文書テキストは通常<function>to_tsvector</>経由で渡されます。

<programlisting>
SELECT to_tsvector('english', 'The Fat Rats');
   to_tsvector   
-----------------
 'fat':2 'rat':3
</programlisting>

<!--
     Again, see <xref linkend="textsearch"> for more detail.
-->
繰り返しますが、詳細は<xref linkend="textsearch">を参照してください。
    </para>

   </sect2>

   <sect2 id="datatype-tsquery">
    <title><type>tsquery</type></title>

    <indexterm>
<!--
     <primary>tsquery (data type)</primary>
-->
     <primary>tsquery（データ型)</primary>
    </indexterm>

    <para>
<!--
     A <type>tsquery</type> value stores lexemes that are to be
     searched for, and combines them honoring the Boolean operators
     <literal>&amp;</literal> (AND), <literal>|</literal> (OR), and
     <literal>!</> (NOT).  Parentheses can be used to enforce grouping
     of the operators:
-->
<type>tsquery</type>の値には検索される字句単位が格納され、それらは<literal>&amp;</literal> (論理積)、<literal>|</literal> (論理和)、<literal>!</>(否定)論理演算子を遵守することで組み合わせられます。
括弧を使用して演算子を強制的にグループ化することができます。

<programlisting>
SELECT 'fat &amp; rat'::tsquery;
    tsquery    
---------------
 'fat' &amp; 'rat'

SELECT 'fat &amp; (rat | cat)'::tsquery;
          tsquery          
---------------------------
 'fat' &amp; ( 'rat' | 'cat' )

SELECT 'fat &amp; rat &amp; ! cat'::tsquery;
        tsquery         
------------------------
 'fat' &amp; 'rat' &amp; !'cat'
</programlisting>

<!--
     In the absence of parentheses, <literal>!</> (NOT) binds most tightly,
     and <literal>&amp;</literal> (AND) binds more tightly than
     <literal>|</literal> (OR).
-->
括弧がないと、<literal>!</> (否定)が最も強く、次に<literal>&amp;</literal> (論理積)、そして<literal>|</literal> (論理和)という強さで結合されます。
    </para>

    <para>
<!--
     Optionally, lexemes in a <type>tsquery</type> can be labeled with
     one or more weight letters, which restricts them to match only
     <type>tsvector</> lexemes with matching weights:
-->
省略することもできますが、<type>tsquery</type>内の字句単位に1つ以上の重み文字をもったラベルを付けることができます。
これにより、こうした一致に関する重みの1つを持つ<type>tsvector</>字句要素のみに一致するように制限させることができます。

<programlisting>
SELECT 'fat:ab &amp; cat'::tsquery;
    tsquery
------------------
 'fat':AB &amp; 'cat'
</programlisting>
    </para>

    <para>
    <!--
     Also, lexemes in a <type>tsquery</type> can be labeled with <literal>*</>
     to specify prefix matching:
     -->
同時に、<type>tsquery</type>内の字句単位は、前方一致を指定するため<literal>*</>でラベルを付けることができます。
<programlisting>
SELECT 'super:*'::tsquery;
  tsquery  
-----------
 'super':*
</programlisting>
<!--
     This query will match any word in a <type>tsvector</> that begins
     with <quote>super</>.  Note that prefixes are first processed by
     text search configurations, which means this comparison returns
     true:
     -->
この問い合わせは、<quote>super</>で始まる<type>tsvector</>内のいかなる単語とも一致します。接頭語はテキスト検索の設定により、最初に処理されることに注意してください。これはこの比較が真を返すことを意味します。

<programlisting>
SELECT to_tsvector( 'postgraduate' ) @@ to_tsquery( 'postgres:*' );
 ?column? 
----------
 t
(1 row)
</programlisting>
<!--
     because <literal>postgres</> gets stemmed to <literal>postgr</>: 
-->
<literal>postgres</>が<literal>postgr</>という語幹になるためです。

<programlisting>
SELECT to_tsquery('postgres:*');
 to_tsquery 
------------
 'postgr':*
(1 row)
</programlisting>

<!--
     which then matches <literal>postgraduate</>.
-->
このため<literal>postgraduate</>に一致します。

    </para>

    <para>
<!--
     Quoting rules for lexemes are the same as described previously for
     lexemes in <type>tsvector</>; and, as with <type>tsvector</>,
     any required normalization of words must be done before converting
     to the <type>tsquery</> type.  The <function>to_tsquery</>
     function is convenient for performing such normalization:
-->
字句単位の引用符規則は前に説明した<type>tsvector</>における字句単位と同じです。
また、<type>tsvector</>同様、必要な単語の正規化は<type>tsquery</>型に変換する前に行う必要があります。
こうした正規化の実行には<function>to_tsquery</>関数が簡便です。

<programlisting>
SELECT to_tsquery('Fat:ab &amp; Cats');
    to_tsquery    
------------------
 'fat':AB &amp; 'cat'
</programlisting>
    </para>

   </sect2>

  </sect1>

  <sect1 id="datatype-uuid">
<!--
   <title><acronym>UUID</acronym> Type</title>
-->
   <title><acronym>UUID</acronym>型</title>

   <indexterm zone="datatype-uuid">
    <primary>UUID</primary>
   </indexterm>

   <para>
<!--
    The data type <type>uuid</type> stores Universally Unique Identifiers
    (UUID) as defined by RFC 4122, ISO/IEC 9834-8:2005, and related standards.
    (Some systems refer to this data type as a globally unique identifier, or
    GUID,<indexterm><primary>GUID</primary></indexterm> instead.)  This
    identifier is a 128-bit quantity that is generated by an algorithm chosen
    to make it very unlikely that the same identifier will be generated by
    anyone else in the known universe using the same algorithm.  Therefore,
    for distributed systems, these identifiers provide a better uniqueness
    guarantee than sequence generators, which
    are only unique within a single database.
-->
<type>uuid</type>データ型は、RFC 4122、ISO/IEC 9834-8:2005および関連する標準に従う、汎用一意識別子（UUID）を格納します。
（一部のシステムでは、このデータ型をグローバル一意識別子（GUID<indexterm><primary>GUID</primary></indexterm>）と呼んでいます。）
この識別子は、同一のアルゴリズムを使用しても既知の世界上の他の誰かが同一識別子が生成される可能性がほとんどないように選択されたアルゴリズムで生成された128ビット量の値です。
したがって、分散システムにおいて、これら識別子は、単一データベース内でしか一意にならないシーケンスジェネレータよりも優れた一意性保証を提供します。
   </para>

   <para>
<!--
    A UUID is written as a sequence of lower-case hexadecimal digits,
    in several groups separated by hyphens, specifically a group of 8
    digits followed by three groups of 4 digits followed by a group of
    12 digits, for a total of 32 digits representing the 128 bits.  An
    example of a UUID in this standard form is:
-->
UUIDは、小文字の16進数表記桁の並びをいくつかのグループでハイフンで区切って表現されます。
具体的には、8桁のグループが1つ、4桁のグループが3つ、次いで、12桁のグループが1つとなり、合計32桁で128ビットを表します。
この標準形式のUUIDの例を以下に示します。
<programlisting>
a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
</programlisting>
<!--
    <productname>PostgreSQL</productname> also accepts the following
    alternative forms for input:
    use of upper-case digits, the standard format surrounded by
    braces, omitting some or all hyphens, adding a hyphen after any
    group of four digits.  Examples are:
-->
また、<productname>PostgreSQL</productname>は入力として、大文字表記の桁、中括弧でくくった標準形式、いくつかまたはすべてのハイフンを省略したもの、４桁のすべてのグループにハイフンを付加した別形式も受け付けます。
以下に例を示します。
<programlisting>
A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11
{a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11}
a0eebc999c0b4ef8bb6d6bb9bd380a11
a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11
{a0eebc99-9c0b4ef8-bb6d6bb9-bd380a11}
</programlisting>
<!--
    Output is always in the standard form.
-->
出力は常に標準形式になります。
   </para>

   <para>
<!--
    <productname>PostgreSQL</productname> provides storage and comparison
    functions for UUIDs, but the core database does not include any
    function for generating UUIDs, because no single algorithm is well
    suited for every application.  The <xref
    linkend="uuid-ossp"> module
    provides functions that implement several standard algorithms.
    The <xref linkend="pgcrypto"> module also provides a generation
    function for random UUIDs.
    provides functions that implement several standard algorithms.
    Alternatively, UUIDs could be generated by client applications or
    other libraries invoked through a server-side function.
-->
<productname>PostgreSQL</productname>は、UUIDについて格納関数と比較関数を提供します。
しかし、すべてのアプリケーションで十分適切な単一アルゴリズムが存在しませんので、データベースの中核にはUUIDを生成する関数はまったく含んでいません。
<xref linkend="uuid-ossp"> モジュールは、複数の標準的なアルゴリズムを実装した関数を提供します。<xref linkend="pgcrypto">モジュールもまた、ランダムなUUIDを生成する関数を提供します。
この他にも、UUIDをクライアントアプリケーションで生成することも、サーバサイドで他のライブラリを呼び出して生成することもできます。
   </para>
  </sect1>

  <sect1 id="datatype-xml">
<!--
   <title><acronym>XML</> Type</title>
-->
   <title><acronym>XML</>型</title>

   <indexterm zone="datatype-xml">
    <primary>XML</primary>
   </indexterm>

   <para>
<!--
    The <type>xml</type> data type can be used to store XML data.  Its
    advantage over storing XML data in a <type>text</type> field is that it
    checks the input values for well-formedness, and there are support
    functions to perform type-safe operations on it; see <xref
    linkend="functions-xml">.  Use of this data type requires the
    installation to have been built with <command>configure
    &#045;&#045;with-libxml</>.
-->
<type>xml</type>データ型を使用して、XMLデータを格納することができます。
<type>text</type>型のフィールドにXMLデータを格納する方法より、入力された値が整形式かどうかを検査する利点があります。
また、型を安全に操作するサポート関数があります。
<xref linkend="functions-xml">を参照してください。
このデータ型を使用するためには、インストレーションが<command>configure --with-libxml</>で構築されていることが必要です。
   </para>

   <para>
<!--
    The <type>xml</type> type can store well-formed
    <quote>documents</quote>, as defined by the XML standard, as well
    as <quote>content</quote> fragments, which are defined by the
    production <literal>XMLDecl? content</literal> in the XML
    standard.  Roughly, this means that content fragments can have
    more than one top-level element or character node.  The expression
    <literal><replaceable>xmlvalue</replaceable> IS DOCUMENT</literal>
    can be used to evaluate whether a particular <type>xml</type>
    value is a full document or only a content fragment.
-->
<type>xml</type>型は、XML標準で定義された整形式の<quote>文書</quote>およびXML標準による<literal>XMLDecl? content</literal>生成規則で定義された<quote>コンテンツ</quote>フラグメントを格納することができます。
大雑把に言うと、これは、コンテンツフラグメントが1つ以上の最上位要素や文字ノードを持つことができることを意味します。
<literal><replaceable>xmlvalue</replaceable> IS DOCUMENT</literal>という式を使用して、特定の<type>xml</type>が完全な文書か単なるコンテンツフラグメントか評価することができます。
   </para>

   <sect2>
<!--
    <title>Creating XML Values</title>
-->
    <title>XML値の作成</title>
   <para>
<!--
    To produce a value of type <type>xml</type> from character data,
    use the function
    <function>xmlparse</function>:<indexterm><primary>xmlparse</primary></indexterm>
-->
文字データから<type>xml</type>型の値を生成するためには、<function>xmlparse</function>関数を使用してください。
<indexterm><primary>xmlparse</primary></indexterm>
<synopsis>
XMLPARSE ( { DOCUMENT | CONTENT } <replaceable>value</replaceable>)
</synopsis>
<!--
    Examples:
-->
例：
<programlisting><![CDATA[
XMLPARSE (DOCUMENT '<?xml version="1.0"?><book><title>Manual</title><chapter>...</chapter></book>')
XMLPARSE (CONTENT 'abc<foo>bar</foo><bar>foo</bar>')
]]></programlisting>
<!--
    While this is the only way to convert character strings into XML
    values according to the SQL standard, the PostgreSQL-specific
    syntaxes:
-->
標準SQLに従って文字列をXML値に変換するためにはこの方法しかありませんが、次のようなPostgreSQL固有の構文も使用することができます。
<programlisting><![CDATA[
xml '<foo>bar</foo>'
'<foo>bar</foo>'::xml
]]></programlisting>
<!--
    can also be used.
-->
   </para>

   <para>
<!--
    The <type>xml</type> type does not validate input values
    against a document type declaration
    (DTD),<indexterm><primary>DTD</primary></indexterm>
    even when the input value specifies a DTD.
    There is also currently no built-in support for validating against
    other XML schema languages such as XML Schema.
-->
<type>xml</type>型では文書型定義（DTD）に対して入力値を検証することは、入力値がDTDを指定していたとしても、行いません。
また同様に、現時点ではXML Schemaなどの他のXMLスキーマ言語に対する検証サポートも組み込まれていません。
   </para>

   <para>
<!--
    The inverse operation, producing a character string value from
    <type>xml</type>, uses the function
    <function>xmlserialize</function>:<indexterm><primary>xmlserialize</primary></indexterm>
-->
<type>xml</type>から文字列値を生成するという逆の操作では<function>xmlserialize</function>関数を使用してください。
<indexterm><primary>xmlserialize</primary></indexterm>
<synopsis>
XMLSERIALIZE ( { DOCUMENT | CONTENT } <replaceable>value</replaceable> AS <replaceable>type</replaceable> )
</synopsis>
<!--
    <replaceable>type</replaceable> can be
    <type>character</type>, <type>character varying</type>, or
    <type>text</type> (or an alias for one of those).  Again, according
    to the SQL standard, this is the only way to convert between type
    <type>xml</type> and character types, but PostgreSQL also allows
    you to simply cast the value.
-->
ここで、<replaceable>type</replaceable>は、<type>character</type>、<type>character varying</type>、<type>text</type>（またはこれらの別名）を取ることができます。
繰り返しになりますが、標準SQLに従って<type>xml</type>と文字列型間の変換を行うためにはこの方法しかありません。
PostgreSQLでは単に値をキャストすることが可能です。
   </para>

   <para>
<!--
    When a character string value is cast to or from type
    <type>xml</type> without going through <type>XMLPARSE</type> or
    <type>XMLSERIALIZE</type>, respectively, the choice of
    <literal>DOCUMENT</literal> versus <literal>CONTENT</literal> is
    determined by the <quote>XML option</quote>
    <indexterm><primary>XML option</primary></indexterm>
    session configuration parameter, which can be set using the
    standard command:
-->
<type>XMLPARSE</type>や<type>XMLSERIALIZE</type>を使わずに文字列値と<type>xml</type>との間をキャストした場合、<literal>DOCUMENT</literal>か<literal>CONTENT</literal>かという選択が<quote>XMLオプション</quote>セッション設定パラメータによって決定されます。
<indexterm><primary>XML option</primary></indexterm>
このパラメータは標準コマンド
<synopsis>
SET XML OPTION { DOCUMENT | CONTENT };
</synopsis>
<!--
    or the more PostgreSQL-like syntax
-->
または、よりPostgreSQLらしい構文
<synopsis>
SET xmloption TO { DOCUMENT | CONTENT };
</synopsis>
を使用して設定することができます。
<!--
    The default is <literal>CONTENT</literal>, so all forms of XML
    data are allowed.
-->
デフォルトは<literal>CONTENT</literal>ですので、すべての書式のXMLデータを扱うことができます。
   </para>

   <note>
    <para>
<!--
     With the default XML option setting, you cannot directly cast
     character strings to type <type>xml</type> if they contain a
     document type declaration, because the definition of XML content
     fragment does not accept them.  If you need to do that, either
     use <literal>XMLPARSE</literal> or change the XML option.
-->
デフォルトのXMLオプション設定では、文書型宣言を含む文字列を<type>xml</type>に直接キャストすることはできません。
XMLコンテンツフラグメントの定義が受け付けないためです。
この操作を行う必要がある場合、<literal>XMLPARSE</literal>を使用するかXMLオプションを変更してください。
    </para>
   </note>

   </sect2>

   <sect2>
<!--
    <title>Encoding Handling</title>
-->
    <title>符号化方式の取扱い</title>
   <para>
<!--
    Care must be taken when dealing with multiple character encodings
    on the client, server, and in the XML data passed through them.
    When using the text mode to pass queries to the server and query
    results to the client (which is the normal mode), PostgreSQL
    converts all character data passed between the client and the
    server and vice versa to the character encoding of the respective
    end; see <xref linkend="multibyte">.  This includes string
    representations of XML values, such as in the above examples.
    This would ordinarily mean that encoding declarations contained in
    XML data can become invalid as the character data is converted
    to other encodings while traveling between client and server,
    because the embedded encoding declaration is not changed.  To cope
    with this behavior, encoding declarations contained in
    character strings presented for input to the <type>xml</type> type
    are <emphasis>ignored</emphasis>, and content is assumed
    to be in the current server encoding.  Consequently, for correct
    processing, character strings of XML data must be sent
    from the client in the current client encoding.  It is the
    responsibility of the client to either convert documents to the
    current client encoding before sending them to the server, or to
    adjust the client encoding appropriately.  On output, values of
    type <type>xml</type> will not have an encoding declaration, and
    clients should assume all data is in the current client
    encoding.
-->
クライアント側、サーバ側、および、これらを経由してやり取りされるXMLデータ内部で複数の文字符号化方式を扱う場合には注意が必要です。
サーバへの問い合わせをテキストモードで渡す場合とクライアントへの問い合わせ結果をテキストモードで渡す場合（どちらも通常のモードです）、PostgreSQLは、クライアントからサーバ、サーバからクライアントでやり取りされるすべての文字データを受信側の文字符号化方式に変換します。
<xref linkend="multibyte">を参照してください。
これには上の例のようなXML値の文字列表現も含まれます。
これは通常、埋め込まれたencoding宣言は変更されずに、クライアント/サーバ間でやり取りされる間に文字データが他方の符号化方式に変換されてしまうので、XMLデータ内のencodingが無効になる可能性があることを意味します。
この動作に対処するため、<type>xml</type>型の入力として表現された文字列に含まれているencoding宣言は無視され、その内容は常にサーバの現在の符号化方式になっているものと仮定されます。
したがって、正しく処理するためには、XMLデータにおける文字列をクライアントの現在の符号化方式で送信しなければなりません。
サーバに送信する前に文書を現在のクライアントの符号化方式に変換するか、クライアントの符号化方式を適切に調節するかは、クライアントの責任です。
出力では<type>xml</type>型の値はencoding宣言を持ちません。
クライアントはすべてのデータが現在のクライアントの符号化方式であることを前提としなければなりません。
   </para>

   <para>
<!--
    When using binary mode to pass query parameters to the server
    and query results back to the client, no character set conversion
    is performed, so the situation is different.  In this case, an
    encoding declaration in the XML data will be observed, and if it
    is absent, the data will be assumed to be in UTF-8 (as required by
    the XML standard; note that PostgreSQL does not support UTF-16).
    On output, data will have an encoding declaration
    specifying the client encoding, unless the client encoding is
    UTF-8, in which case it will be omitted.
-->
バイナリモードを使用して、問い合わせパラメータをサーバに渡す場合、および、問い合わせ結果をクライアントに返す場合、文字セットの変換は行われません。
このため状況は異なります。
この場合、XMLデータ内のencoding宣言が認識され、もし存在しなければ、データがUTF-8であると仮定されます。
（XML標準の要求通りです。
PostgreSQLはUTF-16をサポートしていないことに注意してください。）
出力では、データはクライアントの符号化方式を指定したencoding宣言を持ちます。
ただし、もしクライアントの符号化方式がUTF-8の場合はencoding宣言は省略されます。
   </para>

   <para>
<!--
    Needless to say, processing XML data with PostgreSQL will be less
    error-prone and more efficient if the XML data encoding, client encoding,
    and server encoding are the same.  Since XML data is internally
    processed in UTF-8, computations will be most efficient if the
    server encoding is also UTF-8.
-->
言うまでもありませんが、PostgreSQLを使用したXML処理では、XMLデータの符号化方式、クライアントの符号化方式、サーバの符号化方式が同じ場合にエラーが起こりづらく、より効率的です。
XMLデータは内部的にUTF-8として処理されますので、サーバの符号化方式が同一のUTF-8である場合、最も効率が上がります。
   </para>
   
   <caution>
    <para>
    <!--
     Some XML-related functions may not work at all on non-ASCII data
     when the server encoding is not UTF-8.  This is known to be an
     issue for <function>xpath()</> in particular.
     -->
サーバ符号化方式がUTF-8でない場合、いくつかのXMLに関係した関数は非ASCIIデータに対して全く機能しないことがあります。
特に<function>xpath()</>に対する問題として知られています。
    </para>
   </caution>
   </sect2>

   <sect2>
<!--
   <title>Accessing XML Values</title>
-->
   <title>XML値へのアクセス</title>

   <para>
<!--
    The <type>xml</type> data type is unusual in that it does not
    provide any comparison operators.  This is because there is no
    well-defined and universally useful comparison algorithm for XML
    data.  One consequence of this is that you cannot retrieve rows by
    comparing an <type>xml</type> column against a search value.  XML
    values should therefore typically be accompanied by a separate key
    field such as an ID.  An alternative solution for comparing XML
    values is to convert them to character strings first, but note
    that character string comparison has little to do with a useful
    XML comparison method.
-->
<type>xml</type>データ型は通常と異なり、比較演算子をまったく提供しません。
これは、XMLデータに対し、よく定義され、誰にとっても有用な比較アルゴリズムが存在しないためです。
この結果、<type>xml</type>列を検索値と比べて行を取り出すことはできません。
したがって通常XML値には、IDなどの別のキーフィールドを一般的に付属させなければなりません。
XML値の比較を行うもうひとつの方法は、文字列に一度変換することです。
しかし、文字列比較は有用なXML比較方法といえないことに注意してください。
   </para>

   <para>
<!--
    Since there are no comparison operators for the <type>xml</type>
    data type, it is not possible to create an index directly on a
    column of this type.  If speedy searches in XML data are desired,
    possible workarounds include casting the expression to a
    character string type and indexing that, or indexing an XPath
    expression.  Of course, the actual query would have to be adjusted
    to search by the indexed expression.
-->
<type>xml</type>データ型用の比較演算子がありませんので、この型の列に直接インデックスを作成することはできません。
XMLデータを高速に検索することが望まれるなら、その表現を文字列型にキャストし、それをインデックス付けするか、または、XPath式をインデックス付けするかという対策をとることができます。
当然ながら、インデックス付けされた式で検索されるよう実際の問い合わせを調整する必要があります。
   </para>

   <para>
<!--
    The text-search functionality in PostgreSQL can also be used to speed
    up full-document searches of XML data.  The necessary
    preprocessing support is, however, not yet available in the PostgreSQL
    distribution.
-->
PostgreSQLのテキスト検索機能を使用して、XMLデータの全文検索速度をあげることもできます。
しかし、PostgreSQL配布物では必要な前処理を未だサポートしていません。
   </para>
   </sect2>
  </sect1>

  &json;

  &array;

  &rowtypes;

  &rangetypes;

  <sect1 id="datatype-oid">
<!--
   <title>Object Identifier Types</title>
-->
   <title>オブジェクト識別子データ型</title>

   <indexterm zone="datatype-oid">
<!--
    <primary>object identifier</primary>
    <secondary>data type</secondary>
-->
<primary>オブジェクト識別子</primary>
<secondary>データ型</secondary>
   </indexterm>

   <indexterm zone="datatype-oid">
    <primary>oid</primary>
   </indexterm>

   <indexterm zone="datatype-oid">
    <primary>regproc</primary>
   </indexterm>

   <indexterm zone="datatype-oid">
    <primary>regprocedure</primary>
   </indexterm>

   <indexterm zone="datatype-oid">
    <primary>regoper</primary>
   </indexterm>

   <indexterm zone="datatype-oid">
    <primary>regoperator</primary>
   </indexterm>

   <indexterm zone="datatype-oid">
    <primary>regclass</primary>
   </indexterm>

   <indexterm zone="datatype-oid">
    <primary>regtype</primary>
   </indexterm>

   <indexterm zone="datatype-oid">
    <primary>regconfig</primary>
   </indexterm>

   <indexterm zone="datatype-oid">
    <primary>regdictionary</primary>
   </indexterm>

   <indexterm zone="datatype-oid">
    <primary>xid</primary>
   </indexterm>

   <indexterm zone="datatype-oid">
    <primary>cid</primary>
   </indexterm>

   <indexterm zone="datatype-oid">
    <primary>tid</primary>
   </indexterm>

   <para>
<!--
    Object identifiers (OIDs) are used internally by
    <productname>PostgreSQL</productname> as primary keys for various
    system tables.  OIDs are not added to user-created tables, unless
    <literal>WITH OIDS</literal> is specified when the table is
    created, or the <xref linkend="guc-default-with-oids">
    configuration variable is enabled.  Type <type>oid</> represents
    an object identifier.  There are also several alias types for
    <type>oid</>: <type>regproc</>, <type>regprocedure</>,
    <type>regoper</>, <type>regoperator</>, <type>regclass</>,
    <type>regtype</>, <type>regconfig</>, and <type>regdictionary</>.
    <xref linkend="datatype-oid-table"> shows an overview.
-->
オブジェクト識別子（OID）は<productname>PostgreSQL</productname>の内部で様々なシステムテーブルのプライマリキーとして使用されます。
また、テーブル作成時に<literal>WITH OIDS</>が指定されているか、<xref linkend="guc-default-with-oids">設定変数が有効な場合を除き、ユーザ作成のテーブルにはOIDは追加されません。
<type>oid</>データ型はオブジェクト識別子を表します。
<type>oid</>には別名型もいくつかあります。 
<type>regproc</>、<type>regprocedure</>、<type>regoper</>、<type>regoperator</>、<type>regclass</>、<type>regtype</>、<type>regconfig</>および<type>regdictionary</>です。
<xref linkend="datatype-oid-table">に概要を示します。
   </para>

   <para>
<!--
    The <type>oid</> type is currently implemented as an unsigned
    four-byte integer.  Therefore, it is not large enough to provide
    database-wide uniqueness in large databases, or even in large
    individual tables.  So, using a user-created table's OID column as
    a primary key is discouraged.  OIDs are best used only for
    references to system tables.
-->
<type>oid</>データ型は現在、符号なし4バイト整数として実装されています。
これは、大規模なデータベース全体にわたって一意とするには十分ではありません。
大規模な個別のテーブル内においても十分ではないかもしれません。
そのため、ユーザ作成テーブルのOID列をプライマリキーとして使用するのはお勧めできません。
OIDの使用は、システムテーブルへの参照の場合にのみ推奨されます。
   </para>

   <para>
<!--
    The <type>oid</> type itself has few operations beyond comparison.
    It can be cast to integer, however, and then manipulated using the
    standard integer operators.  (Beware of possible
    signed-versus-unsigned confusion if you do this.)
-->
<type>oid</>データ型自体は、比較以外の演算はほとんど行いません。
しかし、整数としてキャストすることもでき、その場合標準の整数演算子を使用して操作することができます。
（これを行うと、符号付きと符号なしの間で混乱が起きかねないことに注意してください。）
   </para>

   <para>
<!--
    The OID alias types have no operations of their own except
    for specialized input and output routines.  These routines are able
    to accept and display symbolic names for system objects, rather than
    the raw numeric value that type <type>oid</> would use.  The alias
    types allow simplified lookup of OID values for objects.  For example,
    to examine the <structname>pg_attribute</> rows related to a table
    <literal>mytable</>, one could write:
-->
OIDの別名データ型は、専用の入出力ルーチン以外には演算を行いません。
これらのルーチンでは、<type>oid</>型が使用するような未加工の数値ではなく、システムオブジェクト用のシンボル名を受け入れたり表示したりできます。
別名データ型により、オブジェクトのOID値の検索が簡単になります。
例えば、<literal>mytable</>テーブルに関連した<structname>pg_attribute</>行を確認するには、以下のように記述することができます。
<programlisting>
SELECT * FROM pg_attribute WHERE attrelid = 'mytable'::regclass;
</programlisting>
<!--
    rather than:
-->
次のように記述する必要はありません。
<programlisting>
SELECT * FROM pg_attribute
  WHERE attrelid = (SELECT oid FROM pg_class WHERE relname = 'mytable');
</programlisting>
<!--
    While that doesn't look all that bad by itself, it's still oversimplified.
    A far more complicated sub-select would be needed to
    select the right OID if there are multiple tables named
    <literal>mytable</> in different schemas.
    The <type>regclass</> input converter handles the table lookup according
    to the schema path setting, and so it does the <quote>right thing</>
    automatically.  Similarly, casting a table's OID to
    <type>regclass</> is handy for symbolic display of a numeric OID.
-->
後者もそう悪くないように見えますが、これは過度に単純化されています。
異なるスキーマに<literal>mytable</>テーブルが複数ある場合には、正しいOIDを選択するために、より複雑な<command>SELECT</>が必要となります。
<type>regclass</>入力変換ではスキーマパスの設定に従ってテーブル検索を扱いますので、自動的に<quote>正しい検索</>を行います。
同様に、テーブルのOIDを<type>regclass</>にキャストすることは、数値のOIDのシンボル表示に便利です。
   </para>

    <table id="datatype-oid-table">
<!--
     <title>Object Identifier Types</title>
-->
     <title>オブジェクト識別子データ型</title>
     <tgroup cols="4">
      <thead>
       <row>
<!--
        <entry>Name</entry>
        <entry>References</entry>
        <entry>Description</entry>
        <entry>Value Example</entry>
-->
    <entry>型名</entry>
    <entry>参照</entry>
    <entry>説明</entry>
    <entry>値の例</entry>
       </row>
      </thead>

      <tbody>

       <row>
        <entry><type>oid</></entry>
<!--
        <entry>any</entry>
        <entry>numeric object identifier</entry>
-->
    <entry>すべて</entry>
    <entry>数値オブジェクト識別子</entry>
        <entry><literal>564182</></entry>
       </row>

       <row>
        <entry><type>regproc</></entry>
        <entry><structname>pg_proc</></entry>
<!--
        <entry>function name</entry>
-->
    <entry>関数名</entry>
        <entry><literal>sum</></entry>
       </row>

       <row>
        <entry><type>regprocedure</></entry>
        <entry><structname>pg_proc</></entry>
<!--
        <entry>function with argument types</entry>
-->
    <entry>引数の型を持つ関数</entry>
        <entry><literal>sum(int4)</></entry>
       </row>

       <row>
        <entry><type>regoper</></entry>
        <entry><structname>pg_operator</></entry>
<!--
        <entry>operator name</entry>
-->
    <entry>演算子名</entry>
        <entry><literal>+</></entry>
       </row>

       <row>
        <entry><type>regoperator</></entry>
        <entry><structname>pg_operator</></entry>
<!--
        <entry>operator with argument types</entry>
-->
    <entry>引数の型を持つ演算子</entry>
        <entry><literal>*(integer,integer)</> or <literal>-(NONE,integer)</></entry>
       </row>

       <row>
        <entry><type>regclass</></entry>
        <entry><structname>pg_class</></entry>
<!--
        <entry>relation name</entry>
-->
    <entry>リレーション名</entry>
        <entry><literal>pg_type</></entry>
       </row>

       <row>
        <entry><type>regtype</></entry>
        <entry><structname>pg_type</></entry>
<!--
        <entry>data type name</entry>
-->
    <entry>データ型名</entry>
        <entry><literal>integer</></entry>
       </row>

       <row>
        <entry><type>regconfig</></entry>
        <entry><structname>pg_ts_config</></entry>
<!--
        <entry>text search configuration</entry>
-->
        <entry>テキスト検索設定</entry>
        <entry><literal>english</></entry>
       </row>

       <row>
        <entry><type>regdictionary</></entry>
        <entry><structname>pg_ts_dict</></entry>
<!--
        <entry>text search dictionary</entry>
-->
        <entry>テキスト検索辞書</entry>
        <entry><literal>simple</></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
<!--
    All of the OID alias types accept schema-qualified names, and will
    display schema-qualified names on output if the object would not
    be found in the current search path without being qualified.
    The <type>regproc</> and <type>regoper</> alias types will only
    accept input names that are unique (not overloaded), so they are
    of limited use; for most uses <type>regprocedure</> or
    <type>regoperator</> are more appropriate.  For <type>regoperator</>,
    unary operators are identified by writing <literal>NONE</> for the unused
    operand.
-->
すべてのOID別名型はスキーマ修飾名を受け入れ、出力時にスキーマ修飾名を表示します。
ただし、現在の検索パスでオブジェクトが見つけられなければ、修飾せずに出力します。
<type>regproc</>と<type>regoper</>別名型は、一意な（オーバーロードしていない）名前のみを入力として受け入れるため、これらの使用には限度があります。
ほとんどの場合、<type>regprocedure</>または<type>regoperator</>を使用するのが適切です。
<type>regoperator</>の場合、単項演算子は未使用のオペランドを<literal>NONE</>と記述することによって指定されます。
   </para>

   <para>
<!--
    An additional property of the OID alias types is the creation of
    dependencies.  If a
    constant of one of these types appears in a stored expression
    (such as a column default expression or view), it creates a dependency
    on the referenced object.  For example, if a column has a default
    expression <literal>nextval('my_seq'::regclass)</>,
    <productname>PostgreSQL</productname>
    understands that the default expression depends on the sequence
    <literal>my_seq</>; the system will not let the sequence be dropped
    without first removing the default expression.
-->
OID別名型のさらなる属性は依存性の作成です。
これらの型の1つの定数が格納された式内に存在する場合（列のデフォルト式やビューなど）、参照されるオブジェクトへの依存性を生成します。
例えば、列が<literal>nextval('my_seq'::regclass)</>というデフォルト式を持つ場合、<productname>PostgreSQL</productname>はデフォルト式が<literal>my_seq</>シーケンスに依存することを理解します。
システムは先にこのデフォルト式が削除されない限り、このシーケンスを削除させません。
   </para>

   <para>
<!--
    Another identifier type used by the system is <type>xid</>, or transaction
    (abbreviated <abbrev>xact</>) identifier.  This is the data type of the system columns
    <structfield>xmin</> and <structfield>xmax</>.  Transaction identifiers are 32-bit quantities.
-->
システムが使用するもう1つの識別子の型は<type>xid</>、すなわちトランザクション（略して<abbrev>xact</>）識別子です。
これは<structfield>xmin</>システム列および<structfield>xmax</>システム列のデータ型です。
トランザクション識別子は32ビット長です。
   </para>

   <para>
<!--
    A third identifier type used by the system is <type>cid</>, or
    command identifier.  This is the data type of the system columns
    <structfield>cmin</> and <structfield>cmax</>. Command identifiers are also 32-bit quantities.
-->
システムが使用する3つ目の識別子は<type>cid</>、すなわちコマンド識別子です。
これは<structfield>cmin</>システム列および<structfield>cmax</>システム列のデータ型です。
コマンド識別子も32ビット長です。
   </para>

   <para>
<!--
    A final identifier type used by the system is <type>tid</>, or tuple
    identifier (row identifier).  This is the data type of the system column
    <structfield>ctid</>.  A tuple ID is a pair
    (block number, tuple index within block) that identifies the
    physical location of the row within its table.
-->
システムが使用する最後の識別子は<type>tid</>、すなわちタプル識別子（行識別子）です。
これは<structfield>ctid</>システム列のデータ型です。
タプルIDはテーブル内の行の物理的位置を識別するための組（ブロック番号、ブロック内のタプルインデックス）です。
   </para>

   <para>
<!--
    (The system columns are further explained in <xref
    linkend="ddl-system-columns">.)
-->
（システム列の詳細は<xref linkend="ddl-system-columns">で説明します。）
   </para>
  </sect1>
  <sect1 id="datatype-pg-lsn">
<!--
   <title><acronym>pg_lsn Type</acronym></title>
-->
   <title><acronym>pg_lsn 型</acronym></title>

   <indexterm zone="datatype-pg-lsn">
    <primary>pg_lsn</primary>
   </indexterm>

   <para>
<!--
    The <type>pg_lsn</type> data type can be used to store LSN (Log Sequence
    Number) data which is a pointer to a location in the XLOG. This type is a
    representation of <type>XLogRecPtr</type> and an internal system type of
    <productname>PostgreSQL</productname>.
-->
<type>pg_lsn</type>型はXLOGの位置を示すLSN((Log Sequence Number)データを格納するために使用します。
この型は<type>XLogRecPtr</type>を示す<productname>PostgreSQL</productname>の内部的なシステムの型です。
   </para>

   <para>
<!--
    Internally, an LSN is a 64-bit integer, representing a byte position in
    the write-ahead log stream.  It is printed as two hexadecimal numbers of
    up to 8 digits each, separated by a slash; for example,
    <literal>16/B374D848</>.  The <type>pg_lsn</type> type supports the
    standard comparison operators, like <literal>=</literal> and
    <literal>&gt;</literal>.  Two LSNs can be subtracted using the
    <literal>-</literal> operator; the result is the number of bytes separating
    those write-ahead log positions.
-->
内部的にはLSNは64bit整数型で、WALストリームのバイト位置を表現します。
LSNは例えば、<literal>16/B374D848</>のように２つのスラッシュで分けられた8桁の16進数で表示されます。
<type>pg_lsn</type>は例えば、<literal>=</literal>や<literal>&gt;</literal>などの標準の比較演算子をサポートしています。
2つのLSNは<literal>-</literal>演算子を使い引き算することも可能で、結果はこれらの2つのWALの位置のbytes差分です。
   </para>
  </sect1>


  <sect1 id="datatype-pseudo">
<!--
   <title>Pseudo-Types</title>
-->
   <title>疑似データ型</title>

   <indexterm zone="datatype-pseudo">
    <primary>record</primary>
   </indexterm>

   <indexterm zone="datatype-pseudo">
    <primary>any</primary>
   </indexterm>

   <indexterm zone="datatype-pseudo">
    <primary>anyelement</primary>
   </indexterm>

   <indexterm zone="datatype-pseudo">
    <primary>anyarray</primary>
   </indexterm>

   <indexterm zone="datatype-pseudo">
    <primary>anynonarray</primary>
   </indexterm>

   <indexterm zone="datatype-pseudo">
    <primary>anyenum</primary>
   </indexterm>

   <indexterm zone="datatype-pseudo">
    <primary>anyrange</primary>
   </indexterm>

   <indexterm zone="datatype-pseudo">
    <primary>void</primary>
   </indexterm>

   <indexterm zone="datatype-pseudo">
    <primary>trigger</primary>
   </indexterm>

   <indexterm zone="datatype-pseudo">
    <primary>language_handler</primary>
   </indexterm>

   <indexterm zone="datatype-pseudo">
    <primary>fdw_handler</primary>
   </indexterm>

   <indexterm zone="datatype-pseudo">
    <primary>cstring</primary>
   </indexterm>

   <indexterm zone="datatype-pseudo">
    <primary>internal</primary>
   </indexterm>

   <indexterm zone="datatype-pseudo">
    <primary>opaque</primary>
   </indexterm>

   <para>
<!--
    The <productname>PostgreSQL</productname> type system contains a
    number of special-purpose entries that are collectively called
    <firstterm>pseudo-types</>.  A pseudo-type cannot be used as a
    column data type, but it can be used to declare a function's
    argument or result type.  Each of the available pseudo-types is
    useful in situations where a function's behavior does not
    correspond to simply taking or returning a value of a specific
    <acronym>SQL</acronym> data type.  <xref
    linkend="datatype-pseudotypes-table"> lists the existing
    pseudo-types.
-->
<productname>PostgreSQL</productname>型システムには、<firstterm>疑似データ型</>と総称される特殊用途のエントリが多数含まれます。
疑似データ型は列データ型としては使用できませんが、関数の引数や結果データ型を宣言するために使用できます。
これらの使用可能な疑似データ型は、ある関数の振舞いが、特定の<acronym>SQL</acronym>データ型の値を単に取得したり返したりする操作に対応していない場合に便利です。
<xref linkend="datatype-pseudotypes-table">に既存の疑似データ型を列挙します。
   </para>

    <table id="datatype-pseudotypes-table">
<!--
     <title>Pseudo-Types</title>
-->
     <title>疑似データ型</title>
     <tgroup cols="2">
      <thead>
       <row>
<!--
        <entry>Name</entry>
        <entry>Description</entry>
-->
    <entry>型名</entry>
    <entry>説明</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><type>any</></entry>
<!--
        <entry>Indicates that a function accepts any input data type.</entry>
-->
    <entry>関数がどのような入力データ型でも受け入れることを示します。</entry>
       </row>

       <row>
        <entry><type>anyelement</></entry>
        <entry>
<!--
Indicates that a function accepts any data type
        (see <xref linkend="extend-types-polymorphic">).</entry>
-->
    関数がどのような入力データ型でも受け入れることを示します。
(参照　 <xref linkend="extend-types-polymorphic">)
</entry>
       </row>

       <row>
        <entry><type>anyarray</></entry>
<!--
        <entry>Indicates that a function accepts any array data type
        (see <xref linkend="extend-types-polymorphic">).</entry>
-->
    <entry>関数がどのような配列データ型でも受け入れることを示します
    （<xref linkend="extend-types-polymorphic">を参照してください）。
       </entry>
       </row>

       <row>
        <entry><type>anynonarray</></entry>
<!--
        <entry>Indicates that a function accepts any non-array data type
        (see <xref linkend="extend-types-polymorphic">).</entry>
-->
 <entry>
    関数がどのような非配列データ型でも受け入れることを示します
    （<xref linkend="extend-types-polymorphic">を参照してください）。
</entry>
       </row>


       <row>
        <entry><type>anyenum</></entry>
<!--
        <entry>Indicates that a function accepts any enum data type
        (see <xref linkend="extend-types-polymorphic"> and
        <xref linkend="datatype-enum">).</entry>
-->
        <entry>
関数が何らかの列挙データ型を受け付けることを示します（<xref linkend="extend-types-polymorphic">および<xref linkend="datatype-enum">を参照してください）。
        </entry>
       </row>

       <row>
        <entry><type>anyrange</></entry>
        <entry>
<!--
Indicates that a function accepts any range data type
        (see <xref linkend="extend-types-polymorphic"> and
        <xref linkend="rangetypes">).</entry>

-->
ファンクションが範囲データ型を受け付けることを示します(<xref linkend="extend-types-polymorphic"> と <xref linkend="rangetypes">を参照してください)。
</entry>
       </row>


       <row>
        <entry><type>cstring</></entry>
<!--
        <entry>Indicates that a function accepts or returns a null-terminated C string.</entry>
-->
        <entry>関数がヌル終端のC文字列を受け入れる、もしくは返すことを示します。</entry>
       </row>

       <row>
        <entry><type>internal</></entry>
<!--
        <entry>Indicates that a function accepts or returns a server-internal
        data type.</entry>
-->
        <entry>関数がサーバ内部用データ型を受け入れる、もしくは返すことを示します。
        </entry>
       </row>

       <row>
        <entry><type>language_handler</></entry>
<!--
        <entry>A procedural language call handler is declared to return <type>language_handler</>.</entry>
-->
        <entry>
手続き言語呼び出しハンドラは<type>language_handler</>を返すものとして宣言されます。
        </entry>
       </row>

       <row>
        <entry><type>fdw_handler</></entry>
<!--
        <entry>A foreign-data wrapper handler is declared to return <type>fdw_handler</>.</entry>
-->
        <entry>
外部データラッパは <type>fdw_handler</>を返すものとして宣言されます。
       </entry>
       </row>

       <row>
        <entry><type>record</></entry>
<!--
        <entry>Identifies a function returning an unspecified row type.</entry>
-->
    <entry>未指定の行型を返す関数を指定します。</entry>
       </row>

       <row>
        <entry><type>trigger</></entry>
<!--
        <entry>A trigger function is declared to return <type>trigger.</></entry>
-->
        <entry>トリガ関数は<type>trigger</>を返すものとして宣言されます。
        </entry>
       </row>

       <row>
        <entry><type>void</></entry>
<!--
        <entry>Indicates that a function returns no value.</entry>
-->
        <entry>関数が値を返さないことを示します。
        </entry>
       </row>

       <row>
        <entry><type>opaque</></entry>
<!--
        <entry>An obsolete type name that formerly served all the above purposes.</entry>
-->
        <entry>
過去に上記の目的すべてを果たしていた古いデータ型の名前です。
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
<!--
    Functions coded in C (whether built-in or dynamically loaded) can be
    declared to accept or return any of these pseudo data types.  It is up to
    the function author to ensure that the function will behave safely
    when a pseudo-type is used as an argument type.
-->
C言語で作成された関数（それが組み込みか動的にロードされるかに関係なく）は、これらの疑似データ型のどれでも受け入れたり返したりするように宣言することができます。  
引数型として疑似データ型が使用されても関数が安全に機能するように、関数の作成時に気を付ける必要があります。
   </para>

   <para>
<!--
    Functions coded in procedural languages can use pseudo-types only as
    allowed by their implementation languages.  At present the procedural
    languages all forbid use of a pseudo-type as argument type, and allow
    only <type>void</> and <type>record</> as a result type (plus
    <type>trigger</> when the function is used as a trigger).  Some also
    support polymorphic functions using the types <type>anyelement</>,
    <type>anyarray</>, <type>anynonarray</>, <type>anyenum</>, and
    <type>anyrange</>.
-->
手続き型言語で作成された関数では、実装する言語によって許可された疑似データ型のみを使用できます。
現在、すべての手続き型言語では疑似データ型を引数型として使用することが原則として禁止されており、結果型としての<type>void</>と<type>record</>（および関数がトリガとして使用される場合の<type>trigger</>）のみが許可されています。
また、<type>anyelement</>、<type>anyarray</>、<type>anynonarray</>、<type>anyenum</>および<type>anyrange</>型を使用する多様性関数をサポートするものもあります。
   </para>

   <para>
<!--
    The <type>internal</> pseudo-type is used to declare functions
    that are meant only to be called internally by the database
    system, and not by direct invocation in an <acronym>SQL</acronym>
    query.  If a function has at least one <type>internal</>-type
    argument then it cannot be called from <acronym>SQL</acronym>.  To
    preserve the type safety of this restriction it is important to
    follow this coding rule: do not create any function that is
    declared to return <type>internal</> unless it has at least one
    <type>internal</> argument.
-->
<type>internal</>疑似データ型は、データベースシステムによって内部的にのみ呼び出される関数を宣言する場合に使用され、<acronym>SQL</acronym>問い合わせでの直接呼び出しには使用できません。  
関数に少なくとも1つの<type>internal</>型の引数があると、これを<acronym>SQL</acronym>から呼び出すことはできません。
この制限の影響からデータ型の安全性を保持するためには、次のコーディング規則に従うことが重要です。
<type>internal</>引数が少なくとも1つある場合を除き、<type>internal</>を返すと宣言される関数を作成すべきではありません。
   </para>

  </sect1>


 </chapter>
