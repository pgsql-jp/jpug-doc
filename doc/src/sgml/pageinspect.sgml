<!-- doc/src/sgml/pageinspect.sgml -->

<sect1 id="pageinspect" xreflabel="pageinspect">
 <title>pageinspect</title>

 <indexterm zone="pageinspect">
  <primary>pageinspect</primary>
 </indexterm>

 <para>
<!--
  The <filename>pageinspect</> module provides functions that allow you to
  inspect the contents of database pages at a low level, which is useful for
  debugging purposes.  All of these functions may be used only by superusers.
-->
<filename>pageinspect</>モジュールは、デバッグの際に有用となる低レベルなデータベースページの内容を調べることができる関数を提供します。
これらの関数はすべて、スーパーユーザのみが使用することができます。
 </para>

 <sect2>
<!--
  <title>Functions</title>
-->
  <title>関数</title>

  <variablelist>
   <varlistentry>
    <term>
     <function>get_raw_page(relname text, fork text, blkno int) returns bytea</function>
     <indexterm>
      <primary>get_raw_page</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
<!--
      <function>get_raw_page</function> reads the specified block of the named
      relation and returns a copy as a <type>bytea</> value.  This allows a
      single time-consistent copy of the block to be obtained.
      <replaceable>fork</replaceable> should be <literal>'main'</literal> for
      the main data fork, <literal>'fsm'</literal> for the free space map,
      <literal>'vm'</literal> for the visibility map, or <literal>'init'</literal>
      for the initialization fork.
-->
<function>get_raw_page</function>は、指定されたリレーションの指定されたブロックを読み取り、<type>bytea</>値としてそのコピーを返します。
これにより、単一ブロックの時間的に一貫性を持つコピーを入手することができます。
<replaceable>fork</replaceable>は、主データフォークでは<literal>'main'</literal>、空き領域マップでは<literal>'fsm'</literal>、可視性マップでは<literal>'vm'</literal>、初期化フォークでは<literal>'init'</literal>としなければなりません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>get_raw_page(relname text, blkno int) returns bytea</function>
    </term>

    <listitem>
     <para>
<!--
      A shorthand version of <function>get_raw_page</function>, for reading
      from the main fork.  Equivalent to
      <literal>get_raw_page(relname, 'main', blkno)</literal>
-->
<function>get_raw_page</function>の簡略形であり、主フォークから読み取ります。
<literal>get_raw_page(relname, 'main', blkno)</literal>と同じです。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>page_header(page bytea) returns record</function>
     <indexterm>
      <primary>page_header</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
<!--
      <function>page_header</function> shows fields that are common to all
      <productname>PostgreSQL</> heap and index pages.
-->
<function>page_header</function>は、すべての<productname>PostgreSQL</>ヒープとインデックスページで共通するフィールドを表示します。
     </para>

     <para>
<!--
      A page image obtained with <function>get_raw_page</function> should be
      passed as argument.  For example:
-->
<function>get_raw_page</function>で得られたページイメージを引数として渡さなければなりません。
以下に例を示します。
<screen>
test=# SELECT * FROM page_header(get_raw_page('pg_class', 0));
    lsn    | checksum | flags  | lower | upper | special | pagesize | version | prune_xid
-----------+----------+--------+-------+-------+---------+----------+---------+-----------
 0/24A1B50 |        1 |      1 |   232 |   368 |    8192 |     8192 |       4 |         0
</screen>
<!--
      The returned columns correspond to the fields in the
      <structname>PageHeaderData</> struct.
      See <filename>src/include/storage/bufpage.h</> for details.
-->
返却される列は、<structname>PageHeaderData</>構造体のフィールドに対応します。
詳細は<filename>src/include/storage/bufpage.h</>を参照してください。
    </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>heap_page_items(page bytea) returns setof record</function>
     <indexterm>
      <primary>heap_page_items</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
<!--
      <function>heap_page_items</function> shows all line pointers on a heap
      page.  For those line pointers that are in use, tuple headers as well
      as tuple raw data are also shown. All tuples are shown, whether or not
      the tuples were visible to an MVCC snapshot at the time the raw page
      was copied.
-->
<function>heap_page_items</function>はヒープページ上の行ポインタをすべて表示します。
使用中の行ポインタでは、タプルヘッダも表示されます。★
生ページがコピーされた時点のMVCCスナップショットでタプルが可視かどうかは関係なく、すべてのタプルが表示されます。
     </para>
     <para>
<!--
      A heap page image obtained with <function>get_raw_page</function> should
      be passed as argument.  For example:
-->
<function>get_raw_page</function>で得られたヒープページイメージを引数として渡さなければなりません。
以下に例を示します。
<screen>
test=# SELECT * FROM heap_page_items(get_raw_page('pg_class', 0));
</screen>
<!--
      See <filename>src/include/storage/itemid.h</> and
      <filename>src/include/access/htup_details.h</> for explanations of the fields
      returned.
-->
返却されるフィールドの説明については、<filename>src/include/storage/itemid.h</>および<filename>src/include/access/htup_details.h</>を参照してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>tuple_data_split(rel_oid, t_data bytea, t_infomask integer, t_infomask2 integer, t_bits text [, do_detoast bool]) returns bytea[]</function>
     <indexterm>
      <primary>tuple_data_split</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
<!--
      <function>tuple_data_split</function> splits tuple data into attributes
      in the same way as backend internals.
-->
★    <function>tuple_data_split</function> splits tuple data into attributes
      in the same way as backend internals.
<screen>
test=# SELECT tuple_data_split('pg_class'::regclass, t_data, t_infomask, t_infomask2, t_bits) FROM heap_page_items(get_raw_page('pg_class', 0));
</screen>
<!--
      This function should be called with the same arguments as the return
      attributes of <function>heap_page_items</function>.
-->
★    This function should be called with the same arguments as the return
      attributes of <function>heap_page_items</function>.
     </para>
     <para>
<!--
      If <parameter>do_detoast</parameter> is <literal>true</literal>,
      attribute that will be detoasted as needed. Default value is
      <literal>false</literal>.
-->
★    If <parameter>do_detoast</parameter> is <literal>true</literal>,
      attribute that will be detoasted as needed. Default value is
      <literal>false</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>heap_page_item_attrs(rel_oid, t_data bytea, [, do_detoast bool]) returns bytea[]</function>
     <indexterm>
      <primary>heap_page_item_attrs</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
<!--
      <function>heap_page_item_attrs</function> is equivalent to
      <function>heap_page_items</function> except that it returns
      tuple raw data as an array of attributes that can optionally
      be detoasted by <parameter>do_detoast</parameter> which is
      <literal>false</literal> by default.
-->
★    <function>heap_page_item_attrs</function> is equivalent to
      <function>heap_page_items</function> except that it returns
      tuple raw data as an array of attributes that can optionally
      be detoasted by <parameter>do_detoast</parameter> which is
      <literal>false</literal> by default.
     </para>
     <para>
<!--
      A heap page image obtained with <function>get_raw_page</function> should
      be passed as argument.  For example:
-->
★    A heap page image obtained with <function>get_raw_page</function> should
      be passed as argument.  For example:
<screen>
test=# SELECT * FROM heap_page_item_attrs(get_raw_page('pg_class', 0), 'pg_class'::regclass);
</screen>
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term>
     <function>bt_metap(relname text) returns record</function>
     <indexterm>
      <primary>bt_metap</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
<!--
      <function>bt_metap</function> returns information about a B-tree
      index's metapage.  For example:
-->
<function>bt_metap</function>はB-treeインデックスのメタページに関する情報を返却します。
以下に例を示します。
<screen>
test=# SELECT * FROM bt_metap('pg_cast_oid_index');
-[ RECORD 1 ]-----
magic     | 340322
version   | 2
root      | 1
level     | 0
fastroot  | 1
fastlevel | 0
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>bt_page_stats(relname text, blkno int) returns record</function>
     <indexterm>
      <primary>bt_page_stats</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
<!--
      <function>bt_page_stats</function> returns summary information about
      single pages of B-tree indexes.  For example:
-->
<function>bt_page_stats</function>は、B-treeインデックスの個別のページについての要約情報を返却します。
以下に例を示します。
<screen>
test=# SELECT * FROM bt_page_stats('pg_cast_oid_index', 1);
-[ RECORD 1 ]-+-----
blkno         | 1
type          | l
live_items    | 256
dead_items    | 0
avg_item_size | 12
page_size     | 8192
free_size     | 4056
btpo_prev     | 0
btpo_next     | 0
btpo          | 0
btpo_flags    | 3
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>bt_page_items(relname text, blkno int) returns setof record</function>
     <indexterm>
      <primary>bt_page_items</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
<!--
      <function>bt_page_items</function> returns detailed information about
      all of the items on a B-tree index page.  For example:
-->
<function>bt_page_items</function>は、B-treeインデックスページ上の全項目についての詳細情報を返却します。
以下に例を示します。
<screen>
test=# SELECT * FROM bt_page_items('pg_cast_oid_index', 1);
 itemoffset |  ctid   | itemlen | nulls | vars |    data
------------+---------+---------+-------+------+-------------
          1 | (0,1)   |      12 | f     | f    | 23 27 00 00
          2 | (0,2)   |      12 | f     | f    | 24 27 00 00
          3 | (0,3)   |      12 | f     | f    | 25 27 00 00
          4 | (0,4)   |      12 | f     | f    | 26 27 00 00
          5 | (0,5)   |      12 | f     | f    | 27 27 00 00
          6 | (0,6)   |      12 | f     | f    | 28 27 00 00
          7 | (0,7)   |      12 | f     | f    | 29 27 00 00
          8 | (0,8)   |      12 | f     | f    | 2a 27 00 00
</screen>
<!--
      In a B-tree leaf page, <structfield>ctid</> points to a heap tuple.
      In an internal page, the block number part of <structfield>ctid</>
      points to another page in the index itself, while the offset part
      (the second number) is ignored and is usually 1.
-->
Bツリーのリーフページでは、<structfield>ctid</>はヒープタプルを指します。
中間のページでは、<structfield>ctid</>のブロック番号部分はインデックス自体の中の他のページを指しますが、オフセット部分（2番目の数）は無視され、通常は1になっています。
     </para>
     <para>
<!--
      Note that the first item on any non-rightmost page (any page with
      a non-zero value in the <structfield>btpo_next</> field) is the
      page's <quote>high key</quote>, meaning its <structfield>data</>
      serves as an upper bound on all items appearing on the page, while
      its <structfield>ctid</> field is meaningless.  Also, on non-leaf
      pages, the first real data item (the first item that is not a high
      key) is a <quote>minus infinity</quote> item, with no actual value
      in its <structfield>data</> field.  Such an item does have a valid
      downlink in its <structfield>ctid</> field, however.
-->
最も右側でないすべてのページ（<structfield>btpo_next</>フィールドの値が0でないページ）において、最初の項目は<quote>高いキー</quote>、つまりそのページに現れるすべての項目の上限となる<structfield>data</>になりますが、一方でその<structfield>ctid</>フィールドには意味がありません。
また、リーフでないページにおいて最初の実データ項目（高いキーでない最初の項目）は、その<structfield>data</>フィールドに実際の値が入っていない<quote>マイナス無限大</quote>の項目になります。
しかし、そのような項目でも、その<structfield>ctid</>フィールドには有効な下方リンクが入っています。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>brin_page_type(page bytea) returns text</function>
     <indexterm>
      <primary>brin_page_type</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
<!--
      <function>brin_page_type</function> returns the page type of the given
      <acronym>BRIN</acronym> index page, or throws an error if the page is
      not a valid <acronym>BRIN</acronym> page.  For example:
-->
<function>brin_page_type</function>は指定の<acronym>BRIN</acronym>インデックスページのページ種別を返します。
ページが有効な<acronym>BRIN</acronym>ページでないときはエラーが発生します。
以下に例を示します。
<screen>
test=# SELECT brin_page_type(get_raw_page('brinidx', 0));
 brin_page_type 
----------------
 meta
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>brin_metapage_info(page bytea) returns record</function>
     <indexterm>
      <primary>brin_metapage_info</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
<!--
      <function>brin_metapage_info</function> returns assorted information
      about a <acronym>BRIN</acronym> index metapage.  For example:
-->
<function>brin_metapage_info</function>は<acronym>BRIN</acronym>インデックスのメタページについて様々な情報を返します。
以下に例を示します。
<screen>
test=# SELECT * FROM brin_metapage_info(get_raw_page('brinidx', 0));
   magic    | version | pagesperrange | lastrevmappage 
------------+---------+---------------+----------------
 0xA8109CFA |       1 |             4 |              2
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>brin_revmap_data(page bytea) returns setof tid</function>
     <indexterm>
      <primary>brin_revmap_data</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
<!--
      <function>brin_revmap_data</function> returns the list of tuple
      identifiers in a <acronym>BRIN</acronym> index range map page.
      For example:
-->
<function>brin_revmap_data</function>は<acronym>BRIN</acronym>インデックスの範囲マップページのタプル識別子のリストを返します。
以下に例を示します。
<screen>
test=# SELECT * FROM brin_revmap_data(get_raw_page('brinidx', 2)) limit 5;
  pages  
---------
 (6,137)
 (6,138)
 (6,139)
 (6,140)
 (6,141)
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>brin_page_items(page bytea, index oid) returns setof record</function>
     <indexterm>
      <primary>brin_page_items</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
<!--
      <function>brin_page_items</function> returns the data stored in the
      <acronym>BRIN</acronym> data page.  For example:
-->
<function>brin_page_items</function>は<acronym>BRIN</acronym>データページに記録されているデータを返します。
以下に例を示します。
<screen>
test=# SELECT * FROM brin_page_items(get_raw_page('brinidx', 5),
                                     'brinidx')
       ORDER BY blknum, attnum LIMIT 6;
 itemoffset | blknum | attnum | allnulls | hasnulls | placeholder |    value     
------------+--------+--------+----------+----------+-------------+--------------
        137 |      0 |      1 | t        | f        | f           | 
        137 |      0 |      2 | f        | f        | f           | {1 .. 88}
        138 |      4 |      1 | t        | f        | f           | 
        138 |      4 |      2 | f        | f        | f           | {89 .. 176}
        139 |      8 |      1 | t        | f        | f           | 
        139 |      8 |      2 | f        | f        | f           | {177 .. 264}
</screen>
<!--
      The returned columns correspond to the fields in the
      <structname>BrinMemTuple</> and <structname>BrinValues</> structs.
      See <filename>src/include/access/brin_tuple.h</> for details.
-->
返される列は<structname>BrinMemTuple</>構造体および<structname>BrinValues</>構造体のフィールドに対応します。
詳しくは<filename>src/include/access/brin_tuple.h</>を参照して下さい。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>gin_metapage_info(page bytea) returns record</function>
     <indexterm>
      <primary>gin_metapage_info</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
<!--
      <function>gin_metapage_info</function> returns information about
      a <acronym>GIN</acronym> index metapage.  For example:
-->
<function>gin_metapage_info</function>は<acronym>GIN</acronym>インデックスのメタページに関する情報を返します。
以下に例を示します。
<screen>
test=# SELECT * FROM gin_metapage_info(get_raw_page('gin_index', 0));
-[ RECORD 1 ]----+-----------
pending_head     | 4294967295
pending_tail     | 4294967295
tail_free_size   | 0
n_pending_pages  | 0
n_pending_tuples | 0
n_total_pages    | 7
n_entry_pages    | 6
n_data_pages     | 0
n_entries        | 693
version          | 2
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>gin_page_opaque_info(page bytea) returns record</function>
     <indexterm>
      <primary>gin_page_opaque_info</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
<!--
      <function>gin_page_opaque_info</function> returns information about
      a <acronym>GIN</acronym> index opaque area, like the page type.
      For example:
-->
<function>gin_page_opaque_info</function>はページ種別のような<acronym>GIN</acronym>インデックスの不透明な領域についての情報を返します。
以下に例を示します。
<screen>
test=# SELECT * FROM gin_page_opaque_info(get_raw_page('gin_index', 2));
 rightlink | maxoff |         flags
-----------+--------+------------------------
         5 |      0 | {data,leaf,compressed}
(1 row)
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>gin_leafpage_items(page bytea) returns setof record</function>
     <indexterm>
      <primary>gin_leafpage_items</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
<!--
      <function>gin_leafpage_items</function> returns information about
      the data stored in a <acronym>GIN</acronym> leaf page.  For example:
-->
<function>gin_leafpage_items</function>は<acronym>GIN</acronym>のリーフページに格納されているデータについての情報を返します。
以下に例を示します。
<screen>
test=# SELECT first_tid, nbytes, tids[0:5] as some_tids
        FROM gin_leafpage_items(get_raw_page('gin_test_idx', 2));
 first_tid | nbytes |                        some_tids
-----------+--------+----------------------------------------------------------
 (8,41)    |    244 | {"(8,41)","(8,43)","(8,44)","(8,45)","(8,46)"}
 (10,45)   |    248 | {"(10,45)","(10,46)","(10,47)","(10,48)","(10,49)"}
 (12,52)   |    248 | {"(12,52)","(12,53)","(12,54)","(12,55)","(12,56)"}
 (14,59)   |    320 | {"(14,59)","(14,60)","(14,61)","(14,62)","(14,63)"}
 (167,16)  |    376 | {"(167,16)","(167,17)","(167,18)","(167,19)","(167,20)"}
 (170,30)  |    376 | {"(170,30)","(170,31)","(170,32)","(170,33)","(170,34)"}
 (173,44)  |    197 | {"(173,44)","(173,45)","(173,46)","(173,47)","(173,48)"}
(7 rows)
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>fsm_page_contents(page bytea) returns text</function>
     <indexterm>
      <primary>fsm_page_contents</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
<!--
      <function>fsm_page_contents</function> shows the internal node structure
      of a FSM page. The output is a multiline string, with one line per
      node in the binary tree within the page. Only those nodes that are not
      zero are printed. The so-called "next" pointer, which points to the
      next slot to be returned from the page, is also printed.
-->
<function>fsm_page_contents</function>は、FSMページの内部ノード構造を表示します。
出力は複数行からなる文字列で、各行がページ内のバイナリツリー（二分木）の1ノードを表します。
それらのノードのうち、非ゼロのノードのみが出力されます。
そのページから返される次のスロットを指し示すための"next（次）"と呼ばれるポインタも出力されます。
     </para>
     <para>
<!--
      See <filename>src/backend/storage/freespace/README</> for more
      information on the structure of an FSM page.
-->
FSMページの構造に関する更に詳しい情報は、<filename>src/backend/storage/freespace/README</>を参照してください。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

</sect1>
