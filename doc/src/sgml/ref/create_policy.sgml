<!--
doc/src/sgml/ref/create_policy.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEPOLICY">
 <indexterm zone="sql-createpolicy">
  <primary>CREATE POLICY</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE POLICY</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
  <refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE POLICY</refname>
<!--
  <refpurpose>define a new row level security policy for a table</refpurpose>
-->
  <refpurpose>テーブルに新しい行単位のセキュリティポリシーを定義する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE POLICY <replaceable class="parameter">name</replaceable> ON <replaceable class="parameter">table_name</replaceable>
    [ AS { PERMISSIVE | RESTRICTIVE } ]
    [ FOR { ALL | SELECT | INSERT | UPDATE | DELETE } ]
    [ TO { <replaceable class="parameter">role_name</replaceable> | PUBLIC | CURRENT_USER | SESSION_USER } [, ...] ]
    [ USING ( <replaceable class="parameter">using_expression</replaceable> ) ]
    [ WITH CHECK ( <replaceable class="parameter">check_expression</replaceable> ) ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   The <command>CREATE POLICY</command> command defines a new row-level
   security policy for a table.  Note that row-level security must be
   enabled on the table (using <command>ALTER TABLE ... ENABLE ROW LEVEL
   SECURITY</command>) in order for created policies to be applied.
-->
<command>CREATE POLICY</command>はテーブルに新しい行単位のセキュリティポリシーを定義します。
作成したポリシーを適用するには、（<command>ALTER TABLE ... ENABLE ROW LEVEL SECURITY</command>を使って）テーブルの行単位セキュリティを有効にしなければならないことに注意して下さい。
  </para>

  <para>
<!--
   A policy grants the permission to select, insert, update, or delete rows
   that match the relevant policy expression.  Existing table rows are
   checked against the expression specified in <literal>USING</literal>,
   while new rows that would be created via <literal>INSERT</literal>
   or <literal>UPDATE</literal> are checked against the expression specified
   in <literal>WITH CHECK</literal>.  When a <literal>USING</literal>
   expression returns true for a given row then that row is visible to the
   user, while if false or null is returned then the row is not visible.
   When a <literal>WITH CHECK</literal> expression returns true for a row
   then that row is inserted or updated, while if false or null is returned
   then an error occurs.
-->
ポリシーは、それを定義する式にマッチした行をselect/insert/update/deleteする権限を与えます。
テーブルの既存の行は<literal>USING</literal>で指定した式によって検査されます。
<literal>INSERT</literal>または<literal>UPDATE</literal>によって作成される新しい行は<literal>WITH CHECK</literal>で指定した式によって検査されます。
ある行について<literal>USING</literal>式がtrueを返した場合、その行はユーザに可視となりますが、falseまたはnullを返した場合は不可視となります。
行に対して<literal>WITH CHECK</literal>式がtrueを返した場合、その行は挿入または更新されますが、falseまたはnullを返した場合はエラーが発生します。
  </para>

  <para>
<!--
   For <command>INSERT</command> and <command>UPDATE</command> statements,
   <literal>WITH CHECK</literal> expressions are enforced after
   <literal>BEFORE</literal> triggers are fired, and before any actual data
   modifications are made.  Thus a <literal>BEFORE ROW</literal> trigger may
   modify the data to be inserted, affecting the result of the security
   policy check.  <literal>WITH CHECK</literal> expressions are enforced
   before any other constraints.
-->
<command>INSERT</command>文および<command>UPDATE</command>文では、<literal>BEFORE</literal>トリガーが実行された後で、かつ、実際のデータ更新が行われるより前に<literal>WITH CHECK</literal>式が実行されます。
従って、<literal>BEFORE ROW</literal>トリガーは挿入されるデータを変更する場合があり、これはセキュリティポリシーの検査の結果に影響を与えます。
<literal>WITH CHECK</literal>式は他のいかなる制約よりも前に実行されます。
  </para>

  <para>
<!--
   Policy names are per-table.  Therefore, one policy name can be used for many
   different tables and have a definition for each table which is appropriate to
   that table.
-->
ポリシー名はテーブル毎につけられます。
従って、1つのポリシー名を多くの異なるテーブルに使うことができます。
また、その定義は各テーブル毎に異なった、適切な内容にできます。
  </para>

  <para>
<!--
   Policies can be applied for specific commands or for specific roles.  The
   default for newly created policies is that they apply for all commands and
<<<<<<< HEAD
   roles, unless otherwise specified.
-->
ポリシーは特定のコマンドまたは特定のロールに対して適用することができます。
新しく作成するポリシーのデフォルトは、特に指定しなければ、すべてのコマンドとロールに適用、となっています。
=======
   roles, unless otherwise specified.  Multiple policies may apply to a single
   command; see below for more details.
   <xref linkend="sql-createpolicy-summary"> summarizes how the different types
   of policy apply to specific commands.
>>>>>>> REL_10_3
  </para>

  <para>
<!--
   For policies that can have both <literal>USING</literal>
   and <literal>WITH CHECK</literal> expressions (<literal>ALL</literal>
   and <literal>UPDATE</literal>), if no <literal>WITH CHECK</literal>
   expression is defined, then the <literal>USING</literal> expression will be
   used both to determine which rows are visible (normal
   <literal>USING</literal> case) and which new rows will be allowed to be
   added (<literal>WITH CHECK</literal> case).
   roles, unless otherwise specified.  If multiple policies apply to a given
   statement, they will be combined using OR (although <literal>ON CONFLICT DO
   UPDATE</> and <literal>INSERT</> policies are not combined in this way, but
   rather enforced as noted at each stage of <literal>ON CONFLICT</> execution).
-->
<literal>USING</literal>式と<literal>WITH CHECK</literal>式の両方を持つことができるポリシー（<literal>ALL</literal>と<literal>UPDATE</literal>）について<literal>WITH CHECK</literal>式が定義されていない場合、どの行が可視であるかの決定（通常の<literal>USING</literal>の対象）と新しい行のどれが追加可能であるかの決定（<literal>WITH CHECK</literal>の対象）の両方で<literal>USING</literal>式が使用されます。
  </para>

  <para>
<!--
   If row-level security is enabled for a table, but no applicable policies
   exist, a <quote>default deny</> policy is assumed, so that no rows will
   be visible or updatable.
-->
テーブルの行単位セキュリティが有効で、適用可能なポリシーが存在しない場合、<quote>デフォルト拒否</>のポリシーが適用され、すべての行が不可視で更新不能になります。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <para>
<!--
      The name of the policy to be created.  This must be distinct from the
      name of any other policy for the table.
-->
作成するポリシーの名前です。
同じテーブルの他のポリシーとは異なる名前でなければなりません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">table_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name (optionally schema-qualified) of the table the
      policy applies to.
-->
ポリシーが適用されるテーブルの名前（スキーマ修飾可）です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>PERMISSIVE</literal></term>
    <listitem>
     <para>
<!--
      Specify that the policy is to be created as a permissive policy.
      All permissive policies which are applicable to a given query will
      be combined together using the Boolean <quote>OR</quote> operator.  By creating
      permissive policies, administrators can add to the set of records
      which can be accessed.  Policies are permissive by default.
-->
作成するポリシーが許容(permissive)ポリシーであることを指定します。
問い合わせに適用可能なすべての許容ポリシーは論理演算子<quote>OR</quote>を使って結合されます。
許容ポリシーを作成することで、管理者はアクセス可能なレコード集合を追加することができます。
デフォルトではポリシーは許容ポリシーです。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RESTRICTIVE</literal></term>
    <listitem>
     <para>
<!--
      Specify that the policy is to be created as a restrictive policy.
      All restrictive policies which are applicable to a given query will
      be combined together using the Boolean <quote>AND</quote> operator.  By creating
      restrictive policies, administrators can reduce the set of records
      which can be accessed as all restrictive policies must be passed for
      each record.
-->
作成するポリシーが制限(restrictive)ポリシーであることを指定します。
問い合わせに適用可能なすべての制限ポリシーは論理演算子<quote>AND</quote>と使って結合されます。
各行についてすべての制限ポリシーを満たさなければならなくなるため、制限ポリシーを作成することで、管理者はアクセス可能なレコード集合を減らすことができます。
     </para>

     <para>
<!--
      Note that there needs to be at least one permissive policy to grant
      access to records before restrictive policies can be usefully used to
      reduce that access. If only restrictive policies exist, then no records
      will be accessible. When a mix of permissive and restrictive policies
      are present, a record is only accessible if at least one of the
      permissive policies passes, in addition to all the restrictive
      policies.
-->
制限ポリシーを有効に使ってアクセスを制限できるようにする前に、レコードへのアクセスを許可する許容ポリシーが少なくとも1つ必要であることに注意してください。
制限ポリシーだけしか存在しない場合、レコードにアクセスすることはできません。
許容ポリシーと制限ポリシーが混在している場合、少なくとも1つの許容ポリシーを満たし、さらに、すべての制限ポリシーを満たしている場合のみレコードにアクセスできます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">command</replaceable></term>
    <listitem>
     <para>
<!--
      The command to which the policy applies.  Valid options are
      <command>ALL</command>, <command>SELECT</command>,
      <command>INSERT</command>, <command>UPDATE</command>,
      and <command>DELETE</command>.
      <command>ALL</command> is the default.
      See below for specifics regarding how these are applied.
-->
ポリシーが適用されるコマンドです。
有効なオプションは<command>ALL</command>、<command>SELECT</command>、<command>INSERT</command>、<command>UPDATE</command>、<command>DELETE</command>です。
デフォルトは<command>ALL</command>です。
これらがどのように適用されるかの詳細は以下を参照して下さい。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">role_name</replaceable></term>
    <listitem>
     <para>
<!--
      The role(s) to which the policy is to be applied.  The default is
      <literal>PUBLIC</literal>, which will apply the policy to all roles.
-->
ポリシーが適用されるロールです。
デフォルトは<literal>PUBLIC</literal>で、すべてのロールに対してポリシーが適用されます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">using_expression</replaceable></term>
    <listitem>
     <para>
<!--
      Any <acronym>SQL</acronym> conditional expression (returning
      <type>boolean</type>).  The conditional expression cannot contain
      any aggregate or window functions.  This expression will be added
      to queries that refer to the table if row level security is enabled.
      Rows for which the expression returns true will be visible.  Any
      rows for which the expression returns false or null will not be
      visible to the user (in a <command>SELECT</>), and will not be
      available for modification (in an <command>UPDATE</>
      or <command>DELETE</>).  Such rows are silently suppressed; no error
      is reported.
-->
任意の<acronym>SQL</acronym>条件式（戻り値は<type>boolean</type>）です。
条件式に集約関数やウィンドウ関数を含めることはできません。
行単位セキュリティが有効なときは、テーブルへの問い合わせにこの式が追加されます。
この式がtrueを返す行が可視となります。
この式がfalseまたはnullを返す行は、ユーザには（<command>SELECT</>において）不可視となり、また（<command>UPDATE</>あるいは<command>DELETE</>では）更新の対象ではなくなります。
そのような行は静かに無視され、エラーは報告されません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">check_expression</replaceable></term>
    <listitem>
     <para>
<!--
      Any <acronym>SQL</acronym> conditional expression (returning
      <type>boolean</type>).  The conditional expression cannot contain
      any aggregate or window functions.  This expression will be used in
      <command>INSERT</command> and <command>UPDATE</command> queries against
      the table if row level security is enabled.  Only rows for which the
      expression evaluates to true will be allowed.  An error will be thrown
      if the expression evaluates to false or null for any of the records
      inserted or any of the records that result from the update.  Note that
      the <replaceable class="parameter">check_expression</replaceable> is
      evaluated against the proposed new contents of the row, not the
      original contents.
-->
任意の<acronym>SQL</acronym>条件式（戻り値は<type>boolean</type>）です。
条件式に集約関数やウィンドウ関数を含めることはできません。
この式は、そのテーブルに対する<command>INSERT</command>および<command>UPDATE</command>の問い合わせで使用され、この式の評価がtrueになる行のみが許されます。
挿入されるレコード、あるいは更新の結果のレコードでこの式の評価がfalseまたはnullになるものについては、エラーが発生します。
<replaceable class="parameter">check_expression</replaceable>は元の内容ではなく、予定される更新の後の新しい内容に対して評価されることに注意してください。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

  <refsect2>
<!--
   <title>Per-Command Policies</title>
-->
   <title>コマンド毎のポリシー</title>

   <variablelist>

     <varlistentry id="SQL-CREATEPOLICY-ALL">
      <term><literal>ALL</></term>
      <listitem>
       <para>
<!--
         Using <literal>ALL</literal> for a policy means that it will apply
         to all commands, regardless of the type of command.  If an
         <literal>ALL</literal> policy exists and more specific policies
         exist, then both the <literal>ALL</literal> policy and the more
         specific policy (or policies) will be applied.
         Additionally, <literal>ALL</literal> policies will be applied to
         both the selection side of a query and the modification side, using
         the <literal>USING</literal> expression for both cases if only
         a <literal>USING</literal> expression has been defined.
-->
ポリシーに<literal>ALL</literal>を使うのは、そのポリシーはコマンドの種類に関係なく、すべてのコマンドに適用されるという意味になります。
<literal>ALL</literal>のポリシーと特定のコマンドに対するポリシーの両方が存在する場合、<literal>ALL</literal>のポリシーと特定のコマンドに対するポリシーの両方が適用されます。
さらに<literal>ALL</literal>のポリシーは、問い合わせの選択側と更新側の両方で適用されます。
このとき、<literal>USING</literal>式だけが定義されていたら、両方の場合について<literal>USING</literal>式を使用します。
       </para>
       <para>
<!--
         As an example, if an <literal>UPDATE</literal> is issued, then the
         <literal>ALL</literal> policy will be applicable both to what the
         <literal>UPDATE</literal> will be able to select as rows to be
         updated (applying the <literal>USING</literal> expression),
         and to the resulting updated rows, to check if they are permitted
         to be added to the table (applying the <literal>WITH CHECK</literal>
         expression, if defined, and the <literal>USING</literal> expression
         otherwise).  If an <command>INSERT</command>
         or <command>UPDATE</command> command attempts to add rows to the
         table that do not pass the <literal>ALL</literal>
         policy's <literal>WITH CHECK</literal> expression, the entire
         command will be aborted.
-->
例えば<literal>UPDATE</literal>が実行されるとき、<literal>ALL</literal>のポリシーは、<literal>UPDATE</literal>が更新対象の行として選択できる行（<literal>USING</literal>式が適用されます）と、<literal>UPDATE</literal>文の結果としてできる行がテーブルに追加できるかどうかの検証（<literal>WITH CHECK</literal>が定義されていれば、それが適用され、なければ<literal>USING</literal>式が適用されます）の両方で適用可能です。
<command>INSERT</command>または<command>UPDATE</command>コマンドが<literal>ALL</literal>の<literal>WITH CHECK</literal>式に反する行をテーブルに追加しようとした場合、コマンド全体が中止されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="SQL-CREATEPOLICY-SELECT">
      <term><literal>SELECT</></term>
      <listitem>
       <para>
<!--
         Using <literal>SELECT</literal> for a policy means that it will apply
         to <literal>SELECT</literal> queries and whenever
         <literal>SELECT</literal> permissions are required on the relation the
         policy is defined for.  The result is that only those records from the
         relation that pass the <literal>SELECT</literal> policy will be
         returned during a <literal>SELECT</literal> query, and that queries
         that require <literal>SELECT</literal> permissions, such as
         <literal>UPDATE</literal>, will also only see those records
         that are allowed by the <literal>SELECT</literal> policy.
         A <literal>SELECT</literal> policy cannot have a <literal>WITH
         CHECK</literal> expression, as it only applies in cases where
         records are being retrieved from the relation.
-->
ポリシーに<literal>SELECT</literal>を使うのは、そのポリシーは<literal>SELECT</literal>の問い合わせの他に、そのポリシーが定義されているリレーションに対して<literal>SELECT</literal>権限が必要な時は常に適用されるという意味になります。
その結果、<literal>SELECT</literal>問い合わせでは、<literal>SELECT</literal>ポリシーに適うレコードだけが返されます。
また、<literal>UPDATE</literal>など<literal>SELECT</literal>権限が必要な問い合わせでも、<literal>SELECT</literal>ポリシーによって許可されるレコードだけが見えます。
<literal>SELECT</literal>ポリシーはリレーションからレコードを取り出す場合にしか適用されないので、<literal>WITH CHECK</literal>式を持つことはできません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="SQL-CREATEPOLICY-INSERT">
      <term><literal>INSERT</></term>
      <listitem>
       <para>
<!--
         Using <literal>INSERT</literal> for a policy means that it will apply
         to <literal>INSERT</literal> commands.  Rows being inserted that do
         not pass this policy will result in a policy violation error, and the
         entire <literal>INSERT</literal> command will be aborted.
         An <literal>INSERT</literal> policy cannot have
         a <literal>USING</literal> expression, as it only applies in cases
         where records are being added to the relation.
-->
ポリシーに<literal>INSERT</literal>を使うのは、そのポリシーは<literal>INSERT</literal>コマンドに適用されるという意味になります。
このポリシーに反する行を挿入しようとすると、ポリシー違反エラーを起こし、<literal>INSERT</literal>コマンド全体が中止されます。
<literal>INSERT</literal>ポリシーはリレーションにレコードを追加する場合にしか適用されないため、<literal>USING</literal>式を持つことはできません。
       </para>
       <para>
<!--
         Note that <literal>INSERT</literal> with <literal>ON CONFLICT DO
         UPDATE</literal> checks <literal>INSERT</literal> policies'
         <literal>WITH CHECK</literal> expressions only for rows appended
         to the relation by the <literal>INSERT</literal> path.
-->
<literal>ON CONFLICT DO UPDATE</literal>のある<literal>INSERT</literal>では、<literal>INSERT</literal>ポリシーの<literal>WITH CHECK</literal>式について、<literal>INSERT</literal>の部分でリレーションに追加されるすべての行についてのみ確認することに注意してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="SQL-CREATEPOLICY-UPDATE">
      <term><literal>UPDATE</></term>
      <listitem>
       <para>
<!--
         Using <literal>UPDATE</literal> for a policy means that it will apply
         to <literal>UPDATE</literal>, <literal>SELECT FOR UPDATE</literal>
         and <literal>SELECT FOR SHARE</literal> commands, as well as
         auxiliary <literal>ON CONFLICT DO UPDATE</literal> clauses of
         <literal>INSERT</literal> commands.  Since <literal>UPDATE</literal>
         involves pulling an existing record and replacing it with a new
         modified record, <literal>UPDATE</literal>
         policies accept both a <literal>USING</literal> expression and
         a <literal>WITH CHECK</literal> expression.
         The <literal>USING</literal> expression determines which records
         the <literal>UPDATE</literal> command will see to operate against,
         while the <literal>WITH CHECK</literal> expression defines which
         modified rows are allowed to be stored back into the relation.
-->
ポリシーに<literal>UPDATE</literal>を使うのは、そのポリシーは<literal>UPDATE</literal>コマンド、<literal>SELECT FOR UPDATE</literal>コマンド、<literal>SELECT FOR SHARE</literal>コマンド、および補助的に<literal>INSERT</literal>コマンドの<literal>ON CONFLICT DO UPDATE</literal>句で適用されるという意味になります。
<literal>UPDATE</literal>は既存のレコードを取り出すことと、レコードを新しい修正されたレコードで置換することが含まれるので、<literal>UPDATE</literal>ポリシーは<literal>USING</literal>式と<literal>WITH CHECK</literal>式の両方を受け付けます。
<literal>USING</literal>式は<literal>UPDATE</literal>コマンドが操作の対象としてどのレコードを見ることができるかを決めるのに使われます。
一方で<literal>WITH CHECK</literal>はどの修正した行をリレーションに戻すことができるかを定義します。
       </para>

       <para>
<!--
         Any rows whose updated values do not pass the
         <literal>WITH CHECK</literal> expression will cause an error, and the
         entire command will be aborted.  If only a <literal>USING</literal>
         clause is specified, then that clause will be used for both
         <literal>USING</literal> and <literal>WITH CHECK</literal> cases.
-->
更新後の値が<literal>WITH CHECK</literal>式に反する行があればエラーを起こし、コマンド全体が中止されます。
<literal>USING</literal>句だけが指定されていた場合は、それが<literal>USING</literal>と<literal>WITH CHECK</literal>の両方に対して使用されます。
       </para>

       <para>
<!--
         Typically an <literal>UPDATE</literal> command also needs to read
         data from columns in the relation being updated (e.g., in a
         <literal>WHERE</literal> clause or a <literal>RETURNING</literal>
         clause, or in an expression on the right hand side of the
         <literal>SET</literal> clause).  In this case,
         <literal>SELECT</literal> rights are also required on the relation
         being updated, and the appropriate <literal>SELECT</literal> or
         <literal>ALL</literal> policies will be applied in addition to
         the <literal>UPDATE</literal> policies.  Thus the user must have
         access to the row(s) being updated through a <literal>SELECT</literal>
         or <literal>ALL</literal> policy in addition to being granted
         permission to update the row(s) via an <literal>UPDATE</literal>
         or <literal>ALL</literal> policy.
-->
通常は、<literal>UPDATE</literal>コマンドは更新対象のリレーションの列からデータを読む必要もあります（例えば、<literal>WHERE</literal>句の中、<literal>RETURNING</literal>句、あるいは<literal>SET</literal>句の右辺の式の中）。
この場合、更新対象のリレーションの<literal>SELECT</literal>権限も必要となり、<literal>UPDATE</literal>ポリシーに加えて、適切な<literal>SELECT</literal>または<literal>ALL</literal>ポリシーも適用されます。
従って、ユーザは<literal>UPDATE</literal>または<literal>ALL</literal>ポリシーによって、行を更新する権限を付与されているのに加えて、<literal>SELECT</literal>または<literal>ALL</literal>ポリシーによって、更新対象の行にアクセスできなければなりません。
       </para>

       <para>
<!--
         When an <literal>INSERT</literal> command has an auxiliary
         <literal>ON CONFLICT DO UPDATE</literal> clause, if the
         <literal>UPDATE</literal> path is taken, the row to be updated is
         first checked against the <literal>USING</literal> expressions of
         any <literal>UPDATE</literal> policies, and then the new updated row
         is checked against the <literal>WITH CHECK</literal> expressions.
         Note, however, that unlike a standalone <literal>UPDATE</literal>
         command, if the existing row does not pass the
         <literal>USING</literal> expressions, an error will be thrown (the
         <literal>UPDATE</literal> path will <emphasis>never</> be silently
         avoided).
-->
<literal>INSERT</literal>コマンドに補助的な<literal>ON CONFLICT DO UPDATE</literal>句があり、<literal>UPDATE</literal>の部分が使われるとき、更新対象の行についてまず、すべての<literal>UPDATE</literal>ポリシーの<literal>USING</literal>式が検査され、次いで、更新された新しい行が<literal>WITH CHECK</literal>式が検査されます。
しかし、単独の<literal>UPDATE</literal>コマンドとは異なり、既存の行が<literal>USING</literal>式を満たさないときは、エラーが発生します（<literal>UPDATE</literal>の部分が警告なしに回避されることは<emphasis>決して</>ありません）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="SQL-CREATEPOLICY-DELETE">
      <term><literal>DELETE</></term>
      <listitem>
       <para>
<!--
         Using <literal>DELETE</literal> for a policy means that it will apply
         to <literal>DELETE</literal> commands.  Only rows that pass this
         policy will be seen by a <literal>DELETE</literal> command.  There can
         be rows that are visible through a <literal>SELECT</literal> that are
         not available for deletion, if they do not pass the
         <literal>USING</literal> expression for
         the <literal>DELETE</literal> policy.
-->
ポリシーに<literal>DELETE</literal>を使うのは、そのポリシーは<literal>DELETE</literal>コマンドに適用されるという意味になります。
ポリシーを満たす行だけが<literal>DELETE</literal>コマンドから見えます。
<literal>SELECT</literal>では見えるけれど、削除の対象ではない、という行もあり得ます。
それらの行が<literal>DELETE</literal>ポリシーの<literal>USING</literal>式を満たさない場合です。
       </para>

       <para>
<!--
         In most cases a <literal>DELETE</literal> command also needs to read
         data from columns in the relation that it is deleting from (e.g.,
         in a <literal>WHERE</literal> clause or a
         <literal>RETURNING</literal> clause). In this case,
         <literal>SELECT</literal> rights are also required on the relation,
         and the appropriate <literal>SELECT</literal> or
         <literal>ALL</literal> policies will be applied in addition to
         the <literal>DELETE</literal> policies.  Thus the user must have
         access to the row(s) being deleted through a <literal>SELECT</literal>
         or <literal>ALL</literal> policy in addition to being granted
         permission to delete the row(s) via a <literal>DELETE</literal> or
         <literal>ALL</literal> policy.
-->
ほとんどの場合、<literal>DELETE</literal>コマンドは削除対象のリレーションの列からデータを読む必要もあります（例えば、<literal>WHERE</literal>句の中や<literal>RETURNING</literal>句）。
この場合、リレーション上の<literal>SELECT</literal>権限も必要となり、<literal>DELETE</literal>ポリシーに加えて、適切な<literal>SELECT</literal>ポリシーまたは<literal>ALL</literal>ポリシーも適用されます。
従って、ユーザは<literal>DELETE</literal>または<literal>ALL</literal>ポリシーによって、行を削除する権限を付与されているのに加えて、<literal>SELECT</literal>または<literal>ALL</literal>ポリシーによって、削除対象の行にアクセスできなければなりません。
       </para>

       <para>
<!--
         A <literal>DELETE</literal> policy cannot have a <literal>WITH
         CHECK</literal> expression, as it only applies in cases where
         records are being deleted from the relation, so that there is no
         new row to check.
-->
<literal>DELETE</literal>ポリシーはリレーションからレコードが削除される場合にしか適用されず、確認すべき新しい行はないので、<literal>WITH CHECK</literal>式を持つことはできません。
       </para>
      </listitem>
     </varlistentry>

   </variablelist>

   <table id="sql-createpolicy-summary">
    <title>Policies Applied by Command Type</title>
    <tgroup cols="6">
     <colspec colnum="4" colname="update-using">
     <colspec colnum="5" colname="update-check">
     <spanspec namest="update-using" nameend="update-check" spanname="update">
     <thead>
      <row>
       <entry morerows="1">Command</entry>
       <entry><literal>SELECT/ALL policy</literal></entry>
       <entry><literal>INSERT/ALL policy</literal></entry>
       <entry spanname="update"><literal>UPDATE/ALL policy</literal></entry>
       <entry><literal>DELETE/ALL policy</literal></entry>
      </row>
      <row>
       <entry><literal>USING expression</literal></entry>
       <entry><literal>WITH CHECK expression</literal></entry>
       <entry><literal>USING expression</literal></entry>
       <entry><literal>WITH CHECK expression</literal></entry>
       <entry><literal>USING expression</literal></entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><command>SELECT</command></entry>
       <entry>Existing row</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
      </row>
      <row>
       <entry><command>SELECT FOR UPDATE/SHARE</command></entry>
       <entry>Existing row</entry>
       <entry>&mdash;</entry>
       <entry>Existing row</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
      </row>
      <row>
       <entry><command>INSERT</command></entry>
       <entry>&mdash;</entry>
       <entry>New row</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
      </row>
      <row>
       <entry><command>INSERT ... RETURNING</command></entry>
       <entry>
        New row
        <footnote id="rls-select-priv">
         <para>
          If read access is required to the existing or new row (for example,
          a <literal>WHERE</literal> or <literal>RETURNING</literal> clause
          that refers to columns from the relation).
         </para>
        </footnote>
       </entry>
       <entry>New row</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
      </row>
      <row>
       <entry><command>UPDATE</command></entry>
       <entry>
        Existing &amp; new rows
        <footnoteref linkend="rls-select-priv">
       </entry>
       <entry>&mdash;</entry>
       <entry>Existing row</entry>
       <entry>New row</entry>
       <entry>&mdash;</entry>
      </row>
      <row>
       <entry><command>DELETE</command></entry>
       <entry>
        Existing row
        <footnoteref linkend="rls-select-priv">
       </entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
       <entry>Existing row</entry>
      </row>
      <row>
       <entry><command>ON CONFLICT DO UPDATE</command></entry>
       <entry>Existing &amp; new rows</entry>
       <entry>&mdash;</entry>
       <entry>Existing row</entry>
       <entry>New row</entry>
       <entry>&mdash;</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  </refsect2>

  <refsect2>
<!--
   <title>Application of Multiple Policies</title>
-->
   <title>複数のポリシーの適用</title>

   <para>
<!--
    When multiple policies of different command types apply to the same command
    (for example, <literal>SELECT</literal> and <literal>UPDATE</literal>
    policies applied to an <literal>UPDATE</literal> command), then the user
    must have both types of permissions (for example, permission to select rows
    from the relation as well as permission to update them).  Thus the
    expressions for one type of policy are combined with the expressions for
    the other type of policy using the <literal>AND</literal> operator.
-->
同じコマンドに対して、異なるコマンド種別の複数のポリシーを適用する場合（例えば、<literal>UPDATE</literal>コマンドに対しては<literal>SELECT</literal>と<literal>UPDATE</literal>のポリシーが適用されます）、ユーザは両方の種別の権限（例えば、リレーションから行を検索する権限と、それを更新する権限）を持っている必要があります。
従って、ある種別のポリシーの式は、別の種別のポリシーの式と<literal>AND</literal>演算子を使って結合されます。
   </para>

   <para>
<!--
    When multiple policies of the same command type apply to the same command,
    then there must be at least one <literal>PERMISSIVE</literal> policy
    granting access to the relation, and all of the
    <literal>RESTRICTIVE</literal> policies must pass.  Thus all the
    <literal>PERMISSIVE</literal> policy expressions are combined using
    <literal>OR</literal>, all the <literal>RESTRICTIVE</literal> policy
    expressions are combined using <literal>AND</literal>, and the results are
    combined using <literal>AND</literal>.  If there are no
    <literal>PERMISSIVE</literal> policies, then access is denied.
-->
同じコマンドに対して同じコマンド種別の複数のポリシーが適用される場合、リレーションのアクセスを許可する少なくとも1つの<literal>PERMISSIVE</literal>ポリシーがなければならず、さらにすべての<literal>RESTRICTIVE</literal>ポリシーを満たす必要があります。
従って、すべての<literal>PERMISSIVE</literal>ポリシー式が<literal>OR</literal>を使って結合され、すべての<literal>RESTRICTIVE</literal>ポリシー式が<literal>AND</literal>を使って結合され、その結果が<literal>AND</literal>を使って結合されます。
<literal>PERMISSIVE</literal>ポリシーがなければアクセスは拒絶されます。
   </para>

   <para>
<!--
    Note that, for the purposes of combining multiple policies,
    <literal>ALL</literal> policies are treated as having the same type as
    whichever other type of policy is being applied.
-->
複数のポリシーを結合するという目的において、<literal>ALL</literal>のポリシーは適用対象となっている他のすべてのポリシーと同じ種別であるとして扱われることに注意してください。
   </para>

   <para>
<!--
    For example, in an <literal>UPDATE</literal> command requiring both
    <literal>SELECT</literal> and <literal>UPDATE</literal> permissions, if
    there are multiple applicable policies of each type, they will be combined
    as follows:
-->
例えば、<literal>SELECT</literal>と<literal>UPDATE</literal>の両方の権限を必要とする<literal>UPDATE</literal>コマンドにおいて、それぞれの種別の適用可能な複数のポリシーがある場合、以下のように結合されます。

<programlisting>
<replaceable>expression</replaceable> from RESTRICTIVE SELECT/ALL policy 1
AND
<replaceable>expression</replaceable> from RESTRICTIVE SELECT/ALL policy 2
AND
...
AND
(
  <replaceable>expression</replaceable> from PERMISSIVE SELECT/ALL policy 1
  OR
  <replaceable>expression</replaceable> from PERMISSIVE SELECT/ALL policy 2
  OR
  ...
)
AND
<replaceable>expression</replaceable> from RESTRICTIVE UPDATE/ALL policy 1
AND
<replaceable>expression</replaceable> from RESTRICTIVE UPDATE/ALL policy 2
AND
...
AND
(
  <replaceable>expression</replaceable> from PERMISSIVE UPDATE/ALL policy 1
  OR
  <replaceable>expression</replaceable> from PERMISSIVE UPDATE/ALL policy 2
  OR
  ...
)
</programlisting>
   </para>

  </refsect2>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   You must be the owner of a table to create or change policies for it.
-->
ポリシーを作成あるいは変更するには、テーブルの所有者でなければなりません。
  </para>

  <para>
<!--
   While policies will be applied for explicit queries against tables
   in the database, they are not applied when the system is performing internal
   referential integrity checks or validating constraints.  This means there are
   indirect ways to determine that a given value exists.  An example of this is
   attempting to insert a duplicate value into a column that is a primary key
   or has a unique constraint.  If the insert fails then the user can infer that
   the value already exists. (This example assumes that the user is permitted by
   policy to insert records which they are not allowed to see.)  Another example
   is where a user is allowed to insert into a table which references another,
   otherwise hidden table.  Existence can be determined by the user inserting
   values into the referencing table, where success would indicate that the
   value exists in the referenced table.  These issues can be addressed by
   carefully crafting policies to prevent users from being able to insert,
   delete, or update records at all which might possibly indicate a value they
   are not otherwise able to see, or by using generated values (e.g., surrogate
   keys) instead of keys with external meanings.
-->
ポリシーは、データベース内のテーブルに対する明示的な問い合わせには適用されますが、システムが内部的な参照整合性のチェックや制約の検証をしている時には適用されません。
この意味するところは、ある値が存在するかどうかを判定する間接的な方法がある、ということです。
その例の1つは、主キーあるいは一意制約のある列に重複する値を挿入しようとすることです。
挿入に失敗すれば、その値が既に存在すると推定することができます。
（この例では、ユーザが見ることができないレコードを挿入することがポリシーにより許されていると仮定しています。）
別の例は、あるテーブルへの挿入は許されているが、そのテーブルが別の隠されているテーブルを参照している、という場合です。
参照元のテーブルに値を挿入することで、値の存在が判断できます。
この場合、挿入の成功はその値が参照先のテーブルに存在することを示唆します。
これらの問題は、見ることができない値を示唆するかもしれないようなレコードの挿入、削除、更新が全くできないように注意深くポリシーを設計するか、あるいは外部的な意味を持つキーの代わりに生成された値（例：代理キー）を使うことで解決できます。
  </para>

  <para>
<!--
   Generally, the system will enforce filter conditions imposed using
   security policies prior to qualifications that appear in user queries,
   in order to prevent inadvertent exposure of the protected data to
   user-defined functions which might not be trustworthy.  However,
   functions and operators marked by the system (or the system
   administrator) as <literal>LEAKPROOF</literal> may be evaluated before
   policy expressions, as they are assumed to be trustworthy.
-->
一般に、システムは問い合わせに記述される制限より前に、セキュリティポリシーを使ったフィルター条件を実行します。
これは守られるべきデータが信頼できないかもしれないユーザ定義関数に偶然に意図せずに渡されることを防ぐためです。
しかし、システム（またはシステム管理者）によって<literal>LEAKPROOF</literal>であるとされた関数や演算子については、信頼できるとみなして良いので、ポリシー式より先に評価される場合があります。
  </para>

  <para>
<!--
   Since policy expressions
   are added to the user's query directly, they will be run with the rights of
   the user running the overall query.  Therefore, users who are using a given
   policy must be able to access any tables or functions referenced in the
   expression or they will simply receive a permission denied error when
   attempting to query the table that has row-level security enabled.
   This does not change how views
   work, however.  As with normal queries and views, permission checks and
   policies for the tables which are referenced by a view will use the view
   owner's rights and any policies which apply to the view owner.
-->
ポリシーの式はユーザの問い合わせに直接追加されるため、式は問い合わせ全体を実行しているユーザの権限によって実行されます。
そのため、あるポリシーを使用するユーザは、その式が参照しているすべてのテーブルおよび関数にアクセスできる必要があります。
そうでなければ、行単位セキュリティが有効になっているテーブルに問い合わせをしようとしたときに、単に権限なしのエラーを受け取ります。
しかし、これによってビューの動作が変わることはありません。
通常の問い合わせおよびビューと同じく、ビューによって参照されるテーブルに対する権限の確認とポリシーは、ビューの所有者の権限およびビューの所有者に適用されるポリシーを利用します。
  </para>

  <para>
<!--
   Additional discussion and practical examples can be found
   in <xref linkend="ddl-rowsecurity">.
-->
更なる詳細と実践的な例については<xref linkend="ddl-rowsecurity">に記述されています。
  </para>

 </refsect1>

 <refsect1>
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   <command>CREATE POLICY</command> is a <productname>PostgreSQL</productname>
   extension.
-->
<command>CREATE POLICY</command>は<productname>PostgreSQL</productname>の拡張です。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterpolicy"></member>
   <member><xref linkend="sql-droppolicy"></member>
   <member><xref linkend="sql-altertable"></member>
  </simplelist>
 </refsect1>

</refentry>
