<!-- doc/src/sgml/logicaldecoding.sgml -->
 <chapter id="logicaldecoding">
<!--
  <title>Logical Decoding</title>
-->
  <title>ロジカルデコーディング</title>
  <indexterm zone="logicaldecoding">
<!--
   <primary>Logical Decoding</primary>
-->
   <primary>ロジカルデコーディング</primary>
  </indexterm>
  <para>
<!--
   PostgreSQL provides infrastructure to stream the modifications performed
   via SQL to external consumers.  This functionality can be used for a
   variety of purposes, including replication solutions and auditing.
-->
PostgreSQLは、SQLによって実行された更新結果を外部のコンシューマにストリーミングする基盤を提供しています。
  </para>

  <para>
<!--
   Changes are sent out in streams identified by logical replication slots.
-->
更新結果は、ロジカルレプリケーションスロット(logical replication slots)で識別されるストリームに送出されます。
  </para>

  <para>
<!--
   The format in which those changes are streamed is determined by the output
   plugin used.  An example plugin is provided in the PostgreSQL distribution.
   Additional plugins can be
   written to extend the choice of available formats without modifying any
   core code.
   Every output plugin has access to each individual new row produced
   by <command>INSERT</command> and the new row version created
   by <command>UPDATE</command>.  Availability of old row versions for
   <command>UPDATE</command> and <command>DELETE</command> depends on
   the configured replica identity (see <xref linkend="SQL-CREATETABLE-REPLICA-IDENTITY">).
-->
ストリームに送出される更新データのフォーマットは、使用するプラグインで決まります。
サンプルプラグインがPostgreSQLの配布物に含まれています。
追加のプラグインを書くことにより、PostgreSQLのコア部分のコードを一切変更することなく、利用可能なフォーマットの選択肢を増やすことができます。
すべてのプラグインから、
<command>INSERT</command>によって作成された個々の新しい行と、<command>UPDATE</command>によって作成された新しい個々の行のバージョンにアクセスできます。
<command>UPDATE</command>と<command>DELETE</command>によって生じた古いバージョンの行へのアクセスが可能かどうかは、
レプリカアイデンティティ(replica identity)の設定によって決まります(<xref linkend="SQL-CREATETABLE-REPLICA-IDENTITY">参照)。
  </para>

  <para>
<!--
   Changes can be consumed either using the streaming replication protocol
   (see <xref linkend="protocol-replication"> and
   <xref linkend="logicaldecoding-walsender">), or by calling functions
   via SQL (see <xref linkend="logicaldecoding-sql">). It is also possible
   to write additional methods of consuming the output of a replication slot
   without modifying core code
   (see <xref linkend="logicaldecoding-writer">).
-->
変更データの消費は、ストリーミングレプリケーションのプロトコル(<xref linkend="protocol-replication">と
<xref linkend="logicaldecoding-walsender">を参照)を使うか、SQL関数(<xref linkend="logicaldecoding-sql">)を使って行います。
また、コア部分に手を入れなくても、レプリケーションスロットの出力を消費する別の方法を実装することもできます
(<xref linkend="logicaldecoding-writer">参照)。
  </para>

  <sect1 id="logicaldecoding-example">
<!--
   <title>Logical Decoding Examples</title>
-->
   <title>ロジカルデコーディングの例</title>

   <para>
<!--
    The following example demonstrates controlling logical decoding using the
    SQL interface.
-->
以下はロジカルデコーディングをSQLを使って制御する例です。
   </para>

   <para>
<!--
    Before you can use logical decoding, you must set
    <xref linkend="guc-wal-level"> to <literal>logical</literal> and
    <xref linkend="guc-max-replication-slots"> to at least 1.  Then, you
    should connect to the target database (in the example
    below, <literal>postgres</literal>) as a superuser.
-->
ロジカルデコーディングを使う前に、<xref linkend="guc-wal-level"> を <literal>logical</literal> に、そして<xref linkend="guc-max-replication-slots">を少なくとも1に設定しなければなりません。
次に、使用するデータベースにスーパーユーザ(以下の例では<literal>postgres</literal>)として接続します。
   </para>

<programlisting>
postgres=# -- Create a slot named 'regression_slot' using the output plugin 'test_decoding'
postgres=# SELECT * FROM pg_create_logical_replication_slot('regression_slot', 'test_decoding');
    slot_name    |    lsn
-----------------+-----------
 regression_slot | 0/16B1970
(1 row)

postgres=# SELECT slot_name, plugin, slot_type, database, active, restart_lsn, confirmed_flush_lsn FROM pg_replication_slots;
    slot_name    |    plugin     | slot_type | database | active | restart_lsn | confirmed_flush_lsn
-----------------+---------------+-----------+----------+--------+-------------+-----------------
 regression_slot | test_decoding | logical   | postgres | f      | 0/16A4408   | 0/16A4440
(1 row)

postgres=# -- There are no changes to see yet
postgres=# SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL);
 lsn | xid | data 
-----+-----+------
(0 rows)

postgres=# CREATE TABLE data(id serial primary key, data text);
CREATE TABLE

postgres=# -- DDL isn't replicated, so all you'll see is the transaction
postgres=# SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL);
    lsn    |  xid  |     data     
-----------+-------+--------------
 0/BA2DA58 | 10297 | BEGIN 10297
 0/BA5A5A0 | 10297 | COMMIT 10297
(2 rows)

postgres=# -- Once changes are read, they're consumed and not emitted
postgres=# -- in a subsequent call:
postgres=# SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL);
 lsn | xid | data 
-----+-----+------
(0 rows)

postgres=# BEGIN;
postgres=# INSERT INTO data(data) VALUES('1');
postgres=# INSERT INTO data(data) VALUES('2');
postgres=# COMMIT;

postgres=# SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL);
    lsn    |  xid  |                          data                           
-----------+-------+---------------------------------------------------------
 0/BA5A688 | 10298 | BEGIN 10298
 0/BA5A6F0 | 10298 | table public.data: INSERT: id[integer]:1 data[text]:'1'
 0/BA5A7F8 | 10298 | table public.data: INSERT: id[integer]:2 data[text]:'2'
 0/BA5A8A8 | 10298 | COMMIT 10298
(4 rows)

postgres=# INSERT INTO data(data) VALUES('3');

postgres=# -- You can also peek ahead in the change stream without consuming changes
postgres=# SELECT * FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL);
    lsn    |  xid  |                          data                           
-----------+-------+---------------------------------------------------------
 0/BA5A8E0 | 10299 | BEGIN 10299
 0/BA5A8E0 | 10299 | table public.data: INSERT: id[integer]:3 data[text]:'3'
 0/BA5A990 | 10299 | COMMIT 10299
(3 rows)

postgres=# -- The next call to pg_logical_slot_peek_changes() returns the same changes again
postgres=# SELECT * FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL);
    lsn    |  xid  |                          data                           
-----------+-------+---------------------------------------------------------
 0/BA5A8E0 | 10299 | BEGIN 10299
 0/BA5A8E0 | 10299 | table public.data: INSERT: id[integer]:3 data[text]:'3'
 0/BA5A990 | 10299 | COMMIT 10299
(3 rows)

postgres=# -- options can be passed to output plugin, to influence the formatting
postgres=# SELECT * FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL, 'include-timestamp', 'on');
    lsn    |  xid  |                          data                           
-----------+-------+---------------------------------------------------------
 0/BA5A8E0 | 10299 | BEGIN 10299
 0/BA5A8E0 | 10299 | table public.data: INSERT: id[integer]:3 data[text]:'3'
 0/BA5A990 | 10299 | COMMIT 10299 (at 2017-05-10 12:07:21.272494-04)
(3 rows)

postgres=# -- Remember to destroy a slot you no longer need to stop it consuming
postgres=# -- server resources:
postgres=# SELECT pg_drop_replication_slot('regression_slot');
 pg_drop_replication_slot
-----------------------

(1 row)
</programlisting>

   <para>
<!--
    The following example shows how logical decoding is controlled over the
    streaming replication protocol, using the
    program <xref linkend="app-pgrecvlogical"> included in the PostgreSQL
    distribution.  This requires that client authentication is set up to allow
    replication connections
    (see <xref linkend="streaming-replication-authentication">) and
    that <varname>max_wal_senders</varname> is set sufficiently high to allow
    an additional connection.
-->
以下はPostgreSQLに付属するプログラム<xref linkend="app-pgrecvlogical">を用いてロジカルデコーディングを
ストリーミングレプリケーションのプロトコルによって制御する例です。
この方法を使うには、レプリケーション接続を許すようにクライアント認証を設定し(<xref linkend="streaming-replication-authentication">参照)、<varname>max_wal_senders</varname>を十分に大きくして追加の接続ができるようにしておかなければなりません。
   </para>
<programlisting>
$ pg_recvlogical -d postgres --slot test --create-slot
$ pg_recvlogical -d postgres --slot test --start -f -
<keycombo action="simul"><keycap>Control</><keycap>Z</></>
$ psql -d postgres -c "INSERT INTO data(data) VALUES('4');"
$ fg
BEGIN 693
table public.data: INSERT: id[integer]:4 data[text]:'4'
COMMIT 693
<keycombo action="simul"><keycap>Control</><keycap>C</></>
$ pg_recvlogical -d postgres --slot test --drop-slot
</programlisting>
  </sect1>

  <sect1 id="logicaldecoding-explanation">
<!--
   <title>Logical Decoding Concepts</title>
-->
   <title>ロジカルデコーディングのコンセプト</title>
   <sect2>
<!--
    <title>Logical Decoding</title>
-->
    <title>ロジカルデコーディング</title>

    <indexterm>
<!--
     <primary>Logical Decoding</primary>
-->
     <primary>ロジカルデコーディング</primary>
    </indexterm>

    <para>
<!--
     Logical decoding is the process of extracting all persistent changes
     to a database's tables into a coherent, easy to understand format which
     can be interpreted without detailed knowledge of the database's internal
     state.
-->

ロジカルデコーディングは、データベースのテーブルへの恒久的な更新を、一貫性があって、データベース内部の状態に関する詳細な知識がなくても容易に理解できる形式として取得するプロセスです。
    </para>

    <para>
<!--
     In <productname>PostgreSQL</productname>, logical decoding is implemented
     by decoding the contents of the <link linkend="wal">write-ahead
     log</link>, which describe changes on a storage level, into an
     application-specific form such as a stream of tuples or SQL statements.
-->

<productname>PostgreSQL</productname>においてロジカルデコーディングは、記憶装置のレベルで更新を記述する<link linkend="wal">書き込み先行ログ</link>の内容を、タプルやSQL文のストリームといったアプリケーション固有の形式にデコードすることによって実装されています。
    </para>
   </sect2>

   <sect2 id="logicaldecoding-replication-slots">
<!--
    <title>Replication Slots</title>
-->
    <title>レプリケーションスロット</title>

    <indexterm>
<!--
     <primary>replication slot</primary>
     <secondary>logical replication</secondary>
-->
     <primary>レプリケーションスロット</primary>
     <secondary>ロジカルレプリケーション</secondary>
    </indexterm>

    <para>
<!--
     In the context of logical replication, a slot represents a stream of
     changes that can be replayed to a client in the order they were made on
     the origin server. Each slot streams a sequence of changes from a single
     database.
-->
ロジカルレプリケーションの文脈ではスロットは、元のサーバで行われた変更と同じ順序でクライアント上でリプレイできるようなストリームを表します。
それぞれのスロットは、単一のデータベース上の変更操作の連鎖をストリームとして流します。
    </para>

    <note>
<!--
     <para><productname>PostgreSQL</productname> also has streaming replication slots
     (see <xref linkend="streaming-replication">), but they are used somewhat
     differently there.
-->
<para>また<productname>PostgreSQL</productname>には、ストリーミングレプリケーションスロットがあります
(<xref linkend="streaming-replication">参照)。しかし、ここでの説明とは少し違う使い方がされています。
     </para>
    </note>

    <para>
<!--
     A replication slot has an identifier that is unique across all databases
     in a <productname>PostgreSQL</productname> cluster. Slots persist
     independently of the connection using them and are crash-safe.
-->
それぞれのレプリケーションスロットは<productname>PostgreSQL</productname>クラスタの中で一意な識別子を持っています。スロットは、そのために使用される接続とは独立しており、クラッシュセーフです。
    </para>

    <para>
<!--
     A logical slot will emit each change just once in normal operation.
     The current position of each slot is persisted only at checkpoint, so in
     the case of a crash the slot may return to an earlier LSN, which will
     then cause recent changes to be resent when the server restarts.
     Logical decoding clients are responsible for avoiding ill effects from
     handling the same message more than once.  Clients may wish to record
     the last LSN they saw when decoding and skip over any repeated data or
     (when using the replication protocol) request that decoding start from
     that LSN rather than letting the server determine the start point.
     The Replication Progress Tracking feature is designed for this purpose,
     refer to <link linkend="replication-origins">replication origins</link>.
-->
ロジカルスロットは、通常の操作においては、各々の変更操作を一度だけ送出します。
それぞれのスロットにおける現在位置は、チェックポイントのときにだけ永続的になります。
ですからクラッシュすると、スロットは以前のLSNに戻ってしまうかもしれませんし、サーバの再起動時には最近の変更が再送されることになります。
ロジカルデコーディングのクライアントは、同じメッセージを複数回扱うことによる好ましくない結果を避けることに対して責任を追っています。
クライアントはデコーディングの際に最後に確認したLSNを記録し、繰り返されるデータをスキップしたり、（レプリケーションプロトコルを使う場合に）サーバに開始時点を決めさせるのではなく、記録しておいたLSNからデコーディングを始めるように要求するかもしれません。
レプリケーション進捗追跡機能はこの目的のために設計されています。
<link linkend="replication-origins">replication origins</link>を参照してください。
    </para>

    <para>
<!--
     Multiple independent slots may exist for a single database. Each slot has
     its own state, allowing different consumers to receive changes from
     different points in the database change stream. For most applications, a
     separate slot will be required for each consumer.
-->
単一のデータベース中に、お互いに独立した複数のスロットが存在しても構いません。
それぞれのスロットは自分自身の状態を持っており、データベース更新のストリーム上の別の場所から変更データを受信する異なる消費者があり得ます。
多くのアプリケーションにとっては、各消費者に対して個別のスロットが必要となるでしょう。
    </para>

    <para>
<!--
     A logical replication slot knows nothing about the state of the
     receiver(s).  It's even possible to have multiple different receivers using
     the same slot at different times; they'll just get the changes following
     on from when the last receiver stopped consuming them. Only one receiver
     may consume changes from a slot at any given time.
-->
ロジカルレプリケーションスロットは、受信者の状態については関知しません。同時にでなければ、同じスロットを使う複数の異なる受信者を持つことさえできます。その場合は、直近の受信者がストリームの消費を終了した時点から更新データを受信するだけです。
    </para>

    <note>
     <para>
<!--
      Replication slots persist across crashes and know nothing about the state
      of their consumer(s). They will prevent removal of required resources
      even when there is no connection using them. This consumes storage
      because neither required WAL nor required rows from the system catalogs
      can be removed by <command>VACUUM</command> as long as they are required by a replication
      slot.  So if a slot is no longer required it should be dropped.
-->
レプリケーションスロットは、クラッシュをまたがって永続し、消費者の状態については関知しません。
スロットを使う接続がない場合でも、消費者が必要としているリソースが削除されることを防ぎます。
これによりストレージが消費されます。何故ならば、関連するWALもシステムカタログの行も、レプリケーションスロットが必要とする限り<command>VACUUM</command>によって削除されないからです。
したがって、必要でなくなったスロットは削除すべきです。
     </para>
    </note>
   </sect2>

   <sect2>
<!--
    <title>Output Plugins</title>
-->
    <title>出力プラグイン</title>
    <para>
<!--
     Output plugins transform the data from the write-ahead log's internal
     representation into the format the consumer of a replication slot desires.
-->
出力プラグインは、書き込み先行ログの内部データ表現を、レプリケーションスロットの消費者が必要とする形式に変換します。
    </para>
   </sect2>

   <sect2>
<!--
    <title>Exported Snapshots</title>
-->
    <title>スナップショットのエクスポート</title>
    <para>
<!--
     When a new replication slot is created using the streaming replication
     interface (see <xref linkend="protocol-replication-create-slot">), a
     snapshot is exported
     (see <xref linkend="functions-snapshot-synchronization">), which will show
     exactly the state of the database after which all changes will be
     included in the change stream. This can be used to create a new replica by
     using <link linkend="sql-set-transaction"><literal>SET TRANSACTION
     SNAPSHOT</literal></link> to read the state of the database at the moment
     the slot was created. This transaction can then be used to dump the
     database's state at that point in time, which afterwards can be updated
     using the slot's contents without losing any changes.
-->
ストリーミングレプリケーションのインターフェイスを使って新しいスロットを作ると(<xref linkend="protocol-replication-create-slot">参照)、スナップショットがエクスポートされます(<xref linkend="functions-snapshot-synchronization">参照)。
このスナップショットはまさにその時点でのデータベースの状態を示しており、スナップショット以後のすべての変更は更新ストリームに含まれるようになります。
このことを利用して、スロットが作られた際のデータベースの状態を<link linkend="sql-set-transaction"><literal>SET TRANSACTION SNAPSHOT</literal></link>を使って読み込むことにより、新しいレプリカを作ることができます。
このトランザクションは、その時点のデータベースの状態をダンプするために使用することができます。
また、スロットに含まれるデータを使って、ダンプした後で行われた更新を失うことなくデータベースを更新できます。
    </para>
    <para>
<!--
     Creation of a snapshot is not always possible.  In particular, it will
     fail when connected to a hot standby.  Applications that do not require
     snapshot export may suppress it with the <literal>NOEXPORT_SNAPSHOT</>
     option.
-->
スナップショットの作成はいつでも可能なわけではありません。
とりわけ、ホットスタンバイに接続するときは失敗します。
スナップショットのエクスポートが必要ないアプリケーションは、<literal>NOEXPORT_SNAPSHOT</>オプションを使ってスナップショットのエクスポートを抑止できます。
    </para>
   </sect2>
  </sect1>

  <sect1 id="logicaldecoding-walsender">
<!--
   <title>Streaming Replication Protocol Interface</title>
-->
   <title>ストリームレプリケーションプロトコルインターフェイス</title>

   <para>
<!--
    The commands
    <itemizedlist>
     <listitem>
      <para><literal>CREATE_REPLICATION_SLOT <replaceable>slot_name</replaceable> LOGICAL <replaceable>output_plugin</replaceable></literal></para>
     </listitem>

     <listitem>
      <para><literal>DROP_REPLICATION_SLOT <replaceable>slot_name</replaceable></literal> <optional> <literal>WAIT</> </></para>
     </listitem>

     <listitem>
      <para><literal>START_REPLICATION SLOT <replaceable>slot_name</replaceable> LOGICAL ...</literal></para>
     </listitem>
    </itemizedlist>
    are used to create, drop, and stream changes from a replication
    slot, respectively. These commands are only available over a replication
    connection; they cannot be used via SQL.
    See <xref linkend="protocol-replication"> for details on these commands.
-->
コマンド
    <itemizedlist>
     <listitem>
      <para><literal>CREATE_REPLICATION_SLOT <replaceable>slot_name</replaceable> LOGICAL <replaceable>output_plugin</replaceable></literal></para>
     </listitem>

     <listitem>
      <para><literal>DROP_REPLICATION_SLOT <replaceable>slot_name</replaceable></literal> <optional> <literal>WAIT</> </></para>
     </listitem>

     <listitem>
      <para><literal>START_REPLICATION SLOT <replaceable>slot_name</replaceable> LOGICAL ...</literal></para>
     </listitem>
    </itemizedlist>
    は、それぞれレプリケーションスロットに対して更新データを生成、削除、ストリームします。
   </para>

   <para>
<!--
    The command <xref linkend="app-pgrecvlogical"> can be used to control
    logical decoding over a streaming replication connection.  (It uses
    these commands internally.)
-->
コマンド<xref linkend="app-pgrecvlogical">を使ってストリーミングコネクション上のロジカルデコーディングを制御できます(このコマンドは内部で上記のコマンドを使っています)。
   </para>
  </sect1>

  <sect1 id="logicaldecoding-sql">
<!--
   <title>Logical Decoding <acronym>SQL</acronym> Interface</title>
-->
   <title>ロジカルデコーディング<acronym>SQL</acronym>インタフェース</title>

   <para>
<!--
     See <xref linkend="functions-replication"> for detailed documentation on
     the SQL-level API for interacting with logical decoding.
-->
ロジカルデコーディングのSQLレベルのAPIの詳細については、<xref linkend="functions-replication">を参照してください。
   </para>

   <para>
<!--
    Synchronous replication (see <xref linkend="synchronous-replication">) is
    only supported on replication slots used over the streaming replication interface. The
    function interface and additional, non-core interfaces do not support
    synchronous replication.
-->
同期レプリケーション(<xref linkend="synchronous-replication">参照)は、ストリーミングレプリケーションによるレプリケーションスロット上でのみサポートされます。
関数インタフェースおよびコアに対する追加のインタフェースでは同期レプリケーションをサポートしていません。
   </para>
  </sect1>

  <sect1 id="logicaldecoding-catalogs">
<!--
   <title>System Catalogs Related to Logical Decoding</title>
-->
   <title>ロジカルデコーディング関連のシステムカタログ</title>

   <para>
<!--
    The <link linkend="view-pg-replication-slots"><structname>pg_replication_slots</structname></link>
    view and the
    <link linkend="pg-stat-replication-view"><structname>pg_stat_replication</structname></link>
    view provide information about the current state of replication slots and
    streaming replication connections respectively. These views apply to both physical and
    logical replication.
-->
<link linkend="view-pg-replication-slots"><structname>pg_replication_slots</structname></link>ビューと<link linkend="monitoring-stats-views-table"><structname>pg_stat_replication</structname></link>ビューは、レプリケーションスロット、ストリーミングレプリケーションのコネクションのそれぞれの現在の状態に関する情報を提供します。
   </para>
  </sect1>

  <sect1 id="logicaldecoding-output-plugin">
<!--
   <title>Logical Decoding Output Plugins</title>
-->
   <title>ロジカルデコーディングの出力プラグイン</title>
   <para>
<!--
    An example output plugin can be found in the
    <link linkend="test-decoding">
     <filename>contrib/test_decoding</filename>
    </link>
    subdirectory of the PostgreSQL source tree.
-->
PostgreSQLのソースコードのサブディレクトリ<link linkend="test-decoding">
     <filename>contrib/test_decoding</filename>
    </link>にサンプル出力プラグインがあります。
   </para>
   <sect2 id="logicaldecoding-output-init">
<!--
    <title>Initialization Function</title>
<<<<<<< HEAD
-->
    <title>初期化関数</title>
    <indexterm zone="logicaldecoding">
=======
    <indexterm zone="logicaldecoding-output-init">
>>>>>>> REL_10_3
     <primary>_PG_output_plugin_init</primary>
    </indexterm>
    <para>
<!--
     An output plugin is loaded by dynamically loading a shared library with
     the output plugin's name as the library base name. The normal library
     search path is used to locate the library. To provide the required output
     plugin callbacks and to indicate that the library is actually an output
     plugin it needs to provide a function named
     <function>_PG_output_plugin_init</function>. This function is passed a
     struct that needs to be filled with the callback function pointers for
     individual actions.
-->
出力プラグインは、出力プラグインの名前をライブラリのベース名として持つ共有ライブラリを動的にロードすることによってロードされます。
必要な出力プラグインコールバックを提供し、そのライブラリが実際に出力プラグインであることを示すために、<function>_PG_output_plugin_init</function>という名前の関数を作成しなければなりません。
この関数には、各々のアクションに対応するコールバック関数へのポインタを持つ構造体が渡されます。
<programlisting>
typedef struct OutputPluginCallbacks
{
    LogicalDecodeStartupCB startup_cb;
    LogicalDecodeBeginCB begin_cb;
    LogicalDecodeChangeCB change_cb;
    LogicalDecodeCommitCB commit_cb;
    LogicalDecodeMessageCB message_cb;
    LogicalDecodeFilterByOriginCB filter_by_origin_cb;
    LogicalDecodeShutdownCB shutdown_cb;
} OutputPluginCallbacks;

typedef void (*LogicalOutputPluginInit) (struct OutputPluginCallbacks *cb);
</programlisting>
<!--
     The <function>begin_cb</function>, <function>change_cb</function>
     and <function>commit_cb</function> callbacks are required,
     while <function>startup_cb</function>,
     <function>filter_by_origin_cb</function>
     and <function>shutdown_cb</function> are optional.
-->
     コールバック関数の<function>begin_cb</function>、<function>change_cb</function>
     <function>commit_cb</function>は必須ですが、
     <function>startup_cb</function>、     <function>filter_by_origin_cb</function>、それに<function>shutdown_cb</function>必須ではありません。
    </para>
   </sect2>

   <sect2 id="logicaldecoding-capabilities">
<!--
    <title>Capabilities</title>
-->
    <title>機能</title>

    <para>
<!--
     To decode, format and output changes, output plugins can use most of the
     backend's normal infrastructure, including calling output functions. Read
     only access to relations is permitted as long as only relations are
     accessed that either have been created by <command>initdb</command> in
     the <literal>pg_catalog</literal> schema, or have been marked as user
     provided catalog tables using
-->
更新データをデコード、整形、出力するために、出力関数を呼び出すことを含め、出力プラグインはバックエンドの通常のインフラストラクチャのほとんどを利用できます。
テーブルは、<command>initdb</command>で作られ、<literal>pg_catalog</literal>スキーマに含まれているか、以下のコマンドでユーザ定義のカタログテーブルであると印が付けられている限り、読み込み専用のアクセスが許可されます。

<programlisting>
ALTER TABLE user_catalog_table SET (user_catalog_table = true);
CREATE TABLE another_catalog_table(data text) WITH (user_catalog_table = true);
</programlisting>
<!--
     Any actions leading to transaction ID assignment are prohibited. That, among others,
     includes writing to tables, performing DDL changes, and
     calling <literal>txid_current()</literal>.
-->
トランザクションIDの割り当てが発生するような動作は許可されていません。
そのような動作としては、テーブルへの書き込み、DDLの変更操作、<literal>txid_current()</literal>の呼び出しなどがあります。
    </para>
   </sect2>

   <sect2 id="logicaldecoding-output-mode">
<!--
    <title>Output Modes</title>
-->
    <title>出力モード</title>

    <para>
<!--
     Output plugin callbacks can pass data to the consumer in nearly arbitrary
     formats. For some use cases, like viewing the changes via SQL, returning
     data in a data type that can contain arbitrary data (e.g., <type>bytea</type>) is
     cumbersome. If the output plugin only outputs textual data in the
     server's encoding, it can declare that by
     setting <literal>OutputPluginOptions.output_type</>
     to <literal>OUTPUT_PLUGIN_TEXTUAL_OUTPUT</> instead
     of <literal>OUTPUT_PLUGIN_BINARY_OUTPUT</> in
     the <link linkend="logicaldecoding-output-plugin-startup">startup
     callback</>. In that case, all the data has to be in the server's encoding
     so that a <type>text</> datum can contain it. This is checked in assertion-enabled
     builds.
-->
出力プラグインコールバックは、かなり自由な形式で消費者にデータを渡すことができます。
SQLで変更データを見るような場合、任意のかたちでデータを返すことのできるデータ型(たとえば<type>bytea</type>)は扱いにくいです。
出力プラグインがサーバエンコーディングのテキストデータのみを含むことにするには、
<literal>OutputPluginOptions.output_type</>に
<literal>OUTPUT_PLUGIN_BINARY_OUTPUT</>ではなく、<literal>OUTPUT_PLUGIN_TEXTUAL_OUTPUT</>を設定することによって宣言できます。
この場合、<type>text</>datumが格納することができるように、すべてのデータはサーバエンコーディングでエンコードされていなければなりません。
    </para>
   </sect2>

   <sect2 id="logicaldecoding-output-plugin-callbacks">
<!--
    <title>Output Plugin Callbacks</title>
-->
    <title>出力プラグインコールバック</title>

    <para>
<!--
     An output plugin gets notified about changes that are happening via
     various callbacks it needs to provide.
-->
出力プラグインには、必要に応じて発生した更新に関する通知が様々なコールバックを通じて送られます。
    </para>

    <para>
<!--
     Concurrent transactions are decoded in commit order, and only changes
     belonging to a specific transaction are decoded between
     the <literal>begin</literal> and <literal>commit</literal>
     callbacks. Transactions that were rolled back explicitly or implicitly
     never get
     decoded. Successful savepoints are
     folded into the transaction containing them in the order they were
     executed within that transaction.
-->
同時に実行されたトランザクションは、コミットした順番にデコードされます。
指定したトランザクションに含まれる更新だけが<literal>begin</literal>と<literal>commit</literal>の間のコールバックによってデコードされます。
明示的あるいは暗黙的にロールバックされたトランザクションは、決してデコードされません。
成功したセーブポイントは、実行された順番にセーブポイントが実行されたトランザクションの中に折り込まれます。
    </para>

    <note>
     <para>
<!--
      Only transactions that have already safely been flushed to disk will be
      decoded. That can lead to a <command>COMMIT</command> not immediately being decoded in a
      directly following <literal>pg_logical_slot_get_changes()</literal>
      when <varname>synchronous_commit</varname> is set
      to <literal>off</literal>.
-->
ディスクに安全に書きだされたトランザクションだけがデコードされます。
そのため、<varname>synchronous_commit</varname>が<literal>off</literal>の場合には、直後に呼び出された<literal>pg_logical_slot_get_changes()</literal>がその<command>COMMIT</command>をデコードしないことがあります。
     </para>
    </note>

    <sect3 id="logicaldecoding-output-plugin-startup">
<!--
     <title>Startup Callback</title>
-->
     <title>開始コールバック</title>
     <para>
<!--
      The optional <function>startup_cb</function> callback is called whenever
      a replication slot is created or asked to stream changes, independent
      of the number of changes that are ready to be put out.
-->
ストリームに投入可能な更新の数に関係なく、レプリケーションスロットが作られるか、ストリームの変更がリクエストされた場合にオプションの<function>startup_cb</function>コールバック呼び出されます。
<programlisting>
typedef void (*LogicalDecodeStartupCB) (struct LogicalDecodingContext *ctx,
                                        OutputPluginOptions *options,
                                        bool is_init);
</programlisting>
<!--
      The <literal>is_init</literal> parameter will be true when the
      replication slot is being created and false
      otherwise. <parameter>options</parameter> points to a struct of options
      that output plugins can set:
-->
<literal>is_init</literal> パラメータは、レプリケーションスロットが作られる際にはtrue、それ以外ではfalseになります。
<parameter>options</parameter>は、出力プラグインが書き込む以下の構造体を指します。
<programlisting>
typedef struct OutputPluginOptions
{
    OutputPluginOutputType output_type;
} OutputPluginOptions;
</programlisting>
<!--
      <literal>output_type</literal> has to either be set to
      <literal>OUTPUT_PLUGIN_TEXTUAL_OUTPUT</literal>
      or <literal>OUTPUT_PLUGIN_BINARY_OUTPUT</literal>. See also
      <xref linkend="logicaldecoding-output-mode">.
-->
      <literal>output_type</literal>は<literal>OUTPUT_PLUGIN_TEXTUAL_OUTPUT</literal>か<literal>OUTPUT_PLUGIN_BINARY_OUTPUT</literal>のどちらかです。
      <xref linkend="logicaldecoding-output-mode">を参照してください。
     </para>

     <para>
<!--
      The startup callback should validate the options present in
      <literal>ctx-&gt;output_plugin_options</literal>. If the output plugin
      needs to have a state, it can
      use <literal>ctx-&gt;output_plugin_private</literal> to store it.
-->
開始コールバックでは、<literal>ctx-&gt;output_plugin_options</literal>で指定されるオプションを検証しましょう。
出力プラグインが状態を持つ必要がある場合には、<literal>ctx-&gt;output_plugin_private</literal>を利用できます。
     </para>
    </sect3>

    <sect3 id="logicaldecoding-output-plugin-shutdown">
<!--
     <title>Shutdown Callback</title>
-->
     <title>終了コールバック</title>

     <para>
<!--
      The optional <function>shutdown_cb</function> callback is called
      whenever a formerly active replication slot is not used anymore and can
      be used to deallocate resources private to the output plugin. The slot
      isn't necessarily being dropped, streaming is just being stopped.
-->
以前アクティブだったレプリケーションスロットが使われなくなったら、いつでも<function>shutdown_cb</function>コールバックが呼び出され、出力プラグインのプライベートリソースが解放されます。
スロットは削除される必要はありません。単にストリームが停止します。
<programlisting>
typedef void (*LogicalDecodeShutdownCB) (struct LogicalDecodingContext *ctx);
</programlisting>
     </para>
    </sect3>

    <sect3 id="logicaldecoding-output-plugin-begin">
<!--
     <title>Transaction Begin Callback</title>
-->
     <title>トランザクション開始コールバック</title>

     <para>
<!--
      The required <function>begin_cb</function> callback is called whenever a
      start of a committed transaction has been decoded. Aborted transactions
      and their contents never get decoded.
-->
必須である<function>begin_cb</function>コールバックは、コミットしたトランザクションの開始がデコードされる際に必ず呼び出されます。
アボートしたトランザクションとその内容は決してデコードされません。
<programlisting>
typedef void (*LogicalDecodeBeginCB) (struct LogicalDecodingContext *ctx,
                                      ReorderBufferTXN *txn);
</programlisting>
<!--
      The <parameter>txn</parameter> parameter contains meta information about
      the transaction, like the time stamp at which it has been committed and
      its XID.
-->
<parameter>txn</parameter>引数は、コミット時のタイムスタンプやトランザクションIDなどのトランザクションに関するメタ情報を含みます。
     </para>
    </sect3>

    <sect3 id="logicaldecoding-output-plugin-commit">
<!--
     <title>Transaction End Callback</title>
-->
     <title>トランザクション終了コールバック</title>

     <para>
<!--
      The required <function>commit_cb</function> callback is called whenever
      a transaction commit has been
      decoded. The <function>change_cb</function> callbacks for all modified
      rows will have been called before this, if there have been any modified
      rows.
-->
必須である<function>commit_cb</function>コールバックは、トランザクションのコミットがデコードされる際に必ず呼び出されます。
行が更新された場合は、それぞれの行に対して<function>change_cb</function>コールバックが、<function>commit_cb</function>の前に呼び出されます。

<programlisting>
typedef void (*LogicalDecodeCommitCB) (struct LogicalDecodingContext *ctx,
                                       ReorderBufferTXN *txn,
                                       XLogRecPtr commit_lsn);
</programlisting>
     </para>
    </sect3>

    <sect3 id="logicaldecoding-output-plugin-change">
<!--
     <title>Change Callback</title>
-->
     <title>更新コールバック</title>

     <para>
<!--
      The required <function>change_cb</function> callback is called for every
      individual row modification inside a transaction, may it be
      an <command>INSERT</command>, <command>UPDATE</command>,
      or <command>DELETE</command>. Even if the original command modified
      several rows at once the callback will be called individually for each
      row.
-->
トランザクション内の<command>INSERT</command>、<command>UPDATE</command>、<command>DELETE</command>の更新に対して、必須コールバックである<function>change_cb</function>が呼び出されます。
元の更新コマンドが複数の行を一度に更新する場合は、それぞれの行に対してこのコールバックが呼び出されます。
<programlisting>
typedef void (*LogicalDecodeChangeCB) (struct LogicalDecodingContext *ctx,
                                       ReorderBufferTXN *txn,
                                       Relation relation,
                                       ReorderBufferChange *change);
</programlisting>
<!--
      The <parameter>ctx</parameter> and <parameter>txn</parameter> parameters
      have the same contents as for the <function>begin_cb</function>
      and <function>commit_cb</function> callbacks, but additionally the
      relation descriptor <parameter>relation</parameter> points to the
      relation the row belongs to and a struct
      <parameter>change</parameter> describing the row modification are passed
      in.
-->
<parameter>ctx</parameter>と<parameter>txn</parameter>は、<function>begin_cb</function>、<function>commit_cb</function>コールバックでは同じ内容になります。
これに加えて<parameter>relation</parameter>は行が属するリレーションを指定し、行の変更を記述する<parameter>change</parameter>パラメータが渡されます。
     </para>

     <note>
      <para>
<!--
       Only changes in user defined tables that are not unlogged
       (see <xref linkend="SQL-CREATETABLE-UNLOGGED">) and not temporary
       (see <xref linkend="SQL-CREATETABLE-TEMPORARY">) can be extracted using
       logical decoding.
-->
unloggedテーブル(<xref linkend="SQL-CREATETABLE-UNLOGGED">参照)と(<xref linkend="SQL-CREATETABLE-TEMPORARY">参照)以外のユーザ定義テーブルだけが、ロジカルデコーディングを使って更新データを取得できます。

      </para>
     </note>
    </sect3>

     <sect3 id="logicaldecoding-output-plugin-filter-origin">
<!--
     <title>Origin Filter Callback</title>
-->
     <title>オリジンフィルターコールバック</title>

     <para>
<!--
       The optional <function>filter_by_origin_cb</function> callback
       is called to determine whether data that has been replayed
       from <parameter>origin_id</parameter> is of interest to the
       output plugin.
-->
オプションの<function>filter_by_origin_cb</function>コールバックは、<parameter>origin_id</parameter>からリプレイされたデータがアウトプットプラグインの対象となるかどうかを判定するために呼び出されます。
<programlisting>
typedef bool (*LogicalDecodeFilterByOriginCB) (struct LogicalDecodingContext *ctx,
                                               RepOriginId origin_id);
</programlisting>
<!--
      The <parameter>ctx</parameter> parameter has the same contents
      as for the other callbacks. No information but the origin is
      available. To signal that changes originating on the passed in
      node are irrelevant, return true, causing them to be filtered
      away; false otherwise. The other callbacks will not be called
      for transactions and changes that have been filtered away.
-->
<parameter>ctx</parameter>パラメータは、他のコールバックと同じ内容を持ちます。
オリジンの情報だけが得られます。
渡されたノードで発生した変更が無関係であることを伝えるには、trueを返します。
これにより、その変更は無視されることになります。
無視されたトランザクション変更に関わる他のコールバックは呼び出されません。
     </para>
     <para>
<!--
       This is useful when implementing cascading or multidirectional
       replication solutions. Filtering by the origin allows to
       prevent replicating the same changes back and forth in such
       setups.  While transactions and changes also carry information
       about the origin, filtering via this callback is noticeably
       more efficient.
-->
これは、カスケード、あるいは双方向レプリケーションソリューションを実装する際に有用です。
オリジンでフィルターすることにより、そのような構成で、同じ変更のレプリケーションが往復するのを防ぐことができます。
トランザクションや変更もオリジンに関する情報を持っていますが、このコールバックでフィルターするほうがずっと効率的です。
     </para>
     </sect3>

    <sect3 id="logicaldecoding-output-plugin-message">
<!--
     <title>Generic Message Callback</title>
-->
     <title>汎用メッセージコールバック</title>

     <para>
<!--
      The optional <function>message_cb</function> callback is called whenever
      a logical decoding message has been decoded.
-->
オプションの<function>message_cb</function>コールバックは、ロジカルデコーディングメッセージがデコードされる度に呼び出されます。
<programlisting>
typedef void (*LogicalDecodeMessageCB) (struct LogicalDecodingContext *ctx,
                                        ReorderBufferTXN *txn,
                                        XLogRecPtr message_lsn,
                                        bool transactional,
                                        const char *prefix,
                                        Size message_size,
                                        const char *message);
</programlisting>
<!--
      The <parameter>txn</parameter> parameter contains meta information about
      the transaction, like the time stamp at which it has been committed and
      its XID. Note however that it can be NULL when the message is
      non-transactional and the XID was not assigned yet in the transaction
      which logged the message. The <parameter>lsn</parameter> has WAL
      location of the message. The <parameter>transactional</parameter> says
      if the message was sent as transactional or not.
      The <parameter>prefix</parameter> is arbitrary null-terminated prefix
      which can be used for identifying interesting messages for the current
      plugin. And finally the <parameter>message</parameter> parameter holds
      the actual message of <parameter>message_size</parameter> size.
-->
<parameter>txn</parameter>パラメータは、コミット時のタイムスタンプとXIDのような、トランザクションに関するメタ情報を含んでいます。
ただし、そのメッセージがトランザクション扱いではなく、メッセージをログしたトランザクションにXIDが割り当てられてない場合はNULLになることに注意してください。
<parameter>lsn</parameter>は、メッセージに対応するWALの位置です。
<parameter>transactional</parameter>は、メッセージがトランザクションとして送られたものかどうかを表しています。
<parameter>prefix</parameter>はnull終端された任意の接頭辞で、現在のプラグインが興味のあるメッセージを特定するために利用できます。
最後に、<parameter>message</parameter>パラメータは、大きさが<parameter>message_size</parameter>の、実際のメッセージを保持します。
     </para>
     <para>
<!--
      Extra care should be taken to ensure that the prefix the output plugin
      considers interesting is unique. Using name of the extension or the
      output plugin itself is often a good choice.
-->
出力プラグインが利用を考慮している接頭辞が一意になるように、特に注意を払ってください。
拡張の名前か、出力プラグインの名前を使うのが良い場合が多いです。
     </para>
    </sect3>

   </sect2>

   <sect2 id="logicaldecoding-output-plugin-output">
<!--
    <title>Functions for Producing Output</title>
-->
    <title>出力生成関数</title>

    <para>
<!--
     To actually produce output, output plugins can write data to
     the <literal>StringInfo</literal> output buffer
     in <literal>ctx-&gt;out</literal> when inside
     the <function>begin_cb</function>, <function>commit_cb</function>,
     or <function>change_cb</function> callbacks. Before writing to the output
     buffer, <function>OutputPluginPrepareWrite(ctx, last_write)</function> has
     to be called, and after finishing writing to the
     buffer, <function>OutputPluginWrite(ctx, last_write)</function> has to be
     called to perform the write. The <parameter>last_write</parameter>
     indicates whether a particular write was the callback's last write.
-->
<function>begin_cb</function>、<function>commit_cb</function>、<function>change_cb</function>コールバックにおいて、出力プラグインは実際にデータ出力するために<literal>ctx-&gt;out</literal>の<literal>StringInfo</literal>出力バッファに書き込みます。
出力バッファに書き込む前に、<function>OutputPluginPrepareWrite(ctx, last_write)</function>を呼び出します。
また、書き込みバッファにデータを書き終えたら、<function>OutputPluginWrite(ctx, last_write)</function>を呼び出してデータの書き込みを実施します。
<parameter>last_write</parameter>引数により、その書き込みがコールバックの最終的な書き込みであるかどうかを指定します。
    </para>

    <para>
<!--
     The following example shows how to output data to the consumer of an
     output plugin:
-->
以下の例では、出力プラグインにおいて消費者に向けてデータを出力する方法を示します。
<programlisting>
OutputPluginPrepareWrite(ctx, true);
appendStringInfo(ctx->out, "BEGIN %u", txn->xid);
OutputPluginWrite(ctx, true);
</programlisting>
    </para>
   </sect2>
  </sect1>

  <sect1 id="logicaldecoding-writer">
<!--
   <title>Logical Decoding Output Writers</title>
-->
   <title>ロジカルデコーディング出力ライター</title>

   <para>
<!--
    It is possible to add more output methods for logical decoding.
    For details, see
    <filename>src/backend/replication/logical/logicalfuncs.c</filename>.
    Essentially, three functions need to be provided: one to read WAL, one to
    prepare writing output, and one to write the output
    (see <xref linkend="logicaldecoding-output-plugin-output">).
-->
ロジカルデコーディングに、別な出力方法を追加することもできます。
<filename>src/backend/replication/logical/logicalfuncs.c</filename>を参照してください。
基本的に、3つの関数を用意する必要があります。
WALを読む関数、出力データの書き込みを準備する関数、それに出力データを書き込む関数です。
(<xref linkend="logicaldecoding-output-plugin-output">参照)。
   </para>
  </sect1>

  <sect1 id="logicaldecoding-synchronous">
<!--
   <title>Synchronous Replication Support for Logical Decoding</title>
-->
   <title>ロジカルデコーディングにおける同期レプリケーションのサポート</title>

   <para>
<!--
    Logical decoding can be used to build
    <link linkend="synchronous-replication">synchronous
    replication</link> solutions with the same user interface as synchronous
    replication for <link linkend="streaming-replication">streaming
    replication</link>.  To do this, the streaming replication interface
    (see <xref linkend="logicaldecoding-walsender">) must be used to stream out
    data. Clients have to send <literal>Standby status update (F)</literal>
    (see <xref linkend="protocol-replication">) messages, just like streaming
    replication clients do.
-->
<link linkend="streaming-replication">ストリーミングレプリケーション</link>における同期レプリケーションと同じユーザインターフェイスで、ロジカルデコーディングを使って<link linkend="synchronous-replication">同期レプリケーション</link>ソリューションを構築することができます。
そのためには、ストリーミングレプリケーションインターフェイス(<xref linkend="logicaldecoding-walsender">参照)を使ってデータをストリーム出力します。
ストリーミングレプリケーションクライアントが行っているのと同じように、<literal>状態の更新</literal>(<xref linkend="protocol-replication">参照)メッセージを送信しなければなりません。
   </para>

   <note>
    <para>
<!--
     A synchronous replica receiving changes via logical decoding will work in
     the scope of a single database. Since, in contrast to
     that, <parameter>synchronous_standby_names</parameter> currently is
     server wide, this means this technique will not work properly if more
     than one database is actively used.
-->
<parameter>synchronous_standby_names</parameter>がサーバ全体に適用されるのに対し、ロジカルデコーディングを通じて変更データを受け取る同期レプリカは、単一のデータベースのスコープの範囲で動作します。
このことにより、複数のデータベースが同時に使用される環境では、ロジカルデコーディングを使った同期レプリケーションはうまく動きません。
     </para>
   </note>
  </sect1>
 </chapter>
