<!--
doc/src/sgml/ref/create_policy.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEPOLICY">
 <indexterm zone="sql-createpolicy">
  <primary>CREATE POLICY</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE POLICY</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
  <refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE POLICY</refname>
<!--
  <refpurpose>define a new policy for a table</refpurpose>
-->
  <refpurpose>テーブルに新しいポリシーを定義する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE POLICY <replaceable class="parameter">name</replaceable> ON <replaceable class="parameter">table_name</replaceable>
    [ FOR { ALL | SELECT | INSERT | UPDATE | DELETE } ]
    [ TO { <replaceable class="parameter">role_name</replaceable> | PUBLIC | CURRENT_USER | SESSION_USER } [, ...] ]
    [ USING ( <replaceable class="parameter">using_expression</replaceable> ) ]
    [ WITH CHECK ( <replaceable class="parameter">check_expression</replaceable> ) ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   The <command>CREATE POLICY</command> command defines a new policy for a
   table.  Note that row-level security must also be enabled on the table using
   <command>ALTER TABLE</command> in order for created policies to be applied.
-->
<command>CREATE POLICY</command>はテーブルに新しいポリシーを定義します。
作成したポリシーを適用するには、<command>ALTER TABLE</command>を使ってテーブルの行レベルセキュリティを有効にしなければならないことに注意して下さい。
  </para>

  <para>
<!--
   A policy grants the permission to select, insert, update, or delete rows
   that match the relevant policy expression.  Existing table rows are
   checked against the expression specified via <literal>USING</literal>, while new rows that
   would be created via <literal>INSERT</literal> or <literal>UPDATE</literal> are checked against the expression
   specified via <literal>WITH CHECK</literal>.  When a <literal>USING</literal> expression returns true for a given
   row then that row is visible to the user, while if a false or null is
   returned then the row is not visible.  When a <literal>WITH CHECK</literal> expression
   returns true for a row then that row is added, while if a false or null is
   returned then an error occurs.
-->
ポリシーは、それを定義する式にマッチした行をselect/insert/update/deleteする権限を与えます。
テーブルの既存の行は<literal>USING</literal>で指定した式によって検査されます。
<literal>INSERT</literal>または<literal>UPDATE</literal>によって作成される新しい行は<literal>WITH CHECK</literal>で指定した式によって検査されます。
ある行について<literal>USING</literal>式がtrueを返した場合、その行はユーザに可視となりますが、falseまたはnullを返した場合は不可視となります。
行に対して<literal>WITH CHECK</literal>式がtrueを返した場合、その行は追加されますが、falseまたはnullを返した場合はエラーが発生します。
  </para>

  <para>
<!--
   Generally, the system will enforce filter conditions imposed using
   security policies prior to qualifications that appear in the query itself,
   in order to prevent the inadvertent exposure of the protected data to
   user-defined functions which might not be trustworthy.  However,
   functions and operators marked by the system (or the system
   administrator) as <literal>LEAKPROOF</literal> may be evaluated before policy
   expressions, as they are assumed to be trustworthy.
-->
一般に、システムは問い合わせ自体に記述される制限より前に、セキュリティポリシーを使ったフィルター条件を実行します。
これは守られるべきデータが信頼できないかもしれないユーザ定義関数に偶然に意図せずに渡されることを防ぐためです。
しかし、システム（またはシステム管理者）によって<literal>LEAKPROOF</literal>であるとされた関数や演算子については、信頼できるとみなして良いので、ポリシー式より先に評価される場合があります。
  </para>

  <para>
<!--
   For <command>INSERT</command> and <command>UPDATE</command> statements,
   <literal>WITH CHECK</literal> expressions are enforced after
   <literal>BEFORE</literal> triggers are fired, and before any data modifications are made.
   Thus a <literal>BEFORE ROW</literal> trigger may modify the data to be inserted, affecting
   the result of the security policy check.  <literal>WITH CHECK</literal> expressions are
   enforced before any other constraints.
-->
<command>INSERT</command>文および<command>UPDATE</command>文では、<literal>BEFORE</literal>トリガーが実行された後で、かつ、いかなるデータ更新も行われるより前に<literal>WITH CHECK</literal>式が実行されます。
従って、<literal>BEFORE ROW</literal>トリガーは挿入されるデータを変更する場合があり、これはセキュリティポリシーの検査の結果に影響を与えます。
<literal>WITH CHECK</literal>式は他のいかなる制約よりも前に実行されます。
  </para>

  <para>
<!--
   Policy names are per-table.  Therefore, one policy name can be used for many
   different tables and have a definition for each table which is appropriate to
   that table.
-->
ポリシー名はテーブル毎につけられます。
従って、1つのポリシー名を多くの異なるテーブルに使うことができます。
また、その定義は各テーブル毎に異なった、適切な内容にできます。
  </para>

  <para>
<!--
   Policies can be applied for specific commands or for specific roles.  The
   default for newly created policies is that they apply for all commands and
   roles, unless otherwise specified.  If multiple policies apply to a given
   statement, they will be combined using <quote>or</quote> (although <literal>ON CONFLICT DO
   UPDATE</> and <literal>INSERT</> policies are not combined in this way, but
   rather enforced as noted at each stage of <literal>ON CONFLICT</> execution).
-->
ポリシーは特定のコマンドまたは特定のロールに対して適用することができます。
新しく作成するポリシーのデフォルトは、特に指定しなければ、すべてのコマンドとロールに適用、となっています。
ある文に複数のポリシーを適用する場合、それらは<quote>or</quote>を使って結合されます
（ただし、<literal>ON CONFLICT DO UPDATE</>および<literal>INSERT</>のポリシーはこのようには結合されず、<literal>ON CONFLICT</>の実行の各ステージに記された通りに実行されます）。
  </para>

  <para>
<!--
   Further, for commands that can have both <literal>USING</literal>
   and <literal>WITH CHECK</literal> policies (<literal>ALL</literal>
   and <literal>UPDATE</literal>), if no <literal>WITH CHECK</literal> policy
   is defined, then the <literal>USING</literal> policy will be used for both
   what rows are visible (normal <literal>USING</literal> case) and which rows
   will be allowed to be added (<literal>WITH CHECK</literal> case).
-->
また、<literal>USING</literal>と<literal>WITH CHECK</literal>の両方のポリシーを持ち得るコマンド（<literal>ALL</literal>と<literal>UPDATE</literal>）について、<literal>WITH CHECK</literal>ポリシーが定義されていない場合、どの行が可視か（通常の<literal>USING</literal>と同じ）とどの行が追加可能か（<literal>WITH CHECK</literal>に相当）の両方で<literal>USING</literal>ポリシーが使用されます。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <para>
<!--
      The name of the policy to be created.  This must be distinct from the
      name of any other policy for the table.
-->
作成するポリシーの名前です。
同じテーブルの他のポリシーとは異なる名前でなければなりません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">table_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name (optionally schema-qualified) of the table the
      policy applies to.
-->
ポリシーが適用されるテーブルの名前（スキーマ修飾可）です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">command</replaceable></term>
    <listitem>
     <para>
<!--
      The command to which the policy applies.  Valid options are
      <command>ALL</command>, <command>SELECT</command>,
      <command>INSERT</command>, <command>UPDATE</command>,
      and <command>DELETE</command>.
      <command>ALL</command> is the default.
      See below for specifics regarding how these are applied.
-->
ポリシーが適用されるコマンドです。
有効なオプションは<command>ALL</command>、<command>SELECT</command>、<command>INSERT</command>、<command>UPDATE</command>、<command>DELETE</command>です。
デフォルトは<command>ALL</command>です。
これらがどのように適用されるかの詳細は以下を参照して下さい。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">role_name</replaceable></term>
    <listitem>
     <para>
<!--
      The roles to which the policy is to be applied.  The default is
      <literal>PUBLIC</literal>, which will apply the policy to all roles.
-->
ポリシーが適用されるロールです。
デフォルトは<literal>PUBLIC</literal>で、すべてのロールに対してポリシーが適用されます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">using_expression</replaceable></term>
    <listitem>
     <para>
<!--
      Any <acronym>SQL</acronym> conditional expression (returning
      <type>boolean</type>).  The conditional expression cannot contain
      any aggregate or window functions.  This expression will be added
      to queries that refer to the table if row level security is enabled
      and rows for which the expression returns true will be visible.  Any
      rows for which the expression returns false or null will not be
      visible to the user.
-->
任意の<acronym>SQL</acronym>条件式（戻り値は<type>boolean</type>）です。
条件式に集約関数やウィンドウ関数を含めることはできません。
行レベルセキュリティが有功なときは、テーブルへの問い合わせにこの式が追加され、この式がtrueを返す行が可視となります。
この式がfalseまたはnullを返す行は、ユーザには不可視となります。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">check_expression</replaceable></term>
    <listitem>
     <para>
<!--
      Any <acronym>SQL</acronym> conditional expression (returning
      <type>boolean</type>).  The conditional expression cannot contain
      any aggregate or window functions.  This expression will be used with
      <command>INSERT</command> and <command>UPDATE</command> queries against
      the table if row level security is enabled and only rows where the
      expression evaluates to true will be allowed.  An error will be thrown
      if the expression evaluates to false or null for any of the records
      inserted or any of the records that result from the update.
-->
任意の<acronym>SQL</acronym>条件式（戻り値は<type>boolean</type>）です。
条件式に集約関数やウィンドウ関数を含めることはできません。
この式は、そのテーブルに対する<command>INSERT</command>および<command>UPDATE</command>の問い合わせで使用され、この式の評価がtrueになる行のみが許されます。
挿入されるレコード、あるいは更新の結果のレコードでこの式の評価がfalseまたはnullになるものについては、エラーが発生します。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

 <refsect2>
<!--
   <title>Per-Command policies</title>
-->
   <title>コマンド毎のポリシー</title>

   <variablelist>

     <varlistentry id="SQL-CREATEPOLICY-ALL">
      <term><literal>ALL</></term>
      <listitem>
       <para>
<!--
         Using <literal>ALL</literal> for a policy means that it will apply
         to all commands, regardless of the type of command.  If an
         <literal>ALL</literal> policy exists and more specific policies
         exist, then both the <literal>ALL</literal> policy and the more
         specific policy (or policies) will be combined using
         <quote>or</quote>, as usual for overlapping policies.
         Additionally, <literal>ALL</literal> policies will be applied to
         both the selection side of a query and the modification side, using
         the <literal>USING</literal> policy for both if only a <literal>USING</literal> policy has been defined.
-->
ポリシーに<literal>ALL</literal>を使うのは、そのポリシーはコマンドの種類に関係なく、すべてのコマンドに適用されるという意味になります。
<literal>ALL</literal>のポリシーと特定のコマンドに対するポリシーの両方が存在する場合、重なっているポリシーの常として、それらがすべて<quote>or</quote>で結合されます。
さらに<literal>ALL</literal>のポリシーは、問い合わせの選択側と更新側の両方で適用されます。
このとき、<literal>USING</literal>のポリシーだけが定義されていたら、両方について<literal>USING</literal>のポリシーを使用します。
       </para>
       <para>
<!--
         As an example, if an <literal>UPDATE</literal> is issued, then the
         <literal>ALL</literal> policy will be applicable to both what the
         <literal>UPDATE</literal> will be able to select out as rows to be
         updated (with the <literal>USING</literal> expression being applied), and it will be
         applied to rows that result from the <literal>UPDATE</literal>
         statement, to check if they are permitted to be added to the table
         (using the <literal>WITH CHECK</literal> expression, if defined, and the <literal>USING</literal> expression
         otherwise).  If an <command>INSERT</command> or <command>UPDATE</command> command attempts to add rows to
         the table that do not pass the <literal>ALL</literal> <literal>WITH CHECK</literal>
         expression, the entire command will be aborted.  Note that if only a
         <literal>USING</literal> clause is specified then that clause will be
         used for both <literal>USING</literal> and
         <literal>WITH CHECK</literal> cases.
-->
例えば<literal>UPDATE</literal>が実行されるとき、<literal>ALL</literal>のポリシーは、<literal>UPDATE</literal>が更新対象の行として選択できる行（<literal>USING</literal>式が適用されます）と、<literal>UPDATE</literal>文の結果としてできる行がテーブルに追加できるかどうかの検証（<literal>WITH CHECK</literal>が定義されていれば、それが適用され、なければ<literal>USING</literal>式が使われます）の両方で適用可能です。
<command>INSERT</command>または<command>UPDATE</command>コマンドが<literal>ALL</literal>の<literal>WITH CHECK</literal>式に反する行をテーブルに追加しようとした場合、コマンド全体が中止されます。
<literal>USING</literal>句のみが指定されていた場合、それが<literal>USING</literal>と<literal>WITH CHECK</literal>の両方の場合に対して使われることに注意して下さい。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="SQL-CREATEPOLICY-SELECT">
      <term><literal>SELECT</></term>
      <listitem>
       <para>
<!--
         Using <literal>SELECT</literal> for a policy means that it will apply
         to <literal>SELECT</literal> queries and whenever
         <literal>SELECT</literal> permissions are required on the relation the
         policy is defined for.  The result is that only those records from the
         relation that pass the <literal>SELECT</literal> policy will be
         returned during a <literal>SELECT</literal> query, even if other
         records exist in the relation and that queries which require
         <literal>SELECT</literal> permissions, such as
         <literal>UPDATE</literal>, will also only see those records
         which are allowed by the <literal>SELECT</literal> policy.
         The <literal>SELECT</literal> policy only accepts the
         <literal>USING</literal> expression as it only applies in cases where
         records are being retrieved from the relation.
-->
ポリシーに<literal>SELECT</literal>を使うのは、そのポリシーは<literal>SELECT</literal>の問い合わせの他に、そのポリシーが定義されているリレーションに対して<literal>SELECT</literal>権限が必要な時は常に適用されるという意味になります。
その結果、<literal>SELECT</literal>問い合わせでは、リレーションに他のレコードが存在したとしても、<literal>SELECT</literal>ポリシーにかなうレコードだけが返されます。
また、<literal>UPDATE</literal>など<literal>SELECT</literal>権限が必要な問い合わせでも、<literal>SELECT</literal>ポリシーによって許可されるレコードだけが見えます。
<literal>SELECT</literal>ポリシーはリレーションからレコードを取り出す場合にしか適用されないので、<literal>USING</literal>式のみを受け付けます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="SQL-CREATEPOLICY-INSERT">
      <term><literal>INSERT</></term>
      <listitem>
       <para>
<!--
         Using <literal>INSERT</literal> for a policy means that it will apply
         to <literal>INSERT</literal> commands.  Rows being inserted that do
         not pass this policy will result in a policy violation error, and the
         entire <literal>INSERT</literal> command will be aborted.  The
         <literal>INSERT</literal> policy only accepts the
         <literal>WITH CHECK</literal> expression as it only applies in cases
         where records are being added to the relation.
-->
ポリシーに<literal>INSERT</literal>を使うのは、そのポリシーは<literal>INSERT</literal>コマンドに適用されるという意味になります。
このポリシーに反する行を挿入しようとすると、ポリシー違反エラーを起こし、<literal>INSERT</literal>コマンド全体が中止されます。
<literal>INSERT</literal>ポリシーはリレーションにレコードを追加する場合にしか適用されないため、<literal>WITH CHECK</literal>式のみを受け付けます。
       </para>
       <para>
<!--
         Note that <literal>INSERT</literal> with <literal>ON CONFLICT DO
         UPDATE</literal> requires that any <literal>INSERT</literal> policy
         <literal>WITH CHECK</literal> expression passes for any rows appended
         to the relation by the <literal>INSERT</literal> path only.
-->
<literal>ON CONFLICT DO UPDATE</literal>のある<literal>INSERT</literal>では、すべての<literal>INSERT</literal>ポリシーの<literal>WITH CHECK</literal>式が、リレーションに追加されるすべての行について、<literal>INSERT</literal>の部分についてのみ適っていれば良いことに注意して下さい。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="SQL-CREATEPOLICY-UPDATE">
      <term><literal>UPDATE</></term>
      <listitem>
       <para>
<!--
         Using <literal>UPDATE</literal> for a policy means that it will apply
         to <literal>UPDATE</literal> commands (or auxiliary <literal>ON
         CONFLICT DO UPDATE</literal> clauses of <literal>INSERT</literal>
         commands).  As <literal>UPDATE</literal> involves pulling an existing
         record and then making changes to some portion (but possibly not all)
         of the record, the <literal>UPDATE</literal> policy accepts both a
         <literal>USING</literal> expression and a <literal>WITH CHECK</literal>
         expression.
-->
ポリシーに<literal>UPDATE</literal>を使うのは、そのポリシーは<literal>UPDATE</literal>コマンド（あるいは補助的に<literal>INSERT</literal>コマンドの<literal>ON CONFLICT DO UPDATE</literal>句）で適用されるという意味になります。
<literal>UPDATE</literal>は既存のレコードを取り出すことと、その後でレコードの一部（全部ではないかもしれない)を変更することが含まれるので、<literal>UPDATE</literal>ポリシーは<literal>USING</literal>式と<literal>WITH CHECK</literal>式の両方を受け付けます。
       </para>
         
       <para>
<!--
         The <literal>USING</literal> expression will be used to
         determine which records the <literal>UPDATE</literal> command will see
         to operate against, while the <literal>WITH CHECK</literal> expression
         defines what rows are allowed to be added back into the relation
         (similar to the <literal>INSERT</literal> policy).  
-->
<literal>USING</literal>式は<literal>UPDATE</literal>コマンドが操作の対象としてどのレコードを見ることができるかを決めるのに使われます。
一方で<literal>WITH CHECK</literal>はリレーションにどんな行を追加して戻すことができるかを定義します（<literal>INSERT</literal>のポリシーと似ています）。
       </para>

       <para>
<!--
         When an <literal>UPDATE</literal> command is used with a
         <literal>WHERE</literal> clause or a <literal>RETURNING</literal>
         clause, <literal>SELECT</literal> rights are also required on the
         relation being updated and the appropriate <literal>SELECT</literal>
         and <literal>ALL</literal> policies will be combined (using OR for any
         overlapping <literal>SELECT</literal> related policies found) with the
         <literal>USING</literal> clause of the <literal>UPDATE</literal> policy
         using AND.  Therefore, in order for a user to be able to
         <literal>UPDATE</literal> a specific set of rows using a
         <literal>WHERE</literal> clause, the user must have access to the
         row(s) through a <literal>SELECT</literal> or <literal>ALL</literal>
         policy and the row(s) must be pass the <literal>UPDATE USING</literal>
         expression.
-->
<literal>WHERE</literal>句または<literal>RETURNING</literal>句のある<literal>UPDATE</literal>コマンドでは、更新されるリレーションの<literal>SELECT</literal>権限も必要です。
また、適切な<literal>SELECT</literal>ポリシーと<literal>ALL</literal>が結合され（<literal>SELECT</literal>関連のポリシーが複数ある場合はORで結合されます）、<literal>UPDATE</literal>ポリシーの<literal>USING</literal>句とANDで結合されます。
従って、ある行の集合を<literal>WHERE</literal>句を使って<literal>UPDATE</literal>するには、それらの行に対して<literal>SELECT</literal>または<literal>ALL</literal>のポリシーによるアクセス権があり、かつ、<literal>UPDATE USING</literal>式の条件に適っていなければなりません。
       </para>
         
       <para>
<!--
         Any rows whose resulting values do not pass the
         <literal>WITH CHECK</literal> expression will cause an error, and the
         entire command will be aborted.  If only a <literal>USING</literal>
         clause is specified, then that clause will be used for both
         <literal>USING</literal> and <literal>WITH CHECK</literal> cases.
-->
更新の結果の値が<literal>WITH CHECK</literal>式に反する行があればエラーを起こし、コマンド全体が中止されます。
<literal>USING</literal>句だけが指定されていた場合は、それが<literal>USING</literal>と<literal>WITH CHECK</literal>の両方に対して使用されます。
       </para>

       <para>
<!--
         Note, however, that <literal>INSERT</literal> with <literal>ON CONFLICT
         DO UPDATE</literal> requires that an <literal>UPDATE</literal> policy
         <literal>USING</literal> expression always be enforced as a
         <literal>WITH CHECK</literal> expression.  This
         <literal>UPDATE</literal> policy must always pass when the
         <literal>UPDATE</literal> path is taken.  Any existing row that
         necessitates that the <literal>UPDATE</literal> path be taken must pass
         the (<literal>UPDATE</literal> or <literal>ALL</literal>) <literal>USING</literal> qualifications (combined
         using <quote>or</quote>), which are always enforced as <literal>WITH CHECK</literal>
         options in this context.  (The <literal>UPDATE</literal> path will
         <emphasis>never</> be silently avoided; an error will be thrown
         instead.)  Finally, the final row appended to the relation must pass
         any <literal>WITH CHECK</literal> options that a conventional
         <literal>UPDATE</literal> is required to pass.
-->
ただし、<literal>ON CONFLICT DO UPDATE</literal>のある<literal>INSERT</literal>では、<literal>UPDATE</literal>ポリシーの<literal>USING</literal>式はいつでも<literal>WITH CHECK</literal>として使用されることに注意して下さい。
この<literal>UPDATE</literal>のポリシーは、<literal>UPDATE</literal>の部分が実行される時は必ず満たされなければなりません。
<literal>UPDATE</literal>部分の実行を必要とする既存の行はすべて、（<literal>UPDATE</literal>または<literal>ALL</literal>が<quote>or</quote>で結合された）<literal>USING</literal>の制約を満たさねばならず、それがこの文の実行において常に<literal>WITH CHECK</literal>オプションとして適用されます。
（<literal>UPDATE</literal>部分が何も起こさずに回避されることは<emphasis>決して</>なく、その場合はエラーが発生します。）
なお、リレーションに最後に追加される行は、通常の<literal>UPDATE</literal>が満たさなければならないすべての<literal>WITH CHECK</literal>オプションを満たさなければなりません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="SQL-CREATEPOLICY-DELETE">
      <term><literal>DELETE</></term>
      <listitem>
       <para>
<!--
         Using <literal>DELETE</literal> for a policy means that it will apply
         to <literal>DELETE</literal> commands.  Only rows that pass this
         policy will be seen by a <literal>DELETE</literal> command.  There can
         be rows that are visible through a <literal>SELECT</literal> that are
         not seen by a <literal>DELETE</literal>, if they do not pass the
         <literal>USING</literal> expression for the <literal>DELETE</literal>.
-->
ポリシーに<literal>DELETE</literal>を使うのは、そのポリシーは<literal>DELETE</literal>コマンドに適用されるという意味になります。
ポリシーを満たす行だけが<literal>DELETE</literal>コマンドから見えます。
<literal>SELECT</literal>では見えるけれど、<literal>DELETE</literal>では見えない、という行もあり得ます。
それらの行が<literal>DELETE</literal>の<literal>USING</literal>式を満たさない場合です。
       </para>

       <para>
<!--
         When a <literal>DELETE</literal> command is used with a
         <literal>WHERE</literal> clause or a <literal>RETURNING</literal>
         clause, <literal>SELECT</literal> rights are also required on the
         relation being updated and the appropriate <literal>SELECT</literal>
         and <literal>ALL</literal> policies will be combined (using OR for any
         overlapping <literal>SELECT</literal> related policies found) with the
         <literal>USING</literal> clause of the <literal>DELETE</literal> policy
         using AND.  Therefore, in order for a user to be able to
         <literal>DELETE</literal> a specific set of rows using a
         <literal>WHERE</literal> clause, the user must have access to the
         row(s) through a <literal>SELECT</literal> or <literal>ALL</literal>
         policy and the row(s) must be pass the <literal>DELETE USING</literal>
         expression.
-->
<literal>DELETE</literal>コマンドが<literal>WHERE</literal>句または<literal>RETURNING</literal>句を含む場合、更新対象のリレーションの<literal>SELECT</literal>権限も必要です。
また、適切な<literal>SELECT</literal>ポリシーと<literal>ALL</literal>ポリシーが結合され（<literal>SELECT</literal>関連のポリシーが複数ある場合はORで結合されます）、<literal>DELETE</literal>ポリシーの<literal>USING</literal>句とANDで結合されます。
従って、ある行の集合を<literal>WHERE</literal>句を使って<literal>DELETE</literal>するには、それらの行に対して<literal>SELECT</literal>または<literal>ALL</literal>のポリシーによるアクセス権があり、かつ、<literal>DELETE USING</literal>式の条件に適っていなければなりません。
       </para>
         
       <para>
<!--
         The <literal>DELETE</literal> policy only accepts the
         <literal>USING</literal> expression as it only applies in cases where
         records are being extracted from the relation for deletion.
-->
<literal>DELETE</literal>ポリシーはリレーションから削除のためにレコードを取り出す場合にしか適用されないので、<literal>USING</literal>式のみを受け付けます。
       </para>
      </listitem>
     </varlistentry>

   </variablelist>
  </refsect2>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   You must be the owner of a table to create or change policies for it.
-->
ポリシーを作成あるいは変更するには、テーブルの所有者でなければなりません。
  </para>

  <para>
<!--
   Note that while policies will be applied for explicit queries against tables
   in the system, they are not applied when the system is performing internal
   referential integrity checks or validating constraints.  This means there are
   indirect ways to determine that a given value exists.  An example of this is
   attempting to insert a duplicate value into a column which is the primary key
   or has a unique constraint.  If the insert fails then the user can infer that
   the value already exists.  (This example assumes that the user is permitted by
   policy to insert records which they are not allowed to see.)  Another example
   is where a user is allowed to insert into a table which references another,
   otherwise hidden table.  Existence can be determined by the user inserting
   values into the referencing table, where success would indicate that the
   value exists in the referenced table.  These issues can be addressed by
   carefully crafting policies that prevent users from being able to insert,
   delete, or update records at all which might possibly indicate a value they
   are not otherwise able to see, or by using generated values (e.g., surrogate
   keys) instead.
-->
ポリシーは、システム内のテーブルに対する明示的な問い合わせには適用されますが、システムが内部的な参照整合性のチェックや制約の検証をしている時には適用されないことに注意して下さい。
この意味するところは、ある値が存在するかどうかを判定する間接的な方法がある、ということです。
その例の1つは、主キーあるいは一意制約のある列に重複する値を挿入しようとすることです。
挿入に失敗すれば、その値が既に存在すると推定することができます。
（この例では、ユーザが見ることができないレコードを挿入することがポリシーにより許されていると仮定しています。）
別の例は、あるテーブルへの挿入は許されているが、そのテーブルが別の隠されているテーブルを参照している、という場合です。
参照元のテーブルに値を挿入することで、値の存在が判断できます。
この場合、挿入の成功はその値が参照先のテーブルに存在することを示唆します。
これらの問題は、見ることができない値を示唆するかもしれないようなレコードの挿入、削除、更新が全くできないように注意深くポリシーを設計するか、あるいは生成された値（例：代理キー）を使うことで解決できます。
  </para>

  <para>
<!--
   Regarding how policy expressions interact with the user: as the expressions
   are added to the user's query directly, they will be run with the rights of
   the user running the overall query.  Therefore, users who are using a given
   policy must be able to access any tables or functions referenced in the
   expression or they will simply receive a permission denied error when
   attempting to query the table that has row-level security enabled.  This does not change how views
   work, however.  As with normal queries and views, permission checks and
   policies for the tables which are referenced by a view will use the view
   owner's rights and any policies which apply to the view owner.
-->
ポリシーの式がユーザとの間でどのように作用するかですが、式はユーザの問い合わせに直接追加されるため、式は問い合わせ全体を実行しているユーザの権限によって実行されます。
そのため、あるポリシーを使用するユーザは、その式が参照しているすべてのテーブルおよび関数にアクセスできる必要があります。
そうでなければ、行レベルセキュリティが有効になっているテーブルに問い合わせをしようとしたときに、単に権限なしのエラーを受け取ります。
しかし、これによってビューの動作が変わることはありません。
通常の問い合わせおよびビューと同じく、ビューによって参照されるテーブルに対する権限の確認とポリシーは、ビューの所有者の権限およびビューの所有者に適用されるポリシーを利用します。
  </para>

  <para>
<!--
   When reducing the set of rows which a user has access to, through
   modifications to relations referenced by Row-Level Security Policies or
   Security Barrier Views, be aware that users with a currently open transaction
   may be able to see updates to the rows that they are no longer allowed
   access.  Therefore, the best practice to avoid any possible leak of
   information when altering conditions that determine the visibility of
   specific rows is to ensure that affected users do not have any open
   transactions, perhaps by ensuring they have no concurrent sessions running.
-->
行レベルセキュリティポリシーやセキュリティバリアビューが参照するリレーションを変更することでユーザがアクセスできる行集合を小さくする場合、オープン状態のトランザクションがあるユーザは、もはやアクセス権限のなくなった行への更新を見ることができるかもしれない、ということに注意して下さい。
このため、特定の行の可視性を決定する条件を変更する時に、情報が漏れる可能性をなくす最善の方法は、それによって影響を受けるユーザがオープン状態のトランザクションを持っていないことを確認すること、恐らくは現在実行中のセッションがないことを確認することでしょう。
  </para>

 </refsect1>

 <refsect1>
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   <command>CREATE POLICY</command> is a <productname>PostgreSQL</productname>
   extension.
-->
<command>CREATE POLICY</command>は<productname>PostgreSQL</productname>の拡張です。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterpolicy"></member>
   <member><xref linkend="sql-droppolicy"></member>
  </simplelist>
 </refsect1>

</refentry>
