<!-- doc/src/sgml/cube.sgml -->

<sect1 id="cube" xreflabel="cube">
 <title>cube</title>

 <indexterm zone="cube">
  <primary>cube</primary>
 </indexterm>

 <para>
<!--
  This module implements a data type <type>cube</> for
  representing multidimensional cubes.
-->
本モジュールは、多次元立体を表すための<type>cube</>データ型を実装します。
 </para>

 <sect2>
<!--
  <title>Syntax</title>
-->
  <title>構文</title>

  <para>
<!--
   <xref linkend="cube-repr-table"> shows the valid external
   representations for the <type>cube</>
   type.  <replaceable>x</>, <replaceable>y</>, etc. denote
   floating-point numbers.
-->
<xref linkend="cube-repr-table">は<type>cube</>型で有効な外部表現を示します。
<replaceable>x</>、<replaceable>y</>などは浮動小数点数を意味します。
  </para>

  <table id="cube-repr-table">
<!--
   <title>Cube External Representations</title>
-->
   <title>cubeの外部表現</title>
   <tgroup cols="2">
    <tbody>
     <row>
      <entry><literal><replaceable>x</></literal></entry>
<!--
      <entry>A one-dimensional point
       (or, zero-length one-dimensional interval)
-->
      <entry>
1次元の点。（または幅ゼロの一次元間隔）
      </entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x</>)</literal></entry>
<!--
      <entry>Same as above</entry>
-->
      <entry>同上</entry>
     </row>
     <row>
      <entry><literal><replaceable>x1</>,<replaceable>x2</>,...,<replaceable>xn</></literal></entry>
<!--
      <entry>A point in n-dimensional space, represented internally as a
      zero-volume cube
-->
      <entry>
n次元空間の点。
内部的には体積0の立方体として表されます。
      </entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x1</>,<replaceable>x2</>,...,<replaceable>xn</>)</literal></entry>
<!--
      <entry>Same as above</entry>
-->
      <entry>同上</entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x</>),(<replaceable>y</>)</literal></entry>
<!--
      <entry>A one-dimensional interval starting at <replaceable>x</> and ending at <replaceable>y</> or vice versa; the
       order does not matter
-->
      <entry>
<replaceable>x</>から<replaceable>y</>まで（またはその逆）の1次元の間隔。
順序は関係ありません。
      </entry>
     </row>
     <row>
      <entry><literal>[(<replaceable>x</>),(<replaceable>y</>)]</literal></entry>
<!--
      <entry>Same as above</entry>
-->
      <entry>同上</entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x1</>,...,<replaceable>xn</>),(<replaceable>y1</>,...,<replaceable>yn</>)</literal></entry>
<!--
      <entry>An n-dimensional cube represented by a pair of its diagonally
       opposite corners
-->
      <entry>
対角の組み合わせで表されるn次元の立体。
      </entry>
     </row>
     <row>
      <entry><literal>[(<replaceable>x1</>,...,<replaceable>xn</>),(<replaceable>y1</>,...,<replaceable>yn</>)]</literal></entry>
<!--
      <entry>Same as above</entry>
-->
      <entry>同上</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   It does not matter which order the opposite corners of a cube are
   entered in.  The <type>cube</> functions
   automatically swap values if needed to create a uniform
   <quote>lower left &mdash; upper right</> internal representation.
-->
立体の対角の入力順序は関係ありません。
統一的な<quote>左下 &mdash; 右上</>という内部表現を作成するために必要ならば、<type>cube</>関数は自動的に値を交換します。
  </para>

  <para>
<!--
   White space is ignored, so <literal>[(<replaceable>x</>),(<replaceable>y</>)]</literal> is the same as
   <literal>[ ( <replaceable>x</> ), ( <replaceable>y</> ) ]</literal>.
-->
空白文字は無視されます。
このため、<literal>[(<replaceable>x</>),(<replaceable>y</>)]</literal>は<literal>[ ( <replaceable>x</> ), ( <replaceable>y</> ) ]</literal>と同じです。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Precision</title>
-->
  <title>精度</title>

  <para>
<!--
   Values are stored internally as 64-bit floating point numbers. This means
   that numbers with more than about 16 significant digits will be truncated.
-->
値は内部的に64ビットの浮動小数点数値として格納されます。
つまり、有効桁が16より大きい数値は切り詰められることを意味します。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Usage</title>
-->
  <title>使用方法</title>

  <para>
<!--
   The <filename>cube</> module includes a GiST index operator class for
   <type>cube</> values.
   The operators supported by the GiST operator class are shown in <xref linkend="cube-gist-operators">.
-->
<filename>cube</>モジュールには、<type>cube</>型の値に対するGiSTインデックス演算子クラスが含まれます。
GiST演算子クラスでサポートされる演算子は<xref linkend="cube-gist-operators">に書かれている通りです。
  </para>

  <table id="cube-gist-operators">
<!--
   <title>Cube GiST Operators</title>
-->
   <title>cubeのGiST演算子</title>
   <tgroup cols="2">
    <thead>
     <row>
<!--
      <entry>Operator</entry>
      <entry>Description</entry>
-->
      <entry>演算子</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>a = b</></entry>
<!--
      <entry>The cubes a and b are identical.</entry>
-->
      <entry>立体aと立体bは同じです。</entry>
     </row>

     <row>
      <entry><literal>a &amp;&amp; b</></entry>
<!--
      <entry>The cubes a and b overlap.</entry>
-->
      <entry>立体aと立体bには重なりがあります。</entry>
     </row>

     <row>
      <entry><literal>a @&gt; b</></entry>
<!--
      <entry>The cube a contains the cube b.</entry>
-->
      <entry>立体aは立体bを含みます。</entry>
     </row>

     <row>
      <entry><literal>a &lt;@ b</></entry>
<!--
      <entry>The cube a is contained in the cube b.</entry>
-->
      <entry>立体aは立体bに含まれます。</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   (Before PostgreSQL 8.2, the containment operators <literal>@&gt;</> and <literal>&lt;@</> were
   respectively called <literal>@</> and <literal>~</>.  These names are still available, but are
   deprecated and will eventually be retired.  Notice that the old names
   are reversed from the convention formerly followed by the core geometric
   data types!)
-->
（PostgreSQL 8.2以前では、包含演算子<literal>@&gt;</>と<literal>&lt;@</>はそれぞれ<literal>@</>と<literal>~</>と呼ばれていました。
これらの名前はまだ利用できますが、廃止予定であり、最終的にはなくなります。
古い名前がコアの幾何データ型が従う規約と反対であることに注意してください。）
  </para>

  <para>
<!--
   The standard B-tree operators are also provided, for example
-->
標準的なB-tree演算子も提供されます。
以下に例を示します。

   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
<!--
       <entry>Operator</entry>
       <entry>Description</entry>
-->
       <entry>演算子</entry>
       <entry>説明</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><literal>[a, b] &lt; [c, d]</literal></entry>
<!--
       <entry>Less than</entry>
-->
       <entry>より小さい</entry>
      </row>

      <row>
       <entry><literal>[a, b] &gt; [c, d]</literal></entry>
<!--
       <entry>Greater than</entry>
-->
       <entry>より大きい</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>

<!--
   These operators do not make a lot of sense for any practical
   purpose but sorting. These operators first compare (a) to (c),
   and if these are equal, compare (b) to (d). That results in
   reasonably good sorting in most cases, which is useful if
   you want to use ORDER BY with this type.
-->
これらの演算子はソート以外の実用的な目的に対して大きな意味を持ちません。
これらの演算子はまず(a)と(c)を比べ、等しければ(b)と(d)を比べます。
論理的にはほとんどの場合優れたソート処理と思えます。
こうした型をORDER BYで使用したい場合に有用です。
  </para>

  <para>
<!--
   <xref linkend="cube-functions-table"> shows the available functions.
-->
<xref linkend="cube-functions-table">は有効な関数を示します。
  </para>

  <table id="cube-functions-table">
<!--
   <title>Cube Functions</title>
-->
   <title>cubeの関数</title>
   <tgroup cols="2">
    <tbody>
     <row>
      <entry><literal>cube(float8) returns cube</literal></entry>
<!--
      <entry>Makes a one dimensional cube with both coordinates the same.
-->
      <entry>
同じ軸をもつ、1次元の立体を作成します。
       <literal>cube(1) == '(1)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(float8, float8) returns cube</literal></entry>
<!--
      <entry>Makes a one dimensional cube.
-->
      <entry>1次元の立体を作成します。
       <literal>cube(1,2) == '(1),(2)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(float8[]) returns cube</literal></entry>
<!--
      <entry>Makes a zero-volume cube using the coordinates
       defined by the array.
-->
      <entry>
配列で定義される座標を使用した体積0の立体を作成します。
       <literal>cube(ARRAY[1,2]) == '(1,2)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(float8[], float8[]) returns cube</literal></entry>
<!--
      <entry>Makes a cube with upper right and lower left
       coordinates as defined by the two arrays, which must be of the
       same length.
-->
      <entry>
2つの配列で定義される右上および左下座標を持つ立体を作成します。
配列長は同じでなければなりません。
       <literal>cube('{1,2}'::float[], '{3,4}'::float[]) == '(1,2),(3,4)'
       </literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(cube, float8) returns cube</literal></entry>
<!--
      <entry>Makes a new cube by adding a dimension on to an
       existing cube with the same values for both parts of the new coordinate.
       This is useful for building cubes piece by piece from calculated values.
-->
      <entry>
新しい座標の両部分に同一の値を持たせて、既存の立体に次元を加えた立体を新しく作成します。
これは計算した値で部品を追加しながら立体を構築する場合に有用です。
       <literal>cube('(1)',2) == '(1,2),(1,2)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(cube, float8, float8) returns cube</literal></entry>
<!--
      <entry>Makes a new cube by adding a dimension on to an
       existing cube. This is useful for building cubes piece by piece from
       calculated values. <literal>cube('(1,2)',3,4) == '(1,3),(2,4)'</literal>
-->
      <entry>
既存の立体に次元を加えた立体を新しく作成します。
これは計算した値で部品を追加しながら立体を構築する場合に有用です。
<literal>cube('(1,2)',3,4) == '(1,3),(2,4)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube_dim(cube) returns int</literal></entry>
<!--
      <entry>Returns the number of dimensions of the cube
-->
      <entry>立体の次元数を返します。
      </entry>
     </row>

     <row>
      <entry><literal>cube_ll_coord(cube, int) returns double </literal></entry>
<!--
      <entry>Returns the n'th coordinate value for the lower left
       corner of a cube
-->
      <entry>立体の左下隅のn次座標の値を返します。
      </entry>
     </row>

    <row>
      <entry><literal>cube_ur_coord(cube, int) returns double
      </literal></entry>
<!--
      <entry>Returns the n'th coordinate value for the
       upper right corner of a cube
-->
      <entry>立体の右上隅のn次座標の値を返します。
      </entry>
     </row>

     <row>
      <entry><literal>cube_is_point(cube) returns bool</literal></entry>
<!--
      <entry>Returns true if a cube is a point, that is,
       the two defining corners are the same.</entry>
-->
      <entry>
立体が点、つまり2つの定義された隅が同一の場合真を返します。
      </entry>
     </row>

     <row>
      <entry><literal>cube_distance(cube, cube) returns double</literal></entry>
<!--
      <entry>Returns the distance between two cubes. If both
       cubes are points, this is the normal distance function.
-->
      <entry>
2つの立体間の距離を返します。
両方の立体が点の場合、これは通常の距離測定関数です。
      </entry>
     </row>

     <row>
      <entry><literal>cube_subset(cube, int[]) returns cube
      </literal></entry>
<!--
      <entry>Makes a new cube from an existing cube, using a list of
       dimension indexes from an array. Can be used to find both the LL and UR
       coordinates of a single dimension, e.g.
       <literal>cube_subset(cube('(1,3,5),(6,7,8)'), ARRAY[2]) = '(3),(7)'</>.
       Or can be used to drop dimensions, or reorder them as desired, e.g.
       <literal>cube_subset(cube('(1,3,5),(6,7,8)'), ARRAY[3,2,1,1]) = '(5, 3,
       1, 1),(8, 7, 6, 6)'</>.
-->
      <entry>
配列内の次元インデックスの一覧を使用して、既存の立体から新しい立体を作成します。
例えば、<literal>cube_subset(cube('(1,3,5),(6,7,8)'), ARRAY[2]) = '(3),(7)'</>のように1次元のLLおよびUR座標を見つけるために使用することができます。
また、例えば、<literal>cube_subset(cube('(1,3,5),(6,7,8)'), ARRAY[3,2,1,1]) = '(5, 3, 1, 1),(8, 7, 6, 6)'</>のように次元を除去することや希望通りの順序に並び替えることもできます。
      </entry>
     </row>

     <row>
      <entry><literal>cube_union(cube, cube) returns cube</literal></entry>
<!--
      <entry>Produces the union of two cubes
-->
      <entry>2つの立体の和集合を作成します。
      </entry>
     </row>

     <row>
      <entry><literal>cube_inter(cube, cube) returns cube</literal></entry>
<!--
      <entry>Produces the intersection of two cubes
-->
      <entry>
2つの立体の共通部分を作成します。
      </entry>
     </row>

     <row>
      <entry><literal>cube_enlarge(cube c, double r, int n) returns cube</literal></entry>
<!--
      <entry>Increases the size of a cube by a specified radius in at least
       n dimensions. If the radius is negative the cube is shrunk instead. This
       is useful for creating bounding boxes around a point for searching for
       nearby points. All defined dimensions are changed by the radius r.
       LL coordinates are decreased by r and UR coordinates are increased by r.
       If a LL coordinate is increased to larger than the corresponding UR
       coordinate (this can only happen when r &lt; 0) than both coordinates
       are set to their average.  If n is greater than the number of defined
       dimensions and the cube is being increased (r &gt;= 0) then 0 is used
       as the base for the extra coordinates.
-->
      <entry>
最小でn次元において指定した径で立体のサイズを増加させます。
径が負の場合、立体は縮小されます。
これは、近傍点を見つけるための点を囲む境界矩形を作成する際に有用です。
定義済のすべての次元は径rにより変わります。
LL座標をrにより減少し、UR座標をrにより増加します。
LL座標を対応するUR座標より大きくするために増加する場合（これはr &lt; 0の場合にのみ発生します）、両方の座標はその平均値に設定されます。
nが定義済の次元より多く、かつ、立体が増加される（r &gt;= 0）場合、余計な座標の基として0が使われます。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2>
<!--
  <title>Defaults</title>
-->
  <title>デフォルト</title>

  <para>
<!--
   I believe this union:
-->
  </para>
<programlisting>
select cube_union('(0,5,2),(2,3,1)', '0');
cube_union
-------------------
(0, 0, 0),(2, 5, 2)
(1 row)
</programlisting>

   <para>
<!--
    does not contradict common sense, neither does the intersection
-->
この和集合および以下の共通集合は一般常識と矛盾しないと思います。
   </para>

<programlisting>
select cube_inter('(0,-1),(1,1)', '(-2),(2)');
cube_inter
-------------
(0, 0),(1, 0)
(1 row)
</programlisting>

   <para>
<!--
    In all binary operations on differently-dimensioned cubes, I assume the
    lower-dimensional one to be a Cartesian projection, i. e., having zeroes
    in place of coordinates omitted in the string representation. The above
    examples are equivalent to:
-->
次元が異なる立体のバイナリ操作すべてにおいて、より低い次元の方がデカルト投影、つまり、文字列表現で省略された座標に0を持つものになると仮定します。
上の例は以下と同じです。
   </para>

<programlisting>
cube_union('(0,5,2),(2,3,1)','(0,0,0),(0,0,0)');
cube_inter('(0,-1),(1,1)','(-2,0),(2,0)');
</programlisting>

   <para>
<!--
    The following containment predicate uses the point syntax,
    while in fact the second argument is internally represented by a box.
    This syntax makes it unnecessary to define a separate point type
    and functions for (box,point) predicates.
-->
以下の包含の述部は点構文を使用しますが、実際内部的には第2引数は矩形として表されます。
この構文により、別の点用の型や(box,point)という述部用の関数を定義することが不要になります。
   </para>

<programlisting>
select cube_contains('(0,0),(1,1)', '0.5,0.5');
cube_contains
--------------
t
(1 row)
</programlisting>
 </sect2>

 <sect2>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   For examples of usage, see the regression test <filename>sql/cube.sql</>.
-->
使用例については、<filename>sql/cube.sql</>リグレッション試験を参照してください。
  </para>

  <para>
<!--
   To make it harder for people to break things, there
   is a limit of 100 on the number of dimensions of cubes. This is set
   in <filename>cubedata.h</> if you need something bigger.
-->
破壊防止のために立体の次元数に100までという制限を行いました。
これは<filename>cubedata.h</>で設定されており、必要に応じて多少大きくすることができます。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Credits</title>
-->
  <title>クレジット</title>

  <para>
<!--
   Original author: Gene Selkov, Jr. <email>selkovjr@mcs.anl.gov</email>,
   Mathematics and Computer Science Division, Argonne National Laboratory.
-->
   原作者: Gene Selkov, Jr. <email>selkovjr@mcs.anl.gov</email>,
   Mathematics and Computer Science Division, Argonne National Laboratory.
  </para>

  <para>
<!--
   My thanks are primarily to Prof. Joe Hellerstein
   (<ulink url="http://db.cs.berkeley.edu/jmh/"></ulink>) for elucidating the
   gist of the GiST (<ulink url="http://gist.cs.berkeley.edu/"></ulink>), and
   to his former student, Andy Dong (<ulink
   url="http://best.me.berkeley.edu/~adong/"></ulink>), for his example
   written for Illustra,
   <ulink url="http://best.berkeley.edu/~adong/rtree/index.html"></ulink>.
   I am also grateful to all Postgres developers, present and past, for
   enabling myself to create my own world and live undisturbed in it. And I
   would like to acknowledge my gratitude to Argonne Lab and to the
   U.S. Department of Energy for the years of faithful support of my database
   research.
-->
GiST (<ulink url="http://gist.cs.berkeley.edu/"></ulink>)の要点(gist)を説明してくださったJoe Hellerstein博士 (<ulink url="http://db.cs.berkeley.edu/jmh/"></ulink>) に感謝します。
また、Illustra用の例 <ulink url="http://best.berkeley.edu/~adong/rtree/index.html"></ulink>の作者である彼の以前の生徒Andy Dong (<ulink url="http://best.me.berkeley.edu/~adong/"></ulink>)に感謝します。
また、自分の世界を作成できるようにし、静かに生活できるようにしてもらった、過去から現在までのすべてのpostgres開発者に感謝します。
データベース研究を長年誠実にサポートしてくれたArgonne LabとU.S. Department of Energyにも感謝します。
  </para>

  <para>
<!--
   Minor updates to this package were made by Bruno Wolff III
   <email>bruno@wolff.to</email> in August/September of 2002. These include
   changing the precision from single precision to double precision and adding
   some new functions.
-->
2002年8月/9月にBruno Wolff III <email>bruno@wolff.to</email>による小規模な改修がこのパッケージになされました。
この改修には、単精度から倍精度への精度の変更といくつかの関数の追加が含まれます。
  </para>

  <para>
<!--
   Additional updates were made by Joshua Reich <email>josh@root.net</email> in
   July 2006. These include <literal>cube(float8[], float8[])</literal> and
   cleaning up the code to use the V1 call protocol instead of the deprecated
   V0 protocol.
-->
2006年7月にJoshua Reich <email>josh@root.net</email>による改修がさらになされました。
この改修には<literal>cube(float8[], float8[])</literal>が含まれ、また、古いV0プロトコルからV1呼び出しプロトコルを使用するようコードが整理されました。
  </para>
 </sect2>

</sect1>
