<!-- 警告：このファイルは直接編集しないでください！
1. config.sgmlを編集したら、split-config.shを起動します。
2. するとconfig[0-3].sgmlが生成されます。
3. config.sgmlとともにconfig[0-3].sgmlのうち変更されたファイルをcommit/pushしてpull requestを作成してください。
4. レビューはconfig[0-3].sgmlに対して行います。
5. 指摘された点があればconfig.sgmlに反映し、1に戻ります。
6. config.sgmlの変更がなければ、pull requestをマージして終了です。お疲れ様でした！
-->
<!-- split-config3-start -->
     <varlistentry id="guc-default-transaction-read-only" xreflabel="default_transaction_read_only">
      <term><varname>default_transaction_read_only</varname> (<type>boolean</type>)
      <indexterm>
       <primary>read-only transaction</primary>
       <secondary>setting default</secondary>
      </indexterm>
      <indexterm>
       <primary>読み取り専用トランザクション</primary>
       <secondary>デフォルト設定</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_read_only</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_read_only</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        A read-only SQL transaction cannot alter non-temporary tables.
        This parameter controls the default read-only status of each new
        transaction. The default is <literal>off</literal> (read/write).
-->
読み取り専用のSQLトランザクションでは、非一時的テーブルを変更することができません。
このパラメータは、各新規トランザクションのデフォルトの読み取りのみ状況を制御します。
デフォルト<literal>off</literal>（読み書き）です。
       </para>

       <para>
<!--
        Consult <xref linkend="sql-set-transaction"/> for more information.
-->
より詳細な情報は<xref linkend="sql-set-transaction"/>を調べてください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-transaction-deferrable" xreflabel="default_transaction_deferrable">
      <term><varname>default_transaction_deferrable</varname> (<type>boolean</type>)
      <indexterm>
       <primary>deferrable transaction</primary>
       <secondary>setting default</secondary>
      </indexterm>
      <indexterm>
       <primary>遅延トランザクション</primary>
       <secondary>デフォルト設定</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_deferrable</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_deferrable</varname> 設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When running at the <literal>serializable</literal> isolation level,
        a deferrable read-only SQL transaction may be delayed before
        it is allowed to proceed.  However, once it begins executing
        it does not incur any of the overhead required to ensure
        serializability; so serialization code will have no reason to
        force it to abort because of concurrent updates, making this
        option suitable for long-running read-only transactions.
-->
<literal>シリアライザブル</literal>分離レベルで運用されている場合、繰り延べ読み取り専用SQLトランザクションは、その処理の許可の前に遅延されることがあります。
しかし、ひとたび処理が開始されるとシリアライザブル可能性を保障するために必要ないかなるオーバーヘッドも発生させません。
従って、シリアル化（直列化）のコードは、このオプションを長期間にわたる読み取り専用トランザクションに対して適切な処置と位置づけ、同時実行の更新の観点から中断を強制する理由はありません。
        </para>

        <para>
<!--
        This parameter controls the default deferrable status of each
        new transaction.  It currently has no effect on read-write
        transactions or those operating at isolation levels lower
        than <literal>serializable</literal>. The default is <literal>off</literal>.
-->
このパラメータはそれぞれの新規トランザクションのデフォルトでの繰り延べ状態を制御します。
現時点では、読み取り専用トランザクション、または<literal>シリアライザブル</literal>より低位の分離レベルの運用に対して効果はありません。
デフォルトは<literal>off</literal>です。
       </para>

       <para>
<!--
        Consult <xref linkend="sql-set-transaction"/> for more information.
-->
より詳細は<xref linkend="sql-set-transaction"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-transaction-isolation" xreflabel="transaction_isolation">
      <term><varname>transaction_isolation</varname> (<type>enum</type>)
      <indexterm>
       <primary>transaction isolation level</primary>
      </indexterm>
      <indexterm>
       <primary><varname>transaction_isolation</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>transaction_isolation</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter reflects the current transaction's isolation level.
        At the beginning of each transaction, it is set to the current value
        of <xref linkend="guc-default-transaction-isolation"/>.
        Any subsequent attempt to change it is equivalent to a <xref
        linkend="sql-set-transaction"/> command.
-->
このパラメータは現在のトランザクションの隔離レベルを反映します。
個々のトランザクションの開始時、これに<xref linkend="guc-default-transaction-isolation"/>の現在の値が設定されます。
その後のこの変数の値を変更する試みは、<xref linkend="sql-set-transaction"/>と同等です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-transaction-read-only" xreflabel="transaction_read_only">
      <term><varname>transaction_read_only</varname> (<type>boolean</type>)
      <indexterm>
       <primary>read-only transaction</primary>
      </indexterm>
      <indexterm>
       <primary><varname>transaction_read_only</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>transaction_read_only</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter reflects the current transaction's read-only status.
        At the beginning of each transaction, it is set to the current value
        of <xref linkend="guc-default-transaction-read-only"/>.
        Any subsequent attempt to change it is equivalent to a <xref
        linkend="sql-set-transaction"/> command.
-->
このパラメータは現在のトランザクションの読み込み専用状態を反映します。
個々のトランザクションの開始時、これに<xref linkend="guc-default-transaction-read-only"/>の現在の値が設定されます。
その後のこの変数の値を変更する試みは、<xref linkend="sql-set-transaction"/>と同等です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-transaction-deferrable" xreflabel="transaction_deferrable">
      <term><varname>transaction_deferrable</varname> (<type>boolean</type>)
      <indexterm>
       <primary>deferrable transaction</primary>
      </indexterm>
      <indexterm>
       <primary><varname>transaction_deferrable</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>transaction_deferrable</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter reflects the current transaction's deferrability status.
        At the beginning of each transaction, it is set to the current value
        of <xref linkend="guc-default-transaction-deferrable"/>.
        Any subsequent attempt to change it is equivalent to a <xref
        linkend="sql-set-transaction"/> command.
-->
このパラメータは現在のトランザクションの延期状態(deferrable status)を反映します。
個々のトランザクションの開始時、これに<xref linkend="guc-default-transaction-deferrable"/>の現在の値が設定されます。
その後のこの変数の値を変更する試みは、<xref linkend="sql-set-transaction"/>と同等です。
       </para>
      </listitem>
     </varlistentry>


     <varlistentry id="guc-session-replication-role" xreflabel="session_replication_role">
      <term><varname>session_replication_role</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>session_replication_role</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>session_replication_role</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls firing of replication-related triggers and rules for the
        current session.
        Possible values are <literal>origin</literal> (the default),
        <literal>replica</literal> and <literal>local</literal>.
        Setting this parameter results in discarding any previously cached
        query plans.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
現在のセッションに対するレプリケーション関連のトリガおよびルールの起動を制御します。
使用可能な値は、<literal>origin</literal>(デフォルト)、<literal>replica</literal>および<literal>local</literal>です。
このパラメータを設定すると、以前にキャッシュされた問合せ計画が破棄されます。
スーパーユーザおよび適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更できます。
       </para>

       <para>
<!--
        The intended use of this setting is that logical replication systems
        set it to <literal>replica</literal> when they are applying replicated
        changes.  The effect of that will be that triggers and rules (that
        have not been altered from their default configuration) will not fire
        on the replica.  See the <link linkend="sql-altertable"><command>ALTER TABLE</command></link> clauses
        <literal>ENABLE TRIGGER</literal> and <literal>ENABLE RULE</literal>
        for more information.
-->
この設定の使い方の趣旨としては、レプリケーションされた更新を適用する際に論理レプリケーションシステムが<literal>replica</literal>に設定するということです。
このことによる効果としては、（デフォルトの設定から変更されていない）トリガとルールはレプリカ上では起動されない、ということです。
更なる情報は、<link linkend="sql-altertable"><command>ALTER TABLE</command></link>節の<literal>ENABLE TRIGGER</literal>と<literal>ENABLE RULE</literal>をご覧ください。
       </para>

       <para>
<!--
        PostgreSQL treats the settings <literal>origin</literal> and
        <literal>local</literal> the same internally.  Third-party replication
        systems may use these two values for their internal purposes, for
        example using <literal>local</literal> to designate a session whose
        changes should not be replicated.
-->
PostgreSQLは<literal>origin</literal>と<literal>local</literal>の設定を内部的に同じものとして扱います。
サードパーティのレプリケーションシステムは内部的な目的、たとえば<literal>local</literal>を使ってレプリケーションされるべきでないセッションを指定するためにこれら2つの値を使って構いません。
       </para>

       <para>
<!--
        Since foreign keys are implemented as triggers, setting this parameter
        to <literal>replica</literal> also disables all foreign key checks,
        which can leave data in an inconsistent state if improperly used.
-->
外部キーはトリガとして実装されているため、このパラメータを<literal>replica</literal>とすることによって同時にすべての外部キー検査が無効になります。
このことにより、正しく使用しないと、データを不整合状態にしてしまう可能性があります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-statement-timeout" xreflabel="statement_timeout">
      <term><varname>statement_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>statement_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>statement_timeout</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Abort any statement that takes more than the specified amount of time.
        If <varname>log_min_error_statement</varname> is set
        to <literal>ERROR</literal> or lower, the statement that timed out
        will also be logged.
        If this value is specified without units, it is taken as milliseconds.
        A value of zero (the default) disables the timeout.
-->
コマンドがクライアントからサーバに届いた時から数えて、実行時間が指定された時間を越えた文を停止します。
<varname>log_min_error_statement</varname>が<literal>ERROR</literal>もしくはそれ以下に設定されている場合は、タイムアウトした文はログに書き込まれます。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
値がゼロ（デフォルト）の場合、これを無効にします。
       </para>

       <para>
<!--
        The timeout is measured from the time a command arrives at the
        server until it is completed by the server.  If multiple SQL
        statements appear in a single simple-Query message, the timeout
        is applied to each statement separately.
        (<productname>PostgreSQL</productname> versions before 13 usually
        treated the timeout as applying to the whole query string.)
        In extended query protocol, the timeout starts running when any
        query-related message (Parse, Bind, Execute, Describe) arrives, and
        it is canceled by completion of an Execute or Sync message.
-->
タイムアウトは、コマンドがサーバに到着したときから、サーバがそのコマンドの実行を完了するまでを基準にします。
複数のSQL文が一つの単純問い合わせメッセージに含まれる場合、タイムアウトは個々のSQL文に別々に適用されます。
（13よりも前の<productname>PostgreSQL</productname>バージョンでは、通常SQL文字列全体に対してタイムアウトが適用されていました。）
拡張問い合わせでは、タイムアウトは問い合わせに関するメッセージ（Parse、Bind、Execute、Describe）が到着したときに開始し、ExecuteあるいはSyncメッセージが完了した時にキャンセルされます。
       </para>

       <para>
<!--
        Setting <varname>statement_timeout</varname> in
        <filename>postgresql.conf</filename> is not recommended because it would
        affect all sessions.
-->
すべてのセッションに影響することがあるので、<filename>postgresql.conf</filename>内で<varname>statement_timeout</varname>を設定することは推奨されません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lock-timeout" xreflabel="lock_timeout">
      <term><varname>lock_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>lock_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>lock_timeout</varname> 設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Abort any statement that waits longer than the specified amount of
        time while attempting to acquire a lock on a table, index,
        row, or other database object.  The time limit applies separately to
        each lock acquisition attempt.  The limit applies both to explicit
        locking requests (such as <command>LOCK TABLE</command>, or <command>SELECT
        FOR UPDATE</command> without <literal>NOWAIT</literal>) and to implicitly-acquired
        locks.
        If this value is specified without units, it is taken as milliseconds.
        A value of zero (the default) disables the timeout.
-->
テーブル、インデックス、行、またはその他のデータベースオブジェクトに対してロック獲得を試みている最中、指定された時間を超えて待機するいかなる命令も停止されます。
時間制限はそれぞれのロック取得の試みに対し個別に適用されます。
制限は明示的ロック要求（例えば<command>LOCK TABLE</command>、または<command>SELECT FOR UPDATE</command> without <literal>NOWAIT</literal>など）および暗黙的に取得されるロックに適用されます。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
値ゼロ（デフォルト）はこの機能を無効にします。
       </para>

       <para>
<!--
        Unlike <varname>statement_timeout</varname>, this timeout can only occur
        while waiting for locks.  Note that if <varname>statement_timeout</varname>
        is nonzero, it is rather pointless to set <varname>lock_timeout</varname> to
        the same or larger value, since the statement timeout would always
        trigger first.  If <varname>log_min_error_statement</varname> is set to
        <literal>ERROR</literal> or lower, the statement that timed out will be
        logged.
-->
<varname>statement_timeout</varname>と異なり、このタイムアウトはロックを待機しているときのみ発生します。
命令によるタイムアウトは常に第一に起動されるため、もし<varname>statement_timeout</varname>が非ゼロであれば<varname>lock_timeout</varname>を同一、もしくはより大きい値に設定するのは的を射ていません。
<varname>log_min_error_statement</varname>が<literal>ERROR</literal>またはそれより低く設定されると、時間制限を超えた命令はログに記録されます。
       </para>

       <para>
<!--
        Setting <varname>lock_timeout</varname> in
        <filename>postgresql.conf</filename> is not recommended because it would
        affect all sessions.
-->
<varname>lock_timeout</varname>を<filename>postgresql.conf</filename>にて設定することは、すべてのセッションに影響を与える可能性があるため推奨されません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-idle-in-transaction-session-timeout" xreflabel="idle_in_transaction_session_timeout">
      <term><varname>idle_in_transaction_session_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>idle_in_transaction_session_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>idle_in_transaction_session_timeout</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Terminate any session that has been idle (that is, waiting for a
        client query) within an open transaction for longer than the
        specified amount of time.
        If this value is specified without units, it is taken as milliseconds.
        A value of zero (the default) disables the timeout.
-->
開いているトランザクションが、指定された時間を超えてアイドルだった場合（つまりクライアントからの問い合わせを待っている場合）に、セッションを終了します。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
値がゼロ（デフォルト）の場合はタイムアウトは無効になります。
       </para>

       <para>
<!--
        This option can be used to ensure that idle sessions do not hold
        locks for an unreasonable amount of time.  Even when no significant
        locks are held, an open transaction prevents vacuuming away
        recently-dead tuples that may be visible only to this transaction;
        so remaining idle for a long time can contribute to table bloat.
        See <xref linkend="routine-vacuuming"/> for more details.
-->
このオプションにより、アイドル状態のセッションが不合理なほど長い時間ロックを保持することを防ぐことができます。
強いロックが保持されていなくても、開いたトランザクションは、自分にしか可視でない、最近無効になったタプルをvacuumが掃除するのを妨げます。
ですから、長時間アイドルのままになっていると、テーブルの溢れにつながります。
更なる詳細は<xref linkend="routine-vacuuming"/>を見てください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-idle-session-timeout" xreflabel="idle_session_timeout">
      <term><varname>idle_session_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>idle_session_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>idle_session_timeout</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Terminate any session that has been idle (that is, waiting for a
        client query), but not within an open transaction, for longer than
        the specified amount of time.
        If this value is specified without units, it is taken as milliseconds.
        A value of zero (the default) disables the timeout.
-->
トランザクションが開いた状態ではなく、指定した時間よりも長い時間アイドル（すなわちクライアントからの問い合わせを待っている）であるセッションを終了させます。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
値ゼロ（デフォルトです）はタイムアウトを無効にします。
       </para>

       <para>
<!--
        Unlike the case with an open transaction, an idle session without a
        transaction imposes no large costs on the server, so there is less
        need to enable this timeout
        than <varname>idle_in_transaction_session_timeout</varname>.
-->
開いたトランザクションの場合と違って、トランザクションを伴わないアイドルなセッションは、サーバに対して大きなコストにはなりません。
ですからこのタイムアウトを有効にする必要性は、<varname>idle_in_transaction_session_timeout</varname>よりも低いと言えます。
       </para>

       <para>
<!--
        Be wary of enforcing this timeout on connections made through
        connection-pooling software or other middleware, as such a layer
        may not react well to unexpected connection closure.  It may be
        helpful to enable this timeout only for interactive sessions,
        perhaps by applying it only to particular users.
-->
コネクションプーリングソフトウェアその他のミドルウェアを通じたコネクションに対してこのタイムアウトを強制することには慎重になってください。
そのようなレイヤは、突然のコネクション切断に対して好ましくない振る舞いをするかもしれないからです。
おそらく特定のユーザに対してのみ適用し、対話形式のセッションに対してのみこのタイムアウトを有効にするのが助けになるかもしれません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-freeze-table-age" xreflabel="vacuum_freeze_table_age">
      <term><varname>vacuum_freeze_table_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_freeze_table_age</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>vacuum_freeze_table_age</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        <command>VACUUM</command> performs an aggressive scan if the table's
        <structname>pg_class</structname>.<structfield>relfrozenxid</structfield> field has reached
        the age specified by this setting.  An aggressive scan differs from
        a regular <command>VACUUM</command> in that it visits every page that might
        contain unfrozen XIDs or MXIDs, not just those that might contain dead
        tuples.  The default is 150 million transactions.  Although users can
        set this value anywhere from zero to two billion, <command>VACUUM</command>
        will silently limit the effective value to 95% of
        <xref linkend="guc-autovacuum-freeze-max-age"/>, so that a
        periodic manual <command>VACUUM</command> has a chance to run before an
        anti-wraparound autovacuum is launched for the table. For more
        information see
        <xref linkend="vacuum-for-wraparound"/>.
-->
テーブルの<structname>pg_class</structname>.<structfield>relfrozenxid</structfield>フィールドがこの設定で指定した時期に達すると、<command>VACUUM</command>は積極的なテーブルスキャンを行います。
積極的なスキャンは、無効タプルを含む可能性のあるページだけではなく、凍結されていないXIDあるいはMXIDを含むすべてのページを読む点で通常の<command>VACUUM</command>とは異なります。
デフォルトは1.5億トランザクションです。
ユーザはこの値をゼロから20億までの任意の値に設定することができますが、<command>VACUUM</command>は警告することなく、周回問題対策のautovacuumがテーブルに対して起動する前に定期的な手動<command>VACUUM</command>が実行する機会を持つように、<xref linkend="guc-autovacuum-freeze-max-age"/>の95%に実効値を制限します。
詳細は<xref linkend="vacuum-for-wraparound"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-freeze-min-age" xreflabel="vacuum_freeze_min_age">
      <term><varname>vacuum_freeze_min_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_freeze_min_age</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>vacuum_freeze_min_age</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the cutoff age (in transactions) that
        <command>VACUUM</command> should use to decide whether to
        trigger freezing of pages that have an older XID.
        The default is 50 million transactions.  Although
        users can set this value anywhere from zero to one billion,
        <command>VACUUM</command> will silently limit the effective value to half
        the value of <xref linkend="guc-autovacuum-freeze-max-age"/>, so
        that there is not an unreasonably short time between forced
        autovacuums.  For more information see <xref
        linkend="vacuum-for-wraparound"/>.
-->
<command>VACUUM</command>が、古いXIDを持つページをフリーズするきっかけとするかどうかを決定する、カットオフ年代を（トランザクション単位で）指定します。
デフォルトは5千万トランザクションです。
ユーザはこの値を0から10億までの間で任意の値に設定することができますが、<command>VACUUM</command>は警告なく<xref linkend="guc-autovacuum-freeze-max-age"/>の半分までの値に値を制限します。
このため、強制的なautovacuumの間隔が不合理に短くなることはありません。
詳細は<xref linkend="vacuum-for-wraparound"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-failsafe-age" xreflabel="vacuum_failsafe_age">
      <term><varname>vacuum_failsafe_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_failsafe_age</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>vacuum_failsafe_age</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the maximum age (in transactions) that a table's
        <structname>pg_class</structname>.<structfield>relfrozenxid</structfield>
        field can attain before <command>VACUUM</command> takes
        extraordinary measures to avoid system-wide transaction ID
        wraparound failure.  This is <command>VACUUM</command>'s
        strategy of last resort.  The failsafe typically triggers
        when an autovacuum to prevent transaction ID wraparound has
        already been running for some time, though it's possible for
        the failsafe to trigger during any <command>VACUUM</command>.
-->
<command>VACUUM</command>がシステム全体に渡るトランザクションID周回障害を避けるために異例の措置を取るようになる、テーブルの<structname>pg_class</structname>.<structfield>relfrozenxid</structfield>フィールドが到達する最大の（トランザクション数単位での）年齢を指定します。
これは<command>VACUUM</command>の最後の手段となる戦略です。
この安全機構は典型的には、トランザクションID周回を防ぐための自動バキュームがすでに走っているときに起動されます。
しかし、すべての<command>VACUUM</command>の実行中にこの安全機構が起動する可能性があります。
       </para>
       <para>
<!--
        When the failsafe is triggered, any cost-based delay that is
        in effect will no longer be applied, further non-essential
        maintenance tasks (such as index vacuuming) are bypassed, and any
        <glossterm linkend="glossary-buffer-access-strategy">Buffer Access Strategy</glossterm>
        in use will be disabled resulting in <command>VACUUM</command> being
        free to make use of all of
        <glossterm linkend="glossary-shared-memory">shared buffers</glossterm>.
-->
この安全機構が起動すると、すべての有効なコストに基づく遅延はもはや適用されず、（インデックスのバキュームのような）必須ではない保守タスクは迂回されます。
使用中の<glossterm linkend="glossary-buffer-access-strategy">バッファアクセスストラテジ</glossterm>は無効になり、その結果<command>VACUUM</command>は<glossterm linkend="glossary-shared-memory">共有バッファ</glossterm>のすべてを自由に使用することになります。
       </para>
       <para>
<!--
        The default is 1.6 billion transactions.  Although users can
        set this value anywhere from zero to 2.1 billion,
        <command>VACUUM</command> will silently adjust the effective
        value to no less than 105% of <xref
         linkend="guc-autovacuum-freeze-max-age"/>.
-->
デフォルトは16億トランザクションです。
ユーザはこの値をゼロから21億までの間で設定できますが、<command>VACUUM</command>は<xref linkend="guc-autovacuum-freeze-max-age"/>の105%よりも小さくならないように実際の値を調整します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-multixact-freeze-table-age" xreflabel="vacuum_multixact_freeze_table_age">
      <term><varname>vacuum_multixact_freeze_table_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_multixact_freeze_table_age</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>vacuum_multixact_freeze_table_age</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        <command>VACUUM</command> performs an aggressive scan if the table's
        <structname>pg_class</structname>.<structfield>relminmxid</structfield> field has reached
        the age specified by this setting.  An aggressive scan differs from
        a regular <command>VACUUM</command> in that it visits every page that might
        contain unfrozen XIDs or MXIDs, not just those that might contain dead
        tuples.  The default is 150 million multixacts.
        Although users can set this value anywhere from zero to two billion,
        <command>VACUUM</command> will silently limit the effective value to 95% of
        <xref linkend="guc-autovacuum-multixact-freeze-max-age"/>, so that a
        periodic manual <command>VACUUM</command> has a chance to run before an
        anti-wraparound is launched for the table.
        For more information see <xref linkend="vacuum-for-multixact-wraparound"/>.
-->
<structname>pg_class</structname>.<structfield>relminmxid</structfield>フィールドがこの設定値で指定した年代に達すると<command>VACUUM</command>はテーブルの積極的なスキャンを行います。
積極的なスキャンは、無効タプルを含む可能性のあるページだけではなく、凍結XIDあるいはMXIDを含むすべてのページを読む点で通常の<command>VACUUM</command>とは異なります。
デフォルトは1億5千万トランザクションです。
ユーザは0から20億まで任意の値を設定できますが、テーブルに対してラップアラウンド防止処理が起動される前に定期的な手動<command>VACUUM</command>が走ることができるように、<command>VACUUM</command>は<xref linkend="guc-autovacuum-multixact-freeze-max-age"/>の95%に暗黙的に制限します。
詳細は<xref linkend="vacuum-for-multixact-wraparound"/>をご覧ください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-multixact-freeze-min-age" xreflabel="vacuum_multixact_freeze_min_age">
      <term><varname>vacuum_multixact_freeze_min_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_multixact_freeze_min_age</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>vacuum_multixact_freeze_min_age</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the cutoff age (in multixacts) that <command>VACUUM</command>
        should use to decide whether to trigger freezing of pages with
        an older multixact ID.  The default is 5 million multixacts.
        Although users can set this value anywhere from zero to one billion,
        <command>VACUUM</command> will silently limit the effective value to half
        the value of <xref linkend="guc-autovacuum-multixact-freeze-max-age"/>,
        so that there is not an unreasonably short time between forced
        autovacuums.
        For more information see <xref linkend="vacuum-for-multixact-wraparound"/>.
-->
<command>VACUUM</command>がテーブルをスキャンする際に、ページを凍結するきっかけとするかどうかを決める下限値をマルチトランザクション単位で指定します。
デフォルトは500万マルチトランザクションです。
ユーザは0から10億まで任意の値を設定できますが、強制的な自動バキュームの間隔が短くなり過ぎないように、<command>VACUUM</command>は<xref linkend="guc-autovacuum-multixact-freeze-max-age"/>の半分に暗黙的に実効的な値を制限します。
詳細は<xref linkend="vacuum-for-multixact-wraparound"/>をご覧ください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-multixact-failsafe-age" xreflabel="vacuum_multixact_failsafe_age">
      <term><varname>vacuum_multixact_failsafe_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_multixact_failsafe_age</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>vacuum_multixact_failsafe_age</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the maximum age (in multixacts) that a table's
        <structname>pg_class</structname>.<structfield>relminmxid</structfield>
        field can attain before <command>VACUUM</command> takes
        extraordinary measures to avoid system-wide multixact ID
        wraparound failure.  This is <command>VACUUM</command>'s
        strategy of last resort.  The failsafe typically triggers when
        an autovacuum to prevent transaction ID wraparound has already
        been running for some time, though it's possible for the
        failsafe to trigger during any <command>VACUUM</command>.
-->
<command>VACUUM</command>がシステム全体マルチトランザクションID周回障害を避けるために異例の措置を取るようになる、テーブルの<structname>pg_class</structname>.<structfield>relminmxid</structfield>フィールドが到達する最大の（マルチトランザクション数単位での）年齢を指定します。
これは<command>VACUUM</command>最後の手段となる戦略です。
この安全機構は典型的には、トランザクションID周回を防ぐための自動バキュームがすでに走っているときに起動されます。
しかし、すべての<command>VACUUM</command>の実行中にこの安全機構が起動する可能性があります。
       </para>
       <para>
<!--
        When the failsafe is triggered, any cost-based delay that is
        in effect will no longer be applied, and further non-essential
        maintenance tasks (such as index vacuuming) are bypassed.
-->
この安全機構が起動すると、すべての有効なコストに基づく遅延はもはや適用されず、（インデックスのバキュームのような）必須ではない保守タスクは迂回されます。
       </para>
       <para>
<!--
        The default is 1.6 billion multixacts.  Although users can set
        this value anywhere from zero to 2.1 billion,
        <command>VACUUM</command> will silently adjust the effective
        value to no less than 105% of <xref
         linkend="guc-autovacuum-multixact-freeze-max-age"/>.
-->
デフォルトは16億マルチトランザクションです。
ユーザはこの値をゼロから21億までの間で設定できますが、<command>VACUUM</command>は<xref linkend="guc-autovacuum-multixact-freeze-max-age"/>の105%よりも小さくならないように実際の値を調整します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bytea-output" xreflabel="bytea_output">
      <term><varname>bytea_output</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>bytea_output</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>bytea_output</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the output format for values of type <type>bytea</type>.
        Valid values are <literal>hex</literal> (the default)
        and <literal>escape</literal> (the traditional PostgreSQL
        format).  See <xref linkend="datatype-binary"/> for more
        information.  The <type>bytea</type> type always
        accepts both formats on input, regardless of this setting.
-->
<type>bytea</type>型の値の出力形式を設定します。
有効な値は<literal>hex</literal>（デフォルト）、および<literal>escape</literal>（PostgreSQLの伝統的な書式）です。
より詳細は<xref linkend="datatype-binary"/>を参照してください。
<type>bytea</type>型は常にこの設定に係わらず、入力時に双方の書式を受け付けます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-xmlbinary" xreflabel="xmlbinary">
      <term><varname>xmlbinary</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>xmlbinary</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>xmlbinary</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets how binary values are to be encoded in XML.  This applies
        for example when <type>bytea</type> values are converted to
        XML by the functions <function>xmlelement</function> or
        <function>xmlforest</function>.  Possible values are
        <literal>base64</literal> and <literal>hex</literal>, which
        are both defined in the XML Schema standard.  The default is
        <literal>base64</literal>.  For further information about
        XML-related functions, see <xref linkend="functions-xml"/>.
-->
バイナリデータをXMLに符号化する方法を設定します。
例えばこれは、<function>xmlelement</function>や<function>xmlforest</function>関数で<type>bytea</type>値をXMLに変換する際に適用されます。
取り得る値は<literal>base64</literal>と<literal>hex</literal>です。
どちらもXMLスキーマ標準で定義されています。
デフォルトは<literal>base64</literal>です。
XMLに関連した関数については<xref linkend="functions-xml"/>を参照してください。
       </para>

       <para>
<!--
        The actual choice here is mostly a matter of taste,
        constrained only by possible restrictions in client
        applications.  Both methods support all possible values,
        although the hex encoding will be somewhat larger than the
        base64 encoding.
-->
実のところこの選択はほとんど趣味の問題で、クライアントアプリケーションで起こり得る制限のみに制約されます。
どちらの方法もすべての値をサポートしますが、hex符号化方式はbase64符号化方式より少し大きくなります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-xmloption" xreflabel="xmloption">
      <term><varname>xmloption</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>xmloption</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>xmloption</varname>設定パラメータ</primary>
      </indexterm>
      <indexterm>
       <primary><varname>SET XML OPTION</varname></primary>
      </indexterm>
      <indexterm>
       <primary>XML option</primary>
      </indexterm>
      <indexterm>
       <primary>XMLオプション</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets whether <literal>DOCUMENT</literal> or
        <literal>CONTENT</literal> is implicit when converting between
        XML and character string values.  See <xref
        linkend="datatype-xml"/> for a description of this.  Valid
        values are <literal>DOCUMENT</literal> and
        <literal>CONTENT</literal>.  The default is
        <literal>CONTENT</literal>.
-->
XMLと文字列値との変換時に<literal>DOCUMENT</literal>とするか<literal>CONTENT</literal>とするかを設定します。
この説明については<xref linkend="datatype-xml"/>を参照してください。
有効な値は<literal>DOCUMENT</literal>と<literal>CONTENT</literal>です。
デフォルトは<literal>CONTENT</literal>です。
       </para>

       <para>
<!--
        According to the SQL standard, the command to set this option is
-->
標準SQLに従うと、このオプションを設定するコマンドは以下のようになります。
<synopsis>
SET XML OPTION { DOCUMENT | CONTENT };
</synopsis>
<!--
        This syntax is also available in PostgreSQL.
-->
この構文はPostgreSQLでも使用可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-gin-pending-list-limit" xreflabel="gin_pending_list_limit">
      <term><varname>gin_pending_list_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>gin_pending_list_limit</varname></primary>
       <secondary>configuration parameter</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>gin_pending_list_limit</varname></primary>
       <secondary>設定パラメータ</secondary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the maximum size of a GIN index's pending list, which is used
        when <literal>fastupdate</literal> is enabled. If the list grows
        larger than this maximum size, it is cleaned up by moving
        the entries in it to the index's main GIN data structure in bulk.
        If this value is specified without units, it is taken as kilobytes.
        The default is four megabytes (<literal>4MB</literal>). This setting
        can be overridden for individual GIN indexes by changing
        index storage parameters.
         See <xref linkend="gin-fast-update"/> and <xref linkend="gin-tips"/>
         for more information.
-->
<literal>fastupdate</literal>が有効なときに使用されるGINインデックスのペンディングリストの最大サイズを設定します。
リストがこの設定値よりも大きくなったら、エントリをインデックスのGINの主データ構造に一括転送してリストはクリアされます。
この値が単位なしで指定された場合は、キロバイト単位であるとみなします。
デフォルトは4メガバイト(<literal>4MB</literal>)です。
この設定は、個々のGINインデックスに対してインデックスストレージパラメータを変更することにより、上書きできます。
更なる情報については、<xref linkend="gin-fast-update"/>と<xref linkend="gin-tips"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-createrole-self-grant" xreflabel="createrole_self_grant">
      <term><varname>createrole_self_grant</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>createrole_self_grant</varname></primary>
       <secondary>configuration parameter</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>createrole_self_grant</varname></primary>
       <secondary>設定パラメータ</secondary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If a user who has <literal>CREATEROLE</literal> but not
        <literal>SUPERUSER</literal> creates a role, and if this
        is set to a non-empty value, the newly-created role will be granted
        to the creating user with the options specified. The value must be
        <literal>set</literal>, <literal>inherit</literal>, or a
        comma-separated list of these. The default value is an empty string,
        which disables the feature.
-->
<literal>CREATEROLE</literal>を持ち、<literal>SUPERUSER</literal>を持たないユーザがロールを作成し、これが空でない値に設定されている場合、新しく作成されたロールは、この指定されたオプションを持ち、ロールを作成したユーザに付与されます。
値は、<literal>set</literal>、<literal>inherit</literal>、またはこれらのリストをカンマで区切ったものである必要があります。
デフォルト値は空の文字列であるため、この機能は無効になります。
       </para>
       <para>
<!--
        The purpose of this option is to allow a <literal>CREATEROLE</literal>
        user who is not a superuser to automatically inherit, or automatically
        gain the ability to <literal>SET ROLE</literal> to, any created users.
        Since a <literal>CREATEROLE</literal> user is always implicitly granted
        <literal>ADMIN OPTION</literal> on created roles, that user could
        always execute a <literal>GRANT</literal> statement that would achieve
        the same effect as this setting. However, it can be convenient for
        usability reasons if the grant happens automatically. A superuser
        automatically inherits the privileges of every role and can always
        <literal>SET ROLE</literal> to any role, and this setting can be used
        to produce a similar behavior for <literal>CREATEROLE</literal> users
        for users which they create.
-->
このオプションの目的は、<literal>CREATEROLE</literal>が許可されているスーパーユーザではないユーザが、作成されたユーザを自動的に継承するか、または<literal>SET ROLE</literal>権限を自動的に取得できるようにすることです。
<literal>CREATEROLE</literal>ユーザは、作成されたロールに対して常に暗黙的に<literal>ADMIN OPTION</literal>が付与されるため、そのユーザは、この設定と同じ効果を達成する<literal>GRANT</literal>文を常に実行できます。
しかし、権限付与が自動的に行われることは、使用上の理由から便利です。
スーパーユーザは、すべてのロールの権限を自動的に継承し、どのロールに対しても常に<literal>SET ROLE</literal>できます。
また、この設定を使用して、<literal>CREATEROLE</literal>ユーザが作成したユーザに対して同様の動作を生成できます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-restrict-nonsystem-relation-kind" xreflabel="restrict_nonsystem_relation_kind">
      <term><varname>restrict_nonsystem_relation_kind</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>restrict_nonsystem_relation_kind</varname></primary>
       <secondary>configuration parameter</secondary>
     </indexterm>
     </term>
     <listitem>
      <para>
<!--
       This variable specifies relation kind to which access is restricted.
       It contains a comma-separated list of relation kind.  Currently, the
       supported relation kinds are <literal>view</literal> and
       <literal>foreign-table</literal>.
-->
この変数は、アクセスが制限されているリレーション種別を指定します。
カンマ区切りのリレーション種別のリストが含まれます。
現在、サポートされているリレーション種別は<literal>view</literal>と<literal>foreign-table</literal>です。
      </para>
     </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
     <sect2 id="runtime-config-client-format">
<!--
     <title>Locale and Formatting</title>
-->
     <title>ロケールと書式設定</title>

     <variablelist>

     <varlistentry id="guc-datestyle" xreflabel="DateStyle">
      <term><varname>DateStyle</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>DateStyle</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>DateStyle</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the display format for date and time values, as well as the
        rules for interpreting ambiguous date input values. For
        historical reasons, this variable contains two independent
        components: the output format specification (<literal>ISO</literal>,
        <literal>Postgres</literal>, <literal>SQL</literal>, or <literal>German</literal>)
        and the input/output specification for year/month/day ordering
        (<literal>DMY</literal>, <literal>MDY</literal>, or <literal>YMD</literal>). These
        can be set separately or together. The keywords <literal>Euro</literal>
        and <literal>European</literal> are synonyms for <literal>DMY</literal>; the
        keywords <literal>US</literal>, <literal>NonEuro</literal>, and
        <literal>NonEuropean</literal> are synonyms for <literal>MDY</literal>. See
        <xref linkend="datatype-datetime"/> for more information. The
        built-in default is <literal>ISO, MDY</literal>, but
        <application>initdb</application> will initialize the
        configuration file with a setting that corresponds to the
        behavior of the chosen <varname>lc_time</varname> locale.
-->
日付時刻値の表示書式を設定し、曖昧な日付入力の解釈規則を設定します。
歴史的な理由により、この変数には2つの独立した要素が含まれています。
出力書式指定（<literal>ISO</literal>、<literal>Postgres</literal>、<literal>SQL</literal>、<literal>German</literal>）と年/月/日の順序の入出力指定（<literal>DMY</literal>、<literal>MDY</literal>、<literal>YMD</literal>）です。
これらは分けて設定することもまとめて設定することもできます。
<literal>Euro</literal>および<literal>European</literal>キーワードは<literal>DMY</literal>の同義語であり、<literal>US</literal>、<literal>NonEuro</literal>、<literal>NonEuropean</literal>は<literal>MDY</literal>の同義語です。
詳細は<xref linkend="datatype-datetime"/>を参照してください。
組み込みのデフォルトは<literal>ISO, MDY</literal>ですが、<application>initdb</application>により、選択された<varname>lc_time</varname>ロケールの動作に対応した設定で設定ファイルが初期化されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-intervalstyle" xreflabel="IntervalStyle">
      <term><varname>IntervalStyle</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>IntervalStyle</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>IntervalStyle</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the display format for interval values.
        The value <literal>sql_standard</literal> will produce
        output matching <acronym>SQL</acronym> standard interval literals.
        The value <literal>postgres</literal> (which is the default) will produce
        output matching <productname>PostgreSQL</productname> releases prior to 8.4
        when the <xref linkend="guc-datestyle"/>
        parameter was set to <literal>ISO</literal>.
        The value <literal>postgres_verbose</literal> will produce output
        matching <productname>PostgreSQL</productname> releases prior to 8.4
        when the <varname>DateStyle</varname>
        parameter was set to non-<literal>ISO</literal> output.
        The value <literal>iso_8601</literal> will produce output matching the time
        interval <quote>format with designators</quote> defined in section
        4.4.3.2 of ISO 8601.
-->
間隔の値の表示形式を設定します。<literal>sql_standard</literal>値は、標準<acronym>SQL</acronym>間隔リテラルに一致する出力を生成します。
（デフォルトの）値<literal>postgres</literal>は、<xref linkend="guc-datestyle"/>パラメータが<literal>ISO</literal>に設定されている場合、リリース8.4以前の<productname>PostgreSQL</productname>に一致する出力を生成します。
値<literal>postgres_verbose</literal>は、<varname>DateStyle</varname>パラメータが非<literal>ISO</literal>出力に設定されている場合、リリース8.4以前の<productname>PostgreSQL</productname>に一致する出力を生成します。
値<literal>iso_8601</literal>は、ISO 8601の4.4.3.2節で定義されている時間間隔<quote>format with designators</quote>に一致する出力を生成します。
       </para>
       <para>
<!--
        The <varname>IntervalStyle</varname> parameter also affects the
        interpretation of ambiguous interval input.  See
        <xref linkend="datatype-interval-input"/> for more information.
-->
また<varname>IntervalStyle</varname>パラメータはあいまいに入力された時間間隔の解釈に影響を与えます。
詳細については<xref linkend="datatype-interval-input"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-timezone" xreflabel="TimeZone">
      <term><varname>TimeZone</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>TimeZone</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>TimeZone</varname>設定パラメータ</primary>
      </indexterm>
      <indexterm><primary>time zone</primary></indexterm>
      <indexterm><primary>時間帯</primary></indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the time zone for displaying and interpreting time stamps.
        The built-in default is <literal>GMT</literal>, but that is typically
        overridden in <filename>postgresql.conf</filename>; <application>initdb</application>
        will install a setting there corresponding to its system environment.
        See <xref linkend="datatype-timezones"/> for more information.
-->
表示用およびタイムスタンプ解釈用の時間帯を設定します。
組み込まれているデフォルトは<literal>GMT</literal>ですが、通常は<filename>postgresql.conf</filename>により上書きされます。<application>initdb</application>によりこれらと関連した設定をシステム環境にインストールされます。
詳細は<xref linkend="datatype-timezones"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-timezone-abbreviations" xreflabel="timezone_abbreviations">
      <term><varname>timezone_abbreviations</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>timezone_abbreviations</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>timezone_abbreviations</varname>設定パラメータ</primary>
      </indexterm>
      <indexterm><primary>time zone names</primary></indexterm>
      <indexterm><primary>時間帯名</primary></indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the collection of time zone abbreviations that will be accepted
        by the server for datetime input.  The default is <literal>'Default'</literal>,
        which is a collection that works in most of the world; there are
        also <literal>'Australia'</literal> and <literal>'India'</literal>,
        and other collections can be defined for a particular installation.
        See <xref linkend="datetime-config-files"/> for more information.
-->
サーバで日付時刻の入力として受付け可能となる時間帯省略形の集合を設定します。
デフォルトは<literal>'Default'</literal>です。
これはほぼ全世界で通じる集合です。
また、<literal>Australia</literal>、<literal>India</literal>、その他特定のインストレーションで定義可能な集合が存在します。
詳細は<xref linkend="datetime-config-files"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-extra-float-digits" xreflabel="extra_float_digits">
      <term><varname>extra_float_digits</varname> (<type>integer</type>)
      <indexterm>
       <primary>significant digits</primary>
      </indexterm>
      <indexterm>
       <primary>有効数字</primary>
      </indexterm>
      <indexterm>
       <primary>floating-point</primary>
       <secondary>display</secondary>
      </indexterm>
      <indexterm>
       <primary>浮動小数点</primary>
       <secondary>表示</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>extra_float_digits</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>extra_float_digits</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter adjusts the number of digits used for textual output of
        floating-point values, including <type>float4</type>, <type>float8</type>,
        and geometric data types.
-->
このパラメータは、<type>float4</type>、<type>float8</type>、幾何データ型などにおいて、浮動小数点数値のテキスト形式の出力で使用される桁数を調整します。
       </para>
       <para>
<!--
        If the value is 1 (the default) or above, float values are output in
        shortest-precise format; see <xref linkend="datatype-float"/>. The
        actual number of digits generated depends only on the value being
        output, not on the value of this parameter. At most 17 digits are
        required for <type>float8</type> values, and 9 for <type>float4</type>
        values. This format is both fast and precise, preserving the original
        binary float value exactly when correctly read. For historical
        compatibility, values up to 3 are permitted.
-->
この値が1（デフォルト）あるいはそれ以上なら、浮動小数点数値の出力は最も短い精度の形式で出力されます。
<xref linkend="datatype-float"/>を参照してください。
生成される実際の桁数は出力される値にのみ依存します。
<type>float8</type>値では最大でも17桁、<type>float4</type>値では最大9桁必要です。
この形式は高速かつ高精度で、正しく読まれる際には元の2進数における浮動小数点値を正確に保存します。
歴史的な互換性の理由により、3までの値が許容されています。
       </para>
       <para>
<!--
        If the value is zero or negative, then the output is rounded to a
        given decimal precision. The precision used is the standard number of
        digits for the type (<literal>FLT_DIG</literal>
        or <literal>DBL_DIG</literal> as appropriate) reduced according to the
        value of this parameter. (For example, specifying -1 will cause
        <type>float4</type> values to be output rounded to 5 significant
        digits, and <type>float8</type> values
        rounded to 14 digits.) This format is slower and does not preserve all
        the bits of the binary float value, but may be more human-readable.
-->
この値がゼロまたは負なら、出力は与えられた10進精度に丸められます。
使用される精度は、各々の型の標準的の桁数（型に応じて<literal>FLT_DIG</literal>あるいは<literal>DBL_DIG</literal>）がこのパラメータの値により制限されたものになります。
（たとえば、-1にすると<type>float4</type>値は5桁に、<type>float8</type>値では14桁に丸められます。）
この形式は低速、かつ元の2進数における浮動小数点値のビットを保存しませんが、人間にとってより読みやすいかも知れません。
       </para>
       <note>
        <para>
<!--
         The meaning of this parameter, and its default value, changed
         in <productname>PostgreSQL</productname> 12;
         see <xref linkend="datatype-float"/> for further discussion.
-->
このパラメータの意味とデフォルト値は<productname>PostgreSQL</productname> 12で変更されました。
更なる説明については<xref linkend="datatype-float"/>をご覧ください。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-client-encoding" xreflabel="client_encoding">
      <term><varname>client_encoding</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>client_encoding</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>client_encoding</varname>設定パラメータ</primary>
      </indexterm>
      <indexterm><primary>character set</primary></indexterm>
      <indexterm><primary>文字セット</primary></indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the client-side encoding (character set).
        The default is to use the database encoding.
        The character sets supported by the <productname>PostgreSQL</productname>
        server are described in <xref linkend="multibyte-charset-supported"/>.
-->
クライアント側符号化方式（文字セット）を設定します。デフォルトはデータベース符号化方式を使用します。
<productname>PostgreSQL</productname>サーバでサポートされている文字セットは<xref linkend="multibyte-charset-supported"/>に記載されています。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-messages" xreflabel="lc_messages">
      <term><varname>lc_messages</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_messages</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>lc_messages</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the language in which messages are displayed.  Acceptable
        values are system-dependent; see <xref linkend="locale"/> for
        more information.  If this variable is set to the empty string
        (which is the default) then the value is inherited from the
        execution environment of the server in a system-dependent way.
-->
メッセージが表示される言語を設定します。使用可能な値はシステムに依存します。詳細については<xref linkend="locale"/>を参照してください。
この変数が空に設定された場合（これがデフォルトです）、値はシステムに依存する方法でサーバの実行環境から継承されます。
       </para>

       <para>
<!--
        On some systems, this locale category does not exist.  Setting
        this variable will still work, but there will be no effect.
        Also, there is a chance that no translated messages for the
        desired language exist.  In that case you will continue to see
        the English messages.
-->
システムによっては、このロケールのカテゴリが存在しません。この変数を設定することはできますが、実効性はありません。
また、指定の言語に翻訳されたメッセージが存在しないこともあります。
その場合は、引き続き英語のメッセージが表示されます。
       </para>

       <para>
<!--
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
この設定を変更できるのは、スーパーユーザと適切な<literal>SET</literal>権限を持つユーザだけです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-monetary" xreflabel="lc_monetary">
      <term><varname>lc_monetary</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_monetary</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>lc_monetary</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the locale to use for formatting monetary amounts, for
        example with the <function>to_char</function> family of
        functions.  Acceptable values are system-dependent; see <xref
        linkend="locale"/> for more information.  If this variable is
        set to the empty string (which is the default) then the value
        is inherited from the execution environment of the server in a
        system-dependent way.
-->
通貨書式で使用するロケールを設定します。
例えば、<function>to_char()</function>系の関数で使用します。
使用可能な値はシステムに依存します。
詳細については<xref linkend="locale"/>を参照してください。
この変数が空に設定された場合（これがデフォルトです）、値はシステムに依存する方法でサーバの実行環境から継承されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-numeric" xreflabel="lc_numeric">
      <term><varname>lc_numeric</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_numeric</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>lc_numeric</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the locale to use for formatting numbers, for example
        with the <function>to_char</function> family of
        functions. Acceptable values are system-dependent; see <xref
        linkend="locale"/> for more information.  If this variable is
        set to the empty string (which is the default) then the value
        is inherited from the execution environment of the server in a
        system-dependent way.
-->
数字の書式で使用するロケールを設定します。
例えば、<function>to_char</function>系の関数で使用します。
使用可能な値はシステムに依存します。
詳細については<xref linkend="locale"/>を参照してください。
この変数が空に設定された場合（これがデフォルトです）、値はシステムに依存する方法でサーバの実行環境から継承されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-time" xreflabel="lc_time">
      <term><varname>lc_time</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_time</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>lc_time</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the locale to use for formatting dates and times, for example
        with the <function>to_char</function> family of
        functions. Acceptable values are system-dependent; see <xref
        linkend="locale"/> for more information.  If this variable is
        set to the empty string (which is the default) then the value
        is inherited from the execution environment of the server in a
        system-dependent way.
-->
例えば<function>to_char</function>系関数における、日付と時間の書式で使用するロケールを設定します。
使用可能な値はシステムに依存します。
詳細については<xref linkend="locale"/>を参照してください。
この変数が空に設定された場合（これがデフォルトです）、値はシステムに依存する方法でサーバの実行環境から継承されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-icu-validation-level" xreflabel="icu_validation_level">
      <term><varname>icu_validation_level</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>icu_validation_level</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>icu_validation_level</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When ICU locale validation problems are encountered, controls which
        <link linkend="runtime-config-severity-levels">message level</link> is
        used to report the problem. Valid values are
        <literal>DISABLED</literal>, <literal>DEBUG5</literal>,
        <literal>DEBUG4</literal>, <literal>DEBUG3</literal>,
        <literal>DEBUG2</literal>, <literal>DEBUG1</literal>,
        <literal>INFO</literal>, <literal>NOTICE</literal>,
        <literal>WARNING</literal>, <literal>ERROR</literal>, and
        <literal>LOG</literal>.
-->
ICUロケール検証の問題が発生した場合、問題を報告するために使用される<link linkend="runtime-config-severity-levels">メッセージレベル</link>を制御します。
有効な値は、<literal>DISABLED</literal>、<literal>DEBUG5</literal>、<literal>DEBUG4</literal>、<literal>DEBUG3</literal>、<literal>DEBUG2</literal>、<literal>DEBUG1</literal>、<literal>INFO</literal>、<literal>NOTICE</literal>、<literal>WARNING</literal>、<literal>ERROR</literal>、および <literal>LOG</literal>です。
       </para>
       <para>
<!--
        If set to <literal>DISABLED</literal>, does not report validation
        problems at all. Otherwise reports problems at the given message
        level. The default is <literal>WARNING</literal>.
-->
<literal>DISABLED</literal>に設定すると、検証で見つかった問題は全く報告されません。
それ以外の場合は、指定したメッセージレベルの問題が報告されます。
デフォルトは<literal>WARNING</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-text-search-config" xreflabel="default_text_search_config">
      <term><varname>default_text_search_config</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>default_text_search_config</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>default_text_search_config</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Selects the text search configuration that is used by those variants
        of the text search functions that do not have an explicit argument
        specifying the configuration.
        See <xref linkend="textsearch"/> for further information.
        The built-in default is <literal>pg_catalog.simple</literal>, but
        <application>initdb</application> will initialize the
        configuration file with a setting that corresponds to the
        chosen <varname>lc_ctype</varname> locale, if a configuration
        matching that locale can be identified.
-->
明示的な設定指定引数を持たないテキスト検索関数の亜種で使用される、テキスト検索設定を選択します。
詳細は<xref linkend="textsearch"/>を参照してください。
組み込みのデフォルトは<literal>pg_catalog.simple</literal>ですが、<application>initdb</application>は、ロケールに合う設定を認識することができれば、選択された<varname>lc_ctype</varname>ロケールに対応した設定で設定ファイルを初期化します。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect2>

    <sect2 id="runtime-config-client-preload">
<!--
     <title>Shared Library Preloading</title>
-->
     <title>共有ライブラリのプリロード</title>

     <para>
<!--
      Several settings are available for preloading shared libraries into the
      server, in order to load additional functionality or achieve performance
      benefits.  For example, a setting of
      <literal>'$libdir/mylib'</literal> would cause
      <literal>mylib.so</literal> (or on some platforms,
      <literal>mylib.sl</literal>) to be preloaded from the installation's standard
      library directory.  The differences between the settings are when they
      take effect and what privileges are required to change them.
-->
追加機能や性能改良の目的で共有ライブラリをプリロードするいくつかの設定があります。
たとえば<literal>'$libdir/mylib'</literal>を設定すると<literal>mylib.so</literal>(あるいは他のプラットフォームでは<literal>mylib.sl</literal>)を導入設定したの標準ディレクトリからプリロードします。
各設定の違いは、設定変更を行うためにいつ、どのような権限が必要かにあります。
     </para>

     <para>
<!--
      <productname>PostgreSQL</productname> procedural language libraries can
      be preloaded in this way, typically by using the
      syntax <literal>'$libdir/plXXX'</literal> where
      <literal>XXX</literal> is <literal>pgsql</literal>, <literal>perl</literal>,
      <literal>tcl</literal>, or <literal>python</literal>.
-->
典型的には<literal>'$libdir/plXXX'</literal>のような構文を用いて<productname>PostgreSQL</productname>手続き言語ライブラリをこの方法でプリロードできます。
<literal>XXX</literal>は<literal>pgsql</literal>、<literal>perl</literal>、<literal>tcl</literal>、<literal>python</literal>です。
     </para>

     <para>
<!--
      Only shared libraries specifically intended to be used with PostgreSQL
      can be loaded this way.  Every PostgreSQL-supported library has
      a <quote>magic block</quote> that is checked to guarantee compatibility.  For
      this reason, non-PostgreSQL libraries cannot be loaded in this way.  You
      might be able to use operating-system facilities such
      as <envar>LD_PRELOAD</envar> for that.
-->
PostgreSQLで使用することを意図したライブラリだけがこの方法でロードできます。
すべてのPostgreSQL用のライブラリは<quote>magic block</quote>を持ち、互換性を保証するためにチェックされます。
ですからPostgreSQL用ではないライブラリはこの方法ではロードできません。
<envar>LD_PRELOAD</envar>のようなOSの機能を使えばあるいは使用できるかもしれません。
     </para>

     <para>
<!--
      In general, refer to the documentation of a specific module for the
      recommended way to load that module.
-->
一般的に言ってモジュールのドキュメントを参照し、推奨される方法でロードしてください。
     </para>

     <variablelist>
     <varlistentry id="guc-local-preload-libraries" xreflabel="local_preload_libraries">
      <term><varname>local_preload_libraries</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>local_preload_libraries</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>local_preload_libraries</varname>設定パラメータ</primary>
      </indexterm>
      <indexterm>
       <primary><filename>$libdir/plugins</filename></primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This variable specifies one or more shared libraries that are to be
        preloaded at connection start.
        It contains a comma-separated list of library names, where each name
        is interpreted as for the <link linkend="sql-load"><command>LOAD</command></link> command.
        Whitespace between entries is ignored; surround a library name with
        double quotes if you need to include whitespace or commas in the name.
        The parameter value only takes effect at the start of the connection.
        Subsequent changes have no effect.  If a specified library is not
        found, the connection attempt will fail.
-->
この変数は、接続時に事前読み込みされる、1つまたは複数の共有ライブラリを指定します。
ここにはカンマ区切りでライブラリ名のリストを格納し、各々の名前は<link linkend="sql-load"><command>LOAD</command></link>コマンドで解釈されます。
項目の間の空白は無視されます。
名前の中に空白あるいはカンマを含める場合は、二重引用符で囲ってください。
このパラメータは、接続の開始時にのみ効果があります。
以降の変更は効果がありません。
もし指定したライブラリが見つからない場合は、接続は失敗します。
       </para>

       <para>
<!--
        This option can be set by any user.  Because of that, the libraries
        that can be loaded are restricted to those appearing in the
        <filename>plugins</filename> subdirectory of the installation's
        standard library directory.  (It is the database administrator's
        responsibility to ensure that only <quote>safe</quote> libraries
        are installed there.)  Entries in <varname>local_preload_libraries</varname>
        can specify this directory explicitly, for example
        <literal>$libdir/plugins/mylib</literal>, or just specify
        the library name &mdash; <literal>mylib</literal> would have
        the same effect as <literal>$libdir/plugins/mylib</literal>.
-->
このオプションはすべてのユーザが設定できます。
この理由で、読み込み可能なライブラリはインストレーションの共有ライブラリディレクトリのサブディレクトリ<filename>plugins</filename>内にあるものに制限されています。
（確実に<quote>安全</quote>なライブラリのみをここにインストールすることはデータベース管理者の責任です。）
<varname>local_preload_libraries</varname>内の項目で、たとえば<literal>$libdir/plugins/mylib</literal>のようにこのディレクトリを明示的に指定することも、単にライブラリ名を指定することも可能です。
<literal>mylib</literal> は<literal>$libdir/plugins/mylib</literal>と同じ効果です。
       </para>

       <para>
<!--
        The intent of this feature is to allow unprivileged users to load
        debugging or performance-measurement libraries into specific sessions
        without requiring an explicit <command>LOAD</command> command.  To that end,
        it would be typical to set this parameter using
        the <envar>PGOPTIONS</envar> environment variable on the client or by
        using
        <command>ALTER ROLE SET</command>.
-->
この機能の意図するところは、明示的な<command>LOAD</command>コマンドを使わずに、特定のセッションにおいて非特権ユーザがデバッグ用あるいは性能計測用のライブラリをロードできるようにすることにあります。
そのためにも、クライアント側で<envar>PGOPTIONS</envar>環境変数を使う、あるいは<command>ALTER ROLE SET</command>を使うことが典型的になるでしょう。
       </para>

       <para>
<!--
        However, unless a module is specifically designed to be used in this way by
        non-superusers, this is usually not the right setting to use.  Look
        at <xref linkend="guc-session-preload-libraries"/> instead.
-->
しかし、モジュールが特にスーパーユーザ以外に使われることを意図しているのでない限り、通常この方法は正しい使い方ではありません。
代わりに<xref linkend="guc-session-preload-libraries"/>を見てください。
       </para>
      </listitem>
     </varlistentry>


     <varlistentry id="guc-session-preload-libraries" xreflabel="session_preload_libraries">
      <term><varname>session_preload_libraries</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>session_preload_libraries</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>session_preload_libraries</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This variable specifies one or more shared libraries that are to be
        preloaded at connection start.
        It contains a comma-separated list of library names, where each name
        is interpreted as for the <link linkend="sql-load"><command>LOAD</command></link> command.
        Whitespace between entries is ignored; surround a library name with
        double quotes if you need to include whitespace or commas in the name.
        The parameter value only takes effect at the start of the connection.
        Subsequent changes have no effect.  If a specified library is not
        found, the connection attempt will fail.
-->
この変数は、接続時に事前読み込みされる、1つまたは複数の共有ライブラリを指定します。
ここにはカンマ区切りでライブラリ名のリストを格納し、各々の名前は<link linkend="sql-load"><command>LOAD</command></link>コマンドで解釈されます。
項目の間の空白は無視されます。
名前の中に空白あるいはカンマを含める場合は、二重引用符で囲ってください。
このパラメータは、接続の開始時にのみ効果があります。
以降の変更は効果がありません。
もし指定したライブラリが見つからない場合は、接続は失敗します。
<!--
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
この設定を変更できるのは、スーパーユーザと適切な<literal>SET</literal>権限を持つユーザだけです。
       </para>

       <para>
<!--
        The intent of this feature is to allow debugging or
        performance-measurement libraries to be loaded into specific sessions
        without an explicit
        <command>LOAD</command> command being given.  For
        example, <xref linkend="auto-explain"/> could be enabled for all
        sessions under a given user name by setting this parameter
        with <command>ALTER ROLE SET</command>.  Also, this parameter can be changed
        without restarting the server (but changes only take effect when a new
        session is started), so it is easier to add new modules this way, even
        if they should apply to all sessions.
-->
この機能は、デバッグや性能測定の目的で<command>LOAD</command>コマンドを使わずに特定のセッションでライブラリをロードする目的で使われます。
たとえば<command>ALTER ROLE SET</command>で設定することにより、特定のユーザが開始するすべてのセッションで<xref linkend="auto-explain"/>が有効になります。
また、このパラメータはサーバを再起動せずに変更できます(しかし変更は新しいセッションが開始するときにのみ有効となります)。すべてのセッションで有効にしたいのであれば、この方法で新しいモジュールを容易に追加できます。
       </para>

       <para>
<!--
        Unlike <xref linkend="guc-shared-preload-libraries"/>, there is no large
        performance advantage to loading a library at session start rather than
        when it is first used.  There is some advantage, however, when
        connection pooling is used.
-->
<xref linkend="guc-shared-preload-libraries"/>と違って、ライブラリがはじめて使われるときにロードする方法と比べてセッションが開始するときにライブラリをロードする方法には大きな性能的な優位性はありません。
しかし、コネクションプーリングを使うのであれば、いくらか優位性があります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-shared-preload-libraries" xreflabel="shared_preload_libraries">
      <term><varname>shared_preload_libraries</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>shared_preload_libraries</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>shared_preload_libraries</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This variable specifies one or more shared libraries to be preloaded at
        server start.
        It contains a comma-separated list of library names, where each name
        is interpreted as for the <link linkend="sql-load"><command>LOAD</command></link> command.
        Whitespace between entries is ignored; surround a library name with
        double quotes if you need to include whitespace or commas in the name.
        This parameter can only be set at server start.  If a specified
        library is not found, the server will fail to start.
-->
この変数はサーバ起動時にプリロードされる一つ以上の共有ライブラリを指定します。
ここにはカンマ区切りでライブラリ名のリストを格納し、各々の名前は<link linkend="sql-load"><command>LOAD</command></link>コマンドで解釈されます。
項目の間の空白は無視されます。
名前の中に空白あるいはカンマを含める場合は、二重引用符で囲ってください。
このパラメータはサーバ起動時のみ設定可能です。
もし指定したライブラリが見つからない場合は、サーバの起動は失敗します。
       </para>

       <para>
<!--
        Some libraries need to perform certain operations that can only take
        place at postmaster start, such as allocating shared memory, reserving
        light-weight locks, or starting background workers.  Those libraries
        must be loaded at server start through this parameter.  See the
        documentation of each library for details.
-->
ライブラリによってはpostmaster起動時にのみ可能な操作を実行する必要があるものがあります。
たとえば、共有メモリの獲得、軽量ロックの予約、バックグラウンドワーカーの起動などです。
このようなライブラリはこのパラメータを使ってサーバ起動時にロードしなければなりません。
詳細は各ライブラリのドキュメントを見てください。
       </para>

       <para>
<!--
        Other libraries can also be preloaded.  By preloading a shared library,
        the library startup time is avoided when the library is first used.
        However, the time to start each new server process might increase
        slightly, even if that process never uses the library.  So this
        parameter is recommended only for libraries that will be used in most
        sessions.  Also, changing this parameter requires a server restart, so
        this is not the right setting to use for short-term debugging tasks,
        say.  Use <xref linkend="guc-session-preload-libraries"/> for that
        instead.
-->
これ以外のライブラリもプリロードできます。
共有ライブラリをプリロードすることにより、最初にライブラリが使われる際にライブラリが起動する時間を避けることができます。
しかし、そのライブラリが使われないとしても、サーバプロセスが起動する時間がわずかに長くなる可能性があります。
したがって、この方法は、ほとんどのセッションで使われるライブラリにのみ使用することを推奨します。
また、パラメータの変更にはサーバの再起動が必要になります。
ですから、たとえば短期のデバッグ仕事にこの設定を使うのは適当とは言えません。
<xref linkend="guc-session-preload-libraries"/>を代わりに使ってください。
       </para>

      <note>
       <para>
<!--
        On Windows hosts, preloading a library at server start will not reduce
        the time required to start each new server process; each server process
        will re-load all preload libraries.  However, <varname>shared_preload_libraries
        </varname> is still useful on Windows hosts for libraries that need to
        perform operations at postmaster start time.
-->
Windowsのホストでは、ライブラリのプリロードは、新しいサーバプロセスの起動に要する時間を短縮しません。
個々のサーバプロセスは、すべてのプリロードライブラリを再読み込みします。
それでもpostmaster起動時に操作を実行しなければならないライブラリを使用するWindowsホストにとっては<varname>shared_preload_libraries</varname>は有用です。
       </para>
      </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-provider" xreflabel="jit_provider">
      <term><varname>jit_provider</varname> (<type>string</type>)
       <indexterm>
        <primary><varname>jit_provider</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>jit_provider</varname>設定パラメータ</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This variable is the name of the JIT provider library to be used
        (see <xref linkend="jit-pluggable"/>).
        The default is <literal>llvmjit</literal>.
        This parameter can only be set at server start.
-->
この変数は、使用するJITプロバイダライブラリ(<xref linkend="jit-pluggable"/>参照)の名前です。
デフォルトは<literal>llvmjit</literal>です。
このパラメータはサーバ起動時のみ設定可能です。
       </para>

       <para>
<!--
        If set to a non-existent library, <acronym>JIT</acronym> will not be
        available, but no error will be raised. This allows JIT support to be
        installed separately from the main
        <productname>PostgreSQL</productname> package.
-->
存在しないライブラリが指定されると、<acronym>JIT</acronym>は利用できませんが、エラーは起こりません。
これにより、<productname>PostgreSQL</productname>パッケージとは別にJITサポートをインストールできるようになります。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect2>

     <sect2 id="runtime-config-client-other">
<!--
     <title>Other Defaults</title>
-->
     <title>その他のデフォルト</title>

     <variablelist>

     <varlistentry id="guc-dynamic-library-path" xreflabel="dynamic_library_path">
      <term><varname>dynamic_library_path</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>dynamic_library_path</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>dynamic_library_path</varname>設定パラメータ</primary>
      </indexterm>
      <indexterm><primary>dynamic loading</primary></indexterm>
      <indexterm><primary>動的ロード</primary></indexterm>
      </term>
      <listitem>
       <para>
<!--
        If a dynamically loadable module needs to be opened and the
        file name specified in the <command>CREATE FUNCTION</command> or
        <command>LOAD</command> command
        does not have a directory component (i.e., the
        name does not contain a slash), the system will search this
        path for the required file.
-->
オープンする必要がある動的ロード可能なモジュールについて、その<command>CREATE FUNCTION</command>や<command>LOAD</command>コマンドで指定されたファイル名にディレクトリ要素がなく（つまり、名前にスラッシュが含まれずに）指定された場合、システムは必要なファイルをこのパスから検索します。
       </para>

       <para>
<!--
        The value for <varname>dynamic_library_path</varname> must be a
        list of absolute directory paths separated by colons (or semi-colons
        on Windows).  If a list element starts
        with the special string <literal>$libdir</literal>, the
        compiled-in <productname>PostgreSQL</productname> package
        library directory is substituted for <literal>$libdir</literal>; this
        is where the modules provided by the standard
        <productname>PostgreSQL</productname> distribution are installed.
        (Use <literal>pg_config &#45;-pkglibdir</literal> to find out the name of
        this directory.) For example:
-->
<varname>dynamic_library_path</varname>の値は、絶対パスのディレクトリ名をコロン（Windowsの場合はセミコロン）で区切った一覧です。
この一覧の要素が特別な<literal>$libdir</literal>という値から始まる場合、コンパイルされた<productname>PostgreSQL</productname>パッケージのライブラリディレクトリで<literal>$libdir</literal>は置換されます。
ここには、<productname>PostgreSQL</productname>の標準配布物により提供されるモジュールがインストールされます。
（このディレクトリ名を表示するには、<literal>pg_config --pkglibdir</literal> を使用してください。）
例を以下に示します。
<programlisting>
dynamic_library_path = '/usr/local/lib/postgresql:/home/my_project/lib:$libdir'
</programlisting>
<!--
        or, in a Windows environment:
-->
Windows環境の場合は以下です。
<programlisting>
dynamic_library_path = 'C:\tools\postgresql;H:\my_project\lib;$libdir'
</programlisting>
       </para>

       <para>
<!--
        The default value for this parameter is
        <literal>'$libdir'</literal>. If the value is set to an empty
        string, the automatic path search is turned off.
-->
このパラメータのデフォルト値は<literal>'$libdir'</literal>です。
この値が空に設定された場合、自動的なパス検索は無効になります。
       </para>

       <para>
<!--
        This parameter can be changed at run time by superusers and users
        with the appropriate <literal>SET</literal> privilege, but a
        setting done that way will only persist until the end of the
        client connection, so this method should be reserved for
        development purposes. The recommended way to set this parameter
        is in the <filename>postgresql.conf</filename> configuration
        file.
-->
このパラメータはスーパーユーザと、適切な<literal>SET</literal>権限を持つユーザによって実行時に変更することができますが、この方法での設定は、そのクライアント接続が終わるまでしか有効になりません。
ですので、この方法は開発目的でのみ使用すべきです。
推奨方法はこのパラメータを<filename>postgresql.conf</filename>設定ファイル内で設定することです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-gin-fuzzy-search-limit" xreflabel="gin_fuzzy_search_limit">
      <term><varname>gin_fuzzy_search_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>gin_fuzzy_search_limit</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>gin_fuzzy_search_limit</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Soft upper limit of the size of the set returned by GIN index scans. For more
        information see <xref linkend="gin-tips"/>.
-->
GINインデックススキャンにより返されるセットのソフトな上限サイズです。
詳細は<xref linkend="gin-tips"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-locks">
<!--
    <title>Lock Management</title>
-->
    <title>ロック管理</title>

     <variablelist>

     <varlistentry id="guc-deadlock-timeout" xreflabel="deadlock_timeout">
      <term><varname>deadlock_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary>deadlock</primary>
       <secondary>timeout during</secondary>
      </indexterm>
      <indexterm>
       <primary>デッドロック</primary>
       <secondary>間のタイムアウト</secondary>
      </indexterm>
      <indexterm>
       <primary>timeout</primary>
       <secondary>deadlock</secondary>
      </indexterm>
      <indexterm>
       <primary>タイムアウト</primary>
       <secondary>デッドロック</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>deadlock_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>deadlock_timeout</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This is the amount of time to wait on a lock
        before checking to see if there is a deadlock condition. The
        check for deadlock is relatively expensive, so the server doesn't run
        it every time it waits for a lock. We optimistically assume
        that deadlocks are not common in production applications and
        just wait on the lock for a while before checking for a
        deadlock. Increasing this value reduces the amount of time
        wasted in needless deadlock checks, but slows down reporting of
        real deadlock errors.
        If this value is specified without units, it is taken as milliseconds.
        The default is one second (<literal>1s</literal>),
        which is probably about the smallest value you would want in
        practice. On a heavily loaded server you might want to raise it.
        Ideally the setting should exceed your typical transaction time,
        so as to improve the odds that a lock will be released before
        the waiter decides to check for deadlock.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
これは、デッドロック状態があるかどうかを調べる前にロックを待つ時間です。
デッドロックの検査は比較的高価なので、サーバはロックを待つ度にこれを実行するわけではありません。
楽天的ですがデッドロックは実用レベルのアプリケーションでは頻繁に発生しないと仮定し、デッドロックの検査の前にしばらくはロック待ちをします。
この値を増やすことにより必要のないデッドロックの検査で無駄にされる時間は減りますが、本当にデッドロックがあった場合の報告が遅れます。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
デフォルトは1秒（<literal>1s</literal>）で、おそらく実用の際にはこれ以上は必要でしょう。
負荷の大きいサーバではもっと必要かもしれません。
理想としてはこの設定は通常のトランザクションにかかる時間を超えているべきです。
そうすればロック待ちトランザクションがデッドロックの検査をする前にロックが解除される可能性が改善されます。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>

       <para>
<!--
        When <xref linkend="guc-log-lock-waits"/> is set,
        this parameter also determines the amount of time to wait before
        a log message is issued about the lock wait.  If you are trying
        to investigate locking delays you might want to set a shorter than
        normal <varname>deadlock_timeout</varname>.
-->
<xref linkend="guc-log-lock-waits"/>が設定された場合、このパラメータはロック待機に関するログメッセージを出力する前の待機時間を決定します。
ロック遅延の調査を行う場合は、通常の<varname>deadlock_timeout</varname>よりも短い値を設定することを勧めます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-locks-per-transaction" xreflabel="max_locks_per_transaction">
      <term><varname>max_locks_per_transaction</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_locks_per_transaction</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_locks_per_transaction</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The shared lock table has space for
        <varname>max_locks_per_transaction</varname> objects
        (e.g., tables) per server process or prepared transaction;
        hence, no more than this many distinct objects can be locked at
        any one time.  This parameter limits the average number of object
        locks used by each transaction; individual transactions
        can lock more objects as long as the locks of all transactions
        fit in the lock table.  This is <emphasis>not</emphasis> the number of
        rows that can be locked; that value is unlimited.  The default,
        64, has historically proven sufficient, but you might need to
        raise this value if you have queries that touch many different
        tables in a single transaction, e.g., query of a parent table with
        many children.  This parameter can only be set at server start.
-->
共有ロックテーブルは、プロセスごと、あるいは準備されたトランザクションごとの<varname>max_locks_per_transaction</varname>オブジェクト（たとえばテーブル）空間を持っています。
したがって、ある時点でこの数以上の個々のオブジェクトをロックすることはできません。
このパラメータは各トランザクションで使用するオブジェクトロックの平均値を制限します。
個々のトランザクションでは、このロックテーブルにすべてのトランザクションのロックが収まる限りオブジェクトのロックを獲得できます。
これは、ロックできる行数では<emphasis>ありません</emphasis>。この値には制限がありません。
デフォルトの64は、経験的に十分であると証明されていますが、単一のトランザクションで数多くの異なるテーブルをいじる問い合わせがいる場合、たとえば、数多くの子テーブルを持つ親テーブルの問い合わせなど、この値を大きくする必要があるかも知れません。
このパラメータはサーバ起動時のみ設定可能です。
       </para>

       <para>
<!--
        When running a standby server, you must set this parameter to have the
        same or higher value as on the primary server. Otherwise, queries
        will not be allowed in the standby server.
-->
スタンバイサーバを運用している場合、このパラメータはプライマリサーバでの設定と同じ、もしくはより高い値に設定しなければなりません。そうしないと問い合わせがスタンバイサーバ内で受け入れられません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-pred-locks-per-transaction" xreflabel="max_pred_locks_per_transaction">
      <term><varname>max_pred_locks_per_transaction</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_pred_locks_per_transaction</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_pred_locks_per_transaction</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The shared predicate lock table has space for
        <varname>max_pred_locks_per_transaction</varname> objects
        (e.g., tables) per server process or prepared transaction;
        hence, no more than this many distinct objects can be locked at
        any one time.  This parameter limits the average number of object
        locks used by each transaction; individual transactions
        can lock more objects as long as the locks of all transactions
        fit in the lock table.  This is <emphasis>not</emphasis> the number of
        rows that can be locked; that value is unlimited.  The default,
        64, has historically proven sufficient, but you might need to
        raise this value if you have clients that touch many different
        tables in a single serializable transaction. This parameter can
        only be set at server start.
-->
共有述語ロックテーブルは、プロセスごと、あるいは準備されたトランザクションごとの<varname>max_pred_locks_per_transaction</varname>オブジェクト（たとえばテーブル）空間を持っています。
したがって、ある時点でこの数以上の個々のオブジェクトをロックすることはできません。
このパラメータは各トランザクションで使用するオブジェクトロックの平均値を制限します。
個々のトランザクションでは、このロックテーブルにすべてのトランザクションのロックが収まる限りオブジェクトのロックを獲得できます。
これはロック可能な行数では<emphasis>ありません</emphasis>。その値は無制限です。
デフォルトは64で、過去の経験から十分であることがわかっていますが、単一のシリアライザブルトランザクションで数多くの異なるテーブルに触れるクライアントが存在する場合、この値を大きくする必要があることがあります。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-pred-locks-per-relation" xreflabel="max_pred_locks_per_relation">
      <term><varname>max_pred_locks_per_relation</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_pred_locks_per_relation</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_pred_locks_per_relation</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This controls how many pages or tuples of a single relation can be
        predicate-locked before the lock is promoted to covering the whole
        relation.  Values greater than or equal to zero mean an absolute
        limit, while negative values
        mean <xref linkend="guc-max-pred-locks-per-transaction"/> divided by
        the absolute value of this setting.  The default is -2, which keeps
        the behavior from previous versions of <productname>PostgreSQL</productname>.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
リレーション全体をカバーするロックに昇格する前に、一つリレーションの中で述語ロックできるページ数あるいはタプル数を指定します。
0以上の値は、絶対的な制限を表し、負の数は<xref linkend="guc-max-pred-locks-per-transaction"/>をその絶対値で割ったものを表します。
デフォルトは-2で、以前のバージョンの<productname>PostgreSQL</productname>の振る舞いを維持します。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-pred-locks-per-page" xreflabel="max_pred_locks_per_page">
      <term><varname>max_pred_locks_per_page</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_pred_locks_per_page</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_pred_locks_per_page</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This controls how many rows on a single page can be predicate-locked
        before the lock is promoted to covering the whole page.  The default
        is 2.  This parameter can only be set in
        the <filename>postgresql.conf</filename> file or on the server command line.
-->
ページ全体をカバーするロックに昇格する前に、一つページの中で述語ロックできる行数を指定します。
デフォルトは2です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
   </sect1>

   <sect1 id="runtime-config-compatible">
<!--
    <title>Version and Platform Compatibility</title>
-->
    <title>バージョンとプラットフォーム互換性</title>

    <sect2 id="runtime-config-compatible-version">
<!--
     <title>Previous PostgreSQL Versions</title>
-->
     <title>以前のPostgreSQLバージョン</title>

     <variablelist>

     <varlistentry id="guc-array-nulls" xreflabel="array_nulls">
      <term><varname>array_nulls</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>array_nulls</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>array_nulls</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This controls whether the array input parser recognizes
        unquoted <literal>NULL</literal> as specifying a null array element.
        By default, this is <literal>on</literal>, allowing array values containing
        null values to be entered.  However, <productname>PostgreSQL</productname> versions
        before 8.2 did not support null values in arrays, and therefore would
        treat <literal>NULL</literal> as specifying a normal array element with
        the string value <quote>NULL</quote>.  For backward compatibility with
        applications that require the old behavior, this variable can be
        turned <literal>off</literal>.
-->
これは、配列入力パーサが引用符のない<literal>NULL</literal>をNULL配列要素として認識するかどうかを制御します。
デフォルトでは、これは<literal>on</literal>で、NULL値を持つ配列値を入力することができます。
しかし、8.2より前のバージョンの<productname>PostgreSQL</productname>では、配列内のNULL値をサポートしておらず、<literal>NULL</literal>を<quote>NULL</quote>という値の文字列を持つ通常の配列要素として扱っていました。
古い動作を必要とするアプリケーションの後方互換性のため、この変数を<literal>off</literal>にすることができます。
       </para>

       <para>
<!--
        Note that it is possible to create array values containing null values
        even when this variable is <literal>off</literal>.
-->
この変数が<literal>off</literal>であっても、NULL値を含む配列値を作成することができることに注意してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-backslash-quote" xreflabel="backslash_quote">
      <term><varname>backslash_quote</varname> (<type>enum</type>)
      <indexterm><primary>strings</primary><secondary>backslash quotes</secondary></indexterm>
      <indexterm><primary>文字列</primary><secondary>バックスラッシュによる引用</secondary></indexterm>
      <indexterm>
       <primary><varname>backslash_quote</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>backslash_quote</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This controls whether a quote mark can be represented by
        <literal>\'</literal> in a string literal.  The preferred, SQL-standard way
        to represent a quote mark is by doubling it (<literal>''</literal>) but
        <productname>PostgreSQL</productname> has historically also accepted
        <literal>\'</literal>. However, use of <literal>\'</literal> creates security risks
        because in some client character set encodings, there are multibyte
        characters in which the last byte is numerically equivalent to ASCII
        <literal>\</literal>.  If client-side code does escaping incorrectly then an
        SQL-injection attack is possible.  This risk can be prevented by
        making the server reject queries in which a quote mark appears to be
        escaped by a backslash.
        The allowed values of <varname>backslash_quote</varname> are
        <literal>on</literal> (allow <literal>\'</literal> always),
        <literal>off</literal> (reject always), and
        <literal>safe_encoding</literal> (allow only if client encoding does not
        allow ASCII <literal>\</literal> within a multibyte character).
        <literal>safe_encoding</literal> is the default setting.
-->
文字列リテラルの中で引用符が<literal>\'</literal>で表現されるかどうかを管理します。
引用符の表現としてSQL準拠の方式では二重化（<literal>''</literal>）ですが、<productname>PostgreSQL</productname>は歴史的に<literal>\'</literal>も受け付けます。
とは言っても、いくつかのクライアント文字集合符号化方式において、最終バイトが数値的にASCIIの<literal>\</literal>に等しいマルチバイト文字があり、<literal>\'</literal>を使用するとセキュリティ上問題を引き起こす可能性があります。
クライアント側のコードが事実上エスケープを正しく扱わない場合、SQLインジェクション攻撃が可能になります。この危険性の回避は、サーバが逆スラッシュでエスケープされた引用符を含む問い合わせを拒絶するようにします。
許可される<varname>backslash_quote</varname>の値は、<literal>on</literal> （常に <literal>\'</literal> を許可）,<literal>off</literal> （常に拒否）、および<literal>safe_encoding</literal> （クライアント符号化方式がASCIIの<literal>\</literal>を許可しないときのみ、マルチバイト文字内で許可）。
<literal>safe_encoding</literal> がデフォルトの設定。
       </para>

       <para>
<!--
        Note that in a standard-conforming string literal, <literal>\</literal> just
        means <literal>\</literal> anyway.  This parameter only affects the handling of
        non-standard-conforming literals, including
        escape string syntax (<literal>E'...'</literal>).
-->
標準に従った文字列リテラルでは、<literal>\</literal>は単に<literal>\</literal>を意味するものです。
このパラメータのみが、エスケープ文字列構文（<literal>E'...'</literal>）を含む標準に従わないリテラルの取り扱いに影響します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-escape-string-warning" xreflabel="escape_string_warning">
      <term><varname>escape_string_warning</varname> (<type>boolean</type>)
      <indexterm><primary>strings</primary><secondary>escape warning</secondary></indexterm>
      <indexterm><primary>文字列</primary><secondary>エスケープに関する警告</secondary></indexterm>
      <indexterm>
       <primary><varname>escape_string_warning</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>escape_string_warning</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When on, a warning is issued if a backslash (<literal>\</literal>)
        appears in an ordinary string literal (<literal>'...'</literal>
        syntax) and <varname>standard_conforming_strings</varname> is off.
        The default is <literal>on</literal>.
-->
有効の場合、通常の文字列リテラル（<literal>'...'</literal>構文）にバックスラッシュ（<literal>\</literal>）があり、<varname>standard_conforming_strings</varname>が無効な場合、警告が発せられます。
デフォルトは<literal>on</literal>です。
       </para>
       <para>
<!--
        Applications that wish to use backslash as escape should be
        modified to use escape string syntax (<literal>E'...'</literal>),
        because the default behavior of ordinary strings is now to treat
        backslash as an ordinary character, per SQL standard.  This variable
        can be enabled to help locate code that needs to be changed.
-->
通常文字列のデフォルトの振る舞いは、標準SQLではバックスラッシュを通常文字として取り扱うため、バックスラッシュをエスケープとして使用したいアプリケーションは、エスケープ文字列構文(<literal>E'...'</literal>)を使用するように変更すべきです。
この変数は変更すべきコードを突き止めるのに役立つよう、有効にすることができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lo-compat-privileges" xreflabel="lo_compat_privileges">
      <term><varname>lo_compat_privileges</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>lo_compat_privileges</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>lo_compat_privileges</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        In <productname>PostgreSQL</productname> releases prior to 9.0, large objects
        did not have access privileges and were, therefore, always readable
        and writable by all users.  Setting this variable to <literal>on</literal>
        disables the new privilege checks, for compatibility with prior
        releases.  The default is <literal>off</literal>.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
9.0以前の<productname>PostgreSQL</productname>リリースでは、ラージオブジェクトはアクセス権限が無く、従って全てのユーザが常に読み込み、書き込みが可能でした。
この変数を<literal>on</literal>にすると、以前のリリースとの互換性のため、新規の権限チェックが無効になります。
デフォルトは<literal>off</literal>です。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
       <para>
<!--
        Setting this variable does not disable all security checks related to
        large objects &mdash; only those for which the default behavior has
        changed in <productname>PostgreSQL</productname> 9.0.
-->
この変数を設定しても、ラージオブジェクトに関連した全ての安全性チェックを無効にする訳ではありません。
<productname>PostgreSQL</productname> 9.0で変更されたデフォルトの動きに対してのみです。
       </para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-quote-all-identifiers" xreflabel="quote-all-identifiers">
      <term><varname>quote_all_identifiers</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>quote_all_identifiers</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>quote_all_identifiers</varname> 設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When the database generates SQL, force all identifiers to be quoted,
        even if they are not (currently) keywords.  This will affect the
        output of <command>EXPLAIN</command> as well as the results of functions
        like <function>pg_get_viewdef</function>.  See also the
        <option>&#45;-quote-all-identifiers</option> option of
        <xref linkend="app-pgdump"/> and <xref linkend="app-pg-dumpall"/>.
-->
データベースがSQLを生成する時、たとえ（現在）キーワードになっていなくても、全ての識別子を引用符で囲むことを強制します。
これは <command>EXPLAIN</command>の出力に影響を与えるのみならず、<function>pg_get_viewdef</function>のような関数の結果にも影響します。
<xref linkend="app-pgdump"/> および <xref linkend="app-pg-dumpall"/>の<option>--quote-all-identifiers</option>オプションも参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-standard-conforming-strings" xreflabel="standard_conforming_strings">
      <term><varname>standard_conforming_strings</varname> (<type>boolean</type>)
      <indexterm><primary>strings</primary><secondary>standard conforming</secondary></indexterm>
      <indexterm><primary>文字列</primary><secondary>標準に従う</secondary></indexterm>
      <indexterm>
       <primary><varname>standard_conforming_strings</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>standard_conforming_strings</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This controls whether ordinary string literals
        (<literal>'...'</literal>) treat backslashes literally, as specified in
        the SQL standard.
        Beginning in <productname>PostgreSQL</productname> 9.1, the default is
        <literal>on</literal> (prior releases defaulted to <literal>off</literal>).
        Applications can check this
        parameter to determine how string literals will be processed.
        The presence of this parameter can also be taken as an indication
        that the escape string syntax (<literal>E'...'</literal>) is supported.
        Escape string syntax (<xref linkend="sql-syntax-strings-escape"/>)
        should be used if an application desires
        backslashes to be treated as escape characters.
-->
標準SQLで規定されたように、通常の文字列リテラル（<literal>'...'</literal>）がバックスラッシュをそのまま取り扱うか否かを制御します。
<productname>PostgreSQL</productname> 9.1からデフォルトは<literal>on</literal>になっています（それ以前のリリースでは<literal>off</literal>がデフォルトでした）。
どのように文字列リテラルが処理されるかを決めるこのパラメータを、アプリケーションで検査することができます。
このパラメータの存在は、エスケープ文字列構文（<literal>E'...'</literal>）がサポートされているかどうかを示すものとも考えられます。
エスケープ文字列構文 (<xref linkend="sql-syntax-strings-escape"/>)は、アプリケーションでバックスラッシュをエスケープ文字として扱いたい場合に使用すべきです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-synchronize-seqscans" xreflabel="synchronize_seqscans">
      <term><varname>synchronize_seqscans</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>synchronize_seqscans</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>synchronize_seqscans</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This allows sequential scans of large tables to synchronize with each
        other, so that concurrent scans read the same block at about the
        same time and hence share the I/O workload.  When this is enabled,
        a scan might start in the middle of the table and then <quote>wrap
        around</quote> the end to cover all rows, so as to synchronize with the
        activity of scans already in progress.  This can result in
        unpredictable changes in the row ordering returned by queries that
        have no <literal>ORDER BY</literal> clause.  Setting this parameter to
        <literal>off</literal> ensures the pre-8.3 behavior in which a sequential
        scan always starts from the beginning of the table.  The default
        is <literal>on</literal>.
-->
これにより、同時実行スキャンがほぼ同じ時間に同じブロックを読み取り、I/Oへの負荷を分散できるように、互いに同期して、大規模テーブルをシーケンシャルスキャンすることができます。
これが有効な場合、スキャンはテーブルの途中から始まり、進行中のスキャンの活動と同期するように、行全体を覆うように終端を<quote>巻き上げる</quote>可能性があります。
これにより、<literal>ORDER BY</literal>句を持たない問い合わせが返す行の順序は予想できない程変わってしまいます。
このパラメータを<literal>off</literal>にすることで、シーケンシャルスキャンが常にテーブルの先頭から始まるという、8.3より前の動作を保証します。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-compatible-clients">
<!--
     <title>Platform and Client Compatibility</title>
-->
     <title>プラットフォームとクライアント互換性</title>
     <variablelist>

     <varlistentry id="guc-transform-null-equals" xreflabel="transform_null_equals">
      <term><varname>transform_null_equals</varname> (<type>boolean</type>)
      <indexterm><primary>IS NULL</primary></indexterm>
      <indexterm>
       <primary><varname>transform_null_equals</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>transform_null_equals</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When on, expressions of the form <literal><replaceable>expr</replaceable> =
        NULL</literal> (or <literal>NULL =
        <replaceable>expr</replaceable></literal>) are treated as
        <literal><replaceable>expr</replaceable> IS NULL</literal>, that is, they
        return true if <replaceable>expr</replaceable> evaluates to the null value,
        and false otherwise. The correct SQL-spec-compliant behavior of
        <literal><replaceable>expr</replaceable> = NULL</literal> is to always
        return null (unknown). Therefore this parameter defaults to
        <literal>off</literal>.
-->
有効の場合、<literal><replaceable>expr</replaceable> = NULL</literal>（もしくは<literal>NULL = <replaceable>expr</replaceable></literal>）形式の式は<literal><replaceable>expr</replaceable> IS NULL</literal>として取り扱われ、それは、もし<replaceable>expr</replaceable>がNULL値と評価すれば真を返し、そうでなければ偽を返します。
<literal><replaceable>expr</replaceable> = NULL</literal>の正しいSQL仕様準拠の動作は常にNULL（判らない）を返すことです。
従って、このパラメータのデフォルトは<literal>off</literal>になっています。
       </para>

       <para>
<!--
        However, filtered forms in <productname>Microsoft
        Access</productname> generate queries that appear to use
        <literal><replaceable>expr</replaceable> = NULL</literal> to test for
        null values, so if you use that interface to access the database you
        might want to turn this option on.  Since expressions of the
        form <literal><replaceable>expr</replaceable> = NULL</literal> always
        return the null value (using the SQL standard interpretation), they are not
        very useful and do not appear often in normal applications so
        this option does little harm in practice.  But new users are
        frequently confused about the semantics of expressions
        involving null values, so this option is off by default.
-->
しかし、<productname>Microsoft Access</productname>のフィルタ形式はNULL値を検査するために<literal><replaceable>expr</replaceable> = NULL</literal>を使用する問い合わせを生成しますので、そのインタフェースを使用してデータベースにアクセスする場合は、このオプションを有効にする方が良いでしょう。
<literal><replaceable>expr</replaceable> = NULL</literal>という形の式は（標準SQL解釈を使用した結果）常にNULL値を返しますので、通常のアプリケーションでは意味がほとんどなく、滅多に使用されません。
ですので、このオプションは実際は害はありません。
しかし、慣れていないユーザはしばしばNULL値に関する式の意味に戸惑いますので、デフォルトでこのオプションはoffです。
       </para>

       <para>
<!--
        Note that this option only affects the exact form <literal>= NULL</literal>,
        not other comparison operators or other expressions
        that are computationally equivalent to some expression
        involving the equals operator (such as <literal>IN</literal>).
        Thus, this option is not a general fix for bad programming.
-->
このオプションは<literal>= NULL</literal>という形式にのみ影響することに注意してください。
他の比較演算子や等価演算子を呼び出す他の（<literal>IN</literal>のような）式と計算する上で等価となる式には影響を与えません。
したがって、このオプションは間違ったプログラミングの汎用的な問題解決を行いません。
       </para>

       <para>
<!--
        Refer to <xref linkend="functions-comparison"/> for related information.
-->
関連する情報は<xref linkend="functions-comparison"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-error-handling">
<!--
    <title>Error Handling</title>
-->
    <title>エラー処理</title>

    <variablelist>

     <varlistentry id="guc-exit-on-error" xreflabel="exit_on_error">
      <term><varname>exit_on_error</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>exit_on_error</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>exit_on_error</varname> 設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If on, any error will terminate the current session.  By default,
        this is set to off, so that only FATAL errors will terminate the
        session.
-->
onなら、全てのエラーは現在のセッションを中止させます。
デフォルトではこれはoffに設定されているので、 FATALエラーのみがセッションを中止させます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-restart-after-crash" xreflabel="restart_after_crash">
      <term><varname>restart_after_crash</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>restart_after_crash</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>restart_after_crash</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When set to on, which is the default, <productname>PostgreSQL</productname>
        will automatically reinitialize after a backend crash.  Leaving this
        value set to on is normally the best way to maximize the availability
        of the database.  However, in some circumstances, such as when
        <productname>PostgreSQL</productname> is being invoked by clusterware, it may be
        useful to disable the restart so that the clusterware can gain
        control and take any actions it deems appropriate.
-->
デフォルトであるonの場合、<productname>PostgreSQL</productname>はバックエンドのクラッシュの後、自動的に再初期化を行います。
この値を真のままにしておくことが、通常データベースの可用性を最大化する最適の方法です。
しかし、 <productname>PostgreSQL</productname>がクラスタウェアにより起動された時のような状況では、クラスタウェアが制御を獲得して、適切とみなすいかなる振る舞いをも行えるように再起動を無効にすることが有益かもしれません。
       </para>

       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-data-sync-retry" xreflabel="data_sync_retry">
      <term><varname>data_sync_retry</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>data_sync_retry</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>data_sync_retry</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When set to off, which is the default, <productname>PostgreSQL</productname>
        will raise a PANIC-level error on failure to flush modified data files
        to the file system.  This causes the database server to crash.  This
        parameter can only be set at server start.
-->
デフォルトであるoffに設定すると、<productname>PostgreSQL</productname>は変更されたデータファイルのファイルシステムへのフラッシュの失敗に対してPANICレベルのエラーを発生させます。
これによりデータベースサーバのクラッシュが引き起こされます。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
       <para>
<!--
        On some operating systems, the status of data in the kernel's page
        cache is unknown after a write-back failure.  In some cases it might
        have been entirely forgotten, making it unsafe to retry; the second
        attempt may be reported as successful, when in fact the data has been
        lost.  In these circumstances, the only way to avoid data loss is to
        recover from the WAL after any failure is reported, preferably
        after investigating the root cause of the failure and replacing any
        faulty hardware.
-->
オペレーティングシステムによっては、カーネルキャッシュのページ内のデータの状態は、書き戻しの失敗の後は不明です。
完全に忘れられてしまった場合には、再試行することが危険であるかもしれません。
二度目の試行は成功と報告されるかもしれませんが、実際にはデータが失われているかもしれません。
このような状況では、データロスを避ける唯一の方法は、失敗が報告された後、可能ならば失敗の根本原因を調査して故障したハードウェアを交換したのち、WALからの回復することだけです。
       </para>
       <para>
<!--
        If set to on, <productname>PostgreSQL</productname> will instead
        report an error but continue to run so that the data flushing
        operation can be retried in a later checkpoint.  Only set it to on
        after investigating the operating system's treatment of buffered data
        in case of write-back failure.
-->
onに設定すると、代わりに<productname>PostgreSQL</productname>はエラーを報告して実行を継続し、後のチェックポイントでデータのフラッシュをリトライします。
書き戻しの失敗が起きたときのオペレーティングシステムのバッファデータの扱いを調査した後でのみonに設定してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-init-sync-method" xreflabel="recovery_init_sync_method">
      <term><varname>recovery_init_sync_method</varname> (<type>enum</type>)
       <indexterm>
        <primary><varname>recovery_init_sync_method</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>recovery_init_sync_method</varname>設定パラメータ</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When set to <literal>fsync</literal>, which is the default,
        <productname>PostgreSQL</productname> will recursively open and
        synchronize all files in the data directory before crash recovery
        begins.  The search for files will follow symbolic links for the WAL
        directory and each configured tablespace (but not any other symbolic
        links).  This is intended to make sure that all WAL and data files are
        durably stored on disk before replaying changes.  This applies whenever
        starting a database cluster that did not shut down cleanly, including
        copies created with <application>pg_basebackup</application>.
-->
デフォルトである<literal>fsync</literal>に設定すると、<productname>PostgreSQL</productname>はクラッシュリカバリを開始する前に、再帰的にデータディレクトリ内のすべてのファイルを開いて同期します。
ファイルの探索は、WALディレクトリと設定されているテーブル空間へのシンボリックリンクを追跡します（他のシンボリックリンクは追跡しません）。
これはリプレイを開始する前に、すべてのWALとデータファイルをディスクに恒久的に書くことを確実にすることを意図しています。
これは、<application>pg_basebackup</application>で作られた複製も含めて、正しく停止されなかったデータベースクラスタを起動する際には必ず適用されます。
       </para>
       <para>
<!--
        On Linux, <literal>syncfs</literal> may be used instead, to ask the
        operating system to synchronize the whole file systems that contain the
        data directory, the WAL files and each tablespace (but not any other
        file systems that may be reachable through symbolic links).  This may
        be a lot faster than the <literal>fsync</literal> setting, because it
        doesn't need to open each file one by one.  On the other hand, it may
        be slower if a file system is shared by other applications that
        modify a lot of files, since those files will also be written to disk.
        Furthermore, on versions of Linux before 5.8, I/O errors encountered
        while writing data to disk may not be reported to
        <productname>PostgreSQL</productname>, and relevant error messages may
        appear only in kernel logs.
-->
Linuxでは代わりに、オペレーティングシステムに対して、データディレクトリ、WALファイル、各々のテーブル空間（しかし、シンボリックリンクを通じて到達可能な他のファイルシステムを含みません）を含むファイルシステム全体を同期することを依頼する<literal>syncfs</literal>が使えるかもしれません。
これは各々のファイルを一つ一つ開けることが必要ないため、<literal>fsync</literal>を設定するよりもずっと速いかもしれません。
一方で、そのファイルシステムが多くのファイルを変更するアプリケーションも利用している場合、これらのファイルもディスクに書かれるので、遅くなるかもしれません。
更に、Linuxのバージョン5.8以前では、ディスクへの書き込み中に発生したI/Oエラーが<productname>PostgreSQL</productname>に報告されないことがあり、関連エラーメッセージはカーネルログにのみ現れるかもしれません。
       </para>
       <para>
<!--
        This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>

   </sect1>

   <sect1 id="runtime-config-preset">
<!--
    <title>Preset Options</title>
-->
    <title>設定済みのオプション</title>

    <para>
<!--
     The following <quote>parameters</quote> are read-only.
     As such, they have been excluded from the sample
     <filename>postgresql.conf</filename> file.  These options report
     various aspects of <productname>PostgreSQL</productname> behavior
     that might be of interest to certain applications, particularly
     administrative front-ends.
     Most of them are determined when <productname>PostgreSQL</productname>
     is compiled or when it is installed.
-->
以下の<quote>パラメータ</quote>は読み取り専用です。
そのため、これらは<filename>postgresql.conf</filename>のサンプルから除かれています。
このオプションは、特定のアプリケーション、特に管理用フロントエンドによって注目される可能性がある<productname>PostgreSQL</productname>の様々な部分の振舞いを報告します。
これらのうち多くは<productname>PostgreSQL</productname>のコンパイル時、もしくはインストール時に決定されます。
    </para>

    <variablelist>

     <varlistentry id="guc-block-size" xreflabel="block_size">
      <term><varname>block_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>block_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>block_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the size of a disk block.  It is determined by the value
        of <literal>BLCKSZ</literal> when building the server. The default
        value is 8192 bytes.  The meaning of some configuration
        variables (such as <xref linkend="guc-shared-buffers"/>) is
        influenced by <varname>block_size</varname>. See <xref
        linkend="runtime-config-resource"/> for information.
-->
ディスクブロックの容量を報告します。
サーバ構築の際に<literal>BLCKSZ</literal>の値で決定されます。デフォルトの値は8192バイトです。
（<xref linkend="guc-shared-buffers"/>の様な）いくつかの構成変数の意味は<varname>block_size</varname>によって影響されます。
これに関しての情報は<xref linkend="runtime-config-resource"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-data-checksums" xreflabel="data_checksums">
      <term><varname>data_checksums</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>data_checksums</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>data_checksums</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports whether data checksums are enabled for this cluster.
        See <xref linkend="app-initdb-data-checksums"/> for more information.
-->
このクラスタでデータチェックサムが有効になっているかどうかを報告します。
詳細は<xref linkend="app-initdb-data-checksums"/>を見てください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-data-directory-mode" xreflabel="data_directory_mode">
      <term><varname>data_directory_mode</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>data_directory_mode</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>data_directory_mode</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        On Unix systems this parameter reports the permissions the data
        directory (defined by <xref linkend="guc-data-directory"/>)
        had at server startup.
        (On Microsoft Windows this parameter will always display
        <literal>0700</literal>.) See
        <xref linkend="app-initdb-allow-group-access"/> for more information.
-->
このパラメータは、Unixシステムでは起動時のデータディレクトリのパーミッション（<xref linkend="guc-data-directory"/>により定義されます）を報告します。
（Microsoft Windowsではこのパラメータは常に<literal>0700</literal>を表示します。）
さらなる情報は<xref linkend="app-initdb-allow-group-access"/>をご覧ください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-assertions" xreflabel="debug_assertions">
      <term><varname>debug_assertions</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_assertions</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>debug_assertions</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports whether <productname>PostgreSQL</productname> has been built
        with assertions enabled. That is the case if the
        macro <symbol>USE_ASSERT_CHECKING</symbol> is defined
        when <productname>PostgreSQL</productname> is built (accomplished
        e.g., by the <command>configure</command> option
        <option>&#45;-enable-cassert</option>). By
        default <productname>PostgreSQL</productname> is built without
        assertions.
-->
<productname>PostgreSQL</productname>がアサーションを有効にしてビルドされているかどうかを報告します。
これは、<symbol>USE_ASSERT_CHECKING</symbol>マクロが<productname>PostgreSQL</productname>をビルドされた際に定義されている場合(つまり、<command>configure</command>オプションの<option>--enable-cassert</option>が適用されている)に該当します。
デフォルトでは<productname>PostgreSQL</productname>は、アサーションなしにビルドされます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-integer-datetimes" xreflabel="integer_datetimes">
      <term><varname>integer_datetimes</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>integer_datetimes</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>integer_datetimes</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports whether <productname>PostgreSQL</productname> was built with support for
        64-bit-integer dates and times.  As of <productname>PostgreSQL</productname> 10,
        this is always <literal>on</literal>.
-->
<productname>PostgreSQL</productname>が64ビット整数による日付と時刻のサポート付きで構築されたかどうかを報告します。
<productname>PostgreSQL</productname> 10では、これは常に<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-in-hot-standby" xreflabel="in_hot_standby">
      <term><varname>in_hot_standby</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>in_hot_standby</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>in_hot_standby</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports whether the server is currently in hot standby mode.  When
        this is <literal>on</literal>, all transactions are forced to be
        read-only.  Within a session, this can change only if the server is
        promoted to be primary.  See <xref linkend="hot-standby"/> for more
        information.
-->
サーバが現在ホットスタンバイモードかどうかを報告します。
これが<literal>on</literal>の時は、すべてのトランザクションは読み取り専用を強制されます。
セッション中ではこれはサーバがプライマリに昇格するときだけ変更できます。
詳細は<xref linkend="hot-standby"/>をご覧ください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-function-args" xreflabel="max_function_args">
      <term><varname>max_function_args</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_function_args</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_function_args</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the maximum number of function arguments. It is determined by
        the value of <literal>FUNC_MAX_ARGS</literal> when building the server. The
        default value is 100 arguments.
-->
関数の引数の最大数を報告します。
サーバを構築する時、<literal>FUNC_MAX_ARGS</literal>の値で決定されます。
デフォルトの値は100引数です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-identifier-length" xreflabel="max_identifier_length">
      <term><varname>max_identifier_length</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_identifier_length</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_identifier_length</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the maximum identifier length. It is determined as one
        less than the value of <literal>NAMEDATALEN</literal> when building
        the server. The default value of <literal>NAMEDATALEN</literal> is
        64; therefore the default
        <varname>max_identifier_length</varname> is 63 bytes, which
        can be less than 63 characters when using multibyte encodings.
-->
最長の識別子の長さを報告します。
サーバ構築時の<literal>NAMEDATALEN</literal>の値より一つ少なく設定されます。
デフォルトの<literal>NAMEDATALEN</literal>の値は64ですので、デフォルトの<varname>max_identifier_length</varname>は63バイトで、マルチバイト符号化方式を使用している場合、63文字以下になることがあります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-index-keys" xreflabel="max_index_keys">
      <term><varname>max_index_keys</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_index_keys</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_index_keys</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the maximum number of index keys. It is determined by
        the value of <literal>INDEX_MAX_KEYS</literal> when building the server. The
        default value is 32 keys.
-->
インデックスキーの最大数を報告します。サーバをビルドする際に<literal>INDEX_MAX_KEYS</literal>の値で決定されます。デフォルトの値は32キーです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-segment-size" xreflabel="segment_size">
      <term><varname>segment_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>segment_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>segment_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the number of blocks (pages) that can be stored within a file
        segment.  It is determined by the value of <literal>RELSEG_SIZE</literal>
        when building the server.  The maximum size of a segment file in bytes
        is equal to <varname>segment_size</varname> multiplied by
        <varname>block_size</varname>; by default this is 1GB.
-->
あるファイルセグメントの中に格納できるブロック数（ページ数）を報告します。
サーバ構築時に<literal>RELSEG_SIZE</literal>の値で決定されます。
バイト単位の一セグメントファイルの最大容量は、<varname>block_size</varname>倍の<varname>segment_size</varname>と等しくなります。デフォルトでは1GBです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-server-encoding" xreflabel="server_encoding">
      <term><varname>server_encoding</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>server_encoding</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>server_encoding</varname>設定パラメータ</primary>
      </indexterm>
      <indexterm><primary>character set</primary></indexterm>
      <indexterm><primary>文字セット</primary></indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the database encoding (character set).
        It is determined when the database is created.  Ordinarily,
        clients need only be concerned with the value of <xref
        linkend="guc-client-encoding"/>.
-->
データベース符号化方式（文字セット）を報告します。
データベースが作成された時に決定されます。通常クライアントは<xref linkend="guc-client-encoding"/>の値にのみ注意する必要があります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-server-version" xreflabel="server_version">
      <term><varname>server_version</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>server_version</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>server_version</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the version number of the server. It is determined by the
        value of <literal>PG_VERSION</literal> when building the server.
-->
サーバのバージョン番号を報告します。
サーバ構築の際の<literal>PG_VERSION</literal>の値によって決定されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-server-version-num" xreflabel="server_version_num">
      <term><varname>server_version_num</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>server_version_num</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>server_version_num</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the version number of the server as an integer. It is determined
        by the value of <literal>PG_VERSION_NUM</literal> when building the server.
-->
サーバのバージョン番号を整数として返します。
この値は、サーバ構築時の<literal>PG_VERSION_NUM</literal>の値により決まります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-shared-memory-size" xreflabel="shared_memory_size">
      <term><varname>shared_memory_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>shared_memory_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>shared_memory_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the size of the main shared memory area, rounded up to the
        nearest megabyte.
-->
主共有メモリ領域のサイズを報告します。
最も近いメガバイト単位に切り上げられます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-shared-memory-size-in-huge-pages" xreflabel="shared_memory_size_in_huge_pages">
      <term><varname>shared_memory_size_in_huge_pages</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>shared_memory_size_in_huge_pages</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>shared_memory_size_in_huge_pages</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the number of huge pages that are needed for the main shared
        memory area based on the specified <xref linkend="guc-huge-page-size"/>.
        If huge pages are not supported, this will be <literal>-1</literal>.
-->
指定された<xref linkend="guc-huge-page-size"/>に基づいて、主共有メモリ領域に必要な巨大ページの数を報告します。
巨大ページがサポートされていない場合、<literal>-1</literal>になります。
       </para>
       <para>
<!--
        This setting is supported only on <productname>Linux</productname>.  It
        is always set to <literal>-1</literal> on other platforms.  For more
        details about using huge pages on <productname>Linux</productname>, see
        <xref linkend="linux-huge-pages"/>.
-->
この設定は<productname>Linux</productname>でのみサポートされています。
他のプラットフォームでは常に<literal>-1</literal>に設定されます。
<productname>Linux</productname>で巨大なページを使うための詳細は<xref linkend="linux-huge-pages"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-library" xreflabel="ssl_library">
      <term><varname>ssl_library</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_library</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ssl_library</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the name of the SSL library that this
        <productname>PostgreSQL</productname> server was built with (even if
        SSL is not currently configured or in use on this instance), for
        example <literal>OpenSSL</literal>, or an empty string if none.
-->
（このインスタンスでSSLが設定あるいは使用されていなくても）この<productname>PostgreSQL</productname>サーバの構築時に使用されたSSLライブラリの名前、たとえば<literal>OpenSSL</literal>あるいは空文字列、を報告します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-block-size" xreflabel="wal_block_size">
      <term><varname>wal_block_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_block_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_block_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the size of a WAL disk block.  It is determined by the value
        of <literal>XLOG_BLCKSZ</literal> when building the server. The default value
        is 8192 bytes.
-->
WALディスクブロックの容量を報告します。
サーバ構築時に<literal>XLOG_BLCKSZ</literal>の値で決定されます。デフォルトの値は8192バイトです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-segment-size" xreflabel="wal_segment_size">
      <term><varname>wal_segment_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_segment_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_segment_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the size of write ahead log segments.  The default value is
        16MB. See <xref linkend="wal-configuration"/> for more information.
-->
先行書き込みログ（WAL）のセグメントの大きさを報告します。
デフォルト値は16MBです。
さらなる詳細については<xref linkend="wal-configuration"/>をご覧ください。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect1>

   <sect1 id="runtime-config-custom">
<!--
    <title>Customized Options</title>
-->
    <title>独自のオプション</title>

    <para>
<!--
     This feature was designed to allow parameters not normally known to
     <productname>PostgreSQL</productname> to be added by add-on modules
     (such as procedural languages).  This allows extension modules to be
     configured in the standard ways.
-->
この機能は追加モジュール（手続き言語など）によって追加される<productname>PostgreSQL</productname>が識別できないパラメータを使えるように設計されたものです。
これにより拡張モジュールは標準の方法で構成されます。
    </para>

    <para>
<!--
     Custom options have two-part names: an extension name, then a dot, then
     the parameter name proper, much like qualified names in SQL.  An example
     is <literal>plpgsql.variable_conflict</literal>.
-->
カスタムオプションには２つに分かれた名称があります。拡張名につづいてドット、そして特定のパラメータ名です。SQLの修飾名に良く似ています。
例として<literal>plpgsql.variable_conflict</literal>が挙げられます。
    </para>

    <para>
<!--
     Because custom options may need to be set in processes that have not
     loaded the relevant extension module, <productname>PostgreSQL</productname>
     will accept a setting for any two-part parameter name.  Such variables
     are treated as placeholders and have no function until the module that
     defines them is loaded. When an extension module is loaded, it will add
     its variable definitions and convert any placeholder values according to
     those definitions.  If there are any unrecognized placeholders
     that begin with its extension name, warnings are issued and those
     placeholders are removed.
-->
カスタムオプションは読み込まれていない関連性のある拡張モジュールのプロセスに設定される必要がある場合があるので、<productname>PostgreSQL</productname>はどんな２つの部分のパラメータ名による設定を受け付けます。これらの変数は代替物として取り扱われ、それらを定義したモジュールが読み込まれるまで機能しません。
拡張モジュールが読み込まれた時、その変数定義が追加され、それら定義に基づいてプレースホルダ値が変換されます。
拡張名で始まる認識できないプレースホルダに対しては警告が発せられ、そのプレースホルダは削除されます。
    </para>
   </sect1>

   <sect1 id="runtime-config-developer">
<!--
    <title>Developer Options</title>
-->
    <title>開発者向けオプション</title>

    <para>
<!--
     The following parameters are intended for developer testing, and
     should never be used on a production database.  However, some of
     them can be used to assist with the recovery of severely damaged
     databases.  As such, they have been excluded from the sample
     <filename>postgresql.conf</filename> file.  Note that many of these
     parameters require special source compilation flags to work at all.
-->
以下のパラメータは、開発者のテスト用であり、決して実運用のデータベースに使わないでください。
しかし、中には深刻な損傷を負ったデータベースの復旧に役立つものもあります。
したがって、これらはサンプルの<filename>postgresql.conf</filename>からは除外されています。
これらのパラメータの多くは、それを動作させるために特殊なソースコンパイルを必要としていることに注意してください。
    </para>

    <variablelist>
     <varlistentry id="guc-allow-in-place-tablespaces" xreflabel="allow_in_place_tablespaces">
      <term><varname>allow_in_place_tablespaces</varname> (<type>boolean</type>)
      <indexterm>
        <primary><varname>allow_in_place_tablespaces</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>allow_in_place_tablespaces</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Allows tablespaces to be created as directories inside
        <filename>pg_tblspc</filename>, when an empty location string
        is provided to the <command>CREATE TABLESPACE</command> command.  This
        is intended to allow testing replication scenarios where primary and
        standby servers are running on the same machine.  Such directories
        are likely to confuse backup tools that expect to find only symbolic
        links in that location.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
<command>CREATE TABLESPACE</command>コマンドに空の位置文字列が渡された時に、<filename>pg_tblspc</filename>内にテーブル空間をディレクトリとして作ることを可能にします。
これは、プライマリとスタンバイサーバが同じマシン上で実行されるレプリケーションシナリオをテストするために使用することを意図しています。
このようなディレクトリは、その場所にシンボリックリンクだけが見つかることを期待しているバックアップツールを混乱させる可能性が高いでしょう。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-allow-system-table-mods" xreflabel="allow_system_table_mods">
      <term><varname>allow_system_table_mods</varname> (<type>boolean</type>)
      <indexterm>
        <primary><varname>allow_system_table_mods</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>allow_system_table_mods</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Allows modification of the structure of system tables as well as
        certain other risky actions on system tables.  This is otherwise not
        allowed even for superusers.  Ill-advised use of this setting can
        cause irretrievable data loss or seriously corrupt the database
        system.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
システムテーブルの構造変更とその他の危険性の高いシステムテーブルに対するアクションを許可します。
これは通常スーパーユーザにさえ許可されません。
この設定の無分別な使用は回復不能なデータ喪失やデータベースシステムの重大な破損を招きます。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-backtrace-functions" xreflabel="backtrace_functions">
      <term><varname>backtrace_functions</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>backtrace_functions</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>backtrace_functions</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter contains a comma-separated list of C function names.
        If an error is raised and the name of the internal C function where
        the error happens matches a value in the list, then a backtrace is
        written to the server log together with the error message.  This can
        be used to debug specific areas of the source code.
-->
このパラメータはカンマ区切りのC関数名を含みます。
エラーが発生し、エラー発生箇所の内部C関数がこのリストの値と一致すると、エラーメッセージとともにバックトレースが一緒にサーバログに書かれます。
これはソースコードの特定箇所をデバッグするのに役立ちます。
       </para>

       <para>
<!--
        Backtrace support is not available on all platforms, and the quality
        of the backtraces depends on compilation options.
-->
バックトレースのサポートはすべてのプラットフォームで提供されているわけではありませんし、バックトレースの品質はコンパイルオプションに依存します。
       </para>

       <para>
<!--
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
この設定を変更できるのは、スーパーユーザと適切な<literal>SET</literal>権限を持つユーザだけです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-discard-caches" xreflabel="debug_discard_caches">
      <term><varname>debug_discard_caches</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>debug_discard_caches</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>debug_discard_caches</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When set to <literal>1</literal>, each system catalog cache entry is
        invalidated at the first possible opportunity, whether or not
        anything that would render it invalid really occurred.  Caching of
        system catalogs is effectively disabled as a result, so the server
        will run extremely slowly.  Higher values run the cache invalidation
        recursively, which is even slower and only useful for testing
        the caching logic itself.  The default value of <literal>0</literal>
        selects normal catalog caching behavior.
-->
<literal>1</literal>なら、可能な最初の機会にシステムカタログのキャッシュ項目が破棄されます。
すべてのキャッシュ項目を無効にするすべてのことが実際に起きます。
結果としてシステムカタログのキャッシュが無効になり、サーバは極めて低速に動作します。
1より大きければ、再帰的にキャッシュを削除します。
これは更に遅くなり、キャッシュのロジック自体をテストするときにだけ役に立ちます。
デフォルト値の<literal>0</literal>で正常なカタログキャッシュは通常の動作になります。
       </para>

       <para>
<!--
        This parameter can be very helpful when trying to trigger
        hard-to-reproduce bugs involving concurrent catalog changes, but it
        is otherwise rarely needed.  See the source code files
        <filename>inval.c</filename> and
        <filename>pg_config_manual.h</filename> for details.
-->
このパラメータは並行的なカタログの変更を伴う再現しにくいバグを引き起こす際にとても役に立ちますが、それ以外にはめったに必要になりません。
詳細は<filename>inval.c</filename>と<filename>pg_config_manual.h</filename>のソースコードファイルを見てください。
       </para>

       <para>
<!--
        This parameter is supported when
        <symbol>DISCARD_CACHES_ENABLED</symbol> was defined at compile time
        (which happens automatically when using the
        <application>configure</application> option
        <option>&#45;-enable-cassert</option>).  In production builds, its value
        will always be <literal>0</literal> and attempts to set it to another
        value will raise an error.
-->
このパラメータはコンパイル時に<symbol>DISCARD_CACHES_ENABLED</symbol>が定義されたとき（これは<application>configure</application>オプションの<option>--enable-cassert</option>が使われたときに自動的に起こります）にサポートされます。
実運用のビルドでは<literal>0</literal>となり、それ以外の値に設定しようとするとエラーが起こります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-io-direct" xreflabel="debug_io_direct">
      <term><varname>debug_io_direct</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>debug_io_direct</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>debug_io_direct</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Ask the kernel to minimize caching effects for relation data and WAL
        files using <literal>O_DIRECT</literal> (most Unix-like systems),
        <literal>F_NOCACHE</literal> (macOS) or
        <literal>FILE_FLAG_NO_BUFFERING</literal> (Windows).
-->
リレーションデータとWALファイルに対して、<literal>O_DIRECT</literal>（ほとんどのUnixライクなシステム）、<literal>F_NOCACHE</literal>（macOS）、<literal>FILE_FLAG_NO_BUFFERING</literal> （Windows）を使って、キャッシュ効果を最小にするようカーネルに依頼します。
       </para>
       <para>
<!--
        May be set to an empty string (the default) to disable use of direct
        I/O, or a comma-separated list of operations that should use direct I/O.
        The valid options are <literal>data</literal> for
        main data files, <literal>wal</literal> for WAL files, and
        <literal>wal_init</literal> for WAL files when being initially
        allocated.
-->
空文字列（デフォルト）を設定してダイレクトI/Oの使用を無効にすることも、カンマで区切られたリストを設定してダイレクトI/Oを使用するようにすることもできます。
有効なオプションは、メインデータファイルの場合は<literal>data</literal>、WALファイルの場合は<literal>wal</literal>、最初に割り当てられたWALファイルの場合は<literal>wal_init</literal>です。
       </para>
       <para>
<!--
        Some operating systems and file systems do not support direct I/O, so
        non-default settings may be rejected at startup or cause errors.
-->
一部のオペレーティングシステムおよびファイルシステムでは、ダイレクトI/Oが行われないため、デフォルト以外の設定が起動時に拒否されたり、エラーが発生したりする場合があります。
       </para>
       <para>
<!--
        Currently this feature reduces performance, and is intended for
        developer testing only.
-->
今の所、この機能はパフォーマンスを悪くするので、開発者のテストのみを目的としています。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-parallel-query" xreflabel="debug_parallel_query">
      <term><varname>debug_parallel_query</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>debug_parallel_query</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>debug_parallel_query</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Allows the use of parallel queries for testing purposes even in cases
        where no performance benefit is expected.
        The allowed values of <varname>debug_parallel_query</varname> are
        <literal>off</literal> (use parallel mode only when it is expected to improve
        performance), <literal>on</literal> (force parallel query for all queries
        for which it is thought to be safe), and <literal>regress</literal> (like
        <literal>on</literal>, but with additional behavior changes as explained
        below).
-->
性能改善が期待できなくても、テスト目的のためにパラレルクエリを利用できるようにします。
<varname>debug_parallel_query</varname>に設定できる値は、<literal>off</literal>（性能改善が期待できるときにだけパラレルクエリを使用する）、<literal>on</literal>（安全なクエリに対しては常にパラレルクエリを強制する）、<literal>regress</literal>（<literal>on</literal>と同様だが、下記のような振る舞いの変更を伴う）です。
       </para>

       <para>
<!--
        More specifically, setting this value to <literal>on</literal> will add
        a <literal>Gather</literal> node to the top of any query plan for which this
        appears to be safe, so that the query runs inside of a parallel worker.
        Even when a parallel worker is not available or cannot be used,
        operations such as starting a subtransaction that would be prohibited
        in a parallel query context will be prohibited unless the planner
        believes that this will cause the query to fail.  If failures or
        unexpected results occur when this option is set, some functions used
        by the query may need to be marked <literal>PARALLEL UNSAFE</literal>
        (or, possibly, <literal>PARALLEL RESTRICTED</literal>).
-->
正確に言えば、この値を<literal>on</literal>にすると、安全と見なされるすべての問い合わせ計画の上に<literal>Gather</literal>ノードを追加し、クエリをパラレルワーカー上で実行するようにします。
プランナがこれによってクエリが失敗すると思わない限り、パラレルワーカーが利用できない、あるいは使用できないような場合でも、たとえばサブトランザクションの開始のように、パラレルクエリコンテキストでは許可されない操作は不許可となります。
このオプションを設定することによって、エラーとなったり、あるいは期待していなかった結果がもたらされる場合には、クエリで使用されている関数は<literal>PARALLEL UNSAFE</literal>（もしくは、<literal>PARALLEL RESTRICTED</literal>）と印を付ける必要があるかもしません。
       </para>

       <para>
<!--
        Setting this value to <literal>regress</literal> has all of the same effects
        as setting it to <literal>on</literal> plus some additional effects that are
        intended to facilitate automated regression testing.  Normally,
        messages from a parallel worker include a context line indicating that,
        but a setting of <literal>regress</literal> suppresses this line so that the
        output is the same as in non-parallel execution.  Also,
        the <literal>Gather</literal> nodes added to plans by this setting are hidden
        in <literal>EXPLAIN</literal> output so that the output matches what
        would be obtained if this setting were turned <literal>off</literal>.
-->
この設定値を<literal>regress</literal>とすると、<literal>on</literal>とするのに加え、自動リグレッションテストを助けるための付加的な効果が現れます。
通常パラレルワーカーからのメッセージは、そのことを表すコンテキスト行を表示しますが、<literal>regress</literal>と設定すると、非パラレル実行と同じ出力になるように、これを抑止します。
また、プランに追加された<literal>Gather</literal>ノードは、<literal>EXPLAIN</literal>出力から隠され、<literal>off</literal>に設定したときと同じ出力が得られるようにします。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ignore-system-indexes" xreflabel="ignore_system_indexes">
      <term><varname>ignore_system_indexes</varname> (<type>boolean</type>)
      <indexterm>
        <primary><varname>ignore_system_indexes</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ignore_system_indexes</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Ignore system indexes when reading system tables (but still
        update the indexes when modifying the tables).  This is useful
        when recovering from damaged system indexes.
        This parameter cannot be changed after session start.
-->
システムテーブルの読み込み時にシステムインデックスを無視します（しかしテーブルが更新された時はインデックスを更新します）。
障害があるシステムインデックスを復旧する時、これは有用です。
セッションが始まった後に、このパラメータを変更することはできません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-post-auth-delay" xreflabel="post_auth_delay">
      <term><varname>post_auth_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>post_auth_delay</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>post_auth_delay</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The amount of time to delay when a new
        server process is started, after it conducts the
        authentication procedure.  This is intended to give developers an
        opportunity to attach to the server process with a debugger.
        If this value is specified without units, it is taken as seconds.
        A value of zero (the default) disables the delay.
        This parameter cannot be changed after session start.
-->
サーバプロセスが始まり認証手続きが終わった後の遅延時間です。
これは、デバッガを使用してサーバプロセスに接続する機会を開発者に提供することを目的としています。
この値が単位なしで指定された場合は、秒単位であるとみなします。
値がゼロ（デフォルト）の場合、この遅延は無効になります。
セッションが始まった後に、このパラメータを変更することはできません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-pre-auth-delay" xreflabel="pre_auth_delay">
      <term><varname>pre_auth_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>pre_auth_delay</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>pre_auth_delay</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The amount of time to delay just after a
        new server process is forked, before it conducts the
        authentication procedure.  This is intended to give developers an
        opportunity to attach to the server process with a debugger to
        trace down misbehavior in authentication.
        If this value is specified without units, it is taken as seconds.
        A value of zero (the default) disables the delay.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
新しくサーバプロセスがforkした後、認証手続きに入る前の遅延時間です。
これは、認証における誤動作を追跡するために、デバッガを使用してサーバプロセスに接続する機会を開発者に提供することを目的としたものです。
この値が単位なしで指定された場合は、秒単位であるとみなします。
値がゼロ（デフォルト）の場合、この機能は無効になります。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-notify" xreflabel="trace_notify">
      <term><varname>trace_notify</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_notify</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>trace_notify</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Generates a great amount of debugging output for the
        <command>LISTEN</command> and <command>NOTIFY</command>
        commands.  <xref linkend="guc-client-min-messages"/> or
        <xref linkend="guc-log-min-messages"/> must be
        <literal>DEBUG1</literal> or lower to send this output to the
        client or server logs, respectively.
-->
<command>LISTEN</command>と<command>NOTIFY</command>コマンドのための大量なデバッグ出力を生成します。
この出力をクライアントもしくはサーバログに送信するためには、それぞれ、<xref linkend="guc-client-min-messages"/>もしくは<xref linkend="guc-log-min-messages"/>は<literal>DEBUG1</literal>以下でなければなりません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-recovery-messages" xreflabel="trace_recovery_messages">
      <term><varname>trace_recovery_messages</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>trace_recovery_messages</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>trace_recovery_messages</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables logging of recovery-related debugging output that otherwise
        would not be logged. This parameter allows the user to override the
        normal setting of <xref linkend="guc-log-min-messages"/>, but only for
        specific messages. This is intended for use in debugging hot standby.
        Valid values are <literal>DEBUG5</literal>, <literal>DEBUG4</literal>,
        <literal>DEBUG3</literal>, <literal>DEBUG2</literal>, <literal>DEBUG1</literal>, and
        <literal>LOG</literal>.  The default, <literal>LOG</literal>, does not affect
        logging decisions at all.  The other values cause recovery-related
        debug messages of that priority or higher to be logged as though they
        had <literal>LOG</literal> priority; for common settings of
        <varname>log_min_messages</varname> this results in unconditionally sending
        them to the server log.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
ロギングされないリカバリ関連のデバッグ出力のロギングを使用可能にします。このパラメータにより、ユーザは<xref linkend="guc-log-min-messages"/>の通常の設定を上書きできますが、特定のメッセージに対してのみ使用できます。
これはホットスタンバイのデバッグに使用します。
有効な値は、<literal>DEBUG5</literal>、<literal>DEBUG4</literal>、<literal>DEBUG3</literal>、<literal>DEBUG2</literal>、<literal>DEBUG1</literal>および<literal>LOG</literal>です。
デフォルトの<literal>LOG</literal>はロギングの決定にまったく影響しません。
その他の値を指定すると、その優先度以上のリカバリ関連のデバッグ・メッセージが<literal>LOG</literal>優先であるかのようにロギングされます。
<varname>log_min_messages</varname>の一般的な設定では、無条件にサーバ・ログに送信されます。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-sort" xreflabel="trace_sort">
      <term><varname>trace_sort</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_sort</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>trace_sort</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If on, emit information about resource usage during sort operations.
        This parameter is only available if the <symbol>TRACE_SORT</symbol> macro
        was defined when <productname>PostgreSQL</productname> was compiled.
        (However, <symbol>TRACE_SORT</symbol> is currently defined by default.)
-->
もしも有効であれば、並べ替え操作の間のリソース使用についての情報を放出します。
このパラメータは <productname>PostgreSQL</productname>がコンパイルされた時、<symbol>TRACE_SORT</symbol>マクロが定義されている場合にのみ有効です。
（とは言っても、現在<symbol>TRACE_SORT</symbol>はデフォルトで定義されています。）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-locks" xreflabel="trace_locks">
      <term><varname>trace_locks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_locks</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>trace_locks</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If on, emit information about lock usage.  Information dumped
        includes the type of lock operation, the type of lock and the unique
        identifier of the object being locked or unlocked.  Also included
        are bit masks for the lock types already granted on this object as
        well as for the lock types awaited on this object.  For each lock
        type a count of the number of granted locks and waiting locks is
        also dumped as well as the totals.  An example of the log file output
        is shown here:
-->
有効な場合、ロックの使用状況に関する情報を出力します。
出力される情報には、ロック操作の種類、ロックの種類、ロックまたはロック解除されているオブジェクトの一意な識別子が含まれます。
また、このオブジェクトに既に与えられているロック種類やこのオブジェクトで待機しているロック種類を表すビットマスクも含まれます。
ロック種類それぞれについて、与えられているロック数、待機中のロック数がその総数と共に出力されます。
ログファイル出力例を以下に示します。
<screen>
LOG:  LockAcquire: new: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(AccessShareLock)
LOG:  GrantLock: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(2) req(1,0,0,0,0,0,0)=1 grant(1,0,0,0,0,0,0)=1
      wait(0) type(AccessShareLock)
LOG:  UnGrantLock: updated: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(AccessShareLock)
LOG:  CleanUpLock: deleting: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(INVALID)
</screen>
<!--
        Details of the structure being dumped may be found in
        <filename>src/include/storage/lock.h</filename>.
-->
ダンプされる構造の詳細は、<filename>src/include/storage/lock.h</filename> にあります。
       </para>
       <para>
<!--
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
-->
このパラメータは<productname>PostgreSQL</productname>がコンパイル時に<symbol>LOCK_DEBUG</symbol>マクロが定義された場合のみ有効です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-lwlocks" xreflabel="trace_lwlocks">
      <term><varname>trace_lwlocks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_lwlocks</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>trace_lwlocks</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If on, emit information about lightweight lock usage.  Lightweight
        locks are intended primarily to provide mutual exclusion of access
        to shared-memory data structures.
-->
有効な場合、軽量ロックの使用状況に関する情報を出力します。
軽量ロックは主に、共有メモリ上のデータ構造へのアクセスに関する排他制御機能を提供することを意図したものです。
       </para>
       <para>
<!--
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
-->
このパラメータは<productname>PostgreSQL</productname>がコンパイル時に<symbol>LOCK_DEBUG</symbol>マクロが定義された場合のみ有効です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-userlocks" xreflabel="trace_userlocks">
      <term><varname>trace_userlocks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_userlocks</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>trace_userlocks</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If on, emit information about user lock usage.  Output is the same
        as for <symbol>trace_locks</symbol>, only for advisory locks.
-->
有効な場合、ユーザロックの使用状況に関する情報を出力します。
出力は<symbol>trace_locks</symbol>と同じですが、勧告的ロックに関するもののみを出力します。
       </para>
       <para>
<!--
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
-->
このパラメータは<productname>PostgreSQL</productname>がコンパイル時に<symbol>LOCK_DEBUG</symbol>マクロが定義された場合のみ有効です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-lock-oidmin" xreflabel="trace_lock_oidmin">
      <term><varname>trace_lock_oidmin</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>trace_lock_oidmin</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>trace_lock_oidmin</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If set, do not trace locks for tables below this OID (used to avoid
        output on system tables).
-->
設定すると、このOID未満のテーブルに関するロックの追跡を行いません。
（システムテーブルに関する出力を抑えるために使用します。）
       </para>
       <para>
<!--
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
-->
このパラメータは<productname>PostgreSQL</productname>がコンパイル時に<symbol>LOCK_DEBUG</symbol>マクロが定義された場合のみ有効です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-lock-table" xreflabel="trace_lock_table">
      <term><varname>trace_lock_table</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>trace_lock_table</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>trace_lock_table</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Unconditionally trace locks on this table (OID).
-->
このテーブル（OID）に対し無条件でロックを追跡します。
       </para>
       <para>
<!--
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
-->
このパラメータは<productname>PostgreSQL</productname>がコンパイル時に<symbol>LOCK_DEBUG</symbol>マクロが定義された場合のみ有効です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-deadlocks" xreflabel="debug_deadlocks">
      <term><varname>debug_deadlocks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_deadlocks</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>debug_deadlocks</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If set, dumps information about all current locks when a
        deadlock timeout occurs.
-->
設定すると、デッドロックタイムアウトが発生した時全ての進行中のロックについての情報がダンプされます。
       </para>
       <para>
<!--
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
-->
このパラメータは<productname>PostgreSQL</productname>がコンパイル時に<symbol>LOCK_DEBUG</symbol>マクロが定義された場合のみ有効です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-btree-build-stats" xreflabel="log_btree_build_stats">
      <term><varname>log_btree_build_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_btree_build_stats</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_btree_build_stats</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If set, logs system resource usage statistics (memory and CPU) on
        various B-tree operations.
-->
設定すると、各種B-tree操作に関するシステムリソース（メモリとCPU）の使用についての統計情報をログに出力します。
       </para>
       <para>
<!--
        This parameter is only available if the <symbol>BTREE_BUILD_STATS</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
-->
このパラメータは<productname>PostgreSQL</productname>がコンパイル時に<symbol>BTREE_BUILD_STATS</symbol>マクロが定義された場合のみ有効です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-consistency-checking" xreflabel="wal_consistency_checking">
      <term><varname>wal_consistency_checking</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>wal_consistency_checking</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_consistency_checking</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter is intended to be used to check for bugs in the WAL
        redo routines.  When enabled, full-page images of any buffers modified
        in conjunction with the WAL record are added to the record.
        If the record is subsequently replayed, the system will first apply
        each record and then test whether the buffers modified by the record
        match the stored images.  In certain cases (such as hint bits), minor
        variations are acceptable, and will be ignored.  Any unexpected
        differences will result in a fatal error, terminating recovery.
-->
このパラメータは、WALのREDOルーチンのバグをチェックするために使うことを意図しています。
有効にすると、WALレコードと一緒に変更されたバッファのフルページイメージをレコードに追加します。
後でそのレコードがリプレイされるときは、システムはまず各々のレコードを適用し、次にレコードによって変更されたバッファが、格納したイメージと一致するかどうかをテストします。
ある種のケース（たとえばヒントビット）では、些細な変化は許容され、無視されます。
予期しない差異は、致命的エラーを引き起こし、リカバリが中断されます。
       </para>

       <para>
<!--
        The default value of this setting is the empty string, which disables
        the feature.  It can be set to <literal>all</literal> to check all
        records, or to a comma-separated list of resource managers to check
        only records originating from those resource managers.  Currently,
        the supported resource managers are <literal>heap</literal>,
        <literal>heap2</literal>, <literal>btree</literal>, <literal>hash</literal>,
        <literal>gin</literal>, <literal>gist</literal>, <literal>sequence</literal>,
        <literal>spgist</literal>, <literal>brin</literal>, and <literal>generic</literal>.
        Extensions may define additional resource managers. Only superusers and users with
        the appropriate <literal>SET</literal> privilege can change this setting.
-->
デフォルト値は空文字で、この機能を無効にします。
すべてのレコードをチェックするために、<literal>all</literal>にすることができます。
カンマ区切りのリストにすると、対応するリソースマネージャに由来するレコードのみをチェックします。
今のところ、サポートされているリソースマネージャは、<literal>heap</literal>、<literal>heap2</literal>、<literal>btree</literal>、<literal>hash</literal>、<literal>gin</literal>、<literal>gist</literal>、<literal>sequence</literal>、<literal>spgist</literal>、<literal>brin</literal>、<literal>generic</literal>です。
拡張は追加のリソースマネージャを定義しても構いません。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-debug" xreflabel="wal_debug">
      <term><varname>wal_debug</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_debug</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_debug</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If on, emit WAL-related debugging output. This parameter is
        only available if the <symbol>WAL_DEBUG</symbol> macro was
        defined when <productname>PostgreSQL</productname> was
        compiled.
-->
もしonであれば、WALに関連したデバッグ出力が有効になります。このパラメータは<symbol>WAL_DEBUG</symbol>マクロが <productname>PostgreSQL</productname>のコンパイルの時に定義された場合にのみ有効です。
       </para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-ignore-checksum-failure" xreflabel="ignore_checksum_failure">
      <term><varname>ignore_checksum_failure</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>ignore_checksum_failure</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ignore_checksum_failure</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Only has effect if <xref linkend="app-initdb-data-checksums"/> are enabled.
-->
<xref linkend="app-initdb-data-checksums"/>が有効の時のみ効果があります。
       </para>
       <para>
<!--
        Detection of a checksum failure during a read normally causes
        <productname>PostgreSQL</productname> to report an error, aborting the current
        transaction.  Setting <varname>ignore_checksum_failure</varname> to on causes
        the system to ignore the failure (but still report a warning), and
        continue processing.  This behavior may <emphasis>cause crashes, propagate
        or hide corruption, or other serious problems</emphasis>.  However, it may allow
        you to get past the error and retrieve undamaged tuples that might still be
        present in the table if the block header is still sane. If the header is
        corrupt an error will be reported even if this option is enabled. The
        default setting is <literal>off</literal>.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
読み込み過程でチェックサム障害が検出されると、通常<productname>PostgreSQL</productname>はエラーを報告し、現時点のトランザクションを停止します。
<varname>ignore_checksum_failure</varname>を有効（on）に設定するとシステムはその障害を無視し（しかし警告は報告をします）、処理を継続します。
この振る舞いはたぶん<emphasis>クラッシュの原因、破損の伝播や隠ぺい、もしくはその他の深刻な問題</emphasis>の原因になることがあります。
とは言っても、エラーを切り抜け、ブロックヘッダが健全に存在するテーブルにある障害を受けていないタプルの回収は行えます。
もしヘッダが破損されたら、オプションが有効になっていたとしても報告はなされます。
デフォルトの設定は<literal>off</literal>です。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-zero-damaged-pages" xreflabel="zero_damaged_pages">
      <term><varname>zero_damaged_pages</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>zero_damaged_pages</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>zero_damaged_pages</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Detection of a damaged page header normally causes
        <productname>PostgreSQL</productname> to report an error, aborting the current
        transaction.  Setting <varname>zero_damaged_pages</varname> to on causes
        the system to instead report a warning, zero out the damaged
        page in memory, and continue processing.  This behavior <emphasis>will destroy data</emphasis>,
        namely all the rows on the damaged page.  However, it does allow you to get
        past the error and retrieve rows from any undamaged pages that might
        be present in the table.  It is useful for recovering data if
        corruption has occurred due to a hardware or software error.  You should
        generally not set this on until you have given up hope of recovering
        data from the damaged pages of a table.  Zeroed-out pages are not
        forced to disk so it is recommended to recreate the table or
        the index before turning this parameter off again.  The
        default setting is <literal>off</literal>.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
ページヘッダの障害がわかると、通常<productname>PostgreSQL</productname>はエラーの報告を行い、現在のトランザクションを中断させます。
<varname>zero_damaged_pages</varname>をonに設定することにより、システムは代わりに警告を報告し、障害のあるメモリ内のページをゼロで埋め、処理を継続します。
この動作により、障害のあったページ上にある全ての行の<emphasis>データが破壊</emphasis>されます。
しかし、これによりエラーを確実に無視し、正常なページに存在するテーブル内の行を取り出すことができます。
ハードウェアまたはソフトウェアのエラーによって破損が発生した場合のデータの復旧時に有用です。
障害のあるページからのテーブルのデータの復旧をあきらめた場合を除き、通常はこれをonにしてはいけません。
ゼロで埋められたページはディスクに書き込みを強要されないため、このパラメータを再び無効にする以前にテーブル、またはインデックスを再作成することを勧めます。
デフォルトは<literal>off</literal>です。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ignore-invalid-pages" xreflabel="ignore_invalid_pages">
      <term><varname>ignore_invalid_pages</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>ignore_invalid_pages</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ignore_invalid_pages</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If set to <literal>off</literal> (the default), detection of
        WAL records having references to invalid pages during
        recovery causes <productname>PostgreSQL</productname> to
        raise a PANIC-level error, aborting the recovery. Setting
        <varname>ignore_invalid_pages</varname> to <literal>on</literal>
        causes the system to ignore invalid page references in WAL records
        (but still report a warning), and continue the recovery.
        This behavior may <emphasis>cause crashes, data loss,
        propagate or hide corruption, or other serious problems</emphasis>.
        However, it may allow you to get past the PANIC-level error,
        to finish the recovery, and to cause the server to start up.
        The parameter can only be set at server start. It only has effect
        during recovery or in standby mode.
-->
<literal>off</literal>（デフォルトです）に設定すると、無効なページを参照しているWALレコードは<productname>PostgreSQL</productname>に対してPANICレベルのエラーを引き起こし、リカバリをアボートします。
<varname>ignore_invalid_pages</varname>を<literal>on</literal>に設定すると、WALレコードの無効なページへの参照を無視し（しかしワーニングは報告されます）、リカバリを継続します。
この振る舞いにより、<emphasis>クラッシュ、データロス、破壊を増長したり見えなくするなどの深刻な問題</emphasis>を被るかもしれません。
しかし、これによってPANICレベルのエラーを回避してリカバリを完了し、サーバを起動できるかもしれません。
このパラメータはサーバ起動時にのみ設定できます。
リカバリ中、あるいはスタンバイモードでのみ効果があります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-debugging-support" xreflabel="jit_debugging_support">
      <term><varname>jit_debugging_support</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>jit_debugging_support</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>jit_debugging_support</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If LLVM has the required functionality, register generated functions
        with <productname>GDB</productname>.  This makes debugging easier.
        The default setting is <literal>off</literal>.
        This parameter can only be set at server start.
-->
LLVMに要求された機能がある場合は、生成した関数を<productname>GDB</productname>用に登録します。
これにより、デバッグが容易になります。
デフォルト設定は<literal>off</literal>です。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-dump-bitcode" xreflabel="jit_dump_bitcode">
      <term><varname>jit_dump_bitcode</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>jit_dump_bitcode</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>jit_dump_bitcode</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Writes the generated <productname>LLVM</productname> IR out to the
        file system, inside <xref linkend="guc-data-directory"/>. This is only
        useful for working on the internals of the JIT implementation.
        The default setting is <literal>off</literal>.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
生成された<productname>LLVM</productname> IRを<xref linkend="guc-data-directory"/>内のファイルシステムに出力します。
これはJITコンパイルのインターナルについて作業するときだけ有用です。
デフォルト設定は<literal>off</literal>です。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-expressions" xreflabel="jit_expressions">
      <term><varname>jit_expressions</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>jit_expressions</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>jit_expressions</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Determines whether expressions are JIT compiled, when JIT compilation
        is activated (see <xref linkend="jit-decision"/>).  The default is
        <literal>on</literal>.
-->
JITコンパイルが有効な時に式がJITコンパイルされるかどうかを決定します。
（<xref linkend="jit-decision"/>参照。）
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-profiling-support" xreflabel="jit_profiling_support">
      <term><varname>jit_profiling_support</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>jit_profiling_support</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>jit_profiling_support</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If LLVM has the required functionality, emit the data needed to allow
        <productname>perf</productname> to profile functions generated by JIT.
        This writes out files to <filename>~/.debug/jit/</filename>; the
        user is responsible for performing cleanup when desired.
        The default setting is <literal>off</literal>.
        This parameter can only be set at server start.
-->
LLVMに要求された機能がある場合は、JITが生成した関数を<productname>perf</productname>でプロファイルすることができるデータを出力します。
これにより<filename>~/.debug/jit/</filename>にファイルが書き出されます。
ユーザは自分の責任で必要なときに後始末を行わなければなりません。
デフォルト設定は<literal>off</literal>です。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-tuple-deforming" xreflabel="jit_tuple_deforming">
      <term><varname>jit_tuple_deforming</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>jit_tuple_deforming</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>jit_tuple_deforming</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Determines whether tuple deforming is JIT compiled, when JIT
        compilation is activated (see <xref linkend="jit-decision"/>).
        The default is <literal>on</literal>.
-->
JITコンパイルが有効な時にタプルデフォーミングがJITコンパイルされるかどうかを決定します。
（<xref linkend="jit-decision"/>参照。）
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-remove-temp-files-after-crash" xreflabel="remove_temp_files_after_crash">
      <term><varname>remove_temp_files_after_crash</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>remove_temp_files_after_crash</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>remove_temp_files_after_crash</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When set to <literal>on</literal>, which is the default,
        <productname>PostgreSQL</productname> will automatically remove
        temporary files after a backend crash. If disabled, the files will be
        retained and may be used for debugging, for example. Repeated crashes
        may however result in accumulation of useless files. This parameter
        can only be set in the <filename>postgresql.conf</filename> file or on
        the server command line.
-->
デフォルトである<literal>on</literal>に設定すると、<productname>PostgreSQL</productname>はバックエンドがクラッシュした後に自動的に一時ファイルを削除します。
無効にすると、ファイルは保存され、たとえばデバッグ目的で使用できます。
しかしクラッシュを繰り返すと不要なファイルが溜まっていくかもしれません。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-send-abort-for-crash" xreflabel="send_abort_for_crash">
      <term><varname>send_abort_for_crash</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>send_abort_for_crash</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>send_abort_for_crash</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        By default, after a backend crash the postmaster will stop remaining
        child processes by sending them <systemitem>SIGQUIT</systemitem>
        signals, which permits them to exit more-or-less gracefully.  When
        this option is set to <literal>on</literal>,
        <systemitem>SIGABRT</systemitem> is sent instead.  That normally
        results in production of a core dump file for each such child
        process.
        This can be handy for investigating the states of other processes
        after a crash.  It can also consume lots of disk space in the event
        of repeated crashes, so do not enable this on systems you are not
        monitoring carefully.
        Beware that no support exists for cleaning up the core file(s)
        automatically.
        This parameter can only be set in
        the <filename>postgresql.conf</filename> file or on the server
        command line.
-->
デフォルトでは、バックエンドクラッシュの後、postmasterは残りの子プロセスを<systemitem>SIGQUIT</systemitem>シグナルを送ることで停止します。
これにより、子プロセスは多かれ少なかれ礼儀正しく終了することができます。
このオプションが<literal>on</literal>に設定されている場合、代わりに<systemitem>SIGABRT</systemitem>が送信されます。
これにより通常、子プロセスごとにコアダンプファイルを生成します。
これは、クラッシュの後の他のプロセスの状態を調査するのに便利です。
また、クラッシュが繰り返されるイベントで大量のディスクスペースを消費する可能性があるため、注意深く監視していないシステムではこれを有効にしないでください。
自動的にコアファイルを削除する機能は提供されていないことに注意してください。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-send-abort-for-kill" xreflabel="send_abort_for_kill">
      <term><varname>send_abort_for_kill</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>send_abort_for_kill</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>send_abort_for_kill</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        By default, after attempting to stop a child process with
        <systemitem>SIGQUIT</systemitem>, the postmaster will wait five
        seconds and then send <systemitem>SIGKILL</systemitem> to force
        immediate termination.  When this option is set
        to <literal>on</literal>, <systemitem>SIGABRT</systemitem> is sent
        instead of <systemitem>SIGKILL</systemitem>.  That normally results
        in production of a core dump file for each such child process.
        This can be handy for investigating the states
        of <quote>stuck</quote> child processes.  It can also consume lots
        of disk space in the event of repeated crashes, so do not enable
        this on systems you are not monitoring carefully.
        Beware that no support exists for cleaning up the core file(s)
        automatically.
        This parameter can only be set in
        the <filename>postgresql.conf</filename> file or on the server
        command line.
-->
デフォルトでは、<systemitem>SIGQUIT</systemitem>で子プロセスを停止しようとした後、postmasterは5秒間待ってから<systemitem>SIGKILL</systemitem>を送信して即時終了を強制します。
このオプションが<literal>on</literal>に設定されている場合、<systemitem>SIGKILL</systemitem>の代わりに<systemitem>SIGABRT</systemitem>が送信されます。
これにより通常、子プロセスごとにコアダンプファイルを生成します。
これは、<quote>スタックした</quote>子プロセスの状態を調査するのに便利です。
また、クラッシュが繰り返されるイベントで大量のディスクスペースを消費する可能性があるため、注意深く監視していないシステムではこれを有効にしないでください。
自動的にコアファイルを削除する機能は提供されていないことに注意してください。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-logical-replication-streaming" xreflabel="debug_logical_replication_streaming">
      <term><varname>debug_logical_replication_streaming</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>debug_logical_replication_streaming</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>debug_logical_replication_streaming</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The allowed values are <literal>buffered</literal> and
        <literal>immediate</literal>. The default is <literal>buffered</literal>.
        This parameter is intended to be used to test logical decoding and
        replication of large transactions.  The effect of
        <varname>debug_logical_replication_streaming</varname> is different for the
        publisher and subscriber:
-->
指定できる値は、<literal>buffered</literal>および<literal>immediate</literal>です。
デフォルトは<literal>buffered</literal>です。
このパラメータは、大きなトランザクションにおけるロジカルデコーディングおよびレプリケーションのテストに使用することを目的としています。
<varname>debug_logical_replication_streaming</varname>の効果は、パブリッシャーとサブスクライバーで異なります。
       </para>

       <para>
<!--
        On the publisher side, <varname>debug_logical_replication_streaming</varname>
        allows streaming or serializing changes immediately in logical decoding.
        When set to <literal>immediate</literal>, stream each change if the
        <link linkend="sql-createsubscription-with-streaming"><literal>streaming</literal></link>
        option of
        <link linkend="sql-createsubscription"><command>CREATE SUBSCRIPTION</command></link>
        is enabled, otherwise, serialize each change.  When set to
        <literal>buffered</literal>, the decoding will stream or serialize
        changes when <varname>logical_decoding_work_mem</varname> is reached.
-->
パブリッシャー側では、<varname>debug_logical_replication_streaming</varname>を使用すると、ロジカルデコーディングでただちに変更をストリーミングまたはシリアル化できます。
<literal>immediate</literal>に設定すると、<link linkend="sql-createsubscription"><command>CREATE SUBSCRIPTION</command></link>の<link linkend="sql-createsubscription-with-streaming"><literal>ストリーミング</literal></link>オプションが有効になっている場合は各変更をストリームし、それ以外の場合は各変更をシリアル化します。
<literal>buffered</literal>に設定すると、<varname>logical_decoding_work_mem</varname>に達したときに、デコーディング処理がストリームまたはシリアル化します。
       </para>

       <para>
<!--
        On the subscriber side, if the <literal>streaming</literal> option is set to
        <literal>parallel</literal>, <varname>debug_logical_replication_streaming</varname>
        can be used to direct the leader apply worker to send changes to the
        shared memory queue or to serialize all changes to the file.  When set to
        <literal>buffered</literal>, the leader sends changes to parallel apply
        workers via a shared memory queue.  When set to
        <literal>immediate</literal>, the leader serializes all changes to files
        and notifies the parallel apply workers to read and apply them at the
        end of the transaction.
-->
サブスクライバー側では、<literal>streaming</literal>オプションが<literal>parallel</literal>に設定されている場合、<varname>debug_logical_replication_streaming</varname>を使用して、リーダー適用ワーカーに変更を共有メモリキューに送信するか、すべての変更をファイルにシリアル化するように指示できます。
<literal>buffered</literal>に設定されている場合、リーダーは共有メモリキューを介してパラレル適用ワーカーに変更を送信します。
<literal>immediate</literal>に設定されている場合、リーダーはファイルに対するすべての変更をシリアル化し、パラレル適用ワーカーにファイルを読み取ってトランザクションの最後に適用するように通知します。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
  </sect1>
  <sect1 id="runtime-config-short">
<!--
   <title>Short Options</title>
-->
   <title>短いオプション</title>

   <para>
<!--
    For convenience there are also single letter command-line option
    switches available for some parameters.  They are described in
    <xref linkend="runtime-config-short-table"/>.  Some of these
    options exist for historical reasons, and their presence as a
    single-letter option does not necessarily indicate an endorsement
    to use the option heavily.
-->
簡便性のために、一文字のコマンドラインオプションスイッチも、幾つかのパラメータのために用意されています。
それらは<xref linkend="runtime-config-short-table"/>に解説されています。
一部のオプションは歴史的な理由のために存在します。
また、この一文字オプションが存在することが、このオプションを多く使用することを支持することを示しているわけではありません。
   </para>

    <table id="runtime-config-short-table">
<!--
     <title>Short Option Key</title>
-->
     <title>短いオプションキー</title>
     <tgroup cols="2">
      <colspec colname="col1" colwidth="1*"/>
      <colspec colname="col2" colwidth="2*"/>
      <thead>
       <row>
<!--
        <entry>Short Option</entry>
-->
        <entry>短いオプション</entry>
<!--
        <entry>Equivalent</entry>
-->
        <entry>同義</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><option>-B <replaceable>x</replaceable></option></entry>
        <entry><literal>shared_buffers = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-d <replaceable>x</replaceable></option></entry>
        <entry><literal>log_min_messages = DEBUG<replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-e</option></entry>
        <entry><literal>datestyle = euro</literal></entry>
       </row>
       <row>
        <entry>
          <option>-fb</option>, <option>-fh</option>, <option>-fi</option>,
          <option>-fm</option>, <option>-fn</option>, <option>-fo</option>,
          <option>-fs</option>, <option>-ft</option>
         </entry>
         <entry>
          <literal>enable_bitmapscan = off</literal>,
          <literal>enable_hashjoin = off</literal>,
          <literal>enable_indexscan = off</literal>,
          <literal>enable_mergejoin = off</literal>,
          <literal>enable_nestloop = off</literal>,
          <literal>enable_indexonlyscan = off</literal>,
          <literal>enable_seqscan = off</literal>,
          <literal>enable_tidscan = off</literal>
         </entry>
       </row>
       <row>
        <entry><option>-F</option></entry>
        <entry><literal>fsync = off</literal></entry>
       </row>
       <row>
        <entry><option>-h <replaceable>x</replaceable></option></entry>
        <entry><literal>listen_addresses = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-i</option></entry>
        <entry><literal>listen_addresses = '*'</literal></entry>
       </row>
       <row>
        <entry><option>-k <replaceable>x</replaceable></option></entry>
        <entry><literal>unix_socket_directories = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-l</option></entry>
        <entry><literal>ssl = on</literal></entry>
       </row>
       <row>
        <entry><option>-N <replaceable>x</replaceable></option></entry>
        <entry><literal>max_connections = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-O</option></entry>
        <entry><literal>allow_system_table_mods = on</literal></entry>
       </row>
       <row>
        <entry><option>-p <replaceable>x</replaceable></option></entry>
        <entry><literal>port = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-P</option></entry>
        <entry><literal>ignore_system_indexes = on</literal></entry>
       </row>
       <row>
        <entry><option>-s</option></entry>
        <entry><literal>log_statement_stats = on</literal></entry>
       </row>
       <row>
        <entry><option>-S <replaceable>x</replaceable></option></entry>
        <entry><literal>work_mem = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-tpa</option>, <option>-tpl</option>, <option>-te</option></entry>
        <entry><literal>log_parser_stats = on</literal>,
        <literal>log_planner_stats = on</literal>,
        <literal>log_executor_stats = on</literal></entry>
       </row>
       <row>
        <entry><option>-W <replaceable>x</replaceable></option></entry>
        <entry><literal>post_auth_delay = <replaceable>x</replaceable></literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  </sect1>
<!-- split-config3-end -->
