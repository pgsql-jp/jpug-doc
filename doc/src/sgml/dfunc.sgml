<!-- doc/src/sgml/dfunc.sgml -->

<sect2 id="dfunc">
<!--
 <title>Compiling and Linking Dynamically-loaded Functions</title>
-->
 <title>動的にロードされる関数のコンパイルとリンク</title>

 <para>
<!--
  Before you are able to use your
  <productname>PostgreSQL</productname> extension functions written in
  C, they must be compiled and linked in a special way to produce a
  file that can be dynamically loaded by the server.  To be precise, a
  <firstterm>shared library</firstterm> needs to be
  created.<indexterm><primary>shared library</></indexterm>
-->
Cで書かれた<productname>PostgreSQL</productname>の拡張関数を使うためには、サーバが動的にロードできるように特別な方法でコンパイルとリンクを行う必要があります。
正確には<firstterm>共有ライブラリ</firstterm>を作る必要があります。
<indexterm><primary>共有ライブラリ</></indexterm>

 </para>

 <para>
<!--
  For information beyond what is contained in this section
  you should read the documentation of your
  operating system, in particular the manual pages for the C compiler,
  <command>cc</command>, and the link editor, <command>ld</command>.
  In addition, the <productname>PostgreSQL</productname> source code
  contains several working examples in the
  <filename>contrib</filename> directory.  If you rely on these
  examples you will make your modules dependent on the availability
  of the <productname>PostgreSQL</productname> source code, however.
-->
本節の説明以上の詳しい情報はオペレーティングシステムのドキュメント、特にCコンパイラ<command>cc</command>とリンクエディタ<command>ld</command>のマニュアルページを参照してください。
さらに、<productname>PostgreSQL</productname>のソースコードの<filename>contrib</filename>ディレクトリにいくつか実例があります。
しかし、もしこれらの例に頼ると<productname>PostgreSQL</productname>ソースコードが利用できることに依存したモジュールが作られてしまいます。
 </para>

 <para>
<!--
  Creating shared libraries is generally analogous to linking
  executables: first the source files are compiled into object files,
  then the object files are linked together.  The object files need to
  be created as <firstterm>position-independent code</firstterm>
  (<acronym>PIC</acronym>),<indexterm><primary>PIC</></> which
  conceptually means that they can be placed at an arbitrary location
  in memory when they are loaded by the executable.  (Object files
  intended for executables are usually not compiled that way.)  The
  command to link a shared library contains special flags to
  distinguish it from linking an executable (at least in theory
  &mdash; on some systems the practice is much uglier).
-->
共有ライブラリの作成は一般的に実行プログラムのリンクに類似しています。
まずソースファイルがオブジェクトファイルにコンパイルされ、そのオブジェクトファイル同士がリンクされます。
これらのオブジェクトファイルは<firstterm>位置独立なコード</firstterm>（<acronym>PIC</acronym>）として作られる必要があります。
<indexterm><primary>PIC</></>
それは概念的には、実行プログラムから呼び出される時にメモリの適当な場所に置くことができるということです
（実行プログラム用として作られたオブジェクトファイルはそのようにはコンパイルされません）。
共有ライブラリをリンクするコマンドは実行プログラムのリンクと区別するための特別なフラグがあります（少なくとも理論上ではそのようになっています。システムによってはもっと醜い実際が見受けられます)。
 </para>

 <para>
<!--
  In the following examples we assume that your source code is in a
  file <filename>foo.c</filename> and we will create a shared library
  <filename>foo.so</filename>.  The intermediate object file will be
  called <filename>foo.o</filename> unless otherwise noted.  A shared
  library can contain more than one object file, but we only use one
  here.
-->
次の例ではソースコードは<filename>foo.c</filename>ファイルにあると仮定し、<filename>foo.so</filename>という共有ライブラリを作るとします。
中間のオブジェクトファイルは特別な記述がない限り<filename>foo.o</filename>と呼ばれます。
共有ライブラリは1つ以上のオブジェクトファイルを持つことができますが、ここでは1つしか使いません。
 </para>

<!-- 原文コメント
  Note: Reading GNU Libtool sources is generally a good way of
  figuring out this information.  The methods used within PostgreSQL
  source code are not necessarily ideal.
-->

  <variablelist>
   <varlistentry>
    <term>
     <systemitem class="osname">FreeBSD</>
<!--
     <indexterm><primary>FreeBSD</><secondary>shared library</></>
-->
     <indexterm><primary>FreeBSD</><secondary>共有ライブラリ</></>
    </term>
    <listitem>
     <para>
<!--
      The compiler flag to create <acronym>PIC</acronym> is
      <option>-fpic</option>.  To create shared libraries the compiler
      flag is <option>-shared</option>.
-->
<acronym>PIC</acronym>を作るためのコンパイラフラグは<option>-fpic</option>です。
共有ライブラリを作るコンパイラフラグは<option>-shared</option>です。
<programlisting>
gcc -fpic -c foo.c
gcc -shared -o foo.so foo.o
</programlisting>
<!--
      This is applicable as of version 3.0 of
      <systemitem class="osname">FreeBSD</>.
-->
これは<systemitem class="osname">FreeBSD</>のバージョン3.0に適用されます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <systemitem class="osname">HP-UX</>
<!--
     <indexterm><primary>HP-UX</><secondary>shared library</></>
-->
     <indexterm><primary>HP-UX</><secondary>共有ライブラリ</></>
    </term>
    <listitem>
     <para>
<!--
      The compiler flag of the system compiler to create
      <acronym>PIC</acronym> is <option>+z</option>.  When using
      <application>GCC</application> it's <option>-fpic</option>. The
      linker flag for shared libraries is <option>-b</option>.  So:
-->
<acronym>PIC</acronym>を作るためのシステムコンパイラのコンパイラフラグは<option>+z</option>です。
<application>GCC</application>を使う場合は<option>-fpic</option>です。
共有ライブラリのためのリンカフラグは<option>-b</option>です。
したがって、以下のようになります。
<programlisting>
cc +z -c foo.c
</programlisting>
<!--
      or:
-->
または
<programlisting>
gcc -fpic -c foo.c
</programlisting>
<!--
      and then:
-->
そして
<programlisting>
ld -b -o foo.sl foo.o
</programlisting>
<!--
      <systemitem class="osname">HP-UX</> uses the extension
      <filename>.sl</filename> for shared libraries, unlike most other
      systems.
-->
<systemitem class="osname">HP-UX</>は他のほとんどのシステムと異なり共有ライブラリに<filename>.sl</filename>という拡張子を使います。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <systemitem class="osname">Linux</>
<!--
     <indexterm><primary>Linux</><secondary>shared library</></>
-->
     <indexterm><primary>Linux</><secondary>共有ライブラリ</></>
    </term>
    <listitem>
     <para>
<!--
      The compiler flag to create <acronym>PIC</acronym> is
      <option>-fpic</option>.  On some platforms in some situations
      <option>-fPIC</option> must be used if <option>-fpic</option>
      does not work.  Refer to the GCC manual for more information.
      The compiler flag to create a shared library is
      <option>-shared</option>.  A complete example looks like this:
-->
<acronym>PIC</acronym>を作るためのコンパイラフラグは<option>-fpic</option>です。
いくつかのプラットフォームでは状況によって<option>-fpic</option>が動作しない場合は<option>-fPIC</option>を使わなければいけません。
さらに詳しい情報についてはGCCのマニュアルを参照してください。
共有ライブラリを作るコンパイラフラグは<option>-shared</option>です。
完全な例は下記のようになります。
<programlisting>
cc -fpic -c foo.c
cc -shared -o foo.so foo.o
</programlisting>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <systemitem class="osname">OS X</>
<!--
     <indexterm><primary>OS X</><secondary>shared library</></>
-->
     <indexterm><primary>OS X</><secondary>共有ライブラリ</></>
    </term>
    <listitem>
     <para>
<!--
      Here is an example.  It assumes the developer tools are installed.
-->
例を以下に示します。
開発者用ツールがインストールされていることが前提です。
<programlisting>
cc -c foo.c
cc -bundle -flat_namespace -undefined suppress -o foo.so foo.o
</programlisting>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <systemitem class="osname">NetBSD</>
<!--
     <indexterm><primary>NetBSD</><secondary>shared library</></>
-->
     <indexterm><primary>NetBSD</><secondary>共有ライブラリ</></>
    </term>
    <listitem>
     <para>
<!--
      The compiler flag to create <acronym>PIC</acronym> is
      <option>-fpic</option>.  For <acronym>ELF</acronym> systems, the
      compiler with the flag <option>-shared</option> is used to link
      shared libraries.  On the older non-ELF systems, <literal>ld
      -Bshareable</literal> is used.
-->
<acronym>PIC</acronym>を作るためのコンパイラフラグは<option>-fpic</option>です。
<acronym>ELF</acronym>システムでは<option>-shared</option>コンパイラフラグを使用して共有ライブラリをリンクします。
より古い非ELFシステムでは<literal>ld -Bshareable</literal>が使われます。
<programlisting>
gcc -fpic -c foo.c
gcc -shared -o foo.so foo.o
</programlisting>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <systemitem class="osname">OpenBSD</>
<!--
     <indexterm><primary>OpenBSD</><secondary>shared library</></>
-->
     <indexterm><primary>OpenBSD</><secondary>共有ライブラリ</></>
    </term>
    <listitem>
     <para>
<!--
      The compiler flag to create <acronym>PIC</acronym> is
      <option>-fpic</option>.  <literal>ld -Bshareable</literal> is
      used to link shared libraries.
-->
<acronym>PIC</acronym>を作成するためのコンパイラフラグは<option>-fpic</option>です。
共有ライブラリをリンクするには<literal>ld -Bshareable</literal>を使用します。
<programlisting>
gcc -fpic -c foo.c
ld -Bshareable -o foo.so foo.o
</programlisting>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <systemitem class="osname">Solaris</>
<!--
     <indexterm><primary>Solaris</><secondary>shared library</></>
-->
     <indexterm><primary>Solaris</><secondary>共有ライブラリ</></>
    </term>
    <listitem>
     <para>
<!--
      The compiler flag to create <acronym>PIC</acronym> is
      <option>-KPIC</option> with the Sun compiler and
      <option>-fpic</option> with <application>GCC</>.  To
      link shared libraries, the compiler option is
      <option>-G</option> with either compiler or alternatively
      <option>-shared</option> with <application>GCC</>.
-->
<acronym>PIC</acronym>を作るためのコンパイラフラグはSunコンパイラでは<option>-KPIC</option>で、<application>GCC</>では<option>-fpic</option>です。
共有ライブラリをリンクするためには、どちらのコンパイラでもコンパイラオプションは<option>-G</option>で、<application>GCC</>の場合、代わりに<option>-shared</option>オプションを使うこともできます。
<programlisting>
cc -KPIC -c foo.c
cc -G -o foo.so foo.o
</programlisting>
<!--
      or
-->
もしくは
<programlisting>
gcc -fpic -c foo.c
gcc -G -o foo.so foo.o
</programlisting>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <systemitem class="osname">Tru64 UNIX</>
<!--
     <indexterm><primary>Tru64 UNIX</><secondary>shared library</></>
-->
     <indexterm><primary>Tru64 UNIX</><secondary>共有ライブラリ</></>
     <indexterm><primary>Digital UNIX</><see>Tru64 UNIX</></>
    </term>
    <listitem>
     <para>
<!--
      <acronym>PIC</acronym> is the default, so the compilation command
      is the usual one.  <command>ld</command> with special options is
      used to do the linking.
-->
<acronym>PIC</acronym>はデフォルトで、コンパイルコマンドは通常のものです。
リンクのためには特別なオプション付きの<command>ld</command>を使用します。
<programlisting>
cc -c foo.c
ld -shared -expect_unresolved '*' -o foo.so foo.o
</programlisting>
<!--
      The same procedure is used with GCC instead of the system
      compiler; no special options are required.
-->
システムのコンパイラではなくGCCを使う場合も同じ手順です。
特別のオプションは必要ありません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <systemitem class="osname">UnixWare</>
<!--
     <indexterm><primary>UnixWare</><secondary>shared library</></>
-->
     <indexterm><primary>UnixWare</><secondary>共有ライブラリ</></>
    </term>
    <listitem>
     <para>
<!--
      The compiler flag to create <acronym>PIC</acronym> is <option>-K
      PIC</option> with the SCO compiler and <option>-fpic</option>
      with <productname>GCC</productname>.  To link shared libraries,
      the compiler option is <option>-G</option> with the SCO compiler
      and <option>-shared</option> with
      <productname>GCC</productname>.
-->
<acronym>PIC</acronym>を作るためのコンパイラフラグはSCOコンパイラでは<option>-KPIC</option>で、<productname>GCC</productname>では<option>-fpic</option>です。
共有ライブラリのリンクは、SCOコンパイラではコンパイラオプションは<option>-G</option>で、<productname>GCC</productname>では<option>-shared</option>です。
<programlisting>
cc -K PIC -c foo.c
cc -G -o foo.so foo.o
</programlisting>
<!--
      or
-->
もしくは
<programlisting>
gcc -fpic -c foo.c
gcc -shared -o foo.so foo.o
</programlisting>
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

 <tip>
  <para>
<!--
   If this is too complicated for you, you should consider using
   <ulink url="http://www.gnu.org/software/libtool/">
   <productname>GNU Libtool</productname></ulink>,
   which hides the platform differences behind a uniform interface.
-->
これがあまりに難しいようであれば、<ulink url="http://www.gnu.org/software/libtool/"><productname>GNU Libtool</productname></ulink>の使用を検討すべきです。
これはプラットフォームの違いを、統一されたインタフェースで判らないようにします。
  </para>
 </tip>

 <para>
<!--
  The resulting shared library file can then be loaded into
  <productname>PostgreSQL</productname>.  When specifying the file name
  to the <command>CREATE FUNCTION</command> command, one must give it
  the name of the shared library file, not the intermediate object file.
  Note that the system's standard shared-library extension (usually
  <literal>.so</literal> or <literal>.sl</literal>) can be omitted from
  the <command>CREATE FUNCTION</command> command, and normally should
  be omitted for best portability.
-->
これで完成した共有ライブラリファイルは<productname>PostgreSQL</productname>にロードすることができます。
<command>CREATE FUNCTION</command>コマンドにファイル名を指定する時には、中間オブジェクトファイルではなく共有ライブラリファイルの名前を与えてください。
システムの標準共有ライブラリ用の拡張子（通常<filename>.so</filename>あるいは<literal>.sl</literal>）は<command>CREATE FUNCTION</command>で省略することができ、そして移植性を最も高くするため通常は省略されます。
 </para>

 <para>
<!--
  Refer back to <xref linkend="xfunc-c-dynload"> about where the
  server expects to find the shared library files.
-->
サーバがライブラリファイルをどこに見つけるかに関しては<xref linkend="xfunc-c-dynload">を見直してください。
 </para>

<!-- 原文コメント
Under AIX, object files are compiled normally but building the shared
library requires a couple of steps.  First, create the object file:
.nf
cc <other flags> -c foo.c
.fi
You must then create a symbol \*(lqexports\*(rq file for the object
file:
.nf
mkldexport foo.o `pwd` &gt; foo.exp
.fi
Finally, you can create the shared library:
.nf
ld <other flags> -H512 -T512 -o foo.so -e _nostart \e
   -bI:.../lib/postgres.exp -bE:foo.exp foo.o \e
   -lm -lc 2>/dev/null
.fi
  -->

</sect2>
