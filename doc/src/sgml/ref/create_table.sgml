<!--
doc/src/sgml/ref/create_table.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATETABLE">
 <indexterm zone="sql-createtable">
  <primary>CREATE TABLE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE TABLE</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE TABLE</refname>
<!--
  <refpurpose>define a new table</refpurpose>
-->
<refpurpose>新しいテーブルを定義する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ [ GLOBAL | LOCAL ] { TEMPORARY | TEMP } | UNLOGGED ] TABLE [ IF NOT EXISTS ] <replaceable class="PARAMETER">table_name</replaceable> ( [
  { <replaceable class="PARAMETER">column_name</replaceable> <replaceable class="PARAMETER">data_type</replaceable> [ COLLATE <replaceable>collation</replaceable> ] [ <replaceable class="PARAMETER">column_constraint</replaceable> [ ... ] ]
    | <replaceable>table_constraint</replaceable>
    | LIKE <replaceable>source_table</replaceable> [ <replaceable>like_option</replaceable> ... ] }
    [, ... ]
] )
[ INHERITS ( <replaceable>parent_table</replaceable> [, ... ] ) ]
[ WITH ( <replaceable class="PARAMETER">storage_parameter</replaceable> [= <replaceable class="PARAMETER">value</replaceable>] [, ... ] ) | WITH OIDS | WITHOUT OIDS ]
[ ON COMMIT { PRESERVE ROWS | DELETE ROWS | DROP } ]
[ TABLESPACE <replaceable class="PARAMETER">tablespace_name</replaceable> ]

CREATE [ [ GLOBAL | LOCAL ] { TEMPORARY | TEMP } | UNLOGGED ] TABLE [ IF NOT EXISTS ] <replaceable class="PARAMETER">table_name</replaceable>
    OF <replaceable class="PARAMETER">type_name</replaceable> [ (
  { <replaceable class="PARAMETER">column_name</replaceable> WITH OPTIONS [ <replaceable class="PARAMETER">column_constraint</replaceable> [ ... ] ]
    | <replaceable>table_constraint</replaceable> }
    [, ... ]
) ]
[ WITH ( <replaceable class="PARAMETER">storage_parameter</replaceable> [= <replaceable class="PARAMETER">value</replaceable>] [, ... ] ) | WITH OIDS | WITHOUT OIDS ]
[ ON COMMIT { PRESERVE ROWS | DELETE ROWS | DROP } ]
[ TABLESPACE <replaceable class="PARAMETER">tablespace_name</replaceable> ]

<!--
<phrase>where <replaceable class="PARAMETER">column_constraint</replaceable> is:</phrase>
-->
<phrase>ここで<replaceable class="PARAMETER">column_constraint</replaceable>には、次の構文が入ります。</phrase>

[ CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable> ]
{ NOT NULL |
  NULL |
  CHECK ( <replaceable class="PARAMETER">expression</replaceable> ) [ NO INHERIT ] |
  DEFAULT <replaceable>default_expr</replaceable> |
  UNIQUE <replaceable class="PARAMETER">index_parameters</replaceable> |
  PRIMARY KEY <replaceable class="PARAMETER">index_parameters</replaceable> |
  REFERENCES <replaceable class="PARAMETER">reftable</replaceable> [ ( <replaceable class="PARAMETER">refcolumn</replaceable> ) ] [ MATCH FULL | MATCH PARTIAL | MATCH SIMPLE ]
    [ ON DELETE <replaceable class="parameter">action</replaceable> ] [ ON UPDATE <replaceable class="parameter">action</replaceable> ] }
[ DEFERRABLE | NOT DEFERRABLE ] [ INITIALLY DEFERRED | INITIALLY IMMEDIATE ]

<!--
<phrase>and <replaceable class="PARAMETER">table_constraint</replaceable> is:</phrase>
-->
<phrase>また、<replaceable class="PARAMETER">table_constraint</replaceable>には、次の構文が入ります。</phrase>

[ CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable> ]
{ CHECK ( <replaceable class="PARAMETER">expression</replaceable> ) [ NO INHERIT ] |
  UNIQUE ( <replaceable class="PARAMETER">column_name</replaceable> [, ... ] ) <replaceable class="PARAMETER">index_parameters</replaceable> |
  PRIMARY KEY ( <replaceable class="PARAMETER">column_name</replaceable> [, ... ] ) <replaceable class="PARAMETER">index_parameters</replaceable> |
  EXCLUDE [ USING <replaceable class="parameter">index_method</replaceable> ] ( <replaceable class="parameter">exclude_element</replaceable> WITH <replaceable class="parameter">operator</replaceable> [, ... ] ) <replaceable class="parameter">index_parameters</replaceable> [ WHERE ( <replaceable class="parameter">predicate</replaceable> ) ] |
  FOREIGN KEY ( <replaceable class="PARAMETER">column_name</replaceable> [, ... ] ) REFERENCES <replaceable class="PARAMETER">reftable</replaceable> [ ( <replaceable class="PARAMETER">refcolumn</replaceable> [, ... ] ) ]
    [ MATCH FULL | MATCH PARTIAL | MATCH SIMPLE ] [ ON DELETE <replaceable class="parameter">action</replaceable> ] [ ON UPDATE <replaceable class="parameter">action</replaceable> ] }
[ DEFERRABLE | NOT DEFERRABLE ] [ INITIALLY DEFERRED | INITIALLY IMMEDIATE ]

<!--
<phrase>and <replaceable class="PARAMETER">like_option</replaceable> is:</phrase>
-->
<phrase>また<replaceable class="PARAMETER">like_option</replaceable>は、以下の通りです。</phrase>

{ INCLUDING | EXCLUDING } { DEFAULTS | CONSTRAINTS | INDEXES | STORAGE | COMMENTS | ALL }

<!--
<phrase><replaceable class="PARAMETER">index_parameters</replaceable> in <literal>UNIQUE</literal>, <literal>PRIMARY KEY</literal>, and <literal>EXCLUDE</literal> constraints are:</phrase>
-->
<phrase><literal>UNIQUE</>、<literal>PRIMARY KEY</>および<literal>EXCLUDE</literal>制約内の<replaceable class="PARAMETER">index_parameters</replaceable>は以下の通りです。</phrase>

[ WITH ( <replaceable class="PARAMETER">storage_parameter</replaceable> [= <replaceable class="PARAMETER">value</replaceable>] [, ... ] ) ]
[ USING INDEX TABLESPACE <replaceable class="PARAMETER">tablespace_name</replaceable> ]

<!--
<phrase><replaceable class="PARAMETER">exclude_element</replaceable> in an <literal>EXCLUDE</literal> constraint is:</phrase>
-->
<phrase><literal>EXCLUDE</literal>制約内の<replaceable class="PARAMETER">exclude_element</replaceable>は以下の通りです。</phrase>

{ <replaceable class="parameter">column_name</replaceable> | ( <replaceable class="parameter">expression</replaceable> ) } [ <replaceable class="parameter">opclass</replaceable> ] [ ASC | DESC ] [ NULLS { FIRST | LAST } ]
</synopsis>

 </refsynopsisdiv>

 <refsect1 id="SQL-CREATETABLE-description">
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>CREATE TABLE</command> will create a new, initially empty table
   in the current database. The table will be owned by the user issuing the
   command.
-->
<command>CREATE TABLE</command>は、現在のデータベースに新しい空のテーブルを作成します。
作成したテーブルはこのコマンドを実行したユーザが所有します。
  </para>

  <para>
<!--
   If a schema name is given (for example, <literal>CREATE TABLE
   myschema.mytable ...</>) then the table is created in the specified
   schema.  Otherwise it is created in the current schema.  Temporary
   tables exist in a special schema, so a schema name cannot be given
   when creating a temporary table.  The name of the table must be
   distinct from the name of any other table, sequence, index, view,
   or foreign table in the same schema.
-->
スキーマ名が付けられている場合（例えば、<literal>CREATE TABLE myschema.mytable ...</>）、テーブルは指定されたスキーマに作成されます。
スキーマ名がなければ、テーブルは現在のスキーマに作成されます。
また、一時テーブルは特別なスキーマに存在するため、一時テーブルの作成時にスキーマ名を与えることはできません。
テーブル名は、同じスキーマ内の他のテーブル、シーケンス、インデックス、ビュー、外部テーブルとは異なる名前にする必要があります。
  </para>

  <para>
<!--
   <command>CREATE TABLE</command> also automatically creates a data
   type that represents the composite type corresponding
   to one row of the table.  Therefore, tables cannot have the same
   name as any existing data type in the same schema.
-->
さらに、<command>CREATE TABLE</command>は、作成するテーブルの1行に対応する複合型のデータ型を作成します。
したがって、テーブルは、同じスキーマ内の既存のデータ型と同じ名前を持つことができません。

  </para>

  <para>
<!--
   The optional constraint clauses specify constraints (tests) that
   new or updated rows must satisfy for an insert or update operation
   to succeed.  A constraint is an SQL object that helps define the
   set of valid values in the table in various ways.
-->
制約句には、挿入、更新操作を行うときに、新しい行、または更新する行が満たさなければならない制約（検査項目）を指定します。制約句は省略可能です。
制約は、テーブル内で有効な値の集合を様々な方法で定義できるSQLオブジェクトです。
  </para>

  <para>
<!--
   There are two ways to define constraints: table constraints and
   column constraints.  A column constraint is defined as part of a
   column definition.  A table constraint definition is not tied to a
   particular column, and it can encompass more than one column.
   Every column constraint can also be written as a table constraint;
   a column constraint is only a notational convenience for use when the
   constraint only affects one column.
-->
制約の定義にはテーブル制約と列制約という2種類があります。
列制約は列定義の一部として定義されます。
テーブル制約定義は、特定の列とは結びつけられておらず、複数の列を含有することができます。
また、全ての列制約はテーブル制約として記述することができます。
列制約は、1つの列にのみ影響する制約のための、簡便な記述方法に過ぎません。
  </para>

  <para>
<!--
   To be able to create a table, you must have <literal>USAGE</literal>
   privilege on all column types or the type in the <literal>OF</literal>
   clause, respectively.
-->
テーブルを作成するためには、すべての列の型または<literal>OF</literal>句中の型に対する<literal>USAGE</literal>権限を持たなければなりません。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
<title>パラメータ</title>

  <variablelist>

   <varlistentry id="SQL-CREATETABLE-TEMPORARY">
<!--
    <term><literal>TEMPORARY</> or <literal>TEMP</></term>
-->
    <term><literal>TEMPORARY</>または<literal>TEMP</></term>
    <listitem>
     <para>
<!--
      If specified, the table is created as a temporary table.
      Temporary tables are automatically dropped at the end of a
      session, or optionally at the end of the current transaction
      (see <literal>ON COMMIT</literal> below).  Existing permanent
      tables with the same name are not visible to the current session
      while the temporary table exists, unless they are referenced
      with schema-qualified names. Any indexes created on a temporary
      table are automatically temporary as well.
-->
このパラメータが指定された場合、テーブルは一時テーブルとして作成されます。
一時テーブルは、そのセッションの終わり、場合によっては、現在のトランザクションの終わり（後述の<literal>ON COMMIT</literal>を参照）に自動的に削除されます。
一時テーブルが存在する場合、同じ名前を持つ既存の永続テーブルは、スキーマ修飾名で参照されていない限り、現在のセッションでは非可視になります。
一時テーブルに作られるインデックスも、全て自動的に一時的なものとなります。
     </para>

     <para>
<!--
      The <link linkend="autovacuum">autovacuum daemon</link> cannot
      access and therefore cannot vacuum or analyze temporary tables.
      For this reason, appropriate vacuum and analyze operations should be
      performed via session SQL commands.  For example, if a temporary
      table is going to be used in complex queries, it is wise to run
      <command>ANALYZE</> on the temporary table after it is populated.
-->
<link linkend="autovacuum">自動バキュームデーモン</link>は一時テーブルにアクセスできないため、一時テーブルのバキュームや解析を行うことはできません。
このためセッションのSQLコマンドを用いて適切なバキュームと解析を実行しなければなりません。
例えば、一時テーブルが複雑な問い合わせで使用される場合、一時テーブルにデータを投入した後にそれに対し<command>ANALYZE</>を実行することを勧めます。
     </para>

     <para>
<!--
      Optionally, <literal>GLOBAL</literal> or <literal>LOCAL</literal>
      can be written before <literal>TEMPORARY</> or <literal>TEMP</>.
      This presently makes no difference in <productname>PostgreSQL</>
      and is deprecated; see
      <xref linkend="sql-createtable-compatibility"
      endterm="sql-createtable-compatibility-title">.
-->
オプションで、<literal>GLOBAL</literal>または<literal>LOCAL</literal>を<literal>TEMPORARY</>や<literal>TEMP</>の前に記述することができます。
<productname>PostgreSQL</>では、現在違いがなく、廃止予定です。
<xref linkend="sql-createtable-compatibility" endterm="sql-createtable-compatibility-title">を参照してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="SQL-CREATETABLE-UNLOGGED">
    <term><literal>UNLOGGED</></term>
    <listitem>
     <para>
<!--
      If specified, the table is created as an unlogged table.  Data written
      to unlogged tables is not written to the write-ahead log (see <xref
      linkend="wal">), which makes them considerably faster than ordinary
      tables.  However, they are not crash-safe: an unlogged table is
      automatically truncated after a crash or unclean shutdown.  The contents
      of an unlogged table are also not replicated to standby servers.
      Any indexes created on an unlogged table are automatically unlogged as
      well.
-->
指定された場合、テーブルはログを取らないテーブルとして作成されます。
ログを取らないテーブルに書き出されたデータは先行書き込みログ（<xref linkend="wal">参照）には書き出されません。
このため通常のテーブルより相当高速になります。
しかしこれらはクラッシュ時に安全ではありません。
クラッシュまたは異常停止の後、ログを取らないテーブルは自動的に切り詰められます。
またログを取らないテーブルの内容はスタンバイサーバに複製されません。
ログを取らないテーブル上に作成されたインデックスはすべて同様に、ログを取らないようになります。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>IF NOT EXISTS</></term>
    <listitem>
     <para>
<!--
      Do not throw an error if a relation with the same name already exists.
      A notice is issued in this case.  Note that there is no guarantee that
      the existing relation is anything like the one that would have been
      created.
-->
同じ名前のリレーションがすでに存在していてもエラーとしません。
この場合注意が発せられます。
既存のリレーションが作成しようとしたものと何かしら似たものであることは保証されません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">table_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name (optionally schema-qualified) of the table to be created.
-->
作成するテーブルの名前です（スキーマ修飾名でも可）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>OF <replaceable class="PARAMETER">type_name</replaceable></literal></term>
    <listitem>
     <para>
<!--
      Creates a <firstterm>typed table</firstterm>, which takes its
      structure from the specified composite type (name optionally
      schema-qualified).  A typed table is tied to its type; for
      example the table will be dropped if the type is dropped
      (with <literal>DROP TYPE ... CASCADE</literal>).
-->
指定した複合型(スキーマ修飾可能)から構造を取り出した<firstterm>型付きテーブル</firstterm>を作成します。
型付きテーブルはその型に束縛されます。
例えば、型が(<literal>DROP TYPE ... CASCADE</literal>で)削除されるとそのテーブルは削除されます。
     </para>

     <para>
<!--
      When a typed table is created, then the data types of the
      columns are determined by the underlying composite type and are
      not specified by the <literal>CREATE TABLE</literal> command.
      But the <literal>CREATE TABLE</literal> command can add defaults
      and constraints to the table and can specify storage parameters.
-->
型付きテーブルが作成されると、その列のデータ型は背後の複合型により決定され、<literal>CREATE TABLE</literal>コマンドでは指定されません。
しかし<literal>CREATE TABLE</literal>コマンドではテーブルにデフォルトと制約を追加できます。
また、格納パラメータの指定も可能です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">column_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name of a column to be created in the new table.
-->
新しいテーブルで作成される列の名前です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">data_type</replaceable></term>
    <listitem>
     <para>
<!--
      The data type of the column. This can include array
      specifiers. For more information on the data types supported by
      <productname>PostgreSQL</productname>, refer to <xref
      linkend="datatype">.
-->
列のデータ型です。
これには、配列指定子を含めることができます。
<productname>PostgreSQL</productname>でサポートされるデータ型の情報に関する詳細は<xref linkend="datatype">を参照してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>COLLATE <replaceable>collation</replaceable></literal></term>
    <listitem>
     <para>
<!--
      The <literal>COLLATE</> clause assigns a collation to
      the column (which must be of a collatable data type).
      If not specified, the column data type's default collation is used.
-->
<literal>COLLATE</>句は列（照合順の設定が可能なデータ型でなければなりません）に照合順を割り当てます。
指定がなければ、列のデータ型のデフォルトの照合順が使用されます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>INHERITS ( <replaceable>parent_table</replaceable> [, ... ] )</literal></term>
    <listitem>
     <para>
<!--
      The optional <literal>INHERITS</> clause specifies a list of
      tables from which the new table automatically inherits all
      columns.
-->
<literal>INHERITS</>句でテーブルの一覧を指定すると、新しいテーブルは指定されたテーブルの全ての列を自動的に継承します。この句は省略可能です。
     </para>

     <para>
<!--
      Use of <literal>INHERITS</> creates a persistent relationship
      between the new child table and its parent table(s).  Schema
      modifications to the parent(s) normally propagate to children
      as well, and by default the data of the child table is included in
      scans of the parent(s).
-->
<literal>INHERITS</>を使用すると、新しい子テーブルとその親テーブル（複数可）との間に永続的な関連が作成されます。
通常、親へのスキーマ変更は子にも伝播します。また、デフォルトでは、親テーブルの走査結果には子テーブルのデータが含まれます。
     </para>

     <para>
<!--
      If the same column name exists in more than one parent
      table, an error is reported unless the data types of the columns
      match in each of the parent tables.  If there is no conflict,
      then the duplicate columns are merged to form a single column in
      the new table.  If the column name list of the new table
      contains a column name that is also inherited, the data type must
      likewise match the inherited column(s), and the column
      definitions are merged into one.  If the
      new table explicitly specifies a default value for the column,
      this default overrides any defaults from inherited declarations
      of the column.  Otherwise, any parents that specify default
      values for the column must all specify the same default, or an
      error will be reported.
-->
複数の親テーブルに同一名の列が存在する場合、それらのデータ型が一致していなければ、エラーとして報告されます。
競合がなければ、これらの重複した列は新しいテーブルで1つの列の形に融合されます。
新しいテーブルの列名の一覧に継承する列の名前が含まれる場合も、そのデータ型は継承する列のデータ型と一致していなければなりません。さらに、その列定義は1つに融合されます。
新しいテーブルで明示的に列のデフォルト値を指定した場合、継承した列宣言における全てのデフォルト値は上書きされます。
デフォルト値を指定しなかった場合、親側でデフォルト値が指定されている時は、それらのデフォルト値が全て同じ値でなければなりません。
値が違う場合はエラーになります。
     </para>

<!--
     <para><literal>CHECK</> constraints are merged in essentially the same way as
      columns: if multiple parent tables and/or the new table definition
      contain identically-named <literal>CHECK</> constraints, these
      constraints must all have the same check expression, or an error will be
      reported.  Constraints having the same name and expression will
      be merged into one copy.  A constraint marked <literal>NO INHERIT</> in a
      parent will not be considered.  Notice that an unnamed <literal>CHECK</>
      constraint in the new table will never be merged, since a unique name
      will always be chosen for it.
-->
<para><literal>CHECK</>制約は、基本的には列と同様の方法でマージされます。
複数の親テーブル、新しいテーブル、またはその両方の定義に同じ名前の<literal>CHECK</>制約が存在した場合、これらの制約はすべて同じ検査式を持たなければなりません。
さもなくば、エラーが報告されます。
同じ名前と式を持つ制約は１つのコピーにまとめられます。
親テーブルで<literal>NO INHERIT</>と印が付いた制約は考慮されません。
新しいテーブル内の無名の<literal>CHECK</>制約は、一意な名前が必ず作られるため、マージされないことに注意してください。
     </para>

     <para>
<!--
      Column <literal>STORAGE</> settings are also copied from parent tables.
-->
列の<literal>STORAGE</>設定もまた親テーブルからコピーされます。
     </para>

    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>LIKE <replaceable>source_table</replaceable> [ <replaceable>like_option</replaceable> ... ]</literal></term>
    <listitem>
     <para>
<!--
      The <literal>LIKE</literal> clause specifies a table from which
      the new table automatically copies all column names, their data types,
      and their not-null constraints.
-->
<literal>LIKE</literal>句にテーブルを指定すると、自動的にそのテーブルの全ての列名、そのデータ型、非NULL制約が新しいテーブルにコピーされます。
     </para>
     <para>
<!--
      Unlike <literal>INHERITS</literal>, the new table and original table
      are completely decoupled after creation is complete.  Changes to the
      original table will not be applied to the new table, and it is not
      possible to include data of the new table in scans of the original
      table.
-->
<literal>INHERITS</literal>とは違い、作成した後、新しいテーブルと元のテーブルが完全に分離されます。
元のテーブルへの変更は新しいテーブルには適用されません。また、元のテーブルを走査しても新しいテーブルのデータは見つかりません。
     </para>
     <para>
<!--
      Default expressions for the copied column definitions will only be
      copied if <literal>INCLUDING DEFAULTS</literal> is specified.
      Defaults that call database-modification functions, like
      <function>nextval</>, create a linkage between the original and
      new tables.  The
      default behavior is to exclude default expressions, resulting in the
      copied columns in the new table having null defaults.
-->
コピーする列のデフォルト式は、<literal>INCLUDING DEFAULTS</literal>が指定された場合にのみコピーされます。
デフォルトが<function>nextval</>のようにデータベースを変更する関数を呼び出す場合は、元のテーブルと新しいテーブルの間にリンクを作成します。
デフォルトでは、デフォルト式がコピーされないため、新しいテーブルのコピーされた列はデフォルト値としてNULLを持つことになります。
     </para>
     <para>
<!--
      Not-null constraints are always copied to the new table.
      <literal>CHECK</literal> constraints will be copied only if
      <literal>INCLUDING CONSTRAINTS</literal> is specified.
      Indexes, <literal>PRIMARY KEY</>, and <literal>UNIQUE</> constraints
      on the original table will be created on the new table only if the
      <literal>INCLUDING INDEXES</literal> clause is specified.
      No distinction is made between column constraints and table
      constraints.
-->
非NULL制約は常に新しいテーブルにコピーされます。
<literal>CHECK</literal>制約は、<literal>INCLUDING CONSTRAINTS</literal>が指定された場合にのみコピーされます。
元のテーブル上のインデックス、<literal>PRIMARY KEY</>、および<literal>UNIQUE</>制約は、<literal>INCLUDING INDEXES</literal>が指定された場合にのみ新しいテーブル上に作成されます。
列制約とテーブル制約は区別されません。
     </para>
<!--
     <para><literal>STORAGE</> settings for the copied column definitions will only
      be copied if <literal>INCLUDING STORAGE</literal> is specified.  The
      default behavior is to exclude <literal>STORAGE</> settings, resulting
      in the copied columns in the new table having type-specific default
      settings.  For more on <literal>STORAGE</> settings, see
      <xref linkend="storage-toast">.
-->
<para>複製された列定義に関する<literal>STORAGE</>設定は、<literal>INCLUDING STORAGE</literal>が指定された場合のみコピーされます。
このデフォルトの動作では、<literal>STORAGE</>設定は除外され、新しいテーブルにおけるコピーされた列は型固有のデフォルトの設定を持つようになります。
<literal>STORAGE</>の詳細については<xref linkend="storage-toast">を参照してください。
     </para>
     <para>
<!--
      Comments for the copied columns, constraints, and indexes
      will only be copied if <literal>INCLUDING COMMENTS</literal>
      is specified. The default behavior is to exclude comments, resulting in
      the copied columns and constraints in the new table having no comments.
-->
コピーされた列、制約、インデックスについてのコメントは<literal>INCLUDING COMMENTS</literal>が指定された場合のみコピーされます。
このデフォルトの動作では、コメントは除外され、新しいテーブルにおけるコピーされた列や制約はコメントを持ちません。
     </para>
<!--
     <para><literal>INCLUDING ALL</literal> is an abbreviated form of
      <literal>INCLUDING DEFAULTS INCLUDING CONSTRAINTS INCLUDING INDEXES INCLUDING STORAGE INCLUDING COMMENTS</literal>.
-->
<para><literal>INCLUDING ALL</literal>は<literal>INCLUDING DEFAULTS INCLUDING CONSTRAINTS INCLUDING INDEXES INCLUDING STORAGE INCLUDING COMMENTS</literal>の省略形です。
     </para>
     <para>
<!--
      Note also that unlike <literal>INHERITS</literal>, columns and
      constraints copied by <literal>LIKE</> are not merged with similarly
      named columns and constraints.
      If the same name is specified explicitly or in another
      <literal>LIKE</literal> clause, an error is signaled.
-->
また、<literal>INHERITS</literal>と異なり、<literal>LIKE</>によりコピーされた列や制約は類似の名前の列や制約にまとめられません。
同じ名前が明示的に、あるいは他の<literal>LIKE</literal>句で指定された場合、エラーが通知されます。
     </para>
     <para>
<!--
      The <literal>LIKE</literal> clause can also be used to copy columns from
      views, foreign tables, or composite types.  Inapplicable options (e.g., <literal>INCLUDING
      INDEXES</literal> from a view) are ignored.
-->
また<literal>LIKE</literal>句をビュー、外部テーブル、複合型から列をコピーするために使用することができます。
不適切なオプション（ビューからの<literal>INCLUDING INDEXES</literal>など）は無視されます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable></literal></term>
    <listitem>
     <para>
<!--
      An optional name for a column or table constraint.  If the
      constraint is violated, the constraint name is present in error messages,
      so constraint names like <literal>col must be positive</> can be used
      to communicate helpful constraint information to client applications.
      (Double-quotes are needed to specify constraint names that contain spaces.)
      If a constraint name is not specified, the system generates a name.
-->
列制約、テーブル制約の名前(省略可能)です。
制約に違反すると、制約名がエラーメッセージに含まれます。
ですので、<literal>col must be positive(正数でなければならない)</>といった名前の制約名を付与することで、クライアントアプリケーションへ有用な制約情報を渡すことができます。
（空白を含む制約名を指定する場合、二重引用符が必要です。）
指定されなければ、システムが名前を生成します。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NOT NULL</></term>
    <listitem>
     <para>
<!--
      The column is not allowed to contain null values.
-->
その列がNULL値を持てないことを指定します。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NULL</></term>
    <listitem>
     <para>
<!--
      The column is allowed to contain null values. This is the default.
-->
その列がNULL値を持てることを指定します。
これがデフォルトです。
     </para>

     <para>
<!--
      This clause is only provided for compatibility with
      non-standard SQL databases.  Its use is discouraged in new
      applications.
-->
この句は非標準的なSQLデータベースとの互換性のためだけに提供されています。
新しいアプリケーションでこれを使用するのはお勧めしません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CHECK ( <replaceable class="PARAMETER">expression</replaceable> ) [ NO INHERIT ] </literal></term>
    <listitem>
     <para>
<!--
      The <literal>CHECK</> clause specifies an expression producing a
      Boolean result which new or updated rows must satisfy for an
      insert or update operation to succeed.  Expressions evaluating
      to TRUE or UNKNOWN succeed.  Should any row of an insert or
      update operation produce a FALSE result an error exception is
      raised and the insert or update does not alter the database.  A
      check constraint specified as a column constraint should
      reference that column's value only, while an expression
      appearing in a table constraint can reference multiple columns.
-->
<literal>CHECK</>句は、論理型の結果を生成する、新しい行または更新される行が挿入または更新処理を成功させるために満足しなければならない式を指定します。
TRUEまたはUNKNOWNと評価される式は成功します。
挿入または更新処理の行がFALSEという結果をもたらす場合はエラー例外が発生し、その挿入または更新によるデータベースの変更は行われません。
列制約として指定された検査制約は列の値のみを参照しなければなりません。
テーブル制約内の式は複数の列を参照できます。
     </para>

     <para>
<!--
      Currently, <literal>CHECK</literal> expressions cannot contain
      subqueries nor refer to variables other than columns of the
      current row.  The system column <literal>tableoid</literal>
      may be referenced, but not any other system column.
-->
現時点では、<literal>CHECK</literal>式には副問い合わせも現在の行の列以外の変数も含めることはできません。
システム列<literal>tableoid</literal>を参照することはできますが、他のシステム列は参照できません。
     </para>

     <para>
<!--
      A constraint marked with <literal>NO INHERIT</> will not propagate to
      child tables.
-->
<literal>NO INHERIT</>と印が付いた制約は子テーブルには伝搬しません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFAULT
    <replaceable>default_expr</replaceable></literal></term>
    <listitem>
     <para>
<!--
      The <literal>DEFAULT</> clause assigns a default data value for
      the column whose column definition it appears within.  The value
      is any variable-free expression (subqueries and cross-references
      to other columns in the current table are not allowed).  The
      data type of the default expression must match the data type of the
      column.
-->
<literal>DEFAULT</>句を列定義に付けると、その列にデフォルトデータ値が割り当てられます。
値として指定するのは、任意の無変数式です（副問い合わせや現在のテーブル内の他の列へ交差参照はできません）。
デフォルト式のデータ型はその列のデータ型と一致する必要があります。
     </para>

     <para>
<!--
      The default expression will be used in any insert operation that
      does not specify a value for the column.  If there is no default
      for a column, then the default is null.
-->
デフォルト式は、全ての挿入操作において、その列に値が指定されていない場合に使用されます。
列にデフォルト値がない場合、デフォルト値はNULLになります。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--
    <term><literal>UNIQUE</> (column constraint)</term>
-->
    <term><literal>UNIQUE</> （列制約）</term>
<!--
    <term><literal>UNIQUE ( <replaceable class="PARAMETER">column_name</replaceable> [, ... ] )</> (table constraint)</term>
-->
    <term><literal>UNIQUE ( <replaceable class="PARAMETER">column_name</replaceable> [, ... ] )</> （表制約）</term>

    <listitem>
     <para>
<!--
      The <literal>UNIQUE</literal> constraint specifies that a
      group of one or more columns of a table can contain
      only unique values. The behavior of the unique table constraint
      is the same as that for column constraints, with the additional
      capability to span multiple columns.
-->
<literal>UNIQUE</literal>制約は、テーブルの1つまたは複数の列からなるグループが、一意な値のみを持つことができることを指定します。
一意性テーブル制約の動作は一意性列制約と同じですが、さらに複数列にまたがる機能を持ちます。
     </para>

     <para>
<!--
      For the purpose of a unique constraint, null values are not
      considered equal.
-->
一意性制約では、NULL値同士は等しいとはみなされなせん。
     </para>

     <para>
<!--
      Each unique table constraint must name a set of columns that is
      different from the set of columns named by any other unique or
      primary key constraint defined for the table.  (Otherwise it
      would just be the same constraint listed twice.)
-->
それぞれの一意性テーブル制約には、そのテーブルの他の一意性制約もしくはプライマリキー制約によって指定された列の集合とは、異なる名前の列の集合を指定しなければなりません
（同じ名前を指定すると、同じ制約が2回現れるだけになります）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--
    <term><literal>PRIMARY KEY</> (column constraint)</term>
-->
    <term><literal>PRIMARY KEY</> （列制約）</term>
<!--
    <term><literal>PRIMARY KEY ( <replaceable class="PARAMETER">column_name</replaceable> [, ... ] )</> (table constraint)</term>
-->
    <term><literal>PRIMARY KEY ( <replaceable class="PARAMETER">column_name</replaceable> [, ... ] )</> （表制約）</term>
    <listitem>
     <para>
<!--
      The primary key constraint specifies that a column or columns of a table
      can contain only unique (non-duplicate), nonnull values.
      Technically, <literal>PRIMARY KEY</literal> is merely a
      combination of <literal>UNIQUE</> and <literal>NOT NULL</>, but
      identifying a set of columns as primary key also provides
      metadata about the design of the schema, as a primary key
      implies that other tables
      can rely on this set of columns as a unique identifier for rows.
-->
プライマリキー制約は、テーブルの1列または複数列が一意な（重複がない）、非NULL値のみを持つことを指定します。
技術的には、<literal>PRIMARY KEY</literal>は単なる<literal>UNIQUE</>と<literal>NOT NULL</>の組み合わせです。
しかし、プライマリキーであることは他のテーブルがその列集合を一意な行識別子とみなせることを意味するので、列集合をプライマリキーと特定すると、スキーマ設計に関するメタデータを提供することになります。
     </para>

     <para>
<!--
      Only one primary key can be specified for a table, whether as a
      column constraint or a table constraint.
-->
列制約であるかテーブル制約であるかにかかわらず、1つのテーブルに指定できるプライマリキーは1つだけです。
     </para>

     <para>
<!--
      The primary key constraint should name a set of columns that is
      different from other sets of columns named by any unique
      constraint defined for the same table.
-->
プライマリキー制約には、そのテーブルに定義された他の一意性制約で指定された列の集合とは違う組み合わせの列の集合を指定しなければなりません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="SQL-CREATETABLE-EXCLUDE">
    <term><literal>EXCLUDE [ USING <replaceable class="parameter">index_method</replaceable> ] ( <replaceable class="parameter">exclude_element</replaceable> WITH <replaceable class="parameter">operator</replaceable> [, ... ] ) <replaceable class="parameter">index_parameters</replaceable> [ WHERE ( <replaceable class="parameter">predicate</replaceable> ) ]</literal></term>
    <listitem>
     <para>
<!--
      The <literal>EXCLUDE</> clause defines an exclusion
      constraint, which guarantees that if
      any two rows are compared on the specified column(s) or
      expression(s) using the specified operator(s), not all of these
      comparisons will return <literal>TRUE</>.  If all of the
      specified operators test for equality, this is equivalent to a
      <literal>UNIQUE</> constraint, although an ordinary unique constraint
      will be faster.  However, exclusion constraints can specify
      constraints that are more general than simple equality.
      For example, you can specify a constraint that
      no two rows in the table contain overlapping circles
      (see <xref linkend="datatype-geometric">) by using the
      <literal>&amp;&amp;</> operator.
-->
<literal>EXCLUDE</>句は除外制約を定義し、任意の2行について指定した列(複数可)または式(複数可)を指定した演算子(複数可)を使用して比較した場合、比較結果のすべてが<literal>TRUE</>を返さないことを保証します。
指定した演算子のすべてが等価性を試験するものであれば、これは<literal>UNIQUE</>制約と同じですが、通常の一意性制約のほうが高速です。
しかし、除外制約では単純な等価性よりも一般的な制約を指定することができます。
例えば、テーブル内の2つの行が重複する円(<xref linkend="datatype-geometric">参照)を持たないといった制約を<literal>&amp;&amp;</>演算子を使用して指定することができます。
     </para>

     <para>
<!--
      Exclusion constraints are implemented using
      an index, so each specified operator must be associated with an
      appropriate operator class
      (see <xref linkend="indexes-opclass">) for the index access
      method <replaceable>index_method</>.
      The operators are required to be commutative.
      Each <replaceable class="parameter">exclude_element</replaceable>
      can optionally specify an operator class and/or ordering options;
      these are described fully under
      <xref linkend="sql-createindex">.
-->
除外制約はインデックスを使用して実装されています。
このため指定した演算子はそれぞれ適切な演算子クラス(<xref linkend="indexes-opclass">参照)で<replaceable>index_method</>インデックスアクセスメソッドと関連付けされていなければなりません。
演算子は交換可能でなければなりません。
オプションで、各<replaceable class="parameter">exclude_element</replaceable>は演算子クラス、順序付けオプション、またはその両方を指定することができます。
これらについては<xref linkend="sql-createindex">で説明します。
     </para>

     <para>
<!--
      The access method must support <literal>amgettuple</> (see <xref
      linkend="indexam">); at present this means <acronym>GIN</>
      cannot be used.  Although it's allowed, there is little point in using
      B-tree or hash indexes with an exclusion constraint, because this
      does nothing that an ordinary unique constraint doesn't do better.
      So in practice the access method will always be <acronym>GiST</> or
      <acronym>SP-GiST</>.
-->
アクセスメソッドは<literal>amgettuple</>をサポートしなければなりません(<xref linkend="indexam">参照)。
現時点では、これは<acronym>GIN</>を使用できないことを意味します。
B-treeやHashインデックスを除外制約で使用することは許容されますが、そうすることにあまり意味はありません。
これが通常の一意性制約より良いことは何もないからです。
このため現実的にはアクセスメソッドは常に<acronym>GiST</>もしくは<acronym>SP-GiST</>となります。
     </para>

     <para>
<!--
      The <replaceable class="parameter">predicate</> allows you to specify an
      exclusion constraint on a subset of the table; internally this creates a
      partial index. Note that parentheses are required around the predicate.
-->
<replaceable class="parameter">predicate</>により、除外制約をテーブルの部分集合に指定することができます。
内部的には、これは部分インデックスを作成します。
predicateの前後に括弧が必要であることに注意して下さい。
     </para>
    </listitem>
   </varlistentry>


   <varlistentry>
<!--
    <term><literal>REFERENCES <replaceable class="parameter">reftable</replaceable> [ ( <replaceable class="parameter">refcolumn</replaceable> ) ] [ MATCH <replaceable class="parameter">matchtype</replaceable> ] [ ON DELETE <replaceable class="parameter">action</replaceable> ] [ ON UPDATE <replaceable class="parameter">action</replaceable> ]</literal> (column constraint)</term>
-->
    <term><literal>REFERENCES <replaceable class="parameter">reftable</replaceable> [ ( <replaceable class="parameter">refcolumn</replaceable> ) ] [ MATCH <replaceable class="parameter">matchtype</replaceable> ] [ ON DELETE <replaceable class="parameter">action</replaceable> ] [ ON UPDATE <replaceable class="parameter">action</replaceable> ]</literal> （列制約）</term>

   <term><literal>FOREIGN KEY ( <replaceable class="parameter">column_name</replaceable> [, ... ] )
    REFERENCES <replaceable class="parameter">reftable</replaceable> [ ( <replaceable class="parameter">refcolumn</replaceable> [, ... ] ) ]
    [ MATCH <replaceable class="parameter">matchtype</replaceable> ]
    [ ON DELETE <replaceable class="parameter">action</replaceable> ]
    [ ON UPDATE <replaceable class="parameter">action</replaceable> ]</literal>
<!--
    (table constraint)</term>
-->
    （表制約）</term>

    <listitem>
     <para>
<!--
      These clauses specify a foreign key constraint, which requires
      that a group of one or more columns of the new table must only
      contain values that match values in the referenced
      column(s) of some row of the referenced table.  If the <replaceable
      class="parameter">refcolumn</replaceable> list is omitted, the
      primary key of the <replaceable class="parameter">reftable</replaceable>
      is used.  The referenced columns must be the columns of a non-deferrable
      unique or primary key constraint in the referenced table.  Note that
      foreign key constraints cannot be defined between temporary tables and
      permanent tables.
-->
これらの句は、外部キー制約を指定します。
外部キー制約は、新しいテーブルの1つまたは複数の列の集合が、被参照テーブルの一部の行の被参照列に一致する値を持たなければならないことを指定するものです。
<replaceable class="parameter">refcolumn</replaceable>リストが省略された場合、<replaceable class="parameter">reftable</replaceable>のプライマリキーが使用されます。
被参照列は、被参照テーブルにおいて遅延不可の一意性制約もしくはプライマリキー制約を持った列でなければなりません。
一時テーブルと永続テーブルとの間で外部キー制約を定義できないことに注意してください。
     </para>

     <para>
<!--
      A value inserted into the referencing column(s) is matched against the
      values of the referenced table and referenced columns using the
      given match type.  There are three match types: <literal>MATCH
      FULL</>, <literal>MATCH PARTIAL</>, and <literal>MATCH
      SIMPLE</literal> (which is the default).  <literal>MATCH
      FULL</> will not allow one column of a multicolumn foreign key
      to be null unless all foreign key columns are null; if they are all
      null, the row is not required to have a match in the referenced table.
      <literal>MATCH SIMPLE</literal> allows any of the foreign key columns
      to be null; if any of them are null, the row is not required to have a
      match in the referenced table.
      <literal>MATCH PARTIAL</> is not yet implemented.
      (Of course, <literal>NOT NULL</> constraints can be applied to the
      referencing column(s) to prevent these cases from arising.)
-->
参照列に挿入された値は、被参照テーブルと被参照列の値に対して、指定した照合型で照会されます。
照合型には3種類があります。
<literal>MATCH FULL</>、<literal>MATCH PARTIAL</>、<literal>MATCH SIMPLE</literal>（これがデフォルト）照合型です。
<literal>MATCH FULL</>は全ての外部キー列がNULLとなる場合を除き、複数列外部キーのある列がNULLとなることを許可しません。
それらがすべてNULLであれば、その行は被参照テーブル内で一致があることは要求されません。
<literal>MATCH SIMPLE</literal>は、外部キーの一部がNULLであることを許可します。
それらの一部がNULLであれば、その行は被参照テーブル内で一致があることは要求されません。
<literal>MATCH PARTIAL</>はまだ実装されていません。
（当然ですが、<literal>NOT NULL</>制約を参照列に適用し、こうした状態が発生することを防止することができます。）
     </para>

     <para>
<!--
      In addition, when the data in the referenced columns is changed,
      certain actions are performed on the data in this table's
      columns.  The <literal>ON DELETE</literal> clause specifies the
      action to perform when a referenced row in the referenced table is
      being deleted.  Likewise, the <literal>ON UPDATE</literal>
      clause specifies the action to perform when a referenced column
      in the referenced table is being updated to a new value. If the
      row is updated, but the referenced column is not actually
      changed, no action is done. Referential actions other than the
      <literal>NO ACTION</literal> check cannot be deferred, even if
      the constraint is declared deferrable. There are the following possible
      actions for each clause:
-->
さらに、被参照列のデータが変更された場合、このテーブルの列のデータに何らかの動作が発生します。
<literal>ON DELETE</literal>句は、被参照テーブルの被参照行が削除されようとした場合の動作を指定します。
同様に<literal>ON UPDATE</literal>句は、被参照テーブルの被参照列が新しい値に更新されようとした場合の動作を指定します。
行の更新があった場合でも、被参照列が実際に変更されない場合は、動作は実行されません。
制約が遅延可能と宣言されていても、<literal>NO ACTION</literal>検査以外の参照動作は遅延させられません。
各句について、以下の動作を指定可能です。

      <variablelist>
       <varlistentry>
        <term><literal>NO ACTION</literal></term>
        <listitem>
         <para>
<!--
          Produce an error indicating that the deletion or update
          would create a foreign key constraint violation.
          If the constraint is deferred, this
          error will be produced at constraint check time if there still
          exist any referencing rows.  This is the default action.
-->
削除もしくは更新により外部キー制約違反が起こることを示すエラーを発生します。
制約が遅延可能な場合、何らかの参照行が存在する限り、このエラーは制約の検査時点で発生します。
これはデフォルトの動作です。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>RESTRICT</literal></term>
        <listitem>
         <para>
<!--
          Produce an error indicating that the deletion or update
          would create a foreign key constraint violation.
          This is the same as <literal>NO ACTION</literal> except that
          the check is not deferrable.
-->
削除もしくは更新が外部キー制約違反となることを示すエラーを発生します。
検査が遅延できない点を除き、<literal>NO ACTION</literal>と同じです。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>CASCADE</literal></term>
        <listitem>
         <para>
<!--
          Delete any rows referencing the deleted row, or update the
          values of the referencing column(s) to the new values of the
          referenced columns, respectively.
-->
削除された行を参照している行は全て削除します。また、参照している列の値を、被参照列の新しい値にします。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>SET NULL</literal></term>
        <listitem>
         <para>
<!--
          Set the referencing column(s) to null.
-->
参照する列をNULLに設定します。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>SET DEFAULT</literal></term>
        <listitem>
         <para>
<!--
          Set the referencing column(s) to their default values.
          (There must be a row in the referenced table matching the default
          values, if they are not null, or the operation will fail.)
-->
参照する列をそのデフォルト値に設定します。
（デフォルト値がNULLでない場合は被参照テーブルの中にデフォルト値に一致する行が存在しなければなりません。さもないと操作が失敗します。）
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </para>

     <para>
<!--
      If the referenced column(s) are changed frequently, it might be wise to
      add an index to the referencing column(s) so that referential actions
      associated with the foreign key constraint can be performed more
      efficiently.
-->
被参照列が頻繁に更新される場合、参照列にインデックスを付け、その外部キー制約に関連する参照動作がより効率的に実行できるようにする方が良いでしょう。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFERRABLE</literal></term>
    <term><literal>NOT DEFERRABLE</literal></term>
    <listitem>
     <para>
<!--
      This controls whether the constraint can be deferred.  A
      constraint that is not deferrable will be checked immediately
      after every command.  Checking of constraints that are
      deferrable can be postponed until the end of the transaction
      (using the <xref linkend="sql-set-constraints"> command).
      <literal>NOT DEFERRABLE</literal> is the default.
      Currently, only <literal>UNIQUE</>, <literal>PRIMARY KEY</>,
      <literal>EXCLUDE</>, and
      <literal>REFERENCES</> (foreign key) constraints accept this
      clause.  <literal>NOT NULL</> and <literal>CHECK</> constraints are not
      deferrable.
-->
制約を遅延させることが可能かどうかを制御します。
遅延不可の制約は各コマンドの後すぐに検査されます。
遅延可能な制約の検査は、（<xref linkend="sql-set-constraints">コマンドを使用して）トランザクションの終了時まで遅延させることができます。
<literal>NOT DEFERRABLE</literal>がデフォルトです。
現在、<literal>UNIQUE</>、<literal>PRIMARY KEY</>、<literal>EXCLUDE</>、<literal>REFERENCES</>（外部キー）制約のみがこの句を受け付けることができます。
<literal>NOT NULL</>および <literal>CHECK</>制約は遅延させることができません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>INITIALLY IMMEDIATE</literal></term>
    <term><literal>INITIALLY DEFERRED</literal></term>
    <listitem>
     <para>
<!--
      If a constraint is deferrable, this clause specifies the default
      time to check the constraint.  If the constraint is
      <literal>INITIALLY IMMEDIATE</literal>, it is checked after each
      statement. This is the default.  If the constraint is
      <literal>INITIALLY DEFERRED</literal>, it is checked only at the
      end of the transaction.  The constraint check time can be
      altered with the <xref linkend="sql-set-constraints"> command.
-->
制約が遅延可能な場合、この句は制約検査を行うデフォルトの時期を指定します。
制約が<literal>INITIALLY IMMEDIATE</literal>の場合、各文の実行後に検査されます。
これがデフォルトです。
制約が<literal>INITIALLY DEFERRED</literal>の場合、トランザクションの終了時にのみ検査されます。
制約検査の時期は<xref linkend="sql-set-constraints">コマンドを使用して変更することができます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH ( <replaceable class="PARAMETER">storage_parameter</replaceable> [= <replaceable class="PARAMETER">value</replaceable>] [, ... ] )</literal></term>
    <listitem>
     <para>
<!--
      This clause specifies optional storage parameters for a table or index;
      see <xref linkend="sql-createtable-storage-parameters"
      endterm="sql-createtable-storage-parameters-title"> for more
      information.  The <literal>WITH</> clause for a
      table can also include <literal>OIDS=TRUE</> (or just <literal>OIDS</>)
      to specify that rows of the new table
      should have OIDs (object identifiers) assigned to them, or
      <literal>OIDS=FALSE</> to specify that the rows should not have OIDs.
      If <literal>OIDS</> is not specified, the default setting depends upon
      the <xref linkend="guc-default-with-oids"> configuration parameter.
      (If the new table inherits from any tables that have OIDs, then
      <literal>OIDS=TRUE</> is forced even if the command says
      <literal>OIDS=FALSE</>.)
-->
この句は、テーブルまたはインデックスに対して格納パラメータ(省略可能)を指定します。
詳細は<xref linkend="sql-createtable-storage-parameters" endterm="sql-createtable-storage-parameters-title">を参照してください。
テーブルについての<literal>WITH</>には、<literal>OIDS=TRUE</>（もしくは単に<literal>OIDS</>）を含めて、新しいテーブルの行が行に割り当てられたOID（オブジェクト識別子）を持たなければならないことを指定することもできます。
また、<literal>OIDS=FALSE</>を含めて、OIDを持たないことを指定することもできます。
<literal>OIDS</>が指定されない場合、デフォルトの設定は設定パラメータ<xref linkend="guc-default-with-oids">に依存します。
（新しいテーブルがOIDを持つテーブルから継承する場合、コマンドで<literal>OIDS=FALSE</>と指定しても強制的に<literal>OIDS=TRUE</> となります。）
     </para>

     <para>
<!--
      If <literal>OIDS=FALSE</literal> is specified or implied, the new
      table does not store OIDs and no OID will be assigned for a row inserted
      into it. This is generally considered worthwhile, since it
      will reduce OID consumption and thereby postpone the wraparound
      of the 32-bit OID counter. Once the counter wraps around, OIDs
      can no longer be assumed to be unique, which makes them
      considerably less useful. In addition, excluding OIDs from a
      table reduces the space required to store the table on disk by
      4 bytes per row (on most machines), slightly improving performance.
-->
<literal>OIDS=FALSE</>が明示的または暗黙的に指定されている場合、新しいテーブルはOIDを格納しません。また、挿入される行にはOIDが割り当てられません。
このような動作は一般的に有益であると考えられます。それは、OIDの使用を抑え、32ビットのOIDカウンタの回転周期を延長できるためです。
カウンタが一周するとOIDの一意性を保証できなくなるので、その有用性を減少させることになります。
また、OIDをなくすことで、テーブル1行当たり（ほとんどのマシンで）4バイト分、テーブルをディスクに格納するための容量を軽減するので、多少性能が向上します。

     </para>

     <para>
<!--
      To remove OIDs from a table after it has been created, use <xref
      linkend="sql-altertable">.
-->
テーブルの作成後にOIDを削除するには、<xref linkend="sql-altertable">を使用してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH OIDS</></term>
    <term><literal>WITHOUT OIDS</></term>
    <listitem>
     <para>
<!--
      These are obsolescent syntaxes equivalent to <literal>WITH (OIDS)</>
      and <literal>WITH (OIDS=FALSE)</>, respectively.  If you wish to give
      both an <literal>OIDS</> setting and storage parameters, you must use
      the <literal>WITH ( ... )</> syntax; see above.
-->
これは古い構文で、それぞれ<literal>WITH (OIDS)</>および<literal>WITH (OIDS=FALSE)</>と同じです。
<literal>OIDS</>の設定と格納パラメータの設定の両方を指定したい場合は、上述の<literal>WITH ( ... )</>を使用しなければなりません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ON COMMIT</literal></term>
    <listitem>
     <para>
<!--
      The behavior of temporary tables at the end of a transaction
      block can be controlled using <literal>ON COMMIT</literal>.
      The three options are:
-->
<literal>ON COMMIT</literal>を使用して、トランザクションブロックの終了時点での一時テーブルの動作を制御することができます。
以下の3つのオプションがあります。

      <variablelist>
       <varlistentry>
        <term><literal>PRESERVE ROWS</literal></term>
        <listitem>
         <para>
<!--
          No special action is taken at the ends of transactions.
          This is the default behavior.
-->
トランザクションの終了時点で、特別な動作は行われません。
これがデフォルトの動作です。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>DELETE ROWS</literal></term>
        <listitem>
         <para>
<!--
          All rows in the temporary table will be deleted at the end
          of each transaction block.  Essentially, an automatic <xref
          linkend="sql-truncate"> is done
          at each commit.
-->
一時テーブル内の全ての行は、各トランザクションブロックの終わりで削除されます。
実質的には、コミットの度に自動的に<xref linkend="sql-truncate">が実行されます。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>DROP</literal></term>
        <listitem>
         <para>
<!--
          The temporary table will be dropped at the end of the current
          transaction block.
-->
一時テーブルは、現在のトランザクションブロックの終了時点で削除されます。
         </para>
        </listitem>
       </varlistentry>
      </variablelist></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>TABLESPACE <replaceable class="PARAMETER">tablespace_name</replaceable></literal></term>
    <listitem>
     <para>
<!--
      The <replaceable class="PARAMETER">tablespace_name</replaceable> is the name
      of the tablespace in which the new table is to be created.
      If not specified,
      <xref linkend="guc-default-tablespace"> is consulted, or
      <xref linkend="guc-temp-tablespaces"> if the table is temporary.
-->
<replaceable class="PARAMETER">tablespace_name</replaceable>は、新しいテーブルが作成されるテーブル空間名です。
指定されていない場合、<xref linkend="guc-default-tablespace">が、また一時テーブルの場合は<xref linkend="guc-temp-tablespaces">が考慮されます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>USING INDEX TABLESPACE <replaceable class="PARAMETER">tablespace_name</replaceable></literal></term>
    <listitem>
     <para>
<!--
      This clause allows selection of the tablespace in which the index
      associated with a <literal>UNIQUE</literal>, <literal>PRIMARY
      KEY</literal>, or <literal>EXCLUDE</> constraint will be created.
      If not specified,
      <xref linkend="guc-default-tablespace"> is consulted, or
      <xref linkend="guc-temp-tablespaces"> if the table is temporary.
-->
この句により、<literal>UNIQUE</literal>、<literal>PRIMARY KEY</literal>、または<literal>EXCLUDE</>制約に関連したインデックスを作成するテーブル空間を選択することができます。
指定されていない場合、<xref linkend="guc-default-tablespace">が、また一時テーブルであれば<xref linkend="guc-temp-tablespaces">が考慮されます。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

  <refsect2 id="SQL-CREATETABLE-storage-parameters">
<!--
   <title id="SQL-CREATETABLE-storage-parameters-title">Storage Parameters</title>
-->
   <title id="SQL-CREATETABLE-storage-parameters-title">格納パラメータ</title>

 <indexterm zone="sql-createtable-storage-parameters">
<!--
  <primary>storage parameters</primary>
-->
  <primary>格納パラメータ</primary>
 </indexterm>

   <para>
<!--
    The <literal>WITH</> clause can specify <firstterm>storage parameters</>
    for tables, and for indexes associated with a <literal>UNIQUE</literal>,
    <literal>PRIMARY KEY</literal>, or <literal>EXCLUDE</> constraint.
    Storage parameters for
    indexes are documented in <xref linkend="SQL-CREATEINDEX">.
    The storage parameters currently
    available for tables are listed below.  For each parameter, unless noted,
    there is an additional parameter with the same name prefixed with
    <literal>toast.</literal>, which can be used to control the behavior of the
    table's secondary <acronym>TOAST</> table, if any
    (see <xref linkend="storage-toast"> for more information about TOAST).
    Note that the TOAST table inherits the
    <literal>autovacuum_*</literal> values from its parent table, if there are
    no <literal>toast.autovacuum_*</literal> settings set.
-->
<literal>WITH</>句により、テーブルおよび<literal>UNIQUE</literal>、<literal>PRIMARY KEY</literal>、または<literal>EXCLUDE</>制約と関連づいたインデックスの<firstterm>格納パラメータ</>を指定することができます。
インデックスの格納パラメータについては<xref linkend="SQL-CREATEINDEX">で説明します。
現在テーブルで設定可能な格納パラメータの一覧を以下に示します。
各パラメータに対して、注記がない限り、さらに<literal>toast</literal>という接頭辞のついた、同一の名前のパラメータがあります。
これはもしあれば、テーブルの補助<acronym>TOAST</>テーブルの動作を制御するために使用することができます。
(TOASTに関する詳細については<xref linkend="storage-toast">を参照してください。)
TOASTテーブルは、<literal>toast.autovacuum_*</literal>の設定群の設定がない場合に親テーブルの<literal>autovacuum</literal>値を継承することに注意してください。
   </para>

   <variablelist>

   <varlistentry>
    <term><literal>fillfactor</> (<type>integer</>)</term>
    <listitem>
     <para>
<!--
      The fillfactor for a table is a percentage between 10 and 100.
      100 (complete packing) is the default.  When a smaller fillfactor
      is specified, <command>INSERT</> operations pack table pages only
      to the indicated percentage; the remaining space on each page is
      reserved for updating rows on that page.  This gives <command>UPDATE</>
      a chance to place the updated copy of a row on the same page as the
      original, which is more efficient than placing it on a different page.
      For a table whose entries are never updated, complete packing is the
      best choice, but in heavily updated tables smaller fillfactors are
      appropriate.  This parameter cannot be set for TOAST tables.
-->
テーブルのフィルファクタ(fillfactor)は10から100までの間の割合（パーセント）です。
100（すべて使用）がデフォルトです。
より小さな値を指定すると、<command>INSERT</>操作は指定した割合までしかテーブルページを使用しません。
各ページの残りの部分は、そのページ内の行の更新用に予約されます。
これにより<command>UPDATE</>は、元の行と同じページ上に更新済みの行を格納することができるようになります。
これは別のページに更新済みの行を格納することよりも効率的です。
項目の更新がまったくないテーブルでは、すべてを使用することが最善の選択ですが、更新が非常に多いテーブルではより小さめのフィルファクタが適切です。
TOASTテーブルではこのパラメータを設定できません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>autovacuum_enabled</>, <literal>toast.autovacuum_enabled</literal> (<type>boolean</>)</term>
    <listitem>
     <para>
<!--
     Enables or disables the autovacuum daemon on a particular table.
     If true, the autovacuum daemon will initiate a <command>VACUUM</> operation
     on a particular table when the number of updated or deleted tuples exceeds
     <literal>autovacuum_vacuum_threshold</> plus
     <literal>autovacuum_vacuum_scale_factor</> times the number of live tuples
     currently estimated to be in the relation.
     Similarly, it will initiate an <command>ANALYZE</> operation when the
     number of inserted, updated or deleted tuples exceeds
     <literal>autovacuum_analyze_threshold</> plus
     <literal>autovacuum_analyze_scale_factor</> times the number of live tuples
     currently estimated to be in the relation.
     If false, this table will not be autovacuumed, except to prevent
     transaction Id wraparound. See <xref linkend="vacuum-for-wraparound"> for
     more about wraparound prevention.
     Observe that this variable inherits its value from the <xref
     linkend="guc-autovacuum"> setting.
-->
特定のテーブルに対する自動バキュームデーモンを有効または無効にします。
trueの場合、自動バキュームデーモンは、更新または削除されたタプル数が<literal>autovacuum_vacuum_threshold</>＋<literal>autovacuum_vacuum_scale_factor</>×リレーション内の推定有効タプル数を超えたときに、特定のテーブルに対する<command>VACUUM</>操作を始めます。
同様に、挿入、更新、削除されたタプル数が<literal>autovacuum_analyze_threshold</>＋<literal>autovacuum_analyze_scale_factor</>×リレーション内の推定有効タプル数を超えたときに、<command>ANALYZE</>操作を始めます。
falseの場合、トランザクション周回問題を回避するためを除き自動バキュームは行われません。
周回問題の回避については<xref linkend="vacuum-for-wraparound">を参照してください。
この変数が<xref linkend="guc-autovacuum">からの値を継承していることに気付いてください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>autovacuum_vacuum_threshold</>, <literal>toast.autovacuum_vacuum_threshold</literal> (<type>integer</>)</term>
    <listitem>
     <para>
<!--
     Minimum number of updated or deleted tuples before initiate a
     <command>VACUUM</> operation on a particular table.
-->
特定のテーブルに対して<command>VACUUM</>操作を始める前の、更新または削除されたタプルの最小数です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>autovacuum_vacuum_scale_factor</>, <literal>toast.autovacuum_vacuum_scale_factor</literal> (<type>float4</>)</term>
    <listitem>
     <para>
<!--
     Multiplier for <structfield>reltuples</> to add to
     <literal>autovacuum_vacuum_threshold</>.
-->
<literal>autovacuum_vacuum_threshold</>に加算する<structfield>reltuples</>用の乗数です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>autovacuum_analyze_threshold</> (<type>integer</>)</term>
    <listitem>
     <para>
<!--
     Minimum number of inserted, updated, or deleted tuples before initiate an
     <command>ANALYZE</> operation on a particular table.
-->
特定のテーブルに対して<command>ANALYZE</>操作を始める前の、挿入、更新または削除されたタプルの最小数です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>autovacuum_analyze_scale_factor</> (<type>float4</>)</term>
    <listitem>
     <para>
<!--
     Multiplier for <structfield>reltuples</> to add to
     <literal>autovacuum_analyze_threshold</>.
-->
<literal>autovacuum_analyze_threshold</>に加算する<structfield>reltuples</>用の乗数です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>autovacuum_vacuum_cost_delay</>, <literal>toast.autovacuum_vacuum_cost_delay</literal> (<type>integer</>)</term>
    <listitem>
     <para>
<!--
     Custom <xref linkend="guc-autovacuum-vacuum-cost-delay"> parameter.
-->
     <xref linkend="guc-autovacuum-vacuum-cost-delay">のカスタムパラメータです。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>autovacuum_vacuum_cost_limit</>, <literal>toast.autovacuum_vacuum_cost_limit</literal> (<type>integer</>)</term>
    <listitem>
     <para>
<!--
     Custom <xref linkend="guc-autovacuum-vacuum-cost-limit"> parameter.
-->
     <xref linkend="guc-autovacuum-vacuum-cost-limit">のカスタムパラメータです。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>autovacuum_freeze_min_age</>, <literal>toast.autovacuum_freeze_min_age</literal> (<type>integer</>)</term>
    <listitem>
     <para>
<!--
     Custom <xref linkend="guc-vacuum-freeze-min-age"> parameter. Note that
     autovacuum will ignore attempts to set a per-table
     <literal>autovacuum_freeze_min_age</> larger than half the system-wide
     <xref linkend="guc-autovacuum-freeze-max-age"> setting.
-->
<xref linkend="guc-vacuum-freeze-min-age">のカスタムパラメータです。
テーブル単位の<literal>autovacuum_freeze_min_age</>をシステム全体の<xref linkend="guc-autovacuum-freeze-max-age">設定の1/2より大きく設定しようとしても、自動バキュームが無視することに注意してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>autovacuum_freeze_max_age</>, <literal>toast.autovacuum_freeze_max_age</literal> (<type>integer</>)</term>
    <listitem>
     <para>
<!--
     Custom <xref linkend="guc-autovacuum-freeze-max-age"> parameter. Note that
     autovacuum will ignore attempts to set a per-table
     <literal>autovacuum_freeze_max_age</> larger than the system-wide setting
     (it can only be set smaller). Note that while you can set
     <literal>autovacuum_freeze_max_age</> very small, or even zero, this is
     usually unwise since it will force frequent vacuuming.
-->
<xref linkend="guc-autovacuum-freeze-max-age">のカスタムパラメータです。
テーブル単位の<literal>autovacuum_freeze_max_age</>をシステム全体に対する設定より大きく設定しようとしても、自動バキュームが無視することに注意してください。
（より小さな値しか設定できません。）
<literal>autovacuum_freeze_max_age</>を非常に小さく設定する、あるいはゼロに設定することも可能ですが、そうすると頻繁なバキューム処理が強制されるため通常は賢明ではありません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>autovacuum_freeze_table_age</literal>, <literal>toast.autovacuum_freeze_table_age</literal> (<type>integer</type>)</term>
    <listitem>
     <para>
<!--
      Custom <xref linkend="guc-vacuum-freeze-table-age"> parameter.
-->
<xref linkend="guc-vacuum-freeze-table-age">のカスタムパラメータです。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>autovacuum_multixact_freeze_min_age</literal>, <literal>toast.autovacuum_multixact_freeze_min_age</literal> (<type>integer</type>)</term>
    <listitem>
     <para>
<!--
      Custom <xref linkend="guc-vacuum-multixact-freeze-min-age"> parameter.
      Note that autovacuum will ignore attempts to set a per-table
      <literal>autovacuum_multixact_freeze_min_age</> larger than half the
      system-wide <xref linkend="guc-autovacuum-multixact-freeze-max-age">
      setting.
-->
<xref linkend="guc-vacuum-multixact-freeze-min-age">のカスタムパラメータです。
テーブル単位の<literal>autovacuum_multixact_freeze_min_age</>をシステム全体の<xref linkend="guc-autovacuum-multixact-freeze-max-age">の半分より大きく設定しようとしても、自動バキュームが無視することに注意してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>autovacuum_multixact_freeze_max_age</literal>, <literal>toast.autovacuum_multixact_freeze_max_age</literal> (<type>integer</type>)</term>
    <listitem>
     <para>
<!--
      Custom <xref linkend="guc-autovacuum-multixact-freeze-max-age"> parameter. Note
      that autovacuum will ignore attempts to set a per-table
      <literal>autovacuum_multixact_freeze_max_age</> larger than the
      system-wide setting (it can only be set smaller).  Note that while you
      can set <literal>autovacuum_multixact_freeze_max_age</> very small,
      or even zero, this is usually unwise since it will force frequent
      vacuuming.
-->
<xref linkend="guc-autovacuum-multixact-freeze-max-age">のカスタムパラメータです。
テーブル単位の<literal>autovacuum_multixact_freeze_max_age</>をシステム全体に対する設定より大きくしようとしても、自動バキュームが無視することに注意してください。
(より小さな値しか設定できません。)
<literal>autovacuum_multixact_freeze_max_age</>を非常に小さな値、あるいはゼロに設定することも可能ですが、これは頻繁にバキュームを強制することになるため、通常は賢明でないことにも注意してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>autovacuum_multixact_freeze_table_age</literal>, <literal>toast.autovacuum_multixact_freeze_table_age</literal> (<type>integer</type>)</term>
    <listitem>
     <para>
<!--
      Custom <xref linkend="guc-vacuum-multixact-freeze-table-age"> parameter.
-->
<xref linkend="guc-vacuum-multixact-freeze-table-age">のカスタムパラメータです。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>user_catalog_table</literal> (<type>boolean</type>)</term>
    <listitem>
     <para>
<!--
      Declare a table as an additional catalog table, e.g. for the purpose of
      logical replication. See
      <xref linkend="logicaldecoding-capabilities"> for details.
-->
テーブルを(例えば、論理レプリケーションのための)追加のカタログテーブルとして宣言します。
詳しくは<xref linkend="logicaldecoding-capabilities">を参照してください。
     </para>
    </listitem>
   </varlistentry>

   </variablelist>

  </refsect2>
 </refsect1>

 <refsect1 id="SQL-CREATETABLE-notes">
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

    <para>
<!--
     Using OIDs in new applications is not recommended: where
     possible, using a <literal>SERIAL</literal> or other sequence
     generator as the table's primary key is preferred. However, if
     your application does make use of OIDs to identify specific
     rows of a table, it is recommended to create a unique constraint
     on the <structfield>oid</> column of that table, to ensure that
     OIDs in the table will indeed uniquely identify rows even after
     counter wraparound.  Avoid assuming that OIDs are unique across
     tables; if you need a database-wide unique identifier, use the
     combination of <structfield>tableoid</> and row OID for the
     purpose.
-->
新規のアプリケーションでOIDを使用するのはお勧めしません。
可能であれば、テーブルのプライマリキーとして<literal>SERIAL</literal>や他のシーケンスジェネレータを使用する方が望ましいです。
しかし、アプリケーションがテーブルの特定の行を識別するためにOIDを使用する場合は、そのテーブルの<structfield>oid</>列に一意性制約を作成することを推奨します。 
これにより、カウンタが一周してしまった場合でも、テーブル内のOIDで一意に行を識別できることが保証されるからです。
OIDがテーブルをまたがって一意であると考えるのは止めてください。 
データベース全体で一意な識別子が必要な場合は、<structfield>tableoid</>と行のOIDの組み合わせを使用してください。  
    </para>

    <tip>
     <para>
<!--
      The use of <literal>OIDS=FALSE</literal> is not recommended
      for tables with no primary key, since without either an OID or a
      unique data key, it is difficult to identify specific rows.
-->
<literal>OIDS=FALSE</literal>の使用は、プライマリキーのないテーブルでは推奨されません。 
OIDも一意なデータキーも存在しないと、特定行を識別することが難しくなるからです。
     </para>
    </tip>

    <para>
<!--
     <productname>PostgreSQL</productname> automatically creates an
     index for each unique constraint and primary key constraint to
     enforce uniqueness.  Thus, it is not necessary to create an
     index explicitly for primary key columns.  (See <xref
     linkend="sql-createindex"> for more information.)
-->
<productname>PostgreSQL</productname>は自動的に各一意性制約とプライマリキー制約に対してインデックスを作成し、その一意性を確実なものにします。
したがって、プライマリキーの列に明示的にインデックスを作成することは必要ありません
（詳細については<xref linkend="sql-createindex">を参照してください）。
    </para>

    <para>
<!--
     Unique constraints and primary keys are not inherited in the
     current implementation.  This makes the combination of
     inheritance and unique constraints rather dysfunctional.
-->
現在の実装では、一意性制約とプライマリキーは継承されません。
これは、継承と一意性制約を組み合わせると障害が発生するからです。
    </para>

    <para>
<!--
     A table cannot have more than 1600 columns.  (In practice, the
     effective limit is usually lower because of tuple-length constraints.)
-->
テーブルは1600列以上の列を持つことはできません
（タプル長の制限により実際の制限はもっと小さくなります）。
    </para>

 </refsect1>


 <refsect1 id="SQL-CREATETABLE-examples">
<!--
  <title>Examples</title>
-->
<title>例</title>

  <para>
<!--
   Create table <structname>films</> and table
   <structname>distributors</>:
-->
<structname>films</>テーブルと<structname>distributors</>テーブルを作成します。

<programlisting>
CREATE TABLE films (
    code        char(5) CONSTRAINT firstkey PRIMARY KEY,
    title       varchar(40) NOT NULL,
    did         integer NOT NULL,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute
);

CREATE TABLE distributors (
     did    integer PRIMARY KEY DEFAULT nextval('serial'),
     name   varchar(40) NOT NULL CHECK (name &lt;&gt; '')
);
</programlisting>
  </para>

  <para>
<!--
   Create a table with a 2-dimensional array:
-->
2次元配列を持つテーブルを作成します。

<programlisting>
CREATE TABLE array_int (
    vector  int[][]
);
</programlisting>
  </para>

  <para>
<!--
   Define a unique table constraint for the table
   <literal>films</literal>.  Unique table constraints can be defined
   on one or more columns of the table:
-->
<literal>films</literal>テーブルに 一意性テーブル制約を定義します。
一意性テーブル制約はテーブルの1つ以上の列に定義することができます。

<programlisting>
CREATE TABLE films (
    code        char(5),
    title       varchar(40),
    did         integer,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute,
    CONSTRAINT production UNIQUE(date_prod)
);
</programlisting>
  </para>

  <para>
<!--
   Define a check column constraint:
-->
検査列制約を定義します。

<programlisting>
CREATE TABLE distributors (
    did     integer CHECK (did &gt; 100),
    name    varchar(40)
);
</programlisting>
  </para>

  <para>
<!--
   Define a check table constraint:
-->
検査テーブル制約を定義します。

<programlisting>
CREATE TABLE distributors (
    did     integer,
    name    varchar(40)
    CONSTRAINT con1 CHECK (did &gt; 100 AND name &lt;&gt; '')
);
</programlisting>
  </para>

  <para>
<!--
   Define a primary key table constraint for the table
   <structname>films</>:
-->
<structname>films</>テーブルにプライマリキーテーブル制約を定義します。

<programlisting>
CREATE TABLE films (
    code        char(5),
    title       varchar(40),
    did         integer,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute,
    CONSTRAINT code_title PRIMARY KEY(code,title)
);
</programlisting>
  </para>

  <para>
<!--
   Define a primary key constraint for table
   <structname>distributors</>.  The following two examples are
   equivalent, the first using the table constraint syntax, the second
   the column constraint syntax:
-->
<structname>distributors</>テーブルにプライマリキー制約を定義します。
以下の2つの例は同等で、前者はテーブル制約構文を使用し、後者は列制約構文を使用します。

<programlisting>
CREATE TABLE distributors (
    did     integer,
    name    varchar(40),
    PRIMARY KEY(did)
);

CREATE TABLE distributors (
    did     integer PRIMARY KEY,
    name    varchar(40)
);
</programlisting>
  </para>

  <para>
<!--
   Assign a literal constant default value for the column
   <literal>name</literal>, arrange for the default value of column
   <literal>did</literal> to be generated by selecting the next value
   of a sequence object, and make the default value of
   <literal>modtime</literal> be the time at which the row is
   inserted:
-->
以下では、<literal>name</literal>列のデフォルト値にリテラル定数を割り当てています。また、<literal>did</literal>列のデフォルト値として、シーケンスオブジェクトの次の値が生成されるように調整しています。
<literal>modtime</literal>のデフォルト値は、その行が挿入された時刻となります。

<programlisting>
CREATE TABLE distributors (
    name      varchar(40) DEFAULT 'Luso Films',
    did       integer DEFAULT nextval('distributors_serial'),
    modtime   timestamp DEFAULT current_timestamp
);
</programlisting>
  </para>

  <para>
<!--
   Define two <literal>NOT NULL</> column constraints on the table
   <classname>distributors</classname>, one of which is explicitly
   given a name:
-->
2つの<literal>NOT NULL</>列制約を<classname>distributors</classname>テーブルに定義します。
そのうち1つには明示的な名前を付けています。

<programlisting>
CREATE TABLE distributors (
    did     integer CONSTRAINT no_null NOT NULL,
    name    varchar(40) NOT NULL
);
</programlisting>
    </para>

    <para>
<!--
     Define a unique constraint for the <literal>name</literal> column:
-->
<literal>name</literal>列に対し、一意性制約を定義します。

<programlisting>
CREATE TABLE distributors (
    did     integer,
    name    varchar(40) UNIQUE
);
</programlisting>

<!--
     The same, specified as a table constraint:
-->
上と同じですが、テーブル制約として指定します。

<programlisting>
CREATE TABLE distributors (
    did     integer,
    name    varchar(40),
    UNIQUE(name)
);
</programlisting>
  </para>

  <para>
<!--
   Create the same table, specifying 70% fill factor for both the table
   and its unique index:
-->
テーブルとその一意性インデックスの両方に70%のフィルファクタを指定して、同じテーブルを作成します。

<programlisting>
CREATE TABLE distributors (
    did     integer,
    name    varchar(40),
    UNIQUE(name) WITH (fillfactor=70)
)
WITH (fillfactor=70);
</programlisting>
  </para>

  <para>
<!--
   Create table <structname>circles</> with an exclusion
   constraint that prevents any two circles from overlapping:
-->
2つの円の重複を許さない除外制約を持つ<structname>circles</>テーブルを作成します。

<programlisting>
CREATE TABLE circles (
    c circle,
    EXCLUDE USING gist (c WITH &amp;&amp;)
);
</programlisting>
  </para>

  <para>
<!--
   Create table <structname>cinemas</> in tablespace <structname>diskvol1</>:
-->
<structname>diskvol1</>テーブル空間に<structname>cinemas</>テーブルを作成します。

<programlisting>
CREATE TABLE cinemas (
        id serial,
        name text,
        location text
) TABLESPACE diskvol1;
</programlisting>
  </para>

  <para>
<!--
   Create a composite type and a typed table:
-->
複合型と型付きテーブルを作成します。
<programlisting>
CREATE TYPE employee_type AS (name text, salary numeric);

CREATE TABLE employees OF employee_type (
    PRIMARY KEY (name),
    salary WITH OPTIONS DEFAULT 1000
);
</programlisting></para>
 </refsect1>

 <refsect1 id="SQL-CREATETABLE-compatibility">
<!--
  <title id="SQL-CREATETABLE-compatibility-title">Compatibility</title>
-->
<title id="SQL-CREATETABLE-compatibility-title">互換性</title>

  <para>
<!--
   The <command>CREATE TABLE</command> command conforms to the
   <acronym>SQL</acronym> standard, with exceptions listed below.
-->
<command>CREATE TABLE</command>は、以下に挙げるものを除いて、標準<acronym>SQL</acronym>に従います。
  </para>

  <refsect2>
<!--
   <title>Temporary Tables</title>
-->
<title>一時テーブル</title>

   <para>
<!--
    Although the syntax of <literal>CREATE TEMPORARY TABLE</literal>
    resembles that of the SQL standard, the effect is not the same.  In the
    standard,
    temporary tables are defined just once and automatically exist (starting
    with empty contents) in every session that needs them.
    <productname>PostgreSQL</productname> instead
    requires each session to issue its own <literal>CREATE TEMPORARY
    TABLE</literal> command for each temporary table to be used.  This allows
    different sessions to use the same temporary table name for different
    purposes, whereas the standard's approach constrains all instances of a
    given temporary table name to have the same table structure.
-->
<literal>CREATE TEMPORARY TABLE</literal>は標準SQLに類似していますが、その効果は同じではありません。
標準では、一時テーブルは一度だけ定義され、それを必要とするセッションごとに自動的に（空の内容で始まる形で）出現します。
<productname>PostgreSQL</productname>では、これと異なり、各セッションで独自に、使用する一時テーブル用の<literal>CREATE TEMPORARY TABLE</literal>コマンドを発行しなければなりません。
これにより、異なるセッションで同じ名前の一時テーブルを異なる目的で使用することができます。
一方、標準の方法では、ある一時テーブル名を持つインスタンスが、全て同一のテーブル構造を持つという制限があります。
   </para>

   <para>
<!--
    The standard's definition of the behavior of temporary tables is
    widely ignored.  <productname>PostgreSQL</productname>'s behavior
    on this point is similar to that of several other SQL databases.
-->
標準における一時テーブルの動作定義の多くは無視されています。
この点での<productname>PostgreSQL</productname>の動作は、他の多くのSQLデータベースと似ています。
   </para>

   <para>
<!--
    The SQL standard also distinguishes between global and local temporary
    tables, where a local temporary table has a separate set of contents for
    each SQL module within each session, though its definition is still shared
    across sessions.  Since <productname>PostgreSQL</productname> does not
    support SQL modules, this distinction is not relevant in
    <productname>PostgreSQL</productname>.
-->
また標準SQLではグローバル一時テーブルとローカル一時テーブルを区別しています。
ローカル一時テーブルは各セッション内のSQLモジュールそれぞれ用に内容の集合を分離しますが、その定義はセッション全体で共有されます。
<productname>PostgreSQL</productname>はSQLモジュールをサポートしませんので、<productname>PostgreSQL</productname>ではこの区別は適切ではありません。
   </para>

   <para>
<!--
    For compatibility's sake, <productname>PostgreSQL</productname> will
    accept the <literal>GLOBAL</literal> and <literal>LOCAL</literal> keywords
    in a temporary table declaration, but they currently have no effect.
    Use of these keywords is discouraged, since future versions of
    <productname>PostgreSQL</productname> might adopt a more
    standard-compliant interpretation of their meaning.
-->
互換性を保持するため、<productname>PostgreSQL</productname>は一時テーブルの宣言において<literal>GLOBAL</literal>と<literal>LOCAL</literal>キーワードを受け付けますが、これらには現在、何の効果もありません。
<productname>PostgreSQL</productname>の今後のバージョンでは、これらの意味についてより標準に近い実装を取り入れる可能性がありますので、これらのキーワードの使用は勧めません。
   </para>

   <para>
<!--
    The <literal>ON COMMIT</literal> clause for temporary tables
    also resembles the SQL standard, but has some differences.
    If the <literal>ON COMMIT</> clause is omitted, SQL specifies that the
    default behavior is <literal>ON COMMIT DELETE ROWS</>.  However, the
    default behavior in <productname>PostgreSQL</productname> is
    <literal>ON COMMIT PRESERVE ROWS</literal>.  The <literal>ON COMMIT
    DROP</literal> option does not exist in SQL.
-->
一時テーブル用の<literal>ON COMMIT</literal>句もまた、標準SQLに類似していますが、いくつか違いがあります。
<literal>ON COMMIT</literal>句が省略された場合、SQLでは、デフォルトの動作は<literal>ON COMMIT DELETE ROWS</>であると規定しています。
しかし、<productname>PostgreSQL</productname>でのデフォルトの動作は<literal>ON COMMIT PRESERVE ROWS</literal>です。
また、<literal>ON COMMIT DROP</literal>はSQLにはありません。
   </para>
  </refsect2>

  <refsect2>
<!--
   <title>Non-deferred Uniqueness Constraints</title>
-->
   <title>非遅延一意性制約</title>

   <para>
<!--
    When a <literal>UNIQUE</> or <literal>PRIMARY KEY</> constraint is
    not deferrable, <productname>PostgreSQL</productname> checks for
    uniqueness immediately whenever a row is inserted or modified.
    The SQL standard says that uniqueness should be enforced only at
    the end of the statement; this makes a difference when, for example,
    a single command updates multiple key values.  To obtain
    standard-compliant behavior, declare the constraint as
    <literal>DEFERRABLE</> but not deferred (i.e., <literal>INITIALLY
    IMMEDIATE</>).  Be aware that this can be significantly slower than
    immediate uniqueness checking.
-->
<literal>UNIQUE</>または<literal>PRIMARY KEY</>制約が非遅延の場合、<productname>PostgreSQL</productname>は行が挿入または変更されると即座に一意性を検査します。
標準SQLでは一意性は文が完了した時にのみ強制されなければならないと記述しています。
これにより、たとえば、1つのコマンドが複数のキー値を更新する時に違いが現れます。
標準互換の動作をさせるためには、非遅延（つまり<literal>INITIALLY IMMEDIATE</>）ではなく<literal>DEFERRABLE</>として制約を宣言してください。
これが即座に行われる一意性検査よりかなり低速になる可能性があることに注意してください。
   </para>
  </refsect2>

  <refsect2>
<!--
   <title>Column Check Constraints</title>
-->
   <title>列検査制約</title>

   <para>
<!--
    The SQL standard says that <literal>CHECK</> column constraints
    can only refer to the column they apply to; only <literal>CHECK</>
    table constraints can refer to multiple columns.
    <productname>PostgreSQL</productname> does not enforce this
    restriction; it treats column and table check constraints alike.
-->
標準SQLでは、<literal>CHECK</>列制約はそれを適用する列のみを参照でき、複数の列を参照できるのは<literal>CHECK</>テーブル制約のみであるとされています。
<productname>PostgreSQL</productname>にはこの制限はありません。
列検査制約とテーブル検査制約を同様のものとして扱っています。
   </para>
  </refsect2>

  <refsect2>
<!--
   <title><literal>EXCLUDE</literal> Constraint</title>
-->
   <title><literal>EXCLUDE</literal>制約</title>

   <para>
<!--
    The <literal>EXCLUDE</> constraint type is a
    <productname>PostgreSQL</productname> extension.
-->
<literal>EXCLUDE</>という種類の制約は<productname>PostgreSQL</productname>の拡張です。
   </para>
  </refsect2>

  <refsect2>
<!--
   <title><literal>NULL</literal> <quote>Constraint</quote></title>
-->
   <title><literal>NULL</literal> <quote>制約</quote></title>

   <para>
<!--
    The <literal>NULL</> <quote>constraint</quote> (actually a
    non-constraint) is a <productname>PostgreSQL</productname>
    extension to the SQL standard that is included for compatibility with some
    other database systems (and for symmetry with the <literal>NOT
    NULL</literal> constraint).  Since it is the default for any
    column, its presence is simply noise.
-->
<literal>NULL</><quote>制約</quote>（実際には非制約）は、標準SQLに対する<productname>PostgreSQL</productname>の拡張で、他のいくつかのデータベースシステムとの互換性（および <literal>NOT NULL</literal>制約との対称性）のために含まれています。
どんな列に対してもデフォルトとなるため、これには意味はありません。
   </para>
  </refsect2>

  <refsect2>
<!--
   <title>Inheritance</title>
-->
<title>継承</title>

   <para>
<!--
    Multiple inheritance via the <literal>INHERITS</literal> clause is
    a <productname>PostgreSQL</productname> language extension.
    SQL:1999 and later define single inheritance using a
    different syntax and different semantics.  SQL:1999-style
    inheritance is not yet supported by
    <productname>PostgreSQL</productname>.
-->
<literal>INHERITS</literal>句による複数継承は、<productname>PostgreSQL</productname>の言語拡張です。
SQL:1999以降では、異なる構文と意味体系による単一継承を定義しています。
今のところ、SQL:1999方式の継承は<productname>PostgreSQL</productname>ではサポートされていません。
   </para>
  </refsect2>

  <refsect2>
<!--
   <title>Zero-column Tables</title>
-->
   <title>列を持たないテーブル</title>

   <para>
<!--
    <productname>PostgreSQL</productname> allows a table of no columns
    to be created (for example, <literal>CREATE TABLE foo();</>).  This
    is an extension from the SQL standard, which does not allow zero-column
    tables.  Zero-column tables are not in themselves very useful, but
    disallowing them creates odd special cases for <command>ALTER TABLE
    DROP COLUMN</>, so it seems cleaner to ignore this spec restriction.
-->
<productname>PostgreSQL</productname>では、列を持たないテーブルを作成することができます
（例えば、<literal>CREATE TABLE foo();</>）。
これは標準SQLからの拡張です。
標準SQLでは列を持たないテーブルは許されません。
列を持たないテーブルそれ自体は役に立ちませんが、これを無効とすると、<command>ALTER TABLE DROP COLUMN</>に対して奇妙な特例を生成することになります。
したがって、この仕様上の制限を無視する方が簡潔であると考えます。
   </para>
  </refsect2>

  <refsect2>
<!--
   <title><literal>WITH</> Clause</title>
-->
   <title><literal>WITH</>句</title>

   <para>
<!--
    The <literal>WITH</> clause is a <productname>PostgreSQL</productname>
    extension; neither storage parameters nor OIDs are in the standard.
-->
<literal>WITH</>句は<productname>PostgreSQL</productname>の拡張です。
格納パラメータもOIDも標準にはありません。
   </para>
  </refsect2>

  <refsect2>
<!--
   <title>Tablespaces</title>
-->
   <title>テーブル空間</title>

   <para>
<!--
    The <productname>PostgreSQL</productname> concept of tablespaces is not
    part of the standard.  Hence, the clauses <literal>TABLESPACE</literal>
    and <literal>USING INDEX TABLESPACE</literal> are extensions.
-->
<productname>PostgreSQL</productname>のテーブル空間の概念は標準にはありません。
したがって、<literal>TABLESPACE</literal>と<literal>USING INDEX TABLESPACE</literal>は、<productname>PostgreSQL</productname>における拡張です。
   </para>
  </refsect2>

  <refsect2>
<!--
   <title>Typed Tables</title>
-->
   <title>型付きテーブル</title>

   <para>
<!--
    Typed tables implement a subset of the SQL standard.  According to
    the standard, a typed table has columns corresponding to the
    underlying composite type as well as one other column that is
    the <quote>self-referencing column</quote>.  PostgreSQL does not
    support these self-referencing columns explicitly, but the same
    effect can be had using the OID feature.
-->
型付きテーブルは標準SQLのサブセットを実装します。
標準に従うと、型付きテーブルは背後の複合型に対応した列の他に<quote>自己参照列</quote>という列も持ちます。
PostgreSQLはこうした自己参照列を明示的にサポートしません。
しかし、OID機能を使用して同様の効果を持たせることができます。
   </para>
  </refsect2>
 </refsect1>


 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-altertable"></member>
   <member><xref linkend="sql-droptable"></member>
   <member><xref linkend="sql-createtableas"></member>
   <member><xref linkend="sql-createtablespace"></member>
   <member><xref linkend="sql-createtype"></member>
  </simplelist>
 </refsect1>
</refentry>
