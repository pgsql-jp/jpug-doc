<!-- doc/src/sgml/xindex.sgml -->

<sect1 id="xindex">
<!--
 <title>Interfacing Extensions To Indexes</title>
-->
<title>インデックス拡張機能へのインタフェース</title>

 <indexterm zone="xindex">
<!--
  <primary>index</primary>
  <secondary>for user-defined data type</secondary>
-->
  <primary>インデックス</primary>
  <secondary>ユーザ定義データ型用の</secondary>
 </indexterm>

  <para>
<!--
   The procedures described thus far let you define new types, new
   functions, and new operators. However, we cannot yet define an
   index on a column of a new data type.  To do this, we must define an
   <firstterm>operator class</> for the new data type.  Later in this
   section, we will illustrate this concept in an example: a new
   operator class for the B-tree index method that stores and sorts
   complex numbers in ascending absolute value order.
-->
これまでのところでは、新しい型や新しい関数、および新しい演算子をどの様に定義するかについて説明してきました。
しかしながら、新しい型の列に対するインデックスをまだ作成することができません。
このためには、新しいデータ型に対する<firstterm>演算子クラス</>を定義する必要があります。
本節では、複素数を値の絶対値の昇順にソートし格納するB-treeインデックスメソッドを使った新しい演算子クラスについての実行例を用いて、演算子クラスの概念を説明します。
  </para>

  <para>
<!--
   Operator classes can be grouped into <firstterm>operator families</>
   to show the relationships between semantically compatible classes.
   When only a single data type is involved, an operator class is sufficient,
   so we'll focus on that case first and then return to operator families.
-->
演算子クラスを<firstterm>演算子族</>にまとめ、意味的に互換性を持つクラス間の関係を表すことができます。
1つのデータ型のみが含まれる場合、演算子クラスで十分です。
そこでまずこうした状況に注目し、その後で演算子族に戻ります。
  </para>

 <sect2 id="xindex-opclass">
<!--
  <title>Index Methods and Operator Classes</title>
-->
  <title>インデックスメソッドと演算子クラス</title>

  <para>
<!--
   The <classname>pg_am</classname> table contains one row for every
   index method (internally known as access method).  Support for
   regular access to tables is built into
   <productname>PostgreSQL</productname>, but all index methods are
   described in <classname>pg_am</classname>.  It is possible to add a
   new index method by defining the required interface routines and
   then creating a row in <classname>pg_am</classname> &mdash; but that is
   beyond the scope of this chapter (see <xref linkend="indexam">).
-->
<classname>pg_am</classname>テーブルには各インデックスメソッド（内部ではアクセスメソッドとして知られています）に対して1つの行が含まれています。
テーブルへの通常のアクセスのサポートは<productname>PostgreSQL</productname>に組み込まれていますが、すべてのインデックスメソッドは、<classname>pg_am</classname>で記述されています。
必要とされるインタフェースルーチンを定義した後、<classname>pg_am</classname>に行を作成することによって、新しいインデックスメソッドを追加することができます。
しかし、この方法についての説明は本章での範囲を超えています（<xref linkend="indexam">を参照してください）。
  </para>

  <para>
<!--
   The routines for an index method do not directly know anything
   about the data types that the index method will operate on.
   Instead, an <firstterm>operator
   class</><indexterm><primary>operator class</></indexterm>
   identifies the set of operations that the index method needs to use
   to work with a particular data type.  Operator classes are so
   called because one thing they specify is the set of
   <literal>WHERE</>-clause operators that can be used with an index
   (i.e., can be converted into an index-scan qualification).  An
   operator class can also specify some <firstterm>support
   procedures</> that are needed by the internal operations of the
   index method, but do not directly correspond to any
   <literal>WHERE</>-clause operator that can be used with the index.
-->
インデックスメソッドのルーチンには、直接的にインデックスメソッドが演算するデータ型の情報は何も与えられていません。
代わりに、<firstterm>演算子クラス</>が、特定のデータ型の操作においてインデックスメソッドを使用する必要がある演算の集合を識別します。
<indexterm><primary>演算子クラス</></indexterm>
演算子クラスという名前の由来は、それらが指定するものの1つにインデックスで使用できる（つまり、インデックススキャン条件に変換できる）<literal>WHERE</>句演算子の集合があるからです。
また、演算子クラスは、インデックスメソッドの内部演算で必要な、しかしインデックスで使用できる<literal>WHERE</>句演算子には直接的には対応しない、<firstterm>サポートプロシージャ</>をいくつか指定することができます。
  </para>

  <para>
<!--
   It is possible to define multiple operator classes for the same
   data type and index method.  By doing this, multiple
   sets of indexing semantics can be defined for a single data type.
   For example, a B-tree index requires a sort ordering to be defined
   for each data type it works on.
   It might be useful for a complex-number data type
   to have one B-tree operator class that sorts the data by complex
   absolute value, another that sorts by real part, and so on.
   Typically, one of the operator classes will be deemed most commonly
   useful and will be marked as the default operator class for that
   data type and index method.
-->
同じ入力データ型およびインデックスメソッドに対して複数の演算子クラスを定義することが可能です。
これにより、1つのデータ型に対して、複数のインデックス付けセマンティックの集合を定義することができます。
例えば、B-treeインデックスでは、処理するデータ型ごとにソート順を定義する必要があります。
複素数データ型では、複素数の絶対値によりデータをソートするB-tree演算子クラスと、実部の数値によりソートするB-tree演算子クラスを持つといった方法は、有用かもしれません。
通常は演算子クラスの1つが一般的に最も有用であると判断され、そのデータ型およびインデックスメソッドに対するデフォルトの演算子クラスとして設定されます。
  </para>

  <para>
<!--
   The same operator class name
   can be used for several different index methods (for example, both B-tree
   and hash index methods have operator classes named
   <literal>int4_ops</literal>), but each such class is an independent
   entity and must be defined separately.
-->
複数の異なるインデックスメソッドに、同一の演算子クラス名を使用することができます（例えば、B-treeとハッシュインデックスメソッドは、両方とも<literal>int4_ops</literal>という名前の演算子クラスを持つことができます）。
ただし、そのような各クラスは独立した実体であり、別々に定義される必要があります。
  </para>
 </sect2>

 <sect2 id="xindex-strategies">
<!--
  <title>Index Method Strategies</title>
-->
<title>インデックスメソッドのストラテジ</title>

  <para>
<!--
   The operators associated with an operator class are identified by
   <quote>strategy numbers</>, which serve to identify the semantics of
   each operator within the context of its operator class.
   For example, B-trees impose a strict ordering on keys, lesser to greater,
   and so operators like <quote>less than</> and <quote>greater than or equal
   to</> are interesting with respect to a B-tree.
   Because
   <productname>PostgreSQL</productname> allows the user to define operators,
   <productname>PostgreSQL</productname> cannot look at the name of an operator
   (e.g., <literal>&lt;</> or <literal>&gt;=</>) and tell what kind of
   comparison it is.  Instead, the index method defines a set of
   <quote>strategies</>, which can be thought of as generalized operators.
   Each operator class specifies which actual operator corresponds to each
   strategy for a particular data type and interpretation of the index
   semantics.
-->
演算子クラスに関連付けられている演算子は、<quote>ストラテジ番号</>により識別されます。
<quote>ストラテジ番号</>は、演算子クラスのコンテキスト内における各演算子のセマンティクスを識別するためのものです。
例えば、B-treeの場合、キーが小さい方から大きい方へ厳密に並んでいなければなりません。
したがって、B-treeに関しては、<quote>より小さい</>および<quote>以上</>のような演算子は興味深いと言えます。
<productname>PostgreSQL</productname>ではユーザが演算子を定義できるため、<productname>PostgreSQL</productname>は演算子の名前（例えば<literal>&lt;</>や<literal>&gt;=</>）を見つけても、その演算子がどのような比較を行うかを判断することはできません。
その代わり、インデックスメソッドは<quote>ストラテジ</>の集合を定義します。
<quote>ストラテジ</>は汎用演算子と考えることができます。
各演算子クラスは、特定のデータ型およびインデックスセマンティックスの解釈において、実際のどの演算子が各ストラテジに対応しているかを指定します。
  </para>

  <para>
<!--
   The B-tree index method defines five strategies, shown in <xref
   linkend="xindex-btree-strat-table">.
-->
<xref linkend="xindex-btree-strat-table">に示すように、B-treeインデックスメソッドではストラテジを5つ定義します。
  </para>

   <table tocentry="1" id="xindex-btree-strat-table">
<!--
    <title>B-tree Strategies</title>
-->
<title>B-treeストラテジ</title>
    <tgroup cols="2">
     <thead>
      <row>
<!--
       <entry>Operation</entry>
       <entry>Strategy Number</entry>
-->
<entry>演算</entry>
       <entry>ストラテジ番号</entry>
      </row>
     </thead>
     <tbody>
      <row>
<!--
       <entry>less than</entry>
-->
       <entry>小なり</entry>
       <entry>1</entry>
      </row>
      <row>
<!--
       <entry>less than or equal</entry>
-->
<entry>以下</entry>
       <entry>2</entry>
      </row>
      <row>
<!--
       <entry>equal</entry>
-->
<entry>等しい</entry>
       <entry>3</entry>
      </row>
      <row>
<!--
       <entry>greater than or equal</entry>
-->
<entry>以上</entry>
       <entry>4</entry>
      </row>
      <row>
<!--
       <entry>greater than</entry>
-->
<entry>大なり</entry>
       <entry>5</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
<!--
   Hash indexes support only equality comparisons, and so they use only one
   strategy, shown in <xref linkend="xindex-hash-strat-table">.
-->
ハッシュインデックスは等価性のみをサポートします。
したがって、<xref linkend="xindex-hash-strat-table">に示すように、ストラテジを1つのみ定義します。

  </para>

   <table tocentry="1" id="xindex-hash-strat-table">
<!--
    <title>Hash Strategies</title>
-->
    <title>ハッシュストラテジ</title>
    <tgroup cols="2">
     <thead>
      <row>
<!--
       <entry>Operation</entry>
       <entry>Strategy Number</entry>
-->
<entry>演算</entry>
       <entry>ストラテジ番号</entry>
      </row>
     </thead>
     <tbody>
      <row>
<!--
       <entry>equal</entry>
-->
<entry>等しい</entry>
       <entry>1</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
<!--
   GiST indexes are more flexible: they do not have a fixed set of
   strategies at all.  Instead, the <quote>consistency</> support routine
   of each particular GiST operator class interprets the strategy numbers
   however it likes.  As an example, several of the built-in GiST index
   operator classes index two-dimensional geometric objects, providing
   the <quote>R-tree</> strategies shown in
   <xref linkend="xindex-rtree-strat-table">.  Four of these are true
   two-dimensional tests (overlaps, same, contains, contained by);
   four of them consider only the X direction; and the other four
   provide the same tests in the Y direction.
-->
GiSTインデックスはより柔軟です。
固定のストラテジの集合をまったく持ちません。
代わりに、特定のGiST演算子クラスの<quote>consistent</>サポートルーチンが、ストラテジ番号が何を意味するかを解釈します。
<!-- 訳注:consistencyは意図的に関数名consistentに変更 -->
例えば、複数の組み込みのGiSTインデックス演算子クラスは、2次元幾何オブジェクトをインデックス付けし、<xref linkend="xindex-rtree-strat-table">で示される<quote>R-tree</>ストラテジを提供します。
この内4個は2次元に対する（重複、合同、包含、被包含）試験です。
残りの内4個はX方向のみに対する、残り4個はY方向のみに対する同一の試験を提供します。
  </para>

   <table tocentry="1" id="xindex-rtree-strat-table">
<!--
    <title>GiST Two-Dimensional <quote>R-tree</> Strategies</title>
-->
    <title>GiSTによる2次元の<quote>R-tree</>ストラテジ</title>
    <tgroup cols="2">
     <thead>
      <row>
<!--
       <entry>Operation</entry>
       <entry>Strategy Number</entry>
-->
<entry>演算</entry>
       <entry>ストラテジ番号</entry>
      </row>
     </thead>
     <tbody>
      <row>
<!--
       <entry>strictly left of</entry>
-->
       <entry>完全に左側</entry>
       <entry>1</entry>
      </row>
      <row>
<!--
       <entry>does not extend to right of</entry>
-->
       <entry>右側にはみ出さない</entry>
       <entry>2</entry>
      </row>
      <row>
<!--
       <entry>overlaps</entry>
-->
       <entry>重なる</entry>
       <entry>3</entry>
      </row>
      <row>
<!--
       <entry>does not extend to left of</entry>
-->
       <entry>左側にはみ出さない</entry>
       <entry>4</entry>
      </row>
      <row>
<!--
       <entry>strictly right of</entry>
-->
       <entry>完全に右側</entry>
       <entry>5</entry>
      </row>
      <row>
<!--
       <entry>same</entry>
-->
       <entry>同じ</entry>
       <entry>6</entry>
      </row>
      <row>
<!--
       <entry>contains</entry>
-->
       <entry>含む</entry>
       <entry>7</entry>
      </row>
      <row>
<!--
       <entry>contained by</entry>
-->
       <entry>含まれる</entry>
       <entry>8</entry>
      </row>
      <row>
<!--
       <entry>does not extend above</entry>
-->
       <entry>上側にはみ出さない</entry>
       <entry>9</entry>
      </row>
      <row>
<!--
       <entry>strictly below</entry>
-->
       <entry>完全に下側</entry>
       <entry>10</entry>
      </row>
      <row>
<!--
       <entry>strictly above</entry>
-->
       <entry>完全に上側</entry>
       <entry>11</entry>
      </row>
      <row>
<!--
       <entry>does not extend below</entry>
-->
       <entry>下側にはみ出さない</entry>
       <entry>12</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
<!--
   SP-GiST indexes are similar to GiST indexes in flexibility: they don't have
   a fixed set of strategies. Instead the support routines of each operator
   class interpret the strategy numbers according to the operator class's
   definition. As an example, the strategy numbers used by the built-in
   operator classes for points are shown in <xref
   linkend="xindex-spgist-point-strat-table">.
-->
SP-GiSTインデックスは柔軟性という点でGiSTと似ており、固定のストラテジ群を持ちません。
その代わりに、各演算子クラスのサポートルーチンが演算子クラスの定義に従ってストラテジ番号を解釈します。
例えば、組み込みの点に対する演算子クラスで使用されるストラテジ番号を<xref linkend="xindex-spgist-point-strat-table">に示します。
  </para>

   <table tocentry="1" id="xindex-spgist-point-strat-table">
<!--
    <title>SP-GiST Point Strategies</title>
-->
    <title>SP-GiSTの点に関するストラテジ</title>
    <tgroup cols="2">
     <thead>
      <row>
<!--
       <entry>Operation</entry>
       <entry>Strategy Number</entry>
-->
       <entry>演算</entry>
       <entry>ストラテジ番号</entry>
      </row>
     </thead>
     <tbody>
      <row>
<!--
       <entry>strictly left of</entry>
-->
       <entry>厳密に左側</entry>
       <entry>1</entry>
      </row>
      <row>
<!--
       <entry>strictly right of</entry>
-->
       <entry>厳密に右側</entry>
       <entry>5</entry>
      </row>
      <row>
<!--
       <entry>same</entry>
-->
       <entry>同一</entry>
       <entry>6</entry>
      </row>
      <row>
<!--
       <entry>contained by</entry>
-->
       <entry>包含される</entry>
       <entry>8</entry>
      </row>
      <row>
<!--
       <entry>strictly below</entry>
-->
       <entry>厳密に下</entry>
       <entry>10</entry>
      </row>
      <row>
<!--
       <entry>strictly above</entry>
-->
       <entry>厳密に上</entry>
       <entry>11</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
<!--
   GIN indexes are similar to GiST and SP-GiST indexes, in that they don't
   have a fixed set of strategies either. Instead the support routines of
   each operator class interpret the strategy numbers according to the
   operator class's definition. As an example, the strategy numbers used by
   the built-in operator classes for arrays are shown in
   <xref linkend="xindex-gin-array-strat-table">.
-->
GINインデックスは、いずれも固定のストラテジ群を持たないという点で、GiSTおよびSP-GiSTインデックスと似ています。
その代わりに、各演算子クラスのサポートルーチンが演算子クラスの定義に従ってストラテジ番号を解釈します。
例えば、組み込みの配列に対する演算子クラスで使用されるストラテジ番号を<xref linkend="xindex-gin-array-strat-table">に示します。

  </para>

   <table tocentry="1" id="xindex-gin-array-strat-table">
<!--
    <title>GIN Array Strategies</title>
-->
    <title>GIN 配列のストラテジ</title>
    <tgroup cols="2">
     <thead>
      <row>
<!--
       <entry>Operation</entry>
       <entry>Strategy Number</entry>
-->
       <entry>演算</entry>
       <entry>ストラテジ番号</entry>
      </row>
     </thead>
     <tbody>
      <row>
<!--
       <entry>overlap</entry>
-->
       <entry>重複</entry>
       <entry>1</entry>
      </row>
      <row>
<!--
       <entry>contains</entry>
-->
       <entry>包含</entry>
       <entry>2</entry>
      </row>
      <row>
<!--
       <entry>is contained by</entry>
-->
       <entry>包含される</entry>
       <entry>3</entry>
      </row>
      <row>
<!--
       <entry>equal</entry>
-->
       <entry>等しい</entry>
       <entry>4</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
<!--
   Notice that all the operators listed above return Boolean values.  In
   practice, all operators defined as index method search operators must
   return type <type>boolean</type>, since they must appear at the top
   level of a <literal>WHERE</> clause to be used with an index.
   (Some index access methods also support <firstterm>ordering operators</>,
   which typically don't return Boolean values; that feature is discussed
   in <xref linkend="xindex-ordering-ops">.)
-->
上記の演算子はすべて論理値を返すことに注意してください。
実際、インデックスで使用されるために<literal>WHERE</>の最上位レベルで現れなければなりませんので、インデックスメソッド検索演算子として定義された、すべての演算子の戻り値の型は<type>boolean</type>でなければなりません。
（一部のインデックスアクセスメソッドは、通常論理型の値を返さない<firstterm>順序付け演算子</>もサポートします。
この機能については<xref linkend="xindex-ordering-ops">で説明します。）
  </para>

 </sect2>

 <sect2 id="xindex-support">
<!--
  <title>Index Method Support Routines</title>
-->
  <title>インデックスメソッドのサポートルーチン</title>

  <para>
<!--
   Strategies aren't usually enough information for the system to figure
   out how to use an index.  In practice, the index methods require
   additional support routines in order to work. For example, the B-tree
   index method must be able to compare two keys and determine whether one
   is greater than, equal to, or less than the other.  Similarly, the
   hash index method must be able to compute hash codes for key values.
   These operations do not correspond to operators used in qualifications in
   SQL commands;  they are administrative routines used by
   the index methods, internally.
-->
ストラテジは通常、システムがインデックスを使う方法を判断するために十分な情報ではありません。
実際には、インデックスメソッドが動作するためには、さらにサポートルーチンを必要とします。
例えばB-treeインデックスメソッドは、2つのキーを比較し、より大きいのか、等しいのか、より小さいのかを決定できなければなりません。
同様に、ハッシュインデックスは、キー値のハッシュコードを計算できなければなりません。
これらの操作はSQLコマンドの条件内で使用される演算子とは対応しません。
これらはインデックスメソッドで内部的に使用される管理用ルーチンです。
  </para>

  <para>
<!--
   Just as with strategies, the operator class identifies which specific
   functions should play each of these roles for a given data type and
   semantic interpretation.  The index method defines the set
   of functions it needs, and the operator class identifies the correct
   functions to use by assigning them to the <quote>support function numbers</>
   specified by the index method.
-->
ストラテジと同じように、演算子クラスにより、与えられたデータ型およびセマンティックス解釈に対して、どの特定の関数がこれらの各役割を果たすべきであるかが識別されます。
インデックスメソッドは必要な関数の集合を定義し、演算子クラスは、これらをインデックスメソッドで指定された<quote>サポート関数番号</>に代入することによって、使用すべき正しい関数を識別します。
  </para>

  <para>
<!--
   B-trees require a single support function, and allow a second one to be
   supplied at the operator class author's option, as shown in <xref
   linkend="xindex-btree-support-table">.
-->
<xref linkend="xindex-btree-support-table">に示すように、B-treeでは１つのサポート関数が必須ですが、演算子クラス作成者のオプションとして提供されるもう１つのサポート関数を持つことができます。
  </para>

   <table tocentry="1" id="xindex-btree-support-table">
<!--
    <title>B-tree Support Functions</title>
-->
    <title>B-treeサポート関数</title>
    <tgroup cols="2">
     <thead>
      <row>
<!--
       <entry>Function</entry>
       <entry>Support Number</entry>
-->
       <entry>関数</entry>
       <entry>サポート番号</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
<!--
        Compare two keys and return an integer less than zero, zero, or
        greater than zero, indicating whether the first key is less than,
        equal to, or greater than the second
-->
2つのキーを比較し、最初のキーが2番目のキーより小さいか、等しいか、大きいかを示す、0未満、0、もしくは0より大きい整数を返します。
       </entry>
       <entry>1</entry>
      </row>
      <row>
       <entry>
<!--
        Return the addresses of C-callable sort support function(s),
        as documented in <filename>utils/sortsupport.h</> (optional)
-->
<filename>utils/sortsupport.h</>に記載した、C言語から呼び出し可能なソートサポート関数のアドレスを返します(省略可能)。
       </entry>
       <entry>2</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
<!--
   Hash indexes require one support function, shown in <xref
   linkend="xindex-hash-support-table">.
-->
<xref linkend="xindex-hash-support-table">に示すように、ハッシュインデックスでは単一のサポート関数が必要です。
  </para>

   <table tocentry="1" id="xindex-hash-support-table">
<!--
    <title>Hash Support Functions</title>
-->
    <title>ハッシュサポート関数</title>
    <tgroup cols="2">
     <thead>
      <row>
<!--
       <entry>Function</entry>
       <entry>Support Number</entry>
-->
       <entry>関数</entry>
       <entry>サポート番号</entry>
      </row>
     </thead>
     <tbody>
      <row>
<!--
       <entry>Compute the hash value for a key</entry>
-->
       <entry>キーのハッシュ値を計算</entry>
       <entry>1</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
<!--
   GiST indexes require seven support functions, with an optional eighth, as
   shown in <xref linkend="xindex-gist-support-table">.
   (For more information see <xref linkend="GiST">.)
-->
<xref linkend="xindex-gist-support-table">に示すように、GiSTインデックスは7つのサポート関数を必要とし、また、8番目は省略可能です。
(詳細については<xref linkend="GiST">を参照してください。)
  </para>

   <table tocentry="1" id="xindex-gist-support-table">
<!--
    <title>GiST Support Functions</title>
-->
    <title>GiSTサポート関数</title>
    <tgroup cols="3">
     <thead>
      <row>
<!--
       <entry>Function</entry>
       <entry>Description</entry>
       <entry>Support Number</entry>
-->
       <entry>関数</entry>
       <entry>説明</entry>
       <entry>サポート番号</entry>
      </row>
     </thead>
     <tbody>
      <row>
<!--
       <entry><function>consistent</></entry>
       <entry>determine whether key satisfies the
        query qualifier</entry>
-->
       <entry><function>consistent</></entry>
       <entry>キーが問い合わせ条件を満たすかどうかを決定します。</entry>
       <entry>1</entry>
      </row>
      <row>
<!--
       <entry><function>union</></entry>
       <entry>compute union of a set of keys</entry>
-->
       <entry><function>union</></entry>
       <entry>キー集合の和集合を計算します。</entry>
       <entry>2</entry>
      </row>
      <row>
<!--
       <entry><function>compress</></entry>
       <entry>compute a compressed representation of a key or value
        to be indexed</entry>
-->
       <entry><function>compress</></entry>
       <entry>キーまたはインデックス付けされる値の圧縮表現を計算します。</entry>
       <entry>3</entry>
      </row>
      <row>
<!--
       <entry><function>decompress</></entry>
       <entry>compute a decompressed representation of a
        compressed key</entry>
-->
       <entry><function>decompress</></entry>
       <entry>圧縮されたキーを伸張した表現を計算します。</entry>
       <entry>4</entry>
      </row>
      <row>
<!--
       <entry><function>penalty</></entry>
       <entry>compute penalty for inserting new key into subtree
       with given subtree's key</entry>
-->
       <entry><function>penalty</></entry>
       <entry>指定された副ツリーキーを持つ副ツリーに新しいキーを挿入する時のペナルティを計算します。</entry>
       <entry>5</entry>
      </row>
      <row>
<!--
       <entry><function>picksplit</></entry>
       <entry>determine which entries of a page are to be moved
       to the new page and compute the union keys for resulting pages</entry>
-->
       <entry><function>picksplit</></entry>
       <entry>ページのどのエントリを新しいページに移動させるかを決定し、結果ページ用の統合キーを計算します。</entry>
       <entry>6</entry>
      </row>
      <row>
<!--
       <entry><function>equal</></entry>
       <entry>compare two keys and return true if they are equal</entry>
-->
       <entry><function>equal</></entry>
       <entry>2つのキーを比較し、等しければ真を返します。</entry>
       <entry>7</entry>
      </row>
      <row>
       <entry><function>distance</></entry>
<!--
       <entry>determine distance from key to query value (optional)</entry>
-->
       <entry>
キーと問い合わせ値との間の距離を決定します（省略可能）。
       </entry>
       <entry>8</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
<!--
   SP-GiST indexes require five support functions, as
   shown in <xref linkend="xindex-spgist-support-table">.
   (For more information see <xref linkend="SPGiST">.)
-->
<xref linkend="xindex-spgist-support-table">に示すように、SP-GiSTインデックスでは５つのサポート関数が必要です。
(詳細については<xref linkend="SPGiST">を参照してください。)
  </para>

   <table tocentry="1" id="xindex-spgist-support-table">
<!--
    <title>SP-GiST Support Functions</title>
-->
    <title>SP-GiSTサポート関数</title>
    <tgroup cols="3">
     <thead>
      <row>
<!--
       <entry>Function</entry>
       <entry>Description</entry>
       <entry>Support Number</entry>
-->
       <entry>関数</entry>
       <entry>説明</entry>
       <entry>サポート番号</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><function>config</></entry>
<!--
       <entry>provide basic information about the operator class</entry>
-->
       <entry>演算子クラスに関する基本情報を提供します。</entry>
       <entry>1</entry>
      </row>
      <row>
       <entry><function>choose</></entry>
<!--
       <entry>determine how to insert a new value into an inner tuple</entry>
-->
       <entry>新しい値を内部タプルに挿入する方法を決定します。</entry>
       <entry>2</entry>
      </row>
      <row>
       <entry><function>picksplit</></entry>
<!--
       <entry>determine how to partition a set of values</entry>
-->
       <entry>値集合を分割する方法を決定します。</entry>
       <entry>3</entry>
      </row>
      <row>
       <entry><function>inner_consistent</></entry>
<!--
       <entry>determine which sub-partitions need to be searched for a
        query</entry>
-->
       <entry>ある問い合わせでサブパーティションの検索が必要かどうか決定します。</entry>
       <entry>4</entry>
      </row>
      <row>
       <entry><function>leaf_consistent</></entry>
<!--
       <entry>determine whether key satisfies the
        query qualifier</entry>
-->
       <entry>キーが問い合わせ修飾子を満たすかどうか決定します。</entry>
       <entry>5</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
<!--
   GIN indexes require four support functions, with an optional fifth, as
   shown in <xref linkend="xindex-gin-support-table">.
   (For more information see <xref linkend="GIN">.)
-->
<xref linkend="xindex-gin-support-table">に示すように、GINインデックスは、4つのサポート関数を必要とし、また、5番目は省略可能です。
(詳細については<xref linkend="GIN">を参照してください。)
  </para>

   <table tocentry="1" id="xindex-gin-support-table">
<!--
    <title>GIN Support Functions</title>
-->
    <title>GINサポート関数</title>
    <tgroup cols="3">
     <thead>
      <row>
<!--
       <entry>Function</entry>
       <entry>Description</entry>
       <entry>Support Number</entry>
-->
       <entry>関数</entry>
       <entry>説明</entry>
       <entry>サポート番号</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><function>compare</></entry>
       <entry>
<!--
        compare two keys and return an integer less than zero, zero,
        or greater than zero, indicating whether the first key is less than,
        equal to, or greater than the second
-->
2つのキーを比較し、0未満、0、0より大きな整数を返します。
それぞれ最初のキーの方が大きい、等しい、小さいを示します。
       </entry>
       <entry>1</entry>
      </row>
      <row>
       <entry><function>extractValue</></entry>
<!--
       <entry>extract keys from a value to be indexed</entry>
-->
       <entry>インデックス付けされる値からキーを抽出します。</entry>
       <entry>2</entry>
      </row>
      <row>
       <entry><function>extractQuery</></entry>
<!--
       <entry>extract keys from a query condition</entry>
-->
       <entry>問い合わせ条件からキーを抽出します。</entry>
       <entry>3</entry>
      </row>
      <row>
       <entry><function>consistent</></entry>
       <entry>
<!--
        determine whether value matches query condition (Boolean variant)
        (optional if support function 6 is present)
-->
問い合わせ条件に一致する値かどうかを決定します(2値の亜種)。
(サポート関数6があれば、省略可能)
       </entry>
       <entry>4</entry>
      </row>
      <row>
       <entry><function>comparePartial</></entry>
       <entry>
<!--
        compare partial key from
        query and key from index, and return an integer less than zero, zero,
        or greater than zero, indicating whether GIN should ignore this index
        entry, treat the entry as a match, or stop the index scan (optional)
-->
問い合わせからの部分キーとインデックスからのキーを比較し、それぞれ、GINがこのインデックス項目を無視しなければならないか、一致する項目として扱わなければならないか、インデックススキャンを中止しなければならないかを示す、ゼロより小さい、ゼロ、ゼロより大きい整数値のいずれかを返します(省略可能)。
       </entry>
       <entry>5</entry>
      </row>
      <row>
       <entry><function>triConsistent</></entry>
       <entry>
<!--
        determine whether value matches query condition (ternary variant)
        (optional if support function 4 is present)
-->
問い合わせ条件に一致する値かどうかを決定します(3値の亜種)。
(サポート関数4があれば、省略可能)
       </entry>
       <entry>6</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
<!--
   Unlike search operators, support functions return whichever data
   type the particular index method expects; for example in the case
   of the comparison function for B-trees, a signed integer.  The number
   and types of the arguments to each support function are likewise
   dependent on the index method.  For B-tree and hash the comparison and
   hashing support functions take the same input data types as do the
   operators included in the operator class, but this is not the case for
   most GiST, SP-GiST, and GIN support functions.
-->
検索演算子と異なり、サポート関数は特定のインデックスメソッドが想定するデータ型、例えばB-tree用の比較関数の場合、符号付き整数を返します。
同様に各サポート関数に渡す引数の数と型はインデックスメソッドに依存します。
B-treeとハッシュでは、比較関数とハッシュ処理サポート関数はその演算子クラスに含まれる演算子と同じ入力データ型を取りますが、GIN、SP-GiST、およびGiSTサポート関数のほとんどはそうではありません。
  </para>
 </sect2>

 <sect2 id="xindex-example">
<!--
  <title>An Example</title>
-->
  <title>例</title>

  <para>
<!--
   Now that we have seen the ideas, here is the promised example of
   creating a new operator class.
   (You can find a working copy of this example in
   <filename>src/tutorial/complex.c</filename> and
   <filename>src/tutorial/complex.sql</filename> in the source
   distribution.)
   The operator class encapsulates
   operators that sort complex numbers in absolute value order, so we
   choose the name <literal>complex_abs_ops</literal>.  First, we need
   a set of operators.  The procedure for defining operators was
   discussed in <xref linkend="xoper">.  For an operator class on
   B-trees, the operators we require are:
-->
ここまでで概念について説明してきました。
ここで、新しい演算子クラスを作成する有用な例を紹介します。
（この例を作業できるように、ソース配布物内の<filename>src/tutorial/complex.c</filename>と<filename>src/tutorial/complex.sql</filename>にコピーがあります。）
この演算子クラスは、複素数をその絶対値による順番でソートする演算子をカプセル化します。
ですので、その名前に<literal>complex_abs_ops</literal>を選びました。
最初に演算子の集合が必要になります。
演算子を定義する処理は<xref linkend="xoper">で説明しました。
B-tree上の演算子クラスでは、以下の演算子が必要です。

   <itemizedlist spacing="compact">
<!--
    <listitem><simpara>absolute-value less-than (strategy 1)</></>
    <listitem><simpara>absolute-value less-than-or-equal (strategy 2)</></>
    <listitem><simpara>absolute-value equal (strategy 3)</></>
    <listitem><simpara>absolute-value greater-than-or-equal (strategy 4)</></>
    <listitem><simpara>absolute-value greater-than (strategy 5)</></>
-->
    <listitem><simpara>絶対値による、小なり（ストラテジ1）</></>
    <listitem><simpara>絶対値による、以下（ストラテジ2）</></>
    <listitem><simpara>絶対値による、等しい（ストラテジ3）</></>
    <listitem><simpara>絶対値による、以上（ストラテジ4）</></>
    <listitem><simpara>絶対値による、大なり（ストラテジ5）</></>
   </itemizedlist>
  </para>

  <para>
<!--
   The least error-prone way to define a related set of comparison operators
   is to write the B-tree comparison support function first, and then write the
   other functions as one-line wrappers around the support function.  This
   reduces the odds of getting inconsistent results for corner cases.
   Following this approach, we first write:
-->
比較演算子の関連する集合を定義する時にエラーの発生を最小にする方法は、まず、B-tree比較サポート関数を作成し、その後に、他の関数をサポート関数に対する1行のラッパとして作成することです。
これにより、境界となる条件で一貫性のない結果を得る確率が減少します。
この手法に従って、まず以下を作成します。

<programlisting><![CDATA[
#define Mag(c)  ((c)->x*(c)->x + (c)->y*(c)->y)

static int
complex_abs_cmp_internal(Complex *a, Complex *b)
{
    double      amag = Mag(a),
                bmag = Mag(b);

    if (amag < bmag)
        return -1;
    if (amag > bmag)
        return 1;
    return 0;
}
]]>
</programlisting>

<!--
   Now the less-than function looks like:
-->
これで、小なり関数は以下のようになります。

<programlisting><![CDATA[
PG_FUNCTION_INFO_V1(complex_abs_lt);

Datum
complex_abs_lt(PG_FUNCTION_ARGS)
{
    Complex    *a = (Complex *) PG_GETARG_POINTER(0);
    Complex    *b = (Complex *) PG_GETARG_POINTER(1);

    PG_RETURN_BOOL(complex_abs_cmp_internal(a, b) < 0);
}
]]>
</programlisting>

<!--
   The other four functions differ only in how they compare the internal
   function's result to zero.
-->
他の4関数での違いは、内部関数の結果とゼロとをどのように比べるかだけです。
  </para>

  <para>
<!--
   Next we declare the functions and the operators based on the functions
   to SQL:
-->
次に、関数と、この関数に基づく演算子をSQLで宣言します。

<programlisting>
CREATE FUNCTION complex_abs_lt(complex, complex) RETURNS bool
    AS '<replaceable>filename</replaceable>', 'complex_abs_lt'
    LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR &lt; (
   leftarg = complex, rightarg = complex, procedure = complex_abs_lt,
   commutator = &gt; , negator = &gt;= ,
   restrict = scalarltsel, join = scalarltjoinsel
);
</programlisting>
<!--
   It is important to specify the correct commutator and negator operators,
   as well as suitable restriction and join selectivity
   functions, otherwise the optimizer will be unable to make effective
   use of the index.  Note that the less-than, equal, and
   greater-than cases should use different selectivity functions.
-->
正しく交代演算子と否定演算子を指定する他、適切な制限選択性関数と結合関数を指定することが重要です。
さもないと、オプティマイザはインデックスを効率的に使用することができません。
小なり、等価、大なりの場合に異なる選択性関数を使用しなければならないことに注意してください。
  </para>

  <para>
<!--
   Other things worth noting are happening here:
-->
他にも注意すべきことがここで発生します。

  <itemizedlist>
   <listitem>
    <para>
<!--
     There can only be one operator named, say, <literal>=</literal>
     and taking type <type>complex</type> for both operands.  In this
     case we don't have any other operator <literal>=</literal> for
     <type>complex</type>, but if we were building a practical data
     type we'd probably want <literal>=</literal> to be the ordinary
     equality operation for complex numbers (and not the equality of
     the absolute values).  In that case, we'd need to use some other
     operator name for <function>complex_abs_eq</>.
-->
例えば、<type>complex</type>型を両オペランドに取る<literal>=</literal>という名前の演算子を1つしか作成できません。
この場合、<type>complex</type>用の他の<literal>=</literal>演算子を持てません。
しかし、実際にデータ型を作成しているとしたら、おそらく、複素数の（絶対値の等価性ではない）通常の等価性演算を行う<literal>=</literal>を欲するでしょう。
この場合、<function>complex_abs_eq</>用の演算子名に別の名前を使用しなければなりません。
    </para>
   </listitem>

   <listitem>
    <para>
<!--
     Although <productname>PostgreSQL</productname> can cope with
     functions having the same SQL name as long as they have different
     argument data types, C can only cope with one global function
     having a given name.  So we shouldn't name the C function
     something simple like <filename>abs_eq</filename>.  Usually it's
     a good practice to include the data type name in the C function
     name, so as not to conflict with functions for other data types.
-->
<productname>PostgreSQL</productname>では異なる引数のデータ型であれば同じSQL名の演算子を使うことができますが、Cでは1つの名前で1つのグローバル関数が使えるだけです。
ですから、C関数は<filename>abs_eq</filename>のような単純な名前にするべきではありません。
通常は、他のデータ型の関数と衝突しないように、C関数名にデータ型名を入れておくことを勧めます。
    </para>
   </listitem>

   <listitem>
    <para>
<!-- 
     We could have made the SQL name
     of the function <filename>abs_eq</filename>, relying on
     <productname>PostgreSQL</productname> to distinguish it by
     argument data types from any other SQL function of the same name.
     To keep the example simple, we make the function have the same
     names at the C level and SQL level.
-->
<filename>abs_eq</filename>関数のSQL名は、<productname>PostgreSQL</productname>が引数のデータ型によって同じ名前を持つ他のSQL関数から区別してくれることを期待して作ることができます。
ここでは例を簡単にするために、関数にCレベルとSQLレベルで同じ名前を与えています。
    </para>
   </listitem>
  </itemizedlist>
  </para>

  <para>
<!--
   The next step is the registration of the support routine required
   by B-trees.  The example C code that implements this is in the same
   file that contains the operator functions.  This is how we declare
   the function:
-->
次のステップは、B-treeに必要なサポートルーチンの登録です。
これを実装するCコードは、演算子関数と同じファイルに入っています。
以下は、関数をどのように宣言するかを示します。

<programlisting>
CREATE FUNCTION complex_abs_cmp(complex, complex)
    RETURNS integer
    AS '<replaceable>filename</replaceable>'
    LANGUAGE C IMMUTABLE STRICT;
</programlisting>
  </para>

  <para>
<!--
   Now that we have the required operators and support routine,
   we can finally create the operator class:
-->
これまでで、必要な演算子およびサポートルーチンを持つようになりました。
最後に演算子クラスを作成することができます。

<programlisting><![CDATA[
CREATE OPERATOR CLASS complex_abs_ops
    DEFAULT FOR TYPE complex USING btree AS
        OPERATOR        1       < ,
        OPERATOR        2       <= ,
        OPERATOR        3       = ,
        OPERATOR        4       >= ,
        OPERATOR        5       > ,
        FUNCTION        1       complex_abs_cmp(complex, complex);
]]>
</programlisting>
  </para>

  <para>
<!--
   And we're done!  It should now be possible to create
   and use B-tree indexes on <type>complex</type> columns.
-->
これで終わりです！
これで<type>complex</type>列にB-treeインデックスを作って使用することが可能になったはずです。
  </para>

  <para>
<!--
   We could have written the operator entries more verbosely, as in:
-->
以下のように、演算子エントリをより冗長に記述することができます。
<programlisting>
        OPERATOR        1       &lt; (complex, complex) ,
</programlisting>
<!--
   but there is no need to do so when the operators take the same data type
   we are defining the operator class for.
-->
しかし、演算子が、演算子クラスの定義と同一のデータ型を取る場合、このような記述をする必要はありません。
  </para>

  <para>
<!--
   The above example assumes that you want to make this new operator class the
   default B-tree operator class for the <type>complex</type> data type.
   If you don't, just leave out the word <literal>DEFAULT</>.
-->
上記の例は、ユーザがこの新しい演算子クラスを<type>complex</type>データ型のデフォルトのB-tree演算子クラスにしようとしていると仮定しています。 
このようにしない場合、<literal>DEFAULT</>という単語を取り除いてください。
  </para>
 </sect2>

 <sect2 id="xindex-opfamily">
<!--
  <title>Operator Classes and Operator Families</title>
-->
  <title>演算子クラスと演算子族</title>

  <para>
<!--
   So far we have implicitly assumed that an operator class deals with
   only one data type.  While there certainly can be only one data type in
   a particular index column, it is often useful to index operations that
   compare an indexed column to a value of a different data type.  Also,
   if there is use for a cross-data-type operator in connection with an
   operator class, it is often the case that the other data type has a
   related operator class of its own.  It is helpful to make the connections
   between related classes explicit, because this can aid the planner in
   optimizing SQL queries (particularly for B-tree operator classes, since
   the planner contains a great deal of knowledge about how to work with them).
-->
これまでは暗黙的に、演算子クラスは1つのデータ型のみを扱うものと仮定してきました。
確かに特定のインデックス列にはたった1つのデータ型しかあり得ませんが、異なるデータ型の値とインデックス列の比較を行うインデックス操作はよく役に立ちます。
また、演算子クラスと関連したデータ型を跨る演算子を使用できる場合、他のデータ型は独自の関連した演算子クラスを持つことがよくあります。
SQL問い合わせを最適化する際にプランナを補助することができますので、関連したクラスを明示的に関連付けることは（どのように動作するかに関する知識をプランナは多く持ちますので、特にB-tree演算子クラスで）有用です。

  </para>

  <para>
<!--
   To handle these needs, <productname>PostgreSQL</productname>
   uses the concept of an <firstterm>operator
   family</><indexterm><primary>operator family</></indexterm>.
   An operator family contains one or more operator classes, and can also
   contain indexable operators and corresponding support functions that
   belong to the family as a whole but not to any single class within the
   family.  We say that such operators and functions are <quote>loose</>
   within the family, as opposed to being bound into a specific class.
   Typically each operator class contains single-data-type operators
   while cross-data-type operators are loose in the family.
-->
こうした要望に応えるために<productname>PostgreSQL</productname>は<firstterm>演算子族</>という概念を使用します。<indexterm><primary>演算子族</></indexterm>
演算子族は1つ以上の演算子クラスから構成されます。
また、演算子族全体に属するが、演算子族内の個々のクラスには属さないインデックス可能演算子や対応するサポート関数を含めることもできます。
こうした演算子や関数を、特定のクラスに束縛されていないことから、演算子族内で<quote>自由</>であると呼びます。
通常、各演算子クラスは1つのデータ型演算子を持ちますが、データ型を跨る演算子は演算子族内で自由になります。
  </para>

  <para>
<!--
   All the operators and functions in an operator family must have compatible
   semantics, where the compatibility requirements are set by the index
   method.  You might therefore wonder why bother to single out particular
   subsets of the family as operator classes; and indeed for many purposes
   the class divisions are irrelevant and the family is the only interesting
   grouping.  The reason for defining operator classes is that they specify
   how much of the family is needed to support any particular index.
   If there is an index using an operator class, then that operator class
   cannot be dropped without dropping the index &mdash; but other parts of
   the operator family, namely other operator classes and loose operators,
   could be dropped.  Thus, an operator class should be specified to contain
   the minimum set of operators and functions that are reasonably needed
   to work with an index on a specific data type, and then related but
   non-essential operators can be added as loose members of the operator
   family.
-->
演算子族内の演算子と関数はすべて、意味的な互換性を持たなければなりません。
この互換性についての必要条件はインデックスメソッドによって設定されます。
このため、演算子族の特定の部分集合を演算子クラスとして選び出す方法に疑問を持つかもしれません。
実際多くの目的では、クラスの分類は不適切で、演算子族が唯一の興味深いグループ化です。
演算子クラスを定義する理由は、どれだけ多くの演算子族が何らかのインデックスをサポートするために必要かを指定することです。
ある演算子クラスを使用するインデックスが存在する場合、演算子クラスはそのインデックスを削除しない限り削除することができません。
しかし、演算子族の他の部分、すなわち、他の演算子クラスや自由な演算子を削除することができます。
したがって、演算子クラスは、特定のデータ型に対するインデックスを操作する上で理論上必要となる最少の演算子と関数の集合を含むように指定すべきです。
そして、関連するが基本的なものではない演算子を演算子族の自由なメンバとして追加することができます。
  </para>

  <para>
<!--
   As an example, <productname>PostgreSQL</productname> has a built-in
   B-tree operator family <literal>integer_ops</>, which includes operator
   classes <literal>int8_ops</>, <literal>int4_ops</>, and
   <literal>int2_ops</> for indexes on <type>bigint</> (<type>int8</>),
   <type>integer</> (<type>int4</>), and <type>smallint</> (<type>int2</>)
   columns respectively.  The family also contains cross-data-type comparison
   operators allowing any two of these types to be compared, so that an index
   on one of these types can be searched using a comparison value of another
   type.  The family could be duplicated by these definitions:
-->
例えば<productname>PostgreSQL</productname>には<literal>integer_ops</>という組み込みのB-tree演算子族があります。
ここには<type>bigint</> (<type>int8</>)、<type>integer</> (<type>int4</>)、<type>smallint</> (<type>int2</>)型の列上へのインデックスにそれぞれ対応した<literal>int8_ops</>、<literal>int4_ops</>、<literal>int2_ops</>という演算子クラスが含まれています。
また、上記の型の内任意の2つの型を比較できるように、この演算子族にはデータ型を跨る比較演算子も含まれます。
このため、上記の型のいずれかに対するインデックスを他の型の値との比較の際に使用することができます。
この演算子族は以下の定義により多重化されています。

<programlisting><![CDATA[
CREATE OPERATOR FAMILY integer_ops USING btree;

CREATE OPERATOR CLASS int8_ops
DEFAULT FOR TYPE int8 USING btree FAMILY integer_ops AS
]]><!--
  &#045;- standard int8 comparisons
--><![CDATA[
  -- 標準int8比較
  OPERATOR 1 < ,
  OPERATOR 2 <= ,
  OPERATOR 3 = ,
  OPERATOR 4 >= ,
  OPERATOR 5 > ,
  FUNCTION 1 btint8cmp(int8, int8) ,
  FUNCTION 2 btint8sortsupport(internal) ;

CREATE OPERATOR CLASS int4_ops
DEFAULT FOR TYPE int4 USING btree FAMILY integer_ops AS
]]><!--
  &#045;- standard int4 comparisons
--><![CDATA[
  -- 標準int4比較
  OPERATOR 1 < ,
  OPERATOR 2 <= ,
  OPERATOR 3 = ,
  OPERATOR 4 >= ,
  OPERATOR 5 > ,
  FUNCTION 1 btint4cmp(int4, int4) ,
  FUNCTION 2 btint4sortsupport(internal) ;

CREATE OPERATOR CLASS int2_ops
DEFAULT FOR TYPE int2 USING btree FAMILY integer_ops AS
]]><!--
  &#045;- standard int2 comparisons
--><![CDATA[
  -- 標準int2比較
  OPERATOR 1 < ,
  OPERATOR 2 <= ,
  OPERATOR 3 = ,
  OPERATOR 4 >= ,
  OPERATOR 5 > ,
  FUNCTION 1 btint2cmp(int2, int2) ,
  FUNCTION 2 btint2sortsupport(internal) ;

ALTER OPERATOR FAMILY integer_ops USING btree ADD
]]><!--
  &#045;- cross-type comparisons int8 vs int2
--><![CDATA[
  -- 型を跨ぐ比較 int8対int2
  OPERATOR 1 < (int8, int2) ,
  OPERATOR 2 <= (int8, int2) ,
  OPERATOR 3 = (int8, int2) ,
  OPERATOR 4 >= (int8, int2) ,
  OPERATOR 5 > (int8, int2) ,
  FUNCTION 1 btint82cmp(int8, int2) ,

]]><!--
  &#045;- cross-type comparisons int8 vs int4
--><![CDATA[
  -- 型を跨ぐ比較 int8対int4
  OPERATOR 1 < (int8, int4) ,
  OPERATOR 2 <= (int8, int4) ,
  OPERATOR 3 = (int8, int4) ,
  OPERATOR 4 >= (int8, int4) ,
  OPERATOR 5 > (int8, int4) ,
  FUNCTION 1 btint84cmp(int8, int4) ,

]]><!--
  &#045;- cross-type comparisons int4 vs int2
--><![CDATA[
  -- 型を跨ぐ比較 int4対int2
  OPERATOR 1 < (int4, int2) ,
  OPERATOR 2 <= (int4, int2) ,
  OPERATOR 3 = (int4, int2) ,
  OPERATOR 4 >= (int4, int2) ,
  OPERATOR 5 > (int4, int2) ,
  FUNCTION 1 btint42cmp(int4, int2) ,

]]><!--
  &#045;- cross-type comparisons int4 vs int8
--><![CDATA[
  -- 型を跨ぐ比較 int4対int8
  OPERATOR 1 < (int4, int8) ,
  OPERATOR 2 <= (int4, int8) ,
  OPERATOR 3 = (int4, int8) ,
  OPERATOR 4 >= (int4, int8) ,
  OPERATOR 5 > (int4, int8) ,
  FUNCTION 1 btint48cmp(int4, int8) ,

]]><!--
  &#045;- cross-type comparisons int2 vs int8
--><![CDATA[
  -- 型を跨ぐ比較 int2対int8
  OPERATOR 1 < (int2, int8) ,
  OPERATOR 2 <= (int2, int8) ,
  OPERATOR 3 = (int2, int8) ,
  OPERATOR 4 >= (int2, int8) ,
  OPERATOR 5 > (int2, int8) ,
  FUNCTION 1 btint28cmp(int2, int8) ,

]]><!--
  &#045;- cross-type comparisons int2 vs int4
--><![CDATA[
  -- 型を跨ぐ比較 int2対int4
  OPERATOR 1 < (int2, int4) ,
  OPERATOR 2 <= (int2, int4) ,
  OPERATOR 3 = (int2, int4) ,
  OPERATOR 4 >= (int2, int4) ,
  OPERATOR 5 > (int2, int4) ,
  FUNCTION 1 btint24cmp(int2, int4) ;
]]>
</programlisting>

<!--
   Notice that this definition <quote>overloads</> the operator strategy and
   support function numbers: each number occurs multiple times within the
   family.  This is allowed so long as each instance of a
   particular number has distinct input data types.  The instances that have
   both input types equal to an operator class's input type are the
   primary operators and support functions for that operator class,
   and in most cases should be declared as part of the operator class rather
   than as loose members of the family.
-->
 この定義は演算子ストラテジ関数番号とサポート関数番号を<quote>上書き</>していることに注意してください。
各番号は演算子族内で複数回現れます。
特定番号のインスタンスがそれぞれ異なる入力データ型を持つ限り、これは許されます。
入力型の両方が演算子クラスの入力型と同じインスタンスは、演算子クラスの主演算子および主サポート関数であり、ほとんどの場合、演算子族の自由メンバではなく演算子クラスの一部として宣言しなければなりません。
  </para>

  <para>
<!--
   In a B-tree operator family, all the operators in the family must sort
   compatibly, meaning that the transitive laws hold across all the data types
   supported by the family: <quote>if A = B and B = C, then A = C</>,
   and <quote>if A &lt; B and B &lt; C, then A &lt; C</>.  Moreover, implicit
   or binary coercion casts between types represented in the operator family
   must not change the associated sort ordering.  For each
   operator in the family there must be a support function having the same
   two input data types as the operator.  It is recommended that a family be
   complete, i.e., for each combination of data types, all operators are
   included.  Each operator class should include just the non-cross-type
   operators and support function for its data type.
-->
B-tree演算子族では、演算子族内のすべての演算子はソート互換、つまり、演算子族でサポートされるデータ型すべてに渡って推移規則、<quote>A = BかつB = CならばA = C</>および<quote>A &lt; BかつB &lt; CならばA &lt; C</>を維持しなければなりません。
さらに、演算子族内で表現される型の間の暗黙的キャストとバイナリキャストは、関連するソート順序を変更してはいけません。
演算子族内の各演算子では、演算子と同じデータ型の2つのデータ型を取るサポート関数が存在しなければなりません。
演算子族を完結させること、つまり、データ型の組み合わせそれぞれに対する演算子をすべて含めることを推奨します。
各演算子クラスは、自身のデータ型に対してデータ型を跨らない演算子とサポート関数だけを含めなければなりません。
  </para>

  <para>
<!--
   To build a multiple-data-type hash operator family, compatible hash
   support functions must be created for each data type supported by the
   family.  Here compatibility means that the functions are guaranteed to
   return the same hash code for any two values that are considered equal
   by the family's equality operators, even when the values are of different
   types.  This is usually difficult to accomplish when the types have
   different physical representations, but it can be done in some cases.
   Furthermore, casting a value from one data type represented in the operator
   family to another data type also represented in the operator family via
   an implicit or binary coercion cast must not change the computed hash value.
   Notice that there is only one support function per data type, not one
   per equality operator.  It is recommended that a family be complete, i.e.,
   provide an equality operator for each combination of data types.
   Each operator class should include just the non-cross-type equality
   operator and the support function for its data type.
-->
複数データ型のハッシュ演算子族を構築するには、演算子族でサポートされるデータ型それぞれに対する互換性を持つハッシュサポート関数を作成しなければなりません。
ここで、互換性とは、関数がその演算子族の等価性演算子で等価であるとみなされる任意の2つの値では同一のハッシュコードが生成されることを保証することを意味します。
通常、型が異なる物理表現を持つ場合、これを実現することは困難ですが、実現可能な場合もあります。
さらに、暗黙的またはバイナリ変換により、ある演算子族で表現されるデータ型から同じ演算子族で表現されるデータ型に値をキャストしても、計算されたハッシュ値を変更してはいけません。
データ型1つに対してサポート関数が1つしか存在しないことに注意してください。
等価性演算子ごとに１つではありません。
演算子族を完結させること、つまり、データ型の組み合わせそれぞれに対する等価性演算子をすべて含めることを推奨します。
各演算子クラスは、自身のデータ型に対してデータ型を跨らない演算子とサポート関数だけを含めなければなりません。
  </para>

  <para>
<!--
   GiST, SP-GiST, and GIN indexes do not have any explicit notion of
   cross-data-type operations.  The set of operators supported is just
   whatever the primary support functions for a given operator class can
   handle.
-->
GiST、SP-GiST、GINインデックスではデータ型を跨る操作についての明示的な記法はありません。
サポートされる演算子群は単に指定演算子クラスの主サポート関数が扱うことができるものです。
  </para>

  <note>
   <para>
<!--
    Prior to <productname>PostgreSQL</productname> 8.3, there was no concept
    of operator families, and so any cross-data-type operators intended to be
    used with an index had to be bound directly into the index's operator
    class.  While this approach still works, it is deprecated because it
    makes an index's dependencies too broad, and because the planner can
    handle cross-data-type comparisons more effectively when both data types
    have operators in the same operator family.
-->
<productname>PostgreSQL</productname>8.3より前のバージョンでは演算子族という概念はありませんでした。
そのため、インデックスで使用する予定のデータ型を跨る演算子はすべて、インデックスの演算子クラスに結びつけなければなりませんでした。
この手法もまだ使用できますが、インデックスの依存性を広げる点、および、両データ型が同一演算子族内で演算子を持つ場合、プランナがデータ型を跨った比較をより効率的に扱うことができる点より、廃止予定です。
   </para>
  </note>
 </sect2>

 <sect2 id="xindex-opclass-dependencies">
<!--
  <title>System Dependencies on Operator Classes</title>
-->
  <title>システムの演算子クラスに対する依存性</title>

   <indexterm>
<!--
    <primary>ordering operator</primary>
-->
    <primary>順序付け演算子</primary>
   </indexterm>

  <para>
<!--
   <productname>PostgreSQL</productname> uses operator classes to infer the
   properties of operators in more ways than just whether they can be used
   with indexes.  Therefore, you might want to create operator classes
   even if you have no intention of indexing any columns of your data type.
-->
<productname>PostgreSQL</productname>は演算子クラスを、単にインデックスで使用できるかどうかだけではなく、多くの方式で演算子の性質を推定するために使用します。
したがって、データ型の列をインデックス付けするつもりがなくても、演算子クラスを作成した方が良い可能性があります。
  </para>

  <para>
<!--
   In particular, there are SQL features such as <literal>ORDER BY</> and
   <literal>DISTINCT</> that require comparison and sorting of values.
   To implement these features on a user-defined data type,
   <productname>PostgreSQL</productname> looks for the default B-tree operator
   class for the data type.  The <quote>equals</> member of this operator
   class defines the system's notion of equality of values for
   <literal>GROUP BY</> and <literal>DISTINCT</>, and the sort ordering
   imposed by the operator class defines the default <literal>ORDER BY</>
   ordering.
-->
具体的には、<literal>ORDER BY</>や<literal>DISTINCT</>など、値の比較とソートを必要とするSQL機能があります。
ユーザ定義のデータ型に対してこの機能を実装するために、<productname>PostgreSQL</productname>はそのデータ型用のデフォルトのB-tree演算子クラスを検索します。
この演算子クラスの<quote>等価判定</>メンバが、<literal>GROUP BY</>や<literal>DISTINCT</>用の値の等価性についてのシステムの意向を定義し、この演算子クラスによって強制されるソート順序が、デフォルトの<literal>ORDER BY</>順序を定義します。
  </para>

  <para>
<!--
   Comparison of arrays of user-defined types also relies on the semantics
   defined by the default B-tree operator class.
-->
また、ユーザ定義型の配列の比較は、デフォルトのB-tree演算子クラスによって定義されるセマンティックに依存します。
  </para>

  <para>
<!--
   If there is no default B-tree operator class for a data type, the system
   will look for a default hash operator class.  But since that kind of
   operator class only provides equality, in practice it is only enough
   to support array equality.
-->
データ型用のデフォルトのB-tree演算子クラスが存在しないと、システムはデフォルトのハッシュ演算子クラスを検索します。
しかし、この種類の演算子クラスは等価性のみを提供しますので、実際にこれは、配列等価性のサポートだけに対して十分です。
  </para>

  <para>
<!--
   When there is no default operator class for a data type, you will get
   errors like <quote>could not identify an ordering operator</> if you
   try to use these SQL features with the data type.
-->
データ型用のデフォルトの演算子クラスが存在しない場合に、こうしたSQL機能をデータ型に使用しようとすると、<quote>順序付け演算子を識別できなかった</>といったエラーとなります。
  </para>

   <note>
    <para>
<!--
     In <productname>PostgreSQL</productname> versions before 7.4,
     sorting and grouping operations would implicitly use operators named
     <literal>=</>, <literal>&lt;</>, and <literal>&gt;</>.  The new
     behavior of relying on default operator classes avoids having to make
     any assumption about the behavior of operators with particular names.
-->
<productname>PostgreSQL</productname>バージョン7.4より前まででは、ソートやグループ化操作は暗黙的に<literal>=</>、<literal>&lt;</>、<literal>&gt;</>という名前の演算子を使用していました。
この新しい、デフォルトの演算子クラスに依存する振舞いによって、特定の名前を持つ演算子の振舞いについて何らかの仮定を立てることを防止しています。

    </para>
   </note>

  <para>
<!--
   Another important point is that an operator that
   appears in a hash operator family is a candidate for hash joins,
   hash aggregation, and related optimizations.  The hash operator family
   is essential here since it identifies the hash function(s) to use.
-->
他の重要な点として、ハッシュ演算子族内に現れる演算子がハッシュ結合、ハッシュ集約、関連する最適化の候補となることがあります。
使用するハッシュ関数を識別するため、ここでのハッシュ演算子族は基本的なものです。

  </para>
 </sect2>

 <sect2 id="xindex-ordering-ops">
<!--
  <title>Ordering Operators</title>
-->
  <title>順序付け演算子</title>

  <para>
<!--
   Some index access methods (currently, only GiST) support the concept of
   <firstterm>ordering operators</>.  What we have been discussing so far
   are <firstterm>search operators</>.  A search operator is one for which
   the index can be searched to find all rows satisfying
   <literal>WHERE</>
   <replaceable>indexed_column</>
   <replaceable>operator</>
   <replaceable>constant</>.
   Note that nothing is promised about the order in which the matching rows
   will be returned.  In contrast, an ordering operator does not restrict the
   set of rows that can be returned, but instead determines their order.
   An ordering operator is one for which the index can be scanned to return
   rows in the order represented by
   <literal>ORDER BY</>
   <replaceable>indexed_column</>
   <replaceable>operator</>
   <replaceable>constant</>.
   The reason for defining ordering operators that way is that it supports
   nearest-neighbor searches, if the operator is one that measures distance.
   For example, a query like
-->
一部のインデックスアクセスメソッド（現時点ではGiSTのみ）は<firstterm>順序付け演算子</>という概念をサポートします。
これまで説明してきたものは<firstterm>検索演算子</>でした。
検索演算子は、<literal>WHERE</> <replaceable>indexed_column</> <replaceable>operator</> <replaceable>constant</>を満たすすべての行を見つけるために、インデックスを検索可能にするためのものです。
一致した行がどの順序で返されるかについては保証がないことに注意してください。
反対に、順序付け演算子は返すことができる行集合を限定しませんが、その順序を決定します。
順序付け演算子は、<literal>ORDER BY</> <replaceable>indexed_column</> <replaceable>operator</> <replaceable>constant</>で表される順序で行を返すために、インデックスをスキャン可能にするためのものです。
このように順序付け演算子を定義する理由は、その演算子が距離を測るものであれば最近傍検索をサポートすることです。
例えば以下のような問い合わせを考えます。
<programlisting><![CDATA[
SELECT * FROM places ORDER BY location <-> point '(101,456)' LIMIT 10;
]]>
</programlisting>
<!--
   finds the ten places closest to a given target point.  A GiST index
   on the location column can do this efficiently because
   <literal>&lt;-&gt;</> is an ordering operator.
-->
これは指定した対象地点に最も近い10地点を見つけ出します。
<literal>&lt;-&gt;</>は順序付け演算子ですので、location列上のGiSTインデックスは、これを効率的に行うことができます。
  </para>

  <para>
<!--
   While search operators have to return Boolean results, ordering operators
   usually return some other type, such as float or numeric for distances.
   This type is normally not the same as the data type being indexed.
   To avoid hard-wiring assumptions about the behavior of different data
   types, the definition of an ordering operator is required to name
   a B-tree operator family that specifies the sort ordering of the result
   data type.  As was stated in the previous section, B-tree operator families
   define <productname>PostgreSQL</productname>'s notion of ordering, so
   this is a natural representation.  Since the point <literal>&lt;-&gt;</>
   operator returns <type>float8</>, it could be specified in an operator
   class creation command like this:
-->
検索演算子が論理値結果を返さなければなりませんが、順序付け演算子は普通、距離を表す浮動小数点や数値型など、何らかの他の型を返します。
この型は通常、インデックス対象のデータ型と同じにはなりません。
異なるデータ型の動作についての固定化された前提を防ぐために、順序付け演算子の定義では、結果データ型のソート順序を指定するB-tree演算子族の名前を必要とします。
前節で述べたように、B-tree演算子族は<productname>PostgreSQL</productname>の順序付け記法を定義します。
ですのでこれは自然な表現です。
pointに対する<literal>&lt;-&gt;</>演算子は<type>float8</>を返しますので、演算子クラスを作成するコマンド内で以下のように指定します。

<programlisting><![CDATA[
OPERATOR 15    <-> (point, point) FOR ORDER BY float_ops
]]>
</programlisting>
<!--
   where <literal>float_ops</> is the built-in operator family that includes
   operations on <type>float8</>.  This declaration states that the index
   is able to return rows in order of increasing values of the
   <literal>&lt;-&gt;</> operator.
-->
ここで<literal>float_ops</>は、<type>float8</>に対する操作を含んだ組込みの演算子族です。
この宣言は、インデックスが<literal>&lt;-&gt;</>演算子の値が増加する方向で行を返すことができることを表しています。
  </para>
 </sect2>

 <sect2 id="xindex-opclass-features">
<!--
  <title>Special Features of Operator Classes</title>
-->
  <title>演算子クラスの特殊な機能</title>

  <para>
<!--
   There are two special features of operator classes that we have
   not discussed yet, mainly because they are not useful
   with the most commonly used index methods.
-->
演算子クラスには、まだ説明していない2つの特殊な機能があります。
説明していない主な理由は、最もよく使用するインデックスメソッドでは、これらがあまり有用ではないためです。
  </para>

  <para>
<!--
   Normally, declaring an operator as a member of an operator class
   (or family) means that the index method can retrieve exactly the set of rows
   that satisfy a <literal>WHERE</> condition using the operator.  For example:
-->
通常、演算子を演算子クラス（または演算子族）のメンバとして宣言すると、インデックスメソッドでその演算子を使用して、<literal>WHERE</>条件を満たす行の集合を正確に抽出することができます。
以下に例を示します。
<programlisting>
SELECT * FROM table WHERE integer_column &lt; 4;
</programlisting>
<!--
   can be satisfied exactly by a B-tree index on the integer column.
   But there are cases where an index is useful as an inexact guide to
   the matching rows.  For example, if a GiST index stores only bounding boxes
   for geometric objects, then it cannot exactly satisfy a <literal>WHERE</>
   condition that tests overlap between nonrectangular objects such as
   polygons.  Yet we could use the index to find objects whose bounding
   box overlaps the bounding box of the target object, and then do the
   exact overlap test only on the objects found by the index.  If this
   scenario applies, the index is said to be <quote>lossy</> for the
   operator.  Lossy index searches are implemented by having the index
   method return a <firstterm>recheck</> flag when a row might or might
   not really satisfy the query condition.  The core system will then
   test the original query condition on the retrieved row to see whether
   it should be returned as a valid match.  This approach works if
   the index is guaranteed to return all the required rows, plus perhaps
   some additional rows, which can be eliminated by performing the original
   operator invocation.  The index methods that support lossy searches
   (currently, GiST, SP-GiST and GIN) allow the support functions of individual
   operator classes to set the recheck flag, and so this is essentially an
   operator-class feature.
-->
この式は、整数列にB-treeインデックスを使用することにより、正確に満たすことができます。
しかし、一致する行へ厳密ではなくとも導く手段としてインデックスが有用である場合があります。
例えば、GiSTインデックスで、幾何オブジェクトの境界ボックスのみを格納したとします。
その結果、多角形のような長方形でないオブジェクトとの重なりをテストするWHERE条件は正確に満たすことができません。
もっとも、このインデックスを使用して、対象オブジェクトの境界ボックスに重なる境界ボックスを持つオブジェクトを検索し、さらに、検索されたオブジェクトのみに対して正確に重なるかどうかをテストすることはできます。
この筋書きを適用する場合、インデックスは演算子に対して<quote>非可逆</>と言われます。
非可逆インデックス検索は、ある行が問い合わせ条件を実際に満足するかしないかの時に<firstterm>recheck</>フラグを返すインデックスメソッドを持つことで実装されます。
コアシステムは、そこで有効なマッチとして行が返されるか否かを確認するために、抽出された行に対して元の問い合わせ条件を検査します。
この手法はインデックスがすべての必要な行を返すことが保証された上で、元の演算子呼び出しを実行することによって除外することができる、いくつか余分な行を返す可能性がある場合に動作します。
非可逆検索を提供するインデックス方式（現時点ではGiST、SP-GiSTおよびGIN）は個々の演算子クラスのサポート関数がrecheckフラグを設定することを許可します。
このためこれは原則的に演算子クラスの機能です。
  </para>

  <para>
<!--
   Consider again the situation where we are storing in the index only
   the bounding box of a complex object such as a polygon.  In this
   case there's not much value in storing the whole polygon in the index
   entry &mdash; we might as well store just a simpler object of type
   <type>box</>.  This situation is expressed by the <literal>STORAGE</>
   option in <command>CREATE OPERATOR CLASS</>: we'd write something like:
-->
再度、多角形のような複雑なオブジェクトの境界ボックスのみをインデックスに格納している状況を考えてみてください。
この場合、インデックスエントリに多角形全体を格納するのは、それほど有用なことではありません。
単に、より単純な<literal>box</>型のオブジェクトを格納した方が良いかもしれません。
このような状況は、<command>CREATE OPERATOR CLASS</>の<literal>STORAGE</>オプションによって表現することができます。
例えば、以下のように記述します。

<programlisting>
CREATE OPERATOR CLASS polygon_ops
    DEFAULT FOR TYPE polygon USING gist AS
        ...
        STORAGE box;
</programlisting>

<!--
   At present, only the GiST and GIN index methods support a
   <literal>STORAGE</> type that's different from the column data type.
   The GiST <function>compress</> and <function>decompress</> support
   routines must deal with data-type conversion when <literal>STORAGE</>
   is used.  In GIN, the <literal>STORAGE</> type identifies the type of
   the <quote>key</> values, which normally is different from the type
   of the indexed column &mdash; for example, an operator class for
   integer-array columns might have keys that are just integers.  The
   GIN <function>extractValue</> and <function>extractQuery</> support
   routines are responsible for extracting keys from indexed values.
-->
現時点では、GiSTインデックスメソッドとGINインデックスメソッドが、列のデータ型と異なる<literal>STORAGE</>型をサポートしています。
<literal>STORAGE</>が使用された場合、GiSTの<function>compress</>および<function>decompress</>サポートルーチンは、データ型を変換する必要があります。
GINでは、<literal>STORAGE</>型は<quote>キー</>の値の型を識別します。
通常これはインデックス付けされる列の型とは異なります。
例えば、整数配列の列用の演算子クラスは単なる整数をキーとして持つかもしれません。
GINの<literal>extractValue</>および<literal>extractQuery</>サポートルーチンが、インデックス付けされた値からキーを取り出す責任を負います。
  </para>
 </sect2>

</sect1>
