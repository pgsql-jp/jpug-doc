<appendix id="glossary">
<!--
 <title>Glossary</title>
-->
 <title>用語集</title>
 <para>
<!--
  This is a list of terms and their meaning in the context of
  <productname>PostgreSQL</productname> and relational database
  systems in general.
-->
これは<productname>PostgreSQL</productname>と一般的なリレーショナルデータベースシステムにおける用語とその意味のリストです。
 </para>

 <glosslist>
  <glossentry id="glossary-acid">
   <glossterm>ACID</glossterm>
   <glossdef>
    <para>
<!--
     <glossterm linkend="glossary-atomicity">Atomicity</glossterm>,
     <glossterm linkend="glossary-consistency">Consistency</glossterm>,
     <glossterm linkend="glossary-isolation">Isolation</glossterm>, and
     <glossterm linkend="glossary-durability">Durability</glossterm>.
     This set of properties of database transactions is intended to
     guarantee validity in concurrent operation and even in event of
     errors, power failures, etc.
-->
<glossterm linkend="glossary-atomicity">Atomicity（原子性）</glossterm>、<glossterm linkend="glossary-consistency">Consistency（一貫性）</glossterm>、<glossterm linkend="glossary-isolation">Isolation（独立性）</glossterm>、<glossterm linkend="glossary-durability">Durability（永続性）</glossterm>。
このデータベーストランザクションの性質の集合は、並列操作及び電源障害などによるエラーの際にも正当性を保証することを意図しています。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-aggregate">
<!--
   <glossterm>Aggregate function (routine)</glossterm>
-->
   <glossterm>Aggregate function【集約関数】（ルーチン）</glossterm>
   <glossdef>
    <para>
<!--
     A <glossterm linkend="glossary-function">function</glossterm> that
     combines (<firstterm>aggregates</firstterm>) multiple input values,
     for example by counting, averaging or adding,
     yielding a single output value.
-->
たとえば数え上げ、平均、加算によって複数の入力値をまとめて（<firstterm>集約</firstterm>して）、単一の値を出力する<glossterm linkend="glossary-function">関数</glossterm>。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="functions-aggregate"/>.
-->
詳細については<xref linkend="functions-aggregate"/>を参照してください。
    </para>
    <glossseealso otherterm="glossary-window-function" />
   </glossdef>
  </glossentry>

  <glossentry id="glossary-am">
<!--
   <glossterm>Access Method</glossterm>
-->
   <glossterm>Access Method【アクセスメソッド】</glossterm>
   <glossdef>
    <para>
<!--
     Interfaces which <productname>PostgreSQL</productname> use in order to
     access data in tables and indexes.  This abstraction allows for adding
     support for new types of data storage.
-->
テーブルとインデックス内のデータにアクセスするために<productname>PostgreSQL</productname>が使用するインタフェース。
この抽象化により、新しい種類のデータストレージのサポートを追加できます。
    </para>
    <para>
<!--
     For more information, see <xref linkend="tableam" /> and
     <xref linkend="indexam" />.
-->
詳細については<xref linkend="tableam" />と<xref linkend="indexam" />を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry>
<!--
   <glossterm>Analytic function</glossterm>
-->
   <glossterm>Analytic function【分析関数】</glossterm>
   <glosssee otherterm="glossary-window-function" />
  </glossentry>

  <glossentry id="glossary-analyze">
<!--
   <glossterm>Analyze (operation)</glossterm>
-->
   <glossterm>Analyze【アナライズ】（操作）</glossterm>
   <glossdef>
    <para>
<!--
     The act of collecting statistics from data in
     <glossterm linkend="glossary-table">tables</glossterm>
     and other <glossterm linkend="glossary-relation">relations</glossterm>
     to help the <glossterm linkend="glossary-planner">query planner</glossterm>
     to make decisions about how to execute
     <glossterm linkend="glossary-query">queries</glossterm>.
-->
<glossterm linkend="glossary-planner">問い合わせプランナ</glossterm>が<glossterm linkend="glossary-query">問い合わせ</glossterm>をどのように実行するかの決定を支援するために<glossterm linkend="glossary-table">テーブル</glossterm>と他の<glossterm linkend="glossary-relation">リレーション</glossterm>から統計情報データを収集すること。
    </para>
    <para>
<!--
     (Don't confuse this term with the <literal>ANALYZE</literal> option
     to the <xref linkend="sql-explain"/> command.)
-->
（この用語を、<xref linkend="sql-explain"/>コマンドの<literal>ANALYZE</literal>オプションと混同しないでください。）
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-analyze"/>.
-->
詳細については<xref linkend="sql-analyze"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-aio">
<!--
   <glossterm>Asynchronous <acronym>I/O</acronym></glossterm>
-->
   <glossterm>Asynchronous <acronym>I/O</acronym>【非同期<acronym>I/O</acronym>】</glossterm>
   <acronym>AIO</acronym>
   <indexterm>
    <primary>Asynchronous <acronym>I/O</acronym></primary>
   </indexterm>
   <indexterm>
    <primary>非同期<acronym>I/O</acronym></primary>
   </indexterm>
   <glossdef>
    <para>
<!--
     Asynchronous <acronym>I/O</acronym> (<acronym>AIO</acronym>) describes
     performing <acronym>I/O</acronym> in a non-blocking way (asynchronously),
     in contrast to synchronous <acronym>I/O</acronym>, which blocks for the
     entire duration of the <acronym>I/O</acronym>.
-->
非同期<acronym>I/O</acronym>（<acronym>AIO</acronym>）は、<acronym>I/O</acronym>の全期間にわたってブロックする同期<acronym>I/O</acronym>とは対照的に、ブロッキングしない方法（非同期）で<acronym>I/O</acronym>を実行することを指します。
    </para>
    <para>
<!--
     With <acronym>AIO</acronym>, starting an <acronym>I/O</acronym> operation
     is separated from waiting for the result of the operation, allowing
     multiple <acronym>I/O</acronym> operations to be initiated concurrently,
     as well as performing <acronym>CPU</acronym> heavy operations
     concurrently with <acronym>I/O</acronym>. The price for that increased
     concurrency is increased complexity.
-->
<acronym>AIO</acronym>では、<acronym>I/O</acronym>操作の開始とその操作の結果を待つことが分離されており、複数の<acronym>I/O</acronym>操作を同時に開始したり、<acronym>I/O</acronym>と同時に<acronym>CPU</acronym>負荷の高い操作を実行したりすることができます。
この並行性の向上の代償は、複雑さの増加です。
    </para>
    <glossseealso otherterm="glossary-io" />
   </glossdef>
  </glossentry>

  <glossentry id="glossary-atomic">
<!--
   <glossterm>Atomic</glossterm>
-->
   <glossterm>Atomic【原子的】</glossterm>
   <glossdef>
    <para>
<!--
     In reference to a <glossterm linkend="glossary-datum">datum</glossterm>:
     the fact that its value cannot be broken down into smaller
     components.
-->
<glossterm linkend="glossary-datum">datum</glossterm>との関連においては、値がより小さな構成要素に分解できないこと。
    </para>
   </glossdef>
   <glossdef>
    <para>
<!--
     In reference to a
     <glossterm linkend="glossary-transaction">database transaction</glossterm>:
     see <glossterm linkend="glossary-atomicity">atomicity</glossterm>.
-->
<glossterm linkend="glossary-transaction">データベーストランザクション</glossterm>との関連においては、<glossterm linkend="glossary-atomicity">原子性</glossterm>を参照のこと。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-atomicity">
<!--
   <glossterm>Atomicity</glossterm>
-->
   <glossterm>Atomicity【原子性】</glossterm>
   <glossdef>
    <para>
<!--
     The property of a <glossterm linkend="glossary-transaction">transaction</glossterm>
     that either all its operations complete as a single unit or none do.
     In addition, if a system failure occurs during the execution of a
     transaction, no partial results are visible after recovery.
     This is one of the <acronym>ACID</acronym> properties.
-->
すべての操作が不可分なものとして完了するか、あるいは何もなかったことになるかのどちらかで終わる<glossterm linkend="glossary-transaction">トランザクション</glossterm>の性質。
加えて、トランザクションの実行中にシステム障害が起きても、リカバリ後には中途半端な結果が見えるようなことはないこと。
これは<acronym>ACID</acronym>特性の一部です。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-attribute">
<!--
   <glossterm>Attribute</glossterm>
-->
   <glossterm>Attribute【属性】</glossterm>
   <glossdef>
    <para>
<!--
     An element with a certain name and data type found within a
     <glossterm linkend="glossary-tuple">tuple</glossterm>.
-->
<glossterm linkend="glossary-tuple">タプル</glossterm>内にある特定の名前とデータ型を持つ要素。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-autovacuum">
<!--
   <glossterm>Autovacuum (process)</glossterm>
-->
   <glossterm>Autovacuum【自動バキューム】（プロセス）</glossterm>
   <glossdef>
    <para>
<!--
     A set of background processes that routinely perform
     <glossterm linkend="glossary-vacuum">vacuum</glossterm>
     and <glossterm linkend="glossary-analyze">analyze</glossterm> operations.
     The <glossterm linkend="glossary-auxiliary-proc">auxiliary process</glossterm>
     that coordinates the work and is always present (unless autovacuum
     is disabled) is known as the <firstterm>autovacuum launcher</firstterm>,
     and the processes that carry out the tasks are known as the
     <firstterm>autovacuum workers</firstterm>.
-->
<glossterm linkend="glossary-vacuum">バキューム</glossterm>及び<glossterm linkend="glossary-analyze">アナライズ</glossterm>操作を定期的に実行する一連のバックグラウンドプロセス。
作業を調整し、（自動バキュームが無効になっていない限り）常に存在する<glossterm linkend="glossary-auxiliary-proc">補助プロセス</glossterm>は<firstterm>自動バキュームランチャ</firstterm>と呼ばれ、タスクを実行するプロセスは<firstterm>自動バキュームワーカー</firstterm>と呼ばれます。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="autovacuum"/>.
-->
詳細については<xref linkend="autovacuum"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-auxiliary-proc">
<!--
   <glossterm>Auxiliary process</glossterm>
-->
   <glossterm>Auxiliary process【補助プロセス】</glossterm>
   <glossdef>
    <para>
<!--
     A process within an <glossterm linkend="glossary-instance">instance</glossterm>
     that is in charge of some specific background task for the instance.
     The auxiliary processes consist of <!&#45;- in alphabetical order &#45;->
-->
<glossterm linkend="glossary-instance">インスタンス</glossterm>内のプロセスで、インスタンスの特定のバックグラウンドタスクを担当します。
補助プロセスは次のもので構成されます。
     <!-- NB: In the code, the autovac launcher doesn't use the auxiliary
          process scaffolding; however it does behave as one so we list it
          here anyway. In addition, logger isn't connected to shared memory so
          most code outside postmaster.c doesn't even consider it a "proc" in
          the first place.
          -->
     <!-- 注:コードでは、autovacランチャは補助プロセスのscaffoldを使用しませんが、scaffoldとして動作するので、ここでリストします。
          さらに、loggerは共有メモリに接続されていないため、postmaster.c以外のほとんどのコードでは、最初から"proc"とは見なされません。
          -->
<!--
     the <glossterm linkend="glossary-autovacuum">autovacuum launcher</glossterm>
     (but not the autovacuum workers),
     the <glossterm linkend="glossary-background-writer">background writer</glossterm>,
     the <glossterm linkend="glossary-checkpointer">checkpointer</glossterm>,
     the <glossterm linkend="glossary-logger">logger</glossterm>,
     the <glossterm linkend="glossary-startup-process">startup process</glossterm>,
     the <glossterm linkend="glossary-wal-archiver">WAL archiver</glossterm>,
     the <glossterm linkend="glossary-wal-receiver">WAL receiver</glossterm>
     (but not the <glossterm linkend="glossary-wal-sender">WAL senders</glossterm>),
     the <glossterm linkend="glossary-wal-summarizer">WAL summarizer</glossterm>,
     and the <glossterm linkend="glossary-wal-writer">WAL writer</glossterm>.
-->
<glossterm linkend="glossary-autovacuum">自動バキュームランチャ</glossterm>（自動バキュームワーカーではありません）、<glossterm linkend="glossary-background-writer">バックグラウンドライタ</glossterm>、<glossterm linkend="glossary-checkpointer">チェックポインタ</glossterm>、<glossterm linkend="glossary-logger">ロガー</glossterm>、<glossterm linkend="glossary-startup-process">スタートアッププロセス</glossterm>、<glossterm linkend="glossary-wal-archiver">WALアーカイバ</glossterm>、<glossterm linkend="glossary-wal-receiver">WAL受信</glossterm>（<glossterm linkend="glossary-wal-sender">WAL送信</glossterm>ではありません）、<glossterm linkend="glossary-wal-summarizer">WAL要約処理</glossterm>、<glossterm linkend="glossary-wal-writer">WALライタ</glossterm>。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-backend">
<!--
   <glossterm>Backend (process)</glossterm>
-->
   <glossterm>Backend【バックエンド】（プロセス）</glossterm>
   <glossdef>
    <para>
<!--
     Process of an <glossterm linkend="glossary-instance">instance</glossterm>
     which acts on behalf of a <glossterm linkend="glossary-session">client session</glossterm>
     and handles its requests.
-->
<glossterm linkend="glossary-session">クライアントセッション</glossterm>のために活動し、その要求を処理する<glossterm linkend="glossary-instance">インスタンス</glossterm>のプロセス。
    </para>
    <para>
<!--
     (Don't confuse this term with the similar terms
     <glossterm linkend="glossary-background-worker">Background Worker</glossterm> or
     <glossterm linkend="glossary-background-writer">Background Writer</glossterm>).
-->
（この用語を、類似の用語である<glossterm linkend="glossary-background-worker">バックグラウンドワーカー</glossterm>や<glossterm linkend="glossary-background-writer">バックグラウンドライタ</glossterm>と混同しないでください。）
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-background-worker">
<!--
   <glossterm>Background worker (process)</glossterm>
-->
   <glossterm>Background worker【バックグラウンドワーカー】（プロセス）</glossterm>
   <glossdef>
    <para>
<!--
     Process within an <glossterm linkend="glossary-instance">instance</glossterm>,
     which runs system- or user-supplied code.
     Serves as infrastructure for several features in
     <productname>PostgreSQL</productname>, such as
     <glossterm linkend="glossary-replication">logical replication</glossterm>
     and <glossterm linkend="glossary-parallel-query">parallel queries</glossterm>.
     In addition, <glossterm linkend="glossary-extension">Extensions</glossterm> can add
     custom background worker processes.
-->
システムあるいはユーザが提供するコードを実行する<glossterm linkend="glossary-instance">インスタンス</glossterm>内のプロセス。
<glossterm linkend="glossary-replication">論理レプリケーション</glossterm>、<glossterm linkend="glossary-parallel-query">パラレルクエリ</glossterm>といった<productname>PostgreSQL</productname>の機能の基盤を供給します。
更に、<glossterm linkend="glossary-extension">拡張</glossterm>によってカスタムバックグラウンドワーカープロセスを追加することができます。
   </para>
   <para>
<!--
    For more information, see
    <xref linkend="bgworker"/>.
-->
詳細については<xref linkend="bgworker"/>を参照してください。
   </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-background-writer">
<!--
   <glossterm>Background writer (process)</glossterm>
-->
   <glossterm>Background writer【バックグラウンドライタ】（プロセス）</glossterm>
   <glossdef>
    <para>
<!--
     An <glossterm linkend="glossary-auxiliary-proc">auxiliary process</glossterm>
     that writes dirty
     <glossterm linkend="glossary-data-page">data pages</glossterm> from
     <glossterm linkend="glossary-shared-memory">shared memory</glossterm> to
     the file system.  It wakes up periodically, but works only for a short
     period in order to distribute its expensive <acronym>I/O</acronym>
     activity over time to avoid generating larger
     <acronym>I/O</acronym> peaks which could block other processes.
-->
<glossterm linkend="glossary-shared-memory">共有メモリ</glossterm>からファイルシステムに、変更された<glossterm linkend="glossary-data-page">データページ</glossterm>を書き出す<glossterm linkend="glossary-auxiliary-proc">補助プロセス</glossterm>。
他のプロセスをブロックしてしまうより大きな<acronym>I/O</acronym>ピークを引き起こしてしまうことを避けて、高価な<acronym>I/O</acronym>活動を時系列で平均化するために、定期的に目覚めて短い期間だけ活動します。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="runtime-config-resource-background-writer"/>.
-->
詳細については<xref linkend="runtime-config-resource-background-writer"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-basebackup">
<!--
   <glossterm>Base Backup</glossterm>
-->
   <glossterm>Base Backup【ベースバックアップ】</glossterm>
   <glossdef>
    <para>
<!--
     A binary copy of all
     <glossterm linkend="glossary-db-cluster">database cluster</glossterm>
     files. It is generated by the tool <xref linkend="app-pgbasebackup"/>.
     In combination with WAL files it can be used as the starting point
     for recovery, log shipping, or streaming replication.
-->
<glossterm linkend="glossary-db-cluster">database cluster</glossterm>のファイルをすべてバイナリコピーします。
<xref linkend="app-pgbasebackup"/>ツールにより生成されます。
WALファイルと組み合わせてリカバリ、ログシッピング、またはストリーミングレプリケーションの開始点として使用できます。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-bloat">
<!--
   <glossterm>Bloat</glossterm>
-->
   <glossterm>Bloat【ブロート】</glossterm>
   <glossdef>
    <para>
<!--
     Space in data pages which does not contain current row versions,
     such as unused (free) space or outdated row versions.
-->
未使用（自由）空間、あるいは古くなった行バージョンのように、現在の行バージョンを含まないデータページ中の空間。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-bootstrap-superuser">
<!--
   <glossterm>Bootstrap superuser</glossterm>
-->
   <glossterm>Bootstrap superuser【ブートストラップスーパーユーザ】</glossterm>
   <glossdef>
    <para>
<!--
     The first <glossterm linkend="glossary-user">user</glossterm> initialized in a
     <glossterm linkend="glossary-db-cluster">database cluster</glossterm>.
-->
<glossterm linkend="glossary-db-cluster">データベースクラスタ</glossterm>で初期化された最初の<glossterm linkend="glossary-user">ユーザ</glossterm>。
    </para>
    <para>
<!--
     This user owns all system catalog tables in each database.  It is also the role
     from which all granted permissions originate.  Because of these things, this
     role may not be dropped.
-->
このユーザは、各データベースでシステムカタログテーブルをすべて所有しています。
また、すべての許可された権限の発生元のロールでもあります。
これらのことから、このロールは削除できません。
    </para>
    <para>
<!--
     This role also behaves as a normal
     <glossterm linkend="glossary-database-superuser">database superuser</glossterm>,
     and its superuser status cannot be removed.
-->
このロールも通常の<glossterm linkend="glossary-database-superuser">データベーススーパーユーザ</glossterm>として動作し、そのスーパーユーザ状態は削除できません。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-buffer-access-strategy">
<!--
   <glossterm>Buffer Access Strategy</glossterm>
-->
   <glossterm>Buffer Access Strategy【バッファアクセスストラテジ】</glossterm>
   <glossdef>
    <para>
<!--
     Some operations will access a large number of
     <glossterm linkend="glossary-data-page">pages</glossterm>.  A
     <firstterm>Buffer Access Strategy</firstterm> helps to prevent these
     operations from evicting too many pages from
     <glossterm linkend="glossary-shared-memory">shared buffers</glossterm>.
-->
いくつかの操作は大量の<glossterm linkend="glossary-data-page">ページ</glossterm>にアクセスします。
<firstterm>バッファアクセスストラテジ</firstterm>は、これらの操作が<glossterm linkend="glossary-shared-memory">共有バッファ</glossterm>から多くのページを追い出すのを防ぐのに役立ちます。
    </para>
    <para>
<!--
     A Buffer Access Strategy sets up references to a limited number of
     <glossterm linkend="glossary-shared-memory">shared buffers</glossterm> and
     reuses them circularly.  When the operation requires a new page, a victim
     buffer is chosen from the buffers in the strategy ring, which may require
     flushing the page's dirty data and possibly also unflushed
     <glossterm linkend="glossary-wal">WAL</glossterm> to permanent storage.
-->
バッファアクセスストラテジは、限られた数の<glossterm linkend="glossary-shared-memory">共有バッファ</glossterm>への参照を設定し、循環的に再利用します。
操作が新しいページを必要とすると、ストラテジリング内のバッファから犠牲バッファが選択されます。
これは、ページのダーティデータとフラッシュされていない<glossterm linkend="glossary-wal">WAL</glossterm>を永続的なストレージにフラッシュする必要がある場合もあります。
    </para>
    <para>
<!--
     Buffer Access Strategies are used for various operations such as
     sequential scans of large tables, <command>VACUUM</command>,
     <command>COPY</command>, <command>CREATE TABLE AS SELECT</command>,
     <command>ALTER TABLE</command>, <command>CREATE DATABASE</command>,
     <command>CREATE INDEX</command>, and <command>CLUSTER</command>.
-->
バッファアクセスストラテジは、大きなテーブルのシーケンシャルスキャン、<command>VACUUM</command>、<command>COPY</command>、<command>CREATE TABLE AS SELECT</command>、<command>ALTER TABLE</command>、<command>CREATE DATABASE</command>、<command>CREATE INDEX</command>、<command>CLUSTER</command>など、さまざまな操作に使用されます。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-cast">
<!--
   <glossterm>Cast</glossterm>
-->
   <glossterm>Cast【キャスト】</glossterm>
   <glossdef>
    <para>
<!--
     A conversion of a <glossterm linkend="glossary-datum">datum</glossterm>
     from its current data type to another data type.
-->
<glossterm linkend="glossary-datum">datum</glossterm>を現在のデータ型から別のデータ型に変換すること。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-createcast"/>.
-->
詳細については<xref linkend="sql-createcast"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-catalog">
<!--
   <glossterm>Catalog</glossterm>
-->
   <glossterm>Catalog【カタログ】</glossterm>
   <glossdef>
    <para>
<!--
     The <acronym>SQL</acronym> standard uses this term to
     indicate what is called a
     <glossterm linkend="glossary-database">database</glossterm> in
     <productname>PostgreSQL</productname>'s terminology.
-->
標準<acronym>SQL</acronym>ではこの用語を使用して<productname>PostgreSQL</productname>で<glossterm linkend="glossary-database">database</glossterm>と呼ばれる用語を示します。
    </para>
    <para>
<!--
     (Don't confuse this term with
     <glossterm linkend="glossary-system-catalog">system catalog</glossterm>).
-->
（この用語を、<glossterm linkend="glossary-system-catalog">system catalog</glossterm>と混同しないでください。）
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="manage-ag-overview"/>.
-->
詳細については<xref linkend="manage-ag-overview"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-check-constraint">
<!--
   <glossterm>Check constraint</glossterm>
-->
   <glossterm>Check constraint【チェック制約】</glossterm>
   <glossdef>
    <para>
<!--
     A type of <glossterm linkend="glossary-constraint">constraint</glossterm>
     defined on a <glossterm linkend="glossary-relation">relation</glossterm>
     which restricts the values allowed in one or more
     <glossterm linkend="glossary-attribute">attributes</glossterm>. The
     check constraint can make reference to any attribute of the same row in
     the relation, but cannot reference other rows of the same relation or
     other relations.
-->
一つ以上の<glossterm linkend="glossary-attribute">属性</glossterm>の取り得る値が制限される<glossterm linkend="glossary-relation">リレーション</glossterm>に定義される<glossterm linkend="glossary-constraint">制約</glossterm>の一形式。
チェック制約は同じ行内のすべての属性を参照できますが、同じあるいは別のリレーションの別の行は参照できません。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="ddl-constraints"/>.
-->
詳細については<xref linkend="ddl-constraints"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-checkpoint">
<!--
   <glossterm>Checkpoint</glossterm>
-->
   <glossterm>Checkpoint【チェックポイント】</glossterm>
   <glossdef>
    <para>
<!--
     A point in the <glossterm linkend="glossary-wal">WAL</glossterm> sequence
     at which it is guaranteed that the heap and index data files have been
     updated with all information from
     <glossterm linkend="glossary-shared-memory">shared memory</glossterm>
     modified before that checkpoint;
     a <firstterm>checkpoint record</firstterm> is written and flushed to WAL
     to mark that point.
-->
一連の<glossterm linkend="glossary-wal">WAL</glossterm>の中で、そのチェックポイント以前に更新された<glossterm linkend="glossary-shared-memory">共有メモリ</glossterm>のすべての情報がヒープとインデックスのデータファイルに反映されたことが保証されている点。
その点を記録するために、<firstterm>チェックポイントレコード</firstterm>がWALにフラッシュされます。
    </para>
    <para>
<!--
     A checkpoint is also the act of carrying out all the actions that
     are necessary to reach a checkpoint as defined above.
     This process is initiated when predefined conditions are met,
     such as a specified amount of time has passed, or a certain volume
     of records has been written; or it can be invoked by the user
     with the command <command>CHECKPOINT</command>.
-->
また、チェックポイントは、上で定義されているチェックポイントに到達するために必要なすべてのアクションを実行に移すことでもあります。
このプロセスはあらかじめ決められた条件、たとえば一定の時間が経過した、またはある量のレコードが書き出されたなどの条件が整うことで開始されます。
あるいは、<command>CHECKPOINT</command>コマンドでユーザが起動することもできます。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="wal-configuration"/>.
-->
詳細については<xref linkend="wal-configuration"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-checkpointer">
<!--
   <glossterm>Checkpointer (process)</glossterm>
-->
   <glossterm>Checkpointer【チェックポインタ】（プロセス）</glossterm>
   <glossdef>
    <para>
<!--
     An <glossterm linkend="glossary-auxiliary-proc">auxiliary process</glossterm>
     that is responsible for executing
     <glossterm linkend="glossary-checkpoint">checkpoints</glossterm>.
-->
<glossterm linkend="glossary-checkpoint">チェックポイント</glossterm>の実行を担当する<glossterm linkend="glossary-auxiliary-proc">補助プロセス</glossterm>。
    </para>
   </glossdef>
  </glossentry>

  <glossentry>
<!--
   <glossterm>Class (archaic)</glossterm>
-->
   <glossterm>Class【クラス】（旧用語）</glossterm>
   <glosssee otherterm="glossary-relation" />
  </glossentry>

  <glossentry id="glossary-client">
<!--
   <glossterm>Client (process)</glossterm>
-->
   <glossterm>Client【クライアント】（プロセス）</glossterm>
   <glossdef>
    <para>
<!--
     Any process, possibly remote, that establishes a
     <glossterm linkend="glossary-session">session</glossterm>
     by <glossterm linkend="glossary-connection">connecting</glossterm> to an
     <glossterm linkend="glossary-instance">instance</glossterm>
     to interact with a <glossterm linkend="glossary-database">database</glossterm>.
-->
<glossterm linkend="glossary-database">データベース</glossterm>と情報交換するために、遠隔の可能性があり、<glossterm linkend="glossary-instance">インスタンス</glossterm>に<glossterm linkend="glossary-connection">接続</glossterm>することによって<glossterm linkend="glossary-session">セッション</glossterm>を確立するすべてのプロセス。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-cluster-owner">
<!--
   <glossterm>Cluster owner</glossterm>
-->
   <glossterm>Cluster owner【クラスタ所有者】</glossterm>
   <glossdef>
    <para>
<!--
     The operating system user that owns the
     <glossterm linkend="glossary-data-directory">data directory</glossterm>
     and under which the <literal>postgres</literal> process is run.
     It is required that this user exist prior to creating a new
     <glossterm linkend="glossary-db-cluster">database cluster</glossterm>.
-->
<glossterm linkend="glossary-data-directory">データディレクトリ</glossterm>を所有し、<literal>postgres</literal>プロセスが実行されるオペレーティングシステムのユーザ。
新しい<glossterm linkend="glossary-db-cluster">データベースクラスタ</glossterm>を作成する前に、このユーザが存在する必要があります。
    </para>
    <para>
<!--
     On operating systems with a <literal>root</literal> user,
     said user is not allowed to be the cluster owner.
-->
<literal>root</literal>ユーザが存在するオペレーティングシステムでは、そのユーザはクラスタの所有者になることはできません。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-column">
<!--
   <glossterm>Column</glossterm>
-->
   <glossterm>Column【列】</glossterm>
   <glossdef>
    <para>
<!--
     An <glossterm linkend="glossary-attribute">attribute</glossterm> found in
     a <glossterm linkend="glossary-table">table</glossterm> or
     <glossterm linkend="glossary-view">view</glossterm>.
-->
<glossterm linkend="glossary-table">テーブル</glossterm>または<glossterm linkend="glossary-view">ビュー</glossterm>に含まれる<glossterm linkend="glossary-attribute">属性</glossterm>。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-commit">
<!--
   <glossterm>Commit</glossterm>
-->
   <glossterm>Commit【コミット】</glossterm>
   <glossdef>
    <para>
<!--
     The act of finalizing a
     <glossterm linkend="glossary-transaction">transaction</glossterm> within
     the <glossterm linkend="glossary-database">database</glossterm>, which
     makes it visible to other transactions and assures its
     <glossterm linkend="glossary-durability">durability</glossterm>.
-->
他のトランザクションに対してトランザクションを可視化し、その<glossterm linkend="glossary-durability">永続性</glossterm>を保証し、<glossterm linkend="glossary-database">データベース</glossterm>中の<glossterm linkend="glossary-transaction">トランザクション</glossterm>の終了を実行すること。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-commit"/>.
-->
詳細については<xref linkend="sql-commit"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-concurrency">
<!--
   <glossterm>Concurrency</glossterm>
-->
   <glossterm>Concurrency【並行性】</glossterm>
   <glossdef>
    <para>
<!--
     The concept that multiple independent operations happen within the
     <glossterm linkend="glossary-database">database</glossterm> at the same time.
     In <productname>PostgreSQL</productname>, concurrency is controlled by
     the <glossterm linkend="glossary-mvcc">multiversion concurrency control</glossterm>
     mechanism.
-->
<glossterm linkend="glossary-database">データベース</glossterm>の中で複数の独立した操作が同時に行われる概念。
<productname>PostgreSQL</productname>においては、並行性は<glossterm linkend="glossary-mvcc">複数バージョン並行性制御(multiversion concurrency control</glossterm>機構によって制御されます。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-connection">
<!--
   <glossterm>Connection</glossterm>
-->
   <glossterm>Connection【接続】</glossterm>
   <glossdef>
    <para>
<!--
     An established line of communication between a client process and a
     <glossterm linkend="glossary-backend">backend</glossterm> process,
     usually over a network, supporting a
     <glossterm linkend="glossary-session">session</glossterm>.  This term is
     sometimes used as a synonym for session.
-->
通常ネットワーク越しにクライアントプロセスと<glossterm linkend="glossary-backend">バックエンド</glossterm>プロセスの間で確立された通信回線。
<glossterm linkend="glossary-session">セッション</glossterm>をサポートします。
この用語は時にセッションの同義語として使われることがあります。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="runtime-config-connection"/>.
-->
詳細については<xref linkend="runtime-config-connection"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-consistency">
<!--
   <glossterm>Consistency</glossterm>
-->
   <glossterm>Consistency【一貫性】</glossterm>
   <glossdef>
    <para>
<!--
     The property that the data in the
     <glossterm linkend="glossary-database">database</glossterm>
     is always in compliance with
     <glossterm linkend="glossary-constraint">integrity constraints</glossterm>.
     Transactions may be allowed to violate some of the constraints
     transiently before it commits, but if such violations are not resolved
     by the time it commits, such a transaction is automatically
     <glossterm linkend="glossary-rollback">rolled back</glossterm>.
     This is one of the <acronym>ACID</acronym> properties.
-->
<glossterm linkend="glossary-database">データベース</glossterm>中のデータが常に<glossterm linkend="glossary-constraint">一貫性制約(integrity constraints)</glossterm>に従う性質。
トランザクションは、コミット前には一時的に制約の一部に違反する可能性もありますが、コミット時点までにそうした違反が解決されなければ、トランザクションは自動的に<glossterm linkend="glossary-rollback">ロールバック</glossterm>されます。
これは<acronym>ACID</acronym>特性の一部です。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-constraint">
<!--
   <glossterm>Constraint</glossterm>
-->
   <glossterm>Constraint【制約】</glossterm>
   <glossdef>
    <para>
<!--
     A restriction on the values of data allowed within a
     <glossterm linkend="glossary-table">table</glossterm>,
     or in attributes of a
     <glossterm linkend="glossary-domain">domain</glossterm>.
-->
<glossterm linkend="glossary-table">テーブル</glossterm>内、または<glossterm linkend="glossary-domain">ドメイン</glossterm>の属性内で許可されるデータの値に対する制限。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="ddl-constraints"/>.
-->
詳細については<xref linkend="ddl-constraints"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-cumulative-statistics">
<!--
   <glossterm>Cumulative Statistics System</glossterm>
-->
   <glossterm>Cumulative Statistics System【累積統計システム】</glossterm>
   <glossdef>
    <para>
<!--
     A system which, if enabled, accumulates statistical information
     about the <glossterm linkend="glossary-instance">instance</glossterm>'s
     activities.
-->
有効な場合、<glossterm linkend="glossary-instance">インスタンス</glossterm>の活動に関する統計情報を累積するシステム。
    </para>
    <para>
<!--
      For more information, see
      <xref linkend="monitoring-stats"/>.
-->
詳細については<xref linkend="monitoring-stats"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry>
<!--
   <glossterm>Data area</glossterm>
-->
   <glossterm>Data area【データ領域】</glossterm>
   <glosssee otherterm="glossary-data-directory" />
  </glossentry>

  <glossentry id="glossary-database">
<!--
   <glossterm>Database</glossterm>
-->
   <glossterm>Database【データベース】</glossterm>
   <glossdef>
    <para>
<!--
     A named collection of
     <glossterm linkend="glossary-sql-object">local SQL objects</glossterm>.
-->
<glossterm linkend="glossary-sql-object">ローカルなSQLオブジェクト</glossterm>の名前付き集合。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="manage-ag-overview"/>.
-->
詳細については<xref linkend="manage-ag-overview"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-db-cluster">
<!--
   <glossterm>Database cluster</glossterm>
-->
   <glossterm>Database cluster【データベースクラスタ】</glossterm>
   <glossdef>
    <para>
<!--
     A collection of databases and global SQL objects,
     and their common static and dynamic metadata.
     Sometimes referred to as a
     <firstterm>cluster</firstterm>.
     A database cluster is created using the
     <xref linkend="app-initdb" /> program.
-->
データベース、グローバルなSQLオブジェクト、そしてそれらの静的あるいは動的なメタデータの集合。
時には<firstterm>クラスタ(cluster)</firstterm>として参照されます。
データベースクラスタは、<xref linkend="app-initdb" />プログラムを使用して作成されます。
    </para>
    <para>
<!--
     In <productname>PostgreSQL</productname>, the term
     <firstterm>cluster</firstterm> is also sometimes used to refer to an instance.
     (Don't confuse this term with the SQL command <command>CLUSTER</command>.)
-->
<productname>PostgreSQL</productname>では、インスタンスを指すために<firstterm>クラスタ(cluster)</firstterm>という用語も使用されることがあります。
（この用語を、SQLコマンドの<command>CLUSTER</command>と混同しないでください。）
    </para>
    <para>
<!--
     See also <glossterm linkend="glossary-cluster-owner">cluster owner</glossterm>,
     the operating-system owner of a cluster,
     and <glossterm linkend="glossary-bootstrap-superuser">bootstrap superuser</glossterm>,
     the <productname>PostgreSQL</productname> owner of a cluster.
-->
<glossterm linkend="glossary-cluster-owner">クラスタ所有者(cluster owner)</glossterm>、クラスタのオペレーティングシステム所有者、および<glossterm linkend="glossary-bootstrap-superuser">ブートストラップスーパーユーザ(bootstrap superuser)</glossterm>、クラスタの<productname>PostgreSQL</productname>所有者も参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry>
<!--
   <glossterm>Database server</glossterm>
-->
   <glossterm>Database server【データベースサーバ】</glossterm>
   <glosssee otherterm="glossary-instance" />
  </glossentry>

  <glossentry id="glossary-database-superuser">
<!--
   <glossterm>Database superuser</glossterm>
-->
   <glossterm>Database superuser【データベーススーパーユーザ】</glossterm>
   <glossdef>
    <para>
<!--
     A role having <firstterm>superuser status</firstterm>
     (see <xref linkend="role-attributes"/>).
-->
<firstterm>スーパーユーザ状態</firstterm>を持つロール（<xref linkend="role-attributes"/>を参照）。
    </para>
    <para>
<!--
     Frequently referred to as <firstterm>superuser</firstterm>.
-->
よく<firstterm>スーパーユーザ</firstterm>と呼ばれます。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-data-directory">
<!--
   <glossterm>Data directory</glossterm>
-->
   <glossterm>Data directory【データディレクトリ】</glossterm>
   <glossdef>
    <para>
<!--
     The base directory on the file system of a
     <glossterm linkend="glossary-server">server</glossterm> that contains all
     data files and subdirectories associated with a
     <glossterm linkend="glossary-db-cluster">database cluster</glossterm>
     (with the exception of
     <glossterm linkend="glossary-tablespace">tablespaces</glossterm>,
     and optionally <glossterm linkend="glossary-wal">WAL</glossterm>).
     The environment variable <literal>PGDATA</literal> is commonly used to
     refer to the data directory.
-->
<glossterm linkend="glossary-db-cluster">データベースクラスタ</glossterm>に関連付けられるすべてのデータファイルとサブディレクトリ（<glossterm linkend="glossary-tablespace">テーブル空間</glossterm>と、オプションで<glossterm linkend="glossary-wal">WAL</glossterm>を除く）を含む<glossterm linkend="glossary-server">サーバ</glossterm>のファイルシステム上のベースディレクトリ。
環境変数<literal>PGDATA</literal>は、通常データディレクトリを参照するために使用されます。
    </para>
    <para>
<!--
     A <glossterm linkend="glossary-db-cluster">cluster</glossterm>'s storage
     space comprises the data directory plus any additional tablespaces.
-->
<glossterm linkend="glossary-db-cluster">クラスタ</glossterm>のストレージ空間は、データディレクトリに加えてすべての追加のテーブル空間を含みます。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="storage-file-layout"/>.
-->
詳細については<xref linkend="storage-file-layout"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-data-page">
<!--
   <glossterm>Data page</glossterm>
-->
   <glossterm>Data page【データページ】</glossterm>
   <glossdef>
    <para>
<!--
     The basic structure used to store relation data.
     All pages are of the same size.
     Data pages are typically stored on disk, each in a specific file,
     and can be read to <glossterm linkend="glossary-shared-memory">shared buffers</glossterm>
     where they can be modified, becoming
     <firstterm>dirty</firstterm>.  They become clean when written
     to disk.  New pages, which initially exist in memory only, are also
     dirty until written.
-->
リレーションデータを格納するための基本的なデータ構造。
すべてのページは同じサイズです。
データページはそれぞれ特定のファイルに置かれ、典型的にはディスク上に格納され、<glossterm linkend="glossary-shared-memory">共有バッファ</glossterm>に読み込むことができ、その上で変更を加えることが可能で、その結果<firstterm>変更済み(dirty)</firstterm>となります。
それらはディスクに書き出されたときにきれい(clean)になります。
最初はメモリ上にのみ存在したページも書き出されるまでは変更済みです。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-datum">
   <glossterm>Datum</glossterm>
   <glossdef>
    <para>
<!--
     The internal representation of one value of an <acronym>SQL</acronym>
     data type.
-->
<acronym>SQL</acronym>データ型の１つの値の内部表現。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-delete">
   <glossterm>Delete</glossterm>
   <glossdef>
    <para>
<!--
     An <acronym>SQL</acronym> command which removes
     <glossterm linkend="glossary-tuple">rows</glossterm> from a given
     <glossterm linkend="glossary-table">table</glossterm>
     or <glossterm linkend="glossary-relation">relation</glossterm>.
-->
指定した<glossterm linkend="glossary-table">テーブル</glossterm>または<glossterm linkend="glossary-relation">リレーション</glossterm>から<glossterm linkend="glossary-tuple">行</glossterm>を削除する<acronym>SQL</acronym>コマンド。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-delete"/>.
-->
詳細については<xref linkend="sql-delete"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-domain">
<!--
   <glossterm>Domain</glossterm>
-->
   <glossterm>Domain【ドメイン】</glossterm>
   <glossdef>
    <para>
<!--
     A user-defined data type that is based on another underlying data type.
     It acts the same as the underlying type except for possibly restricting
     the set of allowed values.
-->
他の元となるデータ型に基づくユーザ定義のデータ型です。
元となる型と同じように動作しますが、使用可能な値のセットが制限される可能性があります。
    </para>
    <para>
<!--
     For more information, see <xref linkend="domains"/>.
-->
詳細については<xref linkend="domains"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-durability">
<!--
   <glossterm>Durability</glossterm>
-->
   <glossterm>Durability【永続性】</glossterm>
   <glossdef>
    <para>
<!--
     The assurance that once a
     <glossterm linkend="glossary-transaction">transaction</glossterm> has
     been <glossterm linkend="glossary-commit">committed</glossterm>, the
     changes remain even after a system failure or crash.
     This is one of the <acronym>ACID</acronym> properties.
-->
<glossterm linkend="glossary-transaction">トランザクション</glossterm>が一旦<glossterm linkend="glossary-commit">コミット</glossterm>されると、その変更がシステム故障あるいはクラッシュ後も維持されることの保証。
これは<acronym>ACID</acronym>特性の一部です。
    </para>
   </glossdef>
  </glossentry>

  <glossentry>
<!--
   <glossterm>Epoch</glossterm>
-->
   <glossterm>Epoch【エポック】</glossterm>
   <glosssee otherterm="glossary-xid" />
  </glossentry>

  <glossentry id="glossary-extension">
<!--
   <glossterm>Extension</glossterm>
-->
   <glossterm>Extension【拡張】</glossterm>
   <glossdef>
    <para>
<!--
     A software add-on package that can be installed on an
     <glossterm linkend="glossary-instance">instance</glossterm> to
     get extra features.
-->
他の機能を入れるために<glossterm linkend="glossary-instance">インスタンス</glossterm>にインストールするソフトウェアの追加パッケージ。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="extend-extensions" />.
-->
詳細については<xref linkend="extend-extensions" />を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-file-segment">
<!--
   <glossterm>File segment</glossterm>
-->
   <glossterm>File segment【ファイルセグメント】</glossterm>
   <glossdef>
    <para>
<!--
     A physical file which stores data for a given
     <glossterm linkend="glossary-relation">relation</glossterm>.
     File segments are limited in size by a configuration value
     (typically 1 gigabyte),
     so if a relation exceeds that size, it is split into multiple segments.
-->
ある<glossterm linkend="glossary-relation">リレーション</glossterm>のデータを格納するための物理ファイル。
ファイルセグメントのサイズは設定値（通常1ギガバイト）に制限されます。
したがってリレーションサイズがそれを超えると、複数のセグメントに分割されます。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="storage-file-layout"/>.
-->
詳細については<xref linkend="storage-file-layout"/>を参照してください。
    </para>
    <para>
<!--
     (Don't confuse this term with the similar term
     <glossterm linkend="glossary-wal-file">WAL segment</glossterm>).
-->
（この用語を、類似の用語である<glossterm linkend="glossary-wal-file">WAL segment</glossterm>と混同しないでください。）
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-foreign-data-wrapper">
<!--
   <glossterm>Foreign data wrapper</glossterm>
-->
   <glossterm>Foreign data wrapper【外部データラッパー】</glossterm>
   <glossdef>
    <para>
<!--
     A means of representing data that is not contained in the local
     <glossterm linkend="glossary-database">database</glossterm> so that it appears as if were in local
     <glossterm linkend="glossary-table">table(s)</glossterm>. With a foreign data wrapper it is
     possible to define a <glossterm linkend="glossary-foreign-server">foreign server</glossterm> and
     <glossterm linkend="glossary-foreign-table">foreign tables</glossterm>.
-->
あたかもローカル<glossterm linkend="glossary-table">テーブル</glossterm>であるかのように見せるための、ローカル<glossterm linkend="glossary-database">データベース</glossterm>には含まれないデータの表現手法。
外部データラッパーを使うと、<glossterm linkend="glossary-foreign-server">外部サーバ</glossterm>と<glossterm linkend="glossary-foreign-table">外部テーブル</glossterm>を定義することができます。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-createforeigndatawrapper"/>.
-->
詳細については<xref linkend="sql-createforeigndatawrapper"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-foreign-key">
<!--
   <glossterm>Foreign key</glossterm>
-->
   <glossterm>Foreign key【外部キー】</glossterm>
   <glossdef>
    <para>
<!--
     A type of <glossterm linkend="glossary-constraint">constraint</glossterm>
     defined on one or more <glossterm linkend="glossary-column">columns</glossterm>
     in a <glossterm linkend="glossary-table">table</glossterm> which
     requires the value(s) in those <glossterm linkend="glossary-column">columns</glossterm> to
     identify zero or one <glossterm linkend="glossary-tuple">row</glossterm>
     in another (or, infrequently, the same)
     <glossterm linkend="glossary-table">table</glossterm>.
-->
<glossterm linkend="glossary-table">テーブル</glossterm>の一つあるいは複数の<glossterm linkend="glossary-column">列</glossterm>に定義される<glossterm linkend="glossary-constraint">制約</glossterm>の一形式。
その制約により、別な（稀に同じ）<glossterm linkend="glossary-table">テーブル</glossterm>の0あるいは1個の<glossterm linkend="glossary-tuple">行</glossterm>を識別するための<glossterm linkend="glossary-column">列</glossterm>の値が存在することが必要となる。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-foreign-server">
<!--
   <glossterm>Foreign server</glossterm>
-->
   <glossterm>Foreign server【外部サーバ】</glossterm>
   <glossdef>
    <para>
<!--
     A named collection of
     <glossterm linkend="glossary-foreign-table">foreign tables</glossterm> which
     all use the same
     <glossterm linkend="glossary-foreign-data-wrapper">foreign data wrapper</glossterm>
     and have other configuration values in common.
-->
同じ<glossterm linkend="glossary-foreign-data-wrapper">外部データラッパー</glossterm>を使い、他の設定値を共通に持つ<glossterm linkend="glossary-foreign-table">外部テーブル</glossterm>の名前付きの集合。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-createserver"/>.
-->
詳細については<xref linkend="sql-createserver"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-foreign-table">
<!--
   <glossterm>Foreign table (relation)</glossterm>
-->
   <glossterm>Foreign table【外部テーブル】（リレーション）</glossterm>
   <glossdef>
    <para>
<!--
     A <glossterm linkend="glossary-relation">relation</glossterm> which appears to have
     <glossterm linkend="glossary-tuple">rows</glossterm> and
     <glossterm linkend="glossary-column">columns</glossterm> similar to a
     regular <glossterm linkend="glossary-table">table</glossterm>, but will forward
     requests for data through its
     <glossterm linkend="glossary-foreign-data-wrapper">foreign data wrapper</glossterm>,
     which will return <glossterm linkend="glossary-result-set">result sets</glossterm>
     structured according to the definition of the
     <glossterm linkend="glossary-foreign-table">foreign table</glossterm>.
-->
通常の<glossterm linkend="glossary-table">テーブル</glossterm>と同じように<glossterm linkend="glossary-tuple">行</glossterm>と<glossterm linkend="glossary-column">列</glossterm>を持つかのように見えるが、<glossterm linkend="glossary-foreign-table">外部テーブル</glossterm>の定義に従った構造で<glossterm linkend="glossary-result-set">結果集合</glossterm>を返す<glossterm linkend="glossary-foreign-data-wrapper">外部データラッパー</glossterm>を通じてデータ要求を転送する<glossterm linkend="glossary-relation">リレーション</glossterm>。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-createforeigntable"/>.
-->
詳細については<xref linkend="sql-createforeigntable"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-fork">
<!--
   <glossterm>Fork</glossterm>
-->
   <glossterm>Fork【フォーク】</glossterm>
   <glossdef>
    <para>
<!--
     Each of the separate segmented file sets in which a relation is stored.
     The <firstterm>main fork</firstterm> is where the actual data resides.
     There also exist two secondary forks for metadata:
     the <glossterm linkend="glossary-fsm">free space map</glossterm>
     and the <glossterm linkend="glossary-vm">visibility map</glossterm>.
     <glossterm linkend="glossary-unlogged">Unlogged relations</glossterm>
     also have an <firstterm>init fork</firstterm>.
-->
リレーションが格納される個々のセグメントファイルの集合。
<firstterm>主フォーク</firstterm>には、実際のデータが格納されます。
また、メタデータのための2つの二次フォークが存在します。
<glossterm linkend="glossary-fsm">空き領域マップ</glossterm>と<glossterm linkend="glossary-vm">可視性マップ</glossterm>です。
<glossterm linkend="glossary-unlogged">unloggedリレーション</glossterm>には<firstterm>初期化フォーク(init fork)</firstterm>もあります。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-fsm">
<!--
   <glossterm>Free space map (fork)</glossterm>
-->
   <glossterm>Free space map【空き領域マップ】（フォーク）</glossterm>
   <glossdef>
    <para>
<!--
     A storage structure that keeps metadata about each data page of a table's
     main fork.  The free space map entry for each page stores the
     amount of free space that's available for future tuples, and is structured
     to be efficiently searched for available space for a new tuple of a given
     size.
-->
テーブルのメインフォークの個々のデータページ関するメタデータを保持する格納構造。
個々のページに対応する空き領域マップのエントリには今後追加されるタプルが使用できる空き領域の量が格納され、与えられた大きさの新しいタプルで使用できる空き領域の量を効率的に探索できる構造になっています。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="storage-fsm"/>.
-->
詳細については<xref linkend="storage-fsm"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-function">
<!--
   <glossterm>Function (routine)</glossterm>
-->
   <glossterm>Function【関数】（ルーチン）</glossterm>
   <glossdef>
    <para>
<!--
     A type of routine that receives zero or more arguments, returns zero or more
     output values, and is constrained to run within one transaction.
     Functions are invoked as part of a query, for example via
     <command>SELECT</command>.
     Certain functions can return
     <glossterm linkend="glossary-result-set">sets</glossterm>; those are
     called <firstterm>set-returning functions</firstterm>.
-->
ゼロ以上の引数を受け取り、ゼロ以上の出力値を返すルーチンの一形式で、一つのトランザクション内で実行されるように制限されています。
関数はたとえば<command>SELECT</command>クエリの一部として起動されます。
ある関数は<glossterm linkend="glossary-result-set">集合</glossterm>を返すことができます。
そうした関数は<firstterm>集合を返す関数</firstterm>と呼ばれます。
    </para>
    <para>
<!--
     Functions can also be used for
     <glossterm linkend="glossary-trigger">triggers</glossterm> to invoke.
-->
関数はまた、<glossterm linkend="glossary-trigger">トリガ</glossterm>を起動するのにも用いられます。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-createfunction"/>.
-->
詳細については<xref linkend="sql-createfunction"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry>
   <glossterm>GMT</glossterm>
   <glosssee otherterm="glossary-utc" />
  </glossentry>

  <glossentry id="glossary-grant">
   <glossterm>Grant</glossterm>
   <glossdef>
    <para>
<!--
     An <acronym>SQL</acronym> command that is used to allow a
     <glossterm linkend="glossary-user">user</glossterm> or
     <glossterm linkend="glossary-role">role</glossterm> to access
     specific objects within the <glossterm linkend="glossary-database">database</glossterm>.
-->
<glossterm linkend="glossary-user">ユーザ</glossterm>や<glossterm linkend="glossary-role">ロール</glossterm>が<glossterm linkend="glossary-database">データベース</glossterm>内の特定のオブジェクトにアクセスすることを許可するために使われる<acronym>SQL</acronym>コマンド。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-grant"/>.
-->
詳細については<xref linkend="sql-grant"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-heap">
<!--
   <glossterm>Heap</glossterm>
-->
   <glossterm>Heap【ヒープ】</glossterm>
   <glossdef>
    <para>
<!--
     Contains the values of <glossterm linkend="glossary-tuple">row</glossterm>
     attributes (i.e., the data) for a
     <glossterm linkend="glossary-relation">relation</glossterm>.
     The heap is realized within one or more
     <glossterm linkend="glossary-file-segment">file segments</glossterm>
     in the relation's <glossterm linkend="glossary-fork">main fork</glossterm>.
-->
<glossterm linkend="glossary-relation">リレーション</glossterm>の<glossterm linkend="glossary-tuple">行</glossterm>の属性（つまりデータ）の値を含む。
ヒープは、リレーションの<glossterm linkend="glossary-fork">メインフォーク</glossterm>の一つ以上の<glossterm linkend="glossary-file-segment">ファイルセグメント</glossterm>として実現されています。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-host">
<!--
   <glossterm>Host</glossterm>
-->
   <glossterm>Host【ホスト】</glossterm>
   <glossdef>
    <para>
<!--
     A computer that communicates with other computers over a network.
     This is sometimes used as a synonym for
     <glossterm linkend="glossary-server">server</glossterm>.
     It is also used to refer to a computer where
     <glossterm linkend="glossary-client">client processes</glossterm> run.
-->
ネットワークを通じて他のコンピュータと通信するコンピュータ。
時には<glossterm linkend="glossary-server">サーバ</glossterm>の同義語として用いられます。
また、<glossterm linkend="glossary-client">クライアントプロセス</glossterm>を実行するコンピュータを指す用語としても用いられます。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-index">
<!--
   <glossterm>Index (relation)</glossterm>
-->
   <glossterm>Index【インデックス】（リレーション）</glossterm>
   <glossdef>
    <para>
<!--
     A <glossterm linkend="glossary-relation">relation</glossterm> that contains
     data derived from a <glossterm linkend="glossary-table">table</glossterm>
     or <glossterm linkend="glossary-materialized-view">materialized view</glossterm>.
     Its internal structure supports fast retrieval of and access to the original
     data.
-->
<glossterm linkend="glossary-table">テーブル</glossterm>あるいは<glossterm linkend="glossary-materialized-view">マテリアライズドビュー</glossterm>から派生したデータを含む<glossterm linkend="glossary-relation">リレーション</glossterm>。
その内部構造は、元のデータの高速な取り出しとアクセスをサポートします。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-createindex"/>.
-->
詳細については<xref linkend="sql-createindex"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>
  <glossentry id="glossary-incremental-backup">
<!--
   <glossterm>Incremental backup</glossterm>
-->
   <glossterm>Incremental backup【増分バックアップ】</glossterm>
   <glossdef>
    <para>
<!--
     A special <glossterm linkend="glossary-basebackup">base backup</glossterm>
     that for some files may contain only those pages that were modified since
     a previous backup, as opposed to the full contents of every file. Like
     base backups, it is generated by the tool <xref linkend="app-pgbasebackup"/>.
-->
すべてのベースバックアップの完全な内容ではなく、前のページ以降に変更されたバックアップのみを一部のファイルに含めることができる特別な<glossterm linkend="glossary-basebackup">ベースバックアップ</glossterm>。
ベースバックアップと同様に、<xref linkend="app-pgbasebackup"/>ツールによって生成される。
    </para>
    <para>
<!--
     To restore incremental backups the tool <xref linkend="app-pgcombinebackup"/>
     is used, which combines incremental backups with a base backup.
     Afterwards, recovery can use
     <glossterm linkend="glossary-wal">WAL</glossterm> to bring the
     <glossterm linkend="glossary-db-cluster">database cluster</glossterm> to
     a consistent state.
-->
増分バックアップのリストアには、増分バックアップをベースバックアップと組み合わせるツール<xref linkend="app-pgcombinebackup"/>が使用されます。
その後、リカバリは<glossterm linkend="glossary-wal">WAL</glossterm>を使用して<glossterm linkend="glossary-db-cluster">データベースクラスタ</glossterm>を一貫した状態にすることができます。
    </para>
    <para>
<!--
     For more information, see <xref linkend="backup-incremental-backup"/>.
-->
詳細については<xref linkend="backup-incremental-backup"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-io">
<!--
   <glossterm>Input/Output</glossterm>
-->
   <glossterm>Input/Output【入力/出力】</glossterm>
   <acronym>I/O</acronym>
   <glossdef>
    <para>
<!--
     Input/Output (<acronym>I/O</acronym>) describes the communication between
     a program and peripheral devices. In the context of database systems,
     <acronym>I/O</acronym> commonly, but not exclusively, refers to
     interaction with storage devices or the network.
-->
Input/Output（入力/出力）（<acronym>I/O</acronym>）は、プログラムと周辺装置との間の通信を記述します。
データベースシステムの文脈では、<acronym>I/O</acronym>は一般的に、ストレージ装置またはネットワークとの対話を指しますが、これに限定されません。
    </para>
    <glossseealso otherterm="glossary-aio" />
   </glossdef>
  </glossentry>

  <glossentry id="glossary-insert">
   <glossterm>Insert</glossterm>
   <glossdef>
    <para>
<!--
     An <acronym>SQL</acronym> command used to add new data into a
     <glossterm linkend="glossary-table">table</glossterm>.
-->
<glossterm linkend="glossary-table">テーブル</glossterm>に新しいデータを追加するために使用される<acronym>SQL</acronym>コマンド。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-insert"/>.
-->
詳細については<xref linkend="sql-insert"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-instance">
<!--
   <glossterm>Instance</glossterm>
-->
   <glossterm>Instance【インスタンス】</glossterm>
   <glossdef>
    <para>
<!--
     A group of <glossterm linkend="glossary-backend">backend</glossterm> and
     <glossterm linkend="glossary-auxiliary-proc">auxiliary processes</glossterm>
     that communicate using a common shared memory area.  One
     <glossterm linkend="glossary-postmaster">postmaster process</glossterm>
     manages the instance; one instance manages exactly one
     <glossterm linkend="glossary-db-cluster">database cluster</glossterm>
     with all its databases.  Many instances can run on the same
     <glossterm linkend="glossary-server">server</glossterm>
     as long as their <acronym>TCP</acronym> ports do not conflict.
-->
共通する共有メモリを使って通信する一群の<glossterm linkend="glossary-backend">バックエンド</glossterm>と<glossterm linkend="glossary-auxiliary-proc">補助プロセス</glossterm>。
一つの<glossterm linkend="glossary-postmaster">postmasterプロセス</glossterm>がインスタンスを管理します。
一つのインスタンスは、すべてのデータベースを含む、正確に一つの<glossterm linkend="glossary-db-cluster">データベースクラスタ</glossterm>を管理します。
<acronym>TCP</acronym>ポートが重ならない限り、同じ<glossterm linkend="glossary-server">サーバ</glossterm>内に多くのインスタンスを走らせることができます。
    </para>
    <para>
<!--
     The instance handles all key features of a <acronym>DBMS</acronym>:
     read and write access to files and shared memory,
     assurance of the <acronym>ACID</acronym> properties,
     <glossterm linkend="glossary-connection">connections</glossterm> to
     <glossterm linkend="glossary-client">client processes</glossterm>,
     privilege verification, crash recovery, replication, etc.
-->
インスタンスは、ファイルと共有メモリからの読み出しおよび書き込みアクセス、<acronym>ACID</acronym>特性の保障、<glossterm linkend="glossary-client">クライアントプロセス</glossterm>への<glossterm linkend="glossary-connection">接続</glossterm>、権限の検証、クラッシュからの回復、レプリケーションその他の<acronym>DBMS</acronym>のすべての重要な機能を管理します。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-isolation">
<!--
   <glossterm>Isolation</glossterm>
-->
   <glossterm>Isolation【独立性】</glossterm>
   <glossdef>
    <para>
<!--
     The property that the effects of a transaction are not visible to
     <glossterm linkend="glossary-concurrency">concurrent transactions</glossterm>
     before it commits.
     This is one of the <acronym>ACID</acronym> properties.
-->
コミット前にはトランザクションの効果が<glossterm linkend="glossary-concurrency">同時実行するトランザクション</glossterm>から見えない性質。
これは<acronym>ACID</acronym>特性の一部です。
    </para>
    <para>
<!--
     For more information, see <xref linkend="transaction-iso" />.
-->
詳細については<xref linkend="transaction-iso" />を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-join">
<!--
   <glossterm>Join</glossterm>
-->
   <glossterm>Join【結合】</glossterm>
   <glossdef>
    <para>
<!--
     An operation and <acronym>SQL</acronym> keyword used in
     <glossterm linkend="glossary-query">queries</glossterm>
     for combining data from multiple
     <glossterm linkend="glossary-relation">relations</glossterm>.
-->
操作の一つであり、複数の<glossterm linkend="glossary-relation">リレーション</glossterm>のデータを組み合わせる<glossterm linkend="glossary-query">問い合わせ</glossterm>で用いられる<acronym>SQL</acronym>キーワード。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-key">
<!--
   <glossterm>Key</glossterm>
-->
   <glossterm>Key【キー】</glossterm>
   <glossdef>
    <para>
<!--
     A means of identifying a <glossterm linkend="glossary-tuple">row</glossterm> within a
     <glossterm linkend="glossary-table">table</glossterm> or
     other <glossterm linkend="glossary-relation">relation</glossterm> by
     values contained within one or more
     <glossterm linkend="glossary-attribute">attributes</glossterm>
     in that relation.
-->
リレーションの一つ以上の<glossterm linkend="glossary-attribute">属性</glossterm>に含まれる値を使って<glossterm linkend="glossary-table">テーブル</glossterm>あるいは他の<glossterm linkend="glossary-relation">リレーション</glossterm>の<glossterm linkend="glossary-tuple">行</glossterm>を識別するための手段。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-lock">
<!--
   <glossterm>Lock</glossterm>
-->
   <glossterm>Lock【ロック】</glossterm>
   <glossdef>
    <para>
<!--
     A mechanism that allows a process to limit or prevent simultaneous
     access to a resource.
-->
プロセスがあるリソースへの同時アクセスを制限、あるいは阻止できるようにするための機構。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-log-file">
<!--
   <glossterm>Log file</glossterm>
-->
   <glossterm>Log file【ログファイル】</glossterm>
   <glossdef>
    <para>
<!--
     Log files contain human-readable text lines about events.
     Examples include login failures, long-running queries, etc.
-->
ログファイルには事象に関する人間可読なテキスト行が含まれます。
例として、ログイン失敗、長期に渡って実行中の問い合わせなどがあります。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="logfile-maintenance"/>.
-->
詳細については<xref linkend="logfile-maintenance"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-logged">
<!--
   <glossterm>Logged</glossterm>
-->
   <glossterm>Logged【ログされる】</glossterm>
   <glossdef>
    <para>
<!--
     A <glossterm linkend="glossary-table">table</glossterm> is considered
     <glossterm linkend="glossary-logged">logged</glossterm> if changes to it are sent to the
     <glossterm linkend="glossary-wal">WAL</glossterm>. By default, all regular
     tables are logged. A table can be specified as
     <glossterm linkend="glossary-unlogged">unlogged</glossterm> either at
     creation time or via the <command>ALTER TABLE</command> command.
-->
<glossterm linkend="glossary-wal">WAL</glossterm>に変更が送信されると、<glossterm linkend="glossary-table">テーブル</glossterm>は<glossterm linkend="glossary-logged">ログされる</glossterm>と見なされます。
デフォルトでは、すべての通常のテーブルはログされます。
生成時、あるいは<command>ALTER TABLE</command>コマンドで<glossterm linkend="glossary-unlogged">unlogged</glossterm>とテーブルを指定することができます。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-logger">
<!--
   <glossterm>Logger (process)</glossterm>
-->
   <glossterm>Logger【ロガー】（プロセス）</glossterm>
   <glossdef>
    <para>
<!--
     An <glossterm linkend="glossary-auxiliary-proc">auxiliary process</glossterm>
     which, if enabled, writes information about database events into the current
     <glossterm linkend="glossary-log-file">log file</glossterm>.
     When reaching certain time- or
     volume-dependent criteria, a new log file is created.
     Also called <firstterm>syslogger</firstterm>.
-->
有効な場合、そのプロセスは現在の<glossterm linkend="glossary-log-file">ログファイル</glossterm>にデータベースのイベントに関する情報を書き込む<glossterm linkend="glossary-auxiliary-proc">補助プロセス</glossterm>。
ある時刻あるいは容量による条件に到達すると、新しいログファイルが作られます。
<firstterm>syslogger</firstterm>とも呼ばれます。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="runtime-config-logging"/>.
-->
詳細については<xref linkend="runtime-config-logging"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-logical-replication-cluster">
   <glossterm>Logical replication cluster</glossterm>
   <glossdef>
    <para>
<!--
     A set of publisher and subscriber instances with the publisher instance
     replicating changes to the subscriber instance.
-->
パブリッシャーインスタンスがサブスクライバーインスタンスに変更をレプリケートする、パブリッシャーとサブスクライバーの一連のインスタンス。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-log-record">
<!--
   <glossterm>Log record</glossterm>
-->
   <glossterm>Log record【ログレコード】</glossterm>
    <glossdef>
     <para>
<!--
      Archaic term for a <glossterm linkend="glossary-wal-record">WAL record</glossterm>.
-->
<glossterm linkend="glossary-wal-record">WALレコード</glossterm>の旧用語。
     </para>
    </glossdef>
  </glossentry>

  <glossentry id="glossary-log-sequence-number">
<!--
   <glossterm>Log sequence number</glossterm>
-->
   <glossterm>Log sequence number【ログシーケンス番号】</glossterm>
   <acronym>LSN</acronym>
   <glossdef>
    <para>
<!--
     Byte offset into the <glossterm linkend="glossary-wal">WAL</glossterm>,
     increasing monotonically with each new <glossterm
     linkend="glossary-wal-record">WAL record</glossterm>.
-->
<glossterm linkend="glossary-wal">WAL</glossterm>内のバイトオフセットで、新しい<glossterm linkend="glossary-wal-record">WALレコード</glossterm>ごとに単調に増加します。
    </para>
    <para>
<!--
     For more information, see <link
     linkend="datatype-pg-lsn"><type>pg_lsn</type></link> and <xref
     linkend="wal-internals"/>.
-->
詳細については<link linkend="datatype-pg-lsn"><type>pg_lsn</type></link>と<xref linkend="wal-internals"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry>
   <glossterm>LSN</glossterm>
   <glosssee otherterm="glossary-log-sequence-number"/>
  </glossentry>

  <glossentry>
<!--
   <glossterm>Master (server)</glossterm>
-->
   <glossterm>Master【マスタ】（サーバ）</glossterm>
   <glosssee otherterm="glossary-primary-server" />
  </glossentry>

  <glossentry id="glossary-materialized">
<!--
   <glossterm>Materialized</glossterm>
-->
   <glossterm>Materialized【マテリアライズド】</glossterm>
   <glossdef>
    <para>
<!--
     The property that some information has been pre-computed and stored
     for later use, rather than computing it on-the-fly.
-->
ある情報をその場で計算するのではなく、後で使うために前もって計算し、格納する属性。
    </para>
    <para>
<!--
     This term is used in
     <glossterm linkend="glossary-materialized-view">materialized view</glossterm>,
     to mean that the data derived from the view's query is stored on
     disk separately from the sources of that data.
-->
この用語は、ビュー問い合わせから派生するデータが、そのデータのソースとは別に格納されることを意味する目的で、<glossterm linkend="glossary-materialized-view">マテリアライズドビュー</glossterm>で用いられます。
    </para>
    <para>
<!--
     This term is also used to refer to some multi-step queries to mean that
     the data resulting from executing a given step is stored in memory
     (with the possibility of spilling to disk), so that it can be read multiple
     times by another step.
-->
またこの用語は、与えられたステップを実行した結果のデータをメモリに格納し（ディスクに吐き出す可能性もあります）、別のステップで複数回読み出されるようにすることを意味する複数ステップの問い合わせを指すためにも使われます。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-materialized-view">
<!--
   <glossterm>Materialized view (relation)</glossterm>
-->
   <glossterm>Materialized view【マテリアライズドビュー】（リレーション）</glossterm>
   <glossdef>
    <para>
<!--
     A <glossterm linkend="glossary-relation">relation</glossterm> that is
     defined by a <command>SELECT</command> statement
     (just like a <glossterm linkend="glossary-view">view</glossterm>),
     but stores data in the same way that a
     <glossterm linkend="glossary-table">table</glossterm> does. It cannot be
     modified via <command>INSERT</command>, <command>UPDATE</command>,
     <command>DELETE</command>, or <command>MERGE</command> operations.
-->
<command>SELECT</command>文により定義された<glossterm linkend="glossary-relation">リレーション</glossterm>（<glossterm linkend="glossary-view">ビュー</glossterm>と同様）ですが、<glossterm linkend="glossary-table">テーブル</glossterm>と同じ方法でデータが格納されます。
<command>INSERT</command>、<command>UPDATE</command>、<command>DELETE</command>、<command>MERGE</command>の操作では変更できません。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-creatematerializedview"/>.
-->
詳細については<xref linkend="sql-creatematerializedview"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-merge">
<!--
   <glossterm>Merge</glossterm>
-->
   <glossterm>Merge【マージ】</glossterm>
   <glossdef>
    <para>
<!--
     An <acronym>SQL</acronym> command used to conditionally add, modify,
     or remove <glossterm linkend="glossary-tuple">rows</glossterm>
     in a given <glossterm linkend="glossary-table">table</glossterm>,
     using data from a source
     <glossterm linkend="glossary-relation">relation</glossterm>.
-->
ソース<glossterm linkend="glossary-relation">リレーション</glossterm>からのデータを使用して、指定された<glossterm linkend="glossary-table">テーブル</glossterm>の<glossterm linkend="glossary-tuple">行</glossterm>を条件付きで追加、変更、または削除する<acronym>SQL</acronym>コマンド。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-merge"/>.
-->
詳細については<xref linkend="sql-merge"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-mvcc">
<!--
   <glossterm>Multi-version concurrency control (MVCC)</glossterm>
-->
   <glossterm>Multi-version concurrency control【多版型同時実行制御】(MVCC)</glossterm>
   <glossdef>
    <para>
<!--
     A mechanism designed to allow several
     <glossterm linkend="glossary-transaction">transactions</glossterm> to be
     reading and writing the same rows without one process causing other
     processes to stall.
     In <productname>PostgreSQL</productname>, MVCC is implemented by
     creating copies (<firstterm>versions</firstterm>) of
     <glossterm linkend="glossary-tuple">tuples</glossterm> as they are
     modified; after transactions that can see the old versions terminate,
     those old versions need to be removed.
-->
複数の<glossterm linkend="glossary-transaction">トランザクション</glossterm>が、あるプロセスが他のプロセスを停止させることなく同じ行を読み書き可能にするように設計された機構。
<productname>PostgreSQL</productname>では、<glossterm linkend="glossary-tuple">タプル</glossterm>が変更されたときに、その複製（<firstterm>版</firstterm>）を作ることによりMVCCが実装されています。
古い版を見ることができるプロセスが終了した後、これらの古い版は削除する必要があります。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-null">
   <glossterm>Null</glossterm>
   <glossdef>
    <para>
<!--
     A concept of non-existence that is a central tenet of relational
     database theory. It represents the absence of a definite value.
-->
関係データベース理論の中心的な原理の一つである、存在しないという概念。
明示的な値が存在しないことを表現します。
    </para>
   </glossdef>
  </glossentry>

  <glossentry>
<!--
   <glossterm>Optimizer</glossterm>
-->
   <glossterm>Optimizer【オプティマイザ】</glossterm>
   <glosssee otherterm="glossary-planner" />
  </glossentry>

  <glossentry id="glossary-parallel-query">
<!--
   <glossterm>Parallel query</glossterm>
-->
   <glossterm>Parallel query【パラレルクエリ】</glossterm>
   <glossdef>
    <para>
<!--
     The ability to handle parts of executing a
     <glossterm linkend="glossary-query">query</glossterm> to take advantage
     of parallel processes on servers with multiple <acronym>CPU</acronym>s.
-->
複数<acronym>CPU</acronym>を持つサーバ上の並行プロセスの利点を活かすために、<glossterm linkend="glossary-query">問い合わせ</glossterm>の実行の各部分を扱うことが可能である機能。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-partition">
<!--
   <glossterm>Partition</glossterm>
-->
   <glossterm>Partition【パーティション】</glossterm>
   <glossdef>
    <para>
<!--
     One of several disjoint (not overlapping) subsets of a larger set.
-->
大きな集合の中の互いに素な（重ならない）部分集合の一つ。
    </para>
   </glossdef>
   <glossdef>
    <para>
<!--
     In reference to a
     <glossterm linkend="glossary-partitioned-table">partitioned table</glossterm>:
     One of the tables that each contain part of the data of the partitioned table,
     which is said to be the <firstterm>parent</firstterm>.
     The partition is itself a table, so it can also be queried directly;
     at the same time, a partition can sometimes be a partitioned table,
     allowing hierarchies to be created.
-->
<glossterm linkend="glossary-partitioned-table">パーティション化テーブル</glossterm>との関連では、<firstterm>親(parent)</firstterm>であるパーティション化テーブルの一部のデータを持つテーブルを意味します。
パーティション自身もテーブルなので、直接問い合わせ対象になります。
また、パーティションもパーティション化テーブルになることができるので、階層を作ることができます。
    </para>
   </glossdef>
   <glossdef>
    <para>
<!--
     In reference to a <glossterm linkend="glossary-window-function">window function</glossterm>
     in a <glossterm linkend="glossary-query">query</glossterm>,
     a partition is a user-defined criterion that identifies which neighboring
     <glossterm linkend="glossary-tuple">rows</glossterm>
     of the <glossterm linkend="glossary-result-set">query's result set</glossterm>
     can be considered by the function.
-->
<glossterm linkend="glossary-query">問い合わせ</glossterm>の中の<glossterm linkend="glossary-window-function">ウィンドウ関数</glossterm>との関連では、パーティションは<glossterm linkend="glossary-result-set">問い合わせの結果集合</glossterm>中のどの隣接する<glossterm linkend="glossary-tuple">行</glossterm>であるかをその関数によって識別するユーザ定義の基準です。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-partitioned-table">
<!--
   <glossterm>Partitioned table (relation)</glossterm>
-->
   <glossterm>Partitioned table【パーティション化テーブル】（リレーション）</glossterm>
   <glossdef>
    <para>
<!--
     A <glossterm linkend="glossary-relation">relation</glossterm> that is
     in semantic terms the same as a <glossterm linkend="glossary-table">table</glossterm>,
     but whose storage is distributed across several
     <glossterm linkend="glossary-partition">partitions</glossterm>.
-->
意味論的には<glossterm linkend="glossary-table">テーブル</glossterm>と同じですが、格納場所が複数の<glossterm linkend="glossary-partition">パーティション</glossterm>に渡って分散している<glossterm linkend="glossary-relation">リレーション</glossterm>。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-postmaster">
<!--
   <glossterm>Postmaster (process)</glossterm>
-->
   <glossterm>Postmaster（プロセス）</glossterm>
   <glossdef>
    <para>
<!--
      The very first process of an <glossterm linkend="glossary-instance">instance</glossterm>.
      It starts and manages the
      <glossterm linkend="glossary-auxiliary-proc">auxiliary processes</glossterm>
      and creates <glossterm linkend="glossary-backend">backend processes</glossterm>
      on demand.
-->
<glossterm linkend="glossary-instance">インスタンス</glossterm>の最初期のプロセス。
他の<glossterm linkend="glossary-auxiliary-proc">補助プロセス</glossterm>を起動して管理し、要求に応じて<glossterm linkend="glossary-backend">バックエンドプロセス</glossterm>を生成します。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="server-start"/>.
-->
詳細については<xref linkend="server-start"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-primary-key">
<!--
   <glossterm>Primary key</glossterm>
-->
   <glossterm>Primary key【主キー】</glossterm>
   <glossdef>
    <para>
<!--
     A special case of a
     <glossterm linkend="glossary-unique-constraint">unique constraint</glossterm>
     defined on a
     <glossterm linkend="glossary-table">table</glossterm> or other
     <glossterm linkend="glossary-relation">relation</glossterm> that also
     guarantees that all of the
     <glossterm linkend="glossary-attribute">attributes</glossterm>
     within the <glossterm linkend="glossary-primary-key">primary key</glossterm>
     do not have <glossterm linkend="glossary-null">null</glossterm> values.
     As the name implies, there can be only one
     primary key per table, though it is possible to have multiple unique
     constraints that also have no null-capable attributes.
-->
<glossterm linkend="glossary-primary-key">主キー</glossterm>のどの<glossterm linkend="glossary-attribute">属性</glossterm>も<glossterm linkend="glossary-null">null</glossterm>値を持たないことが保証されている<glossterm linkend="glossary-table">テーブル</glossterm>あるいは他の<glossterm linkend="glossary-relation">リレーション</glossterm>上に定義される<glossterm linkend="glossary-unique-constraint">一意性制約</glossterm>の特殊なケース。
その名前から連想されるように、一つのテーブルにはひとつだけ主キーが存在することができます。
しかし、NULLにならない属性を持つ複数の一意性制約を持つことも可能です。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-primary-server">
<!--
   <glossterm>Primary (server)</glossterm>
-->
   <glossterm>Primary【プライマリ】（サーバ）</glossterm>
   <glossdef>
    <para>
<!--
     When two or more <glossterm linkend="glossary-database">databases</glossterm>
     are linked via <glossterm linkend="glossary-replication">replication</glossterm>,
     the <glossterm linkend="glossary-server">server</glossterm>
     that is considered the authoritative source of information is called
     the <firstterm>primary</firstterm>,
     also known as a <firstterm>master</firstterm>.
-->
2つ以上の<glossterm linkend="glossary-database">データベース</glossterm>が<glossterm linkend="glossary-replication">レプリケーション</glossterm>を通じて連携するときに、情報の信頼できるソースであると見なされる<glossterm linkend="glossary-server">サーバ</glossterm>は<firstterm>プライマリ</firstterm>と呼ばれます。
<firstterm>マスタ</firstterm>という用語でも知られています。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-procedure">
<!--
   <glossterm>Procedure (routine)</glossterm>
-->
   <glossterm>Procedure【プロシージャ】（ルーチン）</glossterm>
   <glossdef>
    <para>
<!--
     A type of routine.
     Their distinctive qualities are that they do not return values,
     and that they are allowed to make transactional statements such
     as <command>COMMIT</command> and <command>ROLLBACK</command>.
     They are invoked via the <command>CALL</command> command.
-->
ルーチンの一種。
違いは値を返さないことと、<command>COMMIT</command>や<command>ROLLBACK</command>といったトランザクション文を発行することが許されていることです。
<command>CALL</command>コマンドを通じて呼び出されます。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-createprocedure"/>.
-->
詳細については<xref linkend="sql-createprocedure"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-query">
<!--
   <glossterm>Query</glossterm>
-->
   <glossterm>Query【問い合わせ】</glossterm>
   <glossdef>
    <para>
<!--
     A request sent by a client to a <glossterm linkend="glossary-backend">backend</glossterm>,
     usually to return results or to modify data on the database.
-->
通常結果を返す、あるいはデータベース上のデータを変更するためにクライアントから<glossterm linkend="glossary-backend">バックエンド</glossterm>に送信される要求。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-planner">
<!--
   <glossterm>Query planner</glossterm>
-->
   <glossterm>Query planner【問い合わせプランナ】</glossterm>
   <glossdef>
    <para>
<!--
     The part of <productname>PostgreSQL</productname> that is devoted to
     determining (<firstterm>planning</firstterm>) the most efficient way to
     execute <glossterm linkend="glossary-query">queries</glossterm>.
     Also known as <firstterm>query optimizer</firstterm>,
     <firstterm>optimizer</firstterm>, or simply <firstterm>planner</firstterm>.
-->
<glossterm linkend="glossary-query">問い合わせ</glossterm>を実行する最も効率の良い方法を決定する（<firstterm>計画する</firstterm>）ために使われる<productname>PostgreSQL</productname>の一部分。
<firstterm>問い合わせオプティマイザ</firstterm>、<firstterm>オプティマイザ</firstterm>、あるいは単に<firstterm>プランナ</firstterm>としても知られています。
    </para>
   </glossdef>
  </glossentry>

  <glossentry>
   <glossterm>Record</glossterm>
   <glosssee otherterm="glossary-tuple" />
  </glossentry>

  <glossentry>
   <glossterm>Recycling</glossterm>
   <glosssee otherterm="glossary-wal-file" />
  </glossentry>

  <glossentry id="glossary-referential-integrity">
<!--
   <glossterm>Referential integrity</glossterm>
-->
   <glossterm>Referential integrity【参照整合性】</glossterm>
   <glossdef>
    <para>
<!--
     A means of restricting data in one <glossterm linkend="glossary-relation">relation</glossterm>
     by a <glossterm linkend="glossary-foreign-key">foreign key</glossterm>
     so that it must have matching data in another
     <glossterm linkend="glossary-relation">relation</glossterm>.
-->
<glossterm linkend="glossary-foreign-key">外部キー</glossterm>によってある<glossterm linkend="glossary-relation">リレーション</glossterm>のデータを制限し、他の<glossterm linkend="glossary-relation">リレーション</glossterm>に対応するデータが必ず存在しなければならないようにする手段。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-relation">
<!--
   <glossterm>Relation</glossterm>
-->
   <glossterm>Relation【リレーション】</glossterm>
   <glossdef>
    <para>
<!--
     The generic term for all objects in a
     <glossterm linkend="glossary-database">database</glossterm>
     that have a name and a list of
     <glossterm linkend="glossary-attribute">attributes</glossterm>
     defined in a specific order.
     <glossterm linkend="glossary-table">Tables</glossterm>,
     <glossterm linkend="glossary-sequence">sequences</glossterm>,
     <glossterm linkend="glossary-view">views</glossterm>,
     <glossterm linkend="glossary-foreign-table">foreign tables</glossterm>,
     <glossterm linkend="glossary-materialized-view">materialized views</glossterm>,
     composite types, and
     <glossterm linkend="glossary-index">indexes</glossterm> are all relations.
-->
名前と特定の順序で定義された<glossterm linkend="glossary-attribute">属性</glossterm>のリストを持つ、<glossterm linkend="glossary-database">データベース</glossterm>内の全てのオブジェクトの総称。
<glossterm linkend="glossary-table">テーブル</glossterm>、<glossterm linkend="glossary-sequence">シーケンス</glossterm>、<glossterm linkend="glossary-view">ビュー</glossterm>、<glossterm linkend="glossary-foreign-table">外部テーブル</glossterm>、<glossterm linkend="glossary-materialized-view">マテリアライズドビュー</glossterm>、複合型、<glossterm linkend="glossary-index">インデックス</glossterm>はすべてリレーションです。
    </para>
    <para>
<!--
     More generically, a relation is a set of tuples; for example,
     the result of a query is also a relation.
-->
より一般的にはリレーションはタプルの集合です。
例えば問い合わせの結果もリレーションです。
    </para>
    <para>
<!--
     In <productname>PostgreSQL</productname>,
     <firstterm>Class</firstterm> is an archaic synonym for
     <firstterm>relation</firstterm>.
-->
<productname>PostgreSQL</productname>では、<firstterm>クラス</firstterm>は<firstterm>リレーション</firstterm>の旧用語の同義語です。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-replica">
<!--
   <glossterm>Replica (server)</glossterm>
-->
   <glossterm>Replica【レプリカ】（サーバ）</glossterm>
   <glossdef>
    <para>
<!--
     A <glossterm linkend="glossary-database">database</glossterm> that is paired
     with a <glossterm linkend="glossary-primary-server">primary</glossterm>
     database and is maintaining a copy of some or all of the primary database's
     data. The foremost reasons for doing this are to allow for greater access
     to that data, and to maintain availability of the data in the event that
     the <glossterm linkend="glossary-primary-server">primary</glossterm>
     becomes unavailable.
-->
<glossterm linkend="glossary-primary-server">プライマリ</glossterm>データベースと対になり、プライマリデータベースのデータのある部分、あるいはすべてのコピーを維持する<glossterm linkend="glossary-database">データベース</glossterm>。
これを行う大きな理由は、データへのアクセスを効率化し、<glossterm linkend="glossary-primary-server">プライマリ</glossterm>が動作しなくなったときにデータの可用性を維持するためです。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-replication">
<!--
   <glossterm>Replication</glossterm>
-->
   <glossterm>Replication【レプリケーション】</glossterm>
   <glossdef>
    <para>
<!--
     The act of reproducing data on one
     <glossterm linkend="glossary-server">server</glossterm> onto another
     server called a <glossterm linkend="glossary-replica">replica</glossterm>.
     This can take the form of <firstterm>physical replication</firstterm>,
     where all file changes from one server are copied verbatim,
     or <firstterm>logical replication</firstterm> where a defined subset
     of data changes are conveyed using a higher-level representation.
-->
ある<glossterm linkend="glossary-server">サーバ</glossterm>のデータの複製を<glossterm linkend="glossary-replica">レプリカ</glossterm>に作る過程。
ここでは、あるサーバのファイルの変更をそのまま複製する<firstterm>物理レプリケーション</firstterm>と、あらかじめ定義したデータの部分集合に対する変更を高レベルの表現を使って転送する<firstterm>論理レプリケーション</firstterm>の２つの形式が可能です。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-restartpoint">
<!--
   <glossterm>Restartpoint</glossterm>
-->
   <glossterm>Restartpoint【リスタートポイント】</glossterm>
   <glossdef>
    <para>
<!--
     A variant of a <glossterm
     linkend="glossary-checkpoint">checkpoint</glossterm> performed on a
     <glossterm linkend="glossary-replica">replica</glossterm>.
-->
<glossterm linkend="glossary-replica">レプリカ</glossterm>上で行われる<glossterm linkend="glossary-checkpoint">チェックポイント</glossterm>の一種。
    </para>
    <para>
<!--
     For more information, see <xref linkend="wal-configuration"/>.
-->
詳細については<xref linkend="wal-configuration"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-result-set">
<!--
   <glossterm>Result set</glossterm>
-->
   <glossterm>Result set【結果集合】</glossterm>
   <glossdef>
    <para>
<!--
     A <glossterm linkend="glossary-relation">relation</glossterm> transmitted
     from a <glossterm linkend="glossary-backend">backend process</glossterm>
     to a <glossterm linkend="glossary-client">client</glossterm> upon the
     completion of an <acronym>SQL</acronym> command, usually a
     <command>SELECT</command> but it can be an
     <command>INSERT</command>, <command>UPDATE</command>,
     <command>DELETE</command>, or <command>MERGE</command> command if the
     <literal>RETURNING</literal> clause is specified.
-->
<acronym>SQL</acronym>コマンドの完了時に<glossterm linkend="glossary-backend">バックエンドプロセス</glossterm>から<glossterm linkend="glossary-client">クライアント</glossterm>に送信される<glossterm linkend="glossary-relation">リレーション</glossterm>。
<acronym>SQL</acronym>コマンドは通常<command>SELECT</command>ですが、<literal>RETURNING</literal>句が指定されれば<command>INSERT</command>、<command>UPDATE</command>、<command>DELETE</command>、<command>MERGE</command>も可能です。
    </para>
    <para>
<!--
     The fact that a result set is a relation means that a query can be used
     in the definition of another query, becoming a
     <firstterm>subquery</firstterm>.
-->
結果集合がリレーションであるということは、問い合わせが他の問い合わせの定義に使用でき、<firstterm>副問い合わせ</firstterm>となるということです。
    </para>
   </glossdef>
   <glossdef>
    <para>
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-revoke">
   <glossterm>Revoke</glossterm>
   <glossdef>
    <para>
<!--
     A command to prevent access to a named set of
     <glossterm linkend="glossary-database">database</glossterm> objects for a
     named list of <glossterm linkend="glossary-role">roles</glossterm>.
-->
<glossterm linkend="glossary-role">ロール</glossterm>の名前付きリストに対して<glossterm linkend="glossary-database">データベース</glossterm>オブジェクトの名前付き集合に対するアクセスを防ぐコマンド。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-revoke"/>.
-->
詳細については<xref linkend="sql-revoke"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-role">
<!--
   <glossterm>Role</glossterm>
-->
   <glossterm>Role【ロール】</glossterm>
   <glossdef>
    <para>
<!--
     A collection of access privileges to the
     <glossterm linkend="glossary-database">instance</glossterm>.
     Roles are themselves a privilege that can be granted to other roles.
     This is often done for convenience or to ensure completeness
     when multiple <glossterm linkend="glossary-user">users</glossterm> need
     the same privileges.
-->
<glossterm linkend="glossary-database">インスタンス</glossterm>に対するアクセス権限の集まり。
ロールはそれ自身が他のロールへ与えることのできる権限です。
これは利便性、あるいは複数の<glossterm linkend="glossary-user">ユーザ</glossterm>が同じ権限を必要とする際に漏れがないようにするためにしばしば行われます。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-createrole"/>.
-->
詳細については<xref linkend="sql-createrole"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-rollback">
<!--
   <glossterm>Rollback</glossterm>
-->
   <glossterm>Rollback【ロールバック】</glossterm>
   <glossdef>
    <para>
<!--
     A command to undo all of the operations performed since the beginning
     of a <glossterm linkend="glossary-transaction">transaction</glossterm>.
-->
<glossterm linkend="glossary-transaction">トランザクション</glossterm>の開始以来実行されたすべての操作を取り消すためのコマンド。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-rollback"/>.
-->
詳細については<xref linkend="sql-rollback"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-routine">
<!--
   <glossterm>Routine</glossterm>
-->
   <glossterm>Routine【ルーチン】</glossterm>
   <glossdef>
    <para>
<!--
     A defined set of instructions stored in the database system
     that can be invoked for execution.
     A routine can be written in a variety of programming
     languages.  Routines can be
     <glossterm linkend="glossary-function">functions</glossterm>
     (including set-returning functions and
     <glossterm linkend="glossary-trigger">trigger functions</glossterm>),
     <glossterm linkend="glossary-aggregate">aggregate functions</glossterm>,
     and <glossterm linkend="glossary-procedure">procedures</glossterm>.
-->
データベースシステムに格納され、実行するために起動可能な予め定義された操作の集合。
ルーチンは多様なプログラミング言語で記述できます。
ルーチンは、<glossterm linkend="glossary-function">関数</glossterm>（集合を返す関数と<glossterm linkend="glossary-trigger">トリガ関数</glossterm>を含みます）、<glossterm linkend="glossary-aggregate">集約関数</glossterm>、<glossterm linkend="glossary-procedure">プロシージャ</glossterm>のいずれかです。
    </para>
    <para>
<!--
     Many routines are already defined within <productname>PostgreSQL</productname>
     itself, but user-defined ones can also be added.
-->
多くのルーチンは<productname>PostgreSQL</productname>自身にすでに含まれていますが、ユーザ定義のルーチンを追加することもできます。
    </para>
   </glossdef>
  </glossentry>

  <glossentry>
<!--
   <glossterm>Row</glossterm>
-->
   <glossterm>Row【行】</glossterm>
   <glosssee otherterm="glossary-tuple" />
  </glossentry>

  <glossentry id="glossary-savepoint">
<!--
   <glossterm>Savepoint</glossterm>
-->
   <glossterm>Savepoint【セーブポイント】</glossterm>
   <glossdef>
    <para>
<!--
     A special mark in the sequence of steps in a
     <glossterm linkend="glossary-transaction">transaction</glossterm>.
     Data modifications after this point in time may be reverted
     to the time of the savepoint.
-->
<glossterm linkend="glossary-transaction">トランザクション</glossterm>中の一連のステップ中の特別な印。
セーブポイント時点以降のデータ変更は、この時点まで遡って取り消すことができます。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-savepoint"/>.
-->
詳細については<xref linkend="sql-savepoint"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-schema">
<!--
   <glossterm>Schema</glossterm>
-->
   <glossterm>Schema【スキーマ】</glossterm>
   <glossdef>
    <para>
<!--
     A schema is a namespace for
     <glossterm linkend="glossary-sql-object">SQL objects</glossterm>,
     which all reside in the same
     <glossterm linkend="glossary-database">database</glossterm>.
     Each SQL object must reside in exactly one schema.
-->
スキーマは、同じ<glossterm linkend="glossary-database">データベース</glossterm>に存在する<glossterm linkend="glossary-sql-object">SQLオブジェクト</glossterm>のための名前空間です。
各SQLオブジェクトは正確に一つのスキーマに存在する必要があります。
    </para>
    <para>
<!--
     All system-defined SQL objects reside in schema <literal>pg_catalog</literal>.
-->
すべてのシステム定義のSQLオブジェクトは<literal>pg_catalog</literal>スキーマに存在します。
    </para>
   </glossdef>
   <glossdef>
    <para>
<!--
     More generically, the term <firstterm>schema</firstterm> is used to mean
     all data descriptions (<glossterm linkend="glossary-table">table</glossterm> definitions,
     <glossterm linkend="glossary-constraint">constraints</glossterm>, comments, etc.)
     for a given <glossterm linkend="glossary-database">database</glossterm> or
     subset thereof.
-->
より一般的には、<firstterm>スキーマ</firstterm>という用語は、与えられた<glossterm linkend="glossary-database">データベース</glossterm>あるいはその部分集合中のすべてのデータの記述（<glossterm linkend="glossary-table">テーブル</glossterm>定義、<glossterm linkend="glossary-constraint">制約</glossterm>、コメントなど）の意味で用いられます。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="ddl-schemas"/>.
-->
詳細については<xref linkend="ddl-schemas"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry>
<!--
   <glossterm>Segment</glossterm>
-->
   <glossterm>Segment【セグメント】</glossterm>
   <glosssee otherterm="glossary-file-segment" />
  </glossentry>

  <glossentry id="glossary-select">
   <glossterm>Select</glossterm>
   <glossdef>
    <para>
<!--
     The <acronym>SQL</acronym> command used to request data from a
     <glossterm linkend="glossary-database">database</glossterm>.
     Normally, <command>SELECT</command> commands are not expected to modify the
     <glossterm linkend="glossary-database">database</glossterm> in any way,
     but it is possible that
     <glossterm linkend="glossary-function">functions</glossterm> invoked within
     the query could have side effects that do modify data.
-->
<glossterm linkend="glossary-database">データベース</glossterm>に対してデータを要求するための<acronym>SQL</acronym>コマンド。
通常<command>SELECT</command>コマンドは<glossterm linkend="glossary-database">データベース</glossterm>を変更しないものと期待されますが、問い合わせ中で起動される<glossterm linkend="glossary-function">関数</glossterm>がデータを変更する副作用を持つことはあり得ます。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-select"/>.
-->
詳細については<xref linkend="sql-select"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-sequence">
<!--
   <glossterm>Sequence (relation)</glossterm>
-->
   <glossterm>Sequence【シーケンス】（リレーション）</glossterm>
   <glossdef>
    <para>
<!--
     A type of relation that is used to generate values.
     Typically the generated values are sequential non-repeating numbers.
     They are commonly used to generate surrogate
     <glossterm linkend="glossary-primary-key">primary key</glossterm>
     values.
-->
値を生成するために使用されるリレーションの一種。
通常、生成される値は非反復な連番です。
これらは通常、代理<glossterm linkend="glossary-primary-key">主キー</glossterm>の値を生成するために使用されます。
    </para>
   </glossdef>
  </glossentry>

<!--  XXX should define all other isolation levels (and improve this definition)
  <glossentry id="glossary-serializable">
   <glossterm>Serializable (isolation level)</glossterm>
   <glossdef>
    <para>
     Transactions defined as <literal>SERIALIZABLE</literal> are unable to
     see changes made within other transactions. In effect, for the
     initializing session the entire <glossterm linkend="glossary-database">database</glossterm>
     appears to be frozen for the duration of the
     <glossterm linkend="glossary-transaction">Transaction</glossterm>.
    </para>
   </glossdef>
  </glossentry>
-->

  <glossentry id="glossary-server">
<!--
   <glossterm>Server</glossterm>
-->
   <glossterm>Server【サーバ】</glossterm>
   <glossdef>
    <para>
<!--
     A computer on which <productname>PostgreSQL</productname>
     <glossterm linkend="glossary-instance">instances</glossterm> run.
     The term <firstterm>server</firstterm> denotes real hardware, a
     container, or a <firstterm>virtual machine</firstterm>.
-->
<productname>PostgreSQL</productname><glossterm linkend="glossary-instance">インスタンス</glossterm>を実行するコンピュータ。
<firstterm>サーバ</firstterm>という用語は、実際のハードウェア、コンテナ、あるいは<firstterm>仮想マシン</firstterm>を意味します。
    </para>
    <para>
<!--
     This term is sometimes used to refer to an instance or to a host.
-->
この用語は時にはインスタンスあるいはホストに関連して用いられます。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-session">
<!--
   <glossterm>Session</glossterm>
-->
   <glossterm>Session【セッション】</glossterm>
   <glossdef>
    <para>
<!--
     A state that allows a client and a backend to interact,
     communicating over a <glossterm linkend="glossary-connection">connection</glossterm>.
-->
<glossterm linkend="glossary-connection">接続</glossterm>を通じて通信し、クライアントとバックエンドが関わり合いを持つことが可能な状態。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-shared-memory">
<!--
   <glossterm>Shared memory</glossterm>
-->
   <glossterm>Shared memory【共有メモリ】</glossterm>
   <glossdef>
    <para>
<!--
     <acronym>RAM</acronym> which is used by the processes common to an
     <glossterm linkend="glossary-instance">instance</glossterm>.
     It mirrors parts of <glossterm linkend="glossary-database">database</glossterm>
     files, provides a transient area for
     <glossterm linkend="glossary-wal-record">WAL records</glossterm>,
     and stores additional common information.
     Note that shared memory belongs to the complete instance, not to a single
     database.
-->
一つの<glossterm linkend="glossary-instance">インスタンス</glossterm>に共通のプロセスによって使用される<acronym>RAM</acronym>。
<glossterm linkend="glossary-database">database</glossterm>ファイルの一部をコピーし、<glossterm linkend="glossary-wal-record">WALレコード</glossterm>のために一時的な領域を提供し、追加の共通情報を格納します。
共有メモリは完全なインスタンスに所属し、単一のデータベースには所属しないことに注意してください。
    </para>
    <para>
<!--
     The largest part of shared memory is known as <firstterm>shared buffers</firstterm>
     and is used to mirror part of data files, organized into pages.
     When a page is modified, it is called a dirty page until it is
     written back to the file system.
-->
共有メモリの最大の部分は<firstterm>共有バッファ</firstterm>として知られ、ページに分割されてデータファイルのコピーを保持するために使用されます。
ページが変更されると、ファイルシステムに書き出されるまではダーティページ(dirty page)と呼ばれます。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="runtime-config-resource-memory"/>.
-->
詳細については<xref linkend="runtime-config-resource-memory"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-sql-object">
<!--
   <glossterm>SQL object</glossterm>
-->
   <glossterm>SQL object【SQLオブジェクト】</glossterm>
    <glossdef>
     <para>
<!--
      Any object that can be created with a <command>CREATE</command>
      command.  Most objects are specific to one database, and are commonly
      known as <firstterm>local objects</firstterm>.
-->
<command>CREATE</command>コマンドで作られるあらゆるオブジェクト。
ほとんどのオブジェクトは一つのデータベースに限定され、<firstterm>ローカルオブジェクト</firstterm>として一般的に知られています。
     </para>
     <para>
<!--
      Most local objects reside in a specific
      <glossterm linkend="glossary-schema">schema</glossterm> in their
      containing database, such as
      <glossterm linkend="glossary-relation">relations</glossterm> (all types),
      <glossterm linkend="glossary-function">routines</glossterm> (all types),
      data types, etc.
      The names of such objects of the same type in the same schema
      are enforced to be unique.
-->
ほとんどのローカルオブジェクトは、<glossterm linkend="glossary-relation">リレーション</glossterm> （すべての種類）、<glossterm linkend="glossary-function">ルーチン</glossterm>（すべての種類）データ型などのように、データベース中の特定の<glossterm linkend="glossary-schema">スキーマ</glossterm>に存在します。
スキーマの同じ種類の中のそうしたオブジェクト同士は、名前がユニークであることが強制されます。
     </para>
     <para>
<!--
      There also exist local objects that do not reside in schemas; some examples are
      <glossterm linkend="glossary-extension">extensions</glossterm>,
      <glossterm linkend="glossary-cast">data type casts</glossterm>, and
      <glossterm linkend="glossary-foreign-data-wrapper">foreign data wrappers</glossterm>.
      The names of such objects of the same type are enforced to be unique
      within the database.
-->
スキーマに存在しないローカルオブジェクトも存在します。
例としては、<glossterm linkend="glossary-extension">拡張</glossterm>、<glossterm linkend="glossary-cast">データ型キャスト</glossterm>、<glossterm linkend="glossary-foreign-data-wrapper">外部データラッパー</glossterm>があります。
データベースの同じ種類の中のそうしたオブジェクト同士は、名前がユニークであることが強制されます。
     </para>
     <para>
<!--
      Other object types, such as
      <glossterm linkend="glossary-role">roles</glossterm>,
      <glossterm linkend="glossary-tablespace">tablespaces</glossterm>,
      replication origins, subscriptions for logical replication, and
      databases themselves are not local SQL objects since they exist
      entirely outside of any specific database;
      they are called <firstterm>global objects</firstterm>.
      The names of such objects are enforced to be unique within the whole
      database cluster.
-->
他のオブジェクト型、たとえば<glossterm linkend="glossary-role">ロール</glossterm>、<glossterm linkend="glossary-tablespace">テーブル空間</glossterm>、レプリケーション起点、論理レプリケーションのサブスクライブ、データベース自体は、完全に特定のデータベースの外に存在するので、ローカルSQLオブジェクトではありません。
それらは<firstterm>グローバルオブジェクト</firstterm>と呼ばれます。
データベースクラスタ全体の同じ種類の中のそうしたオブジェクト同士は、名前がユニークであることが強制されます。
     </para>
    <para>
<!--
      For more information, see
      <xref linkend="manage-ag-overview"/>.
-->
詳細については<xref linkend="manage-ag-overview"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-sql-standard">
<!--
   <glossterm>SQL standard</glossterm>
-->
   <glossterm>SQL standard【標準SQL】</glossterm>
   <glossdef>
    <para>
<!--
     A series of documents that define the <acronym>SQL</acronym> language.
-->
<acronym>SQL</acronym>言語を定義する一連の文書。
    </para>
   </glossdef>
  </glossentry>

  <glossentry>
<!--
   <glossterm>Standby (server)</glossterm>
-->
   <glossterm>Standby【スタンバイ】（サーバ）</glossterm>
   <glosssee otherterm="glossary-replica" />
  </glossentry>

  <glossentry id="glossary-startup-process">
<!--
   <glossterm>Startup process</glossterm>
-->
   <glossterm>Startup process【スタートアッププロセス】</glossterm>
   <glossdef>
    <para>
<!--
     An <glossterm linkend="glossary-auxiliary-proc">auxiliary process</glossterm>
     that replays WAL during crash recovery and in a
     <glossterm linkend="glossary-replication">physical replica</glossterm>.
-->
クラッシュリカバリ中および<glossterm linkend="glossary-replication">物理レプリカ</glossterm>でWALを再生する<glossterm linkend="glossary-auxiliary-proc">補助プロセス</glossterm>。
    </para>
    <para>
<!--
     (The name is historical: the startup process was named before
     replication was implemented; the name refers to its task as it
     relates to the server startup following a crash.)
-->
（歴史的経緯のある名前です。スタートアッププロセスは、レプリケーションが実装される前に名前が付けられました。
名前は、クラッシュ後のサーバ起動に関連するタスクを示しています。）
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-superuser">
<!--
   <glossterm>Superuser</glossterm>
-->
   <glossterm>Superuser【スーパーユーザ】</glossterm>
   <glossdef>
    <para>
<!--
     As used in this documentation, it is a synonym for
     <glossterm linkend="glossary-database-superuser">database superuser</glossterm>.
-->
このドキュメントで使用される用語として、<glossterm linkend="glossary-database-superuser">データベーススーパーユーザ</glossterm>の同義語です。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-system-catalog">
<!--
   <glossterm>System catalog</glossterm>
-->
   <glossterm>System catalog【システムカタログ】</glossterm>
   <glossdef>
    <para>
<!--
     A collection of <glossterm linkend="glossary-table">tables</glossterm>
     which describe the structure of all
     <glossterm linkend="glossary-sql-object">SQL objects</glossterm>
     of the instance.
     The system catalog resides in the schema <literal>pg_catalog</literal>.
     These tables contain data in internal representation and are
     not typically considered useful for user examination;
     a number of user-friendlier <glossterm linkend="glossary-view">views</glossterm>,
     also in schema <literal>pg_catalog</literal>, offer more convenient access to
     some of that information, while additional tables and views
     exist in schema <literal>information_schema</literal>
     (see <xref linkend="information-schema" />) that expose some
     of the same and additional information as mandated by the
     <glossterm linkend="glossary-sql-standard">SQL standard</glossterm>.
-->
インスタンスのすべての<glossterm linkend="glossary-sql-object">SQLオブジェクト</glossterm>の構造を記述する<glossterm linkend="glossary-table">テーブル</glossterm>の集まり。
システムカタログは<literal>pg_catalog</literal>スキーマに存在します。
これらのテーブルは内部表現のデータを格納しているので、典型的にはユーザが調べる目的には適しません。
<literal>pg_catalog</literal>スキーマにもユーザによりわかりやすい多くの<glossterm linkend="glossary-view">ビュー</glossterm>が提供されており、一部の情報にはより便利なアクセスを提供しています。
一方<glossterm linkend="glossary-sql-standard">標準SQL</glossterm>によって管理されているものと同じあるいはさらに追加の情報を提供する<literal>information_schema</literal>スキーマ（<xref linkend="information-schema" />参照）に追加のテーブルとビューがあります。
    </para>
    <para>
<!--
      For more information, see
      <xref linkend="ddl-schemas"/>.
-->
詳細については<xref linkend="ddl-schemas"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-table">
<!--
   <glossterm>Table</glossterm>
-->
   <glossterm>Table【テーブル】</glossterm>
   <glossdef>
    <para>
<!--
     A collection of <glossterm linkend="glossary-tuple">tuples</glossterm> having
     a common data structure (the same number of
     <glossterm linkend="glossary-attribute">attributes</glossterm>, in the same
     order, having the same name and type per position).
     A table is the most common form of
     <glossterm linkend="glossary-relation">relation</glossterm> in
     <productname>PostgreSQL</productname>.
-->
共通のデータ構造を持つ<glossterm linkend="glossary-tuple">タプル</glossterm>の集合（同じ数の<glossterm linkend="glossary-attribute">属性</glossterm>が同じ順序で、位置ごとに同じ名前と型を持ちます）。
テーブルは、<productname>PostgreSQL</productname>における<glossterm linkend="glossary-relation">リレーション</glossterm>の最も一般的な形式です。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-createtable"/>.
-->
詳細については<xref linkend="sql-createtable"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-tablespace">
<!--
   <glossterm>Tablespace</glossterm>
-->
   <glossterm>Tablespace【テーブル空間】</glossterm>
   <glossdef>
    <para>
<!--
     A named location on the server file system.
     All <glossterm linkend="glossary-sql-object">SQL objects</glossterm>
     which require storage beyond their definition in the
     <glossterm linkend="glossary-system-catalog">system catalog</glossterm>
     must belong to a single tablespace.
     Initially, a database cluster contains a single usable tablespace which is
     used as the default for all SQL objects, called <literal>pg_default</literal>.
-->
サーバファイルシステムの名前付き場所。
すべての<glossterm linkend="glossary-sql-object">SQLオブジェクト</glossterm>は、<glossterm linkend="glossary-system-catalog">システムカタログ</glossterm>内の定義を超えた格納領域が要求され、単一のテーブル空間に属している必要があります。
最初にデータベースクラスタは、単一で使用可能なテーブル空間が含まれています。
それは<literal>pg_default</literal>と呼ばれ、全てのSQLオブジェクトでデフォルトとして使用されます。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="manage-ag-tablespaces"/>.
-->
詳細については<xref linkend="manage-ag-tablespaces"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-temporary-table">
<!--
   <glossterm>Temporary table</glossterm>
-->
   <glossterm>Temporary table【一時テーブル】</glossterm>
   <glossdef>
    <para>
<!--
     <glossterm linkend="glossary-table">Tables</glossterm> that exist either
     for the lifetime of a
     <glossterm linkend="glossary-session">session</glossterm> or a
     <glossterm linkend="glossary-transaction">transaction</glossterm>, as
     specified at the time of creation.
     The data in them is not visible to other sessions, and is not
     <glossterm linkend="glossary-logged">logged</glossterm>.
     Temporary tables are often used to store intermediate data for a
     multi-step operation.
-->
<glossterm linkend="glossary-session">セッション</glossterm>または<glossterm linkend="glossary-transaction">トランザクション</glossterm>のどちらか（作成時に指定します）の存続期間中にのみ存在する<glossterm linkend="glossary-table">テーブル</glossterm>。
そのデータは他のセッションからは見られず、<glossterm linkend="glossary-logged">ログされる</glossterm>ことはありません。
一時テーブルはしばしば複数ステップ操作の中間データを格納するために使用されます。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-createtable"/>.
-->
詳細については<xref linkend="sql-createtable"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-toast">
   <glossterm>TOAST</glossterm>
   <glossdef>
    <para>
<!--
     A mechanism by which large attributes of table rows are split and
     stored in a secondary table, called the <firstterm>TOAST table</firstterm>.
     Each relation with large attributes has its own TOAST table.
-->
テーブル行の大きな属性を分割して副テーブルに格納する機構。
<firstterm>TOASTテーブル</firstterm>と呼ばれます。
大きな属性を持つ各リレーションには、独自のTOASTテーブルがあります。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="storage-toast" />.
-->
詳細については<xref linkend="storage-toast" />を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-transaction">
<!--
   <glossterm>Transaction</glossterm>
-->
   <glossterm>Transaction【トランザクション】</glossterm>
   <glossdef>
    <para>
<!--
     A combination of commands that must act as a single
     <glossterm linkend="glossary-atomic">atomic</glossterm> command: they all
     succeed or all fail as a single unit, and their effects are not visible to
     other <glossterm linkend="glossary-session">sessions</glossterm> until
     the transaction is complete, and possibly even later, depending on the
     isolation level.
-->
単一の<glossterm linkend="glossary-atomic">原子性</glossterm>コマンドとして動作する必要があるコマンドの組み合わせ。
それらは単一の組としてすべて成功かすべて失敗し、トランザクションが完了するまで（分離レベルによってはその後でさえ）、他の<glossterm linkend="glossary-session">セッション</glossterm>からはその効果が見えません。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="transaction-iso"/>.
-->
詳細については<xref linkend="transaction-iso"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-xid">
<!--
   <glossterm>Transaction ID</glossterm>
-->
   <glossterm>Transaction ID【トランザクションID】</glossterm>
   <glossdef>
    <para>
<!--
     The numerical, unique, sequentially-assigned identifier that each
     transaction receives when it first causes a database modification.
     Frequently abbreviated as <firstterm>xid</firstterm>.
     When stored on disk, xids are only 32-bits wide, so only
     approximately four billion write transaction IDs can be generated;
     to permit the system to run for longer than that,
     <firstterm>epochs</firstterm> are used, also 32 bits wide.
     When the counter reaches the maximum xid value, it starts over at
     <literal>3</literal> (values under that are reserved) and the
     epoch value is incremented by one.
     In some contexts, the epoch and xid values are
     considered together as a single 64-bit value;  see <xref
     linkend="transaction-id"/> for more details.
-->
個々のトランザクションが最初にデータベースに変更を加える際に、ユニークな数値である順序数としてアサインされる識別子です。
しばしば<firstterm>xid</firstterm>と略されます。
ディスク上ではxidは32ビット幅しかないので、約40億の書き込みトランザクションIDしか生成できません。
それよりも長くシステムが実行できるようにするために、これもまた32ビット幅である<firstterm>エポック</firstterm>が用いられます。
カウンタがxidの最大値に到達すると、xidは<literal>3</literal>（これよりも小さな値は予約されています）から再開し、エポックの値は1増えます。
ときにはエポックとxidの値を組み合わせて、単一の64ビット値として扱うこともあります。
詳細については<xref linkend="transaction-id"/>を参照してください。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="datatype-oid"/>.
-->
詳細については<xref linkend="datatype-oid"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-tps">
<!--
   <glossterm>Transactions per second (TPS)</glossterm>
-->
   <glossterm>Transactions per second (TPS)【1秒あたりのトランザクション数】</glossterm>
   <glossdef>
    <para>
<!--
     Average number of transactions that are executed per second,
     totaled across all sessions active for a measured run.
     This is used as a measure of the performance characteristics of
     an instance.
-->
１秒あたりに実行されたトランザクションの平均数。
測定された実行中にアクティブな全てのセッションで合計されます。
これはインスタンスのパフォーマンス特性の指標として使用されます。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-trigger">
<!--
   <glossterm>Trigger</glossterm>
-->
   <glossterm>Trigger【トリガ】</glossterm>
   <glossdef>
    <para>
<!--
     A <glossterm linkend="glossary-function">function</glossterm> which can
     be defined to execute whenever a certain operation (<command>INSERT</command>,
     <command>UPDATE</command>, <command>DELETE</command>,
     <command>TRUNCATE</command>) is applied to a
     <glossterm linkend="glossary-relation">relation</glossterm>.
     A trigger executes within the same
     <glossterm linkend="glossary-transaction">transaction</glossterm> as the
     statement which invoked it, and if the function fails, then the invoking
     statement also fails.
-->
特定の操作(<command>INSERT</command>、<command>UPDATE</command>、<command>DELETE</command>、<command>TRUNCATE</command>)が<glossterm linkend="glossary-relation">リレーション</glossterm>に適用されるたびに実行することを定義できる<glossterm linkend="glossary-function">関数</glossterm>。
トリガは、トリガを起動した文と同じ<glossterm linkend="glossary-transaction">トランザクション</glossterm>内で実行されます。関数が失敗すると、起動した文も失敗します。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-createtrigger"/>.
-->
詳細については<xref linkend="sql-createtrigger"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-tuple">
<!--
   <glossterm>Tuple</glossterm>
-->
   <glossterm>Tuple【タプル】</glossterm>
   <glossdef>
    <para>
<!--
     A collection of <glossterm linkend="glossary-attribute">attributes</glossterm>
     in a fixed order.
     That order may be defined by the <glossterm linkend="glossary-table">table</glossterm>
     (or other <glossterm linkend="glossary-relation">relation</glossterm>)
     where the tuple is contained, in which case the tuple is often called a
     <firstterm>row</firstterm>.  It may also be defined by the structure of a
     result set, in which case it is sometimes called a <firstterm>record</firstterm>.
-->
<glossterm linkend="glossary-attribute">属性</glossterm>を一定の順序で集めたもの。
この順序はタプルが含まれる<glossterm linkend="glossary-table">テーブル</glossterm>（または他の<glossterm linkend="glossary-relation">リレーション</glossterm>）によって定義されます。その場合タプルは、しばしば<firstterm>行</firstterm>と呼ばれます。
また結果セットの構造によって定義される場合もあります。その場合、タプルは<firstterm>レコード</firstterm>と呼ばれることがあります。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-unique-constraint">
<!--
   <glossterm>Unique constraint</glossterm>
-->
   <glossterm>Unique constraint【一意性制約】</glossterm>
   <glossdef>
    <para>
<!--
     A type of <glossterm linkend="glossary-constraint">constraint</glossterm>
     defined on a <glossterm linkend="glossary-relation">relation</glossterm>
     which restricts the values allowed in one or a combination of columns
     so that each value or combination of values can only appear once in the
     relation &mdash; that is, no other row in the relation contains values
     that are equal to those.
-->
<glossterm linkend="glossary-relation">リレーション</glossterm>に定義される<glossterm linkend="glossary-constraint">制約</glossterm>の一形式で、一つ以上の複数の列の組み合わせで許可される値を制限して、各値または組み合わせの値がリレーションの中で一度しか現れないように制限します。 &mdash; つまり、リレーション内の他の行にそれらと等しい値が含まれないようにします。
    </para>
    <para>
<!--
     Because <glossterm linkend="glossary-null">null values</glossterm> are
     not considered equal to each other, multiple rows with null values are
     allowed to exist without violating the unique constraint.
-->
<glossterm linkend="glossary-null">NULL値</glossterm>は互いに等しいとは見なされないため、一意性制約の違反にはならず、NULL値は複数の行に存在することが許可されます。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-unlogged">
<!--
   <glossterm>Unlogged</glossterm>
-->
   <glossterm>Unlogged【ログを取らない】</glossterm>
   <glossdef>
    <para>
<!--
     The property of certain <glossterm linkend="glossary-relation">relations</glossterm>
     that the changes to them are not reflected in the
     <glossterm linkend="glossary-wal">WAL</glossterm>.
     This disables replication and crash recovery for these relations.
-->
特定の性質の<glossterm linkend="glossary-relation">リレーション</glossterm>で、それらに対する変更が<glossterm linkend="glossary-wal">WAL</glossterm>に反映されません。
これらのリレーションのレプリケーションとクラッシュリカバリは無効になります。
    </para>
    <para>
<!--
     The primary use of unlogged tables is for storing
     transient work data that must be shared across processes.
-->
ログを取らないテーブルの主な用途は、プロセス間で共有する必要がある一時的な作業データを格納することです。
    </para>
    <para>
<!--
     <glossterm linkend="glossary-temporary-table">Temporary tables</glossterm>
     are always unlogged.
-->
<glossterm linkend="glossary-temporary-table">一時テーブル</glossterm>は常にログを取りません。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-update">
   <glossterm>Update</glossterm>
   <glossdef>
    <para>
<!--
     An <acronym>SQL</acronym> command used to modify
     <glossterm linkend="glossary-tuple">rows</glossterm>
     that may already exist in a specified <glossterm linkend="glossary-table">table</glossterm>.
     It cannot create or remove rows.
-->
指定された<glossterm linkend="glossary-table">テーブル</glossterm>に既にある<glossterm linkend="glossary-tuple">行</glossterm>を変更するために使われる<acronym>SQL</acronym>コマンド。
行を作成したり削除したりはできません。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-update"/>.
-->
詳細については<xref linkend="sql-update"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-user">
<!--
   <glossterm>User</glossterm>
-->
   <glossterm>User【ユーザ】</glossterm>
   <glossdef>
    <para>
<!--
     A <glossterm linkend="glossary-role">role</glossterm> that has the
     <firstterm>login privilege</firstterm>
     (see <xref linkend="role-attributes"/>).
-->
<firstterm>LOGIN権限</firstterm>を持つ<glossterm linkend="glossary-role">ロール</glossterm>。
（<xref linkend="role-attributes"/>を参照）。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-user-mapping">
<!--
   <glossterm>User mapping</glossterm>
-->
   <glossterm>User mapping【ユーザマッピング】</glossterm>
   <glossdef>
    <para>
<!--
     The translation of login credentials in the local
     <glossterm linkend="glossary-database">database</glossterm> to credentials
     in a remote data system defined by a
     <glossterm linkend="glossary-foreign-data-wrapper">foreign data wrapper</glossterm>.
-->
ローカル<glossterm linkend="glossary-database">データベース</glossterm>内のログイン認証情報をリモートデータシステム内の<glossterm linkend="glossary-foreign-data-wrapper">外部データラッパー</glossterm>によって定義された認証情報に変換すること。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-createusermapping"/>.
-->
詳細については<xref linkend="sql-createusermapping"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-utc">
   <glossterm>UTC</glossterm>
   <glossdef>
    <para>
<!--
     Universal Coordinated Time, the primary global time reference,
     approximately the time prevailing at the zero meridian of longitude.
     Often but inaccurately referred to as GMT (Greenwich Mean Time).
-->
協定世界時。主なグローバルな時間基準で、経度0度の子午線でおおよそ標準とされる時刻です。
しばしば、GMT（グリニッジ標準時）と呼ばれますが正確ではありません。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-vacuum">
<!--
   <glossterm>Vacuum</glossterm>
-->
   <glossterm>Vacuum【バキューム】</glossterm>
   <glossdef>
    <para>
<!--
     The process of removing outdated
     <glossterm linkend="glossary-tuple">tuple versions</glossterm>
     from tables or materialized views, and other closely related
     processing required by <productname>PostgreSQL</productname>'s
     implementation of <glossterm linkend="glossary-mvcc">MVCC</glossterm>.
     This can be initiated through the use of
     the <command>VACUUM</command> command, but can also be handled automatically
     via <glossterm linkend="glossary-autovacuum">autovacuum</glossterm> processes.
-->
テーブルまたはマテリアライズドビューから古いものとなった<glossterm linkend="glossary-tuple">タプルバージョン</glossterm>を削除し、また<productname>PostgreSQL</productname>の<glossterm linkend="glossary-mvcc">MVCC</glossterm>の実装に必要なその他の密接に関連する処理をおこなうプロセス。
これは<command>VACUUM</command>コマンドを使用して開始できますが、<glossterm linkend="glossary-autovacuum">自動バキューム</glossterm>プロセスを介して自動的に処理することもできます。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="routine-vacuuming"/> .
-->
詳細については<xref linkend="routine-vacuuming"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-view">
<!--
   <glossterm>View</glossterm>
-->
   <glossterm>View【ビュー】</glossterm>
   <glossdef>
    <para>
<!--
     A <glossterm linkend="glossary-relation">relation</glossterm> that is defined by a
     <command>SELECT</command> statement, but has no storage of its own.
     Any time a query references a view, the definition of the view is
     substituted into the query as if the user had typed it as a subquery
     instead of the name of the view.
-->
<command>SELECT</command>文によって定義された<glossterm linkend="glossary-relation">リレーション</glossterm>ですが、それ自体は格納されません。
問い合わせがビューを参照すると、ビューの名前ではなく副問い合わせとして入力したかのように、ビューの定義が問い合わせに代入されます。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="sql-createview"/>.
-->
詳細については<xref linkend="sql-createview"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-vm">
<!--
   <glossterm>Visibility map (fork)</glossterm>
-->
   <glossterm>Visibility map【可視性マップ】（フォーク）</glossterm>
   <glossdef>
    <para>
<!--
     A storage structure that keeps metadata about each data page
     of a table's main fork.  The visibility map entry for
     each page stores two bits: the first one
     (<literal>all-visible</literal>) indicates that all tuples
     in the page are visible to all transactions.  The second one
     (<literal>all-frozen</literal>) indicates that all tuples
     in the page are marked frozen.
-->
テーブルのメインフォークの各データページに関するメタデータ保持する格納構造です。
各ページの可視性マップのエントリに2ビットが格納されます。
1番目のビット(<literal>all-visible</literal>)は、ページ内のすべてのタプルがすべてのトランザクションに対して可視であることを示します。
2番目のビット(<literal>all-frozen</literal>)は、ページ内のすべてのタプルが凍結とマークされていることを示します。
    </para>
   </glossdef>
  </glossentry>

  <glossentry>
   <glossterm>WAL</glossterm>
   <glosssee otherterm="glossary-wal" />
  </glossentry>

  <glossentry id="glossary-wal-archiver">
<!--
   <glossterm>WAL archiver (process)</glossterm>
-->
   <glossterm>WAL archiver【WALアーカイバ】（プロセス）</glossterm>
   <glossdef>
    <para>
<!--
     An <glossterm linkend="glossary-auxiliary-proc">auxiliary process</glossterm>
     which, if enabled, saves copies of
     <glossterm linkend="glossary-wal-file">WAL files</glossterm>
     for the purpose of creating backups or keeping
     <glossterm linkend="glossary-replica">replicas</glossterm> current.
-->
有効な場合、バックアップの作成または<glossterm linkend="glossary-replica">レプリカ</glossterm>を最新の状態に保つために、<glossterm linkend="glossary-wal-file">WALファイル</glossterm>のコピーを保持する<glossterm linkend="glossary-auxiliary-proc">補助プロセス</glossterm>。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="continuous-archiving"/>.
-->
詳細については<xref linkend="continuous-archiving"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-wal-file">
<!--
   <glossterm>WAL file</glossterm>
-->
   <glossterm>WAL file【WALファイル】</glossterm>
   <glossdef>
    <para>
<!--
     Also known as <firstterm>WAL segment</firstterm> or
     <firstterm>WAL segment file</firstterm>.
     Each of the sequentially-numbered files that provide storage space for
     <glossterm linkend="glossary-wal">WAL</glossterm>.
     The files are all of the same predefined size
     and are written in sequential order, interspersing changes
     as they occur in multiple simultaneous sessions.
     If the system crashes, the files are read in order, and each of the
     changes is replayed to restore the system to the state it was in
     before the crash.
-->
<firstterm>WALセグメント</firstterm>や<firstterm>WALセグメントファイル</firstterm>としても知られています。
<glossterm linkend="glossary-wal">WAL</glossterm>の格納領域を提供する連番のファイル。
ファイルはすべて、事前に定義された同じサイズであり、連続した順序で書き込まれます。複数のセッションで同時に発生する変更が分散しています。
システムがクラッシュした場合、ファイルは順番に読み込まれ、各変更が再生されてクラッシュする前の状態にシステムが復元されます。
    </para>
    <para>
<!--
     Each WAL file can be released after a
     <glossterm linkend="glossary-checkpoint">checkpoint</glossterm>
     writes all the changes in it to the corresponding data files.
     Releasing the file can be done either by deleting it, or by changing its
     name so that it will be used in the future, which is called
     <firstterm>recycling</firstterm>.
-->
各WALファイルは<glossterm linkend="glossary-checkpoint">チェックポイント</glossterm>がすべての変更を対応するデータファイルをすべて書き込んだ後に解放できます。
ファイルを解放するには、削除するか、名前を変えて将来使用できるようにします。これは<firstterm>recycling（再利用）</firstterm>と呼ばれます。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="wal-internals"/>.
-->
詳細については<xref linkend="wal-internals"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-wal-record">
<!--
   <glossterm>WAL record</glossterm>
-->
   <glossterm>WAL record【WALレコード】</glossterm>
   <glossdef>
    <para>
<!--
     A low-level description of an individual data change.
     It contains sufficient information for the data change to be
     re-executed (<firstterm>replayed</firstterm>) in case a system failure
     causes the change to be lost.
     WAL records use a non-printable binary format.
-->
個々のデータの変更を低レベルで記述したもの。
システム障害によって変更が失われた場合に、データの変更を再実行（<firstterm>再生</firstterm>）するための十分な情報が含まれています。
WALレコードは表示できないバイナリフォーマットを使用します。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="wal-internals"/>.
-->
詳細については<xref linkend="wal-internals"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-wal-receiver">
<!--
   <glossterm>WAL receiver (process)</glossterm>
-->
   <glossterm>WAL receiver【WAL受信】（プロセス）</glossterm>
   <glossdef>
    <para>
<!--
     An <glossterm linkend="glossary-auxiliary-proc">auxiliary process</glossterm>
     that runs on a <glossterm linkend="glossary-replica">replica</glossterm>
     to receive WAL from the
     <glossterm linkend="glossary-primary-server">primary server</glossterm>
     for replay by the
     <glossterm linkend="glossary-startup-process">startup process</glossterm>.
-->
<glossterm linkend="glossary-primary-server">プライマリサーバ</glossterm>からWALを受信して<glossterm linkend="glossary-startup-process">スタートアッププロセス</glossterm>が再生するために、<glossterm linkend="glossary-replica">レプリカ</glossterm>上で実行される<glossterm linkend="glossary-auxiliary-proc">補助プロセス</glossterm>。
    </para>

    <para>
<!--
     For more information, see
     <xref linkend="warm-standby"/>.
-->
詳細については<xref linkend="warm-standby"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry>
<!--
   <glossterm>WAL segment</glossterm>
-->
   <glossterm>WAL segment【WALセグメント】</glossterm>
   <glosssee otherterm="glossary-wal-file" />
  </glossentry>

  <glossentry id="glossary-wal-sender">
<!--
   <glossterm>WAL sender (process)</glossterm>
-->
   <glossterm>WAL sender【WAL送信】（プロセス）</glossterm>
   <glossdef>
    <para>
<!--
     A special <glossterm linkend="glossary-backend">backend process</glossterm>
     that streams WAL over a network.  The receiving end can be a
     <glossterm linkend="glossary-wal-receiver">WAL receiver</glossterm>
     in a <glossterm linkend="glossary-replica">replica</glossterm>,
     <xref linkend="app-pgreceivewal"/>, or any other client program
     that speaks the replication protocol.
-->
ネットワーク上でWALをストリーミングする特別な<glossterm linkend="glossary-backend">バックエンドプロセス</glossterm>。
受信側は<glossterm linkend="glossary-replica">レプリカ</glossterm>の<glossterm linkend="glossary-wal-receiver">WAL受信</glossterm>、<xref linkend="app-pgreceivewal"/>、または複製プロトコルを話す他のクライアントプログラムです。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-wal-summarizer">
<!--
   <glossterm>WAL summarizer (process)</glossterm>
-->
   <glossterm>WAL summarizer【WAL要約処理】（プロセス）</glossterm>
   <glossdef>
    <para>
<!--
     An <glossterm linkend="glossary-auxiliary-proc">auxiliary process</glossterm>
     that summarizes WAL data for
     <glossterm linkend="glossary-incremental-backup">incremental backups</glossterm>.
-->
<glossterm linkend="glossary-incremental-backup">増分バックアップ</glossterm>のためにWALデータを要約する<glossterm linkend="glossary-auxiliary-proc">補助プロセス</glossterm>。
    </para>
    <para>
<!--
     For more information, see <xref linkend="runtime-config-wal-summarization"/>.
-->
詳細については<xref linkend="runtime-config-wal-summarization"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-wal-writer">
<!--
   <glossterm>WAL writer (process)</glossterm>
-->
   <glossterm>WAL writer【WALライタ】（プロセス）</glossterm>
   <glossdef>
    <para>
<!--
     An <glossterm linkend="glossary-auxiliary-proc">auxiliary process</glossterm>
     that writes <glossterm linkend="glossary-wal-record">WAL records</glossterm>
     from <glossterm linkend="glossary-shared-memory">shared memory</glossterm> to
     <glossterm linkend="glossary-wal-file">WAL files</glossterm>.
-->
<glossterm linkend="glossary-wal-record">WALレコード</glossterm>を<glossterm linkend="glossary-shared-memory">共有メモリ</glossterm>から<glossterm linkend="glossary-wal-file">WALファイル</glossterm>に書き出す<glossterm linkend="glossary-auxiliary-proc">補助プロセス</glossterm>。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="runtime-config-wal"/>.
-->
詳細については<xref linkend="runtime-config-wal"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-window-function">
<!--
   <glossterm>Window function (routine)</glossterm>
-->
   <glossterm>Window function【ウィンドウ関数】（ルーチン）</glossterm>
   <glossdef>
    <para>
<!--
     A type of <glossterm linkend="glossary-function">function</glossterm>
     used in a <glossterm linkend="glossary-query">query</glossterm>
     that applies to a <glossterm linkend="glossary-partition">partition</glossterm>
     of the query's <glossterm linkend="glossary-result-set">result set</glossterm>;
     the function's result is based on values found in
     <glossterm linkend="glossary-tuple">rows</glossterm> of the same partition or frame.
-->
<glossterm linkend="glossary-query">問い合わせ</glossterm>内で使用される<glossterm linkend="glossary-function">関数</glossterm>の一種で、問い合わせの<glossterm linkend="glossary-result-set">結果セット</glossterm>の<glossterm linkend="glossary-partition">パーティション</glossterm>に適用されます。
この関数の結果は、同じパーティションまたはフレームの<glossterm linkend="glossary-tuple">行</glossterm>の値を元にしている。
    </para>
    <para>
<!--
     All <glossterm linkend="glossary-aggregate">aggregate functions</glossterm>
     can be used as window functions, but window functions can also be
     used to, for example, give ranks to each of the rows in the partition.
     Also known as <firstterm>analytic functions</firstterm>.
-->
すべての<glossterm linkend="glossary-aggregate">集約関数</glossterm>はウィンドウ関数として使用できますが、ウィンドウ関数は例えば、パーティション内の各行にランク付けすることもできます。
<firstterm>分析関数</firstterm>とも呼ばれます。
    </para>
    <para>
<!--
     For more information, see
     <xref linkend="tutorial-window"/>.
-->
詳細については<xref linkend="tutorial-window"/>を参照してください。
    </para>
   </glossdef>
  </glossentry>

  <glossentry id="glossary-wal">
<!--
   <glossterm>Write-ahead log</glossterm>
-->
   <glossterm>Write-ahead log【先行書き込みログ】</glossterm>
   <glossdef>
    <para>
<!--
     The journal that keeps track of the changes in the
     <glossterm linkend="glossary-db-cluster">database cluster</glossterm>
     as user- and system-invoked operations take place.
     It comprises many individual
     <glossterm linkend="glossary-wal-record">WAL records</glossterm> written
     sequentially to <glossterm linkend="glossary-wal-file">WAL files</glossterm>.
-->
ユーザおよびシステム起因の操作による<glossterm linkend="glossary-db-cluster">データベースクラスタ</glossterm>内の変更を追跡するジャーナル。
それは、多くの個別の<glossterm linkend="glossary-wal-record">WALレコード</glossterm>が連続して<glossterm linkend="glossary-wal-file">WALファイル</glossterm>に書き込まれます。
    </para>
   </glossdef>
  </glossentry>
 </glosslist>
</appendix>
