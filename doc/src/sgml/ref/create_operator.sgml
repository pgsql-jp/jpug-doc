<!--
doc/src/sgml/ref/create_operator.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEOPERATOR">
 <indexterm zone="sql-createoperator">
  <primary>CREATE OPERATOR</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE OPERATOR</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE OPERATOR</refname>
<!--
  <refpurpose>define a new operator</refpurpose>
-->
  <refpurpose>
新しい演算子を定義する
  </refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE OPERATOR <replaceable>name</replaceable> (
    PROCEDURE = <replaceable class="parameter">function_name</replaceable>
    [, LEFTARG = <replaceable class="parameter">left_type</replaceable> ] [, RIGHTARG = <replaceable class="parameter">right_type</replaceable> ]
    [, COMMUTATOR = <replaceable class="parameter">com_op</replaceable> ] [, NEGATOR = <replaceable class="parameter">neg_op</replaceable> ]
    [, RESTRICT = <replaceable class="parameter">res_proc</replaceable> ] [, JOIN = <replaceable class="parameter">join_proc</replaceable> ]
    [, HASHES ] [, MERGES ]
)
</synopsis>
 </refsynopsisdiv>


 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>CREATE OPERATOR</command> defines a new operator,
   <replaceable class="parameter">name</replaceable>.  The user who
   defines an operator becomes its owner.  If a schema name is given
   then the operator is created in the specified schema.  Otherwise it
   is created in the current schema.
-->
<command>CREATE OPERATOR</command>は、新しい演算子<replaceable class="parameter">name</replaceable>を定義します。
演算子を定義したユーザがその所有者となります。
スキーマ名が指定されていた場合、その演算子は指定したスキーマに作成されます。
スキーマ名が指定されなかった場合、現在のスキーマに作成されます。
  </para>

  <para>
<!--
   The operator name is a sequence of up to <symbol>NAMEDATALEN</>-1
   (63 by default) characters from the following list:
-->
演算子名として使用できるのは、以下に示す文字を使った、<symbol>NAMEDATALEN</>-1（デフォルトでは63）文字までの文字列です。
<literallayout>
+ - * / &lt; &gt; = ~ ! @ # % ^ &amp; | ` ?
</literallayout>

<!--
   There are a few restrictions on your choice of name:
-->
名前の選択には以下に示すいくつかの制約があります。
   <itemizedlist>
    <listitem>
<!--
     <para><literal>&#045;-</literal> and <literal>/*</literal> cannot appear anywhere in an operator name,
     since they will be taken as the start of a comment.
-->
<para><literal>--</literal>と<literal>/*</literal>はコメントの開始とみなされてしまうため、演算子名の一部として使うことができません。
     </para>
    </listitem>
    <listitem>
     <para>
<!--
     A multicharacter operator name cannot end in <literal>+</literal> or
     <literal>-</literal>,
     unless the name also contains at least one of these characters:
-->
複数の文字からなる演算子名は、下記の文字のうちの1つ以上を含まない限り、<literal>+</literal>または<literal>-</literal>で終わることができません。
<literallayout>
~ ! @ # % ^ &amp; | ` ?
</literallayout>
<!--
     For example, <literal>@-</literal> is an allowed operator name,
     but <literal>*-</literal> is not.
     This restriction allows <productname>PostgreSQL</productname> to
     parse SQL-compliant commands without requiring spaces between tokens.
-->
例えば、<literal>@-</literal>は演算子名として許されますが、<literal>*-</literal>は許されません。
この制約により、<productname>PostgreSQL</productname>がSQLに準拠する問い合わせをトークン同士の間に空白を要求することなしに解析することが可能になります。
     </para>
    </listitem>
    <listitem>
     <para>
<!--
     The use of <literal>=&gt;</> as an operator name is deprecated.  It may
     be disallowed altogether in a future release.
-->
演算子名として<literal>=&gt;</>を使用することは廃止される予定です。
将来のリリースで完全に許されなくなるかもしれません。
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
<!--
   The operator <literal>!=</literal> is mapped to
   <literal>&lt;&gt;</literal> on input, so these two names are always
   equivalent.
-->
演算子<literal>!=</literal>は入力時に<literal>&lt;&gt;</literal>に変換されるので、これらの2つの名前は常に等価です。
  </para>

  <para>
<!--
   At least one of <literal>LEFTARG</> and <literal>RIGHTARG</> must be defined.  For
   binary operators, both must be defined. For right  unary
   operators, only <literal>LEFTARG</> should be defined, while for left
   unary operators only <literal>RIGHTARG</> should be defined.
-->
少なくとも<literal>LEFTARG</>と<literal>RIGHTARG</>のどちらかは定義しなければなりません。
二項演算子では、両方を定義しなければなりません。 
右単項演算子では<literal>LEFTARG</>のみ、左単項演算子では<literal>RIGHTARG</>のみが定義されなければなりません。
  </para>

  <para>
<!--
   The <replaceable class="parameter">function_name</replaceable>
   procedure must have been previously defined using <command>CREATE
   FUNCTION</command> and must be defined to accept the correct number
   of arguments (either one or two) of the indicated types.
-->
<replaceable class="parameter">function_name</replaceable>プロシージャは、<command>CREATE FUNCTION</command>を使って事前に定義されていなければなりません。また、指定された型の正しい数の引数（1つか2つ）を受け付けるよう定義する必要があります。
  </para>

  <para>
<!--
   The other clauses specify optional operator optimization clauses.
   Their meaning is detailed in <xref linkend="xoper-optimization">.
-->
他の句は演算子最適化用の句(省略可能)です。
これらの意味は<xref linkend="xoper-optimization">で説明されています。
  </para>

  <para>
<!--
   To be able to create an operator, you must have <literal>USAGE</literal>
   privilege on the argument types and the return type, as well
   as <literal>EXECUTE</literal> privilege on the underlying function.  If a
   commutator or negator operator is specified, you must own these operators.
-->
演算子を作成するためには、
引数の型と戻り値の型に対する<literal>USAGE</literal>権限と背後にある関数に対する<literal>EXECUTE</literal>権限を持たなければなりません。
交代演算子または否定子演算子を指定する場合は、これらの演算子を所有していなければなりません。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">name</replaceable></term>
      <listitem>
       <para>
<!--
        The name of the operator to be defined. See above for allowable
        characters.  The name can be schema-qualified, for example
        <literal>CREATE OPERATOR myschema.+ (...)</>.  If not, then
        the operator is created in the current schema.  Two operators
        in the same schema can have the same name if they operate on
        different data types.  This is called
        <firstterm>overloading</>.
-->
定義される演算子の名前です。
使用できる文字は上を参照してください。
この名前は、例えば<literal>CREATE OPERATOR myschema.+ (...)</>のように、スキーマ修飾可能です。
修飾されていなければ、演算子は現在のスキーマに作成されます。
異なるデータ型について処理するものであれば、同じスキーマ内の2つの演算子は同じ名前を持つことができます。
これを<firstterm>オーバーロード</>と言います。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">function_name</replaceable></term>
      <listitem>
       <para>
<!--
        The function used to implement this operator.
-->
演算子を実装するために使用する関数です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">left_type</replaceable></term>
      <listitem>
       <para>
<!--
        The data type of the operator's left operand, if any.
        This option would be omitted for a left-unary operator.
-->
演算子の左オペランドのデータ型です（左オペランドが存在する場合のみ）。
このオプションは左単項演算子では省略されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">right_type</replaceable></term>
      <listitem>
       <para>
<!--
        The data type of the operator's right operand, if any.
        This option would be omitted for a right-unary operator.
-->
演算子の右オペランドのデータ型です（右オペランドが存在する場合のみ）。
このオプションは右単項演算子では省略されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">com_op</replaceable></term>
      <listitem>
       <para>
<!--
        The commutator of this operator.
-->
この演算子の交代演算子です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">neg_op</replaceable></term>
      <listitem>
       <para>
<!--
        The negator of this operator.
-->
この演算子の否定子です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">res_proc</replaceable></term>
      <listitem>
       <para>
<!--
        The restriction selectivity estimator function for this operator.
-->
この演算子の制約選択評価関数です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">join_proc</replaceable></term>
      <listitem>
       <para>
<!--
        The join selectivity estimator function for this operator.
-->
この演算子の結合選択評価関数です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>HASHES</literal></term>
      <listitem>
       <para>
<!--
       Indicates this operator can support a hash join.
-->
この演算子がハッシュ結合をサポートできることを示します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>MERGES</literal></term>
      <listitem>
       <para>
<!--
       Indicates this operator can support a merge join.
-->
この演算子がマージ結合をサポートできることを示します。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

  <para>
<!--
   To give a schema-qualified operator name in <replaceable
   class="parameter">com_op</replaceable> or the other optional
   arguments, use the <literal>OPERATOR()</> syntax, for example:
-->
スキーマ修飾された演算子名を<replaceable class="parameter">com_op</replaceable>または他のオプション引数に与えるには、以下の例のように<literal>OPERATOR()</>構文を使用してください。
<programlisting>
COMMUTATOR = OPERATOR(myschema.===) ,
</programlisting></para>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   Refer to <xref linkend="xoper"> for further information.
-->
詳細については<xref linkend="xoper">を参照してください。
  </para>

  <para>
<!--
   It is not possible to specify an operator's lexical precedence in
   <command>CREATE OPERATOR</>, because the parser's precedence behavior
   is hard-wired.  See <xref linkend="sql-precedence"> for precedence details.
-->
<command>CREATE OPERATOR</>で演算子の語彙優先順位を指定することはできません。
パーサの優先順位に関する動作は固定であるためです。
詳細な優先順位については<xref linkend="sql-precedence">を参照してください。
  </para>

  <para>
<!--
   The obsolete options <literal>SORT1</>, <literal>SORT2</>,
   <literal>LTCMP</>, and <literal>GTCMP</> were formerly used to
   specify the names of sort operators associated with a merge-joinable
   operator.  This is no longer necessary, since information about
   associated operators is found by looking at B-tree operator families
   instead.  If one of these options is given, it is ignored except
   for implicitly setting <literal>MERGES</> true.
-->
廃止されたオプション<literal>SORT1</>、<literal>SORT2</>、<literal>LTCMP</>、および<literal>GTCMP</>は、マージ結合可能演算子に関連したソート演算子の名前を指定するために使用されていました。
代わりにB-Tree演算子族を検索することで関連する演算子を見つけることができるようになりましたので、これは必要がなくなりました。
これらの内のいずれかのオプションが指定された場合、暗黙的に<literal>MERGES</>を真に設定するだけで、それ以外は無視します。
  </para>

  <para>
<!--
   Use <xref linkend="sql-dropoperator"> to delete user-defined operators
   from a database.  Use <xref linkend="sql-alteroperator"> to modify operators in a
   database.
-->
データベースからユーザ定義の演算子を削除するには<xref linkend="sql-dropoperator">を使用してください。
データベース内の演算子を変更するには<xref linkend="sql-alteroperator">を使用してください。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   The following command defines a new operator, area-equality, for
   the data type <type>box</type>:
-->
以下のコマンドは、データ型<type>box</type>に対する領域等価性を判定する新しい演算子を定義します。
<programlisting>
CREATE OPERATOR === (
    LEFTARG = box,
    RIGHTARG = box,
    PROCEDURE = area_equal_procedure,
    COMMUTATOR = ===,
    NEGATOR = !==,
    RESTRICT = area_restriction_procedure,
    JOIN = area_join_procedure,
    HASHES, MERGES
);
</programlisting></para>
 </refsect1>

 <refsect1>
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   <command>CREATE OPERATOR</command> is a
   <productname>PostgreSQL</productname> extension.  There are no
   provisions for user-defined operators in the SQL standard.
-->
<command>CREATE OPERATOR</command>は<productname>PostgreSQL</productname>の拡張です。
標準SQLには、ユーザ定義の演算子についての規定はありません。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alteroperator"></member>
   <member><xref linkend="sql-createopclass"></member>
   <member><xref linkend="sql-dropoperator"></member>
  </simplelist>
 </refsect1>
</refentry>
