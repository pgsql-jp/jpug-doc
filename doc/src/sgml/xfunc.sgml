<!-- doc/src/sgml/xfunc.sgml -->

 <sect1 id="xfunc">
<!--
  <title>User-defined Functions</title>
-->
  <title>ユーザ定義関数</title>

  <indexterm zone="xfunc">
<!--
   <primary>function</primary>
   <secondary>user-defined</secondary>
-->
   <primary>関数</primary>
   <secondary>ユーザ定義</secondary>
  </indexterm>

  <para>
<!--
   <productname>PostgreSQL</productname> provides four kinds of
   functions:
-->
<productname>PostgreSQL</productname>は4種類の関数を提供します。

   <itemizedlist>
    <listitem>
     <para>
<!--
      query language functions (functions written in
      <acronym>SQL</acronym>) (<xref linkend="xfunc-sql">)
-->
問い合わせ言語関数（<acronym>SQL</acronym>で作成された関数）（<xref linkend="xfunc-sql">）
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      procedural language functions (functions written in, for
      example, <application>PL/pgSQL</> or <application>PL/Tcl</>)
      (<xref linkend="xfunc-pl">)
-->
手続型言語関数（<application>PL/pgSQL</>や<application>PL/Tcl</>などで作成された関数）（<xref linkend="xfunc-pl">）
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      internal functions (<xref linkend="xfunc-internal">)
-->
内部関数（<xref linkend="xfunc-internal">）
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      C-language functions (<xref linkend="xfunc-c">)
-->
C言語関数（<xref linkend="xfunc-c">）
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
<!--
   Every kind
   of  function  can take base types, composite types, or
   combinations of these as arguments (parameters). In addition,
   every kind of function can return a base type or
   a composite type.  Functions can also be defined to return
   sets of base or composite values.
-->
すべての関数は、基本型、複合型、またはこの組み合わせを引数（パラメータ）として受け付けることが可能です。
また、すべての関数は基本型または複合型を返すことが可能です。
関数は、基本型の集合または複合型の集合を返すように定義することもできます。
  </para>

  <para>
<!--
   Many kinds of functions can take or return certain pseudo-types
   (such as polymorphic types), but the available facilities vary.
   Consult the description of each kind of function for more details.
-->
多くの関数は（多様型のような）特定の疑似型を引数としたり返したりすることができます。
しかし、利用できる機能は様々です。
詳細は各関数の種類の説明を参照してください。
  </para>

  <para>
<!--
   It's easiest to define <acronym>SQL</acronym>
   functions, so we'll start by discussing those.
   Most of the concepts presented for <acronym>SQL</acronym> functions
   will carry over to the other types of functions.
-->
<acronym>SQL</acronym>関数の定義の方法が最も簡単ですので、そちらから説明します。
<acronym>SQL</acronym>関数にある概念のほとんどは、他の種類の関数にも適用できます。
  </para>

  <para>
<!--
   Throughout this chapter, it can be useful to look at the reference
   page of the <xref linkend="sql-createfunction"> command to
   understand the examples better.  Some examples from this chapter
   can be found in <filename>funcs.sql</filename> and
   <filename>funcs.c</filename> in the <filename>src/tutorial</>
   directory in the <productname>PostgreSQL</productname> source
   distribution.
-->
本章の全体に関して、その例をより理解するために、<xref linkend="sql-createfunction">コマンドのマニュアルページを一読することが有用です。
本章の例のいくつかは<productname>PostgreSQL</productname>ソース配布物内の<filename>src/tutorial</>ディレクトリにある<filename>funcs.sql</filename>と<filename>funcs.c</filename>でも参照することができます。
  </para>
  </sect1>

  <sect1 id="xfunc-sql">
<!--
   <title>Query Language (<acronym>SQL</acronym>) Functions</title>
-->
<title>問い合わせ言語（<acronym>SQL</acronym>）関数</title>

   <indexterm zone="xfunc-sql">
<!--
    <primary>function</primary>
    <secondary>user-defined</secondary>
    <tertiary>in SQL</tertiary>
-->
    <primary>関数</primary>
    <secondary>ユーザ定義</secondary>
    <tertiary>SQLで作成した</tertiary>
   </indexterm>

   <para>
<!--
    SQL functions execute an arbitrary list of SQL statements, returning
    the result of the last query in the list.
    In the simple (non-set)
    case, the first row of the last query's result will be returned.
    (Bear in mind that <quote>the first row</quote> of a multirow
    result is not well-defined unless you use <literal>ORDER BY</>.)
    If the last query happens
    to return no rows at all, the null value will be returned.
-->
SQL関数は、任意のSQL文のリストを実行し、そのリストの最後の問い合わせの結果を返します。
単純な（集合ではない）場合、最後の問い合わせの結果の最初の行が返されます。
（複数行の結果のうちの<quote>最初の行</quote>は、<literal>ORDER BY</>を使用しない限り定義付けることができないことを覚えておいてください。）
最後の問い合わせが何も行を返さない時はNULL値が返されます。
   </para>

   <para>
<!--
    Alternatively, an SQL function can be declared to return a set (that is,
    multiple rows) by specifying the function's return type as <literal>SETOF
    <replaceable>sometype</></literal>, or equivalently by declaring it as
    <literal>RETURNS TABLE(<replaceable>columns</>)</literal>.  In this case
    all rows of the last query's result are returned.  Further details appear
    below.
-->
他にも、SQL関数は、<literal>SETOF</literal> <replaceable>sometype</>型を返すように指定すること、または同意の<literal>RETURNS TABLE(<replaceable>columns</>)</literal>と宣言することにより、集合（つまり複数の行）を返すように宣言することもできます。
この場合、最後の問い合わせの結果のすべての行が返されます。
詳細は後で説明します。
   </para>

   <para>
<!--
    The body of an SQL function must be a list of SQL
    statements separated by semicolons.  A semicolon after the last
    statement is optional.  Unless the function is declared to return
    <type>void</>, the last statement must be a <command>SELECT</>,
    or an <command>INSERT</>, <command>UPDATE</>, or <command>DELETE</>
    that has a <literal>RETURNING</> clause.
-->
SQL関数の本体は、セミコロンで区切ったSQL文のリストでなければなりません。
最後の文の後のセミコロンは省略可能です。
関数が<type>void</>を返すものと宣言されていない限り、最後の文は<command>SELECT</>、または<literal>RETURNING</>句を持つ<command>INSERT</>、<command>UPDATE</>、または<command>DELETE</>でなければなりません。
   </para>

    <para>
<!--
     Any collection of commands in the  <acronym>SQL</acronym>
     language can be packaged together and defined as a function.
     Besides <command>SELECT</command> queries, the commands can include data
     modification queries (<command>INSERT</command>,
     <command>UPDATE</command>, and <command>DELETE</command>), as well as
     other SQL commands. (You cannot use transaction control commands, e.g.
     <command>COMMIT</>, <command>SAVEPOINT</>, and some utility
     commands, e.g.  <literal>VACUUM</>, in <acronym>SQL</acronym> functions.)
     However, the final command
     must be a <command>SELECT</command> or have a <literal>RETURNING</>
     clause that returns whatever is
     specified as the function's return type.  Alternatively, if you
     want to define a SQL function that performs actions but has no
     useful value to return, you can define it as returning <type>void</>.
     For example, this function removes rows with negative salaries from
     the <literal>emp</> table:
-->
<acronym>SQL</acronym>言語で作成された、任意のコマンド群はまとめて、関数として定義することができます。
<command>SELECT</command>問い合わせ以外に、データ変更用の問い合わせ（つまり、<command>INSERT</command>、<command>UPDATE</command>、<command>DELETE</command>）やその他のSQLコマンドを含めることができます。
（<acronym>SQL</acronym>関数では<command>COMMIT</>、<command>SAVEPOINT</>などのトランザクション制御コマンドおよび<literal>VACUUM</>などのユーティリティコマンドは使用することはできません。）
しかし、最後のコマンドは、関数の戻り値型として定義したものを返す<command>SELECT</command>、または<literal>RETURNING</>句があるものでなければなりません。
その他にも、何か動作をさせるが、有用な値を返さないSQL関数を定義したいのであれば、<type>void</>を返すものと定義することで実現可能です。
たとえば、以下の関数は<literal>emp</>テーブルから負の給料となっている行を削除します。

<screen>
CREATE FUNCTION clean_emp() RETURNS void AS '
    DELETE FROM emp
        WHERE salary &lt; 0;
' LANGUAGE SQL;

SELECT clean_emp();

 clean_emp
-----------

(1 row)
</screen>
    </para>

    <note>
     <para>
<!--
      The entire body of a SQL function is parsed before any of it is
      executed.  While a SQL function can contain commands that alter
      the system catalogs (e.g., <command>CREATE TABLE</>), the effects
      of such commands will not be visible during parse analysis of
      later commands in the function.  Thus, for example,
      <literal>CREATE TABLE foo (...); INSERT INTO foo VALUES(...);</literal>
      will not work as desired if packaged up into a single SQL function,
      since <structname>foo</> won't exist yet when the <command>INSERT</>
      command is parsed.  It's recommended to use <application>PL/PgSQL</>
      instead of a SQL function in this type of situation.
-->
SQL関数の本体全体は、その一部が実行される前に解析されます。
SQL関数はシステムカタログを変更するコマンド(例えば<command>CREATE TABLE</>)を含むことができますので、そのようなコマンドの効果は関数の以降のコマンドの解析中は可視ではありません。
それゆえ、例えば、<literal>CREATE TABLE foo (...); INSERT INTO foo VALUES(...);</literal>は単一のSQL関数にまとめられていると期待したようには動作しません。<command>INSERT</>コマンドが解析されている時には<structname>foo</>がまだ存在しないからです。
このような場合にはSQL関数の代わりに<application>PL/PgSQL</>を使うことを薦めます。
     </para>
   </note>

   <para>
<!--
    The syntax of the <command>CREATE FUNCTION</command> command requires
    the function body to be written as a string constant.  It is usually
    most convenient to use dollar quoting (see <xref
    linkend="sql-syntax-dollar-quoting">) for the string constant.
    If you choose to use regular single-quoted string constant syntax,
    you must double single quote marks (<literal>'</>) and backslashes
    (<literal>\</>) (assuming escape string syntax) in the body of
    the function (see <xref linkend="sql-syntax-strings">).
-->
<command>CREATE FUNCTION</command>コマンドの構文では、関数本体は文字列定数として作成される必要があります。
この文字列定数の記述には、通常、ドル引用符付け（<xref linkend="sql-syntax-dollar-quoting">）が最も便利です。
文字列定数を単一引用符で括る通常の構文では、関数本体中で使用される単一引用符（<literal>'</>）とバックスラッシュ（<literal>\</>）（エスケープ文字列構文を仮定）を二重にしなければなりません（<xref linkend="sql-syntax-strings">を参照）。
   </para>

   <sect2 id="xfunc-sql-function-arguments">
<!--
    <title>Arguments for <acronym>SQL</acronym> Functions</title>
-->
    <title><acronym>SQL</acronym>関数用の引数</title>

   <indexterm>
<!--
    <primary>function</primary>
    <secondary>named argument</secondary>
-->
    <primary>関数</primary>
    <secondary>名前付き引数</secondary>
   </indexterm>

    <para>
<!--
     Arguments of a SQL function can be referenced in the function
     body using either names or numbers.  Examples of both methods appear
     below.
-->
SQL関数の引数は関数本体内で名前または番号を用いて参照することができます。
両方の方法の例を後で示します。
    </para>

    <para>
<!--
     To use a name, declare the function argument as having a name, and
     then just write that name in the function body.  If the argument name
     is the same as any column name in the current SQL command within the
     function, the column name will take precedence.  To override this,
     qualify the argument name with the name of the function itself, that is
     <literal><replaceable>function_name</>.<replaceable>argument_name</></literal>.
     (If this would conflict with a qualified column name, again the column
     name wins.  You can avoid the ambiguity by choosing a different alias for
     the table within the SQL command.)
-->
名前を使用するためには、関数引数を名前を持つものとして宣言し、その名前を関数本体内で記述するだけです。
引数名が関数内の現在のSQLコマンドにおける任意の列名と同じ場合は、列名が優先されます。
これを上書きするためには、<literal><replaceable>function_name</>.<replaceable>argument_name</></literal>のように、引数名を関数自身の名前を付けて修飾してください。
(もしこれも修飾された列名と競合する場合は、列名が優先されます。
SQLコマンド内でテーブルに他の別名を付けることで、この曖昧さを防止することができます。)
    </para>

    <para>
<!--
     In the older numeric approach, arguments are referenced using the syntax
     <literal>$<replaceable>n</></>: <literal>$1</> refers to the first input
     argument, <literal>$2</> to the second, and so on.  This will work
     whether or not the particular argument was declared with a name.
-->
古い番号による方法では、引数は関数本体内で<literal>$<replaceable>n</></>という構文を用いて表すことができます。
つまり、$1は第1引数を示し、$2は第2引数のようになります。
これは特定の引数が名前付きで宣言されているかどうかに関係なく動作します。
    </para>

    <para>
<!--
     If an argument is of a composite type, then the dot notation,
     e.g., <literal>argname.fieldname</literal> or
     <literal>$1.fieldname</literal>, can be used to access attributes of the
     argument.  Again, you might need to qualify the argument's name with the
     function name to make the form with an argument name unambiguous.
-->
引数が複合型の場合、<literal>argname.fieldname</literal>や<literal>$1.fieldname</literal>のようなドット表記を用いて引数の属性にアクセスすることができます。
繰り返しになりますが、引数名を持つ形式で曖昧さが発生する場合には関数名で引数名を修飾してください。
    </para>

    <para>
<!--
     SQL function arguments can only be used as data values,
     not as identifiers.  Thus for example this is reasonable:
-->
SQL関数の引数は、識別子としてではなく、データ値としてのみ使用することができます。
したがって、例えば
<programlisting>
INSERT INTO mytable VALUES ($1);
</programlisting>
<!--
but this will not work:
-->
は正しいものですが、以下は動作しません。
<programlisting>
INSERT INTO $1 VALUES (42);
</programlisting>
    </para>

    <note>
     <para>
<!--
      The ability to use names to reference SQL function arguments was added
      in <productname>PostgreSQL</productname> 9.2.  Functions to be used in
      older servers must use the <literal>$<replaceable>n</></> notation.
-->
SQL関数の引数を参照するために名前を使用できる機能は、<productname>PostgreSQL</productname> 9.2で追加されました。
これより古いサーバ内で使われる関数は<literal>$<replaceable>n</></>記法を使用しなければなりません。
     </para>
    </note>
   </sect2>

   <sect2 id="xfunc-sql-base-functions">
<!--
    <title><acronym>SQL</acronym> Functions on Base Types</title>
-->
    <title>基本型を使用する<acronym>SQL</acronym>関数</title>

    <para>
<!--
     The simplest possible <acronym>SQL</acronym> function has no arguments and
     simply returns a base type, such as <type>integer</type>:
-->
最も簡単な<acronym>SQL</acronym>関数は、引数を取らずに単に<type>integer</type>のような基本型を返すものです。

<screen>
CREATE FUNCTION one() RETURNS integer AS $$
    SELECT 1 AS result;
$$ LANGUAGE SQL;

<!--
&#045;&#045; Alternative syntax for string literal:
-->
-- 文字列リテラルの別の構文では
CREATE FUNCTION one() RETURNS integer AS '
    SELECT 1 AS result;
' LANGUAGE SQL;

SELECT one();

 one
-----
   1
</screen>
    </para>

    <para>
<!--
     Notice that we defined a column alias within the function body for the result of the function
     (with  the  name <literal>result</>),  but this column alias is not visible
     outside the function.  Hence,  the  result  is labeled <literal>one</>
     instead of <literal>result</>.
-->
関数本体内で関数の結果用に列の別名を（<literal>result</>という名前で）定義したことに注目してください。
しかし、この列の別名はこの関数の外部からは可視ではありません。
したがって、その結果は<literal>result</>ではなく、<literal>one</>というラベルで表示されています。
    </para>

    <para>
<!--
     It is almost as easy to define <acronym>SQL</acronym> functions
     that take base types as arguments:
-->
基本型を引数として取る、<acronym>SQL</acronym>関数を定義することはほとんどの場合簡単です。

<screen>
CREATE FUNCTION add_em(x integer, y integer) RETURNS integer AS $$
    SELECT x + y;
$$ LANGUAGE SQL;

SELECT add_em(1, 2) AS answer;

 answer
--------
      3
</screen>
    </para>

    <para>
<!--
     Alternatively, we could dispense with names for the arguments and
     use numbers:
-->
この他に、引数に名前を付けることを省くことができます。この場合は番号を使用します。

<screen>
CREATE FUNCTION add_em(integer, integer) RETURNS integer AS $$
    SELECT $1 + $2;
$$ LANGUAGE SQL;

SELECT add_em(1, 2) AS answer;

 answer
--------
      3
</screen>
    </para>

    <para>
<!--
     Here is a more useful function, which might be used to debit a
     bank account:
-->
以下にもう少し役に立つ関数を示します。
これは銀行口座からの引き落としに使用できます。

<programlisting>
CREATE FUNCTION tf1 (accountno integer, debit numeric) RETURNS integer AS $$
    UPDATE bank
        SET balance = balance - debit
        WHERE accountno = tf1.accountno;
    SELECT 1;
$$ LANGUAGE SQL;
</programlisting>

<!--
     A user could execute this function to debit account 17 by $100.00 as
     follows:
-->
以下のように、ユーザはこの関数を使用して、口座番号17から100ドルを引き出すことが可能です。

<programlisting>
SELECT tf1(17, 100.0);
</programlisting>
    </para>

    <para>
<!--
     In this example, we chose the name <literal>accountno</> for the first
     argument, but this is the same as the name of a column in the
     <literal>bank</> table.  Within the <command>UPDATE</> command,
     <literal>accountno</> refers to the column <literal>bank.accountno</>,
     so <literal>tf1.accountno</> must be used to refer to the argument.
     We could of course avoid this by using a different name for the argument.
-->
この例では、第一引数の名前に<literal>accountno</>を選びましたが、これは<literal>bank</>テーブルの列の名前と同じです。
<command>UPDATE</>コマンドの中では、<literal>accountno</>は<literal>bank.accountno</>列を参照しますので、引数を参照するためには<literal>tf1.accountno</>を使用しなければなりません。
もちろんこれは、引数に別の名前を使用することで防ぐことができます。
    </para>

    <para>
<!--
     In practice one would probably like a more useful result from the
     function than a constant 1, so a more likely definition
     is:
-->
実際には、関数の結果を定数1よりもわかりやすい形にするために、以下のように定義するとよいでしょう。

<programlisting>
CREATE FUNCTION tf1 (accountno integer, debit numeric) RETURNS integer AS $$
    UPDATE bank
        SET balance = balance - debit
        WHERE accountno = tf1.accountno;
    SELECT balance FROM bank WHERE accountno = tf1.accountno;
$$ LANGUAGE SQL;
</programlisting>

<!--
     which adjusts the balance and returns the new balance.
     The same thing could be done in one command using <literal>RETURNING</>:
-->
これは残高を調整し、更新後の残高を返します。
同じことは<literal>RETURNING</>を使用して１つのコマンドで行えます。

<programlisting>
CREATE FUNCTION tf1 (accountno integer, debit numeric) RETURNS integer AS $$
    UPDATE bank
        SET balance = balance - debit
        WHERE accountno = tf1.accountno
    RETURNING balance;
$$ LANGUAGE SQL;
</programlisting>
    </para>
   </sect2>

   <sect2 id="xfunc-sql-composite-functions">
<!--
    <title><acronym>SQL</acronym> Functions on Composite Types</title>
-->
    <title>複合型を使用する<acronym>SQL</acronym>関数</title>

    <para>
<!--
     When writing functions with arguments of composite types, we must not
     only specify which argument we want but also the desired attribute
     (field) of that argument.  For example, suppose that
     <type>emp</type> is a table containing employee data, and therefore
     also the name of the composite type of each row of the table.  Here
     is a function <function>double_salary</function> that computes what someone's
     salary would be if it were doubled:
-->
関数の引数に複合型を記述した場合、必要な引数を指定するだけではなく、必要とする引数の属性（フィールド）も指定する必要があります。
例えば、<type>emp</type>が従業員データを持つテーブルとすると、この名前はそのテーブル内の各行を表す複合型の名前でもあります。
以下に示す<function>double_salary</function>関数は、該当する従業員の給料が倍増したらどうなるかを計算します。

<screen>
CREATE TABLE emp (
    name        text,
    salary      numeric,
    age         integer,
    cubicle     point
);

INSERT INTO emp VALUES ('Bill', 4200, 45, '(2,1)');

CREATE FUNCTION double_salary(emp) RETURNS numeric AS $$
    SELECT $1.salary * 2 AS salary;
$$ LANGUAGE SQL;

SELECT name, double_salary(emp.*) AS dream
    FROM emp
    WHERE emp.cubicle ~= point '(2,1)';

 name | dream
------+-------
 Bill |  8400
</screen>
    </para>

    <para>
<!--
     Notice the use of the syntax <literal>$1.salary</literal>
     to select one field of the argument row value.  Also notice
     how the calling <command>SELECT</> command uses <literal>*</>
     to select
     the entire current row of a table as a composite value.  The table
     row can alternatively be referenced using just the table name,
     like this:
-->
<literal>$1.salary</literal>という構文を使用して、引数の行値の1フィールドを選択していることに注目してください。
また、<literal>*</>を使用した<command>SELECT</>コマンドの呼び出しでは、複合型の値として、現在のテーブル行全体を表すテーブル名を使用していることにも注目してください。
別の方法として、テーブル行は以下のようにテーブル名だけを使用して参照することができます。
<screen>
SELECT name, double_salary(emp) AS dream
    FROM emp
    WHERE emp.cubicle ~= point '(2,1)';
</screen>
<!--
     but this usage is deprecated since it's easy to get confused.
-->
しかし、この使用方法は混乱しやすいためお勧めしません。
    </para>

    <para>
<!--
     Sometimes it is handy to construct a composite argument value
     on-the-fly.  This can be done with the <literal>ROW</> construct.
     For example, we could adjust the data being passed to the function:
-->
その場で複合型の引数値を作成することが便利な場合があります。
これは<literal>ROW</>式で行うことができます。
例えば、以下のようにして関数に渡すデータを調整することができます。
<screen>
SELECT name, double_salary(ROW(name, salary*1.1, age, cubicle)) AS dream
    FROM emp;
</screen>
    </para>

    <para>
<!--
     It is also possible to build a function that returns a composite type.
     This is an example of a function
     that returns a single <type>emp</type> row:
-->
複合型を返す関数を作成することもできます。
以下に単一の<type>emp</type>行を返す関数の例を示します。

<programlisting>
CREATE FUNCTION new_emp() RETURNS emp AS $$
    SELECT text 'None' AS name,
        1000.0 AS salary,
        25 AS age,
        point '(2,2)' AS cubicle;
$$ LANGUAGE SQL;
</programlisting>

<!--
     In this example we have specified each of  the  attributes
     with  a  constant value, but any computation
     could have been substituted for these constants.
-->
ここでは、各属性を定数で指定していますが、この定数を何らかの演算に置き換えることもできます。
    </para>

    <para>
<!--
     Note two important things about defining the function:
-->
関数を定義する上で、2つの重要な注意点を以下に示します。

     <itemizedlist>
      <listitem>
       <para>
<!--
        The select list order in the query must be exactly the same as
        that in which the columns appear in the table associated
        with the composite type.  (Naming the columns, as we did above,
        is irrelevant to the system.)
-->
問い合わせにおける選択リストの順番は、複合型と関連したテーブル内で現れる列の順番と正確に一致する必要があります。
（上で行ったように列に名前を付けても、システムは認識しません。）
       </para>
      </listitem>
      <listitem>
       <para>
<!--
        You must typecast the expressions to match the
        definition of the composite type, or you will get errors like this:
-->
複合型定義と一致するように式を型キャストしなければなりません。
さもなくば、以下のようなエラーとなります。
<screen>
<computeroutput>
ERROR:  function declared to return emp returns varchar instead of text at column 1
</computeroutput>
</screen>
       </para>
      </listitem>
     </itemizedlist>
    </para>

    <para>
<!--
     A different way to define the same function is:
-->
同じ関数を以下のように定義することもできます。

<programlisting>
CREATE FUNCTION new_emp() RETURNS emp AS $$
    SELECT ROW('None', 1000.0, 25, '(2,2)')::emp;
$$ LANGUAGE SQL;
</programlisting>

<!--
     Here we wrote a <command>SELECT</> that returns just a single
     column of the correct composite type.  This isn't really better
     in this situation, but it is a handy alternative in some cases
     &mdash; for example, if we need to compute the result by calling
     another function that returns the desired composite value.
-->
ここで、正しい複合型の単一の列を単に返す<command>SELECT</>を記述しました。
今回の例ではこれはより優れたものとはいえませんが、例えば、必要な複合値を返す他の関数を呼び出して結果を計算しなければならない場合など、便利な解法になることがあります。
    </para>

    <para>
<!--
     We could call this function directly in either of two ways:
-->
以下の2つの方法でこの関数を直接呼び出すことができます。

<screen>
SELECT new_emp();

         new_emp
--------------------------
 (None,1000.0,25,"(2,2)")

SELECT * FROM new_emp();

 name | salary | age | cubicle
------+--------+-----+---------
 None | 1000.0 |  25 | (2,2)
</screen>

<!--
     The second way is described more fully in <xref
     linkend="xfunc-sql-table-functions">.
-->
2番目の方法については、<xref linkend="xfunc-sql-table-functions">でより詳しく説明します。
    </para>

    <para>
<!--
     When you use a function that returns a composite type,
     you might want only one field (attribute) from its result.
     You can do that with syntax like this:
-->
複合型を返す関数を使用する時に、その結果から1つのフィールド（属性）のみを使用したいという場合があります。
これは、以下のような構文で行うことができます。

<screen>
SELECT (new_emp()).name;

 name
------
 None
</screen>

<!--
     The extra parentheses are needed to keep the parser from getting
     confused.  If you try to do it without them, you get something like this:
-->
パーサが混乱しないように、括弧を追加する必要があります。
括弧なしで行おうとすると、以下のような結果になります。

<screen>
SELECT new_emp().name;
ERROR:  syntax error at or near "."
LINE 1: SELECT new_emp().name;
                        ^
</screen>
    </para>

    <para>
<!--
     Another option is to use
     functional notation for extracting an attribute.  The  simple  way
     to explain this is that we can use the
     notations <literal>attribute(table)</>  and  <literal>table.attribute</>
     interchangeably.
-->
また、関数表記を使用して属性を抽出することもできます。
簡単に説明すると、<literal>attribute(table)</>と<literal>table.attribute</>という表記方法のどちらでも使用できるということです。

<screen>
SELECT name(new_emp());

 name
------
 None
</screen>

<screen>
<!--
&#045;&#045; This is the same as:
&#045;&#045; SELECT emp.name AS youngster FROM emp WHERE emp.age &lt; 30;
-->
-- これは
-- SELECT emp.name AS youngster FROM emp WHERE emp.age &lt; 30;
-- と同一です。

SELECT name(emp) AS youngster FROM emp WHERE age(emp) &lt; 30;

 youngster
-----------
 Sam
 Andy
</screen>
    </para>

    <tip>
     <para>
<!--
      The equivalence between functional notation and attribute notation
      makes it possible to use functions on composite types to emulate
      <quote>computed fields</>.
-->
関数表記と属性表記の同等性によって、<quote>計算処理されたフィールド</>を模擬するために複合型に対する関数を使用することができます。
      <indexterm>
<!--
       <primary>computed field</primary>
-->
       <primary>計算処理されたフィールド</primary>
      </indexterm>
      <indexterm>
<!--
       <primary>field</primary>
       <secondary>computed</secondary>
-->
       <primary>フィールド</primary>
       <secondary>計算処理された</secondary>
      </indexterm>
<!--
      For example, using the previous definition
      for <literal>double_salary(emp)</>, we can write
-->
例えば、上記で定義された<literal>double_salary(emp)</>を使用して、次のように記述することができます。

<screen>
SELECT emp.name, emp.double_salary FROM emp;
</screen>

<!--
      An application using this wouldn't need to be directly aware that
      <literal>double_salary</> isn't a real column of the table.
      (You can also emulate computed fields with views.)
-->
これを利用するアプリケーションは、<literal>double_salary</>が実際にはテーブルの列ではないことを直接気にする必要はありません。
（また、ビューを用いて計算処理されたフィールドを模擬することも可能です。）
     </para>

     <para>
<!--
      Because of this behavior, it's unwise to give a function that takes
      a single composite-type argument the same name as any of the fields of
      that composite type.
-->
このように動作しますので、単一の複合型の引数を取る関数に、その複合型のいずれかのフィールドの名前と同じ名前を付けることはお奨めしません。
     </para>
    </tip>

    <para>
<!--
     Another way to use a function returning a composite type is to pass the
     result to another function that accepts the correct row type as input:
-->
複合型を結果として返す関数を使用する他の方法は、その結果を、その行型を入力として受け付ける関数に渡す、以下のような方法です。

<screen>
CREATE FUNCTION getname(emp) RETURNS text AS $$
    SELECT $1.name;
$$ LANGUAGE SQL;

SELECT getname(new_emp());
 getname
---------
 None
(1 row)
</screen>
    </para>

    <para>
<!--
     Still another way to use a function that returns a composite type is to
     call it as a table function, as described in <xref
     linkend="xfunc-sql-table-functions">.
-->
複合型の結果を返す関数の使用方法として他にも、テーブル関数として呼び出す方法があります。
これは<xref linkend="xfunc-sql-table-functions">で説明します。
    </para>
   </sect2>

   <sect2 id="xfunc-output-parameters">
<!--
    <title><acronym>SQL</> Functions with Output Parameters</title>
-->
    <title>出力パラメータを持つ<acronym>SQL</>関数</title>

   <indexterm>
<!--
    <primary>function</primary>
    <secondary>output parameter</secondary>
-->
    <primary>関数</primary>
    <secondary>出力パラメータ</secondary>
   </indexterm>

    <para>
<!--
     An alternative way of describing a function's results is to define it
     with <firstterm>output parameters</>, as in this example:
-->
関数の結果の記述方法には、他にも<firstterm>出力パラメータ</>を使用して定義する方法があります。
以下に例を示します。

<screen>
CREATE FUNCTION add_em (IN x int, IN y int, OUT sum int)
AS 'SELECT x + y'
LANGUAGE SQL;

SELECT add_em(3,7);
 add_em
--------
     10
(1 row)
</screen>

<!--
     This is not essentially different from the version of <literal>add_em</>
     shown in <xref linkend="xfunc-sql-base-functions">.  The real value of
     output parameters is that they provide a convenient way of defining
     functions that return several columns.  For example,
-->
<xref linkend="xfunc-sql-base-functions">で示した<literal>add_em</>版と基本的な違いはありません。
複数列を返す関数を定義する簡単な方法を提供することが出力パラメータの本来の価値です。
以下に例を示します。

<screen>
CREATE FUNCTION sum_n_product (x int, y int, OUT sum int, OUT product int)
AS 'SELECT x + y, x * y'
LANGUAGE SQL;

 SELECT * FROM sum_n_product(11,42);
 sum | product
-----+---------
  53 |     462
(1 row)
</screen>

<!--
     What has essentially happened here is that we have created an anonymous
     composite type for the result of the function.  The above example has
     the same end result as
-->
これは基本的に、関数結果用の無名の複合型の作成を行います。
上の例では、

<screen>
CREATE TYPE sum_prod AS (sum int, product int);

CREATE FUNCTION sum_n_product (int, int) RETURNS sum_prod
AS 'SELECT $1 + $2, $1 * $2'
LANGUAGE SQL;
</screen>
と同じ最終結果になります。

<!--
     but not having to bother with the separate composite type definition
     is often handy.  Notice that the names attached to the output parameters
     are not just decoration, but determine the column names of the anonymous
     composite type.  (If you omit a name for an output parameter, the
     system will choose a name on its own.)
-->
しかし、独立した複合型定義に悩まされることがなくなり、便利であるともいえます。
出力パラメータに割り振られた名前が単なる飾りではなく、無名複合型の列名を決定するものであることに注意してください。
（出力パラメータの名前を省略した場合、システム自身が名前を選びます。）
    </para>

    <para>
<!--
     Notice that output parameters are not included in the calling argument
     list when invoking such a function from SQL.  This is because
     <productname>PostgreSQL</productname> considers only the input
     parameters to define the function's calling signature.  That means
     also that only the input parameters matter when referencing the function
     for purposes such as dropping it.  We could drop the above function
     with either of
-->
SQLからこうした関数を呼び出す時、出力パラメータが呼び出し側の引数リストに含まれないことに注意してください。
<productname>PostgreSQL</productname>では入力パラメータのみが関数の呼び出しシグネチャを定義するとみなしているためです。
これはまた、関数を削除することなどを目的に関数を参照する場合、入力パラメータのみが考慮されることを意味しています。
上の関数は、次のいずれかの方法で削除することができます。

<screen>
DROP FUNCTION sum_n_product (x int, y int, OUT sum int, OUT product int);
DROP FUNCTION sum_n_product (int, int);
</screen>
    </para>

    <para>
<!--
     Parameters can be marked as <literal>IN</> (the default),
     <literal>OUT</>, <literal>INOUT</>, or <literal>VARIADIC</>.
     An <literal>INOUT</>
     parameter serves as both an input parameter (part of the calling
     argument list) and an output parameter (part of the result record type).
     <literal>VARIADIC</> parameters are input parameters, but are treated
     specially as described next.
-->
パラメータには、<literal>IN</>（デフォルト）、<literal>OUT</>、<literal>INOUT</>、または<literal>VARIADIC</>という印を付与できます。
<literal>INOUT</>パラメータは、入力パラメータ（呼び出し引数リストの一部）と出力パラメータ（結果のレコード型の一部）の両方を提供します。
<literal>VARIADIC</>パラメータは入力パラメータですが、次に説明するように特別に扱われます。
    </para>
   </sect2>

   <sect2 id="xfunc-sql-variadic-functions">
<!--
    <title><acronym>SQL</> Functions with Variable Numbers of Arguments</title>
-->
    <title>可変長引数を取る<acronym>SQL</>関数</title>

    <indexterm>
     <primary>function</primary>
     <secondary>variadic</secondary>
    </indexterm>

    <indexterm>
<!--
     <primary>variadic function</primary>
-->
     <primary>variadic関数</primary>
    </indexterm>

    <para>
<!--
     <acronym>SQL</acronym> functions can be declared to accept
     variable numbers of arguments, so long as all the <quote>optional</>
     arguments are of the same data type.  The optional arguments will be
     passed to the function as an array.  The function is declared by
     marking the last parameter as <literal>VARIADIC</>; this parameter
     must be declared as being of an array type.  For example:
-->
すべての<quote>オプションの</>引数が同じデータ型の場合、<acronym>SQL</acronym>関数は可変長の引数を受け付けるように宣言できます。
オプションの引数は配列として関数に渡されます。
この関数は最後のパラメータを<literal>VARIADIC</>と印を付けて宣言されます。
このパラメータは配列型であるとして宣言されなければなりません。
例をあげます。

<screen>
CREATE FUNCTION mleast(VARIADIC arr numeric[]) RETURNS numeric AS $$
    SELECT min($1[i]) FROM generate_subscripts($1, 1) g(i);
$$ LANGUAGE SQL;

SELECT mleast(10, -1, 5, 4.4);
 mleast 
--------
     -1
(1 row)
</screen>

<!--
     Effectively, all the actual arguments at or beyond the
     <literal>VARIADIC</> position are gathered up into a one-dimensional
     array, as if you had written
-->
実際、<literal>VARIADIC</>の位置以降の実引数はすべて、あたかも以下のように記述したかのように、1次元の配列としてまとめられます。

<screen>
<!--
SELECT mleast(ARRAY[10, -1, 5, 4.4]);    &#045;&#045; doesn't work
-->
SELECT mleast(ARRAY[10, -1, 5, 4.4]);    -- 動作しません
</screen>

<!--
     You can't actually write that, though &mdash; or at least, it will
     not match this function definition.  A parameter marked
     <literal>VARIADIC</> matches one or more occurrences of its element
     type, not of its own type.
-->
しかし、実際にこのように記述することはできません。
少なくとも、この関数定義に一致しません。
<literal>VARIADIC</>印の付いたパラメータは、自身の型ではなく、その要素型が１つ以上存在することに一致します。
    </para>

    <para>
<!--
     Sometimes it is useful to be able to pass an already-constructed array
     to a variadic function; this is particularly handy when one variadic
     function wants to pass on its array parameter to another one.  You can
     do that by specifying <literal>VARIADIC</> in the call:
-->
時として、variadic関数に既に構築された配列を渡せることは有用です。
１つのvariadic関数が、自身の配列パラメータを他のものに渡したいとき特に便利です。
呼び出しに<literal>VARIADIC</>を指定することで行えます。

<screen>
SELECT mleast(VARIADIC ARRAY[10, -1, 5, 4.4]);
</screen>

<!--
     This prevents expansion of the function's variadic parameter into its
     element type, thereby allowing the array argument value to match
     normally.  <literal>VARIADIC</> can only be attached to the last
     actual argument of a function call.
-->
これは関数のvariadicパラメータがその要素型に拡張するのを防ぎます。
その結果、配列引数値が標準的にマッチされるようになります。
<literal>VARIADIC</>は関数呼び出しの最後の実引数としてのみ付加できます。
    </para>

    <para>
<!--
     The array element parameters generated from a variadic parameter are
     treated as not having any names of their own.  This means it is not
     possible to call a variadic function using named arguments (<xref
     linkend="sql-syntax-calling-funcs">), except when you specify
     <literal>VARIADIC</>.  For example, this will work:
-->
variadicパラメータから生成される配列要素パラメータは、それ自身にはまったく名前を持たないものとして扱われます。
これは、名前付き引数（<xref linkend="sql-syntax-calling-funcs">）を使用して可変長の関数を呼び出すことができないことを意味します。
ただし、<literal>VARIADIC</>を指定する場合は例外です。
たとえば、

<screen>
SELECT mleast(VARIADIC arr := ARRAY[10, -1, 5, 4.4]);
</screen>

<!--
     but not these:
-->
は動作しますが、

<screen>
SELECT mleast(arr := 10);
SELECT mleast(arr := ARRAY[10, -1, 5, 4.4]);
</screen>
は動作しません。
    </para>
   </sect2>

   <sect2 id="xfunc-sql-parameter-defaults">
<!--
    <title><acronym>SQL</> Functions with Default Values for Arguments</title>
-->
    <title>引数にデフォルト値を持つ<acronym>SQL</>関数</title>

    <indexterm>
     <primary>function</primary>
<!--
     <secondary>default values for arguments</secondary>
-->
     <secondary>引数のデフォルト値</secondary>
    </indexterm>

    <para>
<!--
     Functions can be declared with default values for some or all input
     arguments.  The default values are inserted whenever the function is
     called with insufficiently many actual arguments.  Since arguments
     can only be omitted from the end of the actual argument list, all
     parameters after a parameter with a default value have to have
     default values as well.  (Although the use of named argument notation
     could allow this restriction to be relaxed, it's still enforced so that
     positional argument notation works sensibly.)
-->
一部またはすべての入力引数にデフォルト値を持つ関数を宣言することができます。
デフォルト値は、関数が実際の引数の数に足りない数の引数で呼び出された場合に挿入されます。
引数は実引数リストの終端から省略することができますので、デフォルト値を持つパラメータの後にあるパラメータはすべて、同様にデフォルト値を持たなければなりません。
（名前付きの引数記法を使用してこの制限を緩和させることもできますが、まだ位置引数記法が実用的に動作できることが強制されています。）
    </para>

    <para>
<!--
     For example:
-->
以下に例を示します。
<screen>
CREATE FUNCTION foo(a int, b int DEFAULT 2, c int DEFAULT 3)
RETURNS int
LANGUAGE SQL
AS $$
    SELECT $1 + $2 + $3;
$$;

SELECT foo(10, 20, 30);
 foo 
-----
  60
(1 row)

SELECT foo(10, 20);
 foo 
-----
  33
(1 row)

SELECT foo(10);
 foo 
-----
  15
(1 row)

<!--
SELECT foo();  &#045;- fails since there is no default for the first argument
-->
SELECT foo();  -- 最初の引数にデフォルトがないため失敗
ERROR:  function foo() does not exist
</screen>
<!--
     The <literal>=</literal> sign can also be used in place of the
     key word <literal>DEFAULT</literal>.
-->
<literal>=</literal>記号を<literal>DEFAULT</literal>キーワードの代わりに使用することもできます。
    </para>
   </sect2>

   <sect2 id="xfunc-sql-table-functions">
<!--
    <title><acronym>SQL</acronym> Functions as Table Sources</title>
-->
    <title>テーブルソースとしての<acronym>SQL</acronym>関数</title>

    <para>
<!--
     All SQL functions can be used in the <literal>FROM</> clause of a query,
     but it is particularly useful for functions returning composite types.
     If the function is defined to return a base type, the table function
     produces a one-column table.  If the function is defined to return
     a composite type, the table function produces a column for each attribute
     of the composite type.
-->
すべてのSQL関数は問い合わせの<command>FROM</command>句で使用できますが、複合型を返す関数に特に便利です。
関数が基本型を返すよう定義されている場合、テーブル関数は1列からなるテーブルを作成します。
関数が複合型を返すよう定義されている場合、テーブル関数は複合型の列のそれぞれに対して1つの列を作成します。
    </para>

    <para>
<!--
     Here is an example:
-->
以下に例を示します。

<screen>
CREATE TABLE foo (fooid int, foosubid int, fooname text);
INSERT INTO foo VALUES (1, 1, 'Joe');
INSERT INTO foo VALUES (1, 2, 'Ed');
INSERT INTO foo VALUES (2, 1, 'Mary');

CREATE FUNCTION getfoo(int) RETURNS foo AS $$
    SELECT * FROM foo WHERE fooid = $1;
$$ LANGUAGE SQL;

SELECT *, upper(fooname) FROM getfoo(1) AS t1;

 fooid | foosubid | fooname | upper
-------+----------+---------+-------
     1 |        1 | Joe     | JOE
(1 row)
</screen>

<!--
     As the example shows, we can work with the columns of the function's
     result just the same as if they were columns of a regular table.
-->
例からわかる通り、関数の結果の列を通常のテーブルの列と同じように扱うことができます。
    </para>

    <para>
<!--
     Note that we only got one row out of the function.  This is because
     we did not use <literal>SETOF</>.  That is described in the next section.
-->
この関数の結果得られたのは1行のみであることに注意してください。
これは<literal>SETOF</>を指定しなかったためです。
これについては次節で説明します。
    </para>
   </sect2>

   <sect2 id="xfunc-sql-functions-returning-set">
<!--
    <title><acronym>SQL</acronym> Functions Returning Sets</title>
-->
<title>集合を返す<acronym>SQL</acronym>関数</title>

    <indexterm>
     <primary>function</primary>
<!--
     <secondary>with SETOF</secondary>
-->
     <secondary>SETOF 付き</secondary>
    </indexterm>

    <para>
<!--
     When an SQL function is declared as returning <literal>SETOF
     <replaceable>sometype</></literal>, the function's final
     query is executed to completion, and each row it
     outputs is returned as an element of the result set.
-->
SQL関数が<literal>SETOF</literal> <replaceable>sometype</>を返すよう宣言されている場合、関数の最後の問い合わせは最後まで実行され、各出力行は結果集合の要素として返されます。
    </para>

    <para>
<!--
     This feature is normally used when calling the function in the <literal>FROM</>
     clause.  In this case each row returned by the function becomes
     a row of the table seen by the query.  For example, assume that
     table <literal>foo</> has the same contents as above, and we say:
-->
この機能は通常、関数を<literal>FROM</>句内で呼び出す時に使用されます。
この場合、関数によって返される各行は、問い合わせによって見えるテーブルの行になります。
例えば、テーブル<literal>foo</>の内容が上記と同じであれば以下のようになります。

<programlisting>
CREATE FUNCTION getfoo(int) RETURNS SETOF foo AS $$
    SELECT * FROM foo WHERE fooid = $1;
$$ LANGUAGE SQL;

SELECT * FROM getfoo(1) AS t1;
</programlisting>

<!--
     Then we would get:
-->
この出力は以下の通りです。

<screen>
 fooid | foosubid | fooname
-------+----------+---------
     1 |        1 | Joe
     1 |        2 | Ed
(2 rows)
</screen>
    </para>

    <para>
<!--
     It is also possible to return multiple rows with the columns defined by
     output parameters, like this:
-->
また、以下のように出力パラメータで定義された列を持つ複数の行を返すことも可能です。

<programlisting>
CREATE TABLE tab (y int, z int);
INSERT INTO tab VALUES (1, 2), (3, 4), (5, 6), (7, 8);

CREATE FUNCTION sum_n_product_with_tab (x int, OUT sum int, OUT product int)
RETURNS SETOF record
AS $$
    SELECT $1 + tab.y, $1 * tab.y FROM tab;
$$ LANGUAGE SQL;

SELECT * FROM sum_n_product_with_tab(10);
 sum | product
-----+---------
  11 |      10
  13 |      30
  15 |      50
  17 |      70
(4 rows)
</programlisting>

<!--
     The key point here is that you must write <literal>RETURNS SETOF record</>
     to indicate that the function returns multiple rows instead of just one.
     If there is only one output parameter, write that parameter's type
     instead of <type>record</>.
-->
ここで重要な点は、関数が1行だけではなく複数行を返すことを示すために<literal>RETURNS SETOF record</>を記述しなければならない点です。
出力パラメータが１つしか存在しない場合は、<type>record</>ではなく、そのパラメータの型を記述してください。
    </para>

    <para>
<!--
     It is frequently useful to construct a query's result by invoking a
     set-returning function multiple times, with the parameters for each
     invocation coming from successive rows of a table or subquery.  The
     preferred way to do this is to use the <literal>LATERAL</> key word,
     which is described in <xref linkend="queries-lateral">.
     Here is an example using a set-returning function to enumerate
     elements of a tree structure:
-->
集合を返す関数を、それぞれの呼び出し時に連続するテーブル行または副問い合わせに由来するパラメータを付けて、複数回呼び出すことで問い合わせ結果を構築することはしばしば有用です。
お勧めする方法は、<xref linkend="queries-lateral">で説明する<literal>LATERAL</>キーワードを使用することです。
以下は集合を返す関数を使用して、ツリー構造の要素を模擬する例です。

<screen>
SELECT * FROM nodes;
   name    | parent
-----------+--------
 Top       |
 Child1    | Top
 Child2    | Top
 Child3    | Top
 SubChild1 | Child1
 SubChild2 | Child1
(6 rows)

CREATE FUNCTION listchildren(text) RETURNS SETOF text AS $$
    SELECT name FROM nodes WHERE parent = $1
$$ LANGUAGE SQL STABLE;

SELECT * FROM listchildren('Top');
 listchildren
--------------
 Child1
 Child2
 Child3
(3 rows)

SELECT name, child FROM nodes, LATERAL listchildren(name) AS child;
  name  |   child
--------+-----------
 Top    | Child1
 Top    | Child2
 Top    | Child3
 Child1 | SubChild1
 Child1 | SubChild2
(5 rows)
</screen>

<!--
     This example does not do anything that we couldn't have done with a
     simple join, but in more complex calculations the option to put
     some of the work into a function can be quite convenient.
-->
この例は単純な結合でできない何かを行うものではありません。
しかしより複雑な計算では、何らかの作業を関数内に押し込むオプションはかなり便利です。
    </para>

    <para>
<!--
     Currently, functions returning sets can also be called in the select list
     of a query.  For each row that the query
     generates by itself, the function returning set is invoked, and an output
     row is generated for each element of the function's result set. Note,
     however, that this capability is deprecated and might be removed in future
     releases. The previous example could also be done with queries like
     these:
-->
現在、集合を返す関数は問い合わせの選択リスト内でも呼び出すことができます。
問い合わせ自身によって生成する各行に対し、集合を返す関数が呼び出され、関数の結果集合の各要素に対して出力行が生成されます。
ただし、この機能は現在では推奨されておらず、今後のリリースでは削除される可能性があります。
上の例は以下のような問い合わせでも実現することができます。

<screen>
SELECT listchildren('Top');
 listchildren
--------------
 Child1
 Child2
 Child3
(3 rows)

SELECT name, listchildren(name) FROM nodes;
  name  | listchildren
--------+--------------
 Top    | Child1
 Top    | Child2
 Top    | Child3
 Child1 | SubChild1
 Child1 | SubChild2
(5 rows)
</screen>

<!--
     In the last <command>SELECT</command>,
     notice that no output row appears for <literal>Child2</>, <literal>Child3</>, etc.
     This happens because <function>listchildren</function> returns an empty set
     for those arguments, so no result rows are generated.  This is the same
     behavior as we got from an inner join to the function result when using
     the <literal>LATERAL</> syntax.
-->
最後の<command>SELECT</command>において、<literal>Child2</>と<literal>Child3</>などが出力行に表示されていないことに注意してください。
これは、<function>listchildren</function>がこの入力に対して空の集合を返すため出力行が生成されないからです。
<literal>LATERAL</>構文を使用した時の関数の結果との内部結合から得る場合と同じ動作です。
    </para>

    <note>
     <para>
<!--
      If a function's last command is <command>INSERT</>, <command>UPDATE</>,
      or <command>DELETE</> with <literal>RETURNING</>, that command will
      always be executed to completion, even if the function is not declared
      with <literal>SETOF</> or the calling query does not fetch all the
      result rows.  Any extra rows produced by the <literal>RETURNING</>
      clause are silently dropped, but the commanded table modifications
      still happen (and are all completed before returning from the function).
-->
もし関数の最後のコマンドが<literal>RETURNING</>を持つ<command>INSERT</>、<command>UPDATE</>、または<command>DELETE</>である場合、関数が<literal>SETOF</>付きで宣言されていない、または呼び出す問い合わせがすべての結果行を取り出さなくても、そのコマンドは完了まで実行されます。 
<literal>RETURNING</>句で生成される余計な行はすべて警告無しに削除されますが、コマンド対象のテーブルの変更はそれでも起こります（そして、関数から戻る前にすべて完了します）。
     </para>
    </note>

    <note>
     <para>
<!--
      The key problem with using set-returning functions in the select list,
      rather than the <literal>FROM</> clause, is that putting more than one
      set-returning function in the same select list does not behave very
      sensibly.  (What you actually get if you do so is a number of output
      rows equal to the least common multiple of the numbers of rows produced
      by each set-returning function.)  The <literal>LATERAL</> syntax
      produces less surprising results when calling multiple set-returning
      functions, and should usually be used instead.
-->
<literal>FROM</>句ではなく、選択リスト内で集合を返す関数を使用する際の最大の問題は、
同じ選択リストの中に複数の集合を返す関数が存在する場合の動作があまり実用的ではないことです。
（そうした場合に実際に受け取る結果の出力行数は、集合を返す関数それぞれによって生成される行数の最小公倍数と等しくなります。）
<literal>LATERAL</>構文は、複数の集合を返す関数を呼び出しても、これ以上驚くような結果を生成しませんので、代わりにこちらを使用してください。
     </para>
    </note>
   </sect2>

   <sect2 id="xfunc-sql-functions-returning-table">
<!--
    <title><acronym>SQL</acronym> Functions Returning <literal>TABLE</></title>
-->
    <title><literal>TABLE</>を返す<acronym>SQL</acronym>関数</title>

    <indexterm>
<!--
     <primary>function</primary>
-->
     <primary>関数</primary>
     <secondary>RETURNS TABLE</secondary>
    </indexterm>

    <para>
<!--
     There is another way to declare a function as returning a set,
     which is to use the syntax
     <literal>RETURNS TABLE(<replaceable>columns</>)</literal>.
     This is equivalent to using one or more <literal>OUT</> parameters plus
     marking the function as returning <literal>SETOF record</> (or
     <literal>SETOF</> a single output parameter's type, as appropriate).
     This notation is specified in recent versions of the SQL standard, and
     thus may be more portable than using <literal>SETOF</>.
-->
集合を返すものとして関数を宣言するには、他にも方法があります。
<literal>RETURNS TABLE(<replaceable>columns</>)</literal>構文を使用することです。
これは１つ以上の<literal>OUT</>パラメータを使い、さらに、関数を<literal>SETOF record</>（または、適切ならば単一の出力パラメータの型の<literal>SETOF</>）を返すものと印を付けることと等価です。
この記法は標準SQLの最近の版で規定されたものですので、<literal>SETOF</>を使用するより移植性がより高いかもしれません。
    </para>

    <para>
<!--
     For example, the preceding sum-and-product example could also be
     done this way:
-->
例えば前述の合計と積の例はこのように書けます。

<programlisting>
CREATE FUNCTION sum_n_product_with_tab (x int)
RETURNS TABLE(sum int, product int) AS $$
    SELECT $1 + tab.y, $1 * tab.y FROM tab;
$$ LANGUAGE SQL;
</programlisting>

<!--
     It is not allowed to use explicit <literal>OUT</> or <literal>INOUT</>
     parameters with the <literal>RETURNS TABLE</> notation &mdash; you must
     put all the output columns in the <literal>TABLE</> list.
-->
<literal>RETURNS TABLE</>記法と一緒に、明示的<literal>OUT</>または<literal>INOUT</>パラメータを使用することはできません。
すべての出力列を<literal>TABLE</>リストに含めなければなりません。
    </para>
   </sect2>

   <sect2>
<!--
    <title>Polymorphic <acronym>SQL</acronym> Functions</title>
-->
    <title>多様<acronym>SQL</acronym>関数</title>

    <para>
<!--
     <acronym>SQL</acronym> functions can be declared to accept and
     return the polymorphic types <type>anyelement</type>,
     <type>anyarray</type>, <type>anynonarray</type>,
     <type>anyenum</type>, and <type>anyrange</type>.  See <xref
     linkend="extend-types-polymorphic"> for a more detailed
     explanation of polymorphic functions. Here is a polymorphic
     function <function>make_array</function> that builds up an array
     from two arbitrary data type elements:
-->
<acronym>SQL</acronym>関数は、多様型<type>anyelement</type>、<type>anyarray</type>、<type>anynonarray</type>、<type>anyenum</type>および<type>anyrange</type>を受け付け、返すように宣言することができます。
多様関数の詳細説明については<xref linkend="extend-types-polymorphic">を参照してください。
以下の<function>make_array</function>多様関数は、任意の2つのデータ型要素から配列を作成します。
<screen>
CREATE FUNCTION make_array(anyelement, anyelement) RETURNS anyarray AS $$
    SELECT ARRAY[$1, $2];
$$ LANGUAGE SQL;

SELECT make_array(1, 2) AS intarray, make_array('a'::text, 'b') AS textarray;
 intarray | textarray
----------+-----------
 {1,2}    | {a,b}
(1 row)
</screen>
    </para>

    <para>
<!--
     Notice the use of the typecast <literal>'a'::text</literal>
     to specify that the argument is of type <type>text</type>. This is
     required if the argument is just a string literal, since otherwise
     it would be treated as type
     <type>unknown</type>, and array of <type>unknown</type> is not a valid
     type.
     Without the typecast, you will get errors like this:
-->
<literal>'a'::text</literal>という型キャストを使用して、引数が<type>text</type>型であることを指定していることに注目してください。
これは引数が単なる文字列リテラルである場合に必要です。
さもないと、<type>unknown</type>型として扱われてしまうため、無効な<type>unknown</type>の配列を返そうとしてしまいます。
型キャストがないと、以下のようなエラーが発生します。
<screen>
<computeroutput>
ERROR:  could not determine polymorphic type because input has type "unknown"
</computeroutput>
</screen>
    </para>

    <para>
<!--
     It is permitted to have polymorphic arguments with a fixed
     return type, but the converse is not. For example:
-->
固定の戻り値型を持ちながら多様引数を持つことは許されますが、逆は許されません。
以下に例を示します。
<screen>
CREATE FUNCTION is_greater(anyelement, anyelement) RETURNS boolean AS $$
    SELECT $1 &gt; $2;
$$ LANGUAGE SQL;

SELECT is_greater(1, 2);
 is_greater
------------
 f
(1 row)

CREATE FUNCTION invalid_func() RETURNS anyelement AS $$
    SELECT 1;
$$ LANGUAGE SQL;
ERROR:  cannot determine result data type
DETAIL:  A function returning a polymorphic type must have at least one polymorphic argument.
</screen>
    </para>

    <para>
<!--
     Polymorphism can be used with functions that have output arguments.
     For example:
-->
出力引数を持つ関数でも多様性を使用することができます。
以下に例を示します。
<screen>
CREATE FUNCTION dup (f1 anyelement, OUT f2 anyelement, OUT f3 anyarray)
AS 'select $1, array[$1,$1]' LANGUAGE SQL;

SELECT * FROM dup(22);
 f2 |   f3
----+---------
 22 | {22,22}
(1 row)
</screen>
    </para>

    <para>
<!--
     Polymorphism can also be used with variadic functions.
     For example:
-->
多様性はvariadic関数とともに使用できます。例をあげます。

<screen>
CREATE FUNCTION anyleast (VARIADIC anyarray) RETURNS anyelement AS $$
    SELECT min($1[i]) FROM generate_subscripts($1, 1) g(i);
$$ LANGUAGE SQL;

SELECT anyleast(10, -1, 5, 4);
 anyleast 
----------
       -1
(1 row)

SELECT anyleast('abc'::text, 'def');
 anyleast 
----------
 abc
(1 row)

CREATE FUNCTION concat_values(text, VARIADIC anyarray) RETURNS text AS $$
    SELECT array_to_string($2, $1);
$$ LANGUAGE SQL;

SELECT concat_values('|', 1, 4, 2);
 concat_values 
---------------
 1|4|2
(1 row)
</screen>
    </para>

   </sect2>

   <sect2>
<!--
    <title><acronym>SQL</acronym> Functions with Collations</title>
-->
    <title>照合順序を持つ<acronym>SQL</acronym>関数</title>

    <indexterm>
<!--
     <primary>collation</>
     <secondary>in SQL functions</>
-->
     <primary>照合順序</>
     <secondary>SQL関数における</>
    </indexterm>

    <para>
<!--
     When a SQL function has one or more parameters of collatable data types,
     a collation is identified for each function call depending on the
     collations assigned to the actual arguments, as described in <xref
     linkend="collation">.  If a collation is successfully identified
     (i.e., there are no conflicts of implicit collations among the arguments)
     then all the collatable parameters are treated as having that collation
     implicitly.  This will affect the behavior of collation-sensitive
     operations within the function.  For example, using the
     <function>anyleast</> function described above, the result of
-->
SQL関数が照合順序の変更が可能なデータ型のパラメータを１つ以上持つ場合、それぞれの関数呼び出しに対して、実引数に割り当てられた照合順序に応じて、照合順序が識別されます。
照合順序の識別に成功した（つまり、暗黙的な照合順序がすべての引数で競合しない）場合、すべての照合順序の変更が可能なパラメータは暗黙的に照合順序を持つものとして扱われます。
これは関数内の照合順序に依存する操作の振舞いに影響します。
例えば、上記の<function>anyleast</>を使って考えます。
<programlisting>
SELECT anyleast('abc'::text, 'ABC');
</programlisting>
<!--
     will depend on the database's default collation.  In <literal>C</> locale
     the result will be <literal>ABC</>, but in many other locales it will
     be <literal>abc</>.  The collation to use can be forced by adding
     a <literal>COLLATE</> clause to any of the arguments, for example
-->
この結果はデータベースのデフォルト照合順序に依存します。
<literal>C</>ロケールでは<literal>ABC</>という結果になりますが、他の多くのロケールでは<literal>abc</>になります。
使用される照合順序を<literal>COLLATE</>句を付与することで強制することができます。
例を以下に示します。
<programlisting>
SELECT anyleast('abc'::text, 'ABC' COLLATE "C");
</programlisting>
<!--
     Alternatively, if you wish a function to operate with a particular
     collation regardless of what it is called with, insert
     <literal>COLLATE</> clauses as needed in the function definition.
     This version of <function>anyleast</> would always use <literal>en_US</>
     locale to compare strings:
-->
この他、呼び出し元の照合順序とは関係なく特定の照合順序で動作する関数にしたければ、関数定義において必要な所に<literal>COLLATE</>句を付けてください。
以下の<function>anyleast</>では、文字列を比較する際に常に<literal>en_US</>を使用します。
<programlisting>
CREATE FUNCTION anyleast (VARIADIC anyarray) RETURNS anyelement AS $$
    SELECT min($1[i] COLLATE "en_US") FROM generate_subscripts($1, 1) g(i);
$$ LANGUAGE SQL;
</programlisting>
<!--
     But note that this will throw an error if applied to a non-collatable
     data type.
-->
しかし、もし照合順序の変更ができないデータ型が与えられた場合にエラーになってしまうことに注意してください。
    </para>

    <para>
<!--
     If no common collation can be identified among the actual arguments,
     then a SQL function treats its parameters as having their data types'
     default collation (which is usually the database's default collation,
     but could be different for parameters of domain types).
-->
実引数全体で共通の照合順序を識別できない場合、SQL関数はパラメータがそのデータ型のデフォルト照合順序（通常はデータベースのデフォルトの照合順序ですが、ドメイン型のパラメータでは異なる可能性があります）を持つものとみなします。
    </para>

    <para>
<!--
     The behavior of collatable parameters can be thought of as a limited
     form of polymorphism, applicable only to textual data types.
-->
照合順序の変更ができるパラメータの動作は、テキストのデータ型にのみ適用できる、限定された多様性と考えることができます。
    </para>
   </sect2>
  </sect1>

  <sect1 id="xfunc-overload">
<!--
   <title>Function Overloading</title>
-->
<title>関数のオーバーロード</title>

   <indexterm zone="xfunc-overload">
<!--
    <primary>overloading</primary>
    <secondary>functions</secondary>
-->
    <primary>オーバーロード</primary>
    <secondary>関数</secondary>
   </indexterm>

   <para>
<!--
    More than one function can be defined with the same SQL name, so long
    as the arguments they take are different.  In other words,
    function names can be <firstterm>overloaded</firstterm>.  When a
    query is executed, the server will determine which function to
    call from the data types and the number of the provided arguments.
    Overloading can also be used to simulate functions with a variable
    number of arguments, up to a finite maximum number.
-->
使用する引数が異なるのであれば、同じSQL名の関数を1つ以上定義することができます。
つまり、関数名は<firstterm>オーバーロード</firstterm>が可能です。
問い合わせが実行された時、サーバは与えられた引数のデータ型と数によって呼び出すべき関数を決定します。
またオーバーロードを使用して、有限個の可変長引数を持つ関数を模擬することができます。
   </para>

   <para>
<!--
    When creating a family of overloaded functions, one should be
    careful not to create ambiguities.  For instance, given the
    functions:
-->
オーバーロード関数を作成する時、曖昧さが発生しないように注意しなければなりません。
例えば、以下のような関数を考えてみます。
<programlisting>
CREATE FUNCTION test(int, real) RETURNS ...
CREATE FUNCTION test(smallint, double precision) RETURNS ...
</programlisting>
<!--
    it is not immediately clear which function would be called with
    some trivial input like <literal>test(1, 1.5)</literal>.  The
    currently implemented resolution rules are described in
    <xref linkend="typeconv">, but it is unwise to design a system that subtly
    relies on this behavior.
-->
<literal>test(1, 1.5)</literal>のような平凡な入力でも、どちらの関数を呼び出すのかはすぐには明確ではありません。
現在実装されている解決規則は<xref linkend="typeconv">にて説明していますが、この動作に巧妙に依存するようにシステムを設計することは推奨しません。

   </para>

   <para>
<!--
    A function that takes a single argument of a composite type should
    generally not have the same name as any attribute (field) of that type.
    Recall that <literal>attribute(table)</literal> is considered equivalent
    to <literal>table.attribute</literal>.  In the case that there is an
    ambiguity between a function on a composite type and an attribute of
    the composite type, the attribute will always be used.  It is possible
    to override that choice by schema-qualifying the function name
    (that is, <literal>schema.func(table)</literal>) but it's better to
    avoid the problem by not choosing conflicting names.
-->
一般的に、1つの複合型の引数を取る関数は、その型の属性（フィールド）と同じ名前を持ってはいけません。
<literal>attribute(table)</literal>が<literal>table.attribute</literal>と等価とみなされることを思い出してください。
複合型に対する関数と複合型の属性との間に曖昧さがあるような場合、属性の方が常に使用されます。
この振舞いは関数名をスキーマで修飾する（つまり、<literal>schema.func(table)</literal>）ことにより変更することができますが、競合する名前を使用しないことで問題を防ぐ方が良いでしょう。
   </para>

   <para>
<!--
    Another possible conflict is between variadic and non-variadic functions.
    For instance, it is possible to create both <literal>foo(numeric)</> and
    <literal>foo(VARIADIC numeric[])</>.  In this case it is unclear which one
    should be matched to a call providing a single numeric argument, such as
    <literal>foo(10.1)</>.  The rule is that the function appearing
    earlier in the search path is used, or if the two functions are in the
    same schema, the non-variadic one is preferred.
-->
可変長引数を取る関数と可変長引数を取らない関数の間に、他にも競合する可能性があります。
例えば、<literal>foo(numeric)</>と<literal>foo(VARIADIC numeric[])</>の両方を作成することが可能です。
この場合、単一の数値引数を取った呼び出し、例えば<literal>foo(10.1)</>をどちらに一致するものとすべきか不明瞭です。
検索パスのより前にある関数が使われる、もし2つの関数が同一スキーマにあれば可変長引数を取らない関数が優先されるというのが、この場合の規則です。
   </para>

   <para>
<!--
    When overloading C-language functions, there is an additional
    constraint: The C name of each function in the family of
    overloaded functions must be different from the C names of all
    other functions, either internal or dynamically loaded.  If this
    rule is violated, the behavior is not portable.  You might get a
    run-time linker error, or one of the functions will get called
    (usually the internal one).  The alternative form of the
    <literal>AS</> clause for the SQL <command>CREATE
    FUNCTION</command> command decouples the SQL function name from
    the function name in the C source code.  For instance:
-->
C言語関数をオーバーロードする場合、さらに制限があります。
オーバーロードされた関数群内の各関数のCの名前は、内部か動的ロードされたかに関係なく他のすべての関数のCの名前と異なる必要があります。
この規則に反した場合は、この動作は移植性がありません。
実行時リンカエラーになるかもしれませんし、関数群のどれか（たいていは内部関数）が呼び出されるかもしれません。
<command>CREATE FUNCTION</command> SQLコマンドの別形式の<literal>AS</>句は、SQL関数名とCソースコード内の関数名とを分離します。
以下に例を示します。
<programlisting>
CREATE FUNCTION test(int) RETURNS int
    AS '<replaceable>filename</>', 'test_1arg'
    LANGUAGE C;
CREATE FUNCTION test(int, int) RETURNS int
    AS '<replaceable>filename</>', 'test_2arg'
    LANGUAGE C;
</programlisting>
<!--
    The names of the C functions here reflect one of many possible conventions.
-->
ここでのC関数の名前は多くの取り得る規約の1つを反映しています。
   </para>
  </sect1>

  <sect1 id="xfunc-volatility">
<!--
   <title>Function Volatility Categories</title>
-->
   <title>関数の変動性分類</title>

   <indexterm zone="xfunc-volatility">
<!--
    <primary>volatility</primary>
    <secondary>functions</secondary>
-->
    <primary>変動性</primary>
    <secondary>関数</secondary>
   </indexterm>
   <indexterm zone="xfunc-volatility">
    <primary>VOLATILE</primary>
   </indexterm>
   <indexterm zone="xfunc-volatility">
    <primary>STABLE</primary>
   </indexterm>
   <indexterm zone="xfunc-volatility">
    <primary>IMMUTABLE</primary>
   </indexterm>

   <para>
<!--
    Every function has a <firstterm>volatility</> classification, with
    the possibilities being <literal>VOLATILE</>, <literal>STABLE</>, or
    <literal>IMMUTABLE</>.  <literal>VOLATILE</> is the default if the
    <xref linkend="sql-createfunction">
    command does not specify a category.  The volatility category is a
    promise to the optimizer about the behavior of the function:
-->
すべての関数は<firstterm>変動性</>区分を持ちます。
取り得る区分は、<literal>VOLATILE</>、<literal>STABLE</>、もしくは<literal>IMMUTABLE</>です。
<xref linkend="sql-createfunction">コマンドで分類の指定がなければデフォルトで<literal>VOLATILE</>になります。
変動性に関する分類は、その関数の動作に関するオプティマイザへの約束事です。

   <itemizedlist>
    <listitem>
     <para>
<!--
      A <literal>VOLATILE</> function can do anything, including modifying
      the database.  It can return different results on successive calls with
      the same arguments.  The optimizer makes no assumptions about the
      behavior of such functions.  A query using a volatile function will
      re-evaluate the function at every row where its value is needed.
-->
<literal>VOLATILE</>関数は、データベースの変更を含む、すべてを行うことができます。
同一引数で続けて呼び出したとしても異なる結果を返すことができます。
オプティマイザはこうした関数の振舞いに対する前提を持ちません。
VOLTILE関数を使用した問い合わせは、その行の値を必要とするすべての行においてその関数を再評価します。
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      A <literal>STABLE</> function cannot modify the database and is
      guaranteed to return the same results given the same arguments
      for all rows within a single statement. This category allows the
      optimizer to optimize multiple calls of the function to a single
      call. In particular, it is safe to use an expression containing
      such a function in an index scan condition. (Since an index scan
      will evaluate the comparison value only once, not once at each
      row, it is not valid to use a <literal>VOLATILE</> function in an
      index scan condition.)
-->
<literal>STABLE</>関数はデータベースを変更することができません。
また、単一の文内ですべての行に対して同一の引数を渡した場合に同一の結果を返すことが保証されています。
この区分により、オプティマイザは複数の関数の呼び出しを１つの呼び出しに最適化することができます。
特に、インデックススキャン条件内でこうした関数を含んだ式を使用することは安全です。
（インデックススキャンは行ごとに一度ではなく、一度だけ比較値の評価を行いますので、インデックススキャン条件内で<literal>VOLATILE</>関数を使用することは意味がありません。）
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      An <literal>IMMUTABLE</> function cannot modify the database and is
      guaranteed to return the same results given the same arguments forever.
      This category allows the optimizer to pre-evaluate the function when
      a query calls it with constant arguments.  For example, a query like
      <literal>SELECT ... WHERE x = 2 + 2</> can be simplified on sight to
      <literal>SELECT ... WHERE x = 4</>, because the function underlying
      the integer addition operator is marked <literal>IMMUTABLE</>.
-->
<literal>IMMUTABLE</>関数はデータベースを変更することができません。
また、同一引数に対する呼び出しは常に同一の結果を返すことが保証されています。
問い合わせが定数の引数でこうした関数を呼び出した場合、オプティマイザはこの関数を事前に評価することができます。
例えば、<literal>SELECT ... WHERE x = 2 + 2</>といった問い合わせは、<literal>SELECT ... WHERE x = 4</>のように単純化することができます。
これは、整数加算演算子の基になる関数が<literal>IMMUTABLE</>として宣言されているためです。
     </para>
    </listitem>
   </itemizedlist>
   </para>

   <para>
<!--
    For best optimization results, you should label your functions with the
    strictest volatility category that is valid for them.
-->
最適化の結果を最善にするためには、関数に対して有効かつ最も厳密な変動性区分を付けなければなりません。
   </para>

   <para>
<!--
    Any function with side-effects <emphasis>must</> be labeled
    <literal>VOLATILE</>, so that calls to it cannot be optimized away.
    Even a function with no side-effects needs to be labeled
    <literal>VOLATILE</> if its value can change within a single query;
    some examples are <literal>random()</>, <literal>currval()</>,
    <literal>timeofday()</>.
-->
副作用を持つ関数はすべて<literal>VOLATILE</>と付けなければなりません。
こうした関数は最適化することができないためです。
関数が副作用を持たなかったとしても、単一問い合わせ内で値が変動する場合は<literal>VOLATILE</>と付けなければなりません。
例えば、<literal>random()</>、<literal>currval()</>、<literal>timeofday()</>などです。
   </para>

   <para>
<!--
    Another important example is that the <function>current_timestamp</>
    family of functions qualify as <literal>STABLE</>, since their values do
    not change within a transaction.
-->
その他の重要な例は、<function>current_timestamp</>系列の関数は、それらの値がトランザクション内で変わらないことから、<literal>STABLE</>と見なされます。
   </para>

   <para>
<!--
    There is relatively little difference between <literal>STABLE</> and
    <literal>IMMUTABLE</> categories when considering simple interactive
    queries that are planned and immediately executed: it doesn't matter
    a lot whether a function is executed once during planning or once during
    query execution startup.  But there is a big difference if the plan is
    saved and reused later.  Labeling a function <literal>IMMUTABLE</> when
    it really isn't might allow it to be prematurely folded to a constant during
    planning, resulting in a stale value being re-used during subsequent uses
    of the plan.  This is a hazard when using prepared statements or when
    using function languages that cache plans (such as
    <application>PL/pgSQL</>).
-->
計画作成を行い、すぐに実行されるような単一の対話式問い合わせを考えた場合、相対的に<literal>STABLE</>区分と<literal>IMMUTABLE</>区分との違いはあまりありません。
このような場合、関数が計画作成中に一度実行されるか、問い合わせ実行中に一度実行されるかがあまり問題になりません。
しかし、計画が保存され、後で再利用される場合は大きな違いが現れます。
本来ならば関数が計画作成段階で早めに定数を保持することができない場合に<literal>IMMUTABLE</>を付けると、その後にこの計画を使用する時に古くて意味のない値が再利用されてしまうことになります。
これは、プリペアド文や計画をキャッシュする関数言語（<application>PL/pgSQL</>など）を使用する場合は危険です。
   </para>

   <para>
<!--
    For functions written in SQL or in any of the standard procedural
    languages, there is a second important property determined by the
    volatility category, namely the visibility of any data changes that have
    been made by the SQL command that is calling the function.  A
    <literal>VOLATILE</> function will see such changes, a <literal>STABLE</>
    or <literal>IMMUTABLE</> function will not.  This behavior is implemented
    using the snapshotting behavior of MVCC (see <xref linkend="mvcc">):
    <literal>STABLE</> and <literal>IMMUTABLE</> functions use a snapshot
    established as of the start of the calling query, whereas
    <literal>VOLATILE</> functions obtain a fresh snapshot at the start of
    each query they execute.
-->
SQLもしくは標準手続き言語で作成された関数では、変動性分類で決定される２番目に重要な性質があります。
すなわち、その関数を呼び出すSQLコマンドによりなされてきたすべてのデータ変更の可視性です。
<literal>VOLATILE</>関数はそのような変更を捕らえますが、<literal>STABLE</>または<literal>IMMUTABLE</>関数はそうしません。
この動作はMVCC（<xref linkend="mvcc">を参照）のスナップショット処理の動作を使用して実装されています。
<literal>STABLE</>と<literal>IMMUTABLE</>関数は、呼び出す問い合わせの開始時点で成立したスナップショットを使用しますが、<literal>VOLATILE</>関数はそれぞれの問い合わせの実行開始時点の作りたてのスナップショットを取得します。
   </para>

   <note>
    <para>
<!--
     Functions written in C can manage snapshots however they want, but it's
     usually a good idea to make C functions work this way too.
-->
しかし、C言語で作成された関数は、どのようにでもスナップショットを管理することができますが、通常C関数でもこのように動作させることは良い考えです。
    </para>
   </note>

   <para>
<!--
    Because of this snapshotting behavior,
    a function containing only <command>SELECT</> commands can safely be
    marked <literal>STABLE</>, even if it selects from tables that might be
    undergoing modifications by concurrent queries.
    <productname>PostgreSQL</productname> will execute all commands of a
    <literal>STABLE</> function using the snapshot established for the
    calling query, and so it will see a fixed view of the database throughout
    that query.
-->
このスナップショット処理の動作のため、同時実行の問い合わせによって別途変更されている可能性があるテーブルから選択していたとしても、<command>SELECT</>コマンドのみを含む関数は、安全に<literal>STABLE</>とすることができます。
<productname>PostgreSQL</productname>は、呼び出し元の問い合わせに対して確立されたスナップショットを使用して<literal>STABLE</>関数のすべてのコマンドを実行します。
したがってその問い合わせの間、データベースに対して固定された視点で値を参照することになります。
   </para>

   <para>
<!--
    The same snapshotting behavior is used for <command>SELECT</> commands
    within <literal>IMMUTABLE</> functions.  It is generally unwise to select
    from database tables within an <literal>IMMUTABLE</> function at all,
    since the immutability will be broken if the table contents ever change.
    However, <productname>PostgreSQL</productname> does not enforce that you
    do not do that.
-->
<literal>IMMUTABLE</>関数内の<command>SELECT</>コマンドも同様のスナップショット処理の動作を使用します。
ただし、一般的に、<literal>IMMUTABLE</>関数内でデータベースのテーブルを検索（SELECT）することは勧められません。
テーブルの内容が変わってしまった場合にその不変性が壊れてしまうためです。
しかし、<productname>PostgreSQL</productname>では強制的に検索（SELECT）できないようにはしていません。
   </para>

   <para>
<!--
    A common error is to label a function <literal>IMMUTABLE</> when its
    results depend on a configuration parameter.  For example, a function
    that manipulates timestamps might well have results that depend on the
    <xref linkend="guc-timezone"> setting.  For safety, such functions should
    be labeled <literal>STABLE</> instead.
-->
よくあるエラーは、設定パラメータに依存する結果となる関数に<literal>IMMUTABLE</>と付けることです。
例えば、タイムスタンプを操作する関数は、おそらく<xref linkend="guc-timezone">の設定に依存した結果になります。
こうした関数は、安全のため代わりに<literal>STABLE</>と付けてください。
   </para>

   <note>
    <para>
<!--
     <productname>PostgreSQL</productname> requires that <literal>STABLE</>
     and <literal>IMMUTABLE</> functions contain no SQL commands other
     than <command>SELECT</> to prevent data modification.
     (This is not a completely bulletproof test, since such functions could
     still call <literal>VOLATILE</> functions that modify the database.
     If you do that, you will find that the <literal>STABLE</> or
     <literal>IMMUTABLE</> function does not notice the database changes
     applied by the called function, since they are hidden from its snapshot.)
-->
<productname>PostgreSQL</productname>はデータの変更を防ぐために<literal>STABLE</>関数と<literal>IMMUTABLE</>関数が<command>SELECT</>以外のSQLコマンドを含まないことを要求します。
（こうした関数はまだデータベースを変更する<literal>VOLATILE</>関数を呼び出すことができますので、これは防弾条件として完全ではありません。
これを行うと、<literal>STABLE</>もしくは<literal>IMMUTABLE</>関数は、そのスナップショットからそれらが隠されていることから、呼び出した関数によるデータベースの変更に気がつきません。）
    </para>
   </note>
  </sect1>

  <sect1 id="xfunc-pl">
<!--
   <title>Procedural Language Functions</title>
-->
<title>手続き型言語関数</title>

   <para>
<!--
    <productname>PostgreSQL</productname> allows user-defined functions
    to be written in other languages besides SQL and C.  These other
    languages are generically called <firstterm>procedural
    languages</firstterm> (<acronym>PL</>s).
    Procedural languages aren't built into the
    <productname>PostgreSQL</productname> server; they are offered
    by loadable modules.
    See <xref linkend="xplang"> and following chapters for more
    information.
-->
<productname>PostgreSQL</productname>ではSQLやC言語以外の言語でユーザ定義の関数を作成することができます。
これらの他の言語は一般に<firstterm>手続き言語</firstterm>（<acronym>PL</>）と呼ばれます。
手続き言語は<productname>PostgreSQL</productname>サーバに組み込まれておらず、ロード可能モジュールとして提供されています。
詳細は<xref linkend="xplang">と以下の章を参照してください。
   </para>

  </sect1>

  <sect1 id="xfunc-internal">
<!--
   <title>Internal Functions</title>
-->
<title>内部関数</title>

<!--
   <indexterm zone="xfunc-internal"><primary>function</><secondary>internal</></>
-->
   <indexterm zone="xfunc-internal"><primary>関数</><secondary>内部</></>

   <para>
<!--
    Internal functions are functions written in C that have been statically
    linked into the <productname>PostgreSQL</productname> server.
    The <quote>body</quote> of the function definition
    specifies the C-language name of the function, which need not be the
    same as the name being declared for SQL use.
    (For reasons of backward compatibility, an empty body
    is accepted as meaning that the C-language function name is the
    same as the SQL name.)
-->
内部関数とは、Cで作成された、<productname>PostgreSQL</productname>サーバに静的にリンクされた関数です。
関数定義の<quote>本体</quote>では関数のC言語における名前を指定します。
この名前をSQLでの使用のために宣言される名前と同じにする必要はありません。
（後方互換性のため、C言語関数名がSQL名と同じであるという意味として、空の本体も受け付けられます。）
   </para>

   <para>
<!--
    Normally, all internal functions present in the
    server are declared during the initialization of the database cluster
    (see <xref linkend="creating-cluster">),
    but a user could use <command>CREATE FUNCTION</command>
    to create additional alias names for an internal function.
    Internal functions are declared in <command>CREATE FUNCTION</command>
    with language name <literal>internal</literal>.  For instance, to
    create an alias for the <function>sqrt</function> function:
-->
通常、サーバに存在するすべての内部関数は、データベースクラスタの初期化（<xref linkend="creating-cluster">参照）の際に宣言されますが、ユーザは<command>CREATE FUNCTION</command>を使用して、内部関数の別名をさらに作成することができます。
内部関数は<literal>internal</literal>という言語名を付けた<command>CREATE FUNCTION</command>によって宣言されます。
例えば、<function>sqrt</function>関数の別名を作成するには以下のようにします。
<programlisting>
CREATE FUNCTION square_root(double precision) RETURNS double precision
    AS 'dsqrt'
    LANGUAGE internal
    STRICT;
</programlisting>
<!--
    (Most internal functions expect to be declared <quote>strict</quote>.)
-->
（ほとんどの内部関数は<quote>strict</quote>として宣言されることを想定しています。）
   </para>

   <note>
    <para>
<!--
     Not all <quote>predefined</quote> functions are
     <quote>internal</quote> in the above sense.  Some predefined
     functions are written in SQL.
-->
<quote>定義済みの</quote>関数のすべてが上の意味での<quote>内部</quote>ではありません。
SQLで作成された定義済み関数もあります。
    </para>
   </note>
  </sect1>

  <sect1 id="xfunc-c">
<!--
   <title>C-Language Functions</title>
-->
<title>C言語関数</title>

   <indexterm zone="xfunc-c">
<!--
    <primary>function</primary>
    <secondary>user-defined</secondary>
    <tertiary>in C</tertiary>
-->
    <primary>関数</primary>
    <secondary>ユーザ定義</secondary>
    <tertiary>Cで作成された</tertiary>
   </indexterm>

   <para>
<!--
    User-defined functions can be written in C (or a language that can
    be made compatible with C, such as C++).  Such functions are
    compiled into dynamically loadable objects (also called shared
    libraries) and are loaded by the server on demand.  The dynamic
    loading feature is what distinguishes <quote>C language</> functions
    from <quote>internal</> functions &mdash; the actual coding conventions
    are essentially the same for both.  (Hence, the standard internal
    function library is a rich source of coding examples for user-defined
    C functions.)
-->
ユーザ定義の関数はC（もしくはC++のようなCと互換性のある言語）で作成することができます。
そのような関数は動的ロード可能オブジェクト（共有ライブラリとも呼ばれます）としてコンパイルされ、必要に応じてサーバにロードされます。
動的ロード機能が、<quote>C言語</>関数を<quote>内部</>関数と区別するものです。
コーディング方法は基本的に両方とも同じです。
（したがって、標準内部関数ライブラリはユーザ定義のC関数のコーディング例の豊富な情報源となります。）
   </para>

   <para>
<!--
    Two different calling conventions are currently used for C functions.
    The newer <quote>version 1</quote> calling convention is indicated by writing
    a <literal>PG_FUNCTION_INFO_V1()</literal> macro call for the function,
    as illustrated below.  Lack of such a macro indicates an old-style
    (<quote>version 0</quote>) function.  The language name specified in <command>CREATE FUNCTION</command>
    is <literal>C</literal> in either case.  Old-style functions are now deprecated
    because of portability problems and lack of functionality, but they
    are still supported for compatibility reasons.
-->
現在、2つの異なる呼び出し規約がC関数で使用されています。
より新しい<quote>Version 1</quote>呼び出し規約は、以下に示すように、その関数用に呼び出しマクロ<literal>PG_FUNCTION_INFO_V1()</literal>を書くことで示されます。
このマクロが存在しなければ、旧形式（<quote>Version 0</quote>）の関数であることを示します。
どちらの場合も<command>CREATE FUNCTION</command>で指定する言語名は<literal>C</literal>です。
旧形式の関数は移植性の問題と機能の不足のために勧められません。
これは現在、互換性の理由のために存在しています。
   </para>

  <sect2 id="xfunc-c-dynload">
<!--
   <title>Dynamic Loading</title>
-->
<title>動的ロード</title>

   <indexterm zone="xfunc-c-dynload">
<!--
    <primary>dynamic loading</primary>
-->
    <primary>動的ロード</primary>
   </indexterm>

   <para>
<!--
    The first time a user-defined function in a particular
    loadable object file is called in a session,
    the dynamic loader loads that object file into memory so that the
    function can be called.  The <command>CREATE FUNCTION</command>
    for a user-defined C function must therefore specify two pieces of
    information for the function: the name of the loadable
    object file, and the C name (link symbol) of the specific function to call
    within that object file.  If the C name is not explicitly specified then
    it is assumed to be the same as the SQL function name.
-->
特定のロード可能オブジェクト内のユーザ定義の関数がセッションで最初に呼び出されると、動的ローダは、その関数を呼び出すことができるように、オブジェクトファイルをメモリ内に読み込みます。
そのため、ユーザ定義のC関数用の<command>CREATE FUNCTION</command>はその関数について、ロード可能オブジェクトファイルの名前とオブジェクトファイル中の呼び出される特定の関数のC名称（リンクシンボル）という2つの情報を指定しなければなりません。
C名称が明示的に指定されなかった場合、SQLにおける関数名と同じものと仮定されます。
   </para>

   <para>
<!--
    The following algorithm is used to locate the shared object file
    based on the name given in the <command>CREATE FUNCTION</command>
    command:
-->
<command>CREATE FUNCTION</command>コマンドで与えられた名前に基づいて、共有オブジェクトファイルの場所を見つける際に以下のアルゴリズムが使用されます。

    <orderedlist>
     <listitem>
      <para>
<!--
       If the name is an absolute path, the given file is loaded.
-->
名前が絶対パスの場合、指定されたファイルが読み込まれます。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       If the name starts with the string <literal>$libdir</literal>,
       that part is replaced by the <productname>PostgreSQL</> package
       library directory
       name, which is determined at build time.<indexterm><primary>$libdir</></>
-->
名前が<literal>$libdir</literal>という文字列から始まる場合、その部分は<productname>PostgreSQL</>パッケージのライブラリディレクトリで置き換えられます。
このディレクトリはビルド時に決定されます。
<indexterm><primary>$libdir</></>
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       If the name does not contain a directory part, the file is
       searched for in the path specified by the configuration variable
       <xref linkend="guc-dynamic-library-path">.<indexterm><primary>dynamic_library_path</></>
-->
名前にディレクトリ部分がない場合、そのファイルは<xref linkend="guc-dynamic-library-path">設定変数で指定されたパス内から検索されます。
<indexterm><primary>dynamic_library_path</></>
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       Otherwise (the file was not found in the path, or it contains a
       non-absolute directory part), the dynamic loader will try to
       take the name as given, which will most likely fail.  (It is
       unreliable to depend on the current working directory.)
-->
上記以外の場合（ファイルがパス内に存在しない場合や相対ディレクトリ部分を持つ場合）、動的ローダは指定された名前をそのまま使用し、ほとんどの場合は失敗します。
（これは現在の作業ディレクトリに依存するため信頼できません。）
      </para>
     </listitem>
    </orderedlist>

<!--
    If this sequence does not work, the platform-specific shared
    library file name extension (often <filename>.so</filename>) is
    appended to the given name and this sequence is tried again.  If
    that fails as well, the load will fail.
-->
ここまでの流れがうまくいかなかった場合、プラットフォーム独自の共有ライブラリファイル拡張子（多くの場合<filename>.so</filename>）が指定された名前に追加され、再度この流れを試みます。
同様に失敗した場合は、読み込みは失敗します。
   </para>

   <para>
<!--
    It is recommended to locate shared libraries either relative to
    <literal>$libdir</literal> or through the dynamic library path.
    This simplifies version upgrades if the new installation is at a
    different location.  The actual directory that
    <literal>$libdir</literal> stands for can be found out with the
    command <literal>pg_config &#045;&#045;pkglibdir</literal>.
-->
共有ライブラリを<literal>$libdir</literal>から相対的に、もしくは動的ライブラリパスの通った所に配置することを推奨します。
異なる場所に新しいインストレーションを配置する場合にバージョンアップを簡単にします。
<literal>$libdir</literal>が示す実際のディレクトリは<literal>pg_config --pkglibdir</literal>コマンドを使用することでわかります。
   </para>

   <para>
<!--
    The user ID the <productname>PostgreSQL</productname> server runs
    as must be able to traverse the path to the file you intend to
    load.  Making the file or a higher-level directory not readable
    and/or not executable by the <systemitem>postgres</systemitem>
    user is a common mistake.
-->
<application>PostgreSQL</application>サーバの実効ユーザIDはロード予定のファイルのパスまで到達できなければなりません。
よくある失敗として、<systemitem>postgres</systemitem>ユーザに対して読み込み、実行、または両方の権限がそのファイルとその上位ディレクトリに与えられていないことがあります。
   </para>

   <para>
<!--
    In any case, the file name that is given in the
    <command>CREATE FUNCTION</command> command is recorded literally
    in the system catalogs, so if the file needs to be loaded again
    the same procedure is applied.
-->
どの場合でも、<command>CREATE FUNCTION</command>コマンドに与えたファイル名はそのままシステムカタログに保存されます。
ですので、もしそのファイルを再度読み込む必要がある場合、同じ処理が適用されます。
   </para>

   <note>
    <para>
<!--
     <productname>PostgreSQL</productname> will not compile a C function
     automatically.  The object file must be compiled before it is referenced
     in a <command>CREATE
     FUNCTION</> command.  See <xref linkend="dfunc"> for additional
     information.
-->
<application>PostgreSQL</application>はC関数を自動的にコンパイルしません。
<command>CREATE FUNCTION</>コマンドで参照する前に、そのオブジェクトファイルはコンパイルされていなければなりません。
さらなる情報については<xref linkend="dfunc">を参照してください。
    </para>
   </note>

   <indexterm zone="xfunc-c-dynload">
<!--
    <primary>magic block</primary>
-->
    <primary>魔法のブロック</primary>
   </indexterm>

   <para>
<!--
    To ensure that a dynamically loaded object file is not loaded into an
    incompatible server, <productname>PostgreSQL</productname> checks that the
    file contains a <quote>magic block</> with the appropriate contents.
    This allows the server to detect obvious incompatibilities, such as code
    compiled for a different major version of
    <productname>PostgreSQL</productname>.  A magic block is required as of
    <productname>PostgreSQL</productname> 8.2.  To include a magic block,
    write this in one (and only one) of the module source files, after having
    included the header <filename>fmgr.h</>:
-->
確実に、動的にロードされるモジュールが互換性がないサーバにロードされないように、<productname>PostgreSQL</productname>は、そのファイルに適切な内容を持つ<quote>魔法のブロック</>が含まれているかどうか検査します。
これによりサーバは、メジャーバージョンが異なる<productname>PostgreSQL</productname>用にコンパイルされたモジュールなど、明確に互換性がないことを検知することができます。
魔法のブロックは<productname>PostgreSQL</productname> 8.2から要求されています。
魔法のブロックを含めるためには、以下をモジュールのソースファイルに一度（一度だけ）、<filename>fmgr.h</>ヘッダファイルをincludeさせた後で、記述してください。

<programlisting>
#ifdef PG_MODULE_MAGIC
PG_MODULE_MAGIC;
#endif
</programlisting>

<!--
    The <literal>#ifdef</> test can be omitted if the code doesn't
    need to compile against pre-8.2 <productname>PostgreSQL</productname>
    releases.
-->
そのコードをリリース8.2より前の<productname>PostgreSQL</productname>用にコンパイルする必要がなければ、<literal>#ifdef</>テストを省略することができます。
   </para>

   <para>
<!--
    After it is used for the first time, a dynamically loaded object
    file is retained in memory.  Future calls in the same session to
    the function(s) in that file will only incur the small overhead of
    a symbol table lookup.  If you need to force a reload of an object
    file, for example after recompiling it, begin a fresh session.
-->
最初に使用された後も、動的にロードされたオブジェクトファイルはメモリ内に保持されます。
同一セッションにおいてそのファイル内の関数をその後に呼び出した場合、シンボルテーブルの検索に要する小さなオーバーヘッドしかかかりません。
例えば再コンパイルした後など、そのオブジェクトファイルを強制的に再度読み込ませる必要がある場合は、新しいセッションを開始してください。
   </para>

   <indexterm zone="xfunc-c-dynload">
    <primary>_PG_init</primary>
   </indexterm>
   <indexterm zone="xfunc-c-dynload">
    <primary>_PG_fini</primary>
   </indexterm>
   <indexterm zone="xfunc-c-dynload">
<!--
    <primary>library initialization function</primary>
-->
    <primary>ライブラリ初期化処理関数</primary>
   </indexterm>
   <indexterm zone="xfunc-c-dynload">
<!--
    <primary>library finalization function</primary>
-->
    <primary>ライブラリ最終処理関数</primary>
   </indexterm>

   <para>
<!--
    Optionally, a dynamically loaded file can contain initialization and
    finalization functions.  If the file includes a function named
    <function>_PG_init</>, that function will be called immediately after
    loading the file.  The function receives no parameters and should
    return void.  If the file includes a function named
    <function>_PG_fini</>, that function will be called immediately before
    unloading the file.  Likewise, the function receives no parameters and
    should return void.  Note that <function>_PG_fini</> will only be called
    during an unload of the file, not during process termination.
    (Presently, unloads are disabled and will never occur, but this may
    change in the future.)
-->
省略することもできますが、動的にロードされるファイルに初期化処理関数と最終処理関数を含めることができます。
<function>_PG_init</>という関数がファイルに存在すると、この関数はファイルがロードされた直後に呼び出されます。
この関数は引数を取らずvoid型を返さなければなりません。
<function>_PG_fini</>という関数がファイルに存在すると、この関数はファイルがアンロードされる直前に呼び出されます。
この関数も同様に引数を取らずvoid型を返さなければなりません。
<function>_PG_fini</>がファイルのアンロード時にのみ呼び出されるものであり、処理の終了時に呼び出されるものではないことに注意してください。
（現在、アンロードは無効となっていますので、決して発生しません。将来変更される可能性があります。）
   </para>

  </sect2>

   <sect2 id="xfunc-c-basetype">
<!--
    <title>Base Types in C-Language Functions</title>
-->
<title>C言語関数における基本型</title>

    <indexterm zone="xfunc-c-basetype">
<!--
     <primary>data type</primary>
     <secondary>internal organization</secondary>
-->
     <primary>データ型</primary>
     <secondary>内部構成</secondary>
    </indexterm>

    <para>
<!--
     To know how to write C-language functions, you need to know how
     <productname>PostgreSQL</productname> internally represents base
     data types and how they can be passed to and from functions.
     Internally, <productname>PostgreSQL</productname> regards a base
     type as a <quote>blob of memory</quote>.  The user-defined
     functions that you define over a type in turn define the way that
     <productname>PostgreSQL</productname> can operate on it.  That
     is, <productname>PostgreSQL</productname> will only store and
     retrieve the data from disk and use your user-defined functions
     to input, process, and output the data.
-->
C言語関数の作成方法を理解するためには、<productname>PostgreSQL</productname>が基本データ型を内部でどのように表現し、どのようにそれらを関数とやり取りしているかを理解する必要があります。
内部的に<productname>PostgreSQL</productname>は基本型を<quote>メモリの小さな塊</quote>とみなします。
ある型を定義するユーザ定義関数は、言い換えると、<productname>PostgreSQL</productname>がそれを操作できる方法を定義します。
つまり、<productname>PostgreSQL</productname>はデータの格納、ディスクからの取り出しのみを行い、データの入力や処理、出力にはユーザ定義関数を使用します。
    </para>

    <para>
<!--
     Base types can have one of three internal formats:
-->
基本型は下記の3つのいずれかの内部書式を使用しています。

     <itemizedlist>
      <listitem>
       <para>
<!--
        pass by value, fixed-length
-->
固定長の値渡し
       </para>
      </listitem>
      <listitem>
       <para>
<!--
        pass by reference, fixed-length
-->
固定長の参照渡し
       </para>
      </listitem>
      <listitem>
       <para>
<!--
        pass by reference, variable-length
-->
可変長の参照渡し
       </para>
      </listitem>
     </itemizedlist>
    </para>

    <para>
<!--
     By-value  types  can  only be 1, 2, or 4 bytes in length
     (also 8 bytes, if <literal>sizeof(Datum)</literal> is 8 on your machine).
     You should be careful to define your types such that they will be the
     same size (in bytes) on all architectures.  For example, the
     <literal>long</literal> type is dangerous because it is 4 bytes on some
     machines and 8 bytes on others, whereas <type>int</type> type is 4 bytes
     on most Unix machines.  A reasonable implementation of the
     <type>int4</type> type on Unix machines might be:
-->
値渡しは、1、2、4バイト長の型のみで使用することができます（使用するマシンの<literal>sizeof(Datum)</literal>が8の場合は8バイトも使用できます）。
データ型を定義する際、その型がすべてのアーキテクチャにおいて同一の大きさ（バイト数）となるように定義するように注意してください。
例えば、<literal>long</literal>型はマシンによっては4バイトであったり、8バイトであったりして危険ですが、<type>int</type>型はほとんどのUnixマシンでは4バイトです。
Unixマシンにおける<type>int4</type>の理論的な実装は以下のようになります。

     
<programlisting>
<!--
/* 4-byte integer, passed by value */
-->
/* 4 バイト整数、値渡し */
typedef int int4;
</programlisting>

<!--
     (The actual PostgreSQL C code calls this type <type>int32</type>, because
     it is a convention in C that <type>int<replaceable>XX</replaceable></type>
     means <replaceable>XX</replaceable> <emphasis>bits</emphasis>.  Note
     therefore also that the C type <type>int8</type> is 1 byte in size.  The
     SQL type <type>int8</type> is called <type>int64</type> in C.  See also
     <xref linkend="xfunc-c-type-table">.)
-->
（実際のPostgreSQLのCコードではこの型を<type>int32</type>と呼びます。
<type>int<replaceable>XX</replaceable></type>が<replaceable>XX</replaceable> <emphasis>ビット</emphasis>であることはCにおける規約だからです。
したがって<type>int8</type>というCの型のサイズは１バイトであることに注意してください。
<type>int8</type>というSQLの型はCでは<type>int64</type>と呼ばれます。
<xref linkend="xfunc-c-type-table">も参照してください。）
    </para>

    <para>
<!--
     On  the  other hand, fixed-length types of any size can
     be passed by-reference.  For example, here is a  sample
     implementation of a <productname>PostgreSQL</productname> type:
-->     
一方、任意の大きさの固定長の型は参照として引き渡すことができます。
例として以下に<productname>PostgreSQL</productname>の型の実装サンプルを示します。

<programlisting>
<!--
/* 16-byte structure, passed by reference */
-->
/* 16 バイト構造体、参照渡し */
typedef struct
{
    double  x, y;
} Point;
</programlisting>

<!--
     Only  pointers  to  such types can be used when passing
     them in and out of <productname>PostgreSQL</productname> functions.
     To return a value of such a type, allocate the right amount of
     memory with <literal>palloc</literal>, fill in the allocated memory,
     and return a pointer to it.  (Also, if you just want to return the
     same value as one of your input arguments that's of the same data type,
     you can skip the extra <literal>palloc</literal> and just return the
     pointer to the input value.)
-->
それらの型のポインタのみが<productname>PostgreSQL</productname>関数の入出力時に使用できます。
それらの型の値を返すためには、<literal>palloc()</literal>を使用して正しい大きさのメモリ領域を割り当て、そのメモリ領域に値を入力し、それのポインタを返します。
（また、入力引数の1つと同じ型かつ同じ値を返したいのであれば、<literal>palloc</literal>を行う手間を省くことができます。
この場合は入力値へのポインタを単に返してください。）
    </para>

    <para>
<!--
     Finally, all variable-length types must also be  passed
     by  reference.   All  variable-length  types must begin
     with an opaque length field of exactly 4 bytes, which will be set
     by <symbol>SET_VARSIZE</symbol>; never set this field directly! All data to
     be  stored within that type must be located in the memory
     immediately  following  that  length  field.   The
     length field contains the total length of the structure,
     that is,  it  includes  the  size  of  the  length  field
     itself.
-->
最後に、すべての可変長型は参照として引き渡す必要があります。
また、すべての可変長型は正確に4バイトの不透明なlengthフィールドから始まる必要があります。
このフィールドは<symbol>SET_VARSIZE</symbol>で設定されます。決して直接このフィールドを設定してはいけません。
その型に格納されるすべてのデータはlengthフィールドのすぐ後のメモリ領域に置かれる必要があります。
lengthフィールドにはその構造体の総長が格納されます。つまり、lengthフィールドそのものもその大きさに含まれます。
    </para>

    <para>
<!--
     Another important point is to avoid leaving any uninitialized bits
     within data type values; for example, take care to zero out any
     alignment padding bytes that might be present in structs.  Without
     this, logically-equivalent constants of your data type might be
     seen as unequal by the planner, leading to inefficient (though not
     incorrect) plans.
-->
この他の重要な点は、データ型の値の中で初期化されていないビットを残さないことです。
例えば、構造体内に存在する可能性がある整列用のパディングバイトを注意してすべてゼロクリアしてください。
こうしないと、独自データ型の論理的に等価な定数がプランナにより一致しないものと判断され、（不正確ではありませんが）非効率的な計画をもたらすかもしれません。
    </para>

    <warning>
     <para>
<!--
      <emphasis>Never</> modify the contents of a pass-by-reference input
      value.  If you do so you are likely to corrupt on-disk data, since
      the pointer you are given might point directly into a disk buffer.
      The sole exception to this rule is explained in
      <xref linkend="xaggr">.
-->
参照渡しの入力値の内容を<emphasis>決して</>変更しないでください。
指定したポインタがディスクバッファを直接指し示している可能性がよくありますので、変更すると、ディスク上のデータを破壊してしまうかもしれません。
この規則の唯一の例外について<xref linkend="xaggr">で説明します。
     </para>
    </warning>

    <para>
<!--
     As an example, we can define the type <type>text</type> as
     follows:
-->
例えば、<type>text</type>型を定義するには、下記のように行えます。

<programlisting>
typedef struct {
    int32 length;
    char data[1];
} text;
</programlisting>

<!--
     Obviously,  the  data  field declared here is not long enough to hold
     all possible strings.  Since it's impossible to declare a variable-size
     structure in <acronym>C</acronym>, we rely on the knowledge that the
     <acronym>C</acronym> compiler won't range-check array subscripts.  We
     just allocate the necessary amount of space and then access the array as
     if it were declared the right length.  (This is a common trick, which
     you can read about in many textbooks about C.)
-->
ここで宣言されたdataフィールドは、明らかにすべての取り得る文字列を保持できる長さではありません。
<acronym>C言語</acronym>では可変長の構造体を定義することは不可能ですので、<acronym>C</acronym>コンパイラは配列の添字の範囲検査を行わないという事実に依存します。
必要な領域量を割り当て、あたかも正しい長さで宣言されたかのように、配列としてアクセスするだけです。
（この手法はよく使用されます。C言語に関する多くの書籍で説明されています。）
    </para>

    <para>
<!--
     When manipulating
     variable-length types, we must  be  careful  to  allocate
     the  correct amount  of memory and set the length field correctly.
     For example, if we wanted to  store  40  bytes  in  a <structname>text</>
     structure, we might use a code fragment like this:
-->
可変長型を操作する時、正確な大きさのメモリを割り当て、lengthフィールドを正確に設定することに注意する必要があります。
例えば、40バイトを<structname>text</>構造体に保持させたい場合、下記のようなコードを使用します。

<programlisting><![CDATA[
#include "postgres.h"
...
]]><!--
char buffer[40]; /* our source data */
--><![CDATA[
char buffer[40]; /* 私たちの元のデータ */
...
text *destination = (text *) palloc(VARHDRSZ + 40);
SET_VARSIZE(destination, VARHDRSZ + 40);
memcpy(destination->data, buffer, 40);
...
]]>
</programlisting>

<!--
     <literal>VARHDRSZ</> is the same as <literal>sizeof(int32)</>, but
     it's considered good style to use the macro <literal>VARHDRSZ</>
     to refer to the size of the overhead for a variable-length type.
     Also, the length field <emphasis>must</> be set using the
     <literal>SET_VARSIZE</> macro, not by simple assignment.
-->
<literal>VARHDRSZ</>は<literal>sizeof(int32)</>と同一ですが、可変長型のオーバーヘッド分の大きさを参照する時には、<literal>VARHDRSZ</>マクロを使用する方が好ましい形式とみなされています。
また長さフィールドを単なる代入ではなく<literal>SET_VARSIZE</>マクロを使用して設定<emphasis>しなければなりません</>。
    </para>

    <para>
<!--
     <xref linkend="xfunc-c-type-table"> specifies which C type
     corresponds to which SQL type when writing a C-language function
     that uses a built-in type of <productname>PostgreSQL</>.
     The <quote>Defined In</quote> column gives the header file that
     needs to be included to get the type definition.  (The actual
     definition might be in a different file that is included by the
     listed file.  It is recommended that users stick to the defined
     interface.)  Note that you should always include
     <filename>postgres.h</filename> first in any source file, because
     it declares a number of things that you will need anyway.
-->
<xref linkend="xfunc-c-type-table">は、<productname>PostgreSQL</>の組み込み型を使用するC言語関数を作成する時の、Cの型とSQL型との対応を規定したものです。
<quote>定義場所</quote>列では、型定義を取り出すためにインクルードしなければならないヘッダファイルを示しています。
（実際の定義は一覧中のファイルからインクルードされた、別のファイルであるかもしれません。
ユーザは定義されたインタフェースを厳守することを推奨されています。）
<filename>postgres.h</filename>には必ず必要になる多くのものが宣言されていますので、ソースファイルの中で必ず初めにこのファイルをインクルードしなければならないことに注意してください。
    </para>

     <table tocentry="1" id="xfunc-c-type-table">
<!--
      <title>Equivalent C Types for Built-in SQL Types</title>
-->
      <title>組み込みSQL型に相当するCの型</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>
<!--
          SQL Type
-->
SQL型
         </entry>
         <entry>
<!--
          C Type
-->
C 言語型
         </entry>
         <entry>
<!--
          Defined In
-->
定義場所
         </entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><type>abstime</type></entry>
         <entry><type>AbsoluteTime</type></entry>
         <entry><filename>utils/nabstime.h</filename></entry>
        </row>
        <row>
         <entry><type>boolean</type></entry>
         <entry><type>bool</type></entry>
<!--
         <entry><filename>postgres.h</filename> (maybe compiler built-in)</entry>
-->
         <entry><filename>postgres.h</filename>（コンパイラで組み込み済みの可能性があります）</entry>
        </row>
        <row>
         <entry><type>box</type></entry>
         <entry><type>BOX*</type></entry>
         <entry><filename>utils/geo_decls.h</filename></entry>
        </row>
        <row>
         <entry><type>bytea</type></entry>
         <entry><type>bytea*</type></entry>
         <entry><filename>postgres.h</filename></entry>
        </row>
        <row>
         <entry><type>"char"</type></entry>
         <entry><type>char</type></entry>
<!--         <entry>(compiler built-in)</entry> -->
         <entry>（コンパイラで組み込み済み）</entry>
        </row>
        <row>
         <entry><type>character</type></entry>
         <entry><type>BpChar*</type></entry>
         <entry><filename>postgres.h</filename></entry>
        </row>
        <row>
         <entry><type>cid</type></entry>
         <entry><type>CommandId</type></entry>
         <entry><filename>postgres.h</filename></entry>
        </row>
        <row>
         <entry><type>date</type></entry>
         <entry><type>DateADT</type></entry>
         <entry><filename>utils/date.h</filename></entry>
        </row>
        <row>
         <entry><type>smallint</type> (<type>int2</type>)</entry>
         <entry><type>int16</type></entry>
         <entry><filename>postgres.h</filename></entry>
        </row>
        <row>
         <entry><type>int2vector</type></entry>
         <entry><type>int2vector*</type></entry>
         <entry><filename>postgres.h</filename></entry>
        </row>
        <row>
         <entry><type>integer</type> (<type>int4</type>)</entry>
         <entry><type>int32</type></entry>
         <entry><filename>postgres.h</filename></entry>
        </row>
        <row>
         <entry><type>real</type> (<type>float4</type>)</entry>
         <entry><type>float4*</type></entry>
        <entry><filename>postgres.h</filename></entry>
        </row>
        <row>
         <entry><type>double precision</type> (<type>float8</type>)</entry>
         <entry><type>float8*</type></entry>
         <entry><filename>postgres.h</filename></entry>
        </row>
        <row>
         <entry><type>interval</type></entry>
         <entry><type>Interval*</type></entry>
         <entry><filename>datatype/timestamp.h</filename></entry>
        </row>
        <row>
         <entry><type>lseg</type></entry>
         <entry><type>LSEG*</type></entry>
         <entry><filename>utils/geo_decls.h</filename></entry>
        </row>
        <row>
         <entry><type>name</type></entry>
         <entry><type>Name</type></entry>
         <entry><filename>postgres.h</filename></entry>
        </row>
        <row>
         <entry><type>oid</type></entry>
         <entry><type>Oid</type></entry>
         <entry><filename>postgres.h</filename></entry>
        </row>
        <row>
         <entry><type>oidvector</type></entry>
         <entry><type>oidvector*</type></entry>
         <entry><filename>postgres.h</filename></entry>
        </row>
        <row>
         <entry><type>path</type></entry>
         <entry><type>PATH*</type></entry>
         <entry><filename>utils/geo_decls.h</filename></entry>
        </row>
        <row>
         <entry><type>point</type></entry>
         <entry><type>POINT*</type></entry>
         <entry><filename>utils/geo_decls.h</filename></entry>
        </row>
        <row>
         <entry><type>regproc</type></entry>
         <entry><type>regproc</type></entry>
         <entry><filename>postgres.h</filename></entry>
        </row>
        <row>
         <entry><type>reltime</type></entry>
         <entry><type>RelativeTime</type></entry>
         <entry><filename>utils/nabstime.h</filename></entry>
        </row>
        <row>
         <entry><type>text</type></entry>
         <entry><type>text*</type></entry>
         <entry><filename>postgres.h</filename></entry>
        </row>
        <row>
         <entry><type>tid</type></entry>
         <entry><type>ItemPointer</type></entry>
         <entry><filename>storage/itemptr.h</filename></entry>
        </row>
        <row>
         <entry><type>time</type></entry>
         <entry><type>TimeADT</type></entry>
         <entry><filename>utils/date.h</filename></entry>
        </row>
        <row>
         <entry><type>time with time zone</type></entry>
         <entry><type>TimeTzADT</type></entry>
         <entry><filename>utils/date.h</filename></entry>
        </row>
        <row>
         <entry><type>timestamp</type></entry>
         <entry><type>Timestamp*</type></entry>
         <entry><filename>datatype/timestamp.h</filename></entry>
        </row>
        <row>
         <entry><type>tinterval</type></entry>
         <entry><type>TimeInterval</type></entry>
         <entry><filename>utils/nabstime.h</filename></entry>
        </row>
        <row>
         <entry><type>varchar</type></entry>
         <entry><type>VarChar*</type></entry>
         <entry><filename>postgres.h</filename></entry>
        </row>
        <row>
         <entry><type>xid</type></entry>
         <entry><type>TransactionId</type></entry>
         <entry><filename>postgres.h</filename></entry>
        </row>
       </tbody>
      </tgroup>
     </table>

    <para>
<!--
     Now that we've gone over all of the possible structures
     for base types, we can show some examples of real functions.
-->
ここまでで基本型に関してあり得る構造体のすべてを記述しましたので、実際の関数の例をいくつか示すことができます。
    </para>
   </sect2>

   <sect2>
<!--
    <title>Version 0 Calling Conventions</title>
-->
<title>Version 0 呼び出し規約</title>

    <para>
<!--
     We present the <quote>old style</quote> calling convention first &mdash; although
     this approach is now deprecated, it's easier to get a handle on
     initially.  In the version-0 method, the arguments and result
     of the C function are just declared in normal C style, but being
     careful to use the C representation of each SQL data type as shown
     above.
-->
まず最初に、現在は非推奨ですが理解しやすいので、<quote>古いスタイル</quote>の呼び出し規約を説明します。
Version-0メソッドでは、C関数の引数と結果は、通常のCのプログラムの記述の方法と同じような形式で行いますが、上記の説明のように、各SQLのデータ型に対するC言語での表現を注意して使用してください。
    </para>

    <para>
<!--
     Here are some examples:
-->
以下にいくつか例を示します。

<programlisting><![CDATA[
#include "postgres.h"
#include <string.h>
#include "utils/geo_decls.h"

#ifdef PG_MODULE_MAGIC
PG_MODULE_MAGIC;
#endif

]]><!--
/* by value */
--><![CDATA[
/* 値渡し */

int
add_one(int arg)
{
    return arg + 1;
}

]]><!--
/* by reference, fixed length */
--><![CDATA[
/* 固定長の参照渡し */

float8 *
add_one_float8(float8 *arg)
{
    float8    *result = (float8 *) palloc(sizeof(float8));

    *result = *arg + 1.0;

    return result;
}

Point *
makepoint(Point *pointx, Point *pointy)
{
    Point     *new_point = (Point *) palloc(sizeof(Point));

    new_point->x = pointx->x;
    new_point->y = pointy->y;

    return new_point;
}

]]><!--
/* by reference, variable length */
--><![CDATA[
/* 可変長の参照渡し */

text *
copytext(text *t)
{
    /*
]]><!--
     * VARSIZE is the total size of the struct in bytes.
--><![CDATA[
     * VARSIZEは構造体の総長をバイト数で表したものです。
     */
    text *new_t = (text *) palloc(VARSIZE(t));
    SET_VARSIZE(new_t, VARSIZE(t));
    /*
]]><!--
     * VARDATA is a pointer to the data region of the struct.
--><![CDATA[
     * VARDATAは構造体のデータ領域へのポインタです。
     */
]]><!--
    memcpy((void *) VARDATA(new_t), /* destination */
           (void *) VARDATA(t),     /* source */
           VARSIZE(t) - VARHDRSZ);  /* how many bytes */
--><![CDATA[
    memcpy((void *) VARDATA(new_t), /* コピー先 */
           (void *) VARDATA(t),     /* コピー元 */
           VARSIZE(t) - VARHDRSZ);  /* バイト数 */
    return new_t;
}

text *
concat_text(text *arg1, text *arg2)
{
    int32 new_text_size = VARSIZE(arg1) + VARSIZE(arg2) - VARHDRSZ;
    text *new_text = (text *) palloc(new_text_size);

    SET_VARSIZE(new_text, new_text_size);
    memcpy(VARDATA(new_text), VARDATA(arg1), VARSIZE(arg1) - VARHDRSZ);
    memcpy(VARDATA(new_text) + (VARSIZE(arg1) - VARHDRSZ),
           VARDATA(arg2), VARSIZE(arg2) - VARHDRSZ);
    return new_text;
}
]]>
</programlisting>
    </para>

    <para>
<!--
     Supposing that the above code has been prepared in file
     <filename>funcs.c</filename> and compiled into a shared object,
     we could define the functions to <productname>PostgreSQL</productname>
     with commands like this:
-->
上のコードが<filename>funcs.c</filename>というファイルに用意され、共有オブジェクトとしてコンパイル済みであるとすると、以下のようなコマンドで<productname>PostgreSQL</productname>の関数を定義することができます。

<programlisting>
CREATE FUNCTION add_one(integer) RETURNS integer
     AS '<replaceable>DIRECTORY</replaceable>/funcs', 'add_one'
     LANGUAGE C STRICT;

<!--
&#045;&#045; note overloading of SQL function name "add_one"
-->
-- "add_one"というSQL関数名をオーバーロードしていることに注意
CREATE FUNCTION add_one(double precision) RETURNS double precision
     AS '<replaceable>DIRECTORY</replaceable>/funcs', 'add_one_float8'
     LANGUAGE C STRICT;

CREATE FUNCTION makepoint(point, point) RETURNS point
     AS '<replaceable>DIRECTORY</replaceable>/funcs', 'makepoint'
     LANGUAGE C STRICT;

CREATE FUNCTION copytext(text) RETURNS text
     AS '<replaceable>DIRECTORY</replaceable>/funcs', 'copytext'
     LANGUAGE C STRICT;

CREATE FUNCTION concat_text(text, text) RETURNS text
     AS '<replaceable>DIRECTORY</replaceable>/funcs', 'concat_text'
     LANGUAGE C STRICT;
</programlisting>
    </para>

    <para>
<!--
     Here, <replaceable>DIRECTORY</replaceable> stands for the
     directory of the shared library file (for instance the
     <productname>PostgreSQL</productname> tutorial directory, which
     contains the code for the examples used in this section).
     (Better style would be to use just <literal>'funcs'</> in the
     <literal>AS</> clause, after having added
     <replaceable>DIRECTORY</replaceable> to the search path.  In any
     case, we can omit the system-specific extension for a shared
     library, commonly <literal>.so</literal> or
     <literal>.sl</literal>.)
-->
ここで、<replaceable>DIRECTORY</replaceable>は共有ライブラリファイルのディレクトリ（例えば、本節で使用する例のコードが含まれる<productname>PostgreSQL</productname>チュートリアルディレクトリ）を表します。
（<literal>AS</>句中では単に<literal>'funcs'</>を使用し、後で<replaceable>DIRECTORY</replaceable>を検索パスに追加する方がより良い方法です。
どの場合でも、一般的に<literal>.so</literal>や<literal>.sl</literal>が使用される、共有ライブラリ用のシステム独特の拡張子を省略することができます。）
    </para>

    <para>
<!--
     Notice that we have specified the functions as <quote>strict</quote>,
     meaning that
     the system should automatically assume a null result if any input
     value is null.  By doing this, we avoid having to check for null inputs
     in the function code.  Without this, we'd have to check for null values
     explicitly, by checking for a null pointer for each
     pass-by-reference argument.  (For pass-by-value arguments, we don't
     even have a way to check!)
-->
ここで、関数を<quote>厳密（strict）</quote>と指定していることに注目してください。
これは、もし入力された値がNULLであった場合に、システムが自動的に返り値もNULLであるとみなすことを意味します。
これを行うことによって、関数のコードで入力値がNULLであるかどうかの検査を行う必要がなくなります。
これがなければ、参照渡し引数それぞれに対してヌルポインタについての検査を行うなど、NULL値の明示的な検査を行う必要性が出てきます。
（値渡し引数に関しては、検査を行う方法は存在しません。）
    </para>

    <para>
<!--
     Although this calling convention is simple to use,
     it is not very portable; on some architectures there are problems
     with passing data types that are smaller than <type>int</type> this way.  Also, there is
     no simple way to return a null result, nor to cope with null arguments
     in any way other than making the function strict.  The version-1
     convention, presented next, overcomes these objections.
-->
この呼び出し規約は単純ですが、この方法は移植性の面であまり優れていません。
この方法で<type>int</type>型より小さいデータ型を渡す部分で問題を抱えているアーキテクチャも存在します。
また、関数の結果としてNULLを返す簡単な方法はありません。
その上、NULL引数をうまく処理する方法としては、関数を厳密なものにする以外方法はありません。
次に説明するVersion-1規約ではこれらの問題が解決されています。
    </para>
   </sect2>

   <sect2>
<!--
    <title>Version 1 Calling Conventions</title>
-->
<title>Version 1 呼び出し規約</title>

    <para>
<!--
     The version-1 calling convention relies on macros to suppress most
     of the complexity of passing arguments and results.  The C declaration
     of a version-1 function is always:
-->
Version-1呼び出し規約では、引数と結果の引き渡しの複雑さをなくすためにマクロを使用しています。
Version-1関数のC言語宣言は必ず下記のように行います。
<programlisting>
Datum funcname(PG_FUNCTION_ARGS)
</programlisting>
<!--
     In addition, the macro call:
-->
     さらに、マクロ呼び出し
<programlisting>
PG_FUNCTION_INFO_V1(funcname);
</programlisting>
<!--
     must appear in the same source file.  (Conventionally, it's
     written just before the function itself.)  This macro call is not
     needed for <literal>internal</>-language functions, since
     <productname>PostgreSQL</> assumes that all internal functions
     use the version-1 convention.  It is, however, required for
     dynamically-loaded functions.
-->
が同じソースファイルに書かれている必要があります。
（一般には、関数の直前に書かれます。）
<productname>PostgreSQL</>ではすべての内部関数はVersion-1であると認識するので、このマクロの呼び出しは<literal>internal</>言語関数では必要ありません。
しかし、動的にロードされる関数では必要です。
    </para>

    <para>
<!--
     In a version-1 function, each actual argument is fetched using a
     <function>PG_GETARG_<replaceable>xxx</replaceable>()</function>
     macro that corresponds to the argument's data type, and the
     result is returned using a
     <function>PG_RETURN_<replaceable>xxx</replaceable>()</function>
     macro for the return type.
     <function>PG_GETARG_<replaceable>xxx</replaceable>()</function>
     takes as its argument the number of the function argument to
     fetch, where the count starts at 0.
     <function>PG_RETURN_<replaceable>xxx</replaceable>()</function>
     takes as its argument the actual value to return.
-->
Version-1関数では、それぞれの実引数は、引数のデータ型に合った<function>PG_GETARG_<replaceable>xxx</replaceable>()</function>マクロを使用して取り出され、結果は戻り値の型に合った<function>PG_RETURN_<replaceable>xxx</replaceable>()</function>マクロを使用して返されます。
<function>PG_GETARG_<replaceable>xxx</replaceable>()</function>は、その引数として、取り出す関数引数の番号（ゼロから始まります）を取ります。
<function>PG_RETURN_<replaceable>xxx</replaceable>()</function>は、その引数として、実際に返す値を取ります。
    </para>

    <para>
<!--
     Here we show the same functions as above, coded in version-1 style:
-->
上記と同じ関数をVersion-1形式で記述したものを以下に示します。

<programlisting><![CDATA[
#include "postgres.h"
#include <string.h>
#include "fmgr.h"
#include "utils/geo_decls.h"

#ifdef PG_MODULE_MAGIC
PG_MODULE_MAGIC;
#endif

]]><!--
/* by value */
--><![CDATA[
/* 値渡し */

PG_FUNCTION_INFO_V1(add_one);

Datum
add_one(PG_FUNCTION_ARGS)
{
    int32   arg = PG_GETARG_INT32(0);

    PG_RETURN_INT32(arg + 1);
}

]]><!--
/* by reference, fixed length */
--><![CDATA[
/* 固定長の参照渡し */

PG_FUNCTION_INFO_V1(add_one_float8);

Datum
add_one_float8(PG_FUNCTION_ARGS)
{
]]><!--
    /* The macros for FLOAT8 hide its pass-by-reference nature. */
--><![CDATA[
    /* FLOAT8用のマクロは参照渡しという性質を隠します */
    float8   arg = PG_GETARG_FLOAT8(0);

    PG_RETURN_FLOAT8(arg + 1.0);
}

PG_FUNCTION_INFO_V1(makepoint);

Datum
makepoint(PG_FUNCTION_ARGS)
{
]]><!--
    /* Here, the pass-by-reference nature of Point is not hidden. */
--><![CDATA[
    /* ここのPoint型の参照渡しという性質は隠されていません */
    Point     *pointx = PG_GETARG_POINT_P(0);
    Point     *pointy = PG_GETARG_POINT_P(1);
    Point     *new_point = (Point *) palloc(sizeof(Point));

    new_point->x = pointx->x;
    new_point->y = pointy->y;

    PG_RETURN_POINT_P(new_point);
}

]]><!--
/* by reference, variable length */
--><![CDATA[
/* 可変長の参照渡し */

PG_FUNCTION_INFO_V1(copytext);

Datum
copytext(PG_FUNCTION_ARGS)
{
    text     *t = PG_GETARG_TEXT_P(0);
    /*
]]><!--
     * VARSIZE is the total size of the struct in bytes.
--><![CDATA[
     * VARSIZEは構造体の総長をバイト数で表したものです。
     */
    text     *new_t = (text *) palloc(VARSIZE(t));
    SET_VARSIZE(new_t, VARSIZE(t));
    /*
]]><!--
     * VARDATA is a pointer to the data region of the struct.
--><![CDATA[
     * VARDATAは構造体のデータ領域へのポインタです。
     */
]]><!--
    memcpy((void *) VARDATA(new_t), /* destination */
           (void *) VARDATA(t),     /* source */
           VARSIZE(t) - VARHDRSZ);  /* how many bytes */
--><![CDATA[
    memcpy((void *) VARDATA(new_t), /* コピー先 */
           (void *) VARDATA(t),     /* コピー元 */
           VARSIZE(t) - VARHDRSZ);  /* バイト数 */
    PG_RETURN_TEXT_P(new_t);
}

PG_FUNCTION_INFO_V1(concat_text);

Datum
concat_text(PG_FUNCTION_ARGS)
{
    text  *arg1 = PG_GETARG_TEXT_P(0);
    text  *arg2 = PG_GETARG_TEXT_P(1);
    int32 new_text_size = VARSIZE(arg1) + VARSIZE(arg2) - VARHDRSZ;
    text *new_text = (text *) palloc(new_text_size);

    SET_VARSIZE(new_text, new_text_size);
    memcpy(VARDATA(new_text), VARDATA(arg1), VARSIZE(arg1) - VARHDRSZ);
    memcpy(VARDATA(new_text) + (VARSIZE(arg1) - VARHDRSZ),
           VARDATA(arg2), VARSIZE(arg2) - VARHDRSZ);
    PG_RETURN_TEXT_P(new_text);
}
]]>
</programlisting>
    </para>

    <para>
<!--
     The <command>CREATE FUNCTION</command> commands are the same as
     for the version-0 equivalents.
-->
<command>CREATE FUNCTION</command>コマンドはVersion-0と同じものです。
    </para>

    <para>
<!--
     At first glance, the version-1 coding conventions might appear to
     be just pointless obscurantism.  They do, however, offer a number
     of improvements, because the macros can hide unnecessary detail.
     An example is that in coding <function>add_one_float8</>, we no longer need to
     be aware that <type>float8</type> is a pass-by-reference type.  Another
     example is that the <literal>GETARG</> macros for variable-length types allow
     for more efficient fetching of <quote>toasted</quote> (compressed or
     out-of-line) values.
-->
一見Version-1のコーディング規約は無意味なものに見えるかもしれません。
しかし、マクロが必要のない情報を隠蔽しているので、多数の改良が行われています。
例えば、<function>add_one_float8</>のコードでは、<type>float8</type>が参照渡しであることを意識する必要がなくなっています。
また別の例としては、可変長型の<literal>GETARG</>マクロは<quote>TOASTされた</quote>（圧縮または行外）値をより効率的に取り出すことができます。
    </para>

    <para>
<!--
     One big improvement in version-1 functions is better handling of null
     inputs and results.  The macro <function>PG_ARGISNULL(<replaceable>n</>)</function>
     allows a function to test whether each input is null.  (Of course, doing
     this is only necessary in functions not declared <quote>strict</>.)
     As with the
     <function>PG_GETARG_<replaceable>xxx</replaceable>()</function> macros,
     the input arguments are counted beginning at zero.  Note that one
     should refrain from executing
     <function>PG_GETARG_<replaceable>xxx</replaceable>()</function> until
     one has verified that the argument isn't null.
     To return a null result, execute <function>PG_RETURN_NULL()</function>;
     this works in both strict and nonstrict functions.
-->
Version-1関数の1つの大きな改善点は、NULLの入力/結果の処理能力です。
<function>PG_ARGISNULL(<replaceable>n</>)</function>マクロにより関数は各入力がNULLであるかどうかの検査を行うことができます。
（もちろんこれは、<quote>厳密</>と宣言されていない関数でのみ必要です。）
<function>PG_GETARG_<replaceable>xxx</replaceable>()</function>マクロと同様、入力引数の番号はゼロから始まります。
引数がNULLでないことを確認するまでは、<function>PG_GETARG_<replaceable>xxx</replaceable>()</function>の実行は控えなければなりません。
結果としてNULLを返す場合は、<function>PG_RETURN_NULL()</function>を実行します。
これは、厳密な関数と厳密でない関数の両方で使用可能です。
    </para>

    <para>
<!--
     Other options provided in the new-style interface are two
     variants of the
     <function>PG_GETARG_<replaceable>xxx</replaceable>()</function>
     macros. The first of these,
     <function>PG_GETARG_<replaceable>xxx</replaceable>_COPY()</function>,
     guarantees to return a copy of the specified argument that is
     safe for writing into. (The normal macros will sometimes return a
     pointer to a value that is physically stored in a table, which
     must not be written to. Using the
     <function>PG_GETARG_<replaceable>xxx</replaceable>_COPY()</function>
     macros guarantees a writable result.)
    The second variant consists of the
    <function>PG_GETARG_<replaceable>xxx</replaceable>_SLICE()</function>
    macros which take three arguments. The first is the number of the
    function argument (as above). The second and third are the offset and
    length of the segment to be returned. Offsets are counted from
    zero, and a negative length requests that the remainder of the
    value be returned. These macros provide more efficient access to
    parts of large values in the case where they have storage type
    <quote>external</quote>. (The storage type of a column can be specified using
    <literal>ALTER TABLE <replaceable>tablename</replaceable> ALTER
    COLUMN <replaceable>colname</replaceable> SET STORAGE
    <replaceable>storagetype</replaceable></literal>. <replaceable>storagetype</replaceable> is one of
    <literal>plain</>, <literal>external</>, <literal>extended</literal>,
     or <literal>main</>.)
-->
新しい形式のインタフェースでは、その他のオプションとして<function>PG_GETARG_<replaceable>xxx</replaceable>()</function>マクロの変形を2つ提供しています。
1つ目の<function>PG_GETARG_<replaceable>xxx</replaceable>_COPY()</function>によって、安全に書き込むことができる指定引数のコピーが確実に返されます。
（通常のマクロは、物理的にテーブルに格納されている値へのポインタを返すことがあるので、書き込んではなりません。
<function>PG_GETARG_<replaceable>xxx</replaceable>_COPY()</function>マクロの結果は書き込み可能であることが保証されています。）
2つ目の変形は、引数を3つ取る<function>PG_GETARG_<replaceable>xxx</replaceable>_SLICE()</function>マクロからなります。
1つ目は関数の引数の番号（上記の通り）です。
2つ目と3つ目は、オフセットと返されるセグメントの長さです。
オフセットはゼロから始まり、負の長さは残りの値を返すことを要求します。
これらのマクロを使用すると、ストレージ種類が<quote>external</quote>（外部）である大きな値の一部へアクセスする際に非常に効果的です。
（列のストレージ種類は<literal>ALTER TABLE <replaceable>tablename</replaceable> ALTER COLUMN <replaceable>colname</replaceable> SET STORAGE <replaceable>storagetype</replaceable></literal>を使用して指定できます。
<replaceable>storagetype</replaceable>は、<literal>plain</>、<literal>external</>、<literal>extended</literal>、または<literal>main</>のいずれかです。）
    </para>

    <para>
<!--
     Finally, the version-1 function call conventions make it possible
     to return set results (<xref linkend="xfunc-c-return-set">) and
     implement trigger functions (<xref linkend="triggers">) and
     procedural-language call handlers (<xref
     linkend="plhandler">).  Version-1 code is also more
     portable than version-0, because it does not break restrictions
     on function call protocol in the C standard.  For more details
     see <filename>src/backend/utils/fmgr/README</filename> in the
     source distribution.
-->
最後に、Version-1関数呼び出し規約では、結果集合（<xref linkend="xfunc-c-return-set">）を返すこと、およびトリガ関数（<xref linkend="triggers">）と手続型言語の呼び出しハンドラ（<xref linkend="plhandler">）を実装することができます。
また、Version-1コードは、標準Cの関数呼び出しプロトコルの制約を守りますので、Version-0よりも移植性があります。
詳細についてはソース配布物内の<filename>src/backend/utils/fmgr/README</filename>を参照してください。
    </para>
   </sect2>

   <sect2>
<!--
    <title>Writing Code</title>
-->
    <title>コードの作成</title>

    <para>
<!--
     Before we turn to the more advanced topics, we should discuss
     some coding rules for <productname>PostgreSQL</productname>
     C-language functions.  While it might be possible to load functions
     written in languages other than C into
     <productname>PostgreSQL</productname>, this is usually difficult
     (when it is possible at all) because other languages, such as
     C++, FORTRAN, or Pascal often do not follow the same calling
     convention as C.  That is, other languages do not pass argument
     and return values between functions in the same way.  For this
     reason, we will assume that your C-language functions are
     actually written in C.
-->
より先進的な話題に入る前に、<productname>PostgreSQL</productname> C言語関数のコーディングについての規則をいくつか説明します。
C言語以外の言語で記述した関数を<productname>PostgreSQL</productname>に組み込みむことは可能であるかもしれませんが、例えばC++、FORTRANやPascalといった言語はC言語と同じ呼び出し規約に従いませんので、多くの場合、（可能であったとしても）困難です。
それはつまり、他の言語では同じ方法で関数に引数を渡したり、関数から結果を返すことを行わないということです。
このため、C言語関数は実際に<acronym>C</acronym>言語で書かれているものと仮定します。
    </para>

    <para>
<!--
     The basic rules for writing and building C functions are as follows:
-->
C関数の作成と構築の基本規則を以下に示します。

     <itemizedlist>
      <listitem>
       <para>
<!--
        Use <literal>pg_config
        &#045;&#045;includedir-server</literal><indexterm><primary>pg_config</><secondary>with user-defined C functions</></>
        to find out where the <productname>PostgreSQL</> server header
        files are installed on your system (or the system that your
        users will be running on).
-->
<literal>pg_config --includedir-server</literal>を使用して、使用中のシステム（もしくはユーザが実行するシステム）にて<productname>PostgreSQL</>サーバのヘッダファイルがインストールされた場所を見つけます。
<indexterm><primary>pg_config</><secondary>ユーザ定義C関数</></>
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        Compiling and linking your code so that it can be dynamically
        loaded into <productname>PostgreSQL</productname> always
        requires special flags.  See <xref linkend="dfunc"> for a
        detailed explanation of how to do it for your particular
        operating system.
-->
<productname>PostgreSQL</productname>に動的にロードできるように独自コードをコンパイル/リンクする時には常に、特別なフラグが必要となります。
特定のオペレーティングシステムにおけるコンパイル/リンク方法については<xref linkend="dfunc">を参照してください。
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        Remember to define a <quote>magic block</> for your shared library,
        as described in <xref linkend="xfunc-c-dynload">.
-->
忘れずに<xref linkend="xfunc-c-dynload">で説明した<quote>魔法のブロック</>を共有ライブラリで定義してください。
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        When allocating memory, use the
        <productname>PostgreSQL</productname> functions
        <function>palloc</function><indexterm><primary>palloc</></> and <function>pfree</function><indexterm><primary>pfree</></>
        instead of the corresponding C library functions
        <function>malloc</function> and <function>free</function>.
        The memory allocated by <function>palloc</function> will be
        freed automatically at the end of each transaction, preventing
        memory leaks.
-->
メモリを割り当てる際、<acronym>C</acronym>ライブラリの<function>malloc</function>と<function>free</function>ではなく、<productname>PostgreSQL</productname>の<function>palloc</function>と<function>pfree</function>を使用してください。
<indexterm><primary>palloc</></><indexterm><primary>pfree</></>
<function>palloc</function>で割り当てられたメモリは各トランザクションの終わりに自動的に解放され、メモリリークを防ぎます。
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        Always zero the bytes of your structures using <function>memset</>
        (or allocate them with <function>palloc0</> in the first place).
        Even if you assign to each field of your structure, there might be
        alignment padding (holes in the structure) that contain
        garbage values.  Without this, it's difficult to
        support hash indexes or hash joins, as you must pick out only
        the significant bits of your data structure to compute a hash.
        The planner also sometimes relies on comparing constants via
        bitwise equality, so you can get undesirable planning results if
        logically-equivalent values aren't bitwise equal.
-->
<function>memset</function>を使用して、構造体を必ずゼロクリアしてください（または最初の段階で<function>palloc0</>を用いて割り当ててください）。
構造体の各フィールドを割り当てたとしても、ゴミの値を持つ整列用のパディング（構造体内の穴）があるかもしれません。
こうしないと、ハッシュインデックスやハッシュ結合をサポートすることが困難です。
ハッシュを計算するには、データ構造体内の有意なビットのみを取り出す必要があるためです。
プランナはまた時折ビット単位の等価性を用いて定数の比較を行います。
このため論理的にな値がビット単位で等価でない場合に望まない計画になってしまう可能性があります。
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        Most of the internal <productname>PostgreSQL</productname>
        types are declared in <filename>postgres.h</filename>, while
        the function manager interfaces
        (<symbol>PG_FUNCTION_ARGS</symbol>, etc.)  are in
        <filename>fmgr.h</filename>, so you will need to include at
        least these two files.  For portability reasons it's best to
        include <filename>postgres.h</filename> <emphasis>first</>,
        before any other system or user header files.  Including
        <filename>postgres.h</filename> will also include
        <filename>elog.h</filename> and <filename>palloc.h</filename>
        for you.
-->
ほとんどの<productname>PostgreSQL</productname>の内部型は<filename>postgres.h</filename>に宣言されています。
一方、関数管理インタフェース（<symbol>PG_FUNCTION_ARGS</symbol>など）は<filename>fmgr.h</filename>で宣言されています。
したがって、少なくともこの2つのファイルをインクルードする必要があります。
移植性に関する理由により、<filename>postgres.h</filename>をその他のシステムヘッダファイル、ユーザヘッダファイルよりも<emphasis>先に</>インクルードしておくことが最善です。
<filename>postgres.h</filename>をインクルードすることは<filename>elog.h</filename>、<filename>palloc.h</filename>もインクルードすることになります。
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        Symbol names defined within object files must not conflict
        with each other or with symbols defined in the
        <productname>PostgreSQL</productname> server executable.  You
        will have to rename your functions or variables if you get
        error messages to this effect.
-->
オブジェクトファイルで定義されているシンボル名は、互いに、または<productname>PostgreSQL</productname>サーバの実行ファイルで定義されているものと異なっている必要があります。
これに関するエラーが表示される場合は、関数名または変数名を変更する必要があります。
       </para>
      </listitem>

     </itemizedlist>
    </para>
   </sect2>

&dfunc;

   <sect2>
<!--
    <title>Composite-type Arguments</title>
-->
<title>複合型引数</title>

    <para>
<!--
     Composite types do not have a fixed layout like C structures.
     Instances of a composite type can contain null fields.  In
     addition, composite types that are part of an inheritance
     hierarchy can have different fields than other members of the
     same inheritance hierarchy.  Therefore,
     <productname>PostgreSQL</productname> provides a function
     interface for accessing fields of composite types from C.
-->
複合型ではCの構造体のような固定のレイアウトがありません。
複合型のインスタンスはNULLフィールドを持つことができます。
さらに、複合型で継承階層の一部であるものは、同じ継承階層の他のメンバとは異なるフィールドを持つこともできます。
そのため、<productname>PostgreSQL</productname>はC言語から複合型のフィールドにアクセスするための関数インタフェースを提供します。
    </para>

    <para>
<!--
     Suppose we want to write a function to answer the query:
-->
以下のような問い合わせに答える関数を書こうとしていると仮定します。

<programlisting>
SELECT name, c_overpaid(emp, 1500) AS overpaid
    FROM emp
    WHERE name = 'Bill' OR name = 'Sam';
</programlisting>

<!--
     Using call conventions version 0, we can define
     <function>c_overpaid</> as:
-->
Version 0呼び出し規約を使用すると、<function>c_overpaid</>は以下のように定義できます。

<programlisting><![CDATA[
#include "postgres.h"
]]><!--
#include "executor/executor.h"  /* for GetAttributeByName() */
--><![CDATA[
#include "executor/executor.h"  /* GetAttributeByName()用 */

#ifdef PG_MODULE_MAGIC
PG_MODULE_MAGIC;
#endif

bool
]]><!--
c_overpaid(HeapTupleHeader t, /* the current row of emp */
--><![CDATA[
c_overpaid(HeapTupleHeader t, /* empの現在の行 */
           int32 limit)
{
    bool isnull;
    int32 salary;

    salary = DatumGetInt32(GetAttributeByName(t, "salary", &isnull));
    if (isnull)
        return false;
    return salary > limit;
}
]]>
</programlisting>

<!--
     In version-1 coding, the above would look like this:
-->
Version 1で作成すると、上の関数は以下のようになります。

<programlisting><![CDATA[
#include "postgres.h"
]]><!--
#include "executor/executor.h"  /* for GetAttributeByName() */
--><![CDATA[
#include "executor/executor.h"  /* GetAttributeByName()用 */

#ifdef PG_MODULE_MAGIC
PG_MODULE_MAGIC;
#endif

PG_FUNCTION_INFO_V1(c_overpaid);

Datum
c_overpaid(PG_FUNCTION_ARGS)
{
    HeapTupleHeader  t = PG_GETARG_HEAPTUPLEHEADER(0);
    int32            limit = PG_GETARG_INT32(1);
    bool isnull;
    Datum salary;


    salary = GetAttributeByName(t, "salary", &isnull);
    if (isnull)
        PG_RETURN_BOOL(false);
]]><!--
    /* Alternatively, we might prefer to do PG_RETURN_NULL() for null salary. */
--><![CDATA[ 
    /* この他、salaryがNULLの場合用にPG_RETURN_NULL()を行った方が良いでしょう */

    PG_RETURN_BOOL(DatumGetInt32(salary) > limit);
}
]]>
</programlisting>
    </para>

    <para>
<!--
     <function>GetAttributeByName</function> is the
     <productname>PostgreSQL</productname> system function that
     returns attributes out of the specified row.  It has
     three arguments: the argument of type <type>HeapTupleHeader</type> passed
     into
     the  function, the name of the desired attribute, and a
     return parameter that tells whether  the  attribute
     is  null.   <function>GetAttributeByName</function> returns a <type>Datum</type>
     value that you can convert to the proper data type by using the
     appropriate <function>DatumGet<replaceable>XXX</replaceable>()</function>
     macro.  Note that the return value is meaningless if the null flag is
     set; always check the null flag before trying to do anything with the
     result.
-->
<function>GetAttributeByName</function>は、指定された行から属性を返す、<productname>PostgreSQL</productname>システム関数です。
これには3つの引数があります。
それらは、関数に渡された<type>HeapTupleHeader</type>型の引数、求められた属性の名前、属性がNULLであるかどうかを通知する返りパラメータです。
<function>GetAttributeByName</function>は適切な<function>DatumGet<replaceable>XXX</replaceable>()</function>マクロを使用して適切なデータ型に変換可能な<type>Datum</type>型の値を返します。
このNULLフラグが設定されている場合、戻り値の意味がないことに注意し、この結果で何かを行おうとする前に常に、NULLフラグを検査してください。
    </para>

    <para>
<!--
     There is also <function>GetAttributeByNum</function>, which selects
     the target attribute by column number instead of name.
-->
対象列を名前ではなく列番号で選択する<function>GetAttributeByNum</function>もあります。
    </para>

    <para>
<!--
     The following command declares the function
     <function>c_overpaid</function> in SQL:
-->
下記のコマンドで<function>c_overpaid</function>関数をSQLで宣言します。

<programlisting>
CREATE FUNCTION c_overpaid(emp, integer) RETURNS boolean
    AS '<replaceable>DIRECTORY</replaceable>/funcs', 'c_overpaid'
    LANGUAGE C STRICT;
</programlisting>

<!--
     Notice we have used <literal>STRICT</> so that we did not have to
     check whether the input arguments were NULL.
-->
入力引数がNULLかどうかを検査する必要がないように<literal>STRICT</>を使用していることに注意してください。
    </para>
   </sect2>

   <sect2>
<!--
    <title>Returning Rows (Composite Types)</title>
-->
    <title>行（複合型）を返す</title>

    <para>
<!--
     To return a row or composite-type value from a C-language
     function, you can use a special API that provides macros and
     functions to hide most of the complexity of building composite
     data types.  To use this API, the source file must include:
-->
C言語関数から行もしくは複合型の値を返すために、複合型の複雑な作成のほとんどを隠蔽するマクロや関数を提供する、特別なAPIを使用することができます。
このAPIを使用するためには、ソースファイルで以下をインクルードする必要があります。
<programlisting>
#include "funcapi.h"
</programlisting>
    </para>

    <para>
<!--
     There are two ways you can build a composite data value (henceforth
     a <quote>tuple</>): you can build it from an array of Datum values,
     or from an array of C strings that can be passed to the input
     conversion functions of the tuple's column data types.  In either
     case, you first need to obtain or construct a <structname>TupleDesc</>
     descriptor for the tuple structure.  When working with Datums, you
     pass the <structname>TupleDesc</> to <function>BlessTupleDesc</>,
     and then call <function>heap_form_tuple</> for each row.  When working
     with C strings, you pass the <structname>TupleDesc</> to
     <function>TupleDescGetAttInMetadata</>, and then call
     <function>BuildTupleFromCStrings</> for each row.  In the case of a
     function returning a set of tuples, the setup steps can all be done
     once during the first call of the function.
-->
複合型のデータ値（以降<quote>タプル</>と記す）を作成する2つの方法があります。
Datum値の配列から作成する方法、もしくはタプルのある列の型の入力変換関数に渡すことができるC文字列の配列から作成することです。
どちらの方法でも、まずタプル構造体用の<structname>TupleDesc</>記述子を入手、あるいは作成しなければなりません。
Datumを使用する場合は、<structname>TupleDesc</>を<function>BlessTupleDesc</>に渡し、各行に対して<function>heap_form_tuple</>を呼び出します。
C文字列を使用する場合は、<structname>TupleDesc</> を<function>TupleDescGetAttInMetadata</>に渡し、各行に対して <function>BuildTupleFromCStrings</>を呼び出します。
タプルの集合を返す関数の場合、この設定段階を最初の関数呼び出しで一度にまとめて行うことができます。
    </para>

    <para>
<!--
     Several helper functions are available for setting up the needed
     <structname>TupleDesc</>.  The recommended way to do this in most
     functions returning composite values is to call:
-->
必要な<structname>TupleDesc</>の設定用の補助用関数がいくつかあります。
ほとんどの複合型を返す関数での推奨方法は、以下の関数を呼び出し、呼び出し元の関数自身に渡される<literal>fcinfo</>構造体と同じものを渡すことです。
<programlisting>
TypeFuncClass get_call_result_type(FunctionCallInfo fcinfo,
                                   Oid *resultTypeId,
                                   TupleDesc *resultTupleDesc)
</programlisting>
<!--
     passing the same <literal>fcinfo</> struct passed to the calling function
     itself.  (This of course requires that you use the version-1
     calling conventions.)  <varname>resultTypeId</> can be specified
     as <literal>NULL</> or as the address of a local variable to receive the
     function's result type OID.  <varname>resultTupleDesc</> should be the
     address of a local <structname>TupleDesc</> variable.  Check that the
     result is <literal>TYPEFUNC_COMPOSITE</>; if so,
     <varname>resultTupleDesc</> has been filled with the needed
     <structname>TupleDesc</>.  (If it is not, you can report an error along
     the lines of <quote>function returning record called in context that
     cannot accept type record</quote>.)
-->
（これにはもちろん、version 1呼び出し規約を使用していることが必要です。）
<varname>resultTypeId</>を<literal>NULL</>とすることも、ローカル変数のアドレスを指定して関数の戻り値型のOIDを受け取ることができます。
<varname>resultTupleDesc</>はローカルな<structname>TupleDesc</>変数のアドレスでなければなりません。
結果が<literal>TYPEFUNC_COMPOSITE</>かどうかを確認してください。
<literal>TYPEFUNC_COMPOSITE</>であった場合、<varname>resultTupleDesc</>には必要な<structname>TupleDesc</>が格納されています。
（<literal>TYPEFUNC_COMPOSITE</>ではなかった場合、<quote>レコード型を受け付けない文脈でレコードを返す関数が呼び出されました</quote>というエラーを報告することができます。）
    </para>

    <tip>
     <para>
<!--
      <function>get_call_result_type</> can resolve the actual type of a
      polymorphic function result; so it is useful in functions that return
      scalar polymorphic results, not only functions that return composites.
      The <varname>resultTypeId</> output is primarily useful for functions
      returning polymorphic scalars.
-->
<function>get_call_result_type</>は、多様性関数の結果の実際の型を解決することができます。
ですので、複合型を返す関数だけではなく、スカラの多様結果を返す関数でも有意です。
<varname>resultTypeId</>出力は主にスカラの多様結果を返す関数で有意です。
     </para>
    </tip>

    <note>
     <para>
<!--
      <function>get_call_result_type</> has a sibling
      <function>get_expr_result_type</>, which can be used to resolve the
      expected output type for a function call represented by an expression
      tree.  This can be used when trying to determine the result type from
      outside the function itself.  There is also
      <function>get_func_result_type</>, which can be used when only the
      function's OID is available.  However these functions are not able
      to deal with functions declared to return <structname>record</>, and
      <function>get_func_result_type</> cannot resolve polymorphic types,
      so you should preferentially use <function>get_call_result_type</>.
-->
<function>get_call_result_type</>は、<function>get_expr_result_type</>と似たような関数で、関数呼び出しで想定される出力型を式のツリー構造として解決します。
関数自身以外から結果型を決定したい場合に、これを使用することができます。
また、<function>get_func_result_type</>という関数もあります。
これは関数のOIDが利用できる場合にのみ使用することができます。
しかし、これらの関数は、<structname>record</>型を返すものと宣言された関数では使用できません。
また、<function>get_func_result_type</>は多様型を解決することができません。
したがって、優先して<function>get_call_result_type</>を使用すべきです。
     </para>
    </note>

    <para>
<!--
     Older, now-deprecated functions for obtaining
     <structname>TupleDesc</>s are:
-->
古く、廃止予定の<structname>TupleDesc</>を入手するための関数を以下に示します。

<programlisting>
TupleDesc RelationNameGetTupleDesc(const char *relname)
</programlisting>
<!--
     to get a <structname>TupleDesc</> for the row type of a named relation,
     and:
-->
これを指名したリレーションの行型用の<structname>TupleDesc</>を取り出すために使用してください。
また、
<programlisting>
TupleDesc TypeGetTupleDesc(Oid typeoid, List *colaliases)
</programlisting>
<!--
     to get a <structname>TupleDesc</> based on a type OID. This can
     be used to get a <structname>TupleDesc</> for a base or
     composite type.  It will not work for a function that returns
     <structname>record</>, however, and it cannot resolve polymorphic
     types.
-->
これを型のOIDに基づいて<structname>TupleDesc</>を取り出すために使用してください。
これは、基本型もしくは複合型の<structname>TupleDesc</>を取り出すために使用可能です。
これは<structname>record</>を返す関数ではうまく動作しません。
また、多様型を解決することもできません。
    </para>

    <para>
<!--
     Once you have a <structname>TupleDesc</>, call:
-->
<structname>TupleDesc</>を獲得した後に、Datumを使用する場合は以下を呼び出してください。
<programlisting>
TupleDesc BlessTupleDesc(TupleDesc tupdesc)
</programlisting>
<!--
     if you plan to work with Datums, or:
-->
C文字列を使用する場合は以下を呼び出してください。
<programlisting>
AttInMetadata *TupleDescGetAttInMetadata(TupleDesc tupdesc)
</programlisting>
<!--
     if you plan to work with C strings.  If you are writing a function
     returning set, you can save the results of these functions in the
     <structname>FuncCallContext</> structure &mdash; use the
     <structfield>tuple_desc</> or <structfield>attinmeta</> field
     respectively.
-->
集合を返す関数を作成する場合は、これらの関数の結果を<structname>FuncCallContext</>構造体に格納してください。
それぞれ<structfield>tuple_desc</>と<structfield>attinmeta</>を使用します。
    </para>

    <para>
<!--
     When working with Datums, use:
-->
Datumを使用する場合は、ユーザデータをDatum形式に格納した<structname>HeapTuple</>を構築するために以下を使用します。
<programlisting>
HeapTuple heap_form_tuple(TupleDesc tupdesc, Datum *values, bool *isnull)
</programlisting>
<!--
     to build a <structname>HeapTuple</> given user data in Datum form.
-->
    </para>

    <para>
<!--
     When working with C strings, use:
-->
C文字列を使用する場合は、ユーザデータをC文字列形式に格納した<structname>HeapTuple</>を構築するために以下を使用します。
<programlisting>
HeapTuple BuildTupleFromCStrings(AttInMetadata *attinmeta, char **values)
</programlisting>
<!--
     to build a <structname>HeapTuple</> given user data
     in C string form.  <literal>values</literal> is an array of C strings,
     one for each attribute of the return row. Each C string should be in
     the form expected by the input function of the attribute data
     type. In order to return a null value for one of the attributes,
     the corresponding pointer in the <parameter>values</> array
     should be set to <symbol>NULL</>.  This function will need to
     be called again for each row you return.
-->
<literal>values</literal>は行の各属性を1要素としたC文字列の配列です。
各C文字列は、属性のデータ型用の入力関数が受け付け可能な形式でなければなりません。
属性の値をNULL値として返すためには、<parameter>values</>配列の対応するポインタに<symbol>NULL</>を設定してください。
この関数は返す行それぞれに対して繰り返し呼び出す必要があります。
    </para>

    <para>
<!--
     Once you have built a tuple to return from your function, it
     must be converted into a <type>Datum</>. Use:
-->
関数から返すタプルを構築し終わったら、それを<type>Datum</>に変換しなければなりません。
以下を使用して、<structname>HeapTuple</>を有効なDatumに変換してください。
<programlisting>
HeapTupleGetDatum(HeapTuple tuple)
</programlisting>
<!--
     to convert a <structname>HeapTuple</> into a valid Datum.  This
     <type>Datum</> can be returned directly if you intend to return
     just a single row, or it can be used as the current return value
     in a set-returning function.
-->
単一行のみを返すのであれば、この<type>Datum</>を直接返すことができます。
さもなくば、集合を返す関数における現在の戻り値として使用することができます。
    </para>

    <para>
<!--
     An example appears in the next section.
-->
次節に例を示します。
    </para>

   </sect2>

   <sect2 id="xfunc-c-return-set">
<!--
    <title>Returning Sets</title>
-->
    <title>集合を返す</title>

    <para>
<!--
     There is also a special API that provides support for returning
     sets (multiple rows) from a C-language function.  A set-returning
     function must follow the version-1 calling conventions.  Also,
     source files must include <filename>funcapi.h</filename>, as
     above.
-->
C言語関数から集合（複数行）を返す機能のために特殊なAPIが用意されています。
集合を返す関数は、Version 1呼び出し規約に従う必要があります。
また、ソースファイルは上述の通り<filename>funcapi.h</filename>をインクルードする必要があります。
    </para>

    <para>
<!--
     A set-returning function (<acronym>SRF</>) is called
     once for each item it returns.  The <acronym>SRF</> must
     therefore save enough state to remember what it was doing and
     return the next item on each call.
     The structure <structname>FuncCallContext</> is provided to help
     control this process.  Within a function, <literal>fcinfo-&gt;flinfo-&gt;fn_extra</>
     is used to hold a pointer to <structname>FuncCallContext</>
     across calls.
-->
集合を返す関数（<acronym>SRF</>）は返される項目ごとに呼び出されます。
そのため、<acronym>SRF</>は、過去の操作を記憶して呼び出しの度に次の項目を返すために十分な状態を保っている必要があります。
この処理を制御を補助するための<structname>FuncCallContext</>構造体が備わっています。
関数内では、複数の呼び出しにまたがる<structname>FuncCallContext</>へのポインタを保持するには、<literal>fcinfo-&gt;flinfo-&gt;fn_extra</>を使用します。
<programlisting>
typedef struct
{
    /*
<!--
     * Number of times we've been called before
-->
     * 既に行われた呼び出しの回数。
     *
<!--
     * call_cntr is initialized to 0 for you by SRF_FIRSTCALL_INIT(), and
     * incremented for you every time SRF_RETURN_NEXT() is called.
-->
     * SRF_FIRSTCALL_INIT()によってcall_cntrが0に初期化され、
     * SRF_RETURN_NEXT()が呼び出される度に増分されます。
     */
    uint32 call_cntr;

    /*
<!--
     * OPTIONAL maximum number of calls
     *
     * max_calls is here for convenience only and setting it is optional.
     * If not set, you must provide alternative means to know when the
     * function is done.
-->
     * 省略可能 : 呼び出しの最大数
     *
     * max_callsは、便宜上用意されているだけで、設定は省略可能です。
     * 設定されていなければ、関数が終了したことを知るための別の方法を
     * 用意する必要があります。
     */
    uint32 max_calls;

    /*
<!--
     * OPTIONAL pointer to result slot
     *
     * This is obsolete and only present for backward compatibility, viz,
     * user-defined SRFs that use the deprecated TupleDescGetSlot().
-->
     * 省略可能 : 結果スロットへのポインタ
     * 
     * これは廃止され、後方互換性、すなわち非推奨のTupleDescGetSlot()を使用する
     * ユーザ定義のSRFのためにだけ存在します。
     */
    TupleTableSlot *slot;

    /*
<!--
     * OPTIONAL pointer to miscellaneous user-provided context information
     *
     * user_fctx is for use as a pointer to your own data to retain
     * arbitrary context information between calls of your function.
-->
     * 省略可能 : 様々なユーザによるコンテキスト情報へのポインタ
     * 
     * user_fctxは、関数の呼び出し間の任意のコンテキスト情報を
     * 取得するためのユーザ独自の構造へのポインタとして使用されます。
     */
    void *user_fctx;

    /*
<!--
     * OPTIONAL pointer to struct containing attribute type input metadata
     *
     * attinmeta is for use when returning tuples (i.e., composite data types)
     * and is not used when returning base data types. It is only needed
     * if you intend to use BuildTupleFromCStrings() to create the return
     * tuple.
-->
     * 省略可能 : 属性型入力メタ情報を含んだ構造体へのポインタ
     * 
     * attinmeta はタプル（つまり複合データ型）を返す際に使用され、
     * 基本データ型を返す場合には必要ありません。 
     * BuildTupleFromCStrings()を使用して返されるタプルを作成する場合にのみ必要です。
     */
    AttInMetadata *attinmeta;

    /*
<!--
     * memory context used for structures that must live for multiple calls
     *
     * multi_call_memory_ctx is set by SRF_FIRSTCALL_INIT() for you, and used
     * by SRF_RETURN_DONE() for cleanup. It is the most appropriate memory
     * context for any memory that is to be reused across multiple calls
     * of the SRF.
-->
     *  複数の呼び出しで必要とされる構造体に使われるメモリコンテキスト
     *
     * multi_call_memory_ctxは、SRF_FIRSTCALL_INIT()によってに設定され、
     * SRF_RETURN_DONE()がクリーンアップの際に使用します。 
     * これはSRFの複数呼び出しで再利用される全てのメモリ用に最も適切なメモリコンテキストです。
     */
    MemoryContext multi_call_memory_ctx;

    /*
<!--
     * OPTIONAL pointer to struct containing tuple description
     *
     * tuple_desc is for use when returning tuples (i.e., composite data types)
     * and is only needed if you are going to build the tuples with
     * heap_form_tuple() rather than with BuildTupleFromCStrings().  Note that
     * the TupleDesc pointer stored here should usually have been run through
     * BlessTupleDesc() first.
-->
     * 省略可能: タプル説明を含む構造体へのポインタ。
     * tuple_descはタプル（つまり複合データ型）を返す場合に使用され、BuildTupleFromCStrings()
     * ではなくheap_form_tuple()を使用してタプルを作成する場合にのみ必要です。
     * 通常ここに格納されるTupleDescは最初にBlessTupleDesc()を最初に実行したものでなければなり
     * ません。
     */
    TupleDesc tuple_desc;

} FuncCallContext;
</programlisting>
    </para>

    <para>
<!--
     An <acronym>SRF</> uses several functions and macros that
     automatically manipulate the <structname>FuncCallContext</>
     structure (and expect to find it via <literal>fn_extra</>).  Use:
-->
<acronym>SRF</>はいくつかの関数およびマクロを使用して<structname>FuncCallContext</>構造体を自動的に操作します（また<literal>fn_extra</>で検索することを想定します)。
<programlisting>
SRF_IS_FIRSTCALL()
</programlisting>
<!--
     to determine if your function is being called for the first or a
     subsequent time. On the first call (only) use:
-->
を使用して、その関数呼び出しが初回のものであるか、2回目以降であるかを判断します。
最初の呼び出し（のみ）で、
<programlisting>
SRF_FIRSTCALL_INIT()
</programlisting>
<!--
     to initialize the <structname>FuncCallContext</>. On every function call,
     including the first, use:
-->
を使用して、<structname>FuncCallContext</>を初期化します。
最初の呼び出しを含むすべての呼び出しで、
<programlisting>
SRF_PERCALL_SETUP()
</programlisting>
<!--
     to properly set up for using the <structname>FuncCallContext</>
     and clearing any previously returned data left over from the
     previous pass.
-->
を使用して、<structname>FuncCallContext</>を使用するための適切な設定を行い、以前の受け渡しから残っている結果データを消去します。
    </para>

    <para>
<!--
     If your function has data to return, use:
-->
関数で返すべきデータがある場合は、
<programlisting>
SRF_RETURN_NEXT(funcctx, result)
</programlisting>
<!--
     to return it to the caller.  (<literal>result</> must be of type
     <type>Datum</>, either a single value or a tuple prepared as
     described above.)  Finally, when your function is finished
     returning data, use:
-->
を使用して、そのデータを呼び出し側に返します。
（先に説明した通り <literal>result</>は<type>Datum</>型、つまり1つの値またはタプルである必要があります。）
最後に、関数がデータを返し終わったら、
<programlisting>
SRF_RETURN_DONE(funcctx)
</programlisting>
<!--
     to clean up and end the <acronym>SRF</>.
-->
を使用して<acronym>SRF</>を片付け、終了します。
    </para>

    <para>
<!--
     The memory context that is current when the <acronym>SRF</> is called is
     a transient context that will be cleared between calls.  This means
     that you do not need to call <function>pfree</> on everything
     you allocated using <function>palloc</>; it will go away anyway.  However, if you want to allocate
     any data structures to live across calls, you need to put them somewhere
     else.  The memory context referenced by
     <structfield>multi_call_memory_ctx</> is a suitable location for any
     data that needs to survive until the <acronym>SRF</> is finished running.  In most
     cases, this means that you should switch into
     <structfield>multi_call_memory_ctx</> while doing the first-call setup.
-->
<acronym>SRF</>の呼び出し時に現行になっているメモリコンテキストは一時的なコンテキストで、各呼び出しの間に消去されます。
つまり<function>palloc</>を使用して割り当てたもののすべてを<function>pfree</>する必要はありません。
これらはいずれ消去されるものだからです。
しかし、データ構造体を複数の呼び出しに渡って使用するように割り当てる場合は、どこか別の場所に置いておく必要があります。
<structfield>multi_call_memory_ctx</>によって参照されるメモリコンテキストは、<acronym>SRF</>の実行が終わるまで使用可能にしなければならないデータの保管場所として適しています。
つまり、ほとんどの場合、最初の呼び出しのセットアップ中に<structfield>multi_call_memory_ctx</>へ切り替える必要があるということです。
    </para>

    <para>
<!--
     A complete pseudo-code example looks like the following:
-->
     完全な疑似コードの例を示します。
<programlisting>
Datum
my_set_returning_function(PG_FUNCTION_ARGS)
{
    FuncCallContext  *funcctx;
    Datum             result;
    <replaceable>further declarations as needed</replaceable>

    if (SRF_IS_FIRSTCALL())
    {
        MemoryContext oldcontext;

        funcctx = SRF_FIRSTCALL_INIT();
        oldcontext = MemoryContextSwitchTo(funcctx-&gt;multi_call_memory_ctx);
<!--
        /* One-time setup code appears here: */
-->
        /* 一度限りのセットアップコードがここに入ります: */
        <replaceable>user code</replaceable>
        <replaceable>if returning composite</replaceable>
            <replaceable>build TupleDesc, and perhaps AttInMetadata</replaceable>
        <replaceable>endif returning composite</replaceable>
        <replaceable>user code</replaceable>
        MemoryContextSwitchTo(oldcontext);
    }

<!--
    /* Each-time setup code appears here: */
-->
    /* 毎回実行するセットアップコードがここに入ります: */
    <replaceable>user code</replaceable>
    funcctx = SRF_PERCALL_SETUP();
    <replaceable>user code</replaceable>

<!--
    /* this is just one way we might test whether we are done: */
-->
    /* これは、終了したかどうかをテストする方法の1つです: */
    if (funcctx-&gt;call_cntr &lt; funcctx-&gt;max_calls)
    {
<!--
        /* Here we want to return another item: */
-->
        /* ここで、別の項目を返します: */
        <replaceable>user code</replaceable>
        <replaceable>obtain result Datum</replaceable>
        SRF_RETURN_NEXT(funcctx, result);
    }
    else
    {
<!--
        /* Here we are done returning items and just need to clean up: */
-->
        /* これで項目を返し終わりました。 後はクリーンアップするだけです。 */
        <replaceable>user code</replaceable>
        SRF_RETURN_DONE(funcctx);
    }
}
</programlisting>
    </para>

    <para>
<!--
     A complete example of a simple <acronym>SRF</> returning a composite type
     looks like:
-->
複合型を返す単純な<acronym>SRF</>の完全な例は以下の通りです。

<programlisting><![CDATA[
PG_FUNCTION_INFO_V1(retcomposite);

Datum
retcomposite(PG_FUNCTION_ARGS)
{
    FuncCallContext     *funcctx;
    int                  call_cntr;
    int                  max_calls;
    TupleDesc            tupdesc;
    AttInMetadata       *attinmeta;

]]><!--
    /* stuff done only on the first call of the function */
--><![CDATA[
     /* 関数の最初の呼び出し時にのみ実行 */
    if (SRF_IS_FIRSTCALL())
    {
        MemoryContext   oldcontext;

]]><!--
        /* create a function context for cross-call persistence */
--><![CDATA[
        /* 呼び出し間で永続化する関数コンテキストを作成 */
        funcctx = SRF_FIRSTCALL_INIT();

]]><!--
        /* switch to memory context appropriate for multiple function calls */
--><![CDATA[
        /* 複数関数呼び出しに適切なメモリコンテキストへの切り替え */
        oldcontext = MemoryContextSwitchTo(funcctx->multi_call_memory_ctx);

]]><!--
        /* total number of tuples to be returned */
--><![CDATA[
        /* 返されるタプルの合計数 */
        funcctx->max_calls = PG_GETARG_UINT32(0);

]]><!--
        /* Build a tuple descriptor for our result type */
--><![CDATA[
        /*  結果型用のタプル記述子を作成 */
        if (get_call_result_type(fcinfo, NULL, &tupdesc) != TYPEFUNC_COMPOSITE)
            ereport(ERROR,
                    (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                     errmsg("function returning record called in context "
                            "that cannot accept type record")));

        /*
]]><!--
         * generate attribute metadata needed later to produce tuples from raw
         * C strings
--><![CDATA[
         * 後で未加工のC文字列からタプルを作成するために必要となる
         * 属性メタデータの生成
         */
        attinmeta = TupleDescGetAttInMetadata(tupdesc);
        funcctx->attinmeta = attinmeta;

        MemoryContextSwitchTo(oldcontext);
    }

]]><!--
    /* stuff done on every call of the function */
--><![CDATA[
    /* 全ての関数呼び出しで実行 */
    funcctx = SRF_PERCALL_SETUP();

    call_cntr = funcctx->call_cntr;
    max_calls = funcctx->max_calls;
    attinmeta = funcctx->attinmeta;

]]><!--
    if (call_cntr < max_calls)    /* do when there is more left to send */
--><![CDATA[
    if (call_cntr < max_calls)    /* 他にも送るものがある場合  */
    {
        char       **values;
        HeapTuple    tuple;
        Datum        result;

        /*
]]><!--
         * Prepare a values array for building the returned tuple.
         * This should be an array of C strings which will
         * be processed later by the type input functions.
--><![CDATA[
         * 返すタプルを構築するためのvalues配列を用意します。
         * これは、後で適切な入力関数で処理される
         * C文字列の配列でなければなりません。
         */
        values = (char **) palloc(3 * sizeof(char *));
        values[0] = (char *) palloc(16 * sizeof(char));
        values[1] = (char *) palloc(16 * sizeof(char));
        values[2] = (char *) palloc(16 * sizeof(char));

        snprintf(values[0], 16, "%d", 1 * PG_GETARG_INT32(1));
        snprintf(values[1], 16, "%d", 2 * PG_GETARG_INT32(1));
        snprintf(values[2], 16, "%d", 3 * PG_GETARG_INT32(1));

]]><!--
        /* build a tuple */
--><![CDATA[
        /* タプルの作成 */
        tuple = BuildTupleFromCStrings(attinmeta, values);

]]><!--
        /* make the tuple into a datum */
--><![CDATA[
        /* タプルをdatumに変換 */
        result = HeapTupleGetDatum(tuple);

]]><!--
        /* clean up (this is not really necessary) */
--><![CDATA[
        /* クリーンアップ（これは必須ではありません） */
        pfree(values[0]);
        pfree(values[1]);
        pfree(values[2]);
        pfree(values);

        SRF_RETURN_NEXT(funcctx, result);
    }
]]><!--
    else    /* do when there is no more left */
--><![CDATA[
    else    /* 何も残っていない場合 */
    {
        SRF_RETURN_DONE(funcctx);
    }
}
]]>
</programlisting>

<!--
     One way to declare this function in SQL is:
-->
以下にこの関数をSQLで宣言する一例を示します。
<programlisting>
CREATE TYPE __retcomposite AS (f1 integer, f2 integer, f3 integer);

CREATE OR REPLACE FUNCTION retcomposite(integer, integer)
    RETURNS SETOF __retcomposite
    AS '<replaceable>filename</>', 'retcomposite'
    LANGUAGE C IMMUTABLE STRICT;
</programlisting>
<!--
     A different way is to use OUT parameters:
-->
他にも以下のようにOUTパラメータを使用する方法もあります。
<programlisting>
CREATE OR REPLACE FUNCTION retcomposite(IN integer, IN integer,
    OUT f1 integer, OUT f2 integer, OUT f3 integer)
    RETURNS SETOF record
    AS '<replaceable>filename</>', 'retcomposite'
    LANGUAGE C IMMUTABLE STRICT;
</programlisting>
<!--
     Notice that in this method the output type of the function is formally
     an anonymous <structname>record</> type.
-->
この方法では、関数の出力型は形式上無名の<structname>record</>型になることに注意してください。
    </para>

    <para>
<!--
     The directory <link linkend="tablefunc">contrib/tablefunc</>
     module in the source distribution contains more examples of
     set-returning functions.
-->
ソース配布物内の<link linkend="tablefunc">contrib/tablefunc</>モジュールのディレクトリには、集合を返す関数のより多くの例があります。
    </para>
   </sect2>

   <sect2>
<!--
    <title>Polymorphic Arguments and Return Types</title>
-->
    <title>引数と戻り値の多様性</title>

    <para>
<!--
     C-language functions can be declared to accept and
     return the polymorphic types
     <type>anyelement</type>, <type>anyarray</type>, <type>anynonarray</type>,
     <type>anyenum</type>, and <type>anyrange</type>.
     See <xref linkend="extend-types-polymorphic"> for a more detailed explanation
     of polymorphic functions. When function arguments or return types
     are defined as polymorphic types, the function author cannot know
     in advance what data type it will be called with, or
     need to return. There are two routines provided in <filename>fmgr.h</>
     to allow a version-1 C function to discover the actual data types
     of its arguments and the type it is expected to return. The routines are
     called <literal>get_fn_expr_rettype(FmgrInfo *flinfo)</> and
     <literal>get_fn_expr_argtype(FmgrInfo *flinfo, int argnum)</>.
     They return the result or argument type OID, or <symbol>InvalidOid</symbol> if the
     information is not available.
     The structure <literal>flinfo</> is normally accessed as
     <literal>fcinfo-&gt;flinfo</>. The parameter <literal>argnum</>
     is zero based.  <function>get_call_result_type</> can also be used
     as an alternative to <function>get_fn_expr_rettype</>.
     There is also <function>get_fn_expr_variadic</>, which can be used to
     find out whether variadic arguments have been merged into an array.
     This is primarily useful for <literal>VARIADIC "any"</> functions,
     since such merging will always have occurred for variadic functions
     taking ordinary array types.
-->
C言語関数は、<type>anyelement</type>、<type>anyarray</type>、<type>anynonarray</type>、<type>anyenum</type>および<type>anyrange</type>多様型を受け付ける、または返すように宣言することができます。
多様関数の詳細な説明は<xref linkend="extend-types-polymorphic">を参照してください。
関数の引数もしくは戻り値が多様型として定義される時、関数の作成者は前もって呼び出しにおけるデータ型や返すべきデータ型が何であるかを知ることはできません。
Version-1 C関数で引数の実データ型と、返すべきと想定された型を発見できるための2つのルーチンが<filename>fmgr.h</>に用意されています。
このルーチンは<literal>get_fn_expr_rettype(FmgrInfo *flinfo)</>と<literal>get_fn_expr_argtype(FmgrInfo *flinfo, int argnum)</>という名前です。
これらは結果もしくは引数型のOIDを返します。
ただし、もし情報が利用できなければ<symbol>InvalidOid</symbol>を返します。
<literal>flinfo</>構造体は通常<literal>fcinfo-&gt;flinfo</>としてアクセスされます。
<literal>argnum</>パラメータは0から始まります。
また、<function>get_fn_expr_rettype</>の代わりに<function>get_call_result_type</>を使用することもできます。
また、variadic変数が配列に吸収されたかどうかを判定するために使用できる<function>get_fn_expr_variadic</>があります。
そのような吸収はvariadic関数が普通の配列型をとる場合に必ず起こりますので、これは特に<literal>VARIADIC "any"</>の場合に有用です。
    </para>

    <para>
<!--
     For example, suppose we want to write a function to accept a single
     element of any type, and return a one-dimensional array of that type:
-->
例えば、任意の型の単一要素を受け付け、その型の1次元配列を返す関数を考えてみます。

<programlisting>
PG_FUNCTION_INFO_V1(make_array);
Datum
make_array(PG_FUNCTION_ARGS)
{
    ArrayType  *result;
    Oid         element_type = get_fn_expr_argtype(fcinfo-&gt;flinfo, 0);
    Datum       element;
    bool        isnull;
    int16       typlen;
    bool        typbyval;
    char        typalign;
    int         ndims;
    int         dims[MAXDIM];
    int         lbs[MAXDIM];

    if (!OidIsValid(element_type))
        elog(ERROR, "could not determine data type of input");

<!--
    /* get the provided element, being careful in case it's NULL */
-->
    /* 与えられた要素がNULLかどうか注意しつつ、要素を取り出します。*/
    isnull = PG_ARGISNULL(0);
    if (isnull)
        element = (Datum) 0;
    else
        element = PG_GETARG_DATUM(0);

<!--
    /* we have one dimension */
-->
    /* 次元数は1 */
    ndims = 1;
<!--
    /* and one element */
-->
    /* 要素を1つ */
    dims[0] = 1;
<!--
    /* and lower bound is 1 */
-->
    /* 下限は1 */
    lbs[0] = 1;

<!--
    /* get required info about the element type */
-->
    /* この要素型に関する必要情報を取り出す。 */
    get_typlenbyvalalign(element_type, &amp;typlen, &amp;typbyval, &amp;typalign);

<!--
    /* now build the array */
-->
    /* ここで配列を作成 */
    result = construct_md_array(&amp;element, &amp;isnull, ndims, dims, lbs,
                                element_type, typlen, typbyval, typalign);

    PG_RETURN_ARRAYTYPE_P(result);
}
</programlisting>
    </para>

    <para>
<!--
     The following command declares the function
     <function>make_array</function> in SQL:
-->
以下のコマンドはSQLで<function>make_array</function>関数を宣言します。

<programlisting>
CREATE FUNCTION make_array(anyelement) RETURNS anyarray
    AS '<replaceable>DIRECTORY</replaceable>/funcs', 'make_array'
    LANGUAGE C IMMUTABLE;
</programlisting>

    </para>

    <para>
<!--
     There is a variant of polymorphism that is only available to C-language
     functions: they can be declared to take parameters of type
     <literal>"any"</>.  (Note that this type name must be double-quoted,
     since it's also a SQL reserved word.)  This works like
     <type>anyelement</> except that it does not constrain different
     <literal>"any"</> arguments to be the same type, nor do they help
     determine the function's result type.  A C-language function can also
     declare its final parameter to be <literal>VARIADIC "any"</>.  This will
     match one or more actual arguments of any type (not necessarily the same
     type).  These arguments will <emphasis>not</> be gathered into an array
     as happens with normal variadic functions; they will just be passed to
     the function separately.  The <function>PG_NARGS()</> macro and the
     methods described above must be used to determine the number of actual
     arguments and their types when using this feature.  Also, users of such
     a function might wish to use the <literal>VARIADIC</> keyword in their
     function call, with the expectation that the function would treat the
     array elements as separate arguments.  The function itself must implement
     that behavior if wanted, after using <function>get_fn_expr_variadic</> to
     detect that the actual argument was marked with <literal>VARIADIC</>.
-->
C言語関数でのみ使用できる多様性の変異体があります。
<literal>"any"</>型のパラメータを取るように宣言できます。
（この型名は、SQL予約語でもあるため二重引用符で括らなくてはならないことに注意してください。）
これは、他の<literal>"any"</>引数が同じ型になることを強要することも、関数の結果型の決定を支援することもない点を除いて、<type>anyelement</>のように動作します。
C言語関数は最終パラメータが<literal>VARIADIC "any"</>であるように宣言可能です。
これは任意の型の１つ以上の実引数と一致します（同じ型である必要はありません）。
これらの引数は、通常のvariadic関数で起こったように、配列の中にまとめ<emphasis>られません</>。
それらは単に別々に関数に渡されるだけです。
<function>PG_NARGS()</>マクロと上に記載したメソッドは、この機能を使用するときに実際の引数とその型を決定するため使用されなければなりません。
また、こうした関数のユーザは、その関数呼び出しにおいて、関数が配列要素を分離した引数として扱うだろうという予想のもとで<literal>VARIADIC</>キーワードを良く使用するかもしれません。
関数自身は必要ならば、<function>get_fn_expr_variadic</>を実行した後で、実引数が<literal>VARIADIC</>付きであることを検出した場合に、その動作を実装しなければなりません。
    </para>
   </sect2>

   <sect2 id="xfunc-transform-functions">
<!--
    <title>Transform Functions</title>
-->
    <title>変形関数</title>

    <para>
<!--
     Some function calls can be simplified during planning based on
     properties specific to the function.  For example,
     <literal>int4mul(n, 1)</> could be simplified to just <literal>n</>.
     To define such function-specific optimizations, write a
     <firstterm>transform function</> and place its OID in the
     <structfield>protransform</> field of the primary function's
     <structname>pg_proc</> entry.  The transform function must have the SQL
     signature <literal>protransform(internal) RETURNS internal</>.  The
     argument, actually <type>FuncExpr *</>, is a dummy node representing a
     call to the primary function.  If the transform function's study of the
     expression tree proves that a simplified expression tree can substitute
     for all possible concrete calls represented thereby, build and return
     that simplified expression.  Otherwise, return a <literal>NULL</>
     pointer (<emphasis>not</> a SQL null).
-->
一部の関数呼び出しでは、関数固有の属性に基づいて計画作成を単純化できます。
例えば、<literal>int4mul(n, 1)</>は<literal>n</>だけに単純化することができます。
こうした関数固有の最適化を定義するためには、<firstterm>変形関数</>を作成し、そのOIDを主関数の<structname>pg_proc</>項目の<structfield>protransform</>フィールドに格納します。
変形関数は<literal>protransform(internal) RETURNS internal</>というSQLシグネチャを持たなければなりません。
引数、実際は<type>FuncExpr *</>は、主関数の呼び出しを表すダミーノードです。
変形関数の式ツリー学習によって、式ツリーで表されるすべての可能性がある実際の呼び出しを単純化した式ツリーで置き換えられることが証明された場合、単純化した式を構築し返します。
さもなければ、(SQLのNULLでは<emphasis>なく</>)<literal>NULL</>ポインタを返します。
    </para>

    <para>
<!--
     We make no guarantee that <productname>PostgreSQL</> will never call the
     primary function in cases that the transform function could simplify.
     Ensure rigorous equivalence between the simplified expression and an
     actual call to the primary function.
-->
<productname>PostgreSQL</>が変形関数によって単純化できる場合に主関数を呼び出さないことは保証されません。
単純化した式と実際の主関数の呼び出しとで、厳密に等価であることを確実にしてください。
    </para>

    <para>
<!--
     Currently, this facility is not exposed to users at the SQL level
     because of security concerns, so it is only practical to use for
     optimizing built-in functions.
-->
現在、セキュリティ上の懸念から、この機能がSQLレベルでユーザに見えることはありません。
このため、これは組み込み関数の最適化での使用のみで実用的です。
    </para>
   </sect2>

   <sect2>
<!--
    <title>Shared Memory and LWLocks</title>
--> 
    <title>共有メモリとLWLocks</title>


    <para>
<!--
     Add-ins can reserve LWLocks and an allocation of shared memory on server
     startup.  The add-in's shared library must be preloaded by specifying
     it in
     <xref linkend="guc-shared-preload-libraries"><indexterm><primary>shared_preload_libraries</></>.
     Shared memory is reserved by calling:
-->
アドインはLWLocks（軽量ロック）とサーバ起動時に共有メモリの割り当てを保持することができます。
<xref linkend="guc-shared-preload-libraries"><indexterm><primary>shared_preload_libraries</></>で指定して、こうしたアドインの共有ライブラリを事前にロードしなければなりません。
共有メモリは、その<function>_PG_init</>関数で以下を呼び出すことで保持されます。

<programlisting>
void RequestAddinShmemSpace(int size)
</programlisting>
<!--
     from your <function>_PG_init</> function.
-->
    </para>
    <para>
<!--
     LWLocks are reserved by calling:
-->
LWLocksはその<function>_PG_init</>関数で以下を呼び出すことで保持されます。
<programlisting>
void RequestAddinLWLocks(int n)
</programlisting>
<!--
     from <function>_PG_init</>.
-->
    </para>
    <para>
<!--
     To avoid possible race-conditions, each backend should use the LWLock
     <function>AddinShmemInitLock</> when connecting to and initializing
     its allocation of shared memory, as shown here:
-->
競合状態の可能性を防止するために、割り当てられた共有メモリへの接続やその初期化時に、以下のように各バックエンドで<function>AddinShmemInitLock</>軽量ロックを使用しなければなりません。
<programlisting>
static mystruct *ptr = NULL;

if (!ptr)
{
        bool    found;

        LWLockAcquire(AddinShmemInitLock, LW_EXCLUSIVE);
        ptr = ShmemInitStruct("my struct name", size, &amp;found);
        if (!found)
        {
                initialize contents of shmem area;
                acquire any requested LWLocks using:
                ptr->mylockid = LWLockAssign();
        }
        LWLockRelease(AddinShmemInitLock);
}
</programlisting>
    </para>
   </sect2>

   <sect2 id="extend-Cpp">
<!--
    <title>Using C++ for Extensibility</title>
-->
    <title>拡張へのC++の利用</title>

    <indexterm zone="extend-Cpp">
     <primary>C++</primary>
    </indexterm>

    <para>
<!--
     Although the <productname>PostgreSQL</productname> backend is written in
     C, it is possible to write extensions in C++ if these guidelines are
     followed:
-->
以下のガイドラインに従うことで、<productname>PostgreSQL</productname>の拡張を構築するためC++モードのコンパイラを利用できます。

     <itemizedlist>
      <listitem>
       <para>
<!--
         All functions accessed by the backend must present a C interface
         to the backend;  these C functions can then call C++ functions.
         For example, <literal>extern C</> linkage is required for
         backend-accessed functions.  This is also necessary for any
         functions that are passed as pointers between the backend and
         C++ code.
-->
バックエンドからアクセスされる関数はすべてバックエンドに対してCインタフェースを提供しなければなりません。
このC関数はC++関数を呼びだすことができます。
例えば、バックエンドからアクセスされる関数には<literal>extern C</>リンクが必要です。
これはバックエンドとC++コードの間でポインタとして渡される関数にも必要です。
       </para>
      </listitem>
      <listitem>
       <para>
<!--
        Free memory using the appropriate deallocation method.  For example,
        most backend memory is allocated using <function>palloc()</>, so use
        <function>pfree()</> to free it.  Using C++
        <function>delete</> in such cases will fail.
-->
適切な解放メソッドを使ってメモリを解放してください。
例えば、ほとんどのバックエンドメモリは<function>palloc()</>で確保されますので、<function>pfree()</>を使って解放してください。
この場合にC++の<function>delete()</>を使うと失敗するでしょう。
       </para>
      </listitem>
      <listitem>
       <para>
<!--
        Prevent exceptions from propagating into the C code (use a catch-all
        block at the top level of all <literal>extern C</> functions).  This
        is necessary even if the C++ code does not explicitly throw any
        exceptions, because events like out-of-memory can still throw
        exceptions.  Any exceptions must be caught and appropriate errors
        passed back to the C interface.  If possible, compile C++ with
        <option>-fno-exceptions</> to eliminate exceptions entirely; in such
        cases, you must check for failures in your C++ code, e.g.  check for
        NULL returned by <function>new()</>.
-->
例外がCコードへ伝播しないようにしてください（<literal>extern C</>関数すべての最上位ですべての例外を捕捉するブロックを使ってください）。
メモリ不足のようなイベントにより例外が発生する可能性がありますので、C++コードが何も例外を発生させない場合であっても、これは必要です。
例外はすべて捕捉しなければなりません。
そして適切なエラーをCインタフェースに渡してください。
可能であれば、例外を完全に除去できるように<option>-fno-exceptions</>を付けてC++をコンパイルしてください。
その場合、例えば<function>new()</>で返されるNULLの検査など、C++コード内で失敗の検査を行わなければなりません。
       </para>
      </listitem>
      <listitem>
       <para>
<!--
        If calling backend functions from C++ code, be sure that the
        C++ call stack contains only plain old data structures
        (<acronym>POD</>).  This is necessary because backend errors
        generate a distant <function>longjmp()</> that does not properly
        unroll a C++ call stack with non-POD objects.
-->
C++コードからバックエンド関数を呼び出す場合には、C++呼び出しスタック内にC言語互換構造体（<acronym>POD</>）のみが含まれていることを確認してください。
バックエンドのエラーは、非PODオブジェクトを持つC++呼び出しスタックを適切に戻すことができない、長距離<function>longjmp()</>を生成しますので、これは必要です。
       </para>
      </listitem>
     </itemizedlist>
    </para>

    <para>
<!--
     In summary, it is best to place C++ code behind a wall of
     <literal>extern C</> functions that interface to the backend,
     and avoid exception, memory, and call stack leakage.
-->
まとめると、バックエンドとやりとりするための壁の役割を担う<literal>extern C</>関数の背後にC++コードを配置して、例外、メモリ、呼び出しスタックそれぞれの漏れを避けるのが最善です。
    </para>
   </sect2>

  </sect1>
