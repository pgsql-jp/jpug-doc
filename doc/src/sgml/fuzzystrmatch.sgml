<!-- doc/src/sgml/fuzzystrmatch.sgml -->

<sect1 id="fuzzystrmatch" xreflabel="fuzzystrmatch">
 <title>fuzzystrmatch</title>

 <indexterm zone="fuzzystrmatch">
  <primary>fuzzystrmatch</primary>
 </indexterm>

 <para>
<!--
  The <filename>fuzzystrmatch</> module provides several
  functions to determine similarities and distance between strings.
-->
<filename>fuzzystrmatch</>モジュールは、文字列間の類似度や相違度を決める複数の関数を提供します。
 </para>

 <caution>
  <para>
<!--
   At present, the <function>soundex</>, <function>metaphone</>,
   <function>dmetaphone</>, and <function>dmetaphone_alt</> functions do
   not work well with multibyte encodings (such as UTF-8).
-->
現時点で、<function>soundex</>、<function>metaphone</>、<function>dmetaphone</>、<function>dmetaphone_alt</>は（UTF-8のような）マルチバイト符号化方式では充分に動作しません。
  </para>
 </caution>

 <sect2>
  <title>Soundex</title>

  <para>
<!--
   The Soundex system is a method of matching similar-sounding names
   by converting them to the same code.  It was initially used by the
   United States Census in 1880, 1900, and 1910.  Note that Soundex
   is not very useful for non-English names.
-->
Soundexシステムは、同一コードに変換することで似ているように見える名称を一致させる手法です。
これは、1880年、1900年、1910年の米国国勢調査で初めて使用されました。
Soundexは非英語圏の名称では特に有用なものではないことに注意してください。
  </para>

  <para>
<!--
   The <filename>fuzzystrmatch</> module provides two functions
   for working with Soundex codes:
-->
<filename>fuzzystrmatch</>はSoundexコードを使用して動作する2つの関数を提供します。
  </para>

  <indexterm>
   <primary>soundex</primary>
  </indexterm>

  <indexterm>
   <primary>difference</primary>
  </indexterm>

<synopsis>
soundex(text) returns text
difference(text, text) returns int
</synopsis>

  <para>
<!--
   The <function>soundex</> function converts a string to its Soundex code.
   The <function>difference</> function converts two strings to their Soundex
   codes and then reports the number of matching code positions.  Since
   Soundex codes have four characters, the result ranges from zero to four,
   with zero being no match and four being an exact match.  (Thus, the
   function is misnamed &mdash; <function>similarity</> would have been
   a better name.)
-->
<function>soundex</>関数は文字列をSoundexコードに変換します。
<function>difference</>関数は2つの文字列をそのSoundexコードに変換し、コード位置が一致する個数を報告します。
Soundexコードは4文字からなりますので、結果は0から4までの範囲になります。
0はまったく一致しないことを、4は完全に一致することを示します。
（したがってこの関数の名前は間違っています。<function>similarity</>の方がより優れた名前だったかもしれません。）
  </para>

  <para>
<!--
   Here are some usage examples:
-->
以下に使用例をいくつか示します。
  </para>

<programlisting>
SELECT soundex('hello world!');

SELECT soundex('Anne'), soundex('Ann'), difference('Anne', 'Ann');
SELECT soundex('Anne'), soundex('Andrew'), difference('Anne', 'Andrew');
SELECT soundex('Anne'), soundex('Margaret'), difference('Anne', 'Margaret');

CREATE TABLE s (nm text);

INSERT INTO s VALUES ('john');
INSERT INTO s VALUES ('joan');
INSERT INTO s VALUES ('wobbly');
INSERT INTO s VALUES ('jack');

SELECT * FROM s WHERE soundex(nm) = soundex('john');

SELECT * FROM s WHERE difference(s.nm, 'john') &gt; 2;
</programlisting>
 </sect2>

 <sect2>
<!--
  <title>Levenshtein</title>
-->
  <title>レーベンシュタイン</title>

  <para>
<!--
   This function calculates the Levenshtein distance between two strings:
-->
この関数は2つの文字列間のレーベンシュタイン距離を計算します。
  </para>

  <indexterm>
   <primary>levenshtein</primary>
  </indexterm>

  <indexterm>
   <primary>levenshtein_less_equal</primary>
  </indexterm>

<synopsis>
levenshtein(text source, text target, int ins_cost, int del_cost, int sub_cost) returns int
levenshtein(text source, text target) returns int
levenshtein_less_equal(text source, text target, int ins_cost, int del_cost, int sub_cost, int max_d) returns int
levenshtein_less_equal(text source, text target, int max_d) returns int
</synopsis>

  <para>
<!--
   Both <literal>source</literal> and <literal>target</literal> can be any
   non-null string, with a maximum of 255 bytes.  The cost parameters
   specify how much to charge for a character insertion, deletion, or
   substitution, respectively.  You can omit the cost parameters, as in
   the second version of the function; in that case they all default to 1.
   <literal>levenshtein_less_equal</literal> is accelerated version of
   levenshtein function for low values of distance. If actual distance
   is less or equal then max_d, then <literal>levenshtein_less_equal</literal>
   returns accurate value of it. Otherwise this function returns value
   which is greater than max_d.
-->
<literal>source</literal>および<literal>target</literal>は255バイトまでの任意の非NULL文字列を取ることができます。
コストパラメータはそれぞれ、文字の挿入、削除、置換に負わせる文字数を指定します。
この関数の2番目のバージョンのようにコストパラメータを省略することができます。
この場合デフォルトですべて1になります。
<literal>levenshtein_less_equal</literal>は距離の小さい値についてのlevenshtein関数の高速化版です。
実際の距離がmax_dより小さいまたは等しい場合、<literal>levenshtein_less_equal</literal>はその正確な値を返します。
さもなくば、この関数はmax_dより大きな値を返します。
  </para>

  <para>
<!--
   Examples:
-->
以下に例を示します。
  </para>

<screen>
test=# SELECT levenshtein('GUMBO', 'GAMBOL');
 levenshtein
-------------
           2
(1 row)

test=# SELECT levenshtein('GUMBO', 'GAMBOL', 2,1,1);
 levenshtein
-------------
           3
(1 row)

test=# SELECT levenshtein_less_equal('extensive', 'exhaustive',2);
 levenshtein_less_equal
------------------------
                      3
(1 row)

test=# SELECT levenshtein_less_equal('extensive', 'exhaustive',4);
 levenshtein_less_equal
------------------------
                      4
(1 row)
</screen>
 </sect2>

 <sect2>
  <title>Metaphone</title>

  <para>
<!--
   Metaphone, like Soundex, is based on the idea of constructing a
   representative code for an input string.  Two strings are then
   deemed similar if they have the same codes.
-->
Metaphoneは、Soundex同様、入力文字に対する対応するコードを構築するという考えに基づいたものです。
2つの文字列が同一コードを持つ場合、類似とみなされます。
  </para>

  <para>
<!--
   This function calculates the metaphone code of an input string:
-->
以下の関数は入力文字列に対するmetaphoneコードを計算します。
  </para>

  <indexterm>
   <primary>metaphone</primary>
  </indexterm>

<synopsis>
metaphone(text source, int max_output_length) returns text
</synopsis>

  <para>
<!--
   <literal>source</literal> has to be a non-null string with a maximum of
   255 characters.  <literal>max_output_length</literal> sets the maximum
   length of the output metaphone code; if longer, the output is truncated
   to this length.
-->
<literal>source</literal>は255文字までの非NULL文字列を取ることができます。
<literal>max_output_length</literal>は出力metaphoneコードの最大長を設定します。
出力は長すぎるとこの長さに切り詰められます。
  </para>

  <para>
<!--
   Example:
-->
以下に例を示します。
  </para>

<screen>
test=# SELECT metaphone('GUMBO', 4);
 metaphone
-----------
 KM
(1 row)
</screen>
 </sect2>

 <sect2>
  <title>Double Metaphone</title>

  <para>
<!--
   The Double Metaphone system computes two <quote>sounds like</> strings
   for a given input string &mdash; a <quote>primary</> and an
   <quote>alternate</>.  In most cases they are the same, but for non-English
   names especially they can be a bit different, depending on pronunciation.
   These functions compute the primary and alternate codes:
-->
Double Metaphoneシステムは与えられた入力文字列に対する、<quote>primary</>と<quote>alternate</>という2つの<quote>似たように見える</>文字列を計算します。
ほとんどの場合、これらは同じですが、英語以外の名称では特に発音に応じて多少異なる場合があります。
以下の関数はprimaryコードとalternateコードを計算します。
  </para>

  <indexterm>
   <primary>dmetaphone</primary>
  </indexterm>

  <indexterm>
   <primary>dmetaphone_alt</primary>
  </indexterm>

<synopsis>
dmetaphone(text source) returns text
dmetaphone_alt(text source) returns text
</synopsis>

  <para>
<!--
   There is no length limit on the input strings.
-->
入力文字列長に関する制限はありません。
  </para>

  <para>
<!--
   Example:
-->
以下に例を示します。
  </para>

<screen>
test=# select dmetaphone('gumbo');
 dmetaphone
------------
 KMP
(1 row)
</screen>
 </sect2>

</sect1>
