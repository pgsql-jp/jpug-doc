<!-- doc/src/sgml/cube.sgml -->

<sect1 id="cube" xreflabel="cube">
 <title>cube</title>

 <indexterm zone="cube">
<!--
  <primary>cube (extension)</primary>
-->
  <primary>cube (拡張)</primary>
 </indexterm>

 <para>
<!--
  This module implements a data type <type>cube</> for
  representing multidimensional cubes.
-->
本モジュールは、多次元立体を表すための<type>cube</>データ型を実装します。
 </para>

 <sect2>
<!--
  <title>Syntax</title>
-->
  <title>構文</title>

  <para>
<!--
   <xref linkend="cube-repr-table"> shows the valid external
   representations for the <type>cube</>
   type.  <replaceable>x</>, <replaceable>y</>, etc. denote
   floating-point numbers.
-->
<xref linkend="cube-repr-table">は<type>cube</>型で有効な外部表現を示します。
<replaceable>x</>、<replaceable>y</>などは浮動小数点数を意味します。
  </para>

  <table id="cube-repr-table">
<!--
   <title>Cube External Representations</title>
-->
   <title>cubeの外部表現</title>
   <tgroup cols="2">
    <thead>
     <row>
<!--
      <entry>External Syntax</entry>
-->
      <entry>外部構文</entry>
<!--
      <entry>Meaning</entry>
-->
      <entry>意味</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal><replaceable>x</></literal></entry>
<!--
      <entry>A one-dimensional point
       (or, zero-length one-dimensional interval)
-->
      <entry>
1次元の点。（または幅ゼロの一次元間隔）
      </entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x</>)</literal></entry>
<!--
      <entry>Same as above</entry>
-->
      <entry>同上</entry>
     </row>
     <row>
      <entry><literal><replaceable>x1</>,<replaceable>x2</>,...,<replaceable>xn</></literal></entry>
<!--
      <entry>A point in n-dimensional space, represented internally as a
      zero-volume cube
-->
      <entry>
n次元空間の点。
内部的には体積0の立方体として表されます。
      </entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x1</>,<replaceable>x2</>,...,<replaceable>xn</>)</literal></entry>
<!--
      <entry>Same as above</entry>
-->
      <entry>同上</entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x</>),(<replaceable>y</>)</literal></entry>
<!--
      <entry>A one-dimensional interval starting at <replaceable>x</> and ending at <replaceable>y</> or vice versa; the
       order does not matter
-->
      <entry>
<replaceable>x</>から<replaceable>y</>まで（またはその逆）の1次元の間隔。
順序は関係ありません。
      </entry>
     </row>
     <row>
      <entry><literal>[(<replaceable>x</>),(<replaceable>y</>)]</literal></entry>
<!--
      <entry>Same as above</entry>
-->
      <entry>同上</entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x1</>,...,<replaceable>xn</>),(<replaceable>y1</>,...,<replaceable>yn</>)</literal></entry>
<!--
      <entry>An n-dimensional cube represented by a pair of its diagonally
       opposite corners
-->
      <entry>
対角の組み合わせで表されるn次元の立体。
      </entry>
     </row>
     <row>
      <entry><literal>[(<replaceable>x1</>,...,<replaceable>xn</>),(<replaceable>y1</>,...,<replaceable>yn</>)]</literal></entry>
<!--
      <entry>Same as above</entry>
-->
      <entry>同上</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   It does not matter which order the opposite corners of a cube are
   entered in.  The <type>cube</> functions
   automatically swap values if needed to create a uniform
   <quote>lower left &mdash; upper right</> internal representation.
   When the corners coincide, <type>cube</> stores only one corner
   along with an <quote>is point</> flag to avoid wasting space.
-->
立体の対角の入力順序は関係ありません。
統一的な<quote>左下 &mdash; 右上</>という内部表現を作成するために必要ならば、<type>cube</>関数は自動的に値を交換します。
角が一致する場合、<type>cube</>型には無駄を省くために、<quote>点である</>フラグを加えた一つの角のみ格納されます。
  </para>

  <para>
<!--
   White space is ignored on input, so
   <literal>[(<replaceable>x</>),(<replaceable>y</>)]</literal> is the same as
   <literal>[ ( <replaceable>x</> ), ( <replaceable>y</> ) ]</literal>.
-->
空白文字は入力時に無視されます。
このため、<literal>[(<replaceable>x</>),(<replaceable>y</>)]</literal>は<literal>[ ( <replaceable>x</> ), ( <replaceable>y</> ) ]</literal>と同じです。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Precision</title>
-->
  <title>精度</title>

  <para>
<!--
   Values are stored internally as 64-bit floating point numbers. This means
   that numbers with more than about 16 significant digits will be truncated.
-->
値は内部的に64ビットの浮動小数点数値として格納されます。
つまり、有効桁が16より大きい数値は切り詰められることを意味します。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Usage</title>
-->
  <title>使用方法</title>

  <para>
<!--
   <xref linkend="cube-operators-table"> shows the operators provided for
   type <type>cube</>.
-->
<xref linkend="cube-operators-table">は、<type>cube</>型に提供されている演算子を示します。
  </para>

  <table id="cube-operators-table">
<!--
   <title>Cube Operators</title>
-->
   <title>Cubeの演算子</title>
   <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>Operator</entry>
      <entry>Result</entry>
      <entry>Description</entry>
-->
      <entry>演算子</entry>
      <entry>戻り値</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>a = b</></entry>
      <entry><type>boolean</></entry>
<!--
      <entry>The cubes a and b are identical.</entry>
-->
      <entry>立体aと立体bは同じです。</entry>
     </row>

     <row>
      <entry><literal>a &amp;&amp; b</></entry>
      <entry><type>boolean</></entry>
<!--
      <entry>The cubes a and b overlap.</entry>
-->
      <entry>立体aと立体bには重なりがあります。</entry>
     </row>

     <row>
      <entry><literal>a @&gt; b</></entry>
      <entry><type>boolean</></entry>
<!--
      <entry>The cube a contains the cube b.</entry>
-->
      <entry>立体aは立体bを含みます。</entry>
     </row>

     <row>
      <entry><literal>a &lt;@ b</></entry>
      <entry><type>boolean</></entry>
<!--
      <entry>The cube a is contained in the cube b.</entry>
-->
      <entry>立体aは立体bに含まれます。</entry>
     </row>

     <row>
      <entry><literal>a &lt; b</></entry>
      <entry><type>boolean</></entry>
<!--
      <entry>The cube a is less than the cube b.</entry>
-->
      <entry>立体aは立体bより小さいです。</entry>
     </row>

     <row>
      <entry><literal>a &lt;= b</></entry>
      <entry><type>boolean</></entry>
<!--
      <entry>The cube a is less than or equal to the cube b.</entry>
-->
      <entry>立体aは立体bより小さいか同じです。</entry>
     </row>

     <row>
      <entry><literal>a &gt; b</></entry>
      <entry><type>boolean</></entry>
<!--
      <entry>The cube a is greater than the cube b.</entry>
-->
      <entry>立体aは立体bより大きいです。</entry>
     </row>

     <row>
      <entry><literal>a &gt;= b</></entry>
      <entry><type>boolean</></entry>
<!--
      <entry>The cube a is greater than or equal to the cube b.</entry>
-->
      <entry>立体aは立体bより大きいか同じです。</entry>
     </row>

     <row>
      <entry><literal>a &lt;&gt; b</></entry>
      <entry><type>boolean</></entry>
<!--
      <entry>The cube a is not equal to the cube b.</entry>
-->
      <entry>立体aは立体bと同じではありません。</entry>
     </row>

     <row>
      <entry><literal>a -&gt; n</></entry>
      <entry><type>float8</></entry>
<!--
      <entry>Get <replaceable>n</>-th coordinate of cube (counting from 1).</entry>
-->
      <entry>立体の（1から数えた）<replaceable>n</>次座標を取得します。</entry>
     </row>

     <row>
      <entry><literal>a ~&gt; n</></entry>
      <entry><type>float8</></entry>
      <entry>
<<<<<<< HEAD
<!--
        Get <replaceable>n</>-th coordinate in <quote>normalized</> cube
        representation, in which the coordinates have been rearranged into
        the form <quote>lower left &mdash; upper right</>; that is, the
        smaller endpoint along each dimension appears first.
-->
立体表現を、座標を<quote>左下 &mdash; 右上</>の形式に並び替えるという<quote>正規化</>をした<replaceable>n</>次座標を取得します。
つまり各次元上のより小さな端点が最初に与えられます。
=======
        Get <replaceable>n</>-th coordinate of cube in following way:
        n = 2 * k - 1 means lower bound of <replaceable>k</>-th
        dimension, n = 2 * k means upper bound of
        <replaceable>k</>-th dimension.  This operator is designed
        for KNN-GiST support.
>>>>>>> REL_10_3
      </entry>
     </row>

     <row>
      <entry><literal>a &lt;-&gt; b</></entry>
      <entry><type>float8</></entry>
<!--
      <entry>Euclidean distance between a and b.</entry>
-->
      <entry>aとbのユークリッド距離。</entry>
     </row>

     <row>
      <entry><literal>a &lt;#&gt; b</></entry>
      <entry><type>float8</></entry>
<!--
      <entry>Taxicab (L-1 metric) distance between a and b.</entry>
-->
      <entry>aとbのタクシー（L-1メトリック）距離。</entry>
     </row>

     <row>
      <entry><literal>a &lt;=&gt; b</></entry>
      <entry><type>float8</></entry>
<!--
      <entry>Chebyshev (L-inf metric) distance between a and b.</entry>
-->
      <entry>aとbのチェビシェフ（L-無限大メトリック）距離。</entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   (Before PostgreSQL 8.2, the containment operators <literal>@&gt;</> and <literal>&lt;@</> were
   respectively called <literal>@</> and <literal>~</>.  These names are still available, but are
   deprecated and will eventually be retired.  Notice that the old names
   are reversed from the convention formerly followed by the core geometric
   data types!)
-->
（PostgreSQL 8.2以前では、包含演算子<literal>@&gt;</>と<literal>&lt;@</>はそれぞれ<literal>@</>と<literal>~</>と呼ばれていました。
これらの名前はまだ利用できますが、廃止予定であり、最終的にはなくなります。
古い名前がコアの幾何データ型が従う規約と反対であることに注意してください。）
  </para>

  <para>
<!--
   The scalar ordering operators (<literal>&lt;</>, <literal>&gt;=</>, etc)
   do not make a lot of sense for any practical purpose but sorting.  These
   operators first compare the first coordinates, and if those are equal,
   compare the second coordinates, etc.  They exist mainly to support the
   b-tree index operator class for <type>cube</>, which can be useful for
   example if you would like a UNIQUE constraint on a <type>cube</> column.
-->
スカラー順序演算子（<literal>&lt;</>、<literal>&gt;=</>など）は、ソート以外では事実上意味を成しません。
これらの演算子は、まず最初の座標を比較し、それらが同一の場合は2番目の座標を比較し、と続けます。
それらは、主に<type>cube</>型のためのB-treeインデックス演算子クラスをサポートするために存在し、例えば<type>cube</>型の列にUNIQUE制約をつけたい場合に便利です。
  </para>

  <para>
<!--
   The <filename>cube</> module also provides a GiST index operator class for
   <type>cube</> values.
   A <type>cube</> GiST index can be used to search for values using the
   <literal>=</>, <literal>&amp;&amp;</>, <literal>@&gt;</>, and
   <literal>&lt;@</> operators in <literal>WHERE</> clauses.
-->
<filename>cube</>モジュールは、<type>cube</>型の値用にGiSTインデックス演算子クラスも提供します。
<type>cube</>型GiSTインデックスは、<literal>WHERE</>句内にて<literal>=</>、<literal>&amp;&amp;</>、<literal>@&gt;</>、<literal>&lt;@</>演算子を用いて値を検索するために使用することができます。
  </para>

  <para>
<!--
   In addition, a <type>cube</> GiST index can be used to find nearest
   neighbors using the metric operators
   <literal>&lt;-&gt;</>, <literal>&lt;#&gt;</>, and
   <literal>&lt;=&gt;</> in <literal>ORDER BY</> clauses.
   For example, the nearest neighbor of the 3-D point (0.5, 0.5, 0.5)
   could be found efficiently with:
-->
加えて、<type>cube</>型GiSTインデックスは、<literal>ORDER BY</>句内にて<literal>&lt;-&gt;</>、<literal>&lt;#&gt;</>、<literal>&lt;=&gt;</>のメトリック演算子を用いて近傍値を発見するために使用することができます。
例えば、3次元の点である(0.5, 0.5, 0.5)の最近傍点は、以下のように効率よく発見できます。
<programlisting>
SELECT c FROM test ORDER BY c &lt;-&gt; cube(array[0.5,0.5,0.5]) LIMIT 1;
</programlisting>
  </para>

  <para>
<!--
   The <literal>~&gt;</> operator can also be used in this way to
   efficiently retrieve the first few values sorted by a selected coordinate.
   For example, to get the first few cubes ordered by the first coordinate
   (lower left corner) ascending one could use the following query:
-->
<literal>~&gt;</>演算子でもこの方法で、選択された座標によってソートされた最初のいくつかの値を効率よく探査するために使用できます。
例えば、1番目の座標（左下隅）によって昇順に並べ替えられた最初のいくつかの立体を取得するために、以下のような問い合わせを使用することができます。
<programlisting>
SELECT c FROM test ORDER BY c ~&gt; 1 LIMIT 5;
</programlisting>
<!--
   And to get 2-D cubes ordered by the first coordinate of the upper right
   corner descending:
-->
そして、右上の1番目の座標によって昇順に並び替えられた2次元の立体を取得するために、以下のようなクエリを使用することができます。
<programlisting>
SELECT c FROM test ORDER BY c ~&gt; 3 DESC LIMIT 5;
</programlisting>
  </para>

  <para>
<!--
   <xref linkend="cube-functions-table"> shows the available functions.
-->
<xref linkend="cube-functions-table">は有効な関数を示します。
  </para>

  <table id="cube-functions-table">
<!--
   <title>Cube Functions</title>
-->
   <title>cubeの関数</title>
   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Function</entry>
      <entry>Result</entry>
      <entry>Description</entry>
      <entry>Example</entry>
-->
      <entry>関数</entry>
      <entry>戻り値</entry>
      <entry>説明</entry>
      <entry>例</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>cube(float8)</literal></entry>
      <entry><type>cube</type></entry>
<!--
      <entry>Makes a one dimensional cube with both coordinates the same.
-->
      <entry>
同じ座標をもつ、1次元の立体を作成します。
      </entry>
      <entry>
       <literal>cube(1) == '(1)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(float8, float8)</literal></entry>
      <entry><type>cube</type></entry>
<!--
      <entry>Makes a one dimensional cube.
-->
      <entry>1次元の立体を作成します。
      </entry>
      <entry>
       <literal>cube(1,2) == '(1),(2)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(float8[])</literal></entry>
      <entry><type>cube</type></entry>
<!--
      <entry>Makes a zero-volume cube using the coordinates
       defined by the array.
-->
<entry>配列で定義される座標を使用した体積0の立体を作成します。
      </entry>
      <entry>
       <literal>cube(ARRAY[1,2]) == '(1,2)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(float8[], float8[])</literal></entry>
      <entry><type>cube</type></entry>
<!--
      <entry>Makes a cube with upper right and lower left
       coordinates as defined by the two arrays, which must be of the
       same length.
-->
<entry>2つの配列で定義される右上および左下座標を持つ立体を作成します。
配列長は同じでなければなりません。
      </entry>
      <entry>
       <literal>cube(ARRAY[1,2], ARRAY[3,4]) == '(1,2),(3,4)'
       </literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(cube, float8)</literal></entry>
      <entry><type>cube</type></entry>
<!--
      <entry>Makes a new cube by adding a dimension on to an existing cube,
       with the same values for both endpoints of the new coordinate.  This
       is useful for building cubes piece by piece from calculated values.
-->
<entry>既存の立体に次元を加え、新しい座標の同じ値の端点をもつ立体を新しく作成します。
これは計算した値で部品を追加しながら立体を構築する場合に有用です。
      </entry>
      <entry>
       <literal>cube('(1,2),(3,4)'::cube, 5) == '(1,2,5),(3,4,5)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(cube, float8, float8)</literal></entry>
      <entry><type>cube</type></entry>
<!--
      <entry>Makes a new cube by adding a dimension on to an existing
       cube. This is useful for building cubes piece by piece from calculated
       values.
-->
<entry>既存の立体に次元を加えた立体を新しく作成します。
これは計算した値で部品を追加しながら立体を構築する場合に有用です。
      </entry>
      <entry>
       <literal>cube('(1,2),(3,4)'::cube, 5, 6) == '(1,2,5),(3,4,6)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube_dim(cube)</literal></entry>
      <entry><type>integer</type></entry>
<!--
      <entry>Returns the number of dimensions of the cube.
-->
      <entry>立体の次元数を返します。
      </entry>
      <entry>
       <literal>cube_dim('(1,2),(3,4)') == '2'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube_ll_coord(cube, integer)</literal></entry>
      <entry><type>float8</type></entry>
<!--
      <entry>Returns the <replaceable>n</>-th coordinate value for the lower
       left corner of the cube.
-->
      <entry>立体の左下隅のn次座標の値を返します。
      </entry>
      <entry>
       <literal>cube_ll_coord('(1,2),(3,4)', 2) == '2'</literal>
      </entry>
     </row>

    <row>
      <entry><literal>cube_ur_coord(cube, integer)</literal></entry>
      <entry><type>float8</type></entry>
<!--
      <entry>Returns the <replaceable>n</>-th coordinate value for the
       upper right corner of the cube.
-->
      <entry>立体の右上隅のn次座標の値を返します。
      </entry>
      <entry>
       <literal>cube_ur_coord('(1,2),(3,4)', 2) == '4'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube_is_point(cube)</literal></entry>
      <entry><type>boolean</type></entry>
<!--
      <entry>Returns true if the cube is a point, that is,
       the two defining corners are the same.</entry>
-->
<entry>立体が点、つまり立体が定義する2つの隅が同一の場合真を返します。
</entry>
      <entry>
      </entry>
     </row>

     <row>
      <entry><literal>cube_distance(cube, cube)</literal></entry>
      <entry><type>float8</type></entry>
<!--
      <entry>Returns the distance between two cubes. If both
       cubes are points, this is the normal distance function.
-->
<entry>2つの立体間の距離を返します。
両方の立体が点の場合、これは通常の距離測定関数です。
      </entry>
      <entry>
      </entry>
     </row>

     <row>
      <entry><literal>cube_subset(cube, integer[])</literal></entry>
      <entry><type>cube</type></entry>
<!--
      <entry>Makes a new cube from an existing cube, using a list of
       dimension indexes from an array. Can be used to extract the endpoints
       of a single dimension, or to drop dimensions, or to reorder them as
       desired.
-->
<entry>配列内の次元インデックスの一覧を使用して、既存の立体から新しい立体を作成します。
単一次元の端点を展開するために使用したり、次元を除去したり、希望通りの順序に並び替えることができます。 
      </entry>
      <entry>
       <literal>cube_subset(cube('(1,3,5),(6,7,8)'), ARRAY[2]) == '(3),(7)'</>
       <literal>cube_subset(cube('(1,3,5),(6,7,8)'), ARRAY[3,2,1,1]) ==
        '(5,3,1,1),(8,7,6,6)'</>
      </entry>
     </row>

     <row>
      <entry><literal>cube_union(cube, cube)</literal></entry>
      <entry><type>cube</type></entry>
<!--
      <entry>Produces the union of two cubes.
-->
      <entry>2つの立体の和集合を作成します。
      </entry>
      <entry>
      </entry>
     </row>

     <row>
      <entry><literal>cube_inter(cube, cube)</literal></entry>
      <entry><type>cube</type></entry>
<!--
      <entry>Produces the intersection of two cubes.
-->
<entry>2つの立体の共通部分を作成します。
      </entry>
      <entry>
      </entry>
     </row>

     <row>
      <entry><literal>cube_enlarge(c cube, r double, n integer)</literal></entry>
      <entry><type>cube</type></entry>
<!--
      <entry>Increases the size of the cube by the specified
       radius <replaceable>r</> in at least <replaceable>n</> dimensions.
       If the radius is negative the cube is shrunk instead.
       All defined dimensions are changed by the radius <replaceable>r</>.
       Lower-left coordinates are decreased by <replaceable>r</> and
       upper-right coordinates are increased by <replaceable>r</>.  If a
       lower-left coordinate is increased to more than the corresponding
       upper-right coordinate (this can only happen when <replaceable>r</>
       &lt; 0) than both coordinates are set to their average.
       If <replaceable>n</> is greater than the number of defined dimensions
       and the cube is being enlarged (<replaceable>r</> &gt; 0), then extra
       dimensions are added to make <replaceable>n</> altogether;
       0 is used as the initial value for the extra coordinates.
       This function is useful for creating bounding boxes around a point for
       searching for nearby points.
-->
<entry>最小で<replaceable>n</>次元において指定した径<replaceable>r</>で立体のサイズを増加させます。
径が負の場合、立体は縮小されます。
定義済のすべての次元は径<replaceable>r</>だけ変わります。
左下座標を<replaceable>r</>だけ減少し、右上座標を<replaceable>r</>だけ増加します。
左下座標が対応する右上座標よりも増加する場合（これは<replaceable>r</> &lt; 0の場合にのみ発生します）、両方の座標はその平均値に設定されます。
<replaceable>n</>が定義済の次元より多く、かつ、立体が拡大される（<replaceable>r</> &gt;= 0）場合、<replaceable>n</>次元すべてを作成するために余分な次元が追加されます。
余分な座標には、初期値として0が使用されます。
この関数は、近傍点を見つけるための点を囲む外接矩形を作成する際に有用です。 
      </entry>
      <entry>
       <literal>cube_enlarge('(1,2),(3,4)', 0.5, 3) ==
        '(0.5,1.5,-0.5),(3.5,4.5,0.5)'</>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2>
<!--
  <title>Defaults</title>
-->
  <title>デフォルト</title>

  <para>
<!--
   I believe this union:
-->
  </para>
<programlisting>
select cube_union('(0,5,2),(2,3,1)', '0');
cube_union
-------------------
(0, 0, 0),(2, 5, 2)
(1 row)
</programlisting>

   <para>
<!--
    does not contradict common sense, neither does the intersection
-->
この和集合および以下の共通集合は一般常識と矛盾しないと思います。
   </para>

<programlisting>
select cube_inter('(0,-1),(1,1)', '(-2),(2)');
cube_inter
-------------
(0, 0),(1, 0)
(1 row)
</programlisting>

   <para>
<!--
    In all binary operations on differently-dimensioned cubes, I assume the
    lower-dimensional one to be a Cartesian projection, i. e., having zeroes
    in place of coordinates omitted in the string representation. The above
    examples are equivalent to:
-->
次元が異なる立体のバイナリ操作すべてにおいて、より低い次元の方がデカルト投影、つまり、文字列表現で省略された座標に0を持つものになると仮定します。
上の例は以下と同じです。
   </para>

<programlisting>
cube_union('(0,5,2),(2,3,1)','(0,0,0),(0,0,0)');
cube_inter('(0,-1),(1,1)','(-2,0),(2,0)');
</programlisting>

   <para>
<!--
    The following containment predicate uses the point syntax,
    while in fact the second argument is internally represented by a box.
    This syntax makes it unnecessary to define a separate point type
    and functions for (box,point) predicates.
-->
以下の包含の述部は点構文を使用しますが、実際内部的には第2引数は矩形として表されます。
この構文により、別の点用の型や(box,point)という述部用の関数を定義することが不要になります。
   </para>

<programlisting>
select cube_contains('(0,0),(1,1)', '0.5,0.5');
cube_contains
--------------
t
(1 row)
</programlisting>
 </sect2>

 <sect2>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   For examples of usage, see the regression test <filename>sql/cube.sql</>.
-->
使用例については、<filename>sql/cube.sql</>リグレッションテストを参照してください。
  </para>

  <para>
<!--
   To make it harder for people to break things, there
   is a limit of 100 on the number of dimensions of cubes. This is set
   in <filename>cubedata.h</> if you need something bigger.
-->
破壊防止のために立体の次元数に100までという制限を行いました。
これは<filename>cubedata.h</>で設定されており、必要に応じて多少大きくすることができます。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Credits</title>
-->
  <title>クレジット</title>

  <para>
<!--
   Original author: Gene Selkov, Jr. <email>selkovjr@mcs.anl.gov</email>,
   Mathematics and Computer Science Division, Argonne National Laboratory.
-->
   原作者: Gene Selkov, Jr. <email>selkovjr@mcs.anl.gov</email>,
   Mathematics and Computer Science Division, Argonne National Laboratory.
  </para>

  <para>
<!--
   My thanks are primarily to Prof. Joe Hellerstein
   (<ulink url="http://db.cs.berkeley.edu/jmh/"></ulink>) for elucidating the
   gist of the GiST (<ulink url="http://gist.cs.berkeley.edu/"></ulink>), and
   to his former student Andy Dong for his example written for Illustra.
   I am also grateful to all Postgres developers, present and past, for
   enabling myself to create my own world and live undisturbed in it. And I
   would like to acknowledge my gratitude to Argonne Lab and to the
   U.S. Department of Energy for the years of faithful support of my database
   research.
-->
GiST (<ulink url="http://gist.cs.berkeley.edu/"></ulink>)の要点(gist)を説明してくださったJoe Hellerstein博士 (<ulink url="http://db.cs.berkeley.edu/jmh/"></ulink>) に感謝します。
また、Illustra用の例の作者である彼の以前の生徒Andy Dongに感謝します。
また、自分の世界を作成できるようにし、静かに生活できるようにしてもらった、過去から現在までのすべてのPostgres開発者に感謝します。
データベース研究を長年誠実にサポートしてくれたArgonne LabとU.S. Department of Energyにも感謝します。
  </para>

  <para>
<!--
   Minor updates to this package were made by Bruno Wolff III
   <email>bruno@wolff.to</email> in August/September of 2002. These include
   changing the precision from single precision to double precision and adding
   some new functions.
-->
2002年8月/9月にBruno Wolff III <email>bruno@wolff.to</email>による小規模な改修がこのパッケージになされました。
この改修には、単精度から倍精度への精度の変更といくつかの関数の追加が含まれます。
  </para>

  <para>
<!--
   Additional updates were made by Joshua Reich <email>josh@root.net</email> in
   July 2006. These include <literal>cube(float8[], float8[])</literal> and
   cleaning up the code to use the V1 call protocol instead of the deprecated
   V0 protocol.
-->
2006年7月にJoshua Reich <email>josh@root.net</email>による改修がさらになされました。
この改修には<literal>cube(float8[], float8[])</literal>が含まれ、また、古いV0プロトコルからV1呼び出しプロトコルを使用するようコードが整理されました。
  </para>
 </sect2>

</sect1>
