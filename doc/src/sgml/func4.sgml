<!-- 警告：このファイルは直接編集しないでください！
1. func.sgmlを編集したら、split.shを起動します。
2. するとfunc[0-4].sgmlが生成されます。
3. func.sgmlとともにfunc[0-4].sgmlのうち変更されたファイルをcommit/pushしてpull requestを作成してください。
4. レビューはfunc[0-4].sgmlに対して行います。
5. 指摘された点があればfunc.sgmlに反映し、1に戻ります。
6. func.sgmlの変更がなければ、pull requestをマージして終了です。お疲れ様でした！
-->
<!-- split-func4-start -->

 <sect1 id="functions-subquery">
<!--
  <title>Subquery Expressions</title>
-->
  <title>副問い合わせ式</title>

  <indexterm>
   <primary>EXISTS</primary>
  </indexterm>

  <indexterm>
   <primary>IN</primary>
  </indexterm>

  <indexterm>
   <primary>NOT IN</primary>
  </indexterm>

  <indexterm>
   <primary>ANY</primary>
  </indexterm>

  <indexterm>
   <primary>ALL</primary>
  </indexterm>

  <indexterm>
   <primary>SOME</primary>
  </indexterm>

  <indexterm>
   <primary>subquery</primary>
  </indexterm>

  <para>
<!--
   This section describes the <acronym>SQL</acronym>-compliant subquery
   expressions available in <productname>PostgreSQL</productname>.
   All of the expression forms documented in this section return
   Boolean (true/false) results.
-->
本節では<productname>PostgreSQL</productname>で使用できる<acronym>SQL</acronym>準拠の副問い合わせについて説明します。
本節で記載した全ての式は結果として論理値（真/偽）を返します。
  </para>

  <sect2 id="functions-subquery-exists">
   <title><literal>EXISTS</literal></title>

<synopsis>
EXISTS (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The argument of <token>EXISTS</token> is an arbitrary <command>SELECT</> statement,
   or <firstterm>subquery</firstterm>.  The
   subquery is evaluated to determine whether it returns any rows.
   If it returns at least one row, the result of <token>EXISTS</token> is
   <quote>true</>; if the subquery returns no rows, the result of <token>EXISTS</token>
   is <quote>false</>.
-->
<token>EXISTS</token>の引数は、任意の<command>SELECT</>文、つまり<firstterm>副問い合わせ</firstterm>です。
副問い合わせはそれが何らかの行を返すか否かの決定のために評価されます。
もし1つでも行を返すのであれば、<token>EXISTS</token>の結果は<quote>true（真）</>となり、副問い合わせが行を返さない場合、<token>EXISTS</token>の結果は<quote>false（偽）</>となります。
  </para>

  <para>
<!--
   The subquery can refer to variables from the surrounding query,
   which will act as constants during any one evaluation of the subquery.
-->
副問い合わせは、取り囲んでいる問い合わせから変数を参照することができ、その値は副問い合わせの評価時には定数として扱われます。
  </para>

  <para>
<!--
   The subquery will generally only be executed long enough to determine
   whether at least one row is returned, not all the way to completion.
   It is unwise to write a subquery that has side effects (such as
   calling sequence functions); whether the side effects occur
   might be unpredictable.
-->
この副問い合わせは通常、最後まで実行されず、少なくとも１つの行が返されたかどうかを判定し得るに足りる時点まで実行されます。
（シーケンス関数を呼び出すような）副作用のある副問い合わせを記述することは配慮不足です。副作用が生じるかどうかは予想できません。
  </para>

  <para>
<!--
   Since the result depends only on whether any rows are returned,
   and not on the contents of those rows, the output list of the
   subquery is normally unimportant.  A common coding convention is
   to write all <literal>EXISTS</> tests in the form
   <literal>EXISTS(SELECT 1 WHERE ...)</literal>.  There are exceptions to
   this rule however, such as subqueries that use <token>INTERSECT</token>.
-->
結果は何らかの行が返されるのかのみに依存し、それらの行の内容には依存しないことから、副問い合わせの出力リストは通常重要ではありません。
よく使われるコーディング規約は、全ての<literal>EXISTS</>テストを<literal>EXISTS(SELECT 1 WHERE ...)</literal>といった形式で記述することです。
とは言っても、<token>INTERSECT</token>を使う副問い合わせのようにこの規則には例外があります。
  </para>

  <para>
<!--
   This simple example is like an inner join on <literal>col2</>, but
   it produces at most one output row for each <literal>tab1</> row,
   even if there are several matching <literal>tab2</> rows:
-->
以下の簡単な例は<literal>col2</>上の内部結合に似ていますが、しかしたとえ<literal>tab2</>の行といくつか一致したとしても<literal>tab1</>のそれぞれの行に対して最大限１つの出力行を生成します。
<screen>
SELECT col1
FROM tab1
WHERE EXISTS (SELECT 1 FROM tab2 WHERE col2 = tab1.col2);
</screen>
  </para>
  </sect2>

  <sect2 id="functions-subquery-in">
   <title><literal>IN</literal></title>

<synopsis>
<replaceable>expression</replaceable> IN (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The right-hand side is a parenthesized
   subquery, which must return exactly one column.  The left-hand expression
   is evaluated and compared to each row of the subquery result.
   The result of <token>IN</token> is <quote>true</> if any equal subquery row is found.
   The result is <quote>false</> if no equal row is found (including the
   case where the subquery returns no rows).
-->
右辺は括弧で括られた副問い合わせで、正確に１列を返すものでなければなりません。
左辺式は評価され、副問い合わせの結果行と比較されます。
副問い合わせの行のどれかと等しい場合、<token>IN</token>の結果は<quote>true（真）</>です。
（副問い合わせが行を返さない場合を含め）等しい行が見つからない場合、結果は<quote>false（偽）</>です。
  </para>

  <para>
<!--
   Note that if the left-hand expression yields null, or if there are
   no equal right-hand values and at least one right-hand row yields
   null, the result of the <token>IN</token> construct will be null, not false.
   This is in accordance with SQL's normal rules for Boolean combinations
   of null values.
-->
左辺の式がNULLを生じる場合、または右辺の値に等しいものがなくて少なくとも1つの右辺の行がNULLを持つ場合、<token>IN</token>構文の結果は偽ではなくNULLとなることに注意してください。
これは、NULL値の論理的な組み合わせに対するSQLの標準規則に従うものです。
  </para>

  <para>
<!--
   As with <token>EXISTS</token>, it's unwise to assume that the subquery will
   be evaluated completely.
-->
<token>EXISTS</token>と同様、副問い合わせが完全に評価されることを前提としてはなりません。
  </para>

<synopsis>
<replaceable>row_constructor</replaceable> IN (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The left-hand side of this form of <token>IN</token> is a row constructor,
   as described in <xref linkend="sql-syntax-row-constructors">.
   The right-hand side is a parenthesized
   subquery, which must return exactly as many columns as there are
   expressions in the left-hand row.  The left-hand expressions are
   evaluated and compared row-wise to each row of the subquery result.
   The result of <token>IN</token> is <quote>true</> if any equal subquery row is found.
   The result is <quote>false</> if no equal row is found (including the
   case where the subquery returns no rows).
-->
<token>IN</token>のこの形式の左辺は、<xref linkend="sql-syntax-row-constructors">で説明する、行のコンストラクタです。
右辺は括弧で括られた副問い合わせで、左辺の行にある式の数と正確に同じ数の列を返さなければなりません。
左辺の式は副問い合わせの結果のそれぞれの行に対し、行に関して評価、比較が行われます。
副問い合わせの行に等しいものが見つかった場合、<token>IN</token> の結果は<quote>true（真）</>となります。
（副問い合わせが行を返さない場合を含め）等しい行が見つからない場合、結果は<quote>false（偽）</>です。
  </para>

  <para>
<!--
   As usual, null values in the rows are combined per
   the normal rules of SQL Boolean expressions.  Two rows are considered
   equal if all their corresponding members are non-null and equal; the rows
   are unequal if any corresponding members are non-null and unequal;
   otherwise the result of that row comparison is unknown (null).
   If all the per-row results are either unequal or null, with at least one
   null, then the result of <token>IN</token> is null.
-->
通常通り、行にあるNULL値はSQLの論理式の標準規則で結合されます。
２つの行は対応する全ての構成要素が非NULLかつ等しい場合に等しいとみなされます。
１つでも対応する構成要素が非NULLかつ等しくないものがあれば、２つの行は等しくないとみなされます。
それ以外の場合、その行の比較結果は不明（NULL）です。
行毎の結果すべてが不等もしくはNULLの場合、少なくとも１つのNULLがあると、<token>IN</token>の結果はNULLとなります。
  </para>
  </sect2>

  <sect2 id="functions-subquery-notin">
   <title><literal>NOT IN</literal></title>

<synopsis>
<replaceable>expression</replaceable> NOT IN (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The right-hand side is a parenthesized
   subquery, which must return exactly one column.  The left-hand expression
   is evaluated and compared to each row of the subquery result.
   The result of <token>NOT IN</token> is <quote>true</> if only unequal subquery rows
   are found (including the case where the subquery returns no rows).
   The result is <quote>false</> if any equal row is found.
-->
右辺は括弧で括られた副問い合わせで、正確に１つの列を返さなければなりません。
左辺の式は副問い合わせ結果の行それぞれに対して評価、比較されます。
等しくない副問い合わせの行だけがある（副問い合わせが行を返さない場合を含む）と、<token>NOT IN</token>の結果は<quote>true（真）</>です。
等しい行が1つでもあれば、結果は<quote>false（偽）</>です。
  </para>

  <para>
<!--
   Note that if the left-hand expression yields null, or if there are
   no equal right-hand values and at least one right-hand row yields
   null, the result of the <token>NOT IN</token> construct will be null, not true.
   This is in accordance with SQL's normal rules for Boolean combinations
   of null values.
-->
左辺の式でNULLが生じる場合、または右辺の値に等しいものがなく、少なくとも１つの右辺の式がNULLを生み出す場合、<token>NOT IN</token>構文の結果は真ではなくNULLとなることに注意してください。
これは、NULL値の論理的な組み合わせに対するSQLの標準規則に従うものです。
  </para>

  <para>
<!--
   As with <token>EXISTS</token>, it's unwise to assume that the subquery will
   be evaluated completely.
-->
<token>EXISTS</token>と同様、副問い合わせが完全に評価されることを前提としてはなりません。
  </para>

<synopsis>
<replaceable>row_constructor</replaceable> NOT IN (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The left-hand side of this form of <token>NOT IN</token> is a row constructor,
   as described in <xref linkend="sql-syntax-row-constructors">.
   The right-hand side is a parenthesized
   subquery, which must return exactly as many columns as there are
   expressions in the left-hand row.  The left-hand expressions are
   evaluated and compared row-wise to each row of the subquery result.
   The result of <token>NOT IN</token> is <quote>true</> if only unequal subquery rows
   are found (including the case where the subquery returns no rows).
   The result is <quote>false</> if any equal row is found.
-->
<token>NOT IN</token>のこの形式の左辺は、<xref linkend="sql-syntax-row-constructors">で説明する行コンストラクタです。
右辺は括弧で括られた副問い合わせで、左辺の行にある式の数と正確に同じ数の列を返さなければなりません。
左辺の式は副問い合わせの結果のそれぞれの行に対し、評価、比較が行われます。
副問い合わせの行に不等のもののみが見つかった場合（副問い合わせが行を返さない場合を含む）、<token>NOT IN</token>の結果は<quote>true（真）</>となります。
等しい行が１つでも見つかった場合、結果は<quote>false（偽）</>です。
  </para>

  <para>
<!--
   As usual, null values in the rows are combined per
   the normal rules of SQL Boolean expressions.  Two rows are considered
   equal if all their corresponding members are non-null and equal; the rows
   are unequal if any corresponding members are non-null and unequal;
   otherwise the result of that row comparison is unknown (null).
   If all the per-row results are either unequal or null, with at least one
   null, then the result of <token>NOT IN</token> is null.
-->
通常通り、行にあるNULL値はSQLの論理式の標準規則で結合されます。
2つの行は対応する全ての構成要素が非NULLかつ等しい場合に等しいとみなされます。
１つでも構成要素が非NULLかつ等しくない場合、２つの行は等しくないとみなされます。
それ以外の場合、その行の比較結果は不明（NULL）です。
行毎の結果すべてが不等もしくはNULLの場合、少なくとも1つのNULLがあると、<token>NOT IN</token>の結果はNULLとなります。
  </para>
  </sect2>

  <sect2 id="functions-subquery-any-some">
   <title><literal>ANY</literal>/<literal>SOME</literal></title>

<synopsis>
<replaceable>expression</replaceable> <replaceable>operator</replaceable> ANY (<replaceable>subquery</replaceable>)
<replaceable>expression</replaceable> <replaceable>operator</replaceable> SOME (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The right-hand side is a parenthesized
   subquery, which must return exactly one column.  The left-hand expression
   is evaluated and compared to each row of the subquery result using the
   given <replaceable>operator</replaceable>, which must yield a Boolean
   result.
   The result of <token>ANY</token> is <quote>true</> if any true result is obtained.
   The result is <quote>false</> if no true result is found (including the
   case where the subquery returns no rows).
-->
右辺は括弧で括られた副問い合わせで、正確に1つの列を返さなければなりません。
左辺の式は副問い合わせの結果行それぞれに対して、指定された<replaceable>operator</replaceable>を使用して評価、比較されます。なお、<replaceable>operator</replaceable>は結果として論理値を生成する必要があります。
真の結果が１つでもあると、<token>ANY</token>の結果は<quote>true（真）</>です。
真の結果がない（副問い合わせが行を返さない場合を含む）と、結果は<quote>false（偽）</>です。
  </para>

  <para>
<!--
   <token>SOME</token> is a synonym for <token>ANY</token>.
   <token>IN</token> is equivalent to <literal>= ANY</literal>.
-->
<token>SOME</token>は<token>ANY</token>の同義語です。
<token>IN</token>は<literal>= ANY</literal>と等価です。
  </para>

  <para>
<!--
   Note that if there are no successes and at least one right-hand row yields
   null for the operator's result, the result of the <token>ANY</token> construct
   will be null, not false.
   This is in accordance with SQL's normal rules for Boolean combinations
   of null values.
-->
成功がなく、右辺の行が演算子の結果として１つでもNULLを生成した場合、<token>ANY</token>構文の結果は偽ではなくNULLになることに注意してください。
これは、NULL値の論理的な組み合わせに対するSQLの標準規則に従うものです。
  </para>

  <para>
<!--
   As with <token>EXISTS</token>, it's unwise to assume that the subquery will
   be evaluated completely.
-->
<token>EXISTS</token>と同様、副問い合わせが完全に評価されると前提してはなりません。
  </para>

<synopsis>
<replaceable>row_constructor</replaceable> <replaceable>operator</> ANY (<replaceable>subquery</replaceable>)
<replaceable>row_constructor</replaceable> <replaceable>operator</> SOME (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The left-hand side of this form of <token>ANY</token> is a row constructor,
   as described in <xref linkend="sql-syntax-row-constructors">.
   The right-hand side is a parenthesized
   subquery, which must return exactly as many columns as there are
   expressions in the left-hand row.  The left-hand expressions are
   evaluated and compared row-wise to each row of the subquery result,
   using the given <replaceable>operator</replaceable>.
   The result of <token>ANY</token> is <quote>true</> if the comparison
   returns true for any subquery row.
   The result is <quote>false</> if the comparison returns false for every
   subquery row (including the case where the subquery returns no
   rows).
   The result is NULL if the comparison does not return true for any row,
   and it returns NULL for at least one row.
-->
<token>ANY</token>のこの形式の左辺は、<xref linkend="sql-syntax-row-constructors">で説明されている行コンストラクタです。
右辺は括弧で括られた副問い合わせで、左辺の行にある式の数と正確に同じ数の列を返さなければなりません。
左辺の式は副問い合わせの結果のそれぞれの行に対し、与えられた<replaceable>operator</replaceable>を使用して行に関する評価、比較が行われます。
比較の結果、副問い合わせの行のどれかに対して真となる場合、<token>ANY</token>の結果は<quote>true（真）</>です。
比較の結果、副問い合わせの全ての行に対して偽となる場合（副問い合わせが行を返さないという場合も含む）、結果は<quote>false（偽）</>です。
比較の結果、いかなる行でも真を返さず、かつ、少なくとも１つの行がNULLを返す場合、結果はNULLになります。
  </para>

  <para>
<!--
   See <xref linkend="row-wise-comparison"> for details about the meaning
   of a row constructor comparison.
-->
行コンストラクタ比較の意味についての詳細は<xref linkend="row-wise-comparison">を参照して下さい。
  </para>
  </sect2>

  <sect2 id="functions-subquery-all">
   <title><literal>ALL</literal></title>

<synopsis>
<replaceable>expression</replaceable> <replaceable>operator</replaceable> ALL (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The right-hand side is a parenthesized
   subquery, which must return exactly one column.  The left-hand expression
   is evaluated and compared to each row of the subquery result using the
   given <replaceable>operator</replaceable>, which must yield a Boolean
   result.
   The result of <token>ALL</token> is <quote>true</> if all rows yield true
   (including the case where the subquery returns no rows).
   The result is <quote>false</> if any false result is found.
   The result is NULL if the comparison does not return false for any row,
   and it returns NULL for at least one row.
-->
右辺は括弧で括られた副問い合わせで、正確に１つの列を返さなければなりません。
左辺の式は副問い合わせの結果行それぞれに対して、指定された<replaceable>operator</replaceable>を使用して評価、比較されます。なお、<replaceable>operator</replaceable>は結果として論理値を生成する必要があります。
全ての行が真になる場合（副問い合わせが行を返さない場合を含む）、<token>ALL</token>の結果は<quote>true（真）</>です。
1つでも偽の結果があると、結果は<quote>false（偽）</>です。
比較がどの行でも偽を返さず、かつ、少なくとも1つの行でNULLを返した場合、結果はNULLとなります。
  </para>

  <para>
<!--
   <token>NOT IN</token> is equivalent to <literal>&lt;&gt; ALL</literal>.
-->
   <token>NOT IN</token>は<literal>&lt;&gt; ALL</literal>と等価です。
  </para>

  <para>
<!--
   As with <token>EXISTS</token>, it's unwise to assume that the subquery will
   be evaluated completely.
-->
<token>EXISTS</token>と同様、副問い合わせが完全に評価されることを前提としてはなりません。
  </para>

<synopsis>
<replaceable>row_constructor</replaceable> <replaceable>operator</replaceable> ALL (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The left-hand side of this form of <token>ALL</token> is a row constructor,
   as described in <xref linkend="sql-syntax-row-constructors">.
   The right-hand side is a parenthesized
   subquery, which must return exactly as many columns as there are
   expressions in the left-hand row.  The left-hand expressions are
   evaluated and compared row-wise to each row of the subquery result,
   using the given <replaceable>operator</replaceable>.
   The result of <token>ALL</token> is <quote>true</> if the comparison
   returns true for all subquery rows (including the
   case where the subquery returns no rows).
   The result is <quote>false</> if the comparison returns false for any
   subquery row.
   The result is NULL if the comparison does not return false for any
   subquery row, and it returns NULL for at least one row.
-->
<token>ALL</token>のこの形式の左辺は、<xref linkend="sql-syntax-row-constructors">で説明する行コンストラクタです。
右辺は括弧で括られた副問い合わせで、左辺の行にある式の数と正確に同じ数の列を返さなければなりません。
左辺の式は副問い合わせの結果のそれぞれの行に対し、与えられた<replaceable>operator</replaceable>を使用して行に関する評価、比較が行われます。
比較した結果、すべての副問い合わせ行に対して真を返す場合（副問い合わせが行を返さないという場合も含む）、<token>ALL</token>の結果は<quote>true（真）</>となります。
比較した結果、いずれかの副問い合わせ行で偽を返す場合、この結果は<quote>false（偽）</>となります。
比較結果がすべての副問い合わせ行に対して偽を返さず、少なくとも１行でNULLを返す場合、結果はNULLとなります。
  </para>

  <para>
<!--
   See <xref linkend="row-wise-comparison"> for details about the meaning
   of a row constructor comparison.
-->
行コンストラクタに関する比較の意味については<xref linkend="row-wise-comparison">を参照してください。
  </para>
  </sect2>

  <sect2>
<!--
   <title>Single-row Comparison</title>
-->
   <title>単独行に関する比較</title>

   <indexterm zone="functions-subquery">
<!--
    <primary>comparison</primary>
-->
    <primary>比較</primary>
<!--
    <secondary>subquery result row</secondary>
-->
    <secondary>副問い合わせ結果行</secondary>
   </indexterm>

<synopsis>
<replaceable>row_constructor</replaceable> <replaceable>operator</replaceable> (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The left-hand side is a row constructor,
   as described in <xref linkend="sql-syntax-row-constructors">.
   The right-hand side is a parenthesized subquery, which must return exactly
   as many columns as there are expressions in the left-hand row. Furthermore,
   the subquery cannot return more than one row.  (If it returns zero rows,
   the result is taken to be null.)  The left-hand side is evaluated and
   compared row-wise to the single subquery result row.
-->
左辺は、<xref linkend="sql-syntax-row-constructors">で説明されている行コンストラクタです。
右辺は括弧で括られた副問い合わせで、左辺の行とまったく同じ数の列を返さなければなりません。さらに、副問い合わせは複数行を返すことはできません。
（行をまったく返さない場合、結果はNULLとみなされます。）
左辺は副問い合わせの結果の単一行に対し行全体で評価、比較が行われます。
  </para>

  <para>
<!--
   See <xref linkend="row-wise-comparison"> for details about the meaning
   of a row constructor comparison.
-->
行コンストラクタに関する比較の意味についての詳細は<xref linkend="row-wise-comparison">を参照してください。
  </para>
  </sect2>
 </sect1>


 <sect1 id="functions-comparisons">
<!--
  <title>Row and Array Comparisons</title>
-->
  <title>行と配列の比較</title>

  <indexterm>
   <primary>IN</primary>
  </indexterm>

  <indexterm>
   <primary>NOT IN</primary>
  </indexterm>

  <indexterm>
   <primary>ANY</primary>
  </indexterm>

  <indexterm>
   <primary>ALL</primary>
  </indexterm>

  <indexterm>
   <primary>SOME</primary>
  </indexterm>

  <indexterm>
<!--
   <primary>composite type</primary>
   <secondary>comparison</secondary>
-->
   <primary>複合型</primary>
   <secondary>比較</secondary>
  </indexterm>

  <indexterm>
<!--
   <primary>row-wise comparison</primary>
-->
   <primary>行に関する比較</primary>
  </indexterm>

  <indexterm>
<!--
   <primary>comparison</primary>
   <secondary>composite type</secondary>
-->
   <primary>比較</primary>
   <secondary>複合型</secondary>
  </indexterm>

  <indexterm>
<!--
   <primary>comparison</primary>
   <secondary>row constructor</secondary>
-->
   <primary>比較</primary>
   <secondary>行コンストラクタ</secondary>
  </indexterm>

  <indexterm>
   <primary>IS DISTINCT FROM</primary>
  </indexterm>

  <indexterm>
   <primary>IS NOT DISTINCT FROM</primary>
  </indexterm>

  <para>
<!--
   This section describes several specialized constructs for making
   multiple comparisons between groups of values.  These forms are
   syntactically related to the subquery forms of the previous section,
   but do not involve subqueries.
   The forms involving array subexpressions are
   <productname>PostgreSQL</productname> extensions; the rest are
   <acronym>SQL</acronym>-compliant.
   All of the expression forms documented in this section return
   Boolean (true/false) results.
-->
本節では、値のグループ間で複数の比較を行う、さまざまな特殊化したコンストラクトについて説明します。
この形式は構文的には、前節の副問い合わせ形式と関係しています。しかし、副問い合わせを含みません。
配列副式を含む形式は<productname>PostgreSQL</productname>の拡張ですが、それ以外は<acronym>SQL</acronym>準拠です。
本節で記載した全ての式形式は結果として論理値（真/偽）を返します。
  </para>

  <sect2 id="functions-comparisons-in-scalar">
   <title><literal>IN</literal></title>

<synopsis>
<replaceable>expression</replaceable> IN (<replaceable>value</replaceable> <optional>, ...</optional>)
</synopsis>

  <para>
<!--
   The right-hand side is a parenthesized list
   of scalar expressions.  The result is <quote>true</> if the left-hand expression's
   result is equal to any of the right-hand expressions.  This is a shorthand
   notation for
-->
右辺は括弧で括られたスカラ式のリストです。
左辺の式の結果が右辺の式のいずれかと等しい場合、結果は<quote>true（真）</>になります。
これは以下の省略形です。

<synopsis>
<replaceable>expression</replaceable> = <replaceable>value1</replaceable>
OR
<replaceable>expression</replaceable> = <replaceable>value2</replaceable>
OR
...
</synopsis>
  </para>

  <para>
<!--
   Note that if the left-hand expression yields null, or if there are
   no equal right-hand values and at least one right-hand expression yields
   null, the result of the <token>IN</token> construct will be null, not false.
   This is in accordance with SQL's normal rules for Boolean combinations
   of null values.
-->
左辺の式がNULLを生じる場合、または右側の値に等しいものがなくて少なくとも1つの右辺の行がNULLを持つ場合、<token>IN</token>構文の結果は偽ではなくNULLとなることに注意してください。
これは、NULL値の論理的な組み合わせに対するSQLの標準規則に従うものです。
  </para>
  </sect2>

  <sect2>
   <title><literal>NOT IN</literal></title>

<synopsis>
<replaceable>expression</replaceable> NOT IN (<replaceable>value</replaceable> <optional>, ...</optional>)
</synopsis>

  <para>
<!--
   The right-hand side is a parenthesized list
   of scalar expressions.  The result is <quote>true</quote> if the left-hand expression's
   result is unequal to all of the right-hand expressions.  This is a shorthand
   notation for
-->
右辺は括弧で括られたスカラ式のリストです。
左辺の式の結果が右辺の式の全てと等しくない場合、結果は<quote>真</>です。
これは以下の省略形です。

<synopsis>
<replaceable>expression</replaceable> &lt;&gt; <replaceable>value1</replaceable>
AND
<replaceable>expression</replaceable> &lt;&gt; <replaceable>value2</replaceable>
AND
...
</synopsis>
  </para>

  <para>
<!--
   Note that if the left-hand expression yields null, or if there are
   no equal right-hand values and at least one right-hand expression yields
   null, the result of the <token>NOT IN</token> construct will be null, not true
   as one might naively expect.
   This is in accordance with SQL's normal rules for Boolean combinations
   of null values.
-->
左辺の式でNULLが生じる場合、または右辺の値に左辺の式と等しいものがなく、かつ少なくとも1つの右辺の式がNULLを生じる場合、<token>NOT IN</token>構文の結果は、一部の人が予想する真ではなく、NULLとなることに注意してください。
これは、NULL値の論理的な組み合わせに対するSQLの標準規則に従うものです。
  </para>

  <tip>
  <para>
<!--
   <literal>x NOT IN y</literal> is equivalent to <literal>NOT (x IN y)</literal> in all
   cases.  However, null values are much more likely to trip up the novice when
   working with <token>NOT IN</token> than when working with <token>IN</token>.
   It is best to express your condition positively if possible.
-->
全ての場合において、<literal>x NOT IN y</literal>は<literal>NOT (x IN y)</literal>と等価です。
しかし、<token>IN</token>を使用するよりも<token>NOT IN</token>を使用する方が初心者がNULL値による間違いをしやすくなります。
可能な限り条件を肯定的に表現することが最善です。
  </para>
  </tip>
  </sect2>

  <sect2>
<!--
   <title><literal>ANY</literal>/<literal>SOME</literal> (array)</title>
-->
   <title><literal>ANY</literal>/<literal>SOME</literal> (配列)</title>

<synopsis>
<replaceable>expression</replaceable> <replaceable>operator</replaceable> ANY (<replaceable>array expression</replaceable>)
<replaceable>expression</replaceable> <replaceable>operator</replaceable> SOME (<replaceable>array expression</replaceable>)
</synopsis>

  <para>
<!--
   The right-hand side is a parenthesized expression, which must yield an
   array value.
   The left-hand expression
   is evaluated and compared to each element of the array using the
   given <replaceable>operator</replaceable>, which must yield a Boolean
   result.
   The result of <token>ANY</token> is <quote>true</> if any true result is obtained.
   The result is <quote>false</> if no true result is found (including the
   case where the array has zero elements).
-->
右辺は括弧で括られた式で、配列値を返さなければなりません。
左辺の式は配列要素それぞれに対して、指定された<replaceable>operator</replaceable>を使用して評価、比較されます。なお、<replaceable>operator</replaceable>は結果として論理値を生成する必要があります。
真の結果が１つでもあると、<token>ANY</token>の結果は<quote>true（真）</>です。
真の結果がない（配列の要素数がゼロである場合を含む）と、結果は<quote>false（偽）</>です。
  </para>

  <para>
<!--
   If the array expression yields a null array, the result of
   <token>ANY</token> will be null.  If the left-hand expression yields null,
   the result of <token>ANY</token> is ordinarily null (though a non-strict
   comparison operator could possibly yield a different result).
   Also, if the right-hand array contains any null elements and no true
   comparison result is obtained, the result of <token>ANY</token>
   will be null, not false (again, assuming a strict comparison operator).
   This is in accordance with SQL's normal rules for Boolean combinations
   of null values.
-->
配列式がNULL配列を生成する場合、<token>ANY</token>の結果はNULLになります。
左辺式がNULLとなる場合、<token>ANY</token>の結果は通常NULLになります（STRICTでない比較演算子では異なる結果になるかもしれません）。
また、右辺の配列にNULL要素が含まれ、かつ、比較の結果、真が得られなかった場合、<token>ANY</token>の結果は偽ではなくNULLになります（ここでも、STRICTな演算子の場合です）。
これは、NULLに対する、SQLの論理値組み合わせに関する標準規則に従うものです。
  </para>

  <para>
<!--
   <token>SOME</token> is a synonym for <token>ANY</token>.
-->
<token>SOME</token>は<token>ANY</token>の同義語です。
  </para>
  </sect2>

  <sect2>
<!--
   <title><literal>ALL</literal> (array)</title>
-->
   <title><literal>ALL</literal> (配列)</title>

<synopsis>
<replaceable>expression</replaceable> <replaceable>operator</replaceable> ALL (<replaceable>array expression</replaceable>)
</synopsis>

  <para>
<!--
   The right-hand side is a parenthesized expression, which must yield an
   array value.
   The left-hand expression
   is evaluated and compared to each element of the array using the
   given <replaceable>operator</replaceable>, which must yield a Boolean
   result.
   The result of <token>ALL</token> is <quote>true</> if all comparisons yield true
   (including the case where the array has zero elements).
   The result is <quote>false</> if any false result is found.
-->
右辺は括弧で括られた式で、配列値を返さなければなりません。
左辺の式は配列の要素それぞれに対して、指定された<replaceable>operator</replaceable>を使用して評価、比較されます。なお、<replaceable>operator</replaceable>は結果として論理値を生成する必要があります。
全ての比較が真になる場合（配列の要素数がゼロである場合を含む）、<token>ALL</token>の結果は<quote>true（真）</>です。
1つでも偽の結果があると、結果は<quote>false（偽）</>です。
  </para>

  <para>
<!--
   If the array expression yields a null array, the result of
   <token>ALL</token> will be null.  If the left-hand expression yields null,
   the result of <token>ALL</token> is ordinarily null (though a non-strict
   comparison operator could possibly yield a different result).
   Also, if the right-hand array contains any null elements and no false
   comparison result is obtained, the result of <token>ALL</token>
   will be null, not true (again, assuming a strict comparison operator).
   This is in accordance with SQL's normal rules for Boolean combinations
   of null values.
-->
配列式がNULL配列を生成する場合、<token>ALL</token>の結果はNULLになります。
左辺式がNULLとなる場合、<token>ALL</token>の結果は通常NULLになります（厳格でない比較演算子では異なる結果になるかもしれません）。
また、右辺の配列にNULL要素が含まれ、かつ、比較の結果、偽が得られなかった場合、<token>ALL</token>の結果は真ではなくNULLになります（ここでも、厳格な演算子の場合です）。
これは、NULLに対する、SQLの論理値組み合わせに関する標準規則に従うものです。
  </para>
  </sect2>

  <sect2 id="row-wise-comparison">
<!--
   <title>Row Constructor Comparison</title>
-->
   <title>行コンストラクタの比較</title>

<synopsis>
<replaceable>row_constructor</replaceable> <replaceable>operator</replaceable> <replaceable>row_constructor</replaceable>
</synopsis>

  <para>
<!--
   Each side is a row constructor,
   as described in <xref linkend="sql-syntax-row-constructors">.
   The two row values must have the same number of fields.
   Each side is evaluated and they are compared row-wise.  Row constructor
   comparisons are allowed when the <replaceable>operator</replaceable> is
   <literal>=</>,
   <literal>&lt;&gt;</>,
   <literal>&lt;</>,
   <literal>&lt;=</>,
   <literal>&gt;</> or
   <literal>&gt;=</>.
   Every row element must be of a type which has a default B-tree operator
   class or the attempted comparison may generate an error.
-->
両辺とも<xref linkend="sql-syntax-row-constructors">で説明する行コンストラクタです。
この２つの行値は同じフィールド数でなければなりません。
両辺はそれぞれ評価され、行として比較されます。
行コンストラクタの比較は、<replaceable>operator</replaceable>が<literal>=</>、<literal>&lt;&gt;</>、<literal>&lt;</>、<literal>&lt;=</>、<literal>&gt;</>、<literal>&gt;=</>の場合に認められます。
各行の要素はデフォルトのB-tree演算子クラスを持つ型でなければなりません。そうでなければ、比較を試みるとエラーが発生します。
  </para>

  <note>
   <para>
<!--
    Errors related to the number or types of elements might not occur if
    the comparison is resolved using earlier columns.
-->
比較が先行する列で解決された場合、要素の数や型に関係するエラーは起きないこともあります。
   </para>
  </note>

  <para>
<!--
   The <literal>=</> and <literal>&lt;&gt;</> cases work slightly differently
   from the others.  Two rows are considered
   equal if all their corresponding members are non-null and equal; the rows
   are unequal if any corresponding members are non-null and unequal;
   otherwise the result of the row comparison is unknown (null).
-->
<literal>=</>と<literal>&lt;&gt;</>の場合、他と動作が多少異なります。
2つの行は対応する全ての構成要素が非NULLかつ等しい場合に等しいとみなされます。
１つでも構成要素が非NULLかつ等しくない場合、2つの行は等しくないとみなされます。
それ以外の場合、その行の比較結果は不明（NULL）です。
  </para>

  <para>
<!--
   For the <literal>&lt;</>, <literal>&lt;=</>, <literal>&gt;</> and
   <literal>&gt;=</> cases, the row elements are compared left-to-right,
   stopping as soon as an unequal or null pair of elements is found.
   If either of this pair of elements is null, the result of the
   row comparison is unknown (null); otherwise comparison of this pair
   of elements determines the result.  For example,
   <literal>ROW(1,2,NULL) &lt; ROW(1,3,0)</>
   yields true, not null, because the third pair of elements are not
   considered.
-->
<literal>&lt;</>、<literal>&lt;=</>、<literal>&gt;</>、<literal>&gt;=</>の場合、行の要素は左から右に比較されます。そして、不等またはNULLの組み合わせが見つかったところで停止します。
要素の組み合わせのどちらかがNULLであった場合、行比較の結果は不明（NULL）です。さもなくば、要素の組み合わせの比較により結果が決まります。
例えば、<literal>ROW(1,2,NULL) &lt; ROW(1,3,0)</>は、３番目の要素の組み合わせまで進まないため、NULLではなく真を返します。
  </para>

  <note>
   <para>
<!--
    Prior to <productname>PostgreSQL</productname> 8.2, the
    <literal>&lt;</>, <literal>&lt;=</>, <literal>&gt;</> and <literal>&gt;=</>
    cases were not handled per SQL specification.  A comparison like
    <literal>ROW(a,b) &lt; ROW(c,d)</>
    was implemented as
    <literal>a &lt; c AND b &lt; d</>
    whereas the correct behavior is equivalent to
    <literal>a &lt; c OR (a = c AND b &lt; d)</>.
-->
<productname>PostgreSQL</productname>の8.2より前では、<literal>&lt;</>、<literal>&lt;=</>、<literal>&gt;</> 、<literal>&gt;=</>の場合SQL仕様に従っていませんでした。
<literal>ROW(a,b) &lt; ROW(c,d)</>などの比較は正しくは<literal>a &lt; c OR (a = c AND b &lt; d)</>ですが、<literal>a &lt; c AND b &lt; d</>として実装されていました。
   </para>
  </note>

<synopsis>
<replaceable>row_constructor</replaceable> IS DISTINCT FROM <replaceable>row_constructor</replaceable>
</synopsis>

  <para>
<!--
   This construct is similar to a <literal>&lt;&gt;</literal> row comparison,
   but it does not yield null for null inputs.  Instead, any null value is
   considered unequal to (distinct from) any non-null value, and any two
   nulls are considered equal (not distinct).  Thus the result will
   either be true or false, never null.
-->
このコンストラクトは<literal>&lt;&gt;</literal>行比較と類似していますが、NULL入力に対してNULLを生成しない点が異なります。
その代わりに、全てのNULL値は非NULL値と等しくない（DISTINCT FROM）ものとみなされ、また、２つのNULLは等しい（NOT DISTINCT）ものとみなされます。
したがって、結果は真か偽のいずれかで、NULLにはなりません。
  </para>

<synopsis>
<replaceable>row_constructor</replaceable> IS NOT DISTINCT FROM <replaceable>row_constructor</replaceable>
</synopsis>

  <para>
<!--
   This construct is similar to a <literal>=</literal> row comparison,
   but it does not yield null for null inputs.  Instead, any null value is
   considered unequal to (distinct from) any non-null value, and any two
   nulls are considered equal (not distinct).  Thus the result will always
   be either true or false, never null.
-->
このコンストラクトは<literal>=</literal>行比較と類似していますが、NULL入力に対してNULLを生成しません。
代わりに、NULL値を、すべての非NULLの値に対して不等（DISTINCT FROM）とみなし、２つのNULLを等しいもの（NOT DISTINCT）とみなします。
したがって、結果は常に真か偽となり、NULLになることはありません
  </para>

  </sect2>

  <sect2 id="composite-type-comparison">
<!--
   <title>Composite Type Comparison</title>
-->
   <title>複合型の比較</title>

<synopsis>
<replaceable>record</replaceable> <replaceable>operator</replaceable> <replaceable>record</replaceable>
</synopsis>

  <para>
<!--
   The SQL specification requires row-wise comparison to return NULL if the
   result depends on comparing two NULL values or a NULL and a non-NULL.
   <productname>PostgreSQL</productname> does this only when comparing the
   results of two row constructors (as in
   <xref linkend="row-wise-comparison">) or comparing a row constructor
   to the output of a subquery (as in <xref linkend="functions-subquery">).
   In other contexts where two composite-type values are compared, two
   NULL field values are considered equal, and a NULL is considered larger
   than a non-NULL.  This is necessary in order to have consistent sorting
   and indexing behavior for composite types.
-->
SQL仕様では、結果が2つのNULL値、またはNULLと非NULLの比較に依存するのであれば、行の観点からの比較はNULLを返すことを要求されています。
<productname>PostgreSQL</productname>は、(<xref linkend="row-wise-comparison">にあるように)２つの行コンストラクタの出力の比較を行う時、または副問い合わせの出力に対し(<xref linkend="functions-subquery">にあるように)行コンストラクタの比較を行う時のみこれを実施します。
２つの複合型の値が比較されるほかの状況では、２つのNULLフィールドの値は等しいと考えられ、NULLは非NULLより大きいとみなされます。
複合型に対して、これは一貫した並び替えとインデックス付け動作担保のため必要です。
  </para>

  <para>
<!--
   Each side is evaluated and they are compared row-wise.  Composite type
   comparisons are allowed when the <replaceable>operator</replaceable> is
   <literal>=</>,
   <literal>&lt;&gt;</>,
   <literal>&lt;</>,
   <literal>&lt;=</>,
   <literal>&gt;</> or
   <literal>&gt;=</>,
   or has semantics similar to one of these.  (To be specific, an operator
   can be a row comparison operator if it is a member of a B-tree operator
   class, or is the negator of the <literal>=</> member of a B-tree operator
   class.)  The default behavior of the above operators is the same as for
   <literal>IS [ NOT ] DISTINCT FROM</literal> for row constructors (see
   <xref linkend="row-wise-comparison">).
-->
各辺が評価され、行単位で比較が行なわれます。
複合型の比較は<replaceable>operator</replaceable>が<literal>=</>、<literal>&lt;&gt;</>、<literal>&lt;</>、<literal>&lt;=</>、<literal>&gt;</>、<literal>&gt;=</>またはそのいずれかと類似の意味を持つ場合に許されます。
(正確には、演算子はB-tree演算子クラスのメンバである場合、またはB-tree演算子クラスの<literal>=</>メンバの否定子である場合に行比較演算子となり得ます。)
上記の演算子のデフォルトの動作は、行コンストラクタに対する<literal>IS [ NOT ] DISTINCT FROM</literal>と同じです（<xref linkend="row-wise-comparison">参照）。
  </para>

  <para>
<!--
   To support matching of rows which include elements without a default
   B-tree operator class, the following operators are defined for composite
   type comparison:
   <literal>*=</>,
   <literal>*&lt;&gt;</>,
   <literal>*&lt;</>,
   <literal>*&lt;=</>,
   <literal>*&gt;</>, and
   <literal>*&gt;=</>.
   These operators compare the internal binary representation of the two
   rows.  Two rows might have a different binary representation even
   though comparisons of the two rows with the equality operator is true.
   The ordering of rows under these comparison operators is deterministic
   but not otherwise meaningful.  These operators are used internally for
   materialized views and might be useful for other specialized purposes
   such as replication but are not intended to be generally useful for
   writing queries.
-->
デフォルトのB-tree演算子クラスを持たない要素を含む行の一致をサポートするために、いくつかの演算子が複合型の比較のために定義されています。
それは<literal>*=</>、<literal>*&lt;&gt;</>、<literal>*&lt;</>、<literal>*&lt;=</>、<literal>*&gt;</>、<literal>*&gt;=</>です。
上記の演算子は2つの行の内部バイナリ表現を比較します。
2つの行の等価演算子での比較が真であっても、2つの行はバイナリ表現が異なるかもしれません。
上記の比較演算子での行の順序は決定論的ですが、それ以外は意味がありません。
上記の演算子はマテリアライズドビューで内部的に使われ、レプリケーションのような他の特定の目的のためには有用かもしれませんが、問い合わせを書くのに一般的に有用であるようにとは意図していません。
  </para>
  </sect2>
 </sect1>

 <sect1 id="functions-srf">
<!--
  <title>Set Returning Functions</title>
-->
  <title>集合を返す関数</title>

  <indexterm zone="functions-srf">
<!--
   <primary>set returning functions</primary>
-->
   <primary>集合を返す関数</primary>
<!--
   <secondary>functions</secondary>
-->
   <secondary>関数</secondary>
  </indexterm>

  <indexterm>
   <primary>generate_series</primary>
  </indexterm>

  <para>
<!--
   This section describes functions that possibly return more than one row.
   The most widely used functions in this class are series generating
   functions, as detailed in <xref linkend="functions-srf-series"> and
   <xref linkend="functions-srf-subscripts">.  Other, more specialized
   set-returning functions are described elsewhere in this manual.
   See <xref linkend="queries-tablefunctions"> for ways to combine multiple
   set-returning functions.
-->
本節では、場合により複数行を返す関数について説明します。
このクラスで最も広く用いられている関数は、<xref linkend="functions-srf-series">、および<xref linkend="functions-srf-subscripts">にて詳細が触れられている、連続値生成関数です。
他方、より特化された集合を返す関数の記述がこのマニュアルの他の場所にあります。
集合を返す関数を複数組み合わせる方法については<xref linkend="queries-tablefunctions">を参照してください。
  </para>

  <table id="functions-srf-series">
<!--
   <title>Series Generating Functions</title>
-->
   <title>連続値生成関数</title>
   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Function</entry>
      <entry>Argument Type</entry>
      <entry>Return Type</entry>
      <entry>Description</entry>
-->
      <entry>関数</entry>
      <entry>引数型</entry>
      <entry>戻り型</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal><function>generate_series(<parameter>start</parameter>, <parameter>stop</parameter>)</function></literal></entry>
<!--
      <entry><type>int</type>, <type>bigint</type> or <type>numeric</type></entry>
-->
      <entry><type>int</type>、<type>bigint</type>、または<type>numeric</type></entry>
<!--
      <entry><type>setof int</type>, <type>setof bigint</type>, or <type>setof numeric</type> (same as argument type)</entry>
-->
      <entry><type>setof int</type>、<type>setof bigint</type>または<type>setof numeric</type>（引数の型と同一）</entry>
      <entry>
<!--
       Generate a series of values, from <parameter>start</parameter> to <parameter>stop</parameter>
       with a step size of one
-->
      <parameter>start</parameter>から<parameter>stop</parameter>まで、刻み１で連続する値を生成します。
      </entry>
     </row>

     <row>
      <entry><literal><function>generate_series(<parameter>start</parameter>, <parameter>stop</parameter>, <parameter>step</parameter>)</function></literal></entry>
<!--
      <entry><type>int</type>, <type>bigint</type> or <type>numeric</type></entry>
-->
      <entry><type>int</type>、<type>bigint</type>または<type>numeric</type></entry>
<!--
      <entry><type>setof int</type>, <type>setof bigint</type> or <type>setof numeric</type> (same as argument type)</entry>
-->
      <entry><type>setof int</type>、<type>setof bigint</type>または<type>setof numeric</type>（引数の型と同一）</entry>
      <entry>
<!--
       Generate a series of values, from <parameter>start</parameter> to <parameter>stop</parameter>
       with a step size of <parameter>step</parameter>
-->
       <parameter>start</parameter>から<parameter>stop</parameter>まで、刻み<parameter>step</parameter>で連続する値を生成します。
      </entry>
     </row>

     <row>
      <entry><literal><function>generate_series(<parameter>start</parameter>, <parameter>stop</parameter>, <parameter>step</parameter> <type>interval</>)</function></literal></entry>
<!--
      <entry><type>timestamp</type> or <type>timestamp with time zone</type></entry>
-->
      <entry><type>timestamp</type> または <type>timestamp with time zone</type></entry>
<!--
      <entry><type>setof timestamp</type> or <type>setof timestamp with time zone</type> (same as argument type)</entry>
-->
      <entry><type>setof timestamp</type> または <type>setof timestamp with time zone</type>（引数型と同じ）</entry>
      <entry>
<!--
       Generate a series of values, from <parameter>start</parameter> to <parameter>stop</parameter>
       with a step size of <parameter>step</parameter>
-->
       <parameter>start</parameter>から<parameter>stop</parameter>まで、刻み<parameter>step</parameter>で連続する値を生成します。
      </entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   When <parameter>step</parameter> is positive, zero rows are returned if
   <parameter>start</parameter> is greater than <parameter>stop</parameter>.
   Conversely, when <parameter>step</parameter> is negative, zero rows are
   returned if <parameter>start</parameter> is less than <parameter>stop</parameter>.
   Zero rows are also returned for <literal>NULL</literal> inputs. It is an error
   for <parameter>step</parameter> to be zero. Some examples follow:
-->
<parameter>step</parameter>が正の場合、<parameter>start</parameter>が<parameter>stop</parameter>よりも大きいと０行が返ります。
反対に、<parameter>step</parameter>が負の場合は、<parameter>start</parameter>が<parameter>stop</parameter>よりも小さいと０行が返ります。
また、<literal>NULL</literal>が入力された場合も０行が返ります。
<parameter>step</parameter>が０の時はエラーになります。
以下にいくつか例を示します。
<programlisting>
SELECT * FROM generate_series(2,4);
 generate_series
-----------------
               2
               3
               4
(3 rows)

SELECT * FROM generate_series(5,1,-2);
 generate_series
-----------------
               5
               3
               1
(3 rows)

SELECT * FROM generate_series(4,3);
 generate_series
-----------------
(0 rows)

SELECT generate_series(1.1, 4, 1.3);
 generate_series 
-----------------
             1.1
             2.4
             3.7
(3 rows)

<!--
&#045;- this example relies on the date-plus-integer operator
-->
-- この例は日付に整数を足し込む演算子に依存します。
SELECT current_date + s.a AS dates FROM generate_series(0,14,7) AS s(a);
   dates
------------
 2004-02-05
 2004-02-12
 2004-02-19
(3 rows)

SELECT * FROM generate_series('2008-03-01 00:00'::timestamp,
                              '2008-03-04 12:00', '10 hours');
   generate_series   
---------------------
 2008-03-01 00:00:00
 2008-03-01 10:00:00
 2008-03-01 20:00:00
 2008-03-02 06:00:00
 2008-03-02 16:00:00
 2008-03-03 02:00:00
 2008-03-03 12:00:00
 2008-03-03 22:00:00
 2008-03-04 08:00:00
(9 rows)
</programlisting>
  </para>

  <table id="functions-srf-subscripts">
<!--
   <title>Subscript Generating Functions</title>
-->
   <title>添え字生成関数</title>
   <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>Function</entry>
      <entry>Return Type</entry>
      <entry>Description</entry>
-->
      <entry>関数</entry>
      <entry>戻り値型</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal><function>generate_subscripts(<parameter>array anyarray</parameter>, <parameter>dim int</parameter>)</function></literal></entry>
      <entry><type>setof int</type></entry>
      <entry>
<!--
       Generate a series comprising the given array's subscripts.
-->
       指定した配列の添え字を構成する連番を生成します。
      </entry>
     </row>

     <row>
      <entry><literal><function>generate_subscripts(<parameter>array anyarray</parameter>, <parameter>dim int</parameter>, <parameter>reverse boolean</parameter>)</function></literal></entry>
      <entry><type>setof int</type></entry>
      <entry>
<!--
       Generate a series comprising the given array's subscripts. When
       <parameter>reverse</parameter> is true, the series is returned in
       reverse order.
-->
       指定した配列の添え字を構成する連番を生成します。
       <parameter>reverse</parameter>が真の場合、連番は逆順に返されます。
      </entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <indexterm>
   <primary>generate_subscripts</primary>
  </indexterm>

  <para>
<!--
   <function>generate_subscripts</> is a convenience function that generates
   the set of valid subscripts for the specified dimension of the given
   array.
   Zero rows are returned for arrays that do not have the requested dimension,
   or for NULL arrays (but valid subscripts are returned for NULL array
   elements).  Some examples follow:
-->
<function>generate_subscripts</>は、指定した配列の指定した次数で有効な添え字からなる集合を生成するために便利な関数です。
要求された次数を持たない配列またはNULL配列では行は返されません。
しかしこれはNULL配列要素では有効な添え字です。）
いくつかの例を以下に示します。
   
<programlisting>
<!--
&#045;- basic usage
-->
-- 基本的用法
SELECT generate_subscripts('{NULL,1,NULL,2}'::int[], 1) AS s;
 s 
---
 1
 2
 3
 4
(4 rows)

<!--
&#045;- presenting an array, the subscript and the subscripted
&#045;- value requires a subquery
-->
-- 配列、添え字とその添え字が示す値を表示するには
-- 副問い合わせが必要です。
SELECT * FROM arrays;
         a          
--------------------
 {-1,-2}
 {100,200,300}
(2 rows)

SELECT a AS array, s AS subscript, a[s] AS value
FROM (SELECT generate_subscripts(a, 1) AS s, a FROM arrays) foo;
     array     | subscript | value
---------------+-----------+-------
 {-1,-2}       |         1 |    -1
 {-1,-2}       |         2 |    -2
 {100,200,300} |         1 |   100
 {100,200,300} |         2 |   200
 {100,200,300} |         3 |   300
(5 rows)

<!--
&#045;- unnest a 2D array
-->
-- 2次元配列の入れ子を解きます。
CREATE OR REPLACE FUNCTION unnest2(anyarray)
RETURNS SETOF anyelement AS $$
select $1[i][j]
   from generate_subscripts($1,1) g1(i),
        generate_subscripts($1,2) g2(j);
$$ LANGUAGE sql IMMUTABLE;
CREATE FUNCTION
SELECT * FROM unnest2(ARRAY[[1,2],[3,4]]);
 unnest2 
---------
       1
       2
       3
       4
(4 rows)
</programlisting>
  </para>

  <indexterm>
<!--
   <primary>ordinality</primary>
-->
   <primary>順序性</primary>
  </indexterm>

  <para>
<!--
   When a function in the <literal>FROM</literal> clause is suffixed
   by <literal>WITH ORDINALITY</literal>, a <type>bigint</type> column is
   appended to the output which starts from 1 and increments by 1 for each row
   of the function's output.  This is most useful in the case of set returning
   functions such as <function>unnest()</>.
-->
<literal>FROM</literal>句の関数の後に<literal>WITH ORDINALITY</literal>が付いている場合、1から始まり関数の出力の行毎に1増えていく<type>bigint</type>列が出力に追加されます。
これは<function>unnest()</>のような集合を返す関数の場合に最も役に立ちます。

<programlisting>
<!--
&#045;- set returning function WITH ORDINALITY
-->
-- WITH ORDINALITYの付いた集合を返す関数
SELECT * FROM pg_ls_dir('.') WITH ORDINALITY AS t(ls,n);
       ls        | n
-----------------+----
 pg_serial       |  1
 pg_twophase     |  2
 postmaster.opts |  3
 pg_notify       |  4
 postgresql.conf |  5
 pg_tblspc       |  6
 logfile         |  7
 base            |  8
 postmaster.pid  |  9
 pg_ident.conf   | 10
 global          | 11
 pg_xact         | 12
 pg_snapshots    | 13
 pg_multixact    | 14
 PG_VERSION      | 15
 pg_wal          | 16
 pg_hba.conf     | 17
 pg_stat_tmp     | 18
 pg_subtrans     | 19
(19 rows)
</programlisting>
  </para>

 </sect1>

 <sect1 id="functions-info">
<!--
  <title>System Information Functions</title>
-->
  <title>システム情報関数</title>

  <para>
<!--
   <xref linkend="functions-info-session-table"> shows several
   functions that extract session and system information.
-->
<xref linkend="functions-info-session-table">に、セッションおよびシステムの情報を抽出する関数を示します。
  </para>

  <para>
<!--
   In addition to the functions listed in this section, there are a number of
   functions related to the statistics system that also provide system
   information. See <xref linkend="monitoring-stats-views"> for more
   information.
-->
本節で列挙されている関数のほかに、同様にシステム情報を提供する統計システムに関連した数多くの関数があります。
<xref linkend="monitoring-stats-views">にさらに情報があります。
  </para>

   <table id="functions-info-session-table">
<!--
    <title>Session Information Functions</title>
-->
    <title>セッション情報関数</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry></row>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry></row>
     </thead>

     <tbody>
      <row>
       <entry><literal><function>current_catalog</function></literal></entry>
       <entry><type>name</type></entry>
<!--
       <entry>name of current database (called <quote>catalog</quote> in the SQL standard)</entry>
-->
       <entry>現在のデータベースの名前（SQL標準では<quote>カタログ</quote>と呼ばれる）</entry>
      </row>

      <row>
       <entry><literal><function>current_database()</function></literal></entry>
       <entry><type>name</type></entry>
<!--
       <entry>name of current database</entry>
-->
       <entry>現在のデータベースの名前</entry>
      </row>

      <row>
       <entry><literal><function>current_query()</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>text of the currently executing query, as submitted
       by the client (might contain more than one statement)</entry>
-->
       <entry>クライアントから提示された、現在実行中問い合わせのテキスト（複数の文を含むことあり）</entry>
      </row>

      <row>
       <entry><literal><function>current_role</function></literal></entry>
       <entry><type>name</type></entry>
<!--
       <entry>equivalent to <function>current_user</function></entry>
-->
       <entry><function>current_user</function>と同等</entry>
      </row>

      <row>
       <entry><literal><function>current_schema</function>[()]</literal></entry>
       <entry><type>name</type></entry>
<!--
       <entry>name of current schema</entry>
-->
       <entry>現在のスキーマの名前</entry>
      </row>

      <row>
       <entry><literal><function>current_schemas(<type>boolean</type>)</function></literal></entry>
       <entry><type>name[]</type></entry>
<!--
       <entry>names of schemas in search path, optionally including implicit schemas</entry>
-->
       <entry>検索パス内のスキーマの名前、オプションにより暗黙的なスキーマも含める</entry>
      </row>

      <row>
       <entry><literal><function>current_user</function></literal></entry>
       <entry><type>name</type></entry>
<!--
       <entry>user name of current execution context</entry>
-->
       <entry>現在の処理実施コンテキストのユーザ名</entry>
      </row>

      <row>
       <entry><literal><function>inet_client_addr()</function></literal></entry>
       <entry><type>inet</type></entry>
<!--
       <entry>address of the remote connection</entry>
-->
       <entry>リモート接続のアドレス</entry>
      </row>

      <row>
       <entry><literal><function>inet_client_port()</function></literal></entry>
       <entry><type>int</type></entry>
<!--
       <entry>port of the remote connection</entry>
-->
       <entry>リモート接続のポート</entry>
      </row>

      <row>
       <entry><literal><function>inet_server_addr()</function></literal></entry>
       <entry><type>inet</type></entry>
<!--
       <entry>address of the local connection</entry>
-->
       <entry>ローカル接続のアドレス</entry>
      </row>

      <row>
       <entry><literal><function>inet_server_port()</function></literal></entry>
       <entry><type>int</type></entry>
<!--
       <entry>port of the local connection</entry>
-->
       <entry>ローカル接続のポート</entry>
      </row>

      <row>
       <!-- See also the entry for this in monitoring.sgml -->
       <!-- これについてmonitoring.sgmlの項目も参照 -->
       <entry><literal><function>pg_backend_pid()</function></literal></entry>
       <entry><type>int</type></entry>
       <entry>
<!--
        Process ID of the server process attached to the current session
-->
        現在のセッションに結びついたサーバプロセスのプロセスID
       </entry>
      </row>

      <row>
       <entry><literal><function>pg_blocking_pids(<type>int</type>)</function></literal></entry>
       <entry><type>int[]</type></entry>
<!--
       <entry>Process ID(s) that are blocking specified server process ID from acquiring a lock</entry>
-->
       <entry>指定のサーバプロセスIDによるロック取得をブロックしているプロセスID</entry>
      </row>

      <row>
       <entry><literal><function>pg_conf_load_time()</function></literal></entry>
       <entry><type>timestamp with time zone</type></entry>
<!--
       <entry>configuration load time</entry>
-->
       <entry>設定を読み込んだ時刻</entry>
      </row>

      <row>
       <entry><literal><function>pg_current_logfile(<optional><type>text</></optional>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>Primary log file name, or log in the requested format,
       currently in use by the logging collector</entry>
-->
       <entry>ログ収集機構が現在使用しているプライマリ、または指定のフォーマットのログのログファイルの名前</entry>
      </row>

      <row>
       <entry><literal><function>pg_my_temp_schema()</function></literal></entry>
       <entry><type>oid</type></entry>
<!--
       <entry>OID of session's temporary schema, or 0 if none</entry>
-->
       <entry>セッションの一時スキーマのOID、なければ0</entry>
      </row>

      <row>
       <entry><literal><function>pg_is_other_temp_schema(<type>oid</type>)</function></literal></entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>is schema another session's temporary schema?</entry>
-->
       <entry>スキーマが他のセッションの一時スキーマかどうか？</entry>
      </row>

      <row>
       <entry><literal><function>pg_listening_channels()</function></literal></entry>
       <entry><type>setof text</type></entry>
<!--
       <entry>channel names that the session is currently listening on</entry>
-->
       <entry>今のセッションにおいて現在待ち受け中のチャンネル名</entry>
      </row>

      <row>
       <entry><literal><function>pg_notification_queue_usage()</function></literal></entry>
       <entry><type>double</type></entry>
<!--
       <entry>fraction of the asynchronous notification queue currently occupied (0-1)</entry>
-->
       <entry>非同期通知キューのうち、現在占められている割合（0から1まで）</entry>
      </row>

      <row>
       <entry><literal><function>pg_postmaster_start_time()</function></literal></entry>
       <entry><type>timestamp with time zone</type></entry>
<!--
       <entry>server start time</entry>
-->
       <entry>サーバの起動時刻</entry>
      </row>

      <row>
       <entry><literal><function>pg_safe_snapshot_blocking_pids(<type>int</type>)</function></literal></entry>
       <entry><type>int[]</type></entry>
<!--
       <entry>Process ID(s) that are blocking specified server process ID from acquiring a safe snapshot</entry>
-->
       <entry>指定のサーバプロセスIDによる安全なスナップショットの取得をブロックしているプロセスID</entry>
      </row>

      <row>
       <entry><literal><function>pg_trigger_depth()</function></literal></entry>
       <entry><type>int</type></entry>
<!--
       <entry>current nesting level of <productname>PostgreSQL</> triggers
       (0 if not called, directly or indirectly, from inside a trigger)</entry>
-->
       <entry><productname>PostgreSQL</>のトリガの現在の入れ子の深さ (直接的であれ間接的であれ、トリガ内部から呼ばれていなければ0を返す)</entry>
      </row>

      <row>
       <entry><literal><function>session_user</function></literal></entry>
       <entry><type>name</type></entry>
<!--
       <entry>session user name</entry>
-->
       <entry>セッションのユーザ名</entry>
      </row>

      <row>
       <entry><literal><function>user</function></literal></entry>
       <entry><type>name</type></entry>
<!--
       <entry>equivalent to <function>current_user</function></entry>
-->
       <entry><function>current_user</function>と等価</entry>
      </row>

      <row>
       <entry><literal><function>version()</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry><productname>PostgreSQL</> version information. See also <xref linkend="guc-server-version-num"> for a machine-readable version.</entry>
-->
       <entry><productname>PostgreSQL</>バージョン情報。機械読み取り可能なバージョンについては<xref linkend="guc-server-version-num">を参照。</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <note>
    <para>
<!--
     <function>current_catalog</function>,
     <function>current_role</function>,
     <function>current_schema</function>,
     <function>current_user</function>,
     <function>session_user</function>,
     and <function>user</function> have special syntactic status
     in <acronym>SQL</acronym>: they must be called without trailing
     parentheses.  (In PostgreSQL, parentheses can optionally be used with
     <function>current_schema</function>, but not with the others.)
-->
<function>current_catalog</function>、<function>current_role</function>、<function>current_schema</function>、<function>current_user</function>、<function>session_user</function>および<function>user</function>は<acronym>SQL</acronym>において特殊な構文上の地位を持っており、最後に括弧を付けずに呼び出さなければなりません。
（PostgreSQLでは<function>current_schema</function>の場合括弧を使用することができますが、他は使えません。）
    </para>
   </note>

   <indexterm>
    <primary>current_catalog</primary>
   </indexterm>

   <indexterm>
    <primary>current_database</primary>
   </indexterm>

   <indexterm>
    <primary>current_query</primary>
   </indexterm>

   <indexterm>
    <primary>current_role</primary>
   </indexterm>

   <indexterm>
    <primary>current_schema</primary>
   </indexterm>

   <indexterm>
    <primary>current_schemas</primary>
   </indexterm>

   <indexterm>
    <primary>current_user</primary>
   </indexterm>

   <indexterm>
    <primary>pg_backend_pid</primary>
   </indexterm>

   <indexterm>
<!--
    <primary>schema</primary>
    <secondary>current</secondary>
-->
    <primary>スキーマ</primary>
    <secondary>現在の</secondary>
   </indexterm>

   <indexterm>
<!--
    <primary>search path</primary>
    <secondary>current</secondary>
-->
    <primary>検索パス</primary>
    <secondary>現在の</secondary>
   </indexterm>

   <indexterm>
    <primary>session_user</primary>
   </indexterm>

   <indexterm>
<!--
    <primary>user</primary>
    <secondary>current</secondary>
-->
    <primary>ユーザ</primary>
    <secondary>現在の</secondary>
   </indexterm>

   <indexterm>
    <primary>user</primary>
   </indexterm>

   <para>
<!--
    The <function>session_user</function> is normally the user who initiated
    the current database connection; but superusers can change this setting
    with <xref linkend="sql-set-session-authorization">.
    The <function>current_user</function> is the user identifier
    that is applicable for permission checking. Normally it is equal
    to the session user, but it can be changed with
    <xref linkend="sql-set-role">.
    It also changes during the execution of
    functions with the attribute <literal>SECURITY DEFINER</literal>.
    In Unix parlance, the session user is the <quote>real user</quote> and
    the current user is the <quote>effective user</quote>.
    <function>current_role</function> and <function>user</function> are
    synonyms for <function>current_user</function>.  (The SQL standard draws
    a distinction between <function>current_role</function>
    and <function>current_user</function>, but <productname>PostgreSQL</>
    does not, since it unifies users and roles into a single kind of entity.)
-->
<function>session_user</function>は、通常、現在のデータベース接続を開始したユーザです。しかし、スーパーユーザはこの設定を<xref linkend="sql-set-session-authorization">を使用して変更することができます。
<function>current_user</function>は、権限の検査に適用されるユーザ識別子です。
通常はセッションユーザと同じですが、<xref linkend="sql-set-role">を使用して変更可能です。
<literal>SECURITY DEFINER</literal>属性を持つ関数の実行中にも変わります。
Unix用語で言うと、セッションユーザは<quote>実ユーザ</quote>で、現在のユーザは<quote>実効ユーザ</quote>です。
<function>current_role</function>と<function>user</function>は<function>current_user</function>の同義語です。
（標準SQLでは<function>current_role</function>と<function>current_user</function>を区別していますが、<productname>PostgreSQL</>ではユーザとロールを1種類のエンティティに統合しているため、両者に区別はありません。）
   </para>

   <para>
<!--
    <function>current_schema</function> returns the name of the schema that is
    first in the search path (or a null value if the search path is
    empty).  This is the schema that will be used for any tables or
    other named objects that are created without specifying a target schema.
    <function>current_schemas(boolean)</function> returns an array of the names of all
    schemas presently in the search path.  The Boolean option determines whether or not
    implicitly included system schemas such as <literal>pg_catalog</> are included in the
    returned search path.
-->
<function>current_schema</function>関数は、検索パスの最初にあるスキーマ名（もしくは、検索パスが空の場合はNULL値）を返します。
これは、対象スキーマを指定せずに作成される、すべてのテーブルまたは他の名前付きオブジェクトに使用されるスキーマです。
また、<function>current_schemas(boolean)</function> は、検索パスに存在する全てのスキーマ名の配列を返します。
booleanオプションにより、<literal>pg_catalog</>のような暗黙的に含まれているシステムスキーマを、結果の検索パスに含めるかどうかを指定します。
   </para>

   <note>
    <para>
<!--
     The search path can be altered at run time.  The command is:
-->
検索パスは、実行時に変更することができます。
使用するコマンドは以下の通りです。
<programlisting>
SET search_path TO <replaceable>schema</> <optional>, <replaceable>schema</>, ...</optional>
</programlisting>
    </para>
   </note>

   <indexterm>
    <primary>inet_client_addr</primary>
   </indexterm>

   <indexterm>
    <primary>inet_client_port</primary>
   </indexterm>

   <indexterm>
    <primary>inet_server_addr</primary>
   </indexterm>

   <indexterm>
    <primary>inet_server_port</primary>
   </indexterm>

   <para>
<!--
     <function>inet_client_addr</function> returns the IP address of the
     current client, and <function>inet_client_port</function> returns the
     port number.
     <function>inet_server_addr</function> returns the IP address on which
     the server accepted the current connection, and
     <function>inet_server_port</function> returns the port number.
     All these functions return NULL if the current connection is via a
     Unix-domain socket.
-->
<function>inet_client_addr</function>は現在のクライアントのIPアドレスを返し、<function>inet_client_port</function>はそのポート番号を返します。
<function>inet_server_addr</function>は、現在の接続を受け付けたサーバのIPアドレスを返し、<function>inet_server_port</function>はそのポート番号を返します。
これら全ての関数は接続がUnixドメインソケット経由の場合NULLを返します。
   </para>

   <indexterm>
    <primary>pg_blocking_pids</primary>
   </indexterm>

   <para>
<!--
    <function>pg_blocking_pids</function> returns an array of the process IDs
    of the sessions that are blocking the server process with the specified
    process ID, or an empty array if there is no such server process or it is
    not blocked.  One server process blocks another if it either holds a lock
    that conflicts with the blocked process's lock request (hard block), or is
    waiting for a lock that would conflict with the blocked process's lock
    request and is ahead of it in the wait queue (soft block).  When using
    parallel queries the result always lists client-visible process IDs (that
    is, <function>pg_backend_pid</> results) even if the actual lock is held
    or awaited by a child worker process.  As a result of that, there may be
    duplicated PIDs in the result.  Also note that when a prepared transaction
    holds a conflicting lock, it will be represented by a zero process ID in
    the result of this function.
    Frequent calls to this function could have some impact on database
    performance, because it needs exclusive access to the lock manager's
    shared state for a short time.
-->
<function>pg_blocking_pids</function>は指定のプロセスIDのサーバプロセスをブロックしているセッションのプロセスIDの配列を返します。
指定のサーバプロセスが存在しない、あるいはそれがブロックされていないときは空の配列を返します。
あるサーバプロセスが別のサーバプロセスをブロックするのは、ブロックされるプロセスのロック要求と競合するロックを保持している場合（ハードブロック）、あるいは、ブロックされるプロセスのロック要求と競合するロックを待っていて、かつロック待ちキュー内でより前方にいる場合（ソフトロック）です。
パラレルクエリーを使っている場合、実際のロックを子ワーカプロセスが保持または待っている場合であっても、この結果には必ずクライアントから可視のプロセスID（つまり、<function>pg_backend_pid</>の結果）が示されます。
そのような仕様なので、この結果には重複するPIDが含まれることもあります。
また、プリペアドのトランザクションが競合するロックを保持している場合、この関数の結果ではプロセスIDがゼロとして示されることにも注意して下さい。
この関数はロックマネージャの共有状態に短時間、排他的アクセスをする必要があるため、それを頻繁に呼び出すとデータベースのパフォーマンスに多少、影響するかもしれません。
   </para>

   <indexterm>
    <primary>pg_conf_load_time</primary>
   </indexterm>

   <para>
<!--
    <function>pg_conf_load_time</function> returns the
    <type>timestamp with time zone</type> when the
    server configuration files were last loaded.
    (If the current session was alive at the time, this will be the time
    when the session itself re-read the configuration files, so the
    reading will vary a little in different sessions.  Otherwise it is
    the time when the postmaster process re-read the configuration files.)
-->
<function>pg_conf_load_time</function>はサーバの設定ファイルが最後に読み込まれた時の<type>timestamp with time zone</type>を返します。
（現在のセッションがそのときに活動中だった場合、これはそのセッション自身が設定ファイルを再読み込みした時刻になるため、その結果はセッションによって少し異なるかもしれません。
それ以外の場合は、postmasterプロセスが設定ファイルを再読み込みした時刻になります。）
   </para>

   <indexterm>
    <primary>pg_current_logfile</primary>
   </indexterm>

   <indexterm>
<!--
    <primary>Logging</primary>
    <secondary>pg_current_logfile function</secondary>
-->
    <primary>ログ出力</primary>
    <secondary>pg_current_logfile関数</secondary>
   </indexterm>

   <indexterm>
     <primary>current_logfiles</primary>
<!--
     <secondary>and the pg_current_logfile function</secondary>
-->
     <secondary>およびpg_current_logfile関数</secondary>
   </indexterm>

   <indexterm>
<!--
    <primary>Logging</primary>
    <secondary>current_logfiles file and the pg_current_logfile
    function</secondary>
-->
    <primary>ログ出力</primary>
    <secondary>current_logfilesファイルおよびpg_current_logfile関数</secondary>
   </indexterm>

   <para>
<!--
    <function>pg_current_logfile</function> returns, as <type>text</type>,
    the path of the log file(s) currently in use by the logging collector.
    The path includes the <xref linkend="guc-log-directory"> directory
    and the log file name.  Log collection must be enabled or the return value
    is <literal>NULL</literal>.  When multiple log files exist, each in a
    different format, <function>pg_current_logfile</function> called
    without arguments returns the path of the file having the first format
    found in the ordered list: <systemitem>stderr</>, <systemitem>csvlog</>.
    <literal>NULL</literal> is returned when no log file has any of these
    formats.  To request a specific file format supply, as <type>text</type>,
    either <systemitem>csvlog</> or <systemitem>stderr</> as the value of the
    optional parameter. The return value is <literal>NULL</literal> when the
    log format requested is not a configured
    <xref linkend="guc-log-destination">.  The
    <function>pg_current_logfiles</function> reflects the contents of the
    <filename>current_logfiles</> file.
-->
<function>pg_current_logfile</function>はログ収集機構が現在使用しているログファイルのパスを<type>text</type>,として返します。
パスには<xref linkend="guc-log-directory">ディレクトリとログファイルの名前が含まれます。
ログ収集が有効になっていなければならず、そうでなければ戻り値は<literal>NULL</literal>になります。
複数のログファイルがそれぞれ異なる形式で存在する場合、引数なしの<function>pg_current_logfile</function>は、順序リスト（<systemitem>stderr</>、<systemitem>csvlog</>）の最初に出てくる形式のファイルのパスを返します。
これらの形式のログファイルがないときは<literal>NULL</literal>が返されます。
特定のファイル形式を要求するには、オプションパラメータの値として<systemitem>csvlog</>または<systemitem>stderr</>を<type>text</type>として渡してください。
指定のログ形式が<xref linkend="guc-log-destination">で設定されていない場合は、戻り値が<literal>NULL</literal>となります。
<function>pg_current_logfiles</function>は<filename>current_logfiles</>ファイルの内容を反映します。
   </para>

   <indexterm>
    <primary>pg_my_temp_schema</primary>
   </indexterm>

   <indexterm>
    <primary>pg_is_other_temp_schema</primary>
   </indexterm>

   <para>
<!--
    <function>pg_my_temp_schema</function> returns the OID of the current
    session's temporary schema, or zero if it has none (because it has not
    created any temporary tables).
    <function>pg_is_other_temp_schema</function> returns true if the
    given OID is the OID of another session's temporary schema.
    (This can be useful, for example, to exclude other sessions' temporary
    tables from a catalog display.)
-->
<function>pg_my_temp_schema</function>は、現在のセッションの一時スキーマのOIDを返します。（一時テーブルをまだ１つも作成しておらず）存在しなければゼロを返します。
<function>pg_is_other_temp_schema</function>は、指定したOIDが他のセッションの一時スキーマのOIDであれば、真を返します。
（例えば、他のセッションの一時テーブルをカタログ表示から除外したい場合などで有用です。）
   </para>

   <indexterm>
    <primary>pg_listening_channels</primary>
   </indexterm>

   <indexterm>
    <primary>pg_notification_queue_usage</primary>
   </indexterm>

   <para>
<!--
    <function>pg_listening_channels</function> returns a set of names of
    asynchronous notification channels that the current session is listening
    to.  <function>pg_notification_queue_usage</function> returns the
    fraction of the total available space for notifications currently
    occupied by notifications that are waiting to be processed, as a
    <type>double</type> in the range 0-1.
    See <xref linkend="sql-listen"> and <xref linkend="sql-notify">
    for more information.
-->
<function>pg_listening_channels</function>は現在のセッションが監視している非同期通知チャネルの名前の集合を返します。
<function>pg_notification_queue_usage</function>は通知用に利用可能な全領域のうち、処理待ちになっている通知によって現在占められている割合を0から1の範囲の<type>double</type>として返します。
詳しくは<xref linkend="sql-listen">および<xref linkend="sql-notify">を参照して下さい。
   </para>

   <indexterm>
    <primary>pg_postmaster_start_time</primary>
   </indexterm>

   <para>
<!--
    <function>pg_postmaster_start_time</function> returns the
    <type>timestamp with time zone</type> when the
    server started.
-->
<function>pg_postmaster_start_time</function>は、サーバが起動したときの<type>timestamp with time zone</type>を返します。
   </para>

   <indexterm>
    <primary>pg_safe_snapshot_blocking_pids</primary>
   </indexterm>

   <para>
<!--
    <function>pg_safe_snapshot_blocking_pids</function> returns an array of
    the process IDs of the sessions that are blocking the server process with
    the specified process ID from acquiring a safe snapshot, or an empty array
    if there is no such server process or it is not blocked.  A session
    running a <literal>SERIALIZABLE</literal> transaction blocks
    a <literal>SERIALIZABLE READ ONLY DEFERRABLE</literal> transaction from
    acquiring a snapshot until the latter determines that it is safe to avoid
    taking any predicate locks.  See <xref linkend="xact-serializable"> for
    more information about serializable and deferrable transactions.  Frequent
    calls to this function could have some impact on database performance,
    because it needs access to the predicate lock manager's shared
    state for a short time.
-->
<function>pg_safe_snapshot_blocking_pids</function>は、指定のプロセスIDが安全なスナップショットを取得するのをブロックしているサーバプロセスのセッションのプロセスIDの配列を返します。
そのようなサーバプロセスが存在しない場合、またはブロックされていない場合は空の配列が返されます。
<literal>SERIALIZABLE</literal>トランザクションを実行しているセッションは、<literal>SERIALIZABLE READ ONLY DEFERRABLE</literal>トランザクションが述語ロックの取得をすべて回避しても安全であると決定するまで、後者がスナップショットを取得するのをブロックします。
シリアライザブルトランザクションおよび遅延可能トランザクションについてのさらなる情報については<xref linkend="xact-serializable">を参照してください。
この関数を頻繁に呼び出すと、短時間に述語ロックマネージャの共有状態にアクセスする必要があるため、データベースのパフォーマンスに若干の影響が出るかもしれません。
   </para>
   
   <indexterm>
    <primary>version</primary>
   </indexterm>

   <para>
<!--
    <function>version</function> returns a string describing the
    <productname>PostgreSQL</productname> server's version. You can also
    get this information from <xref linkend="guc-server-version"> or
    for a machine-readable version, <xref linkend="guc-server-version-num">.
    Software developers should use <literal>server_version_num</literal>
    (available since 8.2) or <xref linkend="libpq-pqserverversion"> instead
    of parsing the text version.
-->
<function>version</function>関数は<productname>PostgreSQL</productname>サーバのバージョンを記述した文字列を返します。
この情報は<xref linkend="guc-server-version">でも取得できますし、機械読み取り可能なバージョンは<xref linkend="guc-server-version-num">で取得できます。
ソフトウェア開発者はテキスト版の結果を解析するのではなく、<literal>server_version_num</literal>（バージョン8.2以降で利用可能）あるいは<xref linkend="libpq-pqserverversion">を利用すべきです。
   </para>

  <indexterm>
<!--
   <primary>privilege</primary>
   <secondary>querying</secondary>
-->
   <primary>権限</primary>
   <secondary>問い合わせ</secondary>
  </indexterm>

  <para>
<!--
   <xref linkend="functions-info-access-table"> lists functions that
   allow the user to query object access privileges programmatically.
   See <xref linkend="ddl-priv"> for more information about
   privileges.
-->
<xref linkend="functions-info-access-table">に列挙した関数を使用して、ユーザはオブジェクトのアクセス権限をプログラムから問い合わせることができます。
権限についての詳細は、<xref linkend="ddl-priv">を参照してください。
  </para>

   <table id="functions-info-access-table">
<!--
    <title>Access Privilege Inquiry Functions</title>
-->
    <title>アクセス権限照会関数</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry></row>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry></row>
     </thead>

     <tbody>
      <row>
       <entry><literal><function>has_any_column_privilege</function>(<parameter>user</parameter>,
                                  <parameter>table</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does user have privilege for any column of table</entry>
-->
       <entry>ユーザがテーブルのどれか１つの列に対して権限を所有しているか</entry>
      </row>
      <row>
       <entry><literal><function>has_any_column_privilege</function>(<parameter>table</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does current user have privilege for any column of table</entry>
-->
       <entry>現在のユーザがテーブルのどれか１つの列に対して権限を所有しているか</entry>
      </row>
      <row>
       <entry><literal><function>has_column_privilege</function>(<parameter>user</parameter>,
                                  <parameter>table</parameter>,
                                  <parameter>column</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does user have privilege for column</entry>
-->
       <entry>ユーザに列に対する権限があるか</entry>
      </row>
      <row>
       <entry><literal><function>has_column_privilege</function>(<parameter>table</parameter>,
                                  <parameter>column</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does current user have privilege for column</entry>
-->
       <entry>現在のユーザに列に対する権限があるか</entry>
      </row>
      <row>
       <entry><literal><function>has_database_privilege</function>(<parameter>user</parameter>,
                                  <parameter>database</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does user have privilege for database</entry>
-->
       <entry>ユーザにデータベースに対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>has_database_privilege</function>(<parameter>database</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does current user have privilege for database</entry>
-->
       <entry>現在のユーザにデータベースに対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>has_foreign_data_wrapper_privilege</function>(<parameter>user</parameter>,
                                  <parameter>fdw</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does user have privilege for foreign-data wrapper</entry>
-->
       <entry>ユーザに外部データラッパに対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>has_foreign_data_wrapper_privilege</function>(<parameter>fdw</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does current user have privilege for foreign-data wrapper</entry>
-->
       <entry>現在のユーザに外部データラッパに対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>has_function_privilege</function>(<parameter>user</parameter>,
                                  <parameter>function</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does user have privilege for function</entry>
-->
       <entry>ユーザに関数に対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>has_function_privilege</function>(<parameter>function</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does current user have privilege for function</entry>
-->
       <entry>現在のユーザに関数に対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>has_language_privilege</function>(<parameter>user</parameter>,
                                  <parameter>language</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does user have privilege for language</entry>
-->
       <entry>ユーザに言語に対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>has_language_privilege</function>(<parameter>language</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does current user have privilege for language</entry>
-->
       <entry>現在のユーザに言語に対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>has_schema_privilege</function>(<parameter>user</parameter>,
                                  <parameter>schema</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does user have privilege for schema</entry>
-->
       <entry>ユーザにスキーマに対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>has_schema_privilege</function>(<parameter>schema</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does current user have privilege for schema</entry>
-->
       <entry>現在のユーザにスキーマに対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>has_sequence_privilege</function>(<parameter>user</parameter>,
                                  <parameter>sequence</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does user have privilege for sequence</entry>
-->
       <entry>ユーザにシーケンスに対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>has_sequence_privilege</function>(<parameter>sequence</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does current user have privilege for sequence</entry>
-->
       <entry>現在のユーザにシーケンスに対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>has_server_privilege</function>(<parameter>user</parameter>,
                                  <parameter>server</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does user have privilege for foreign server</entry>
-->
       <entry>ユーザに外部サーバに対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>has_server_privilege</function>(<parameter>server</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does current user have privilege for foreign server</entry>
-->
       <entry>現在のユーザに外部サーバに対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>has_table_privilege</function>(<parameter>user</parameter>,
                                  <parameter>table</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does user have privilege for table</entry>
-->
       <entry>ユーザにテーブルに対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>has_table_privilege</function>(<parameter>table</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does current user have privilege for table</entry>
-->
       <entry>現在のユーザにテーブルに対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>has_tablespace_privilege</function>(<parameter>user</parameter>,
                                  <parameter>tablespace</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does user have privilege for tablespace</entry>
-->
       <entry>ユーザにテーブル空間に対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>has_tablespace_privilege</function>(<parameter>tablespace</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does current user have privilege for tablespace</entry>
-->
       <entry>現在のユーザにテーブル空間に対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>has_type_privilege</function>(<parameter>user</parameter>,
                                  <parameter>type</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does user have privilege for type</entry>
-->
       <entry>ユーザに型に対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>has_type_privilege</function>(<parameter>type</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does current user have privilege for type</entry>
-->
       <entry>現在のユーザに型に対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>pg_has_role</function>(<parameter>user</parameter>,
                                  <parameter>role</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does user have privilege for role</entry>
-->
       <entry>ユーザにロールに対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>pg_has_role</function>(<parameter>role</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does current user have privilege for role</entry>
-->
       <entry>現在のユーザにロールに対する権限があるのか</entry>
      </row>
      <row>
       <entry><literal><function>row_security_active</function>(<parameter>table</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>does current user have row level security active for table</entry>
-->
       <entry>現在のユーザに有効なテーブルの行単位セキュリティがあるのか</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <indexterm>
    <primary>has_any_column_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_column_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_database_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_function_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_foreign_data_wrapper_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_language_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_schema_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_server_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_sequence_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_table_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_tablespace_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_type_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>pg_has_role</primary>
   </indexterm>
   <indexterm>
    <primary>row_security_active</primary>
   </indexterm>

   <para>
<!--
    <function>has_table_privilege</function> checks whether a user
    can access a table in a particular way.  The user can be
    specified by name, by OID (<literal>pg_authid.oid</literal>),
    <literal>public</> to indicate the PUBLIC pseudo-role, or if the argument is
    omitted
    <function>current_user</function> is assumed.  The table can be specified
    by name or by OID.  (Thus, there are actually six variants of
    <function>has_table_privilege</function>, which can be distinguished by
    the number and types of their arguments.)  When specifying by name,
    the name can be schema-qualified if necessary.
    The desired access privilege type
    is specified by a text string, which must evaluate to one of the
    values <literal>SELECT</literal>, <literal>INSERT</literal>,
    <literal>UPDATE</literal>, <literal>DELETE</literal>, <literal>TRUNCATE</>,
    <literal>REFERENCES</literal>, or <literal>TRIGGER</literal>.  Optionally,
    <literal>WITH GRANT OPTION</> can be added to a privilege type to test
    whether the privilege is held with grant option.  Also, multiple privilege
    types can be listed separated by commas, in which case the result will
    be <literal>true</> if any of the listed privileges is held.
    (Case of the privilege string is not significant, and extra whitespace
    is allowed between but not within privilege names.)
    Some examples:
-->
<function>has_table_privilege</function>はユーザが特定の方法でテーブルにアクセス可能かどうかを検査します。
ユーザは名前、OID(<literal>pg_authid.oid</literal>)、もしくは擬似的なPUBLICロールを意味する<literal>public</>で指定できます。省略された場合は<function>current_user</function>が使われます。
テーブルは名前もしくはOIDで指定可能です。
（従って、実際には<function>has_table_privilege</function>の６つの変形があり、引数の数と型で区別されます。）
名前を指定する場合、必要であればスキーマ修飾できます。
対象とするアクセス権限の種類はテキスト文字列で指定され、それは、<literal>SELECT</literal>、<literal>INSERT</literal>、<literal>UPDATE</literal>、<literal>DELETE</literal>、<literal>TRUNCATE</>、<literal>REFERENCES</literal>、または<literal>TRIGGER</literal>のどれかである必要があります。
オプションとして、権限がGRANTオプションにより付与されているかどうかの権限の検査するため、<literal>WITH GRANT OPTION</>を付加することができます。
更に、複数の権限の種類をコンマで区切って列挙可能です。この場合、結果は列挙された権限の１つでも存在すれば<literal>真</>となります。
（権限文字列の大文字小文字は重要ではありません。余分な空白は権限名と権限名の間にはあっても良いですが、権限名の途中にはあってはいけません。）
例を示します。

<programlisting>
SELECT has_table_privilege('myschema.mytable', 'select');
SELECT has_table_privilege('joe', 'mytable', 'INSERT, SELECT WITH GRANT OPTION');
</programlisting>
   </para>

   <para>
<!--
    <function>has_sequence_privilege</function> checks whether a user
    can access a sequence in a particular way.  The possibilities for its
    arguments are analogous to <function>has_table_privilege</function>.
    The desired access privilege type must evaluate to one of
    <literal>USAGE</literal>,
    <literal>SELECT</literal>, or
    <literal>UPDATE</literal>.
-->
<function>has_sequence_privilege</function>はユーザが特定の方法でシーケンスにアクセス可能かどうかを検査します。
取り得る引数は<function>has_table_privilege</>に対するものと類似しています。
対象とする権限の種類は<literal>USAGE</literal>、<literal>SELECT</literal>または<literal>UPDATE</literal>のいずれかである必要があります。
   </para>

   <para>
<!--
    <function>has_any_column_privilege</function> checks whether a user can
    access any column of a table in a particular way.
    Its argument possibilities
    are analogous to <function>has_table_privilege</>,
    except that the desired access privilege type must evaluate to some
    combination of
    <literal>SELECT</literal>,
    <literal>INSERT</literal>,
    <literal>UPDATE</literal>, or
    <literal>REFERENCES</literal>.  Note that having any of these privileges
    at the table level implicitly grants it for each column of the table,
    so <function>has_any_column_privilege</function> will always return
    <literal>true</> if <function>has_table_privilege</> does for the same
    arguments.  But <function>has_any_column_privilege</> also succeeds if
    there is a column-level grant of the privilege for at least one column.
-->
<function>has_any_column_privilege</function>はユーザが特定の方法でテーブルのどれか１つの列にアクセス可能かどうかを検査します。
取り得る引数は<function>has_table_privilege</>に対するものと類似していますが、対象とする権限の種類が<literal>SELECT</literal>、<literal>INSERT</literal>、<literal>UPDATE</literal>、または<literal>REFERENCES</literal>の組み合わせである必要がある点を除きます。
テーブル単位でこれらの権限を所有することは、テーブルのそれぞれの列に対し暗黙的にそれらの権限を与えることになるため、<function>has_table_privilege</>が<literal>真</>を返す場合は、同一の引数に対して<function>has_any_column_privilege</function>は常に<literal>真</>を返すということに注意して下さい。
しかし、少なくとも一つの列に対し権限の列単位の許可がある場合にも<function>has_any_column_privilege</>は成功します。
   </para>

   <para>
<!--
    <function>has_column_privilege</function> checks whether a user
    can access a column in a particular way.
    Its argument possibilities
    are analogous to <function>has_table_privilege</function>,
    with the addition that the column can be specified either by name
    or attribute number.
    The desired access privilege type must evaluate to some combination of
    <literal>SELECT</literal>,
    <literal>INSERT</literal>,
    <literal>UPDATE</literal>, or
    <literal>REFERENCES</literal>.  Note that having any of these privileges
    at the table level implicitly grants it for each column of the table.
-->
<function>has_column_privilege</function>はユーザが特定の方法でテーブルのある列にもアクセス可能かどうかを検査します。
取り得る引数は<function>has_table_privilege</function>と類似していますが、名前または属性番号のいずれかで列の指定が追加されます。
対象とするアクセス権限の種類は<literal>SELECT</literal>、<literal>INSERT</literal>、<literal>UPDATE</literal>、または<literal>REFERENCES</literal>の組み合わせでなければなりません。
テーブル単位のこれらの権限を所有することは、テーブルのそれぞれの列に対し暗黙的にそれら権限を与えることに注意してください。
   </para>

   <para>
<!--
    <function>has_database_privilege</function> checks whether a user
    can access a database in a particular way.
    Its argument possibilities
    are analogous to <function>has_table_privilege</function>.
    The desired access privilege type must evaluate to some combination of
    <literal>CREATE</literal>,
    <literal>CONNECT</literal>,
    <literal>TEMPORARY</literal>, or
    <literal>TEMP</literal> (which is equivalent to
    <literal>TEMPORARY</literal>).
-->
<function>has_database_privilege</function>関数は、ユーザが特定の方法でデータベースにアクセス可能かどうかを検査します。
取り得る引数は、<function>has_table_privilege</function>に類似しています。
対象とするアクセス権限の種類は<literal>CREATE</literal>、<literal>CONNECT</literal>、<literal>TEMPORARY</literal>、または<literal>TEMP</literal>（<literal>TEMPORARY</literal>と同じ）の組み合わせである必要があります。
   </para>

   <para>
<!--
    <function>has_function_privilege</function> checks whether a user
    can access a function in a particular way.
    Its argument possibilities
    are analogous to <function>has_table_privilege</function>.
    When specifying a function by a text string rather than by OID,
    the allowed input is the same as for the <type>regprocedure</> data type
    (see <xref linkend="datatype-oid">).
    The desired access privilege type must evaluate to
    <literal>EXECUTE</literal>.
    An example is:
-->
<function>has_function_privilege</function>関数は、ユーザが特定の方法で関数にアクセス可能かどうかを検査します。
取り得る引数は<function>has_table_privilege</function>と同じです。
関数をOIDではなくテキスト文字列で指定する場合、<type>regprocedure</> データ型（<xref linkend="datatype-oid">を参照）と同じ入力が可能です。
対象とするアクセス権限の種類は<literal>EXECUTE</literal>である必要があります。
以下に例を示します。
<programlisting>
SELECT has_function_privilege('joeuser', 'myfunc(int, text)', 'execute');
</programlisting>
   </para>

   <para>
<!--
    <function>has_foreign_data_wrapper_privilege</function> checks whether a user
    can access a foreign-data wrapper in a particular way.
    Its argument possibilities
    are analogous to <function>has_table_privilege</function>.
    The desired access privilege type must evaluate to
    <literal>USAGE</literal>.
-->
<function>has_foreign_data_wrapper_privilege</function>関数は、ユーザが特定の方法で外部データラッパーにアクセス可能かどうかを検査します。
取り得る引数は<function>has_table_privilege</function>と同じです。
対象とするアクセス権限の種類は<literal>USAGE</literal>である必要があります。
   </para>

   <para>
<!--
    <function>has_language_privilege</function> checks whether a user
    can access a procedural language in a particular way.
    Its argument possibilities
    are analogous to <function>has_table_privilege</function>.
    The desired access privilege type must evaluate to
    <literal>USAGE</literal>.
-->
<function>has_language_privilege</function>関数は、ユーザが特定の方法で手続き言語にアクセス可能かどうかを検査します。
取り得る引数は、<function>has_table_privilege</function>に類似しています。
対象とするアクセス権限の種類は<literal>USAGE</literal>である必要があります。
   </para>

   <para>
<!--
    <function>has_schema_privilege</function> checks whether a user
    can access a schema in a particular way.
    Its argument possibilities
    are analogous to <function>has_table_privilege</function>.
    The desired access privilege type must evaluate to some combination of
    <literal>CREATE</literal> or
    <literal>USAGE</literal>.
-->
<function>has_schema_privilege</function>関数は、ユーザが特定の方法でスキーマにアクセス可能かどうかを検査します。
取り得る引数は、<function>has_table_privilege</function>に類似しています。
対象とするアクセス権限の種類は、<literal>CREATE</literal>もしくは<literal>USAGE</literal>の組み合わせである必要があります。
   </para>

   <para>
<!--
    <function>has_server_privilege</function> checks whether a user
    can access a foreign server in a particular way.
    Its argument possibilities
    are analogous to <function>has_table_privilege</function>.
    The desired access privilege type must evaluate to
    <literal>USAGE</literal>.

-->
<function>has_server_privilege</function>はユーザが特定の方法で外部サーバにアクセスできるかどうかを検査します。
取り得る引数は<function>has_table_privilege</function>に類似しています。
対象とするアクセス権限の種類は<literal>USAGE</literal>である必要があります。
   </para>

   <para>
<!--
    <function>has_tablespace_privilege</function> checks whether a user
    can access a tablespace in a particular way.
    Its argument possibilities
    are analogous to <function>has_table_privilege</function>.
    The desired access privilege type must evaluate to
    <literal>CREATE</literal>.
-->
<function>has_tablespace_privilege</function>関数は、ユーザが特定の方法でテーブル空間にアクセス可能かどうかを検査します。
取り得る引数は、<function>has_table_privilege</function>に類似しています。
対象とするアクセス権限の種類は、<literal>CREATE</literal>である必要があります。
   </para>

   <para>
<!--
    <function>has_type_privilege</function> checks whether a user
    can access a type in a particular way.
    Its argument possibilities
    are analogous to <function>has_table_privilege</function>.
    When specifying a type by a text string rather than by OID,
    the allowed input is the same as for the <type>regtype</> data type
    (see <xref linkend="datatype-oid">).
    The desired access privilege type must evaluate to
    <literal>USAGE</literal>.
-->
<function>has_type_privilege</function>は、ユーザが型に特定の方法でアクセス可能かどうかを検査します。
取り得る引数は<function>has_table_privilege</function>に類似しています。
型をOIDではなくテキスト文字列で指定する場合、可能な入力は<type>regtype</>データ型に対するものと同じです（<xref linkend="datatype-oid">参照）。
対象とするアクセス権限の種類は<literal>USAGE</literal>である必要があります。
   </para>

   <para>
<!--
    <function>pg_has_role</function> checks whether a user
    can access a role in a particular way.
    Its argument possibilities
    are analogous to <function>has_table_privilege</function>,
    except that <literal>public</> is not allowed as a user name.
    The desired access privilege type must evaluate to some combination of
    <literal>MEMBER</literal> or
    <literal>USAGE</literal>.
    <literal>MEMBER</literal> denotes direct or indirect membership in
    the role (that is, the right to do <command>SET ROLE</>), while
    <literal>USAGE</literal> denotes whether the privileges of the role
    are immediately available without doing <command>SET ROLE</>.
-->
<function>pg_has_role</function>は、ユーザが特定の方法でロールにアクセスできるかどうかを検査します。
取り得る引数については、<literal>public</>がユーザ名として使用不可であることを除き、<function>has_table_privilege</function>と類似しています。
対象とするアクセス権限の種類は、 <literal>MEMBER</literal>、<literal>USAGE</literal>の組み合わせである必要があります。
<literal>MEMBER</literal>は、ロールの直接または間接メンバ資格（つまり、<command>SET ROLE</>を行う権限）を表します。一方、<literal>USAGE</literal>は、そのロール権限が<command>SET ROLE</>をしなくてもすぐに利用できることを表します。
   </para>

   <para>
<!--
    <function>row_security_active</function> checks whether row level
    security is active for the specified table in the context of the
    <function>current_user</function> and environment. The table can
    be specified by name or by OID.
-->
<function>row_security_active</function>は<function>current_user</function>と現在の環境において、指定のテーブルで行単位セキュリティが有効かどうかを検査します。
テーブルは名前またはOIDで指定できます。
   </para>

  <para>
<!--
   <xref linkend="functions-info-schema-table"> shows functions that
   determine whether a certain object is <firstterm>visible</> in the
   current schema search path.
   For example, a table is said to be visible if its
   containing schema is in the search path and no table of the same
   name appears earlier in the search path.  This is equivalent to the
   statement that the table can be referenced by name without explicit
   schema qualification.  To list the names of all visible tables:
-->
<xref linkend="functions-info-schema-table">に、特定のオブジェクトが、現行スキーマの検索パスにおいて<firstterm>可視</>かどうかを判別する関数を示します。
例えば、あるテーブルを含むスキーマが検索パス内に存在し、検索パス内の前方に同じ名前のテーブルがない場合、そのテーブルは可視であると言います。
つまり、これは、テーブルが明示的なスキーマ修飾なしで名前によって参照可能であるということです。
全ての可視テーブルの名前を列挙するには以下のようにします。
<programlisting>
SELECT relname FROM pg_class WHERE pg_table_is_visible(oid);
</programlisting>
  </para>

   <indexterm>
<!--
    <primary>search path</primary>
    <secondary>object visibility</secondary>
-->
    <primary>検索パス</primary>
    <secondary>オブジェクトの可視性</secondary>
   </indexterm>

   <table id="functions-info-schema-table">
<!--
    <title>Schema Visibility Inquiry Functions</title>
-->
    <title>スキーマ可視性照会関数</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry></row>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry></row>
     </thead>

     <tbody>
      <row>
       <entry><literal><function>pg_collation_is_visible(<parameter>collation_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>is collation visible in search path</entry>
-->
       <entry>照合順序が検索パスにおいて可視かどうか</entry>
      </row>
      <row>
       <entry><literal><function>pg_conversion_is_visible(<parameter>conversion_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>is conversion visible in search path</entry>
-->
       <entry>変換が検索パスにおいて可視かどうか</entry>
      </row>
      <row>
       <entry><literal><function>pg_function_is_visible(<parameter>function_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>is function visible in search path</entry>
-->
       <entry>関数が検索パスにおいて可視であるか</entry>
      </row>
      <row>
       <entry><literal><function>pg_opclass_is_visible(<parameter>opclass_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>is operator class visible in search path</entry>
-->
       <entry>演算子クラスが検索パスにおいて可視であるか</entry>
      </row>
      <row>
       <entry><literal><function>pg_operator_is_visible(<parameter>operator_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>is operator visible in search path</entry>
-->
       <entry>演算子が検索パスにおいて可視であるか</entry>
      </row>
      <row>
       <entry><literal><function>pg_opfamily_is_visible(<parameter>opclass_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>is operator family visible in search path</entry>
-->
       <entry>演算子族が検索パスにおいて可視であるか</entry>
      </row>
      <row>
       <entry><literal><function>pg_statistics_obj_is_visible(<parameter>stat_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>is statistics object visible in search path</entry>
-->
       <entry>統計情報オブジェクトが検索パスにおいて可視であるか</entry>
      </row>
      <row>
       <entry><literal><function>pg_table_is_visible(<parameter>table_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>is table visible in search path</entry>
-->
       <entry>テーブルが検索パスにおいて可視かどうか</entry>
      </row>
      <row>
       <entry><literal><function>pg_ts_config_is_visible(<parameter>config_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>is text search configuration visible in search path</entry>
-->
       <entry>テキスト検索設定が検索パスにおいて可視かどうか</entry>
      </row>
      <row>
       <entry><literal><function>pg_ts_dict_is_visible(<parameter>dict_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>is text search dictionary visible in search path</entry>
-->
       <entry>テキスト検索辞書が検索パスにおいて可視かどうか</entry>
      </row>
      <row>
       <entry><literal><function>pg_ts_parser_is_visible(<parameter>parser_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>is text search parser visible in search path</entry>
-->
       <entry>テキスト検索パーサが検索パスにおいて可視かどうか</entry>
      </row>
      <row>
       <entry><literal><function>pg_ts_template_is_visible(<parameter>template_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>is text search template visible in search path</entry>
-->
       <entry>テキスト検索テンプレートが検索パスにおいて可視かどうか</entry>
      </row>
      <row>
       <entry><literal><function>pg_type_is_visible(<parameter>type_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>is type (or domain) visible in search path</entry>
-->
       <entry>型（またはドメイン）が検索パスにおいて可視かどうか</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <indexterm>
    <primary>pg_collation_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_conversion_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_function_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_opclass_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_operator_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_opfamily_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_statistics_obj_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_table_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_ts_config_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_ts_dict_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_ts_parser_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_ts_template_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_type_is_visible</primary>
   </indexterm>

   <para>
<!--
    Each function performs the visibility check for one type of database
    object.  Note that <function>pg_table_is_visible</function> can also be used
    with views, materialized views, indexes, sequences and foreign tables;
    <function>pg_type_is_visible</function> can also be used with domains.
    For functions and operators, an object in
    the search path is visible if there is no object of the same name
    <emphasis>and argument data type(s)</> earlier in the path.  For operator
    classes, both name and associated index access method are considered.
-->
それぞれの関数はデータベースオブジェクトの１つの型に対して可視性の検査を行います。
<function>pg_table_is_visible</function>がビュー、マテリアライズドビュー、インデックス、シーケンス、外部テーブルに対しても使用できること、<function>pg_type_is_visible</function>がドメインに対しても使用できることに注意してください。
関数および演算子では、パスの前方に同じ名前かつ同じ<emphasis>引数のデータ型</>を持つオブジェクトが存在しなければ、検索パス内のオブジェクトは可視です。
演算子クラスでは、名前と関連するインデックスアクセスメソッドが考慮されます。
   </para>

   <para>
<!--
    All these functions require object OIDs to identify the object to be
    checked.  If you want to test an object by name, it is convenient to use
    the OID alias types (<type>regclass</>, <type>regtype</>,
    <type>regprocedure</>, <type>regoperator</>, <type>regconfig</>,
    or <type>regdictionary</>),
    for example:
-->
これらの関数は全て、検査するオブジェクトを識別するために、オブジェクトのOIDを必要とします。
オブジェクトを名前でテストする場合、OID別名型（<type>regclass</>、<type>regtype</>、<type>regprocedure</>、<type>regoperator</>、<type>regconfig</>、または<type>regdictionary</>）を使用すると便利です。
例えば、以下のようにします。
<programlisting>
SELECT pg_type_is_visible('myschema.widget'::regtype);
</programlisting>
<!--
    Note that it would not make much sense to test a non-schema-qualified
    type name in this way &mdash; if the name can be recognized at all, it must be visible.
-->
ただし、このようなやり方でスキーマ修飾されていない型名をテストしても、あまり意味がないことに注意してください。名前が認識されれば、それは必ず可視ということになります。
   </para>

   <indexterm>
    <primary>format_type</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_constraintdef</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_expr</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_functiondef</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_function_arguments</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_function_identity_arguments</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_function_result</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_indexdef</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_keywords</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_ruledef</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_serial_sequence</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_statisticsobjdef</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_triggerdef</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_userbyid</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_viewdef</primary>
   </indexterm>

   <indexterm>
    <primary>pg_index_column_has_property</primary>
   </indexterm>

   <indexterm>
    <primary>pg_index_has_property</primary>
   </indexterm>

   <indexterm>
    <primary>pg_indexam_has_property</primary>
   </indexterm>

   <indexterm>
    <primary>pg_options_to_table</primary>
   </indexterm>

   <indexterm>
    <primary>pg_tablespace_databases</primary>
   </indexterm>

   <indexterm>
    <primary>pg_tablespace_location</primary>
   </indexterm>

   <indexterm>
    <primary>pg_typeof</primary>
   </indexterm>

   <indexterm>
    <primary>collation for</primary>
   </indexterm>

   <indexterm>
    <primary>to_regclass</primary>
   </indexterm>

   <indexterm>
    <primary>to_regproc</primary>
   </indexterm>

   <indexterm>
    <primary>to_regprocedure</primary>
   </indexterm>

   <indexterm>
    <primary>to_regoper</primary>
   </indexterm>

   <indexterm>
    <primary>to_regoperator</primary>
   </indexterm>

   <indexterm>
    <primary>to_regtype</primary>
   </indexterm>

   <indexterm>
    <primary>to_regnamespace</primary>
   </indexterm>

   <indexterm>
    <primary>to_regrole</primary>
   </indexterm>

  <para>
<!--
   <xref linkend="functions-info-catalog-table"> lists functions that
   extract information from the system catalogs.
-->
<xref linkend="functions-info-catalog-table">に、システムカタログから情報を抽出する関数を列挙します。
  </para>

   <table id="functions-info-catalog-table">
<!--
    <title>System Catalog Information Functions</title>
-->
    <title>システムカタログ情報関数</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry></row>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry></row>
     </thead>

     <tbody>
      <row>
       <entry><literal><function>format_type(<parameter>type_oid</parameter>, <parameter>typemod</>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get SQL name of a data type</entry>
-->
       <entry>データ型のSQL名を取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_constraintdef(<parameter>constraint_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get definition of a constraint</entry>
-->
       <entry>制約の定義を取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_constraintdef(<parameter>constraint_oid</parameter>, <parameter>pretty_bool</>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get definition of a constraint</entry>
-->
       <entry>制約の定義を取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_expr(<parameter>pg_node_tree</parameter>, <parameter>relation_oid</>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>decompile internal form of an expression, assuming that any Vars
       in it refer to the relation indicated by the second parameter</entry>
-->
       <entry>式中のすべてのVarが２番目のパラメータによって指定されるリレーションを参照すると仮定して、式の内部形式を逆コンパイル</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_expr(<parameter>pg_node_tree</parameter>, <parameter>relation_oid</>, <parameter>pretty_bool</>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>decompile internal form of an expression, assuming that any Vars
       in it refer to the relation indicated by the second parameter</entry>
-->
       <entry>式中のすべてのVarが２番目のパラメータによって指定されるリレーションを参照すると仮定して、式の内部形式を逆コンパイル</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_functiondef(<parameter>func_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get definition of a function</entry>
-->
       <entry>関数定義の取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_function_arguments(<parameter>func_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get argument list of function's definition (with default values)</entry>
-->
       <entry>関数定義の引数リスト（デフォルト値付き）を取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_function_identity_arguments(<parameter>func_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get argument list to identify a function (without default values)</entry>
-->
       <entry>関数を特定するための引数リスト（デフォルト値なし）を取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_function_result(<parameter>func_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get <literal>RETURNS</> clause for function</entry>
-->
       <entry>関数に対する<literal>RETURNS</>句の取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_indexdef(<parameter>index_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get <command>CREATE INDEX</> command for index</entry>
-->
       <entry>インデックスに対する<command>CREATE INDEX</>コマンドの取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_indexdef(<parameter>index_oid</parameter>, <parameter>column_no</>, <parameter>pretty_bool</>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get <command>CREATE INDEX</> command for index,
       or definition of just one index column when
       <parameter>column_no</> is not zero</entry>
-->
       <entry>インデックスに対する<command>CREATE INDEX</>コマンドの取得、または<parameter>column_no</>が非ゼロの場合は、１つのインデックス列のみの定義の取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_keywords()</function></literal></entry>
       <entry><type>setof record</type></entry>
<!--
       <entry>get list of SQL keywords and their categories</entry>
-->
       <entry>SQLキーワードとそれらの種類のリストを取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_ruledef(<parameter>rule_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get <command>CREATE RULE</> command for rule</entry>
-->
       <entry>ルールに対する<command>CREATE RULE</>コマンドを取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_ruledef(<parameter>rule_oid</parameter>, <parameter>pretty_bool</>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get <command>CREATE RULE</> command for rule</entry>
-->
       <entry>ルールに対する<command>CREATE RULE</>コマンドを取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_serial_sequence(<parameter>table_name</parameter>, <parameter>column_name</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get name of the sequence that a serial or identity column uses</entry>
-->
       <entry>SERIAL、またはIDENTITY列が使用するシーケンス名を取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_statisticsobjdef(<parameter>statobj_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get <command>CREATE STATISTICS</> command for extended statistics object</entry>
-->
       <entry>拡張統計情報オブジェクトの<command>CREATE STATISTICS</>コマンドを取得</entry>
      </row>
      <row>
       <entry><function>pg_get_triggerdef</function>(<parameter>trigger_oid</parameter>)</entry>
       <entry><type>text</type></entry>
<!--
       <entry>get <command>CREATE [ CONSTRAINT ] TRIGGER</> command for trigger</entry>
-->
       <entry>トリガに対する<command>CREATE [ CONSTRAINT ] TRIGGER</>コマンドの取得</entry>
      </row>
      <row>
       <entry><function>pg_get_triggerdef</function>(<parameter>trigger_oid</parameter>, <parameter>pretty_bool</>)</entry>
       <entry><type>text</type></entry>
<!--
       <entry>get <command>CREATE [ CONSTRAINT ] TRIGGER</> command for trigger</entry>
-->
       <entry>トリガに対する<command>CREATE [ CONSTRAINT ] TRIGGER</>コマンドの取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_userbyid(<parameter>role_oid</parameter>)</function></literal></entry>
       <entry><type>name</type></entry>
<!--
       <entry>get role name with given OID</entry>
-->
       <entry>与えられたOIDでロール名を取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_viewdef(<parameter>view_name</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get underlying <command>SELECT</command> command for view or materialized view (<emphasis>deprecated</emphasis>)</entry>
-->
       <entry>ビューまたはマテリアライズドビューの元になる<command>SELECT</command>コマンドを取得（<emphasis>廃止予定</emphasis>）</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_viewdef(<parameter>view_name</parameter>, <parameter>pretty_bool</>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get underlying <command>SELECT</command> command for view or materialized view (<emphasis>deprecated</emphasis>)</entry>
-->
       <entry>ビューまたはマテリアライズドビューの元になる<command>SELECT</command>コマンドを取得（<emphasis>廃止予定</emphasis>）</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_viewdef(<parameter>view_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get underlying <command>SELECT</command> command for view or materialized view</entry>
-->
       <entry>ビューまたはマテリアライズドビューの元になる<command>SELECT</command>コマンドを取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_viewdef(<parameter>view_oid</parameter>, <parameter>pretty_bool</>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get underlying <command>SELECT</command> command for view or materialized view</entry>
-->
       <entry>ビューまたはマテリアライズドビューの元になる<command>SELECT</command>コマンドを取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_viewdef(<parameter>view_oid</parameter>, <parameter>wrap_column_int</>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get underlying <command>SELECT</command> command for view or
              materialized view; lines with fields are wrapped to specified
              number of columns, pretty-printing is implied</entry>
-->
       <entry>ビューまたはマテリアライズドビューの元になる<command>SELECT</command>コマンドを取得。
       フィールドを含む行は指定された列数で折り返され、成形された表示が行われます。</entry>
      </row>
      <row>
       <entry><literal><function>pg_index_column_has_property(<parameter>index_oid</parameter>, <parameter>column_no</>, <parameter>prop_name</>)</function></literal></entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>test whether an index column has a specified property</entry>
-->
       <entry>インデックス列が指定の属性を持っているかどうか検査する</entry>
      </row>
      <row>
       <entry><literal><function>pg_index_has_property(<parameter>index_oid</parameter>, <parameter>prop_name</>)</function></literal></entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>test whether an index has a specified property</entry>
-->
       <entry>インデックスが指定の属性を持っているかどうか検査する</entry>
      </row>
      <row>
       <entry><literal><function>pg_indexam_has_property(<parameter>am_oid</parameter>, <parameter>prop_name</>)</function></literal></entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>test whether an index access method has a specified property</entry>
-->
       <entry>インデックスアクセスメソッドが指定の属性を持っているかどうか検査する</entry>
      </row>
      <row>
       <entry><literal><function>pg_options_to_table(<parameter>reloptions</parameter>)</function></literal></entry>
       <entry><type>setof record</type></entry>
<!--
       <entry>get the set of storage option name/value pairs</entry>
-->
       <entry>格納オプションの名前/値のペアのセットを取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_tablespace_databases(<parameter>tablespace_oid</parameter>)</function></literal></entry>
       <entry><type>setof oid</type></entry>
<!--
       <entry>get the set of database OIDs that have objects in the tablespace</entry>
-->
       <entry>テーブル空間内にオブジェクトを所有するデータベースOID集合を取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_tablespace_location(<parameter>tablespace_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get the path in the file system that this tablespace is located in</entry>
-->
       <entry>指定したテーブル空間が実際に配置されているファイルシステム上のパスを取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_typeof(<parameter>any</parameter>)</function></literal></entry>
       <entry><type>regtype</type></entry>
<!--
       <entry>get the data type of any value</entry>
-->
       <entry>指定した値のデータ型を取得</entry>
      </row>
      <row>
       <entry><literal><function>collation for (<parameter>any</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get the collation of the argument</entry>
-->
       <entry>引数の照合順序を取得</entry>
      </row>
      <row>
       <entry><literal><function>to_regclass(<parameter>rel_name</parameter>)</function></literal></entry>
       <entry><type>regclass</type></entry>
<!--
       <entry>get the OID of the named relation</entry>
-->
       <entry>指定のリレーションのOIDを取得</entry>

      </row>
      <row>
       <entry><literal><function>to_regproc(<parameter>func_name</parameter>)</function></literal></entry>
       <entry><type>regproc</type></entry>
<!--
       <entry>get the OID of the named function</entry>
-->
       <entry>指定の関数のOIDを取得</entry>
      </row>
      <row>
       <entry><literal><function>to_regprocedure(<parameter>func_name</parameter>)</function></literal></entry>
       <entry><type>regprocedure</type></entry>
<!--
       <entry>get the OID of the named function</entry>
-->
       <entry>指定の関数のOIDを取得</entry>
      </row>
      <row>
       <entry><literal><function>to_regoper(<parameter>operator_name</parameter>)</function></literal></entry>
       <entry><type>regoper</type></entry>
<!--
       <entry>get the OID of the named operator</entry>
-->
       <entry>指定の演算子のOIDを取得</entry>
      </row>
      <row>
       <entry><literal><function>to_regoperator(<parameter>operator_name</parameter>)</function></literal></entry>
       <entry><type>regoperator</type></entry>
<!--
       <entry>get the OID of the named operator</entry>
-->
       <entry>指定の演算子のOIDを取得</entry>
      </row>
      <row>
       <entry><literal><function>to_regtype(<parameter>type_name</parameter>)</function></literal></entry>
       <entry><type>regtype</type></entry>
<!--
       <entry>get the OID of the named type</entry>
-->
       <entry>指定の型のOIDを取得</entry>
      </row>
      <row>
       <entry><literal><function>to_regnamespace(<parameter>schema_name</parameter>)</function></literal></entry>
       <entry><type>regnamespace</type></entry>
<!--
       <entry>get the OID of the named schema</entry>
-->
       <entry>指定のスキーマのOIDを取得</entry>
      </row>
      <row>
       <entry><literal><function>to_regrole(<parameter>role_name</parameter>)</function></literal></entry>
       <entry><type>regrole</type></entry>
<!--
       <entry>get the OID of the named role</entry>
-->
       <entry>指定のロールのOIDを取得</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
<!--
   <function>format_type</function> returns the SQL name of a data type that
   is identified by its type OID and possibly a type modifier.  Pass NULL
   for the type modifier if no specific modifier is known.
-->
関数<function>format_type</function>は、自身の型OIDと場合により型修飾子によって特定されるデータ型のSQL名を返します。
特定の修飾子が既知でなければ型修飾子にNULLを渡します。
  </para>

  <para>
<!--
   <function>pg_get_keywords</function> returns a set of records describing
   the SQL keywords recognized by the server. The <structfield>word</> column
   contains the keyword.  The <structfield>catcode</> column contains a
   category code: <literal>U</> for unreserved, <literal>C</> for column name,
   <literal>T</> for type or function name, or <literal>R</> for reserved.
   The <structfield>catdesc</> column contains a possibly-localized string
   describing the category.
-->
関数<function>pg_get_keywords</function>は、サーバが認識したSQLキーワードを記述するレコードの集合を返します。
<structfield>word</>列にはキーワードが含まれます。
<structfield>catcode</>列は種類コードで、<literal>U</>は未予約(unreserved)、<literal>C</>は列名(column)、<literal>T</>は型名(type)または関数名、<literal>R</>は予約語(reserved)です。
<structfield>catdesc</>列は種類を記述する文字列を含み、現地語化されている場合もあります。
  </para>

  <para>
<!--
   <function>pg_get_constraintdef</function>,
   <function>pg_get_indexdef</function>, <function>pg_get_ruledef</function>,
   <function>pg_get_statisticsobjdef</function>, and
   <function>pg_get_triggerdef</function>, respectively reconstruct the
   creating command for a constraint, index, rule, extended statistics object,
   or trigger. (Note that this is a decompiled reconstruction, not the
   original text of the command.) <function>pg_get_expr</function> decompiles
   the internal form of an individual expression, such as the default value
   for a column.  It can be useful when examining the contents of system
   catalogs.  If the expression might contain Vars, specify the OID of the
   relation they refer to as the second parameter; if no Vars are expected,
   zero is sufficient. <function>pg_get_viewdef</function> reconstructs the
   <command>SELECT</> query that defines a view. Most of these functions come
   in two variants, one of which can optionally <quote>pretty-print</> the
   result.  The pretty-printed format is more readable, but the default format
   is more likely to be interpreted the same way by future versions of
   <productname>PostgreSQL</>; avoid using pretty-printed output for dump
   purposes.  Passing <literal>false</> for the pretty-print parameter yields
   the same result as the variant that does not have the parameter at all.
-->
<function>pg_get_constraintdef</function>、<function>pg_get_indexdef</function>、<function>pg_get_ruledef</function>、<function>pg_get_statisticsobjdef</function>、および<function>pg_get_triggerdef</function>はそれぞれ、制約、インデックス、ルール、拡張統計情報オブジェクト、もしくはトリガに対する作成コマンドを再構築します。
（これはコマンドの元々のテキストではなく、逆コンパイルにより再構築されたテキストであることに注意してください。）
<function>pg_get_expr</function>は、列のデフォルト値のような個々の式の内部形式を逆コンパイルします。
システムカタログの内容を試験するときに便利です。
式がVarを含んでいるかもしれない場合、２番目のパラメータとして参照する関連（リレーション）のOIDを指定します。Varがないと期待されるならゼロで充分です。
<function>pg_get_viewdef</function> はビューを定義する<command>SELECT</>問い合わせを再構築します。
これらの関数のほとんどは２つの異形があり、そのうちの１つはオプションとして結果を<quote>見やすく表示</>します。
見やすく表示された書式はより読みやすい半面、デフォルトの書式の方が今後のバージョンの<productname>PostgreSQL</>でも同様に解釈することができそうです。ダンプを目的とする場合は、見やすく表示する出力を使用しないでください。
見やすい表示用のパラメータに<literal>false</>を渡すことで、このパラメータをまったく持たない種類の結果と同一の結果を生成します。
  </para>

  <para>
<!--
   <function>pg_get_functiondef</> returns a complete
   <command>CREATE OR REPLACE FUNCTION</> statement for a function.
   <function>pg_get_function_arguments</function> returns the argument list
   of a function, in the form it would need to appear in within
   <command>CREATE FUNCTION</>.
   <function>pg_get_function_result</function> similarly returns the
   appropriate <literal>RETURNS</> clause for the function.
   <function>pg_get_function_identity_arguments</function> returns the
   argument list necessary to identify a function, in the form it
   would need to appear in within <command>ALTER FUNCTION</>, for
   instance.  This form omits default values.
-->
<function>pg_get_functiondef</>は、関数の完全な<command>CREATE OR REPLACE FUNCTION</>文を返します。
<function>pg_get_function_arguments</function>は、<command>CREATE FUNCTION</>の中に出現しなければならない形式で、引数リストを返します。
<function>pg_get_function_result</function>は同様、その関数の適切な<literal>RETURNS</>句を返します。
<function>pg_get_function_identity_arguments</function>は、例えば<command>ALTER FUNCTION</>の中に出現しなければならない形式で、関数を特定するのに必要な引数リストを返します。
この形式はデフォルト値を省略します。
  </para>

  <para>
<!--
   <function>pg_get_serial_sequence</function> returns the name of the
   sequence associated with a column, or NULL if no sequence is associated
   with the column.  If the column is an identity column, the associated
   sequence is the sequence internally created for the identity column.  For
   columns created using one of the serial types
   (<type>serial</type>, <type>smallserial</type>, <type>bigserial</type>), it
   is the sequence created for that serial column definition.  In the latter
   case, this association can be modified or removed with <command>ALTER
   SEQUENCE OWNED BY</>.  (The function probably should have been called
   <function>pg_get_owned_sequence</function>; its current name reflects the
   fact that it has typically been used with <type>serial</>
   or <type>bigserial</> columns.)  The first input parameter is a table name
   with optional schema, and the second parameter is a column name.  Because
   the first parameter is potentially a schema and table, it is not treated as
   a double-quoted identifier, meaning it is lower cased by default, while the
   second parameter, being just a column name, is treated as double-quoted and
   has its case preserved.  The function returns a value suitably formatted
   for passing to sequence functions
   (see <xref linkend="functions-sequence">).  A typical use is in reading the
   current value of a sequence for an identity or serial column, for example:
-->
<function>pg_get_serial_sequence</function>は、列に関連するシーケンスの名前を返します。
列に関連するシーケンスが存在しなければ、NULLを返します。
列がIDENTITY列の場合、関連するシーケンスはIDENTITY列に対して内部的に作成されたシーケンスとなります。
SERIAL型（<type>serial</type>、<type>smallserial</type>、<type>bigserial</type>）の一つを使って作られた列については、そのSERIAL列の定義に対して作られたシーケンスとなります。
後者の場合、この関連付けは<command>ALTER SEQUENCE OWNED BY</>で修正または削除することができます。
（この関数はおそらく<function>pg_get_owned_sequence</function>と呼ばれるべきだったのでしょうが、現在の名前はそれが主に<type>serial</>列または<type>bigserial</>列と一緒に使われていたという事実によります。）
最初の入力パラメータはテーブル名で、スキーマを付けることもできます。
２番目のパラメータは列名です。
最初のパラメータは普通はスキーマとテーブルですので、二重引用符付の識別子としては解釈されません。
つまり、デフォルトで小文字に変換されます。
一方２番目のパラメータは単なる列名であり、二重引用符付として解釈され、その大文字小文字は保持されます。
この関数は、シーケンス関数（<xref linkend="functions-sequence">を参照）に渡すことができるよう適切な書式で値を返します。
典型的な使用法はIDENITY列またはSERIAL列のシーケンスの現在値を読み取ることで、例えば
<programlisting>
SELECT currval(pg_get_serial_sequence('sometable', 'id'));
</programlisting>
  </para>

  <para>
<!--
   <function>pg_get_userbyid</function> extracts a role's name given
   its OID.
-->
<function>pg_get_userbyid</function>はそのOIDで与えられたロールの名前を抽出します。
  </para>

  <para>
<!--
   <function>pg_index_column_has_property</function>,
   <function>pg_index_has_property</function>, and
   <function>pg_indexam_has_property</function> return whether the
   specified index column, index, or index access method possesses the named
   property. <literal>NULL</literal> is returned if the property name is not
   known or does not apply to the particular object, or if the OID or column
   number does not identify a valid object.  Refer to
   <xref linkend="functions-info-index-column-props"> for column properties,
   <xref linkend="functions-info-index-props"> for index properties, and
   <xref linkend="functions-info-indexam-props"> for access method properties.
   (Note that extension access methods can define additional property names
   for their indexes.)
-->
<function>pg_index_column_has_property</function>、<function>pg_index_has_property</function>、<function>pg_indexam_has_property</function>は指定のインデックス列、インデックス、あるいはインデックスアクセスメソッドが、指定の属性を所有しているかどうかを返します。
属性名が不明の場合、属性がその特定のオブジェクトに当てはまらない場合、OIDや列番号が有効なオブジェクトを特定できない場合は<literal>NULL</literal>が返されます。
列の属性については<xref linkend="functions-info-index-column-props">、インデックスの属性については<xref linkend="functions-info-index-props">、アクセスメソッドの属性については<xref linkend="functions-info-indexam-props">を参照して下さい。
（拡張のアクセスメソッドはそのインデックスについて追加の属性名を定義できることに注意して下さい。）
  </para>

  <table id="functions-info-index-column-props">
<!--
   <title>Index Column Properties</title>
-->
   <title>インデックス列の属性</title>
   <tgroup cols="2">
    <thead>
<!--
     <row><entry>Name</entry><entry>Description</entry></row>
-->
     <row><entry>名前</entry><entry>説明</entry></row>
    </thead>
    <tbody>
     <row>
      <entry><literal>asc</literal></entry>
<!--
      <entry>Does the column sort in ascending order on a forward scan?
-->
      <entry>前方スキャンで列は昇順にソートされるか
      </entry>
     </row>
     <row>
      <entry><literal>desc</literal></entry>
<!--
      <entry>Does the column sort in descending order on a forward scan?
-->
      <entry>前方スキャンで列は降順にソートされるか
      </entry>
     </row>
     <row>
      <entry><literal>nulls_first</literal></entry>
<!--
      <entry>Does the column sort with nulls first on a forward scan?
-->
      <entry>前方スキャンで列はNULLを先頭にしてソートするか
      </entry>
     </row>
     <row>
      <entry><literal>nulls_last</literal></entry>
<!--
      <entry>Does the column sort with nulls last on a forward scan?
-->
      <entry>前方スキャンで列はNULLを最後にしてソートするか
      </entry>
     </row>
     <row>
      <entry><literal>orderable</literal></entry>
<!--
      <entry>Does the column possess any defined sort ordering?
-->
      <entry>列は定義済みのソート順を所有しているか
      </entry>
     </row>
     <row>
      <entry><literal>distance_orderable</literal></entry>
<!--
      <entry>Can the column be scanned in order by a <quote>distance</>
      operator, for example <literal>ORDER BY col &lt;-&gt; constant</> ?
-->
      <entry>列は<quote>距離</>の演算子の順序に従ってスキャンできるか、例えば<literal>ORDER BY col &lt;-&gt; 定数</>など
      </entry>
     </row>
     <row>
      <entry><literal>returnable</literal></entry>
<!--
      <entry>Can the column value be returned by an index-only scan?
-->
      <entry>列の値をインデックスオンリースキャンで返すことができるか
      </entry>
     </row>
     <row>
      <entry><literal>search_array</literal></entry>
<!--
      <entry>Does the column natively support <literal>col = ANY(array)</>
      searches?
-->
      <entry>列は<literal>col = ANY(array)</>の検索をネイティブにサポートしているか
      </entry>
     </row>
     <row>
      <entry><literal>search_nulls</literal></entry>
<!--
      <entry>Does the column support <literal>IS NULL</> and
      <literal>IS NOT NULL</> searches?
-->
      <entry>列は<literal>IS NULL</>および<literal>IS NOT NULL</>の検索をサポートしているか
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="functions-info-index-props">
<!--
   <title>Index Properties</title>
-->
   <title>インデックスの属性</title>
   <tgroup cols="2">
    <thead>
<!--
     <row><entry>Name</entry><entry>Description</entry></row>
-->
     <row><entry>名前</entry><entry>説明</entry></row>
    </thead>
    <tbody>
     <row>
      <entry><literal>clusterable</literal></entry>
<!--
      <entry>Can the index be used in a <literal>CLUSTER</> command?
-->
      <entry>インデックスを<literal>CLUSTER</>コマンドで使うことができるか
      </entry>
     </row>
     <row>
      <entry><literal>index_scan</literal></entry>
<!--
      <entry>Does the index support plain (non-bitmap) scans?
-->
      <entry>インデックスは通常の（ビットマップでない）スキャンをサポートしているか
      </entry>
     </row>
     <row>
      <entry><literal>bitmap_scan</literal></entry>
<!--
      <entry>Does the index support bitmap scans?
-->
      <entry>インデックスはビットマップスキャンをサポートしているか
      </entry>
     </row>
     <row>
      <entry><literal>backward_scan</literal></entry>
<!--
      <entry>Can the index be scanned backwards?
-->
      <entry>インデックスを逆方向にスキャンできるか
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="functions-info-indexam-props">
<!--
   <title>Index Access Method Properties</title>
-->
   <title>インデックスアクセスメソッドの属性</title>
   <tgroup cols="2">
    <thead>
<!--
     <row><entry>Name</entry><entry>Description</entry></row>
-->
     <row><entry>名前</entry><entry>説明</entry></row>
    </thead>
    <tbody>
     <row>
      <entry><literal>can_order</literal></entry>
<!--
      <entry>Does the access method support <literal>ASC</>,
      <literal>DESC</> and related keywords in
      <literal>CREATE INDEX</>?
-->
      <entry>アクセスメソッドは<literal>CREATE INDEX</>において<literal>ASC</>、<literal>DESC</>および関連するキーワードをサポートしているか
      </entry>
     </row>
     <row>
      <entry><literal>can_unique</literal></entry>
<!--
      <entry>Does the access method support unique indexes?
-->
      <entry>アクセスメソッドは一意インデックスをサポートしているか
      </entry>
     </row>
     <row>
      <entry><literal>can_multi_col</literal></entry>
<!--
      <entry>Does the access method support indexes with multiple columns?
-->
      <entry>アクセスメソッドは複数列にまたがるインデックスをサポートしているか
      </entry>
     </row>
     <row>
      <entry><literal>can_exclude</literal></entry>
<!--
      <entry>Does the access method support exclusion constraints?
-->
      <entry>アクセスメソッドは除外制約をサポートしているか
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   <function>pg_options_to_table</function> returns the set of storage
   option name/value pairs
   (<replaceable>option_name</>/<replaceable>option_value</>) when passed
   <structname>pg_class</>.<structfield>reloptions</> or
   <structname>pg_attribute</>.<structfield>attoptions</>.
-->
<function>pg_options_to_table</function>は、<structname>pg_class</>.<structfield>reloptions</>または<structname>pg_attribute</>.<structfield>attoptions</>が渡されたときに、格納オプションの名前と値のペア(<replaceable>option_name</>/<replaceable>option_value</>)の集合を返します。
  </para>

  <para>
<!--
   <function>pg_tablespace_databases</function> allows a tablespace to be
   examined. It returns the set of OIDs of databases that have objects stored
   in the tablespace. If this function returns any rows, the tablespace is not
   empty and cannot be dropped. To display the specific objects populating the
   tablespace, you will need to connect to the databases identified by
   <function>pg_tablespace_databases</function> and query their
   <structname>pg_class</> catalogs.
-->
<function>pg_tablespace_databases</function>によりテーブル空間を調べることができ
ます。
これは、そのテーブル空間内に格納されたオブジェクトを持つデータベースのOIDの集合を返します。
この関数が何らかの行を返した場合、このテーブル空間は空ではなく、削除することがで
きません。
テーブル空間内に格納された特定のオブジェクトを表示するためには、<function>pg_tablespace_databases</function>で識別されたデータベースに接続し、その<structname>pg_class</>カタログに問い合わせを行う必要があります。
  </para>

  <para>
<!--
   <function>pg_typeof</function> returns the OID of the data type of the
   value that is passed to it.  This can be helpful for troubleshooting or
   dynamically constructing SQL queries.  The function is declared as
   returning <type>regtype</>, which is an OID alias type (see
   <xref linkend="datatype-oid">); this means that it is the same as an
   OID for comparison purposes but displays as a type name.  For example:
-->
<function>pg_typeof</function>は、渡される値のデータ型のOIDを返します。
これはトラブル解決作業、または動的にSQL問い合わせを生成するのに便利です。
この関数は、OID型の別名である<type>regtype</>を返すものとして宣言されます（<xref linkend="datatype-oid">を参照）。つまり、比較が目的ならOIDと同一ですが、型名として表示されます。
以下に例をあげます。
<programlisting>
SELECT pg_typeof(33);

 pg_typeof 
-----------
 integer
(1 row)

SELECT typlen FROM pg_type WHERE oid = pg_typeof(33);
 typlen 
--------
      4
(1 row)
</programlisting>
  </para>

  <para>
<!--
   The expression <literal>collation for</literal> returns the collation of the
   value that is passed to it.  Example:
-->
<literal>collation for</literal>式は、それに渡された値の照合順序を返します。
例を示します。
<programlisting>
SELECT collation for (description) FROM pg_description LIMIT 1;
 pg_collation_for 
------------------
 "default"
(1 row)

SELECT collation for ('foo' COLLATE "de_DE");
 pg_collation_for 
------------------
 "de_DE"
(1 row)
</programlisting>
<!--
  The value might be quoted and schema-qualified.  If no collation is derived
  for the argument expression, then a null value is returned.  If the argument
  is not of a collatable data type, then an error is raised.
-->
値には引用符が付けられ、またはスキーマ修飾されることがあります。
もし引数の式から何も照合順序が得られなかった場合、NULLが返されます。
もし引数が照合順序をサポートしないデータ型だった場合、エラーとなります。
  </para>

  <para>
<!--
   The <function>to_regclass</function>, <function>to_regproc</function>,
   <function>to_regprocedure</function>, <function>to_regoper</function>,
   <function>to_regoperator</function>, <function>to_regtype</function>,
   <function>to_regnamespace</function>, and <function>to_regrole</function>
   functions translate relation, function, operator, type, schema, and role
   names (given as <type>text</>) to objects of
   type <type>regclass</>, <type>regproc</>, <type>regprocedure</type>,
   <type>regoper</>, <type>regoperator</type>, <type>regtype</>,
   <type>regnamespace</>, and <type>regrole</>
   respectively.  These functions differ from a cast from
   text in that they don't accept a numeric OID, and that they return null
   rather than throwing an error if the name is not found (or, for
   <function>to_regproc</function> and <function>to_regoper</function>, if
   the given name matches multiple objects).
-->
<function>to_regclass</function>、<function>to_regproc</function>、<function>to_regprocedure</function>、<function>to_regoper</function>、<function>to_regoperator</function>、<function>to_regtype</function>、<function>to_regnamespace</function>、<function>to_regrole</function>関数はリレーション、関数、演算子、型、スキーマ、ロールの名前（<type>text</>として渡されます）をそれぞれ<type>regclass</>、<type>regproc</>、<type>regprocedure</type>、<type>regoper</>、<type>regoperator</type>、<type>regtype</>、<type>regnamespace</>、<type>regrole</>型のオブジェクトに変換します。
数値OIDを受け付けず、名前が見つからない(もしくは、<function>to_regproc</function>と<function>to_regoper</function>では、与えられた名前が複数のオブジェクトに一致する)場合にはエラーを発生するのではなくnullを返すという点で、これらの関数はテキストからのキャストとは異なります。
  </para>

   <indexterm>
    <primary>pg_describe_object</primary>
   </indexterm>

   <indexterm>
    <primary>pg_identify_object</primary>
   </indexterm>

   <indexterm>
    <primary>pg_identify_object_as_address</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_object_address</primary>
   </indexterm>

  <para>
<!--
   <xref linkend="functions-info-object-table"> lists functions related to
   database object identification and addressing.
-->
<xref linkend="functions-info-object-table">にデータベースオブジェクトの識別とアドレスに関連する関数を示します。
  </para>

   <table id="functions-info-object-table">
<!--
    <title>Object Information and Addressing Functions</title>
-->
    <title>オブジェクト情報とアドレスの関数</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry></row>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry></row>
     </thead>

     <tbody>
      <row>
       <entry><literal><function>pg_describe_object(<parameter>catalog_id</parameter>, <parameter>object_id</parameter>, <parameter>object_sub_id</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get description of a database object</entry>
-->
       <entry>データベースオブジェクトの説明の取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_identify_object(<parameter>catalog_id</parameter> <type>oid</>, <parameter>object_id</parameter> <type>oid</>, <parameter>object_sub_id</parameter> <type>integer</>)</function></literal></entry>
       <entry><parameter>type</> <type>text</>, <parameter>schema</> <type>text</>, <parameter>name</> <type>text</>, <parameter>identity</> <type>text</></entry>
<!--
       <entry>get identity of a database object</entry>
-->
       <entry>データベースオブジェクトの識別の取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_identify_object_as_address(<parameter>catalog_id</parameter> <type>oid</>, <parameter>object_id</parameter> <type>oid</>, <parameter>object_sub_id</parameter> <type>integer</>)</function></literal></entry>
       <entry><parameter>type</> <type>text</>, <parameter>name</> <type>text[]</>, <parameter>args</> <type>text[]</></entry>
<!--
       <entry>get external representation of a database object's address</entry>
-->
       <entry>データベースオブジェクトのアドレスの外部表現を取得</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_object_address(<parameter>type</parameter> <type>text</>, <parameter>name</parameter> <type>text[]</>, <parameter>args</parameter> <type>text[]</>)</function></literal></entry>
       <entry><parameter>catalog_id</> <type>oid</>, <parameter>object_id</> <type>oid</>, <parameter>object_sub_id</> <type>int32</></entry>
<!--
       <entry>get address of a database object, from its external representation</entry>
-->
       <entry>データベースオブジェクトのアドレスの外部表現から、アドレスを取得</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
<!--
   <function>pg_describe_object</function> returns a textual description of a database
   object specified by catalog OID, object OID and a (possibly zero) sub-object ID.
   This description is intended to be human-readable, and might be translated,
   depending on server configuration.
   This is useful to determine the identity of an object as stored in the
   <structname>pg_depend</structname> catalog.
-->
<function>pg_describe_object</function>はカタログOID、オブジェクトOID、もしくはサブオブジェクトOID（0のこともある）で指定されたデータベースオブジェクトのテキストによる説明を返します。
この説明はサーバの設定に依存しますが、人が読んでわかる、そして翻訳も可能になることを目的としたのもです。
これは<structname>pg_depend</structname>カタログに格納されたオブジェクトの識別判断の際に有用です。
  </para>

  <para>
<!--
   <function>pg_identify_object</function> returns a row containing enough information
   to uniquely identify the database object specified by catalog OID, object OID and a
   (possibly zero) sub-object ID.  This information is intended to be machine-readable,
   and is never translated.
   <parameter>type</> identifies the type of database object;
   <parameter>schema</> is the schema name that the object belongs in, or
   <literal>NULL</> for object types that do not belong to schemas;
   <parameter>name</> is the name of the object, quoted if necessary, only
   present if it can be used (alongside schema name, if pertinent) as a unique
   identifier of the object, otherwise <literal>NULL</>;
   <parameter>identity</> is the complete object identity, with the precise format
   depending on object type, and each part within the format being
   schema-qualified and quoted as necessary.
-->
<function>pg_identify_object</function>はカタログOID、オブジェクトOID、そしてサブオブジェクトID（0のこともある）により指定されるデータベースオブジェクトを一意に特定するために十分な情報を含む行を返します。
この情報は機械による読み取りを目的としており、決して翻訳されません。
<parameter>type</>はデータベースオブジェクトの型を識別するものです。
<parameter>schema</>はオブジェクトが所属するスキーマの名前ですが、スキーマに所属しないオブジェクト型の場合は<literal>NULL</>になります。
<parameter>name</>は（必要なら引用符で括った）オブジェクトの名前ですが、（適切ならスキーマ名と合わせて）オブジェクトの一意識別子として使用できる場合にのみ指定し、それ以外の場合は<literal>NULL</>にします。
<parameter>identity</>は完全なオブジェクトの識別で、オブジェクトの型に依存した正確なフォーマットを持っています。
フォーマット内の各部分はスキーマ修飾されており、必要に応じて引用符で括られます。
  </para>

  <para>
<!--
   <function>pg_identify_object_as_address</function> returns a row containing
   enough information to uniquely identify the database object specified by
   catalog OID, object OID and a (possibly zero) sub-object ID.  The returned
   information is independent of the current server, that is, it could be used
   to identify an identically named object in another server.
   <parameter>type</> identifies the type of database object;
   <parameter>name</> and <parameter>args</> are text arrays that together
   form a reference to the object.  These three columns can be passed to
   <function>pg_get_object_address</> to obtain the internal address
   of the object.
   This function is the inverse of <function>pg_get_object_address</function>.
-->
<function>pg_identify_object_as_address</function>はカタログOID、オブジェクトOID、そしてサブオブジェクトID（0のこともある）により指定されるデータベースオブジェクトを一意に特定するために充分な情報を含む行を返します。
返される情報は現在のサーバに依存しません。
つまり、他のサーバで全く同じ名前を付けられたオブジェクトを識別するために使うことができます。
<parameter>type</>はデータベースオブジェクトの型を識別するものです。
<parameter>name</>と<parameter>args</>は文字列の配列で、それらが組み合わされてオブジェクトへの参照を構成します。
これらの3つの列は、オブジェクトの内部アドレスを取得するために<function>pg_get_object_address</>に渡すことができます。
この関数は<function>pg_get_object_address</function>の逆関数です。
  </para>

  <para>
<!--
   <function>pg_get_object_address</function> returns a row containing enough
   information to uniquely identify the database object specified by its
   type and object name and argument arrays.  The returned values are the
   ones that would be used in system catalogs such as <structname>pg_depend</>
   and can be passed to other system functions such as
   <function>pg_identify_object</> or <function>pg_describe_object</>.
   <parameter>catalog_id</> is the OID of the system catalog containing the
   object;
   <parameter>object_id</> is the OID of the object itself, and
   <parameter>object_sub_id</> is the object sub-ID, or zero if none.
   This function is the inverse of <function>pg_identify_object_as_address</function>.
-->
<function>pg_get_object_address</function>は、型、オブジェクト名および引数の配列で指定されたデータベースオブジェクトを一意に特定するために十分な情報を含む行を返します。
返される値は、<structname>pg_depend</>などのシステムカタログで使用されるもので、<function>pg_identify_object</>や<function>pg_describe_object</>など他のシステム関数に渡すことができます。
<parameter>catalog_id</>はオブジェクトを含むシステムカタログのOIDです。
<parameter>object_id</>はオブジェクト自体のOIDです。
<parameter>object_sub_id</>はオブジェクトのサブID、なければ0です。
この関数は<function>pg_identify_object_as_address</function>の逆関数です。
  </para>

   <indexterm>
    <primary>col_description</primary>
   </indexterm>

   <indexterm>
    <primary>obj_description</primary>
   </indexterm>

   <indexterm>
    <primary>shobj_description</primary>
   </indexterm>

   <indexterm>
<!--
    <primary>comment</primary>
    <secondary sortas="database objects">about database objects</secondary>
-->
    <primary>コメント</primary>
    <secondary sortas="database objects">データベースオブジェクトについて</secondary>
   </indexterm>

   <para>
<!--
    The functions shown in <xref linkend="functions-info-comment-table">
    extract comments previously stored with the <xref linkend="sql-comment">
    command.  A null value is returned if no
    comment could be found for the specified parameters.
-->
<xref linkend="functions-info-comment-table">に示される関数は、<xref linkend="sql-comment">コマンドによって以前に保存されたコメントを抽出します。
指定されたパラメータに対するコメントが存在しない場合、NULL値が返されます。
   </para>

   <table id="functions-info-comment-table">
<!--
    <title>Comment Information Functions</title>
-->
    <title>コメント情報関数</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry></row>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry></row>
     </thead>

     <tbody>
      <row>
       <entry><literal><function>col_description(<parameter>table_oid</parameter>, <parameter>column_number</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get comment for a table column</entry>
-->
       <entry>テーブル列のコメントを取得</entry>
      </row>
      <row>
       <entry><literal><function>obj_description(<parameter>object_oid</parameter>, <parameter>catalog_name</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get comment for a database object</entry>
-->
       <entry>データベースオブジェクトのコメントを取得</entry>
      </row>
      <row>
       <entry><literal><function>obj_description(<parameter>object_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get comment for a database object (<emphasis>deprecated</emphasis>)</entry>
-->
       <entry>データベースオブジェクトのコメントを取得（<emphasis>廃止予定</emphasis>）</entry>
      </row>
      <row>
       <entry><literal><function>shobj_description(<parameter>object_oid</parameter>, <parameter>catalog_name</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
       <entry>get comment for a shared database object</entry>
-->
       <entry>共有データベースオブジェクトのコメントを取得</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    <function>col_description</function> returns the comment for a table
    column, which is specified by the OID of its table and its column number.
    (<function>obj_description</function> cannot be used for table columns
    since columns do not have OIDs of their own.)
-->
<function>col_description()</function>関数は、テーブルのOIDとその列番号で指定されるテーブルの列のコメントを返します。
（<function>obj_description()</function>関数は、テーブル列自体がOIDを所有していませんので、テーブル列に対して使用することはできません。）
   </para>

   <para>
<!--
    The two-parameter form of <function>obj_description</function> returns the
    comment for a database object specified by its OID and the name of the
    containing system catalog.  For example,
    <literal>obj_description(123456,'pg_class')</literal>
    would retrieve the comment for the table with OID 123456.
    The one-parameter form of <function>obj_description</function> requires only
    the object OID.  It is deprecated since there is no guarantee that
    OIDs are unique across different system catalogs; therefore, the wrong
    comment might be returned.
-->
<function>obj_description()</function>関数の２つのパラメータを取る形式はそのOIDと保有しているシステムカタログの名前で指定されたデータベースオブジェクトのコメントを返します。
例えば、<literal>obj_description(123456,'pg_class')</literal>はOID 123456を持つテーブルのコメントを抽出します。
<function>obj_description()</function>関数の単一パラメータ形式はオブジェクトのOIDのみ必要とします。
異なったシステムカタログに渡ってOIDが一意である保証はないことから廃止予定です。従って、間違ったコメントが返ることがあります。
   </para>

   <para>
<!--
    <function>shobj_description</function> is used just like
    <function>obj_description</function> except it is used for retrieving
    comments on shared objects.  Some system catalogs are global to all
    databases within each cluster, and the descriptions for objects in them
    are stored globally as well.
-->
<function>shobj_description</function>は、共有オブジェクトのコメント取得のために使用されることを除いて、<function>obj_description</function>と同じように使用されます。
一部のシステムカタログは、各クラスタ内のデータベース全体に対して大域的です。これらのコメントも同様に大域的に格納されます。
   </para>

   <indexterm>
    <primary>txid_current</primary>
   </indexterm>

   <indexterm>
    <primary>txid_current_if_assigned</primary>
   </indexterm>

   <indexterm>
    <primary>txid_current_snapshot</primary>
   </indexterm>

   <indexterm>
    <primary>txid_snapshot_xip</primary>
   </indexterm>

   <indexterm>
    <primary>txid_snapshot_xmax</primary>
   </indexterm>

   <indexterm>
    <primary>txid_snapshot_xmin</primary>
   </indexterm>

   <indexterm>
    <primary>txid_visible_in_snapshot</primary>
   </indexterm>

   <indexterm>
    <primary>txid_status</primary>
   </indexterm>

   <para>
<!--
    The functions shown in <xref linkend="functions-txid-snapshot">
    provide server transaction information in an exportable form.  The main
    use of these functions is to determine which transactions were committed
    between two snapshots.
-->
<xref linkend="functions-txid-snapshot">で示される関数はサーバトランザクション情報をエクスポートできる形式で提供します。
これら関数の主な使用目的は２つのスナップショット間でどちらのトランザクションがコミットされたのかを特定するためです。
   </para>

   <table id="functions-txid-snapshot">
<!--
    <title>Transaction IDs and Snapshots</title>
-->
    <title>トランザクションIDとスナップショット</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry></row>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry></row>
     </thead>

     <tbody>
      <row>
       <entry><literal><function>txid_current()</function></literal></entry>
       <entry><type>bigint</type></entry>
<!--
       <entry>get current transaction ID, assigning a new one if the current transaction does not have one</entry>
-->
       <entry>現在のトランザクションIDの取得、現在のトランザクションにIDがなければ新規に割り当てる</entry>
      </row>
      <row>
       <entry><literal><function>txid_current_if_assigned()</function></literal></entry>
       <entry><type>bigint</type></entry>
<!--
       <entry>same as <function>txid_current()</function> but returns null instead of assigning a new transaction ID if none is already assigned</entry>
-->
       <entry><function>txid_current()</function>と同じだが、まだトランザクションIDが割り当てられていなければ、新規に割り当てずにNULLを返す</entry>
      </row>
      <row>
       <entry><literal><function>txid_current_snapshot()</function></literal></entry>
       <entry><type>txid_snapshot</type></entry>
<!--
       <entry>get current snapshot</entry>
-->
       <entry>現在のスナップショットの取得</entry>
      </row>
      <row>
       <entry><literal><function>txid_snapshot_xip(<parameter>txid_snapshot</parameter>)</function></literal></entry>
       <entry><type>setof bigint</type></entry>
<!--
       <entry>get in-progress transaction IDs in snapshot</entry>
-->
       <entry>スナップショットにある進行中のトランザクションIDの取得</entry>
      </row>
      <row>
       <entry><literal><function>txid_snapshot_xmax(<parameter>txid_snapshot</parameter>)</function></literal></entry>
       <entry><type>bigint</type></entry>
<!--
       <entry>get <literal>xmax</literal> of snapshot</entry>
-->
       <entry>スナップショットの<literal>xmax</literal>の取得</entry>
      </row>
      <row>
       <entry><literal><function>txid_snapshot_xmin(<parameter>txid_snapshot</parameter>)</function></literal></entry>
       <entry><type>bigint</type></entry>
<!--
       <entry>get <literal>xmin</literal> of snapshot</entry>
-->
       <entry>スナップショットの<literal>xmin</literal>の取得</entry>
      </row>
      <row>
       <entry><literal><function>txid_visible_in_snapshot(<parameter>bigint</parameter>, <parameter>txid_snapshot</parameter>)</function></literal></entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>is transaction ID visible in snapshot? (do not use with subtransaction ids)</entry>
-->
       <entry>スナップショットにあるトランザクションIDは可視か？（サブトランザクションIDで使用しないこと）</entry>
      </row>
      <row>
       <entry><literal><function>txid_status(<parameter>bigint</parameter>)</function></literal></entry>
       <entry><type>txid_status</type></entry>
<!--
       <entry>report the status of the given transaction: <literal>committed</literal>, <literal>aborted</literal>, <literal>in progress</literal>, or null if the transaction ID is too old</entry>
-->
       <entry>指定のトランザクションのステータス（<literal>committed</literal>、<literal>aborted</literal>、<literal>in progress</literal>、NULL（トランザクションIDが古すぎる場合））を報告する</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    The internal transaction ID type (<type>xid</>) is 32 bits wide and
    wraps around every 4 billion transactions.  However, these functions
    export a 64-bit format that is extended with an <quote>epoch</> counter
    so it will not wrap around during the life of an installation.
    The data type used by these functions, <type>txid_snapshot</type>,
    stores information about transaction ID
    visibility at a particular moment in time.  Its components are
    described in <xref linkend="functions-txid-snapshot-parts">.
-->
内部トランザクションID型（<type>xid</>）は32ビット幅なので40億トランザクション毎にラップします。
とは言っても、これらの関数は<quote>epoch</>カウンタにより拡張された64ビット形式をエクスポートするため、インストレーションの生涯にわたってラップしないでしょう。
これらの関数で使用されるデータ型、<type>txid_snapshot</type>はある特定の時間におけるトランザクションIDの可視性に関する情報を格納します。
構成要素は<xref linkend="functions-txid-snapshot-parts">に記載されています。
   </para>

   <table id="functions-txid-snapshot-parts">
<!--
    <title>Snapshot Components</title>
-->
    <title>スナップショット構成要素</title>
    <tgroup cols="2">
     <thead>
      <row>
<!--
       <entry>Name</entry>
       <entry>Description</entry>
-->
       <entry>名前</entry>
       <entry>説明</entry>
      </row>
     </thead>

     <tbody>

      <row>
       <entry><type>xmin</type></entry>
       <entry>
<!--
         Earliest transaction ID (txid) that is still active.  All earlier
         transactions will either be committed and visible, or rolled
         back and dead.
-->
現在実行中で最も早いトランザクションID（txid）。
これより早い全てのトランザクションはコミットされて可視となっているか、またはロールバックされて消滅している。
       </entry>
      </row>

      <row>
       <entry><type>xmax</type></entry>
       <entry>
<!--
        First as-yet-unassigned txid.  All txids greater than or equal to this
        are not yet started as of the time of the snapshot, and thus invisible.
-->
まだ割り当てられていない最初のtxid。
これと等しいかより大きい全てのtxidはスナップショットの時点で未開始であり、従って不可視。
       </entry>
      </row>

      <row>
       <entry><type>xip_list</type></entry>
       <entry>
<!--
        Active txids at the time of the snapshot.  The list
        includes only those active txids between <literal>xmin</>
        and <literal>xmax</>; there might be active txids higher
        than <literal>xmax</>.  A txid that is <literal>xmin &lt;= txid &lt;
        xmax</literal> and not in this list was already completed
        at the time of the snapshot, and thus either visible or
        dead according to its commit status.  The list does not
        include txids of subtransactions.
-->
スナップショット時の実行中のtxid。
リストは<literal>xmin</>と<literal>xmax</>間の実行中のtxidのみを含む。
<literal>xmax</>より高位で実行中のtxidが存在することもある。
<literal>xmin &lt;= txid &lt; xmax</literal>であり、このリストにないtxidはスナップショット時に既に完了しており、従って、コミット状態によって、可視か消滅かのいずれか。
リストには副トランザクションのtxidは含まれない。
       </entry>
      </row>

     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    <type>txid_snapshot</>'s textual representation is
    <literal><replaceable>xmin</>:<replaceable>xmax</>:<replaceable>xip_list</></literal>.
    For example <literal>10:20:10,14,15</literal> means
    <literal>xmin=10, xmax=20, xip_list=10, 14, 15</literal>.
-->
<type>txid_snapshot</>のテキスト表現は<literal><replaceable>xmin</>:<replaceable>xmax</>:<replaceable>xip_list</></literal>です。
例えば、<literal>10:20:10,14,15</literal>は<literal>xmin=10, xmax=20, xip_list=10, 14, 15</literal>を意味します。
   </para>

   <para>
<!--
    <function>txid_status(bigint)</> reports the commit status of a recent
    transaction.  Applications may use it to determine whether a transaction
    committed or aborted when the application and database server become
    disconnected while a <literal>COMMIT</literal> is in progress.
    The status of a transaction will be reported as either
    <literal>in progress</>,
    <literal>committed</>, or <literal>aborted</>, provided that the
    transaction is recent enough that the system retains the commit status
    of that transaction.  If is old enough that no references to that
    transaction survive in the system and the commit status information has
    been discarded, this function will return NULL.  Note that prepared
    transactions are reported as <literal>in progress</>; applications must
    check <link
    linkend="view-pg-prepared-xacts"><literal>pg_prepared_xacts</></> if they
    need to determine whether the txid is a prepared transaction.
-->
<function>txid_status(bigint)</>は最近のトランザクションのコミット状態について報告します。
<literal>COMMIT</literal>の進行中にアプリケーションとデータベースが切断されたときに、アプリケーションはトランザクションがコミットされたか中断されたかを知るためにこれを使うことができます。
トランザクションが最近のもので、システムがそのトランザクションのコミット状態を保持している場合は、トランザクションの状態は<literal>in progress</>、<literal>committed</>あるいは<literal>aborted</>として報告されます。
トランザクションが古く、その参照がシステムに残っておらず、コミット状態の情報が破棄されている場合は、この関数はNULLを返します。
プリペアドのトランザクションは<literal>in progress</>として報告されること、そして指定のtxidがプリペアドのトランザクションかどうかを確認する必要がある場合は、アプリケーションは<link linkend="view-pg-prepared-xacts"><literal>pg_prepared_xacts</></>を調べなければならないことに注意してください。
   </para>

   <para>
<!--
    The functions shown in <xref linkend="functions-commit-timestamp">
    provide information about transactions that have been already committed.
    These functions mainly provide information about when the transactions
    were committed. They only provide useful data when
    <xref linkend="guc-track-commit-timestamp"> configuration option is enabled
    and only for transactions that were committed after it was enabled.
-->
<xref linkend="functions-commit-timestamp">に示す関数は、コミット済みのトランザクションに関する情報を提供します。
これらの関数は主に、トランザクションがいつコミットされたかについての情報を提供します。
これらは、設定オプション<xref linkend="guc-track-commit-timestamp">が有効な時にのみ、しかもそれが有効にされた後にコミットされたトランザクションについてのみ有意なデータを提供します。
   </para>

   <table id="functions-commit-timestamp">
<!--
    <title>Committed transaction information</title>
-->
    <title>コミットされたトランザクションの情報</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry></row>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry></row>
     </thead>

     <tbody>
      <row>
       <entry>
        <indexterm><primary>pg_xact_commit_timestamp</primary></indexterm>
        <literal><function>pg_xact_commit_timestamp(<parameter>xid</parameter>)</function></literal>
       </entry>
       <entry><type>timestamp with time zone</type></entry>
<!--
       <entry>get commit timestamp of a transaction</entry>
-->
       <entry>トランザクションのコミットのタイムスタンプを取得</entry>
      </row>

      <row>
       <entry>
        <indexterm><primary>pg_last_committed_xact</primary></indexterm>
        <literal><function>pg_last_committed_xact()</function></literal>
       </entry>
       <entry><parameter>xid</> <type>xid</>, <parameter>timestamp</> <type>timestamp with time zone</></entry>
<!--
       <entry>get transaction ID and commit timestamp of latest committed transaction</entry>
-->
       <entry>最後にコミットされたトランザクションのトランザクションIDとコミットのタイムスタンプを取得</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    The functions shown in <xref linkend="functions-controldata">
    print information initialized during <command>initdb</>, such
    as the catalog version. They also show information about write-ahead
    logging and checkpoint processing. This information is cluster-wide,
    and not specific to any one database. They provide most of the same
    information, from the same source, as
    <xref linkend="APP-PGCONTROLDATA">, although in a form better suited
    to <acronym>SQL</acronym> functions.
-->
<xref linkend="functions-controldata">に示す関数は、カタログのバージョンなどといった<command>initdb</>の実行時に初期化される情報を表示します。
それらはまた、先行書き込みログとチェックポイント処理についての情報も示します。
この情報はクラスタ全体に渡るもので、どれか１つのデータベースに特有のものではありません。
それらは<xref linkend="APP-PGCONTROLDATA">と同じ情報源から、ほぼ同じ情報を提供しますが、<acronym>SQL</acronym>関数により適した形式になります。
   </para>

   <table id="functions-controldata">
<!--
    <title>Control Data Functions</title>
-->
    <title>制御データ関数</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry></row>
-->
      <row><entry>名前</entry> <entry>戻り値型</entry> <entry>説明</entry></row>
     </thead>

     <tbody>
      <row>
       <entry>
        <indexterm><primary>pg_control_checkpoint</primary></indexterm>
        <literal><function>pg_control_checkpoint()</function></literal>
       </entry>
       <entry><type>record</type></entry>
       <entry>
<!--
        Returns information about current checkpoint state.
-->
現在のチェックポイントの状態に関する情報を返す
       </entry>
      </row>

      <row>
       <entry>
        <indexterm><primary>pg_control_system</primary></indexterm>
        <literal><function>pg_control_system()</function></literal>
       </entry>
       <entry><type>record</type></entry>
       <entry>
<!--
        Returns information about current control file state.
-->
現在の制御ファイルの状態に関する情報を返す
       </entry>
      </row>

      <row>
       <entry>
        <indexterm><primary>pg_control_init</primary></indexterm>
        <literal><function>pg_control_init()</function></literal>
       </entry>
       <entry><type>record</type></entry>
       <entry>
<!--
        Returns information about cluster initialization state.
-->
クラスタの初期化状態に関する情報を返す
       </entry>
      </row>

      <row>
       <entry>
        <indexterm><primary>pg_control_recovery</primary></indexterm>
        <literal><function>pg_control_recovery()</function></literal>
       </entry>
       <entry><type>record</type></entry>
       <entry>
<!--
        Returns information about recovery state.
-->
リカバリの状態に関する情報を返す
       </entry>
      </row>

     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    <function>pg_control_checkpoint</> returns a record, shown in
    <xref linkend="functions-pg-control-checkpoint">
-->
<function>pg_control_checkpoint</>は<xref linkend="functions-pg-control-checkpoint">に示すレコードを返します。
   </para>

   <table id="functions-pg-control-checkpoint">
<!--
    <title><function>pg_control_checkpoint</> Columns</title>
-->
    <title><function>pg_control_checkpoint</>の列</title>
    <tgroup cols="2">
     <thead>
      <row>
<!--
       <entry>Column Name</entry>
       <entry>Data Type</entry>
-->
       <entry>列名</entry>
       <entry>データ型</entry>
      </row>
     </thead>

     <tbody>

      <row>
       <entry><literal>checkpoint_lsn</literal></entry>
       <entry><type>pg_lsn</type></entry>
      </row>

      <row>
       <entry><literal>prior_lsn</literal></entry>
       <entry><type>pg_lsn</type></entry>
      </row>

      <row>
       <entry><literal>redo_lsn</literal></entry>
       <entry><type>pg_lsn</type></entry>
      </row>

      <row>
       <entry><literal>redo_wal_file</literal></entry>
       <entry><type>text</type></entry>
      </row>

      <row>
       <entry><literal>timeline_id</literal></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><literal>prev_timeline_id</literal></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><literal>full_page_writes</literal></entry>
       <entry><type>boolean</type></entry>
      </row>

      <row>
       <entry><literal>next_xid</literal></entry>
       <entry><type>text</type></entry>
      </row>

      <row>
       <entry><literal>next_oid</literal></entry>
       <entry><type>oid</type></entry>
      </row>

      <row>
       <entry><literal>next_multixact_id</literal></entry>
       <entry><type>xid</type></entry>
      </row>

      <row>
       <entry><literal>next_multi_offset</literal></entry>
       <entry><type>xid</type></entry>
      </row>

      <row>
       <entry><literal>oldest_xid</literal></entry>
       <entry><type>xid</type></entry>
      </row>

      <row>
       <entry><literal>oldest_xid_dbid</literal></entry>
       <entry><type>oid</type></entry>
      </row>

      <row>
       <entry><literal>oldest_active_xid</literal></entry>
       <entry><type>xid</type></entry>
      </row>

      <row>
       <entry><literal>oldest_multi_xid</literal></entry>
       <entry><type>xid</type></entry>
      </row>

      <row>
       <entry><literal>oldest_multi_dbid</literal></entry>
       <entry><type>oid</type></entry>
      </row>

      <row>
       <entry><literal>oldest_commit_ts_xid</literal></entry>
       <entry><type>xid</type></entry>
      </row>

      <row>
       <entry><literal>newest_commit_ts_xid</literal></entry>
       <entry><type>xid</type></entry>
      </row>

      <row>
       <entry><literal>checkpoint_time</literal></entry>
       <entry><type>timestamp with time zone</type></entry>
      </row>

     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    <function>pg_control_system</> returns a record, shown in
    <xref linkend="functions-pg-control-system">
-->
<function>pg_control_system</>は<xref linkend="functions-pg-control-system">に示すレコードを返します。
   </para>

   <table id="functions-pg-control-system">
<!--
    <title><function>pg_control_system</> Columns</title>
-->
    <title><function>pg_control_system</>の列</title>
    <tgroup cols="2">
     <thead>
      <row>
<!--
       <entry>Column Name</entry>
       <entry>Data Type</entry>
-->
       <entry>列名</entry>
       <entry>データ型</entry>
      </row>
     </thead>

     <tbody>

      <row>
       <entry><literal>pg_control_version</literal></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><literal>catalog_version_no</literal></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><literal>system_identifier</literal></entry>
       <entry><type>bigint</type></entry>
      </row>

      <row>
       <entry><literal>pg_control_last_modified</literal></entry>
       <entry><type>timestamp with time zone</type></entry>
      </row>

     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    <function>pg_control_init</> returns a record, shown in
    <xref linkend="functions-pg-control-init">
-->
<function>pg_control_init</>は<xref linkend="functions-pg-control-init">に示すレコードを返します。
   </para>

   <table id="functions-pg-control-init">
<!--
    <title><function>pg_control_init</> Columns</title>
-->
    <title><function>pg_control_init</>の列</title>
    <tgroup cols="2">
     <thead>
      <row>
<!--
       <entry>Column Name</entry>
       <entry>Data Type</entry>
-->
       <entry>列名</entry>
       <entry>データ型</entry>
      </row>
     </thead>

     <tbody>

      <row>
       <entry><literal>max_data_alignment</literal></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><literal>database_block_size</literal></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><literal>blocks_per_segment</literal></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><literal>wal_block_size</literal></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><literal>bytes_per_wal_segment</literal></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><literal>max_identifier_length</literal></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><literal>max_index_columns</literal></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><literal>max_toast_chunk_size</literal></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><literal>large_object_chunk_size</literal></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><literal>float4_pass_by_value</literal></entry>
       <entry><type>boolean</type></entry>
      </row>

      <row>
       <entry><literal>float8_pass_by_value</literal></entry>
       <entry><type>boolean</type></entry>
      </row>

      <row>
       <entry><literal>data_page_checksum_version</literal></entry>
       <entry><type>integer</type></entry>
      </row>

     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    <function>pg_control_recovery</> returns a record, shown in
    <xref linkend="functions-pg-control-recovery">
-->
<function>pg_control_recovery</>は<xref linkend="functions-pg-control-recovery">に示すレコードを返します。
   </para>

   <table id="functions-pg-control-recovery">
<!--
    <title><function>pg_control_recovery</> Columns</title>
-->
    <title><function>pg_control_recovery</>の列</title>
    <tgroup cols="2">
     <thead>
      <row>
<!--
       <entry>Column Name</entry>
       <entry>Data Type</entry>
-->
       <entry>列名</entry>
       <entry>データ型</entry>
      </row>
     </thead>

     <tbody>

      <row>
       <entry><literal>min_recovery_end_lsn</literal></entry>
       <entry><type>pg_lsn</type></entry>
      </row>

      <row>
       <entry><literal>min_recovery_end_timeline</literal></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><literal>backup_start_lsn</literal></entry>
       <entry><type>pg_lsn</type></entry>
      </row>

      <row>
       <entry><literal>backup_end_lsn</literal></entry>
       <entry><type>pg_lsn</type></entry>
      </row>

      <row>
       <entry><literal>end_of_backup_record_required</literal></entry>
       <entry><type>boolean</type></entry>
      </row>

     </tbody>
    </tgroup>
   </table>

  </sect1>

  <sect1 id="functions-admin">
<!--
   <title>System Administration Functions</title>
-->
   <title>システム管理関数</title>

   <para>
<!--
    The functions described in this section are used to control and
    monitor a <productname>PostgreSQL</> installation.
-->
本節で説明する関数は、<productname>PostgreSQL</>インストレーションの制御と監視を行うために使用されます。
   </para>

  <sect2 id="functions-admin-set">
<!--
   <title>Configuration Settings Functions</title>
-->
   <title>構成設定関数</title>

   <para>
<!--
    <xref linkend="functions-admin-set-table"> shows the functions
    available to query and alter run-time configuration parameters.
-->
<xref linkend="functions-admin-set-table">は、実行時設定パラメータの問い合わせや変更に使用できる関数を示しています。
   </para>

   <table id="functions-admin-set-table">
<!--
    <title>Configuration Settings Functions</title>
-->
    <title>構成設定関数</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry></row>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry></row>
     </thead>

     <tbody>
      <row>
       <entry>
        <indexterm>
         <primary>current_setting</primary>
        </indexterm>
        <literal><function>current_setting(<parameter>setting_name</parameter> [, <parameter>missing_ok</parameter> ])</function></literal>
       </entry>
       <entry><type>text</type></entry>
<!--
       <entry>get current value of setting</entry>
-->
       <entry>現在の設定値の取得</entry>
      </row>
      <row>
       <entry>
        <indexterm>
         <primary>set_config</primary>
        </indexterm>
        <literal><function>set_config(<parameter>setting_name</parameter>,
                             <parameter>new_value</parameter>,
                             <parameter>is_local</parameter>)</function></literal>
       </entry>
       <entry><type>text</type></entry>
<!--
       <entry>set parameter and return new value</entry>
-->
       <entry>パラメータを設定し、新規値を返す</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <indexterm>
    <primary>SET</primary>
   </indexterm>

   <indexterm>
    <primary>SHOW</primary>
   </indexterm>

   <indexterm>
<!--
    <primary>configuration</primary>
-->
    <primary>設定</primary>
<!--
    <secondary sortas="server">of the server</secondary>
-->
    <secondary sortas="server">サーバの</secondary>
<!--
    <tertiary>functions</tertiary>
-->
    <tertiary>関数</tertiary>
   </indexterm>

   <para>
<!--
    The function <function>current_setting</function> yields the
    current value of the setting <parameter>setting_name</parameter>.
    It corresponds to the <acronym>SQL</acronym> command
    <command>SHOW</command>.  An example:
-->
関数<function>current_setting</function>は、設定<parameter>setting_name</parameter>の現在の値を返します。
この関数は、<acronym>SQL</acronym>の<command>SHOW</command>コマンドと同じです。
以下に例を示します。
<programlisting>
SELECT current_setting('datestyle');

 current_setting
-----------------
 ISO, MDY
(1 row)
</programlisting>

<!--
    If there is no setting named <parameter>setting_name</parameter>,
    <function>current_setting</function> throws an error
    unless <parameter>missing_ok</parameter> is supplied and is
    <literal>true</literal>.
-->
<parameter>setting_name</parameter>という名前の設定がない場合、<parameter>missing_ok</parameter>が渡され、かつ、それが<literal>true</literal>のときを除き、<function>current_setting</function>はエラーを発生させます。
   </para>

   <para>
<!--
    <function>set_config</function> sets the parameter
    <parameter>setting_name</parameter> to
    <parameter>new_value</parameter>.  If
    <parameter>is_local</parameter> is <literal>true</literal>, the
    new value will only apply to the current transaction. If you want
    the new value to apply for the current session, use
    <literal>false</literal> instead. The function corresponds to the
    SQL command <command>SET</command>. An example:
-->
<function>set_config</function>関数は、パラメータ<parameter>setting_name</parameter>を<parameter>new_value</parameter>に設定します。
ただし、<parameter>is_local</parameter>が<literal>true</literal>の場合、新規値は現在のトランザクションにのみ適用されます。
新規値を現在のセッションに適用する場合は、代わりに<literal>false</literal>を使用してください。
この関数は、SQLの<command>SET</command>コマンドと同じです。
以下に例を示します。
<programlisting>
SELECT set_config('log_statement_stats', 'off', false);

 set_config
------------
 off
(1 row)
</programlisting>
   </para>

  </sect2>

  <sect2 id="functions-admin-signal">
<!--
   <title>Server Signaling Functions</title>
-->
   <title>サーバシグナル送信関数</title>

   <indexterm>
    <primary>pg_cancel_backend</primary>
   </indexterm>
   <indexterm>
    <primary>pg_reload_conf</primary>
   </indexterm>
   <indexterm>
    <primary>pg_rotate_logfile</primary>
   </indexterm>
   <indexterm>
    <primary>pg_terminate_backend</primary>
   </indexterm>

   <indexterm>
<!--
    <primary>signal</primary>
    <secondary sortas="backend">backend processes</secondary>
-->
    <primary>シグナル</primary>
    <secondary sortas="backend">バックエンドプロセス</secondary>
   </indexterm>

   <para>
<!--
    The functions shown in <xref
    linkend="functions-admin-signal-table"> send control signals to
    other server processes.  Use of these functions is restricted to
    superusers by default but access may be granted to others using
    <command>GRANT</command>, with noted exceptions.
-->
<xref linkend="functions-admin-signal-table">に示す関数は、制御用シグナルを他のサーバプロセスに送信します。
これらの関数の使用は、デフォルトでスーパーユーザのみに制限されていますが、注記された例外を除き、<command>GRANT</command>を使用して他のユーザにアクセスを許可できます。
   </para>

   <table id="functions-admin-signal-table">
<!--
    <title>Server Signaling Functions</title>
-->
    <title>サーバシグナル送信関数</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry>
        <literal><function>pg_cancel_backend(<parameter>pid</parameter> <type>int</>)</function></literal>
        </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>Cancel a backend's current query.  This is also allowed if the
        calling role is a member of the role whose backend is being canceled or
        the calling role has been granted <literal>pg_signal_backend</literal>,
        however only superusers can cancel superuser backends.
-->
       <entry>バックエンドの現在の問い合わせを取り消す。
       関数を呼ぶユーザが取り消す対象のバックエンドのロールのメンバーであるとき、あるいは<literal>pg_signal_backend</literal>の権限を与えられているときも実行できます。
       ただし、スーパーユーザのバックエンドはスーパーユーザのみが取り消せます。
        </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_reload_conf()</function></literal>
        </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>Cause server processes to reload their configuration files</entry>
-->
       <entry>サーバプロセスに構成ファイルの再読み込みをさせる</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_rotate_logfile()</function></literal>
        </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>Rotate server's log file</entry>
-->
       <entry>サーバログファイルを循環させる</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_terminate_backend(<parameter>pid</parameter> <type>int</>)</function></literal>
        </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>Terminate a backend.  This is also allowed if the calling role
        is a member of the role whose backend is being terminated or the
        calling role has been granted <literal>pg_signal_backend</literal>,
        however only superusers can terminate superuser backends.
-->
       <entry>バックエンドを終了する。
       関数を呼ぶユーザが終了対象のバックエンドのロールのメンバーであるとき、あるいは<literal>pg_signal_backend</literal>の権限を与えられているときも実行できます。
       ただし、スーパーユーザのバックエンドはスーパーユーザのみが終了できます。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    Each of these functions returns <literal>true</literal> if
    successful and <literal>false</literal> otherwise.
-->
これらのそれぞれの関数は成功の場合<literal>true</literal>（真）を返し、そうでない場合は<literal>false</literal>（偽）を返します。
   </para>

   <para>
<!--
    <function>pg_cancel_backend</> and <function>pg_terminate_backend</>
    send signals (<systemitem>SIGINT</> or <systemitem>SIGTERM</>
    respectively) to backend processes identified by process ID.
    The process ID of an active backend can be found from
    the <structfield>pid</structfield> column of the
    <structname>pg_stat_activity</structname> view, or by listing the
    <command>postgres</command> processes on the server (using
    <application>ps</> on Unix or the <application>Task
    Manager</> on <productname>Windows</>).
    The role of an active backend can be found from the
    <structfield>usename</structfield> column of the
    <structname>pg_stat_activity</structname> view.
-->
<function>pg_cancel_backend</>と<function>pg_terminate_backend</>は（それぞれ、<systemitem>SIGINT</>または<systemitem>SIGTERM</>）シグナルをプロセス識別子で特定されたバックエンドプロセスに送ります。
使用中のバックエンドのプロセス識別子は<structname>pg_stat_activity</structname>ビューの<structfield>pid</structfield>列から、もしくは、（Unixでは<application>ps</>、<productname>Windows</>では<application>Task Manager</>により）サーバ上の<command>postgres</command>プロセスをリストすることで見つけられます。
実行中のバックエンドのロールは<structname>pg_stat_activity</structname>の<structfield>usename</structfield>列から確認することができます。
   </para>

   <para>
<!--
    <function>pg_reload_conf</> sends a <systemitem>SIGHUP</> signal
    to the server, causing configuration files
    to be reloaded by all server processes.
-->
<function>pg_reload_conf</>は<systemitem>SIGHUP</>シグナルをサーバに送り、その結果全てのサーバプロセスが構成ファイルを再読み込みすることになります。
   </para>

   <para>
<!--
    <function>pg_rotate_logfile</> signals the log-file manager to switch
    to a new output file immediately.  This works only when the built-in
    log collector is running, since otherwise there is no log-file manager
    subprocess.
-->
<function>pg_rotate_logfile</>はログファイルマネージャに即座に新規出力ファイルに切替えるようシグナルを送ります。
これは組み込みログ取得が起動している場合のみ有効です。起動していない場合はログファイルマネージャの子プロセスが存在しない理由からです。
   </para>

  </sect2>

  <sect2 id="functions-admin-backup">
<!--
   <title>Backup Control Functions</title>
-->
   <title>バックアップ制御関数</title>

   <indexterm>
<!--
    <primary>backup</primary>
-->
    <primary>バックアップ</primary>
   </indexterm>
   <indexterm>
    <primary>pg_create_restore_point</primary>
   </indexterm>
   <indexterm>
    <primary>pg_current_wal_flush_lsn</primary>
   </indexterm>
   <indexterm>
    <primary>pg_current_wal_insert_lsn</primary>
   </indexterm>
   <indexterm>
    <primary>pg_current_wal_lsn</primary>
   </indexterm>
   <indexterm>
    <primary>pg_start_backup</primary>
   </indexterm>
   <indexterm>
    <primary>pg_stop_backup</primary>
   </indexterm>
   <indexterm>
    <primary>pg_is_in_backup</primary>
   </indexterm>
   <indexterm>
    <primary>pg_backup_start_time</primary>
   </indexterm>
   <indexterm>
    <primary>pg_switch_wal</primary>
   </indexterm>
   <indexterm>
    <primary>pg_walfile_name</primary>
   </indexterm>
   <indexterm>
    <primary>pg_walfile_name_offset</primary>
   </indexterm>
   <indexterm>
    <primary>pg_wal_lsn_diff</primary>
   </indexterm>

   <para>
<!--
    The functions shown in <xref
    linkend="functions-admin-backup-table"> assist in making on-line backups.
    These functions cannot be executed during recovery (except
    <function>pg_is_in_backup</function>, <function>pg_backup_start_time</function>
    and <function>pg_wal_lsn_diff</function>).
-->
<xref linkend="functions-admin-backup-table">に示す関数はオンラインバックアップの作成を支援するものです。
これらの関数は、リカバリ中には実行できません(<function>pg_is_in_backup</function>、<function>pg_backup_start_time</function>、および<function>pg_wal_location_diff</function>は除く)。
   </para>

   <table id="functions-admin-backup-table">
<!--
    <title>Backup Control Functions</title>
-->
    <title>バックアップ制御関数</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry>
        <literal><function>pg_create_restore_point(<parameter>name</> <type>text</>)</function></literal>
        </entry>
       <entry><type>pg_lsn</type></entry>
<!--
       <entry>Create a named point for performing restore (restricted to superusers by default, but other users can be granted EXECUTE to run the function)</entry>
-->
       <entry>リストア実行用に名前付けされたポイントを作成(デフォルトではスーパーユーザのみ実施可能、ただし他のユーザにも関数を実行するEXECUTE権限を与えることができる)</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_current_wal_flush_lsn()</function></literal>
        </entry>
       <entry><type>pg_lsn</type></entry>
<!--
       <entry>Get current write-ahead log flush location</entry>
-->
       <entry>先行書き込みログの現在のフラッシュ位置を取得する</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_current_wal_insert_lsn()</function></literal>
        </entry>
       <entry><type>pg_lsn</type></entry>
<!--
       <entry>Get current write-ahead log insert location</entry>
-->
       <entry>現在の先行書き込みログの挿入位置の取得</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_current_wal_lsn()</function></literal>
        </entry>
       <entry><type>pg_lsn</type></entry>
<!--
       <entry>Get current write-ahead log write location</entry>
-->
       <entry>現在の先行書き込みログの書き込み位置を取得</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_start_backup(<parameter>label</> <type>text</> <optional>, <parameter>fast</> <type>boolean</> <optional>, <parameter>exclusive</> <type>boolean</> </optional></optional>)</function></literal>
        </entry>
       <entry><type>pg_lsn</type></entry>
<!--
       <entry>Prepare for performing on-line backup (restricted to superusers by default, but other users can be granted EXECUTE to run the function)</entry>
-->
       <entry>オンラインバックアップの実行準備(デフォルトではスーパーユーザでのみ実施可能、ただし他のユーザにも関数を実行するEXECUTE権限を与えることができる)</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_stop_backup()</function></literal>
        </entry>
       <entry><type>pg_lsn</type></entry>
<!--
       <entry>Finish performing exclusive on-line backup (restricted to superusers by default, but other users can be granted EXECUTE to run the function)</entry>
-->
       <entry>排他的オンラインバックアップの実行の終了(デフォルトではスーパーユーザでのみ実施可能、ただし他のユーザにも関数を実行するEXECUTE権限を与えることができる)</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_stop_backup(<parameter>exclusive</> <type>boolean</> <optional>, <parameter>wait_for_archive</> <type>boolean</> </optional>)</function></literal>
        </entry>
       <entry><type>setof record</type></entry>
<!--
       <entry>Finish performing exclusive or non-exclusive on-line backup (restricted to superusers by default, but other users can be granted EXECUTE to run the function)</entry>
-->
       <entry>排他的、あるいは非排他的オンラインバックアップの実行の終了（デフォルトではスーパーユーザでのみ実行可能、ただし他のユーザにも関数を実行するEXECUTE権限を与えることができる）</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_is_in_backup()</function></literal>
        </entry>
       <entry><type>bool</type></entry>
<!--
       <entry>True if an on-line exclusive backup is still in progress.</entry>
-->
       <entry>オンラインでの排他的バックアップが実行中は真。</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_backup_start_time()</function></literal>
        </entry>
       <entry><type>timestamp with time zone</type></entry>
<!--
       <entry>Get start time of an on-line exclusive backup in progress.</entry>
-->
       <entry>実行中のオンライン排他的バックアップの開始時刻を取得。</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_switch_wal()</function></literal>
        </entry>
       <entry><type>pg_lsn</type></entry>
<!--
       <entry>Force switch to a new write-ahead log file (restricted to superusers by default, but other users can be granted EXECUTE to run the function)</entry>
-->
       <entry>新しい先行書き込みログファイルへの強制移行(デフォルトではスーパーユーザのみ実行可能、ただし他のユーザにも関数を実行するEXECUTE権限を与えることができる)</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_walfile_name(<parameter>lsn</> <type>pg_lsn</>)</function></literal>
        </entry>
       <entry><type>text</type></entry>
<!--
       <entry>Convert write-ahead log location to file name</entry>
-->
       <entry>先行書き込みログの位置をファイル名に変換</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_walfile_name_offset(<parameter>lsn</> <type>pg_lsn</>)</function></literal>
        </entry>
       <entry><type>text</>, <type>integer</></entry>
<!--
       <entry>Convert write-ahead log location to file name and decimal byte offset within file</entry>
-->
       <entry>先行書き込みログの位置を、ファイル名とファイル内の10進のバイトオフセットに変換</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_wal_lsn_diff(<parameter>lsn</> <type>pg_lsn</>, <parameter>lsn</> <type>pg_lsn</>)</function></literal>
       </entry>
       <entry><type>numeric</></entry>
<!--
       <entry>Calculate the difference between two write-ahead log locations</entry>
-->
       <entry>2つの先行書き込みログの位置差分を算出</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    <function>pg_start_backup</> accepts an arbitrary user-defined label for
    the backup.  (Typically this would be the name under which the backup dump
    file will be stored.) When used in exclusive mode, the function writes a
    backup label file (<filename>backup_label</>) and, if there are any links
    in the <filename>pg_tblspc/</> directory, a tablespace map file
    (<filename>tablespace_map</>) into the database cluster's data directory,
    performs a checkpoint, and then returns the backup's starting write-ahead
    log location as text.  The user can ignore this result value, but it is
    provided in case it is useful. When used in non-exclusive mode, the
    contents of these files are instead returned by the
    <function>pg_stop_backup</> function, and should be written to the backup
    by the caller.
-->
<function>pg_start_backup</>は、ユーザが任意に定義したバックアップラベルを受け付けます。
（通常、格納に使用するバックアップダンプファイルにちなんだ名前が付けられます。）
排他モードで使用される場合、この関数は、データベースクラスタのデータディレクトリにバックアップラベルファイル（<filename>backup_label</>）および<filename>pg_tblspc/</>ディレクトリにリンクがあるならテーブル空間マップファイル（<filename>tablespace_map</>）を書き出し、チェックポイントを実行し、先行書き込みログのバックアップ開始位置をテキスト形式で返します。
ユーザはこの結果値を無視することができますが、便利なこともあるので提供されています。
非排他モードで使用される場合は、排他モードとは違い、これらのファイルの内容が<function>pg_stop_backup</>関数によって戻され、呼び出しユーザはそれをバックアップに書き込む必要があります。

<programlisting>
postgres=# select pg_start_backup('label_goes_here');
 pg_start_backup
-----------------
 0/D4445B8
(1 row)
</programlisting>
<!--
    There is an optional second parameter of type <type>boolean</type>.  If <literal>true</>,
    it specifies executing <function>pg_start_backup</> as quickly as
    possible.  This forces an immediate checkpoint which will cause a
    spike in I/O operations, slowing any concurrently executing queries.
-->
オプションの<type>boolean</type>型パラメータがあります。
<literal>true</>であれば、できる限り高速に<function>pg_start_backup</>を実行します。
これは、即時のチェックポイントを強制するため、I/O 操作の急激な増加を引き起こし、実行中の問い合わせ全てを遅延させることがあります。
   </para>

   <para>
<!--
    In an exclusive backup, <function>pg_stop_backup</> removes the label file
    and, if it exists, the <filename>tablespace_map</> file created by
    <function>pg_start_backup</>. In a non-exclusive backup, the contents of
    the <filename>backup_label</> and <filename>tablespace_map</> are returned
    in the result of the function, and should be written to files in the
    backup (and not in the data directory).  There is an optional second
    parameter of type <type>boolean</type>.  If false, the <function>pg_stop_backup</>
    will return immediately after the backup is completed without waiting for
    WAL to be archived.  This behavior is only useful for backup
    software which independently monitors WAL archiving. Otherwise, WAL
    required to make the backup consistent might be missing and make the backup
    useless.  When this parameter is set to true, <function>pg_stop_backup</>
    will wait for WAL to be archived when archiving is enabled; on the standby,
    this means that it will wait only when <varname>archive_mode = always</>.
    If write activity on the primary is low, it may be useful to run
    <function>pg_switch_wal</> on the primary in order to trigger
    an immediate segment switch.
-->
排他的バックアップでは、<function>pg_stop_backup</>は、<function>pg_start_backup</>で作成されたラベルファイルおよび、もしあれば<filename>tablespace_map</>ファイルを削除します。
非排他的バックアップでは、<filename>backup_label</>および<filename>tablespace_map</>の内容が関数の結果として返され、それをバックアップ内のファイルに書き込む必要があります（データディレクトリ内のファイルに書いてはいけません）。
2番目のパラメータは<type>boolean</type>型で省略可能です。
falseの場合、<function>pg_stop_backup</>はバックアップの完了後、WALがアーカイブされるのを待たずに、即座に戻ります。
この動作はWALのアーカイブを独立して監視するバックアップソフトウェアに対してのみ有用でしょう。
それ以外の場合、バックアップを一貫性のあるものにするために必要なWALが欠けていて、バックアップが役立たなくなるかもしれません。
このパラメータがtrueのとき、アーカイブが有効なら、<function>pg_stop_backup</>はWALがアーカイブされるまで待機します。
スタンバイでは、これはつまり<varname>archive_mode = always</>のときのみ待機するということです。
プライマリでの書き込み活動が少ないときは、セグメントの変更を即座に起こさせるためにプライマリで<function>pg_switch_wal</>を実行するのが有効かもしれません。
   </para>

   <para>
<!--
    When executed on a primary, the function also creates a backup history file
    in the write-ahead log
    archive area. The history file includes the label given to
    <function>pg_start_backup</>, the starting and ending write-ahead log locations for
    the backup, and the starting and ending times of the backup.  The return
    value is the backup's ending write-ahead log location (which again
    can be ignored).  After recording the ending location, the current
    write-ahead log insertion
    point is automatically advanced to the next write-ahead log file, so that the
    ending write-ahead log file can be archived immediately to complete the backup.
-->
プライマリで実行された場合、この関数はまた、先行書き込みログの格納領域にバックアップ履歴ファイルを作成します。
履歴ファイルには<function>pg_start_backup</>で付与されたラベル、バックアップの先行書き込みログの位置の開始位置、終了位置、バックアップ開始時刻、終了時刻が含まれます。
戻り値は、バックアップの終了先行書き込みログの位置です（これもまた無視可能です）。
終了位置を記録した後、現在の先行書き込みログの挿入位置は自動的に、次の先行書き込みログファイルに進みます。
従って、終了先行書き込みログファイルをすぐにアーカイブし、バックアップを完了させることができます。
   </para>

   <para>
<!--
    <function>pg_switch_wal</> moves to the next write-ahead log file, allowing the
    current file to be archived (assuming you are using continuous archiving).
    The return value is the ending write-ahead log location + 1 within the just-completed write-ahead log file.
    If there has been no write-ahead log activity since the last write-ahead log switch,
    <function>pg_switch_wal</> does nothing and returns the start location
    of the write-ahead log file currently in use.
-->
<function>pg_switch_wal</>は次の先行書き込みログファイルに移動し、現在のファイルがアーカイブできるようにします（継続的アーカイブを使用している場合）。
戻り値は完了したばかりの先行書き込みログの終了書き込みログ位置に1を加えたものです。
最後に先行書き込みログを変更したときから先行書き込みログの活動がなかった場合は、<function>pg_switch_wal</>は何もせずに、現在使用中の先行書き込みログファイルの開始位置を返します。
   </para>

   <para>
<!--
    <function>pg_create_restore_point</> creates a named write-ahead log
    record that can be used as recovery target, and returns the corresponding
    write-ahead log location.  The given name can then be used with
    <xref linkend="recovery-target-name"> to specify the point up to which
    recovery will proceed.  Avoid creating multiple restore points with the
    same name, since recovery will stop at the first one whose name matches
    the recovery target.
-->
<function>pg_create_restore_point</>はリカバリターゲットとして使用可能な名前付けされた先行書き込みログレコードを生成し、それに該当するログ位置を返します。
与えられた名前は、どこまでリカバリをするかを明示的に指定する<xref linkend="recovery-target-name">パラメータに使用することができます。
リカバリ処理はリカバリターゲットに指定した名前と一致した最初の時点で終了するため、同じ名前で複数のリストアポイントを作成することは避けてください。
   </para>

   <para>
<!--
    <function>pg_current_wal_lsn</> displays the current write-ahead log write
    location in the same format used by the above functions.  Similarly,
    <function>pg_current_wal_insert_lsn</> displays the current write-ahead log
    insertion location and <function>pg_current_wal_flush_lsn</> displays the
    current write-ahead log flush location. The insertion location is the <quote>logical</>
    end of the write-ahead log at any instant, while the write location is the end of
    what has actually been written out from the server's internal buffers and flush
    location is the location guaranteed to be written to durable storage. The write
    location is the end of what can be examined from outside the server, and is usually
    what you want if you are interested in archiving partially-complete write-ahead log
    files.  The insertion and flush locations are made available primarily for server
    debugging purposes.  These are both read-only operations and do not
    require superuser permissions.
-->
<function>pg_current_wal_lsn</>は、上記の関数で使用されるのと同じ書式で現在の先行書き込みログの書き込み位置を表示します。
同様に<function>pg_current_wal_insert_lsn</>は、現在の先行書き込みログの挿入位置を表示し、<function>pg_current_wal_flush_lsn</>はトランザクションログの現在のフラッシュ位置を表示します。
挿入位置は <quote>論理的</>な任意の時点の先行書き込みログの終了位置です。
一方、書き込み位置は、サーバの内部バッファから書き出された実際の終了位置、またフラッシュ位置は永続的ストレージへの書き込みが保証される位置です。
書き込み位置はサーバ外部から検証可能なものの終端です。通常は、部分的に完了した先行書き込みログファイルのアーカイブ処理を行いたい場合に必要とされるものです。
挿入およびフラッシュ位置はサーバをデバッグする際に主に使用されます。
これらはどちらも読み取りのみの操作であり、スーパーユーザ権限を必要としません。
   </para>

   <para>
<!--
    You can use <function>pg_walfile_name_offset</> to extract the
    corresponding write-ahead log file name and byte offset from the results of any of the
    above functions.  For example:
-->
<function>pg_walfile_name_offset</>を使用して、上記いずれの関数の結果からも、対応する先行書き込みログファイルとバイトオフセットを取り出すことができます。
以下に例を示します。
<programlisting>
postgres=# SELECT * FROM pg_walfile_name_offset(pg_stop_backup());
        file_name         | file_offset 
--------------------------+-------------
 00000001000000000000000D |     4039624
(1 row)
</programlisting>
<!--
    Similarly, <function>pg_walfile_name</> extracts just the write-ahead log file name.
    When the given write-ahead log location is exactly at a write-ahead log file boundary, both
    these functions return the name of the preceding write-ahead log file.
    This is usually the desired behavior for managing write-ahead log archiving
    behavior, since the preceding file is the last one that currently
    needs to be archived.
-->
同様に、<function>pg_walfile_name</>は、先行書き込みログファイル名のみを取り出します。
指定した先行書き込みログの位置が正確に先行書き込みログファイルの境界であった場合、これらの両関数は前の先行書き込みログファイルの名前を返します。
通常これは、先行書き込みログファイルのアーカイブ動作では好まれる動作です。
前のファイルが現在のアーカイブで必要とする最後のファイルであるからです。
   </para>

   <para>
<!--
    <function>pg_wal_lsn_diff</> calculates the difference in bytes
    between two write-ahead log locations. It can be used with
    <structname>pg_stat_replication</structname> or some functions shown in
    <xref linkend="functions-admin-backup-table"> to get the replication lag.
-->
<function>pg_wal_lsn_diff</>は、2つの先行書き込みログの位置の差分をバイト数で算出します。
この関数は<structname>pg_stat_replication</structname>や<xref linkend="functions-admin-backup-table">に示される関数と併用することで、レプリケーションの遅延の確認に使用できます。
   </para>

   <para>
<!--
    For details about proper usage of these functions, see
    <xref linkend="continuous-archiving">.
-->
これらの関数の正しい使用方法については、<xref linkend="continuous-archiving">を参照してください。
   </para>

  </sect2>

  <sect2 id="functions-recovery-control">
<!--
   <title>Recovery Control Functions</title>
-->
   <title>リカバリ制御関数</title>

   <indexterm>
    <primary>pg_is_in_recovery</primary>
   </indexterm>
   <indexterm>
    <primary>pg_last_wal_receive_lsn</primary>
   </indexterm>
   <indexterm>
    <primary>pg_last_wal_replay_lsn</primary>
   </indexterm>
   <indexterm>
    <primary>pg_last_xact_replay_timestamp</primary>
   </indexterm>

   <para>
<!--
    The functions shown in <xref
    linkend="functions-recovery-info-table"> provide information
    about the current status of the standby.
    These functions may be executed both during recovery and in normal running.
-->
<xref linkend="functions-recovery-info-table">に示される関数は、スタンバイサーバの現在のステータス情報を提供します。
これらの関数はリカバリ中、および通常稼動時に実行することができるでしょう。
   </para>

   <table id="functions-recovery-info-table">
<!--
    <title>Recovery Information Functions</title>
-->
    <title>リカバリ情報関数</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry>
        <literal><function>pg_is_in_recovery()</function></literal>
        </entry>
       <entry><type>bool</type></entry>
<!--
       <entry>True if recovery is still in progress.
-->
       <entry>まだリカバリ実施中であれば真を返します。
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_last_wal_receive_lsn()</function></literal>
        </entry>
       <entry><type>pg_lsn</type></entry>
<!--
       <entry>Get last write-ahead log location received and synced to disk by
        streaming replication. While streaming replication is in progress
        this will increase monotonically. If recovery has completed this will
        remain static at
        the value of the last WAL record received and synced to disk during
        recovery. If streaming replication is disabled, or if it has not yet
        started, the function returns NULL.
-->
       <entry>ストリーミングレプリケーションにより受信されディスクに書き込みされた、先行書き込みログの最後の位置を取得します。ストリーミングレプリケーションが実施されている場合は、この値が単調に増加していくでしょう。リカバリが完了した場合、受信されディスクに書き込まれた最後のWALレコードの位置の値がそのまま残ります。ストリーミングレプリケーションが無効、もしくは開始されていない場合、この関数はNULLを返します。
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_last_wal_replay_lsn()</function></literal>
        </entry>
       <entry><type>pg_lsn</type></entry>
<!--
       <entry>Get last write-ahead log location replayed during recovery.
        If recovery is still in progress this will increase monotonically.
        If recovery has completed then this value will remain static at
        the value of the last WAL record applied during that recovery.
        When the server has been started normally without recovery
        the function returns NULL.
-->
       <entry>リカバリ中に再生された最後の先行書き込みログの位置を取得します。リカバリが実施されている場合は、この値が単調に増加していくでしょう。リカバリが完了した場合は、リカバリ時に適用された最後のWALレコードの値がそのまま残ります。もしサーバがリカバリ無しで普通に起動された場合、この関数はNULLを返します。
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_last_xact_replay_timestamp()</function></literal>
        </entry>
       <entry><type>timestamp with time zone</type></entry>
<!--
       <entry>Get time stamp of last transaction replayed during recovery.
        This is the time at which the commit or abort WAL record for that
        transaction was generated on the primary.
        If no transactions have been replayed during recovery, this function
        returns NULL.  Otherwise, if recovery is still in progress this will
        increase monotonically.  If recovery has completed then this value will
        remain static at the value of the last transaction applied during that
        recovery.  When the server has been started normally without recovery
        the function returns NULL.
-->
        <entry>
リカバリ中に再生された最後のトランザクションのタイムスタンプを取得します。
このタイムスタンプは、プライマリにて該当するトランザクションがコミット、もしくはアボートされた際のWALレコードが生成された時間です。
リカバリ中に何のトランザクションも再生されていない場合、この関数はNULLを返します。
リカバリがまだ実行中の場合、この関数の戻り値は単調に増加します。
リカバリが完了している場合、この関数の戻り値はリカバリ中に再生した最後のトランザクションの時間のまま変化しません。
サーバがリカバリ処理無しに正常に開始された場合、この関数はNULLを返します。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <indexterm>
    <primary>pg_is_wal_replay_paused</primary>
   </indexterm>
   <indexterm>
    <primary>pg_wal_replay_pause</primary>
   </indexterm>
   <indexterm>
    <primary>pg_wal_replay_resume</primary>
   </indexterm>

   <para>
<!--
    The functions shown in <xref
    linkend="functions-recovery-control-table"> control the progress of recovery.
    These functions may be executed only during recovery.
-->
<xref linkend="functions-recovery-control-table">に示す関数は、リカバリの進行を制御する関数です。
これらの関数はリカバリ中のみ実行することが可能です。
   </para>

   <table id="functions-recovery-control-table">
<!--
    <title>Recovery Control Functions</title>
-->
    <title>リカバリ制御関数</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry>
        <literal><function>pg_is_wal_replay_paused()</function></literal>
        </entry>
       <entry><type>bool</type></entry>
<!--
       <entry>True if recovery is paused.
       </entry>
-->
       <entry>リカバリが停止中であれば真を返す
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_wal_replay_pause()</function></literal>
        </entry>
       <entry><type>void</type></entry>
<!--
       <entry>Pauses recovery immediately (restricted to superusers by default, but other users can be granted EXECUTE to run the function).
-->
       <entry>即座にリカバリを停止する(デフォルトではスーパーユーザのみ実行可能、ただし他のユーザにも関数を実行するEXECUTE権限を与えることができる)
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_wal_replay_resume()</function></literal>
        </entry>
       <entry><type>void</type></entry>
<!--
       <entry>Restarts recovery if it was paused (restricted to superusers by default, but other users can be granted EXECUTE to run the function).
-->
       <entry>もしリカバリ停止中であれば再開する(デフォルトではスーパーユーザのみ実行可能、ただし他のユーザにも関数を実行するEXECUTE権限を与えることができる)
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    While recovery is paused no further database changes are applied.
    If in hot standby, all new queries will see the same consistent snapshot
    of the database, and no further query conflicts will be generated until
    recovery is resumed.
-->
リカバリ停止中は、それ以降のデータベースへの変更は適用されません。
ホットスタンバイ側では、新しい問い合わせはすべて、同じ一貫性を持ったデータベースのスナップショットを参照することになります。
そしてリカバリが再開されるまで、これ以上の問い合わせの競合は発生しません。
   </para>

   <para>
<!--
    If streaming replication is disabled, the paused state may continue
    indefinitely without problem. While streaming replication is in
    progress WAL records will continue to be received, which will
    eventually fill available disk space, depending upon the duration of
    the pause, the rate of WAL generation and available disk space.
-->
ストリーミングレプリケーションが無効の場合、停止状態はいつまでも問題なく継続するでしょう。
ストリーミングレプリケーションの実行中は、WALレコードの受信が継続され、停止時間、WALの生成速度、ディスクの残存容量によりますが、ディスク溢れが発生する可能性があります。
   </para>

  </sect2>

  <sect2 id="functions-snapshot-synchronization">
<!--
   <title>Snapshot Synchronization Functions</title>
-->
   <title>スナップショット同期関数</title>

   <indexterm>
     <primary>pg_export_snapshot</primary>
   </indexterm>

   <para>
<!--
    <productname>PostgreSQL</> allows database sessions to synchronize their
    snapshots. A <firstterm>snapshot</> determines which data is visible to the
    transaction that is using the snapshot. Synchronized snapshots are
    necessary when two or more sessions need to see identical content in the
    database. If two sessions just start their transactions independently,
    there is always a possibility that some third transaction commits
    between the executions of the two <command>START TRANSACTION</> commands,
    so that one session sees the effects of that transaction and the other
    does not.
-->
<productname>PostgreSQL</>はデータベースのセッションに対して、それらのスナップショットを同期させることが可能です。
<firstterm>スナップショット</>は、そのスナップショットを使用しているトランザクションにどのデータが可視かを決定します。
同期スナップショットは、2つ以上のセッションにおいて、全く同じデータベース内容を見たい場合に必要となります。
単に2つのセッションが独立してそれぞれのトランザクションを開始するだけでは、第3のトランザクションのコミットが、2つのトランザクションの<command>START TRANSACTION</>の狭間で実行され、そのため一方のトランザクションではそのコミット結果が見え、他方では見えないという可能性が常にあります。
   </para>

   <para>
<!--
    To solve this problem, <productname>PostgreSQL</> allows a transaction to
    <firstterm>export</> the snapshot it is using.  As long as the exporting
    transaction remains open, other transactions can <firstterm>import</> its
    snapshot, and thereby be guaranteed that they see exactly the same view
    of the database that the first transaction sees.  But note that any
    database changes made by any one of these transactions remain invisible
    to the other transactions, as is usual for changes made by uncommitted
    transactions.  So the transactions are synchronized with respect to
    pre-existing data, but act normally for changes they make themselves.
-->
このような問題を解決するため、<productname>PostgreSQL</>ではトランザクションが使用しているスナップショットを<firstterm>エクスポート</>できるようになっています。エクスポートしたトランザクションが開かれ続けている限り、他のトランザクションがそれを<firstterm>インポート</>することができ、
そしてこれにより最初のトランザクションと正確に同じとなるデータベースの可視性を保証されます。ただし、これらの(スナップショットを共有している)トランザクションによって発生したデータベースへの変更は、コミットされていないトランザクションによる変更と同様に、(スナップショットを共有している)他のトランザクションには見えないままです。
つまり、既存データに対しては同期されますが、それら自身による変更については通常の振る舞いをします。
   </para>

   <para>
<!--
    Snapshots are exported with the <function>pg_export_snapshot</> function,
    shown in <xref linkend="functions-snapshot-synchronization-table">, and
    imported with the <xref linkend="sql-set-transaction"> command.
-->
スナップショットは、<xref linkend="functions-snapshot-synchronization-table">に示す<function>pg_export_snapshot</>関数を用いてエクスポートされ、<xref linkend="sql-set-transaction">コマンドを用いてインポートされます。
   </para>

   <table id="functions-snapshot-synchronization-table">
<!--
    <title>Snapshot Synchronization Functions</title>
-->
    <title>スナップショット同期関数</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry>
-->
      <row><entry>名前</entry> <entry>戻り値型</entry> <entry>説明</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry>
        <literal><function>pg_export_snapshot()</function></literal>
       </entry>
       <entry><type>text</type></entry>
<!--
       <entry>Save the current snapshot and return its identifier</entry>
-->
       <entry>現在のスナップショットを保存し、その識別子を返す</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    The function <function>pg_export_snapshot</> saves the current snapshot
    and returns a <type>text</> string identifying the snapshot.  This string
    must be passed (outside the database) to clients that want to import the
    snapshot.  The snapshot is available for import only until the end of the
    transaction that exported it.  A transaction can export more than one
    snapshot, if needed.  Note that doing so is only useful in <literal>READ
    COMMITTED</> transactions, since in <literal>REPEATABLE READ</> and
    higher isolation levels, transactions use the same snapshot throughout
    their lifetime.  Once a transaction has exported any snapshots, it cannot
    be prepared with <xref linkend="sql-prepare-transaction">.
-->
<function>pg_export_snapshot</>関数は現在のスナップショットを保存し、そのスナップショットを識別する<type>text</>文字列を返します。
この文字列はスナップショットをインポートしたい(データベース外の)クライアントに渡されなければなりません。
エクスポートしたトランザクションが終わるまでの間のみ、そのスナップショットをインポートすることができます。
必要ならばトランザクションは複数のスナップショットをエクスポートできます。
<literal>REPEATABLE READ</>や上位の隔離レベルでは、トランザクションはその有効期間の間同じスナップショットを使用しますので、これは<literal>READ COMMITTED</>トランザクションでのみ有用であることに注意してください。
一旦スナップショットをエクスポートしたトランザクションでは、<xref linkend="sql-prepare-transaction">による準備を使用することができなくなります。
   </para>

   <para>
<!--
    See  <xref linkend="sql-set-transaction"> for details of how to use an
    exported snapshot.
-->
エクスポートしたトランザクションの使用方法の詳細については<xref linkend="sql-set-transaction">を参照してください。
   </para>
  </sect2>

  <sect2 id="functions-replication">
<!--
   <title>Replication Functions</title>
-->
   <title>レプリケーション関数</title>

   <para>
<!--
    The functions shown
    in <xref linkend="functions-replication-table"> are for
    controlling and interacting with replication features.
    See <xref linkend="streaming-replication">,
    <xref linkend="streaming-replication-slots">, and
    <xref linkend="replication-origins">
    for information about the underlying features.  Use of these
    functions is restricted to superusers.
-->
<xref linkend="functions-replication-table">に示す関数はレプリケーション機能を制御したり、情報を取得したりするためのものです。
基盤となっている機能の情報に関しては<xref linkend="streaming-replication">、<xref linkend="streaming-replication-slots">、<xref linkend="replication-origins">を参照してください。
これらの関数の使用はスーパーユーザに限定されています。
   </para>

   <para>
<!--
    Many of these functions have equivalent commands in the replication
    protocol; see <xref linkend="protocol-replication">.
-->
これらの関数の多くには、レプリケーションプロトコルに等価なコマンドがあります。
<xref linkend="protocol-replication">を参照してください。
   </para>

   <para>
<!--
    The functions described in
    <xref linkend="functions-admin-backup">,
    <xref linkend="functions-recovery-control">, and
    <xref linkend="functions-snapshot-synchronization">
    are also relevant for replication.
-->
<xref linkend="functions-admin-backup">、<xref linkend="functions-recovery-control">、<xref linkend="functions-snapshot-synchronization">に書かれている関数もレプリケーションに関係するものです。
   </para>

   <table id="functions-replication-table">
<!--
    <title>Replication <acronym>SQL</acronym> Functions</title>
-->
    <title>レプリケーション<acronym>SQL</acronym>関数</title>
    <tgroup cols="3">
     <thead>
      <row>
<!--
       <entry>Function</entry>
       <entry>Return Type</entry>
       <entry>Description</entry>
-->
       <entry>関数</entry>
       <entry>戻り値型</entry>
       <entry>説明</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <indexterm>
         <primary>pg_create_physical_replication_slot</primary>
        </indexterm>
        <literal><function>pg_create_physical_replication_slot(<parameter>slot_name</parameter> <type>name</type> <optional>, <parameter>immediately_reserve</> <type>boolean</>, <parameter>temporary</> <type>boolean</></optional>)</function></literal>
       </entry>
       <entry>
        (<parameter>slot_name</parameter> <type>name</type>, <parameter>lsn</parameter> <type>pg_lsn</type>)
       </entry>
       <entry>
<!--
        Creates a new physical replication slot named
        <parameter>slot_name</parameter>. The optional second parameter,
        when <literal>true</>, specifies that the <acronym>LSN</> for this
        replication slot be reserved immediately; otherwise
        the <acronym>LSN</> is reserved on first connection from a streaming
        replication client. Streaming changes from a physical slot is only
        possible with the streaming-replication protocol &mdash;
        see <xref linkend="protocol-replication">. The optional third
        parameter, <parameter>temporary</>, when set to true, specifies that
        the slot should not be permanently stored to disk and is only meant
        for use by current session. Temporary slots are also
        released upon any error. This function corresponds
        to the replication protocol command <literal>CREATE_REPLICATION_SLOT
        ... PHYSICAL</literal>.
-->

<parameter>slot_name</parameter>という名前の新しい物理レプリケーションスロットを作成します。
2番目のパラメータはオプションで、<literal>true</>の場合、このレプリケーションスロットの<acronym>LSN</>が即座に予約されることを指定します。
それ以外の場合は<acronym>LSN</>はストリーミングレプリケーションのクライアントから最初に接続された時に予約されます。
物理スロットからのストリーミングの変更はストリーミングレプリケーションプロトコルでのみ可能です。<xref linkend="protocol-replication">を参照してください。
3番目のパラメータ<parameter>temporary</>はオプションで、trueに設定されるとそのスロットは永続的にディスクに保存されるものではなく、現在のセッションによってのみ用いられることを意図していることを指定します。
一時的なスロットはエラーが発生したときも解放されます。
この関数は、レプリケーションプロトコルコマンド<literal>CREATE_REPLICATION_SLOT ... PHYSICAL</literal>に対応するものです。
       </entry>
      </row>
      <row>
       <entry>
        <indexterm>
         <primary>pg_drop_replication_slot</primary>
        </indexterm>
        <literal><function>pg_drop_replication_slot(<parameter>slot_name</parameter> <type>name</type>)</function></literal>
       </entry>
       <entry>
        <type>void</type>
       </entry>
       <entry>
<!--
        Drops the physical or logical replication slot
        named <parameter>slot_name</parameter>. Same as replication protocol
        command <literal>DROP_REPLICATION_SLOT</>. For logical slots, this must
        be called when connected to the same database the slot was created on.
-->
<parameter>slot_name</parameter>という名前の物理もしくは論理レプリケーションスロットを削除します。
レプリケーションプロトコルコマンド<literal>DROP_REPLICATION_SLOT</>と同じです。
論理スロットの場合、この関数はスロットが作成されたのと同じデータベースに接続している時に呼ばなければなりません。
       </entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>pg_create_logical_replication_slot</primary>
        </indexterm>
        <literal><function>pg_create_logical_replication_slot(<parameter>slot_name</parameter> <type>name</type>, <parameter>plugin</parameter> <type>name</type> <optional>, <parameter>temporary</> <type>boolean</></optional>)</function></literal>
       </entry>
       <entry>
        (<parameter>slot_name</parameter> <type>name</type>, <parameter>lsn</parameter> <type>pg_lsn</type>)
       </entry>
       <entry>
<!--
        Creates a new logical (decoding) replication slot named
        <parameter>slot_name</parameter> using the output plugin
        <parameter>plugin</parameter>. The optional third
        parameter, <parameter>temporary</>, when set to true, specifies that
        the slot should not be permanently stored to disk and is only meant
        for use by current session. Temporary slots are also
        released upon any error. A call to this function has the same
        effect as the replication protocol command
        <literal>CREATE_REPLICATION_SLOT ... LOGICAL</literal>.
-->
出力プラグイン<parameter>plugin</parameter>を使用して、<parameter>slot_name</parameter>という名前の新しい論理(デコード)レプリケーションスロットを作成します。
3番目のパラメータ<parameter>temporary</>はオプションで、trueに設定されるとそのスロットは永続的にディスクに保存されるものではなく、現在のセッションによってのみ用いられることを意図していることを指定します。
一時的なスロットはエラーが発生したときも解放されます。
この関数を呼び出すのはレプリケーションプロトコルコマンド<literal>CREATE_REPLICATION_SLOT ... LOGICAL</literal>と同じ効果があります。
       </entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>pg_logical_slot_get_changes</primary>
        </indexterm>
        <literal><function>pg_logical_slot_get_changes(<parameter>slot_name</parameter> <type>name</type>, <parameter>upto_lsn</parameter> <type>pg_lsn</type>, <parameter>upto_nchanges</parameter> <type>int</type>, VARIADIC <parameter>options</parameter> <type>text[]</type>)</function></literal>
       </entry>
       <entry>
        (<parameter>lsn</parameter> <type>pg_lsn</type>, <parameter>xid</parameter> <type>xid</type>, <parameter>data</parameter> <type>text</type>)
       </entry>
       <entry>
<!--
        Returns changes in the slot <parameter>slot_name</parameter>, starting
        from the point at which since changes have been consumed last.  If
        <parameter>upto_lsn</> and <parameter>upto_nchanges</> are NULL,
        logical decoding will continue until end of WAL.  If
        <parameter>upto_lsn</> is non-NULL, decoding will include only
        those transactions which commit prior to the specified LSN.  If
        <parameter>upto_nchanges</parameter> is non-NULL, decoding will
        stop when the number of rows produced by decoding exceeds
        the specified value.  Note, however, that the actual number of
        rows returned may be larger, since this limit is only checked after
        adding the rows produced when decoding each new transaction commit.
-->
変更が最後に消費された時点から開始して、スロット<parameter>slot_name</parameter>の変更を返します。
<parameter>upto_lsn</>と<parameter>upto_nchanges</>がNULLならば論理デコードはWALの最後まで続きます。
<parameter>upto_lsn</>が非NULLであれば、デコードは指定されたLSNより前にコミットされたトランザクションのみを含みます。
<parameter>upto_nchanges</parameter>が非NULLであれば、デコードにより生成された行の数が指定された値を越えたときに、デコードは止まります。
しかしながら、新しいトランザクションの各コミットをデコードして生成された行を追加した後でしかこの制限は確認されませんので、実際に返される行の数は大きいかもしれないことに注意してください。
       </entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>pg_logical_slot_peek_changes</primary>
        </indexterm>
        <literal><function>pg_logical_slot_peek_changes(<parameter>slot_name</parameter> <type>name</type>, <parameter>upto_lsn</parameter> <type>pg_lsn</type>, <parameter>upto_nchanges</parameter> <type>int</type>, VARIADIC <parameter>options</parameter> <type>text[]</type>)</function></literal>
       </entry>
       <entry>
        (<parameter>lsn</parameter> <type>pg_lsn</type>, <parameter>xid</parameter> <type>xid</type>, <parameter>data</parameter> <type>text</type>)
       </entry>
       <entry>
<!--
        Behaves just like
        the <function>pg_logical_slot_get_changes()</function> function,
        except that changes are not consumed; that is, they will be returned
        again on future calls.
-->
        変更が消費されないということを除いて、<function>pg_logical_slot_get_changes()</function>関数と同じように振る舞います。すなわち、将来の呼び出しでは再び同じものが返ります。
       </entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>pg_logical_slot_get_binary_changes</primary>
        </indexterm>
        <literal><function>pg_logical_slot_get_binary_changes(<parameter>slot_name</parameter> <type>name</type>, <parameter>upto_lsn</parameter> <type>pg_lsn</type>, <parameter>upto_nchanges</parameter> <type>int</type>, VARIADIC <parameter>options</parameter> <type>text[]</type>)</function></literal>
       </entry>
       <entry>
        (<parameter>lsn</parameter> <type>pg_lsn</type>, <parameter>xid</parameter> <type>xid</type>, <parameter>data</parameter> <type>bytea</type>)
       </entry>
       <entry>
<!--
        Behaves just like
        the <function>pg_logical_slot_get_changes()</function> function,
        except that changes are returned as <type>bytea</type>.
-->
        変更は<type>bytea</type>として返されるということを除いて<function>pg_logical_slot_get_changes()</function>関数と同じように振る舞います。
       </entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>pg_logical_slot_peek_binary_changes</primary>
        </indexterm>
        <literal><function>pg_logical_slot_peek_binary_changes(<parameter>slot_name</parameter> <type>name</type>, <parameter>upto_lsn</parameter> <type>pg_lsn</type>, <parameter>upto_nchanges</parameter> <type>int</type>, VARIADIC <parameter>options</parameter> <type>text[]</type>)</function></literal>
       </entry>
       <entry>
        (<parameter>lsn</parameter> <type>pg_lsn</type>, <parameter>xid</parameter> <type>xid</type>, <parameter>data</parameter> <type>bytea</type>)
       </entry>
       <entry>
<!--
        Behaves just like
        the <function>pg_logical_slot_get_changes()</function> function,
        except that changes are returned as <type>bytea</type> and that
        changes are not consumed; that is, they will be returned again
        on future calls.
-->
        変更は<type>bytea</type>として返され消費されないということを除いて<function>pg_logical_slot_get_changes()</function>関数と同じように振る舞います。すなわち、将来の呼び出しでは再び同じものが返ります。
       </entry>
      </row>

      <row>
       <entry id="pg-replication-origin-create">
        <indexterm>
         <primary>pg_replication_origin_create</primary>
        </indexterm>
        <literal><function>pg_replication_origin_create(<parameter>node_name</parameter> <type>text</type>)</function></literal>
       </entry>
       <entry>
        <type>oid</type>
       </entry>
       <entry>
<!--
        Create a replication origin with the given external
        name, and return the internal id assigned to it.
-->
指定した外部名でレプリケーション起点を作成し、割り当てられた内部IDを返します。
       </entry>
      </row>

      <row>
       <entry id="pg-replication-origin-drop">
        <indexterm>
         <primary>pg_replication_origin_drop</primary>
        </indexterm>
        <literal><function>pg_replication_origin_drop(<parameter>node_name</parameter> <type>text</type>)</function></literal>
       </entry>
       <entry>
        <type>void</>
       </entry>
       <entry>
<!--
        Delete a previously created replication origin, including any
        associated replay progress.
-->
以前に作成されたレプリケーション起点を、それに関連するすべての再生の進捗も含めて削除します。
       </entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>pg_replication_origin_oid</primary>
        </indexterm>
        <literal><function>pg_replication_origin_oid(<parameter>node_name</parameter> <type>text</type>)</function></literal>
       </entry>
       <entry>
        <type>oid</type>
       </entry>
       <entry>
<!--
        Lookup a replication origin by name and return the internal id. If no
        corresponding replication origin is found an error is thrown.
-->
レプリケーション起点を名前で検索し、内部IDを返します。
相当するレプリケーション起点が見つからない場合はエラーが発生します。
       </entry>
      </row>

      <row>
       <entry id="pg-replication-origin-session-setup">
        <indexterm>
         <primary>pg_replication_origin_session_setup</primary>
        </indexterm>
        <literal><function>pg_replication_origin_session_setup(<parameter>node_name</parameter> <type>text</type>)</function></literal>
       </entry>
       <entry>
        <type>void</>
       </entry>
       <entry>
<!--
        Mark the current session as replaying from the given
        origin, allowing replay progress to be tracked.  Use
        <function>pg_replication_origin_session_reset</function> to revert.
        Can only be used if no previous origin is configured.
-->
現在のセッションに、指定の起点から再生中であると印を付け、再生の進捗が追跡できるようにします。
元に戻すには<function>pg_replication_origin_session_reset</function>を使って下さい。
以前に起点が設定されていない場合にのみ使うことができます。
       </entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>pg_replication_origin_session_reset</primary>
        </indexterm>
        <literal><function>pg_replication_origin_session_reset()</function></literal>
       </entry>
       <entry>
        <type>void</>
       </entry>
       <entry>
<!--
        Cancel the effects
        of <function>pg_replication_origin_session_setup()</function>.
-->
<function>pg_replication_origin_session_setup()</function>の効果を取り消します。
       </entry>
      </row>

      <row>
       <entry>
        <indexterm>
         <primary>pg_replication_origin_session_is_setup</primary>
        </indexterm>
        <literal><function>pg_replication_origin_session_is_setup()</function></literal>
       </entry>
       <entry>
        <type>bool</type>
       </entry>
       <entry>
<!--
        Has a replication origin been configured in the current session?
-->
現在のセッションで、レプリケーション起点が設定されたかどうかを返します。
       </entry>
      </row>

      <row>
       <entry id="pg-replication-origin-session-progress">
        <indexterm>
         <primary>pg_replication_origin_session_progress</primary>
        </indexterm>
        <literal><function>pg_replication_origin_session_progress(<parameter>flush</parameter> <type>bool</type>)</function></literal>
       </entry>
       <entry>
        <type>pg_lsn</type>
       </entry>
       <entry>
<!--
        Return the replay location for the replication origin configured in
        the current session. The parameter <parameter>flush</parameter>
        determines whether the corresponding local transaction will be
        guaranteed to have been flushed to disk or not.
-->
現在のセッションで設定されたレプリケーション起点の再生位置を返します。
パラメータ<parameter>flush</parameter>により、対応するローカルトランザクションがディスクにフラッシュされていることが保証されるかどうかを決定します。
       </entry>
      </row>

      <row>
       <entry id="pg-replication-origin-xact-setup">
        <indexterm>
         <primary>pg_replication_origin_xact_setup</primary>
        </indexterm>
        <literal><function>pg_replication_origin_xact_setup(<parameter>origin_lsn</parameter> <type>pg_lsn</type>, <parameter>origin_timestamp</parameter> <type>timestamptz</type>)</function></literal>
       </entry>
       <entry>
        <type>void</>
       </entry>
       <entry>
<!--
        Mark the current transaction as replaying a transaction that has
        committed at the given <acronym>LSN</acronym> and timestamp. Can
        only be called when a replication origin has previously been
        configured using
        <function>pg_replication_origin_session_setup()</function>.
-->
現在のトランザクションに、指定の<acronym>LSN</acronym>およびタイムスタンプでコミットしたトランザクションを再生中であると印をつけます。
事前にレプリケーション起点が<function>pg_replication_origin_session_setup()</function>を使って設定されている場合にのみ呼び出せます。
       </entry>
      </row>

      <row>
       <entry id="pg-replication-origin-xact-reset">
        <indexterm>
         <primary>pg_replication_origin_xact_reset</primary>
        </indexterm>
        <literal><function>pg_replication_origin_xact_reset()</function></literal>
       </entry>
       <entry>
        <type>void</>
       </entry>
       <entry>
<!--
        Cancel the effects of
        <function>pg_replication_origin_xact_setup()</function>.
-->
<function>pg_replication_origin_xact_setup()</function>の効果を取り消します。
       </entry>
      </row>

      <row>
       <entry id="pg-replication-origin-advance">
        <indexterm>
         <primary>pg_replication_origin_advance</primary>
        </indexterm>
        <literal>pg_replication_origin_advance<function>(<parameter>node_name</parameter> <type>text</type>, <parameter>lsn</parameter> <type>pg_lsn</type>)</function></literal>
       </entry>
       <entry>
        <type>void</>
       </entry>
       <entry>
<!--
        Set replication progress for the given node to the given
        location. This primarily is useful for setting up the initial location
        or a new location after configuration changes and similar. Be aware
        that careless use of this function can lead to inconsistently
        replicated data.
-->
指定したノードのレプリケーションの進捗を、指定の位置に設定します。
これは主に設定変更の後で初期位置や新しい位置を設定するときなどに役立ちます。
この関数を不注意に使うと、レプリケーションデータが一貫性を失うかもしれないことに注意して下さい。
       </entry>
      </row>

      <row>
       <entry id="pg-replication-origin-progress">
        <indexterm>
         <primary>pg_replication_origin_progress</primary>
        </indexterm>
        <literal><function>pg_replication_origin_progress(<parameter>node_name</parameter> <type>text</type>, <parameter>flush</parameter> <type>bool</type>)</function></literal>
       </entry>
       <entry>
        <type>pg_lsn</type>
       </entry>
       <entry>
<!--
        Return the replay location for the given replication origin. The
        parameter <parameter>flush</parameter> determines whether the
        corresponding local transaction will be guaranteed to have been
        flushed to disk or not.
-->
指定したレプリケーション起点の再生位置を返します。
パラメータ<parameter>flush</parameter>により、対応するローカルトランザクションがディスクにフラッシュされていることが保証されるかどうかを決定します。
       </entry>
      </row>

      <row>
       <entry id="pg-logical-emit-message-text">
        <indexterm>
         <primary>pg_logical_emit_message</primary>
        </indexterm>
        <literal><function>pg_logical_emit_message(<parameter>transactional</parameter> <type>bool</type>, <parameter>prefix</parameter> <type>text</type>, <parameter>content</parameter> <type>text</type>)</function></literal>
       </entry>
       <entry>
        <type>pg_lsn</type>
       </entry>
       <entry>
<!--
        Emit text logical decoding message. This can be used to pass generic
        messages to logical decoding plugins through WAL. The parameter
        <parameter>transactional</parameter> specifies if the message should
        be part of current transaction or if it should be written immediately
        and decoded as soon as the logical decoding reads the record. The
        <parameter>prefix</parameter> is textual prefix used by the logical
        decoding plugins to easily recognize interesting messages for them.
        The <parameter>content</parameter> is the text of the message.
-->
論理デコードのテキストのメッセージを送出します
これは汎用的なメッセージをWALを通して論理デコードのプラグインに渡すのに使うことができます。
パラメータ<parameter>transactional</parameter>は、メッセージが現在のトランザクションの一部なのか、あるいはすぐに書き込み、論理デコードがレコードを読んだらすぐにデコードされるべきものなのかを指定します。
<parameter>prefix</parameter>は文字通りの接頭辞で、論理デコードのプラグインが、自分にとって関心のあるメッセージを容易に認識できるように使われます。
<parameter>content</parameter>はメッセージのテキストです。
       </entry>
      </row>

      <row>
       <entry id="pg-logical-emit-message-bytea">
        <literal><function>pg_logical_emit_message(<parameter>transactional</parameter> <type>bool</type>, <parameter>prefix</parameter> <type>text</type>, <parameter>content</parameter> <type>bytea</type>)</function></literal>
       </entry>
       <entry>
        <type>pg_lsn</type>
       </entry>
       <entry>
<!--
        Emit binary logical decoding message. This can be used to pass generic
        messages to logical decoding plugins through WAL. The parameter
        <parameter>transactional</parameter> specifies if the message should
        be part of current transaction or if it should be written immediately
        and decoded as soon as the logical decoding reads the record. The
        <parameter>prefix</parameter> is textual prefix used by the logical
        decoding plugins to easily recognize interesting messages for them.
        The <parameter>content</parameter> is the binary content of the
        message.
-->
論理デコードのバイナリのメッセージを送出します
これは汎用的なメッセージをWALを通して論理デコードのプラグインに渡すのに使うことができます。
パラメータ<parameter>transactional</parameter>は、メッセージが現在のトランザクションの一部なのか、あるいはすぐに書き込み、論理デコードがレコードを読んだらすぐにデコードされるべきものなのかを指定します。
<parameter>prefix</parameter>は文字通りの接頭辞で、論理デコードのプラグインが、自分にとって関心のあるメッセージを容易に認識できるように使われます。
<parameter>content</parameter>はメッセージのバイナリの内容です。
       </entry>
      </row>

     </tbody>
    </tgroup>
   </table>

  </sect2>

  <sect2 id="functions-admin-dbobject">
<!--
   <title>Database Object Management Functions</title>
-->
   <title>データベースオブジェクト管理関数</title>

   <para>
<!--
    The functions shown in <xref linkend="functions-admin-dbsize"> calculate
    the disk space usage of database objects.
-->
<xref linkend="functions-admin-dbsize">で示された関数はデータベースオブジェクトのディスク領域を計算します。
   </para>

   <indexterm>
    <primary>pg_column_size</primary>
   </indexterm>
   <indexterm>
    <primary>pg_database_size</primary>
   </indexterm>
   <indexterm>
    <primary>pg_indexes_size</primary>
   </indexterm>
   <indexterm>
    <primary>pg_relation_size</primary>
   </indexterm>
   <indexterm>
    <primary>pg_size_bytes</primary>
   </indexterm>
   <indexterm>
    <primary>pg_size_pretty</primary>
   </indexterm>
   <indexterm>
    <primary>pg_table_size</primary>
   </indexterm>
   <indexterm>
    <primary>pg_tablespace_size</primary>
   </indexterm>
   <indexterm>
    <primary>pg_total_relation_size</primary>
   </indexterm>

   <table id="functions-admin-dbsize">
<!--
    <title>Database Object Size Functions</title>
-->
    <title>データベースオブジェクト容量関数</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><literal><function>pg_column_size(<type>any</type>)</function></literal></entry>
       <entry><type>int</type></entry>
<!--
       <entry>Number of bytes used to store a particular value (possibly compressed)</entry>
-->
       <entry>特定の値を格納するのに使用される（場合により圧縮された）バイト数</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_database_size(<type>oid</type>)</function></literal>
        </entry>
       <entry><type>bigint</type></entry>
<!--
       <entry>Disk space used by the database with the specified OID</entry>
-->
       <entry>指定されたOIDのデータベースで使用されるディスク容量</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_database_size(<type>name</type>)</function></literal>
        </entry>
       <entry><type>bigint</type></entry>
<!--
       <entry>Disk space used by the database with the specified name</entry>
-->
       <entry>指定された名前のデータベースで使用されるディスク容量</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_indexes_size(<type>regclass</type>)</function></literal>
        </entry>
       <entry><type>bigint</type></entry>
       <entry>
<!--
        Total disk space used by indexes attached to the specified table
-->
指定されテーブルに付与されたインデックスで使用される総ディスク容量。
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_relation_size(<parameter>relation</parameter> <type>regclass</type>, <parameter>fork</parameter> <type>text</type>)</function></literal>
        </entry>
       <entry><type>bigint</type></entry>
       <entry>
<!--
        Disk space used by the specified fork (<literal>'main'</literal>,
        <literal>'fsm'</literal>, <literal>'vm'</>, or <literal>'init'</>)
        of the specified table or index
-->
指定されたテーブルまたはインデックスの指定されたフォーク（<literal>'main'</literal>、<literal>'fsm'</literal>、<literal>'vm'</>または<literal>'init'</>）で使用されるディスク容量
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_relation_size(<parameter>relation</parameter> <type>regclass</type>)</function></literal>
        </entry>
       <entry><type>bigint</type></entry>
       <entry>
<!--
        Shorthand for <literal>pg_relation_size(..., 'main')</literal>
-->
<literal>pg_relation_size(..., 'main')</literal>の省略表現
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_size_bytes(<type>text</type>)</function></literal>
        </entry>
       <entry><type>bigint</type></entry>
       <entry>
<!--
         Converts a size in human-readable format with size units into bytes
-->
単位付きの可読性の高い形式のサイズをバイトに変換
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_size_pretty(<type>bigint</type>)</function></literal>
        </entry>
       <entry><type>text</type></entry>
       <entry>
<!--
         Converts a size in bytes expressed as a 64-bit integer into a
         human-readable format with size units
-->
64ビット整数で表現されたサイズ（バイト数）を、サイズの単位をつけた可読性が高い書式に変換
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_size_pretty(<type>numeric</type>)</function></literal>
        </entry>
       <entry><type>text</type></entry>
       <entry>
<!--
         Converts a size in bytes expressed as a numeric value into a
         human-readable format with size units
-->
numeric値で表現されたサイズ（バイト数）を、サイズの単位をつけた可読性が高い書式に変換
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_table_size(<type>regclass</type>)</function></literal>
        </entry>
       <entry><type>bigint</type></entry>
       <entry>
<!--
        Disk space used by the specified table, excluding indexes
        (but including TOAST, free space map, and visibility map)
-->
指定されたテーブルで使用されるディスク容量、インデックスは除外する（しかしTOAST、空き領域マップ、可視性マップは含む）
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_tablespace_size(<type>oid</type>)</function></literal>
        </entry>
       <entry><type>bigint</type></entry>
<!--
       <entry>Disk space used by the tablespace with the specified OID</entry>
-->
       <entry>指定されたOIDを持つテーブル空間で使用されるディスク容量</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_tablespace_size(<type>name</type>)</function></literal>
        </entry>
       <entry><type>bigint</type></entry>
<!--
       <entry>Disk space used by the tablespace with the specified name</entry>
-->
       <entry>指定された名前を持つテーブル空間で使用されるディスク容量</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_total_relation_size(<type>regclass</type>)</function></literal>
        </entry>
       <entry><type>bigint</type></entry>
       <entry>
<!--
        Total disk space used by the specified table,
        including all indexes and <acronym>TOAST</> data
-->
指定されたテーブルで使用される、すべてのインデックスと<acronym>TOAST</>データを含むディスク総容量
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    <function>pg_column_size</> shows the space used to store any individual
    data value.
-->
    <function>pg_column_size</>は任意の個別のデータ値を格納するのに使用されている領域を示します。
   </para>

   <para>
<!--
    <function>pg_total_relation_size</> accepts the OID or name of a
    table or toast table, and returns the total on-disk space used for
    that table, including all associated indexes.  This function is
    equivalent to <function>pg_table_size</function>
    <literal>+</> <function>pg_indexes_size</function>.
-->
<function>pg_total_relation_size</>は、テーブルまたはTOASTテーブルのOIDまたは名前を受け付け、指定されたテーブルと関連する全てのインデックスで使用される総ディスク容量を返します。
この関数は<function>pg_table_size</function> <literal>+</> <function>pg_indexes_size</function> の結果と等しいです。
   </para>

   <para>
<!--
    <function>pg_table_size</> accepts the OID or name of a table and
    returns the disk space needed for that table, exclusive of indexes.
    (TOAST space, free space map, and visibility map are included.)
-->
<function>pg_table_size</>は、テーブルのOIDまたは名前を受け付け、インデックスを除いたテーブルのみで使用されるディスク容量を返します。
(TOAST領域、空き領域マップ、可視性マップは含みます。)
   </para>

   <para>
<!--
    <function>pg_indexes_size</> accepts the OID or name of a table and
    returns the total disk space used by all the indexes attached to that
    table.
-->
<function>pg_indexes_size</>は、テーブルのOIDまたは名前を受け付け、指定されたテーブル付与されている全てのインデックスで使用されるディスク容量を返します。
   </para>

   <para>
<!--
    <function>pg_database_size</function> and <function>pg_tablespace_size</>
    accept the OID or name of a database or tablespace, and return the total
    disk space used therein.  To use <function>pg_database_size</function>,
    you must have <literal>CONNECT</> permission on the specified database
    (which is granted by default), or be a member of the <literal>pg_read_all_stats</>
    role. To use <function>pg_tablespace_size</>, you must have
    <literal>CREATE</> permission on the specified tablespace, or be a member
    of the <literal>pg_read_all_stats</> role unless it is the default tablespace for
    the current database.
-->
<function>pg_database_size</>と<function>pg_tablespace_size</>はデータベースまたはテーブル空間の名前またはOIDを受付け、そこで使用される総容量を返します。
<function>pg_database_size</function>を使うためには、指定されたデータベースに<literal>CONNECT</>権限(デフォルトで付与されている)を持っているか、あるいは<literal>pg_read_all_stats</>ロールのメンバーでなければなりません。
<function>pg_tablespace_size</>を使うためには、それが現在のデータベースのデフォルトテーブル空間でない限り、指定されたテーブル空間に<literal>CREATE</>権限を持っているか、あるいは<literal>pg_read_all_stats</>ロールのメンバーでなければなりません。
   </para>

   <para>
<!--
    <function>pg_relation_size</> accepts the OID or name of a table, index
    or toast table, and returns the on-disk size in bytes of one fork of
    that relation.  (Note that for most purposes it is more convenient to
    use the higher-level functions <function>pg_total_relation_size</>
    or <function>pg_table_size</>, which sum the sizes of all forks.)
    With one argument, it returns the size of the main data fork of the
    relation.  The second argument can be provided to specify which fork
    to examine:
-->
<function>pg_relation_size</>は、テーブル、インデックス、またはTOASTテーブルのOIDまたは名前を受け付け、そのリレーションの1つのフォークのディスク容量をバイト単位で返します。
(たいていの目的には、高位の関数<function>pg_total_relation_size</>や<function>pg_table_size</>を使うのがより便利であることに注意してください。高位の関数はフォークすべての容量を合計します。)
引数1つでは、そのリレーションの主データフォークの容量を返します。
2番目の引数はどのフォークを調査するかを指定するために設定できます。
    <itemizedlist spacing="compact">
     <listitem>
      <para>
<!--
       <literal>'main'</literal> returns the size of the main
       data fork of the relation.
-->
<literal>'main'</literal>を指定すると、そのリレーションの主データフォークの容量を返します。
      </para>
     </listitem>
     <listitem>
      <para>
<!--
       <literal>'fsm'</literal> returns the size of the Free Space Map
       (see <xref linkend="storage-fsm">) associated with the relation.
-->
<literal>'fsm'</literal>を指定すると、リレーションに関連した空き領域マップ(<xref linkend="storage-fsm">を参照)を返します。
      </para>
     </listitem>
     <listitem>
      <para>
<!--
       <literal>'vm'</literal> returns the size of the Visibility Map
       (see <xref linkend="storage-vm">) associated with the relation.
-->
<literal>'vm'</literal>を指定すると、リレーションに関連した可視性マップ(<xref linkend="storage-vm">を参照)の容量を返します。
      </para>
     </listitem>
     <listitem>
      <para>
<!--
       <literal>'init'</literal> returns the size of the initialization
       fork, if any, associated with the relation.
-->
<literal>'init'</literal>を指定すると、もしあれば、リレーションに関連した初期化フォークの容量を返します。
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
<!--
    <function>pg_size_pretty</> can be used to format the result of one of
    the other functions in a human-readable way, using bytes, kB, MB, GB or TB
    as appropriate.
-->
<function>pg_size_pretty</>は、適切にbytes、kB、MB、GB、もしくはTB単位を使用して目で見て判るようにその他の関数の1つの結果を整形するのに使用可能です。
   </para>

   <para>
<!--
    <function>pg_size_bytes</> can be used to get the size in bytes from a
    string in human-readable format. The input may have units of bytes, kB,
    MB, GB or TB, and is parsed case-insensitively. If no units are specified,
    bytes are assumed.
-->
<function>pg_size_bytes</>可読性の高い形式の文字列からバイト単位のサイズを取得するのに使用可能です。
入力はbytes、kB、MB、GB、TBの単位を使用可能で、大文字小文字を区別せずに解釈されます。
単位の指定がなければ、bytes（バイト）であるとみなされます。
   </para>

   <note>
    <para>
<!--
     The units kB, MB, GB and TB used by the functions
     <function>pg_size_pretty</> and <function>pg_size_bytes</> are defined
     using powers of 2 rather than powers of 10, so 1kB is 1024 bytes, 1MB is
     1024<superscript>2</> = 1048576 bytes, and so on.
-->
<function>pg_size_pretty</>および<function>pg_size_bytes</>が利用するkB、MB、GB、TBの単位は10のべき乗ではなく2のべき乗として定義されているため、1kBは1024バイト、1MBは1024<superscript>2</> = 1048576バイト、それ以上も同じようになります。
    </para>
   </note>

   <para>
<!--
    The functions above that operate on tables or indexes accept a
    <type>regclass</> argument, which is simply the OID of the table or index
    in the <structname>pg_class</> system catalog.  You do not have to look up
    the OID by hand, however, since the <type>regclass</> data type's input
    converter will do the work for you.  Just write the table name enclosed in
    single quotes so that it looks like a literal constant.  For compatibility
    with the handling of ordinary <acronym>SQL</acronym> names, the string
    will be converted to lower case unless it contains double quotes around
    the table name.
-->
上記の関数において、テーブルやインデックスを<type>regclass</>引数として受け取って処理するものがありますが、この引数は単に<structname>pg_class</>システムカタログにあるテーブルやインデックスのOIDです。
ただし、<type>regclass</>データ型が自動で入力変換を行うため、ユーザが手動で該当するOIDを調べる必要はありません。リテラル定数のようにシングルクオートで囲んだテーブル名を記述するだけです。
通常のSQL名に対する処理互換のため、テーブル名をダブルクオートで囲わない限り、テーブル名として入力された文字列は小文字に変換されます。
   </para>

   <para>
<!--
    If an OID that does not represent an existing object is passed as
    argument to one of the above functions, NULL is returned.
-->
上記の関数に対し、既存オブジェクトに該当するものがないOIDが渡された場合はNULLが返されます。
   </para>

   <para>
<!--
    The functions shown in <xref linkend="functions-admin-dblocation"> assist
    in identifying the specific disk files associated with database objects.
-->
<xref linkend="functions-admin-dblocation"> に示される関数は、データベースオブジェクトに関連する特定のディスクファイルを確認する際の手助けとなります。
   </para>

   <indexterm>
    <primary>pg_relation_filenode</primary>
   </indexterm>
   <indexterm>
    <primary>pg_relation_filepath</primary>
   </indexterm>
   <indexterm>
    <primary>pg_filenode_relation</primary>
   </indexterm>

   <table id="functions-admin-dblocation">
<!--
    <title>Database Object Location Functions</title>
-->
    <title>データベースオブジェクト位置関数</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry>
        <literal><function>pg_relation_filenode(<parameter>relation</parameter> <type>regclass</type>)</function></literal>
        </entry>
       <entry><type>oid</type></entry>
       <entry>
<!--
        Filenode number of the specified relation
-->
        指定されたリレーションのファイルノード番号
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_relation_filepath(<parameter>relation</parameter> <type>regclass</type>)</function></literal>
        </entry>
       <entry><type>text</type></entry>
       <entry>
<!--
        File path name of the specified relation
-->
        指定されたリレーションのファイルパス
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_filenode_relation(<parameter>tablespace</parameter> <type>oid</type>, <parameter>filenode</parameter> <type>oid</type>)</function></literal>
        </entry>
       <entry><type>regclass</type></entry>
       <entry>
<!--
        Find the relation associated with a given tablespace and filenode
-->
        与えられたテーブル空間とファイルノードに関連するリレーションを見つける
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    <function>pg_relation_filenode</> accepts the OID or name of a table,
    index, sequence, or toast table, and returns the <quote>filenode</> number
    currently assigned to it.  The filenode is the base component of the file
    name(s) used for the relation (see <xref linkend="storage-file-layout">
    for more information).  For most tables the result is the same as
    <structname>pg_class</>.<structfield>relfilenode</>, but for certain
    system catalogs <structfield>relfilenode</> is zero and this function must
    be used to get the correct value.  The function returns NULL if passed
    a relation that does not have storage, such as a view.
-->
<function>pg_relation_filenode</>は、テーブル、インデックス、シーケンス、もしくはTOASTテーブルのOIDまたは名前を受け付け、現在それに充てられている<quote>ファイルノード</>番号を返します。
ファイルノードは、リレーションに使用しているファイル名の基礎部分です(詳しくは<xref linkend="storage-file-layout">を参照して下さい)。
ほとんどのテーブルについては、結果が<structname>pg_class</>.<structfield>relfilenode</>と同じになります。ただし、いくつかのシステムカタログでは<structfield>relfilenode</>が0になるため、これらのシステムカタログの正しいファイルノードを取得するには、この関数を使用しなければいけません。
この関数は、ビューの様にストレージに格納されないリレーションが指定された場合はNULLを返します。
   </para>

   <para>
<!--
    <function>pg_relation_filepath</> is similar to
    <function>pg_relation_filenode</>, but it returns the entire file path name
    (relative to the database cluster's data directory <varname>PGDATA</>) of
    the relation.
-->
<function>pg_relation_filepath</>は<function>pg_relation_filenode</>と似ていますが、こちらはリレーションのファイルパス名(データベースクラスタのディレクトリである<varname>PGDATA</>からの相対パス)を返します。
   </para>

   <para>
<!--
    <function>pg_filenode_relation</> is the reverse of
    <function>pg_relation_filenode</>. Given a <quote>tablespace</> OID and
    a <quote>filenode</>, it returns the associated relation's OID. For a table
    in the database's default tablespace, the tablespace can be specified as 0.
-->
<function>pg_filenode_relation</>は<function>pg_relation_filenode</>の逆です。
<quote>テーブル空間</>OIDと<quote>ファイルノード</>を与えると、関連するリレーションのOIDを返します。
データベースのデフォルトテーブル空間内のテーブルに対しては、テーブル空間は0と指定できます。
   </para>

   <para>
<!--
    <xref linkend="functions-admin-collation"> lists functions used to manage
    collations.
-->
<xref linkend="functions-admin-collation">に照合順序の管理に使用される関数の一覧を示します。
    collations.
   </para>

   <table id="functions-admin-collation">
<!--
    <title>Collation Management Functions</title>
-->
    <title>照合順序管理関数</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry></row>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry></row>
     </thead>

     <tbody>
      <row>
       <entry>
        <indexterm><primary>pg_collation_actual_version</primary></indexterm>
        <literal><function>pg_collation_actual_version(<type>oid</>)</function></literal>
       </entry>
       <entry><type>text</type></entry>
<!--
       <entry>Return actual version of collation from operating system</entry>
-->
       <entry>照合順序の実際のバージョンをオペレーティングシステムから返す</entry>
      </row>
      <row>
       <entry>
        <indexterm><primary>pg_import_system_collations</primary></indexterm>
        <literal><function>pg_import_system_collations(<parameter>schema</> <type>regnamespace</>)</function></literal>
       </entry>
       <entry><type>integer</type></entry>
<!--
       <entry>Import operating system collations</entry>
-->
       <entry>オペレーティングシステムの照合順序をインポートする</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    <function>pg_collation_actual_version</function> returns the actual
    version of the collation object as it is currently installed in the
    operating system.  If this is different from the value
    in <literal>pg_collation.collversion</literal>, then objects depending on
    the collation might need to be rebuilt.  See also
    <xref linkend="sql-altercollation">.
-->
<function>pg_collation_actual_version</function>は照合順序の実際のバージョンをオペレーティングシステムに現在インストールされている通りに返します。
これが<literal>pg_collation.collversion</literal>の値と異なる場合は、その照合順序に依存するオブジェクトは再構築が必要かもしれません。
<xref linkend="sql-altercollation">も参照してください。
   </para>

   <para>
<!--
    <function>pg_import_system_collations</> adds collations to the system
    catalog <literal>pg_collation</literal> based on all the
    locales it finds in the operating system.  This is
    what <command>initdb</command> uses;
    see <xref linkend="collation-managing"> for more details.  If additional
    locales are installed into the operating system later on, this function
    can be run again to add collations for the new locales.  Locales that
    match existing entries in <literal>pg_collation</literal> will be skipped.
    (But collation objects based on locales that are no longer
    present in the operating system are not removed by this function.)
    The <parameter>schema</parameter> parameter would typically
    be <literal>pg_catalog</literal>, but that is not a requirement;
    the collations could be installed into some other schema as well.
    The function returns the number of new collation objects it created.
-->
<function>pg_import_system_collations</>は、オペレーティングシステム上にあるすべてのロケールに基づき、システムカタログ<literal>pg_collation</literal>に照合順序を追加します。
これは<command>initdb</command>が使用しているもので、より詳細については<xref linkend="collation-managing">を参照してください。
その後にオペレーティングシステムに追加のロケールをインストールした場合、この関数を再度実行して、その新しいロケールの照合順序を追加することができます。
<literal>pg_collation</literal>に既存のエントリにマッチするロケールはスキップされます。
（しかし、オペレーティングシステム上にもはや存在しなくなったロケールに基づく照合順序オブジェクトはこの関数では削除されません。）
<parameter>schema</parameter>パラメータは通常は<literal>pg_catalog</literal>ですが、必ずしもそうでなければならないわけではなく、照合順序をどれか他のスキーマにインストールすることもできます。
この関数は新しく作成された照合順序オブジェクトの数を返します。
   </para>

  </sect2>

  <sect2 id="functions-admin-index">
<!--
   <title>Index Maintenance Functions</title>
-->
   <title>インデックス保守関数</title>

   <indexterm>
    <primary>brin_summarize_new_values</primary>
   </indexterm>

   <indexterm>
    <primary>gin_clean_pending_list</primary>
   </indexterm>

   <indexterm>
    <primary>brin_summarize_range</primary>
   </indexterm>

   <indexterm>
    <primary>brin_desummarize_range</primary>
   </indexterm>

   <para>
<!--
    <xref linkend="functions-admin-index-table"> shows the functions
    available for index maintenance tasks.
    These functions cannot be executed during recovery.
    Use of these functions is restricted to superusers and the owner
    of the given index.
-->
<xref linkend="functions-admin-index-table">にインデックスの保守タスクに使用可能な関数を示します。
これらの関数はリカバリ中は実行できません。
これらの関数の使用はスーパーユーザと対象のインデックスの所有者に限定されます。
   </para>

   <table id="functions-admin-index-table">
<!--
    <title>Index Maintenance Functions</title>
-->
    <title>インデックス保守関数</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry></row>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry></row>
     </thead>

     <tbody>
      <row>
       <entry>
        <literal><function>brin_summarize_new_values(<parameter>index</> <type>regclass</>)</function></literal>
       </entry>
       <entry><type>integer</type></entry>
<!--
       <entry>summarize page ranges not already summarized</entry>
-->
       <entry>まだ要約されていないページ範囲を要約する</entry>
      </row>
      <row>
       <entry>
        <literal><function>brin_summarize_range(<parameter>index</> <type>regclass</>, <parameter>blockNumber</> <type>bigint</type>)</function></literal>
       </entry>
       <entry><type>integer</type></entry>
<!--
       <entry>summarize the page range covering the given block, if not already summarized</entry>
-->
       <entry>指定のブロックを含むページ範囲が、まだ要約されていなければ、要約する</entry>
      </row>
      <row>
       <entry>
        <literal><function>brin_desummarize_range(<parameter>index</> <type>regclass</>, <parameter>blockNumber</> <type>bigint</type>)</function></literal>
       </entry>
       <entry><type>integer</type></entry>
<!--
       <entry>de-summarize the page range covering the given block, if summarized</entry>
-->
       <entry>指定のブロックを含むページ範囲が要約されていれば、要約されていない状態にする</entry>
      </row>
      <row>
       <entry>
        <literal><function>gin_clean_pending_list(<parameter>index</> <type>regclass</>)</function></literal>
       </entry>
       <entry><type>bigint</type></entry>
<!--
       <entry>move GIN pending list entries into main index structure</entry>
-->
       <entry>GINの処理待ちリストのエントリをメインのインデックス構造に移動する</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    <function>brin_summarize_new_values</> accepts the OID or name of a
    BRIN index and inspects the index to find page ranges in the base table
    that are not currently summarized by the index; for any such range
    it creates a new summary index tuple by scanning the table pages.
    It returns the number of new page range summaries that were inserted
    into the index.  <function>brin_summarize_range</> does the same, except
    it only summarizes the range that covers the given block number.
-->
<function>brin_summarize_new_values</>はBRINインデックスのOIDまたは名前を受け取り、インデックスを検査してベーステーブル内のインデックスによって現在要約されていないページ範囲を探します。
そのような範囲があれば、テーブルのページをスキャンして新しい要約インデックスタプルを作成します。
インデックスに挿入された新しいページ範囲要約の数を返します。
<function>brin_summarize_range</>も同じですが、ただし指定のブロック番号を含む範囲についてしか要約しません。
   </para>

   <para>
<!--
    <function>gin_clean_pending_list</> accepts the OID or name of
    a GIN index and cleans up the pending list of the specified index
    by moving entries in it to the main GIN data structure in bulk.
    It returns the number of pages removed from the pending list.
    Note that if the argument is a GIN index built with
    the <literal>fastupdate</> option disabled, no cleanup happens and the
    return value is 0, because the index doesn't have a pending list.
    Please see <xref linkend="gin-fast-update"> and <xref linkend="gin-tips">
    for details of the pending list and <literal>fastupdate</> option.
-->
<function>gin_clean_pending_list</>はGINインデックスのOIDまたは名前を受け取り、指定のインデックスの処理待ちリストのエントリをメインのGINデータ構造にまとめて移動することで、リストを削除します。
処理待ちリストから削除されたページ数が返されます。
引数が<literal>fastupdate</>オプションを無効にして構築されたGINインデックスの場合、インデックスには処理待ちリストがないため、削除は発生せず、戻り値は0になることに注意して下さい。
処理待ちリストおよび<literal>fastupdate</>の詳細については<xref linkend="gin-fast-update">および<xref linkend="gin-tips">を参照して下さい。
   </para>

  </sect2>

  <sect2 id="functions-admin-genfile">
<!--
   <title>Generic File Access Functions</title>
-->
   <title>汎用ファイルアクセス関数</title>

   <para>
<!--
    The functions shown in <xref
    linkend="functions-admin-genfile-table"> provide native access to
    files on the machine hosting the server. Only files within the
    database cluster directory and the <varname>log_directory</> can be
    accessed.  Use a relative path for files in the cluster directory,
    and a path matching the <varname>log_directory</> configuration setting
    for log files.  Use of these functions is restricted to superusers
    except where stated otherwise.
-->
<xref linkend="functions-admin-genfile-table">で示されている関数はサーバをホスティングしているマシン上のファイルに対し、ネイティブのアクセスを提供します。
データベースクラスタディレクトリと<varname>log_directory</>に存在するファイルのみがアクセス可能です。
クラスタディレクトリ内のファイルに対して相対パスを、そしてログファイルに対しては<varname>log_directory</>構成設定に一致するパスを使用してください。
これらの関数は特に記述がある場合を除き、スーパーユーザだけが使用できます。
   </para>

   <table id="functions-admin-genfile-table">
<!--
    <title>Generic File Access Functions</title>
-->
    <title>汎用ファイルアクセス関数</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry>
        <literal><function>pg_ls_dir(<parameter>dirname</> <type>text</> [, <parameter>missing_ok</> <type>boolean</>, <parameter>include_dot_dirs</> <type>boolean</>])</function></literal>
       </entry>
       <entry><type>setof text</type></entry>
       <entry>
<!--
        List the contents of a directory.
-->
ディレクトリの内容を一覧表示する
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_ls_logdir()</function></literal>
       </entry>
       <entry><type>setof record</type></entry>
       <entry>
<!--
        List the name, size, and last modification time of files in the log
        directory. Access is granted to members of the <literal>pg_monitor</>
        role and may be granted to other non-superuser roles.
-->
ログディレクトリ内のファイルの名前、サイズ、最終更新時刻を一覧表示します。
<literal>pg_monitor</>ロールのメンバーにはアクセス権が付与されており、他の非スーパーユーザのロールにもアクセス権を付与することができます。
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_ls_waldir()</function></literal>
       </entry>
       <entry><type>setof record</type></entry>
       <entry>
<!--
        List the name, size, and last modification time of files in the WAL
        directory. Access is granted to members of the <literal>pg_monitor</>
        role and may be granted to other non-superuser roles.
-->
WALディレクトリ内のファイルの名前、サイズ、最終更新時刻を一覧表示します。
<literal>pg_monitor</>ロールのメンバーにはアクセス権が付与されており、他の非スーパーユーザのロールにもアクセス権を付与することができます。
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_read_file(<parameter>filename</> <type>text</> [, <parameter>offset</> <type>bigint</>, <parameter>length</> <type>bigint</> [, <parameter>missing_ok</> <type>boolean</>] ])</function></literal>
       </entry>
       <entry><type>text</type></entry>
       <entry>
<!--
        Return the contents of a text file.
-->
テキストファイルの内容を返す
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_read_binary_file(<parameter>filename</> <type>text</> [, <parameter>offset</> <type>bigint</>, <parameter>length</> <type>bigint</> [, <parameter>missing_ok</> <type>boolean</>] ])</function></literal>
       </entry>
       <entry><type>bytea</type></entry>
       <entry>
<!--
        Return the contents of a file.
-->
ファイルの内容を返す
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_stat_file(<parameter>filename</> <type>text</>[, <parameter>missing_ok</> <type>boolean</type>])</function></literal>
       </entry>
       <entry><type>record</type></entry>
       <entry>
<!--
        Return information about a file.
-->
ファイルについての情報を返す
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    Some of these functions take an optional <parameter>missing_ok</> parameter,
    which specifies the behavior when the file or directory does not exist.
    If <literal>true</literal>, the function returns NULL (except
    <function>pg_ls_dir</>, which returns an empty result set). If
    <literal>false</>, an error is raised. The default is <literal>false</>.
-->
これらの関数の一部はオプションで<parameter>missing_ok</>パラメータをとり、ファイルまたはディレクトリが存在しない場合の動作を指定できます。
<literal>true</literal>の場合、関数はNULLを返します（ただし、<function>pg_ls_dir</>は空の結果集合を返します）。
<literal>false</>の場合はエラーが発生します。
デフォルトは<literal>false</>です。
   </para>

   <indexterm>
    <primary>pg_ls_dir</primary>
   </indexterm>
   <para>
<!--
    <function>pg_ls_dir</> returns the names of all files (and directories
    and other special files) in the specified directory. The <parameter>
    include_dot_dirs</> indicates whether <quote>.</> and <quote>..</> are
    included in the result set. The default is to exclude them
    (<literal>false</>), but including them can be useful when
    <parameter>missing_ok</> is <literal>true</literal>, to distinguish an
    empty directory from an non-existent directory.
-->
<function>pg_ls_dir</>は、指定されたディレクトリ内のすべてのファイル（およびディレクトリと他の特殊ファイル）の名前を返します。
<parameter>include_dot_dirs</>は<quote>.</>と<quote>..</>が結果集合に含まれるかどうかを指定します。
デフォルト(<literal>false</>)ではそれらを除外しますが、それらを含めると、<parameter>missing_ok</>が<literal>true</literal>の場合は、空のディレクトリと存在しないディレクトリを区別するために役立つでしょう。
   </para>

   <indexterm>
    <primary>pg_ls_logdir</primary>
   </indexterm>
   <para>
<!--
    <function>pg_ls_logdir</> returns the name, size, and last modified time
    (mtime) of each file in the log directory. By default, only superusers
    and members of the <literal>pg_monitor</> role can use this function.
    Access may be granted to others using <command>GRANT</command>.
-->
<function>pg_ls_logdir</>はログディレクトリ内の各ファイルについて、名前、サイズ、最終更新時刻（mtime）を返します。
デフォルトでは、スーパーユーザと<literal>pg_monitor</>ロールのメンバーだけがこの関数を使用できます。
<command>GRANT</command>を使って他のロールにアクセス権を付与することができます。
   </para>

   <indexterm>
    <primary>pg_ls_waldir</primary>
   </indexterm>
   <para>
<!--
    <function>pg_ls_waldir</> returns the name, size, and last modified time
    (mtime) of each file in the write ahead log (WAL) directory. By
    default only superusers and members of the <literal>pg_monitor</> role
    can use this function. Access may be granted to others using
    <command>GRANT</command>.
-->
<function>pg_ls_waldir</>は先行書き込みログ（WAL）ディレクトリ内の各ファイルについて、名前、サイズ、最終更新時刻（mtime）を返します。
デフォルトでは、スーパーユーザと<literal>pg_monitor</>ロールのメンバーだけがこの関数を使用できます。
<command>GRANT</command>を使って他のロールにアクセス権を付与することができます。
   </para>

   <indexterm>
    <primary>pg_read_file</primary>
   </indexterm>
   <para>
<!--
    <function>pg_read_file</> returns part of a text file, starting
    at the given <parameter>offset</>, returning at most <parameter>length</>
    bytes (less if the end of file is reached first).  If <parameter>offset</>
    is negative, it is relative to the end of the file.
    If <parameter>offset</> and <parameter>length</> are omitted, the entire
    file is returned.  The bytes read from the file are interpreted as a string
    in the server encoding; an error is thrown if they are not valid in that
    encoding.
-->
<function>pg_read_file</>は与えられた<parameter>offset</>から始まり、最大<parameter>length</>バイト（先にファイルの終りに到達すればこれより少なくなります）テキストファイルの一部分を返します。
<parameter>offset</>が負の場合にはファイルの終りから数えた位置から読み出します。
<parameter>offset</>と<parameter>length</>が省略された場合、ファイル全体が返されます。
ファイルから読み込まれたバイトは、そのサーバの符号化方式での文字列として解釈されます。
読み込んだバイト列がその符号化方式において有効でない場合にはエラーが投げられます。
   </para>

   <indexterm>
    <primary>pg_read_binary_file</primary>
   </indexterm>
   <para>
<!--
    <function>pg_read_binary_file</> is similar to
    <function>pg_read_file</>, except that the result is a <type>bytea</type> value;
    accordingly, no encoding checks are performed.
    In combination with the <function>convert_from</> function, this function
    can be used to read a file in a specified encoding:
-->
<function>pg_read_binary_file</>は、結果が<type>bytea</type>値となり、従って符号化の検査がされないことを除き、<function>pg_read_file</>と似ています。
<function>convert_from</>関数と組み合わせることで、この関数を、指定した符号化方式でファイルの読み込むために使うことができます。
    
<programlisting>
SELECT convert_from(pg_read_binary_file('file_in_utf8.txt'), 'UTF8');
</programlisting>
   </para>

   <indexterm>
    <primary>pg_stat_file</primary>
   </indexterm>
   <para>
<!--
    <function>pg_stat_file</> returns a record containing the file
    size, last accessed time stamp, last modified time stamp,
    last file status change time stamp (Unix platforms only),
    file creation time stamp (Windows only), and a <type>boolean</type>
    indicating if it is a directory.  Typical usages include:
-->
<function>pg_stat_file</>はファイル容量、最終アクセス時刻、最終更新時刻、最後にファイルステータスを変更した時刻（これはUnixプラットフォームのみ）、ファイル作成時刻（Windowsのみ）および、ディレクトリかどうかを示す<type>boolean</type>を返します。
典型的な使用方法を示します。
<programlisting>
SELECT * FROM pg_stat_file('filename');
SELECT (pg_stat_file('filename')).modification;
</programlisting>
   </para>

  </sect2>

  <sect2 id="functions-advisory-locks">
<!--
   <title>Advisory Lock Functions</title>
-->
   <title>勧告的ロック用関数</title>

   <para>
<!--
    The functions shown in <xref linkend="functions-advisory-locks-table">
    manage advisory locks.  For details about proper use of these functions,
    see <xref linkend="advisory-locks">.
-->
<xref linkend="functions-advisory-locks-table">に示す関数は勧告的ロックを管理します。
これらの関数の適切な使用方法についての詳細は、<xref linkend="advisory-locks">を参照してください。
   </para>

   <table id="functions-advisory-locks-table">
<!--
    <title>Advisory Lock Functions</title>
-->
    <title>勧告的ロック用関数</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry>
        <literal><function>pg_advisory_lock(<parameter>key</> <type>bigint</>)</function></literal>
       </entry>
       <entry><type>void</type></entry>
<!--
       <entry>Obtain exclusive session level advisory lock</entry>
-->
       <entry>セッションレベルの排他勧告的ロックを獲得</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_advisory_lock(<parameter>key1</> <type>int</>, <parameter>key2</> <type>int</>)</function></literal>
       </entry>
       <entry><type>void</type></entry>
<!--
       <entry>Obtain exclusive session level advisory lock</entry>
-->
       <entry>セッションレベルの排他勧告的ロックを獲得</entry>
      </row>

      <row>
       <entry>
        <literal><function>pg_advisory_lock_shared(<parameter>key</> <type>bigint</>)</function></literal>
       </entry>
       <entry><type>void</type></entry>
<!--
       <entry>Obtain shared session level advisory lock</entry>
-->
       <entry>セッションレベルの共有勧告的ロックを獲得</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_advisory_lock_shared(<parameter>key1</> <type>int</>, <parameter>key2</> <type>int</>)</function></literal>
       </entry>
       <entry><type>void</type></entry>
<!--
       <entry>Obtain shared session level advisory lock</entry>
-->
       <entry>セッションレベルの共有勧告的ロックを獲得</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_advisory_unlock(<parameter>key</> <type>bigint</>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>Release an exclusive session level advisory lock</entry>
-->
       <entry>セッションレベルの排他勧告的ロックを解放</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_advisory_unlock(<parameter>key1</> <type>int</>, <parameter>key2</> <type>int</>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>Release an exclusive session level advisory lock</entry>
-->
       <entry>セッションレベルの排他勧告的ロックを解放</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_advisory_unlock_all()</function></literal>
       </entry>
       <entry><type>void</type></entry>
<!--
       <entry>Release all session level advisory locks held by the current session</entry>
-->
       <entry>現在のセッションで保持している全てのセッションレベルの勧告的ロックを解放</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_advisory_unlock_shared(<parameter>key</> <type>bigint</>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>Release a shared session level advisory lock</entry>
-->
       <entry>セッションレベルの共有勧告的ロックを解放</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_advisory_unlock_shared(<parameter>key1</> <type>int</>, <parameter>key2</> <type>int</>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>Release a shared session level advisory lock</entry>
-->
       <entry>セッションレベルの共有勧告的ロックの解放</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_advisory_xact_lock(<parameter>key</> <type>bigint</>)</function></literal>
       </entry>
       <entry><type>void</type></entry>
<!--
       <entry>Obtain exclusive transaction level advisory lock</entry>
-->
       <entry>トランザクションレベルの排他勧告的ロックの獲得</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_advisory_xact_lock(<parameter>key1</> <type>int</>, <parameter>key2</> <type>int</>)</function></literal>
       </entry>
       <entry><type>void</type></entry>
<!--
       <entry>Obtain exclusive transaction level advisory lock</entry>
-->
       <entry>トランザクションレベルの排他勧告的ロックの獲得</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_advisory_xact_lock_shared(<parameter>key</> <type>bigint</>)</function></literal>
       </entry>
       <entry><type>void</type></entry>
<!--
       <entry>Obtain shared transaction level advisory lock</entry>
-->
       <entry>トランザクションレベルの共有勧告的ロックの獲得</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_advisory_xact_lock_shared(<parameter>key1</> <type>int</>, <parameter>key2</> <type>int</>)</function></literal>
       </entry>
       <entry><type>void</type></entry>
<!--
       <entry>Obtain shared transaction level advisory lock</entry>
-->
       <entry>トランザクションレベルの共有勧告的ロックの獲得</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_try_advisory_lock(<parameter>key</> <type>bigint</>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>Obtain exclusive session level advisory lock if available</entry>
-->
       <entry>可能ならばセッションレベルの排他勧告的ロックを獲得</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_try_advisory_lock(<parameter>key1</> <type>int</>, <parameter>key2</> <type>int</>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>Obtain exclusive session level advisory lock if available</entry>
-->
       <entry>可能ならばセッションレベルの排他勧告的ロックを獲得</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_try_advisory_lock_shared(<parameter>key</> <type>bigint</>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>Obtain shared session level advisory lock if available</entry>
-->
       <entry>可能ならばセッションレベルの共有勧告的ロックを獲得</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_try_advisory_lock_shared(<parameter>key1</> <type>int</>, <parameter>key2</> <type>int</>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>Obtain shared session level advisory lock if available</entry>
-->
       <entry>可能ならばセッションレベルの共有勧告的ロックを獲得</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_try_advisory_xact_lock(<parameter>key</> <type>bigint</>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>Obtain exclusive transaction level advisory lock if available</entry>
-->
       <entry>可能ならばトランザクションレベルの排他勧告的ロックの獲得</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_try_advisory_xact_lock(<parameter>key1</> <type>int</>, <parameter>key2</> <type>int</>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>Obtain exclusive transaction level advisory lock if available</entry>
-->
       <entry>可能ならばトランザクションレベルの排他勧告的ロックの獲得</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_try_advisory_xact_lock_shared(<parameter>key</> <type>bigint</>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>Obtain shared transaction level advisory lock if available</entry>
-->
       <entry>可能ならばトランザクションレベルの共有勧告的ロックの獲得</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_try_advisory_xact_lock_shared(<parameter>key1</> <type>int</>, <parameter>key2</> <type>int</>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
<!--
       <entry>Obtain shared transaction level advisory lock if available</entry>
-->
       <entry>可能ならばトランザクションレベルの共有勧告的ロックの獲得</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <indexterm>
    <primary>pg_advisory_lock</primary>
   </indexterm>
   <para>
<!--
    <function>pg_advisory_lock</> locks an application-defined resource,
    which can be identified either by a single 64-bit key value or two
    32-bit key values (note that these two key spaces do not overlap).
    If another session already holds a lock on the same resource identifier,
    this function will wait until the resource becomes available.  The lock
    is exclusive.  Multiple lock requests stack, so that if the same resource
    is locked three times it must then be unlocked three times to be
    released for other sessions' use.
-->
<function>pg_advisory_lock</>は、アプリケーションが定義したリソースをロックします。キーは単一の64ビットキー値、または、２つの32ビットキー（この2つのキー空間は重複しないことに注意）によって識別されます。
もし、別のセッションが同一リソースに対するロックを保持している場合、関数はリソースが利用可能になるまで待機します。ロックは排他ロックです。
複数のロック要求があればスタックに積まれるため、同一リソースが３回ロックされた場合、他のセッションが使用できるように解放するためにはロック解除を３回行わなければなりません。
   </para>

   <indexterm>
    <primary>pg_advisory_lock_shared</primary>
   </indexterm>
   <para>
<!--
    <function>pg_advisory_lock_shared</> works the same as
    <function>pg_advisory_lock</>,
    except the lock can be shared with other sessions requesting shared locks.
    Only would-be exclusive lockers are locked out.
-->
<function>pg_advisory_lock_shared</>の動作は<function>pg_advisory_lock</>と同じですが、他のセッションの共有ロックと共有できるロックである点が異なります。
排他ロック要求のみ締め出されます。
   </para>

   <indexterm>
    <primary>pg_try_advisory_lock</primary>
   </indexterm>
   <para>
<!--
    <function>pg_try_advisory_lock</> is similar to
    <function>pg_advisory_lock</>, except the function will not wait for the
    lock to become available.  It will either obtain the lock immediately and
    return <literal>true</>, or return <literal>false</> if the lock cannot be
    acquired immediately.
-->
<function>pg_try_advisory_lock</>は<function>pg_advisory_lock</>と同様ですが、この関数の場合、ロックが利用可能になるまで待機しません。
ロックを即座に取得し<literal>true</>を返すか、ロックを即座に獲得できなかった場合に<literal>false</>を返すかのいずれかです。
   </para>

   <indexterm>
    <primary>pg_try_advisory_lock_shared</primary>
   </indexterm>
   <para>
<!--
    <function>pg_try_advisory_lock_shared</> works the same as
    <function>pg_try_advisory_lock</>, except it attempts to acquire
    a shared rather than an exclusive lock.
-->
<function>pg_try_advisory_lock_shared</>の動作は <function>pg_try_advisory_lock</>と同じですが、排他ロックではなく共有ロックの獲得を試みます。
   </para>

   <indexterm>
    <primary>pg_advisory_unlock</primary>
   </indexterm>
   <para>
<!--
    <function>pg_advisory_unlock</> will release a previously-acquired
    exclusive session level advisory lock.  It
    returns <literal>true</> if the lock is successfully released.
    If the lock was not held, it will return <literal>false</>,
    and in addition, an SQL warning will be reported by the server.
-->
<function>pg_advisory_unlock</>は、事前に獲得したセッションレベルの勧告的排他ロックを解放します。ロックの解放に成功した場合、<literal>true</>を返します。ロックを保持していない場合、<literal>false</>を返し、さらに、SQL警告がサーバから報告されます。
   </para>

   <indexterm>
    <primary>pg_advisory_unlock_shared</primary>
   </indexterm>
   <para>
<!--
    <function>pg_advisory_unlock_shared</> works the same as
    <function>pg_advisory_unlock</>,
    except it releases a shared session level advisory lock.
-->
<function>pg_advisory_unlock_shared</>の動作は<function>pg_advisory_unlock</>と同じですが、セッションレベルの勧告的共有ロックを解放する点が異なります。
   </para>

   <indexterm>
    <primary>pg_advisory_unlock_all</primary>
   </indexterm>
   <para>
<!--
    <function>pg_advisory_unlock_all</> will release all session level advisory
    locks held by the current session.  (This function is implicitly invoked
    at session end, even if the client disconnects ungracefully.)
-->
<function>pg_advisory_unlock_all</>は、現在のセッションで保持するセッションレベルの勧告的ロックをすべて解放します。
（この関数は、クライアントとの接続がぶざまに切れた場合でも、セッション終了時に暗黙的に呼び出されます。)
   </para>

   <indexterm>
    <primary>pg_advisory_xact_lock</primary>
   </indexterm>
   <para>
<!--
    <function>pg_advisory_xact_lock</> works the same as
    <function>pg_advisory_lock</>, except the lock is automatically released
    at the end of the current transaction and cannot be released explicitly.
-->
<function>pg_advisory_xact_lock</>の動作は<function>pg_advisory_lock</>と同じですが、現在のトランザクションの終了時に自動的にロックが解放され、明示的なロックの解放はできません。
   </para>

   <indexterm>
    <primary>pg_advisory_xact_lock_shared</primary>
   </indexterm>
   <para>
<!--
    <function>pg_advisory_xact_lock_shared</> works the same as
    <function>pg_advisory_lock_shared</>, except the lock is automatically released
    at the end of the current transaction and cannot be released explicitly.
-->
<function>pg_advisory_xact_lock_shared</>の動作は<function>pg_advisory_lock_shared</>と同じですが、現在のトランザクションの終了時に自動的にロックが解放され、明示的なロックの解放はできません。
   </para>

   <indexterm>
    <primary>pg_try_advisory_xact_lock</primary>
   </indexterm>
   <para>
<!--
    <function>pg_try_advisory_xact_lock</> works the same as
    <function>pg_try_advisory_lock</>, except the lock, if acquired,
    is automatically released at the end of the current transaction and
    cannot be released explicitly.
-->
<function>pg_try_advisory_xact_lock</>の動作は<function>pg_try_advisory_lock</>と同じですが、ロックが獲得できた場合は現在のトランザクションの終了時に自動的にロックが解放され、明示的なロックの解放はできません。
   </para>

   <indexterm>
    <primary>pg_try_advisory_xact_lock_shared</primary>
   </indexterm>
   <para>
<!--
    <function>pg_try_advisory_xact_lock_shared</> works the same as
    <function>pg_try_advisory_lock_shared</>, except the lock, if acquired,
    is automatically released at the end of the current transaction and
    cannot be released explicitly.
-->
<function>pg_try_advisory_xact_lock_shared</>の動作は<function>pg_try_advisory_lock_shared</>と同じですが、ロックが獲得できた場合は現在のトランザクションの終了時に自動的にロックが解放され、明示的なロックの解放はできません。
   </para>

  </sect2>

  </sect1>

  <sect1 id="functions-trigger">
<!--
   <title>Trigger Functions</title>
-->
   <title>トリガ関数</title>

   <indexterm>
     <primary>suppress_redundant_updates_trigger</primary>
   </indexterm>

   <para>
<!--
      Currently <productname>PostgreSQL</> provides one built in trigger
      function, <function>suppress_redundant_updates_trigger</>,
      which will prevent any update
      that does not actually change the data in the row from taking place, in
      contrast to the normal behavior which always performs the update
      regardless of whether or not the data has changed. (This normal behavior
      makes updates run faster, since no checking is required, and is also
      useful in certain cases.)
-->
現在、<productname>PostgreSQL</>は、１つの組み込みトリガ関数<function>suppress_redundant_updates_trigger</>を提供しており、通常の動作、つまりデータが変更されようがされまいがに関わらず常に更新をする場合とは正反対に、行のデータを実際に変更しない更新が起こらないようにします。
（この通常の動作は、検査を必要としないため更新をより迅速に行い、場合によっては便利です。）
    </para>

    <para>
<!--
      Ideally, you should normally avoid running updates that don't actually
      change the data in the record. Redundant updates can cost considerable
      unnecessary time, especially if there are lots of indexes to alter,
      and space in dead rows that will eventually have to be vacuumed.
      However, detecting such situations in client code is not
      always easy, or even possible, and writing expressions to detect
      them can be error-prone. An alternative is to use
      <function>suppress_redundant_updates_trigger</>, which will skip
      updates that don't change the data. You should use this with care,
      however. The trigger takes a small but non-trivial time for each record,
      so if most of the records affected by an update are actually changed,
      use of this trigger will actually make the update run slower.
-->
理想的には、通常実際レコード内のデータを変更しない更新の実行を避けるべきです。
冗長な更新により、特に変更対象の多くのインデックスが存在する場合、無視できない不要な時間にかかるコストが発生することがあります。
また、最後にはバキュームしなければならなくなる不要行が場所を取ることになります。
しかし、こうした状況をクライアント側で判定することは常に簡単ではありません。
また、可能であったとしても、それを検知するための式の記述はエラーを招きがちです。
他の方法として、<function>suppress_redundant_updates_trigger</>を使用することがあります。
これはデータを変更しない更新を飛ばします。
しかしこの関数は注意して使用しなければなりません。
このトリガはレコードごとに小さな、しかし僅かではない時間がかかります。
このため、更新が影響するレコードのほとんどが実際に変更された場合、このトリガは確実に更新の実行を低速にします。
    </para>

    <para>
<!--
      The <function>suppress_redundant_updates_trigger</> function can be
      added to a table like this:
-->
<function>suppress_redundant_updates_trigger</>関数は以下のようにテーブルに追加できます。
<programlisting>
CREATE TRIGGER z_min_update
BEFORE UPDATE ON tablename
FOR EACH ROW EXECUTE PROCEDURE suppress_redundant_updates_trigger();
</programlisting>
<!--
      In most cases, you would want to fire this trigger last for each row.
      Bearing in mind that triggers fire in name order, you would then
      choose a trigger name that comes after the name of any other trigger
      you might have on the table.
-->
ほとんどの場合、それぞれの行に対しこのトリガを最後に起動させる必要が生じます。
トリガは名前順に起動されることを判っているとして、テーブル上に存在する可能性のある他のトリガの名前の後に続くようトリガ名を選択できます。
    </para>
    <para>
<!--
       For more information about creating triggers, see
        <xref linkend="SQL-CREATETRIGGER">.
-->
トリガ作成についてより詳細は<xref linkend="SQL-CREATETRIGGER">を参照ください。
    </para>
  </sect1>

  <sect1 id="functions-event-triggers">
<!--
   <title>Event Trigger Functions</title>
-->
   <title>イベントトリガ関数</title>

   <para>
<!--
    <productname>PostgreSQL</> provides these helper functions
    to retrieve information from event triggers.
-->
<productname>PostgreSQL</>はイベントトリガについての情報を取得するために以下のヘルパ関数を提供しています。
   </para>

   <para>
<!--
    For more information about event triggers,
    see <xref linkend="event-triggers">.
-->
イベントトリガについての詳細は<xref linkend="event-triggers">を参照して下さい。
   </para>

  <sect2 id="pg-event-trigger-ddl-command-end-functions">
<!--
   <title>Capturing Changes at Command End</title>
-->
   <title>コマンド側での変更を捕らえる</title>

   <indexterm>
    <primary>pg_event_trigger_ddl_commands</primary>
   </indexterm>

   <para>
<!--
    <function>pg_event_trigger_ddl_commands</> returns a list of
    <acronym>DDL</acronym> commands executed by each user action,
    when invoked in a function attached to a
    <literal>ddl_command_end</> event trigger.  If called in any other
    context, an error is raised.
    <function>pg_event_trigger_ddl_commands</> returns one row for each
    base command executed; some commands that are a single SQL sentence
    may return more than one row.  This function returns the following
    columns:
-->
<function>pg_event_trigger_ddl_commands</>が<literal>ddl_command_end</>イベントトリガーに付与された関数から起動されると、各ユーザの操作によって実行された<acronym>DDL</acronym>コマンドの一覧を返します。
それ以外の環境から呼び出された場合はエラーが発生します。
<function>pg_event_trigger_ddl_commands</>は、実行された基となるコマンドのそれぞれについて1行を返します。
1つのSQL文として実行されるいくつかのコマンドに対して、複数の行が返されることもあります。
この関数は以下の列を返します。

    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
<!--
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Description</entry>
-->
        <entry>名前</entry>
        <entry>型</entry>
        <entry>説明</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><literal>classid</literal></entry>
        <entry><type>Oid</type></entry>
<!--
        <entry>OID of catalog the object belongs in</entry>
-->
        <entry>オブジェクトが属するカタログのOID</entry>
       </row>
       <row>
        <entry><literal>objid</literal></entry>
        <entry><type>Oid</type></entry>
<!--
        <entry>OID of the object in the catalog</entry>
-->
        <entry>カタログ内のオブジェクトのOID</entry>
       </row>
       <row>
        <entry><literal>objsubid</literal></entry>
        <entry><type>integer</type></entry>
<!--
        <entry>Object sub-id (e.g. attribute number for columns)</entry>
-->
        <entry>オブジェクトのサブID（例：列の属性番号）</entry>
       </row>
       <row>
        <entry><literal>command_tag</literal></entry>
        <entry><type>text</type></entry>
<!--
        <entry>command tag</entry>
-->
        <entry>コマンドのタグ</entry>
       </row>
       <row>
        <entry><literal>object_type</literal></entry>
        <entry><type>text</type></entry>
<!--
        <entry>Type of the object</entry>
-->
        <entry>オブジェクトの型</entry>
       </row>
       <row>
        <entry><literal>schema_name</literal></entry>
        <entry><type>text</type></entry>
        <entry>
<!--
         Name of the schema the object belongs in, if any; otherwise <literal>NULL</>.
         No quoting is applied.
-->
オブジェクトが属するスキーマの名前（あれば）。
なければ<literal>NULL</>。
引用符づけされない。
        </entry>
       </row>
       <row>
        <entry><literal>object_identity</literal></entry>
        <entry><type>text</type></entry>
        <entry>
<!--
         Text rendering of the object identity, schema-qualified. Each and every
         identifier present in the identity is quoted if necessary.
-->
オブジェクトの識別をテキスト表現したもので、スキーマ修飾される。
識別内に存在するすべての識別子は、必要なら引用符で括られる。
        </entry>
       </row>
       <row>
        <entry><literal>in_extension</literal></entry>
        <entry><type>bool</type></entry>
<!--
        <entry>whether the command is part of an extension script</entry>
-->
        <entry>コマンドが拡張のスクリプトの一部かどうか</entry>
       </row>
       <row>
        <entry><literal>command</literal></entry>
        <entry><type>pg_ddl_command</type></entry>
        <entry>
<!--
         A complete representation of the command, in internal format.
         This cannot be output directly, but it can be passed to other
         functions to obtain different pieces of information about the
         command.
-->
コマンドを内部形式で完全に表現したもの。
これを直接出力することはできないが、コマンドについて他の情報を得るために、他の関数に渡すことができる。
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </para>
  </sect2>

  <sect2 id="pg-event-trigger-sql-drop-functions">
<!--
   <title>Processing Objects Dropped by a DDL Command</title>
-->
   <title>DDLコマンドで削除されたオブジェクトの処理</title>

   <indexterm>
     <primary>pg_event_trigger_dropped_objects</primary>
   </indexterm>

   <para>
<!--
    <function>pg_event_trigger_dropped_objects</> returns a list of all objects
    dropped by the command in whose <literal>sql_drop</> event it is called.
    If called in any other context,
    <function>pg_event_trigger_dropped_objects</> raises an error.
    <function>pg_event_trigger_dropped_objects</> returns the following columns:
-->
関数<function>pg_event_trigger_dropped_objects</>は、それが呼ばれた<literal>sql_drop</>イベントのコマンドにより削除された全てのオブジェクトのリストを返します。
その他いかなる状況で呼ばれた場合、<function>pg_event_trigger_dropped_objects</>はエラーを生じさせます。
<function>pg_event_trigger_dropped_objects</>は以下の列を返します。

    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
<!--
        <entry>Name</entry>
        <entry>Type</entry>
        <entry>Description</entry>
-->
        <entry>名前</entry>
        <entry>型</entry>
        <entry>説明</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><literal>classid</literal></entry>
        <entry><type>Oid</type></entry>
<!--
        <entry>OID of catalog the object belonged in</entry>
-->
        <entry>オブジェクトが所属するカタログのOID</entry>
       </row>
       <row>
        <entry><literal>objid</literal></entry>
        <entry><type>Oid</type></entry>
<!--
        <entry>OID the object had within the catalog</entry>
-->
        <entry>カタログ内に所有するオブジェクトのOID</entry>
       </row>
       <row>
        <entry><literal>objsubid</literal></entry>
        <entry><type>int32</type></entry>
<!--
        <entry>Object sub-id (e.g. attribute number for columns)</entry>
-->
        <entry> (列の属性番号のような)オブジェクトの副id</entry>
       </row>
       <row>
        <entry><literal>original</literal></entry>
        <entry><type>bool</type></entry>
<!--
        <entry>Flag used to identify the root object(s) of the deletion</entry>
-->
        <entry>削除のルートオブジェクトを特定するために使われるフラグ</entry>
       </row>
       <row>
        <entry><literal>normal</literal></entry>
        <entry><type>bool</type></entry>
        <entry>
<!--
         Flag indicating that there's a normal dependency relationship
         in the dependency graph leading to this object
-->
このオブジェクトへと至る依存関係グラフで、通常の依存があることを示すフラグ
        </entry>
       </row>
       <row>
        <entry><literal>is_temporary</literal></entry>
        <entry><type>bool</type></entry>
        <entry>
<!--
         Flag indicating that the object was a temporary object.
-->
オブジェクトが一時オブジェクトであったことを示すフラグ
        </entry>
       </row>
       <row>
        <entry><literal>object_type</literal></entry>
        <entry><type>text</type></entry>
<!--
        <entry>Type of the object</entry>
-->
        <entry>オブジェクトの型</entry>
       </row>
       <row>
        <entry><literal>schema_name</literal></entry>
        <entry><type>text</type></entry>
        <entry>
<!--
         Name of the schema the object belonged in, if any; otherwise <literal>NULL</>.
         No quoting is applied.
-->
オブジェクトが所属しているスキーマの名前（あれば）。
なければ<literal>NULL</>。
引用符づけされない。
        </entry>
       </row>
       <row>
        <entry><literal>object_name</literal></entry>
        <entry><type>text</type></entry>
        <entry>
<!--
         Name of the object, if the combination of schema and name can be
         used as a unique identifier for the object; otherwise <literal>NULL</>.
         No quoting is applied, and name is never schema-qualified.
-->
スキーマと名前の組み合わせがオブジェクトに対する一意の識別子として使用可能な場合はオブジェクトの名前。そうでないときは<literal>NULL</>。
引用符は適用されず、名前は決してスキーマで修飾されない。
        </entry>
       </row>
       <row>
        <entry><literal>object_identity</literal></entry>
        <entry><type>text</type></entry>
        <entry>
<!--
         Text rendering of the object identity, schema-qualified. Each and every
         identifier present in the identity is quoted if necessary.
-->
オブジェクト識別のテキスト表現で、スキーマ修飾される。
権限のなかにあるそれぞれ全ての識別子は必要であれば引用符で括られる。
        </entry>
       </row>
       <row>
        <entry><literal>address_names</literal></entry>
        <entry><type>text[]</type></entry>
        <entry>
<!--
         An array that, together with <literal>object_type</literal> and
         <literal>address_args</literal>,
         can be used by the <function>pg_get_object_address()</function> to
         recreate the object address in a remote server containing an
         identically named object of the same kind.
-->
<literal>object_type</literal>および<literal>address_args</literal>と一緒に<function>pg_get_object_address()</function>で使うことで、同じ種類で全く同じ名前のオブジェクトを含むリモートサーバ内のオブジェクトアドレスを再作成できる配列。
        </entry>
       </row>
       <row>
        <entry><literal>address_args</literal></entry>
        <entry><type>text[]</type></entry>
        <entry>
<!--
         Complement for <literal>address_names</literal> above.
-->
上記<literal>address_names</literal>の補足。
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </para>

   <para>
<!--
    The <function>pg_event_trigger_dropped_objects</> function can be used
    in an event trigger like this:
-->
関数<function>pg_event_trigger_dropped_objects</>は以下のようにイベントトリガとして使用可能です。
<programlisting>
CREATE FUNCTION test_event_trigger_for_drops()
        RETURNS event_trigger LANGUAGE plpgsql AS $$
DECLARE
    obj record;
BEGIN
    FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
    LOOP
        RAISE NOTICE '% dropped object: % %.% %',
                     tg_tag,
                     obj.object_type,
                     obj.schema_name,
                     obj.object_name,
                     obj.object_identity;
    END LOOP;
END
$$;
CREATE EVENT TRIGGER test_event_trigger_for_drops
   ON sql_drop
   EXECUTE PROCEDURE test_event_trigger_for_drops();
</programlisting>
    </para>
  </sect2>

  <sect2 id="pg-event-trigger-table-rewrite-functions">
<!--
   <title>Handling a Table Rewrite Event</title>
-->
   <title>テーブル書き換えイベントの処理</title>

   <para>
<!--
    The functions shown in
    <xref linkend="functions-event-trigger-table-rewrite">
    provide information about a table for which a
    <literal>table_rewrite</> event has just been called.
    If called in any other context, an error is raised.
-->
<xref linkend="functions-event-trigger-table-rewrite">に示す関数は、<literal>table_rewrite</>イベントが呼び出されたばかりのテーブルについての情報を提供します。
それ以外の状況で呼び出された場合はエラーが発生します。
   </para>

   <table id="functions-event-trigger-table-rewrite">
<!--
    <title>Table Rewrite information</title>
-->
    <title>テーブル書き換え情報</title>
    <tgroup cols="3">
     <thead>
<!--
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry></row>
-->
      <row><entry>名前</entry> <entry>戻り型</entry> <entry>説明</entry></row>
     </thead>

     <tbody>
      <row>
       <entry>
        <indexterm><primary>pg_event_trigger_table_rewrite_oid</primary></indexterm>
        <literal><function>pg_event_trigger_table_rewrite_oid()</function></literal>
       </entry>
       <entry><type>Oid</type></entry>
<!--
       <entry>The OID of the table about to be rewritten.</entry>
-->
       <entry>書き換えようとされているテーブルのOID</entry>
      </row>

      <row>
       <entry>
        <indexterm><primary>pg_event_trigger_table_rewrite_reason</primary></indexterm>
        <literal><function>pg_event_trigger_table_rewrite_reason()</function></literal>
       </entry>
       <entry><type>int</type></entry>
       <entry>
<!--
        The reason code(s) explaining the reason for rewriting. The exact
        meaning of the codes is release dependent.
-->
書き換えの理由を説明する理由コード。
コードの正確な意味はリリースに依存する。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    The <function>pg_event_trigger_table_rewrite_oid</> function can be used
    in an event trigger like this:
-->
<function>pg_event_trigger_table_rewrite_oid</>関数はイベントトリガ内で以下のように使うことができます。
<programlisting>
CREATE FUNCTION test_event_trigger_table_rewrite_oid()
 RETURNS event_trigger
 LANGUAGE plpgsql AS
$$
BEGIN
  RAISE NOTICE 'rewriting table % for reason %',
                pg_event_trigger_table_rewrite_oid()::regclass,
                pg_event_trigger_table_rewrite_reason();
END;
$$;

CREATE EVENT TRIGGER test_table_rewrite_oid
                  ON table_rewrite
   EXECUTE PROCEDURE test_event_trigger_table_rewrite_oid();
</programlisting>
    </para>
  </sect2>
  </sect1>

<!-- split-func4-end -->
