<!-- doc/src/sgml/bgworker.sgml -->

<chapter id="bgworker">
<!--
 <title>Background Worker Processes</title>
-->
 <title>バックグラウンドワーカプロセス</title>

 <indexterm zone="bgworker">
<!--
  <primary>Background workers</primary>
-->
  <primary>バックグラウンドワーカ</primary>
 </indexterm>

 <para>
<!--
  PostgreSQL can be extended to run user-supplied code in separate processes.
  Such processes are started, stopped and monitored by <command>postgres</command>,
  which permits them to have a lifetime closely linked to the server's status.
  These processes have the option to attach to <productname>PostgreSQL</>'s
  shared memory area and to connect to databases internally; they can also run
  multiple transactions serially, just like a regular client-connected server
  process.  Also, by linking to <application>libpq</> they can connect to the
  server and behave like a regular client application.
-->
PostgreSQLはユーザ提供のコードを別のプロセスとして実行できるように拡張することができます。
このプロセスは<command>postgres</command>によって起動、終了、監視され、サーバの状態に密接にリンクしています。
これらのプロセスは<productname>PostgreSQL</>の共有メモリ領域にアタッチしたり、データベースの内部に接続するオプションを持ちます。これらはまた、通常のクライアントに接続された実際のサーバプロセスのように複数のトランザクションを連続して実行することができます。また、アプリケーションは<application>libpq</>とリンクすることにより通常のクライアントアプリケーションのようにサーバに接続して動作することができます。
 </para>

 <warning>
  <para>
<!--
   There are considerable robustness and security risks in using background
   worker processes because, being written in the <literal>C</> language,
   they have unrestricted access to data.  Administrators wishing to enable
   modules that include background worker process should exercise extreme
   caution.  Only carefully audited modules should be permitted to run
   background worker processes.
-->
バックグラウンドワーカを使うにあたっては、堅牢性とセキュリティリスクを考慮しなくてはなりません。なぜならば、<literal>C</>言語で書かれており、データへのアクセスが制限されていないためです。バックグラウンドワーカプロセスを有効にしたいと思っている管理者は厳重に注意して実践すべきです。注意深く検査されたモジュールだけが、バックグラウンドワーカプロセスの実行を許されるべきです。
  </para>
 </warning>

 <para>
<!--
  Background workers can be initialized at the time that
  <productname>PostgreSQL</> is started by including the module name in
  <varname>shared_preload_libraries</>.  A module wishing to run a background
  worker can register it by calling
  <function>RegisterBackgroundWorker(<type>BackgroundWorker *worker</type>)</function>
  from its <function>_PG_init()</>.  Background workers can also be started
  after the system is up and running by calling the function
  <function>RegisterDynamicBackgroundWorker(<type>BackgroundWorker
  *worker, BackgroundWorkerHandle **handle</type>)</function>.  Unlike
  <function>RegisterBackgroundWorker</>, which can only be called from within
  the postmaster, <function>RegisterDynamicBackgroundWorker</function> must be
  called from a regular backend.
-->
バックグラウンドワーカは<productname>PostgreSQL</>スタート時にモジュールを <varname>shared_preload_libraries</> に記すことによって実行できます。バックグラウンドワーカとして実行したいモジュールは <function>RegisterBackgroundWorker(<type>BackgroundWorker *worker</type>)</function> を <function>_PG_init()</> から呼び出して登録する必要があります。バックグラウンドワーカはシステム起動後も <function>RegisterDynamicBackgroundWorker(<type>BackgroundWorker *worker, BackgroundWorkerHandle **handle</type>)</function> を呼び出すことによって実行することができます。<function>RegisterBackgroundWorker</> とは異なり、postmasterからのみ呼び出すことができます。 <function>RegisterDynamicBackgroundWorker</function> は通常のバックエンドから呼び出す必要があります。
 </para>

 <para>
<!--
  The structure <structname>BackgroundWorker</structname> is defined thus:
-->
その構造、<structname>BackgroundWorker</structname> は以下のように定義されます。
<programlisting>
typedef void (*bgworker_main_type)(Datum main_arg);
typedef struct BackgroundWorker
{
    char        bgw_name[BGW_MAXLEN];
    int         bgw_flags;
    BgWorkerStartTime bgw_start_time;
<!--
    int         bgw_restart_time;       /* in seconds, or BGW_NEVER_RESTART */
-->
    int         bgw_restart_time;       /* 秒単位、もしくは、BGW_NEVER_RESTART */
    bgworker_main_type bgw_main;
<!--
    char        bgw_library_name[BGW_MAXLEN];   /* only if bgw_main is NULL */
    char        bgw_function_name[BGW_MAXLEN];  /* only if bgw_main is NULL */
-->
    char        bgw_library_name[BGW_MAXLEN];   /* bgw_mainがNULLの場合のみ */
    char        bgw_function_name[BGW_MAXLEN];  /* bgw_mainがNULLの場合のみ */
    Datum       bgw_main_arg;
    char        bgw_extra[BGW_EXTRALEN];
    int         bgw_notify_pid;
} BackgroundWorker;
</programlisting>
  </para>

  <para>
<!--
   <structfield>bgw_name</> is a string to be used in log messages, process
   listings and similar contexts.
-->
<structfield>bgw_name</> は、ログメッセージ、プロセス一覧等で使用される文字列です。
  </para>

  <para>
<!--
   <structfield>bgw_flags</> is a bitwise-or'd bit mask indicating the
   capabilities that the module wants.  Possible values are:
-->
★翻訳が必要
   <variablelist>

    <varlistentry>
     <term><literal>BGWORKER_SHMEM_ACCESS</literal></term>
     <listitem>
      <para>
       <indexterm><primary>BGWORKER_SHMEM_ACCESS</primary></indexterm>
       Requests shared memory access.  Workers without shared memory access
       cannot access any of <productname>PostgreSQL's</productname> shared
       data structures, such as heavyweight or lightweight locks, shared
       buffers, or any custom data structures which the worker itself may
       wish to create and use.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>BGWORKER_BACKEND_DATABASE_CONNECTION</literal></term>
     <listitem>
      <para>
       <indexterm><primary>BGWORKER_BACKEND_DATABASE_CONNECTION</primary></indexterm>
       Requests the ability to establish a database connection through which it
       can later run transactions and queries.  A background worker using
       <literal>BGWORKER_BACKEND_DATABASE_CONNECTION</literal> to connect to a
       database must also attach shared memory using
       <literal>BGWORKER_SHMEM_ACCESS</literal>, or worker start-up will fail.
      </para>
     </listitem>
    </varlistentry>

   </variablelist>

  </para>

  <para>
<!--
   <structfield>bgw_start_time</structfield> is the server state during which
   <command>postgres</> should start the process; it can be one of
   <literal>BgWorkerStart_PostmasterStart</> (start as soon as
   <command>postgres</> itself has finished its own initialization; processes
   requesting this are not eligible for database connections),
   <literal>BgWorkerStart_ConsistentState</> (start as soon as a consistent state
   has been reached in a hot standby, allowing processes to connect to
   databases and run read-only queries), and
   <literal>BgWorkerStart_RecoveryFinished</> (start as soon as the system has
   entered normal read-write state).  Note the last two values are equivalent
   in a server that's not a hot standby.  Note that this setting only indicates
   when the processes are to be started; they do not stop when a different state
   is reached.
-->
<structfield>bgw_start_time</structfield> は、 <command>postgres</> がプロセスを起動するべきタイミングを指定します。そのタイミングは、 <literal>BgWorkerStart_PostmasterStart</> (<command>postgres</>自身が初期化を終えるとすぐに起動します。これを要求するプロセスはデータベース接続に望ましいものではありません。)、 <literal>BgWorkerStart_ConsistentState</> (ホットスタンバイで一貫性のある状態に到達すると、つまりデータベースに接続して参照のみのクエリを許可する状態になると起動します。)、 <literal>BgWorkerStart_RecoveryFinished</> (システムが参照/更新クエリを実行すると起動します。)のうちの一つです。この設定はいつプロセスが起動されるかを示すだけであることに注意してください。これらのプロセスは、違う状態になったときに停止するわけではありません。
  </para>

  <para>
<!--
   <structfield>bgw_restart_time</structfield> is the interval, in seconds, that
   <command>postgres</command> should wait before restarting the process, in
   case it crashes.  It can be any positive value,
   or <literal>BGW_NEVER_RESTART</literal>, indicating not to restart the
   process in case of a crash.
-->
<structfield>bgw_restart_time</structfield> は、プロセスがクラッシュした場合に <command>postgres</command> がそのプロセスを再起動するために待つべき間隔を秒単位で指定します。これは任意の正の値、またはクラッシュしても再起動しない場合は <literal>BGW_NEVER_RESTART</literal> を指定します。
  </para>

  <para>
   <structfield>bgw_main</structfield> is a pointer to the function to run when
   the process is started.  This field can only safely be used to launch
   functions within the core server, because shared libraries may be loaded
   at different starting addresses in different backend processes.  This will
   happen on all platforms when the library is loaded using any mechanism
   other than <xref linkend="guc-shared-preload-libraries">.  Even when that
   mechanism is used, address space layout variations will still occur on
   Windows, and when <literal>EXEC_BACKEND</> is used.  Therefore, most users
   of this API should set this field to NULL.  If it is non-NULL, it takes
   precedence over <structfield>bgw_library_name</> and
   <structfield>bgw_function_name</>.
  </para>

  <para>
   <structfield>bgw_library_name</structfield> is the name of a library in
   which the initial entry point for the background worker should be sought.
   The named library will be dynamically loaded by the worker process and
   <structfield>bgw_function_name</structfield> will be used to identify the
   function to be called.  If loading a function from the core code,
   <structfield>bgw_main</> should be set instead.
  </para>

  <para>
<!--
   <structfield>bgw_function_name</structfield> is the name of a function in
   a dynamically loaded library which should be used as the initial entry point
   for a new background worker.
-->
<structfield>bgw_function_name</structfield> は新しいバックグラウンドワーカから動的にロードされるときに初期エントリーポイントの関数名です。それは <structfield>bgw_main</structfield> がNULLのとき無視されます。 ★変更あり
  </para>

  <para>
   <structfield>bgw_main_arg</structfield> is the <type>Datum</> argument
   to the background worker main function.  Regardless of whether that
   function is specified via <structfield>bgw_main</> or via the combination
   of <function>bgw_library_name</> and <function>bgw_function_name</>,
   this main function should take a single argument of type <type>Datum</>
   and return <type>void</>.  <structfield>bgw_main_arg</structfield> will be
   passed as the argument.  In addition, the global variable
   <literal>MyBgworkerEntry</literal>
   points to a copy of the <structname>BackgroundWorker</structname> structure
   passed at registration time; the worker may find it helpful to examine
   this structure.
  </para>

  <para>
   On Windows (and anywhere else where <literal>EXEC_BACKEND</literal> is
   defined) or in dynamic background workers it is not safe to pass a
   <type>Datum</> by reference, only by value. If an argument is required, it
   is safest to pass an int32 or other small value and use that as an index
   into an array allocated in shared memory. If a value like a <type>cstring</>
   or <type>text</type> is passed then the pointer won't be valid from the
   new background worker process.
  </para>

  <para>
   <structfield>bgw_extra</structfield> can contain extra data to be passed
   to the background worker.  Unlike <structfield>bgw_main_arg</>, this data
   is not passed as an argument to the worker's main function, but it can be
   accessed via <literal>MyBgworkerEntry</literal>, as discussed above.
  </para>

  <para>
<!--
   <structfield>bgw_extra</structfield> can contain extra data to be passed
   to the background worker.  Unlike <structfield>bgw_main_arg</>, this data
   is not passed as an argument to the worker's main function, but it can be
   accessed via <literal>MyBgworkerEntry</literal>, as discussed above.
-->
<structfield>bgw_extra</structfield>はバックグラウンドワーカに渡す追加データを含めることが出来ます。
<structfield>bgw_main_arg</>とは異なり、このデータはワーカのメイン関数の引数として渡されていませんが、上述したように<literal>MyBgworkerEntry</literal>を介してアクセスすることが出来ます。
  </para>

  <para>
<!--
   <structfield>bgw_notify_pid</structfield> is the PID of a PostgreSQL
   backend process to which the postmaster should send <literal>SIGUSR1</>
   when the process is started or exits.  It should be 0 for workers registered
   at postmaster startup time, or when the backend registering the worker does
   not wish to wait for the worker to start up.  Otherwise, it should be
   initialized to <literal>MyProcPid</>.
-->
<structfield>bgw_notify_pid</structfield> はプロセスの開始時と終了時にpostmasterにSIGUSR1を送信するPostgreSQLバックエンドプロセスのPIDです。それはpostmasterの起動時間、またはワーカが起動するのを待ちたくない場合に0である必要があります。それ以外の場合は、 <literal>MyProcPid</> で初期化すべきです。
  </para>

<!--
  <para>Once running, the process can connect to a database by calling
   <function>BackgroundWorkerInitializeConnection(<parameter>char *dbname</parameter>, <parameter>char *username</parameter>)</function> or
   <function>BackgroundWorkerInitializeConnectionByOid(<parameter>Oid dboid</parameter>, <parameter>Oid useroid</parameter>)</function>.
   This allows the process to run transactions and queries using the
   <literal>SPI</literal> interface.  If <varname>dbname</> is NULL or
   <varname>dboid</> is <literal>InvalidOid</>, the session is not connected
   to any particular database, but shared catalogs can be accessed.
   If <varname>username</> is NULL or <varname>useroid</> is
   <literal>InvalidOid</>, the process will run as the superuser created
   during <command>initdb</>.
   A background worker can only call one of these two functions, and only
   once.  It is not possible to switch databases.
  </para>
-->
  <para>
ひとたび実行すると、このプロセスは<function>BackgroundWorkerInitializeConnection(<parameter>char *dbname</parameter>, <parameter>char *username</parameter>)</function>または<function>BackgroundWorkerInitializeConnectionByOid(<parameter>Oid dboid</parameter>, <parameter>Oid useroid</parameter>)</function>を呼び出すことによって、データベースに接続できます。
これはプロセスに<literal>SPI</literal>インタフェースを使用してのトランザクションとクエリの実行を許します。
もし、<varname>dbname</>がNULLであった場合、または<varname>dboid</>が<literal>InvalidOid</>であった場合には、そのセッションは特定のデータベースに接続しません。しかし、共有カタログにはアクセス出来ます。
もし、<varname>username</> がNULLの場合、または<varname>useroid</>が<literal>InvalidOid</>の場合には、そのプロセスは <command>initdb</>時に作成されたスーパーユーザとして実行されます。
バックグラウンドワーカはこれら２つの関数をどちらかを一度だけ呼ぶことが出来ます。
これはデータベースを切り替えることができません。
  </para>

  <para>
<!--
   Signals are initially blocked when control reaches the
   <structfield>bgw_main</> function, and must be unblocked by it; this is to
   allow the process to customize its signal handlers, if necessary.
   Signals can be unblocked in the new process by calling
   <function>BackgroundWorkerUnblockSignals</> and blocked by calling
   <function>BackgroundWorkerBlockSignals</>.
-->
 制御が <structfield>bgw_main</> 関数に達したとき、シグナルはまずブロックされます。このブロックは解除されなければなりません。このことは、必要があれば、プロセスにそのシグナルハンドラをカスタマイズできることを意味します。シグナルは新しいプロセスで <function>BackgroundWorkerUnblockSignals</> を呼び出すことにより、解除でき、 <function>BackgroundWorkerBlockSignals</> を呼び出すことでブロックできます。
  </para>

  <para>
<!--
   If <structfield>bgw_restart_time</structfield> for a background worker is
   configured as <literal>BGW_NEVER_RESTART</>, or if it exits with an exit
   code of 0 or is terminated by <function>TerminateBackgroundWorker</>,
   it will be automatically unregistered by the postmaster on exit.
   Otherwise, it will be restarted after the time period configured via
   <structfield>bgw_restart_time</>, or immediately if the postmaster
   reinitializes the cluster due to a backend failure.  Backends which need
   to suspend execution only temporarily should use an interruptible sleep
   rather than exiting; this can be achieved by calling
   <function>WaitLatch()</function>. Make sure the
   <literal>WL_POSTMASTER_DEATH</> flag is set when calling that function, and
   verify the return code for a prompt exit in the emergency case that
   <command>postgres</> itself has terminated.
-->
 バックグラウンドワーカは <structfield>bgw_restart_time</structfield> が <literal>BGW_NEVER_RESTART</> に設定されている場合、または <function>TerminateBackgroundWorker</> によって0で終了した場合、postmasterに自動的に登録が解除されて終了します。
 それ以外の場合、 <structfield>bgw_restart_time</> で設定された時間の後に再起動します。または、バックエンドの障害のために posmasterが最初期化された場合はすぐに再起動します。
バックグラウンドワーカが何もすることがないときは、割り込み可能な休止状態にすることを考慮しないといけません。これは <function>WaitLatch()</function> を呼び出すことによって可能になります。
この関数を呼んだときに、 <literal>WL_POSTMASTER_DEATH</> フラグが設定され、 <command>postgres</> 自身が終了する緊急事態には、リターンコードを確認するようにしてください。
  </para>

  <para>
<!--
   When a background worker is registered using the
   <function>RegisterDynamicBackgroundWorker</function> function, it is
   possible for the backend performing the registration to obtain information
   regarding the status of the worker.  Backends wishing to do this should
   pass the address of a <type>BackgroundWorkerHandle *</type> as the second
   argument to <function>RegisterDynamicBackgroundWorker</function>.  If the
   worker is successfully registered, this pointer will be initialized with an
   opaque handle that can subsequently be passed to
   <function>GetBackgroundWorkerPid(<parameter>BackgroundWorkerHandle *</parameter>, <parameter>pid_t *</parameter>)</function> or
   <function>TerminateBackgroundWorker(<parameter>BackgroundWorkerHandle *</parameter>)</function>.
   <function>GetBackgroundWorkerPid</> can be used to poll the status of the
   worker: a return value of <literal>BGWH_NOT_YET_STARTED</> indicates that
   the worker has not yet been started by the postmaster;
   <literal>BGWH_STOPPED</literal> indicates that it has been started but is
   no longer running; and <literal>BGWH_STARTED</literal> indicates that it is
   currently running.  In this last case, the PID will also be returned via the
   second argument.
   <function>TerminateBackgroundWorker</> causes the postmaster to send
   <literal>SIGTERM</> to the worker if it is running, and to unregister it
   as soon as it is not.
-->
バックグラウンドワーカを <function>RegisterDynamicBackgroundWorker</function> 関数により登録している場合、登録を実行するバックエンドはワーカの状態に関する情報を取得することが可能です。取得したい場合は <function>RegisterDynamicBackgroundWorker</function> に <type>BackgroundWorkerHandle *</type> のアドレスを渡す必要があります。もし登録に成功した場合、 <function>GetBackgroundWorkerPid(<parameter>BackgroundWorkerHandle *</parameter>, <parameter>pid_t *</parameter>)</function>または<function>TerminateBackgroundWorker(<parameter>BackgroundWorkerHandle *</parameter>)</function> のポインタは初期化されます。
 <function>GetBackgroundWorkerPid</> はワーカの状態を監視することができます。以下の返り値が得られます。 <literal>BGWH_NOT_YET_STARTED</> ワーカはまだpostmasterにより開始されていない。<literal>BGWH_STOPPED</literal>開始されたが、もはや実行されていない。 <literal>BGWH_STARTED</literal>実行中です。この最後のケースでは、PIDは、第二の引数を介して返されます。
<function>TerminateBackgroundWorker</>はワーカが実行していた場合postmasterがワーカに <literal>SIGTERM</> を送信し、まもなく登録を解除します。
  </para>

  <para>
<!--
   In some cases, a process which registers a background worker may wish to
   wait for the worker to start up.  This can be accomplished by initializing
   <structfield>bgw_notify_pid</structfield> to <literal>MyProcPid</> and
   then passing the <type>BackgroundWorkerHandle *</type> obtained at
   registration time to
   <function>WaitForBackgroundWorkerStartup(<parameter>BackgroundWorkerHandle
   *handle</parameter>, <parameter>pid_t *</parameter>)</function> function.
   This function will block until the postmaster has attempted to start the
   background worker, or until the postmaster dies.  If the background runner
   is running, the return value will <literal>BGWH_STARTED</>, and
   the PID will be written to the provided address.  Otherwise, the return
   value will be <literal>BGWH_STOPPED</literal> or
   <literal>BGWH_POSTMASTER_DIED</literal>.
-->
 場合によっては、バックグラウンドワーカを登録する処理は、ワーカが起動するのを待つことをお勧めします。これは <structfield>bgw_notify_pid</structfield> から <literal>MyProcPid</> で初期化し登録時に得られた <type>BackgroundWorkerHandle *</type> を使用して <function>WaitForBackgroundWorkerStartup(<parameter>BackgroundWorkerHandle *handle</parameter>, <parameter>pid_t *</parameter>)</function> 関数を呼び出すことで実現します。
 postmasterがバックグラウンドワーカを開始しようと試みたか、postmasterが死ぬまで、この関数はブロックします。バックグラウンドランナーが実行されている場合、戻り値は <literal>BGWH_STARTED</> 、およびPIDが提供されたアドレスに書き込まれます。そうでない場合、戻り値は <literal>BGWH_STOPPED</literal> または <literal>BGWH_POSTMASTER_DIED</literal> になります。
  </para>

  <para>
<!--
   If a background worker sends asynchronous notifications with the
   <command>NOTIFY</command> command via the Server Programming Interface
   (<acronym>SPI</acronym>), it should call
   <function>ProcessCompletedNotifies</function> explicitly after committing
   the enclosing transaction so that any notifications can be delivered.  If a
   background worker registers to receive asynchronous notifications with
   the <command>LISTEN</command> through <acronym>SPI</acronym>, the worker
   will log those notifications, but there is no programmatic way for the
   worker to intercept and respond to those notifications.
-->
★翻訳の必要あり
  </para>

  <para>
<!--
   The <filename>src/test/modules/worker_spi</> module
   contains a working example,
   which demonstrates some useful techniques.
-->
バックグラウンドワーカの実例として、<filename>src/test/modules/worker_spi</>というモジュールがあります。
これはいくつかの有用な技術を示しています。
  </para>

  <para>
<!--
   The maximum number of registered background workers is limited by
   <xref linkend="guc-max-worker-processes">.
-->
登録できるバックグラウンドワーカの数は <xref linkend="guc-max-worker-processes">によって制限されています。
  </para>
</chapter>
