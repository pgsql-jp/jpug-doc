<!-- doc/src/sgml/pgcrypto.sgml -->

<sect1 id="pgcrypto" xreflabel="pgcrypto">
 <title>pgcrypto</title>

 <indexterm zone="pgcrypto">
  <primary>pgcrypto</primary>
 </indexterm>

 <indexterm zone="pgcrypto">
<!--
  <primary>encryption</primary>
  <secondary>for specific columns</secondary>
-->
  <primary>暗号化</primary>
  <secondary>特定の列の</secondary>
 </indexterm>

 <para>
<!--
  The <filename>pgcrypto</> module provides cryptographic functions for
  <productname>PostgreSQL</>.
-->
<filename>pgcrypto</>モジュールは<productname>PostgreSQL</>用の暗号関数を提供します。
 </para>

 <sect2>
<!--
  <title>General Hashing Functions</title>
-->
  <title>汎用ハッシュ関数</title>

  <sect3>
   <title><function>digest()</function></title>

   <indexterm>
    <primary>digest</primary>
   </indexterm>

<synopsis>
digest(data text, type text) returns bytea
digest(data bytea, type text) returns bytea
</synopsis>

   <para>
<!--
    Computes a binary hash of the given <parameter>data</>.
    <parameter>type</> is the algorithm to use.
    Standard algorithms are <literal>md5</literal>, <literal>sha1</literal>,
    <literal>sha224</literal>, <literal>sha256</literal>,
    <literal>sha384</literal> and <literal>sha512</literal>.
    If <filename>pgcrypto</> was built with
    OpenSSL, more algorithms are available, as detailed in
    <xref linkend="pgcrypto-with-without-openssl">.
-->
与えられた<parameter>data</>のバイナリハッシュを計算します。
<parameter>type</>は使用するアルゴリズムです。
標準アルゴリズムは<literal>md5</literal>、<literal>sha1</literal>、<literal>sha224</literal>、<literal>sha256</literal>、<literal>sha384</literal>、および<literal>sha512</literal>です。
<filename>pgcrypto</>がOpenSSL付きで構築された場合、<xref linkend="pgcrypto-with-without-openssl">で詳解する、より多くのアルゴリズムを利用することができます。
   </para>

   <para>
<!--
    If you want the digest as a hexadecimal string, use
    <function>encode()</> on the result.  For example:
-->
ダイジェストを16進数表記の文字列としたい場合は、結果に対して<function>encode()</>を使用してください。
以下に例を示します。
<programlisting>
CREATE OR REPLACE FUNCTION sha1(bytea) returns text AS $$
    SELECT encode(digest($1, 'sha1'), 'hex')
$$ LANGUAGE SQL STRICT IMMUTABLE;
</programlisting>
   </para>
  </sect3>

  <sect3>
   <title><function>hmac()</function></title>

   <indexterm>
    <primary>hmac</primary>
   </indexterm>

<synopsis>
hmac(data text, key text, type text) returns bytea
hmac(data bytea, key text, type text) returns bytea
</synopsis>

   <para>
<!--
    Calculates hashed MAC for <parameter>data</> with key <parameter>key</>.
    <parameter>type</> is the same as in <function>digest()</>.
-->
<parameter>key</>をキーとした<parameter>data</>のハッシュ化MACを計算します。
<parameter>type</>は<function>digest()</>の場合と同じです。
   </para>

   <para>
<!--
    This is similar to <function>digest()</> but the hash can only be
    recalculated knowing the key.  This prevents the scenario of someone
    altering data and also changing the hash to match.
-->
<function>digest()</>と似ていますが、ハッシュはキーを知っている場合にのみ再計算できます。
これは、誰かがデータを変更し、同時に一致するようにハッシュを変更するという状況を防ぎます。
   </para>

   <para>
<!--
    If the key is larger than the hash block size it will first be hashed and
    the result will be used as key.
-->
キーがハッシュブロックサイズより大きい場合、まずハッシュ化され、その結果をキーとして使用します。
   </para>
  </sect3>
 </sect2>

 <sect2>
<!--
  <title>Password Hashing Functions</title>
-->
  <title>パスワードハッシュ化関数</title>

  <para>
<!--
   The functions <function>crypt()</> and <function>gen_salt()</>
   are specifically designed for hashing passwords.
   <function>crypt()</> does the hashing and <function>gen_salt()</>
   prepares algorithm parameters for it.
-->
<function>crypt()</>および<function>gen_salt()</>関数は特にパスワードのハッシュ化のために設計されたものです。
<function>crypt()</>がハッシュ処理を行い、<function>gen_salt()</>はハッシュ処理用のアルゴリズム上のパラメータを準備します。
  </para>

  <para>
<!--
   The algorithms in <function>crypt()</> differ from the usual
   MD5 or SHA1 hashing algorithms in the following respects:
-->
<function>crypt()</>アルゴリズムは、以下の点で通常のMD5やSHA1のようなハッシュ処理アルゴリズムと異なります。
  </para>

  <orderedlist>
   <listitem>
    <para>
<!--
     They are slow.  As the amount of data is so small, this is the only
     way to make brute-forcing passwords hard.
-->
低速です。
データ量が少ないためパスワード総当たり攻撃に対して頑健にする唯一の方法です。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     They use a random value, called the <firstterm>salt</>, so that users
     having the same password will have different encrypted passwords.
     This is also an additional defense against reversing the algorithm.
-->
結果には<firstterm>ソルト</>というランダムな値が含まれます。
このため同じパスワードのユーザでも異なった暗号化パスワードを持ちます。
これはアルゴリズムの逆処理に対する追加の防御です。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     They include the algorithm type in the result, so passwords hashed with
     different algorithms can co-exist.
-->
結果内にアルゴリズムの種類が含まれます。
このため異なるアルゴリズムでハッシュ化したパスワードが混在可能です。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     Some of them are adaptive &mdash; that means when computers get
     faster, you can tune the algorithm to be slower, without
     introducing incompatibility with existing passwords.
-->
一部は適応型です。
つまり、コンピュータが高速になったとしても、既存のパスワードとの互換性を損なうことなくアルゴリズムを低速に調整することができます。
    </para>
   </listitem>
  </orderedlist>

  <para>
<!--
   <xref linkend="pgcrypto-crypt-algorithms"> lists the algorithms
   supported by the <function>crypt()</function> function.
-->
<function>crypt()</function>関数がサポートするアルゴリズムを<xref linkend="pgcrypto-crypt-algorithms">に列挙します。
  </para>

  <table id="pgcrypto-crypt-algorithms">
<!--
   <title>Supported Algorithms for <function>crypt()</></title>
-->
   <title><function>crypt()</>がサポートするアルゴリズム</title>
   <tgroup cols="6">
    <thead>
     <row>
<!--
      <entry>Algorithm</entry>
      <entry>Max Password Length</entry>
      <entry>Adaptive?</entry>
      <entry>Salt Bits</entry>
      <entry>Output Length</entry>
      <entry>Description</entry>
-->
      <entry>アルゴリズム</entry>
      <entry>パスワード最大長</entry>
      <entry>適応型かどうか</entry>
      <entry>ソルトビット長</entry>
      <entry>出力長</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><literal>bf</></entry>
      <entry>72</entry>
<!--
      <entry>yes</entry>
-->
      <entry>はい</entry>
      <entry>128</entry>
      <entry>60</entry>
<!--
      <entry>Blowfish-based, variant 2a</entry>
-->
      <entry>Blowfishベース、2a版</entry>
     </row>
     <row>
      <entry><literal>md5</></entry>
<!--
      <entry>unlimited</entry>
      <entry>no</entry>
-->
      <entry>無制限</entry>
      <entry>いいえ</entry>
      <entry>48</entry>
      <entry>34</entry>
<!--
      <entry>MD5-based crypt</entry>
-->
      <entry>MD5ベースの暗号</entry>
     </row>
     <row>
      <entry><literal>xdes</></entry>
      <entry>8</entry>
<!--
      <entry>yes</entry>
-->
      <entry>はい</entry>
      <entry>24</entry>
      <entry>20</entry>
<!--
      <entry>Extended DES</entry>
-->
      <entry>拡張DES</entry>
     </row>
     <row>
      <entry><literal>des</></entry>
      <entry>8</entry>
<!--
      <entry>no</entry>
-->
      <entry>いいえ</entry>
      <entry>12</entry>
      <entry>13</entry>
<!--
      <entry>Original UNIX crypt</entry>
-->
      <entry>元来のUNIX crypt</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <sect3>
   <title><function>crypt()</></title>

   <indexterm>
    <primary>crypt</primary>
   </indexterm>

<synopsis>
crypt(password text, salt text) returns text
</synopsis>

   <para>
<!--
    Calculates a crypt(3)-style hash of <parameter>password</>.
    When storing a new password, you need to use
    <function>gen_salt()</> to generate a new <parameter>salt</> value.
    To check a password, pass the stored hash value as <parameter>salt</>,
    and test whether the result matches the stored value.
-->
<parameter>password</>のcrypt(3)形式のハッシュを計算します。
新しいパスワードを保管する時には、<function>gen_salt()</>を使用して新しい<parameter>salt</>を生成する必要があります。
パスワードを検査する時、既存のハッシュ値を<parameter>salt</>として渡し、結果が格納された値と一致するかどうかを確認します。
   </para>
   <para>
<!--
    Example of setting a new password:
-->
新しいパスワードの設定例を以下に示します。
<programlisting>
UPDATE ... SET pswhash = crypt('new password', gen_salt('md5'));
</programlisting>
   </para>
   <para>
<!--
    Example of authentication:
-->
認証の例です。
<programlisting>
SELECT (pswhash = crypt('entered password', pswhash)) AS pswmatch FROM ... ;
</programlisting>
<!--
    This returns <literal>true</> if the entered password is correct.
-->
入力パスワードが正しければ<literal>true</>を返します。
   </para>
  </sect3>

  <sect3>
   <title><function>gen_salt()</></title>

  <indexterm>
   <primary>gen_salt</primary>
  </indexterm>

<synopsis>
gen_salt(type text [, iter_count integer ]) returns text
</synopsis>

   <para>
<!--
    Generates a new random salt string for use in <function>crypt()</>.
    The salt string also tells <function>crypt()</> which algorithm to use.
-->
<function>crypt()</>で使用するランダムなソルト文字列を新規に生成します。
また、このソルト文字列は<function>crypt()</>にどのアルゴリズムを使用するかを通知します。
   </para>

   <para>
<!--
    The <parameter>type</> parameter specifies the hashing algorithm.
    The accepted types are: <literal>des</literal>, <literal>xdes</literal>,
    <literal>md5</literal> and <literal>bf</literal>.
-->
<parameter>type</>パラメータはハッシュ化アルゴリズムを指定します。
受付可能な種類は、<literal>des</literal>、<literal>xdes</literal>、<literal>md5</literal>、<literal>bf</literal>です。
   </para>

   <para>
<!--
    The <parameter>iter_count</> parameter lets the user specify the iteration
    count, for algorithms that have one.
    The higher the count, the more time it takes to hash
    the password and therefore the more time to break it.  Although with
    too high a count the time to calculate a hash may be several years
    &mdash; which is somewhat impractical.  If the <parameter>iter_count</>
    parameter is omitted, the default iteration count is used.
    Allowed values for <parameter>iter_count</> depend on the algorithm and
    are shown in <xref linkend="pgcrypto-icfc-table">.
-->
繰り返し回数を持つアルゴリズムでは、ユーザは<parameter>iter_count</>パラメータを使用して繰り返し回数を指定できます。
指定する回数を高くすれば、パスワードのハッシュ化にかかる時間が長くなり、それを破るための時間も長くなります。
しかし、あまりに多くの回数を指定すると、ハッシュ計算にかかる時間は数年に渡ってしまう可能性があります。
これは実用的ではありません。
<parameter>iter_count</>パラメータを省略した場合、デフォルトの繰り返し回数が使用されます。
<parameter>iter_count</>で受け付けられる値はアルゴリズムに依存し、<xref linkend="pgcrypto-icfc-table">に示す通りです。
   </para>

   <table id="pgcrypto-icfc-table">
<!--
    <title>Iteration Counts for <function>crypt()</></title>
-->
    <title><function>crypt()</>用の繰り返し回数</title>
    <tgroup cols="4">
     <thead>
      <row>
<!--
       <entry>Algorithm</entry>
       <entry>Default</entry>
       <entry>Min</entry>
       <entry>Max</entry>
-->
       <entry>アルゴリズム</entry>
       <entry>デフォルト</entry>
       <entry>最小</entry>
       <entry>最大</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><literal>xdes</></entry>
       <entry>725</entry>
       <entry>1</entry>
       <entry>16777215</entry>
      </row>
      <row>
       <entry><literal>bf</></entry>
       <entry>6</entry>
       <entry>4</entry>
       <entry>31</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    For <literal>xdes</literal> there is an additional limitation that the
    iteration count must be an odd number.
-->
<literal>xdes</literal>の場合は他にも、回数が奇数でなければならないという制限があります。
   </para>

   <para>
<!--
    To pick an appropriate iteration count, consider that
    the original DES crypt was designed to have the speed of 4 hashes per
    second on the hardware of that time.
    Slower than 4 hashes per second would probably dampen usability.
    Faster than 100 hashes per second is probably too fast.
-->
適切な繰り返し回数を選択するために、元々のDES暗号は当時のハードウェアで1秒あたり4個のハッシュを持つことができるように設計されたことを考えてください。
毎秒4ハッシュより遅いと、おそらく使い勝手が悪いでしょう。
毎秒100ハッシュより速いというのは、十中八九、あまりにも速すぎるでしょう。
   </para>

   <para>
<!--
    <xref linkend="pgcrypto-hash-speed-table"> gives an overview of the relative slowness
    of different hashing algorithms.
    The table shows how much time it would take to try all
    combinations of characters in an 8-character password, assuming
    that the password contains either only lower case letters, or
    upper- and lower-case letters and numbers.
    In the <literal>crypt-bf</literal> entries, the number after a slash is
    the <parameter>iter_count</parameter> parameter of
    <function>gen_salt</function>.
-->
ハッシュ化アルゴリズム別に相対的な速度に関する概要を<xref linkend="pgcrypto-hash-speed-table">にまとめました。
この表は、8文字のパスワード内のすべての文字の組合せを取るためにかかる時間を示します。
また、すべて小文字の英字のみのパスワードである場合と大文字小文字が混在した英字と数字のパスワードの場合を仮定します。
<literal>crypt-bf</literal>の項では、スラッシュの後の数値は<function>gen_salt</function>の<parameter>iter_count</parameter>です。
   </para>

   <table id="pgcrypto-hash-speed-table">
<!--
    <title>Hash Algorithm Speeds</title>
-->
    <title>ハッシュアルゴリズムの速度</title>
    <tgroup cols="5">
     <thead>
      <row>
<!--
       <entry>Algorithm</entry>
       <entry>Hashes/sec</entry>
       <entry>For <literal>[a-z]</></entry>
       <entry>For <literal>[A-Za-z0-9]</></entry>
       <entry>Duration relative to <literal>md5 hash</></entry>
-->
       <entry>アルゴリズム</entry>
       <entry>1秒当たりのハッシュ数</entry>
       <entry><literal>[a-z]</>の場合</entry>
       <entry><literal>[A-Za-z0-9]</>の場合</entry>
       <entry><literal>md5ハッシュ</>を単位とした持続期間</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><literal>crypt-bf/8</></entry>
       <entry>1792</entry>
<!--
       <entry>4 years</entry>
       <entry>3927 years</entry>
-->
       <entry>4年</entry>
       <entry>3927年</entry>
       <entry>100k</entry>
      </row>
      <row>
       <entry><literal>crypt-bf/7</></entry>
       <entry>3648</entry>
<!--
       <entry>2 years</entry>
       <entry>1929 years</entry>
-->
       <entry>2年</entry>
       <entry>1929年</entry>
       <entry>50k</entry>
      </row>
      <row>
       <entry><literal>crypt-bf/6</></entry>
       <entry>7168</entry>
<!--
       <entry>1 year</entry>
       <entry>982 years</entry>
-->
       <entry>1年</entry>
       <entry>982年</entry>
       <entry>25k</entry>
      </row>
      <row>
       <entry><literal>crypt-bf/5</></entry>
       <entry>13504</entry>
<!--
       <entry>188 days</entry>
       <entry>521 years</entry>
-->
       <entry>188日</entry>
       <entry>521年</entry>
       <entry>12.5k</entry>
      </row>
      <row>
       <entry><literal>crypt-md5</></entry>
       <entry>171584</entry>
<!--
       <entry>15 days</entry>
       <entry>41 years</entry>
-->
       <entry>15日</entry>
       <entry>41年</entry>
       <entry>1k</entry>
      </row>
      <row>
       <entry><literal>crypt-des</></entry>
       <entry>23221568</entry>
<!--
       <entry>157.5 minutes</entry>
       <entry>108 days</entry>
-->
       <entry>157.5分</entry>
       <entry>108日</entry>
       <entry>7</entry>
      </row>
      <row>
       <entry><literal>sha1</></entry>
       <entry>37774272</entry>
<!--
       <entry>90 minutes</entry>
       <entry>68 days</entry>
-->
       <entry>90分</entry>
       <entry>68日</entry>
       <entry>4</entry>
      </row>
      <row>
<!--
       <entry><literal>md5</> (hash)</entry>
-->
       <entry><literal>md5</>(ハッシュ)</entry>
       <entry>150085504</entry>
<!--
       <entry>22.5 minutes</entry>
       <entry>17 days</entry>
-->
       <entry>22.5分</entry>
       <entry>17日</entry>
       <entry>1</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    Notes:
-->
注意：
   </para>

   <itemizedlist>
    <listitem>
     <para>
<!--
     The machine used is an Intel Mobile Core i3.
-->
Intel Mobile Core i3のマシンを使用しました。
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      <literal>crypt-des</> and <literal>crypt-md5</> algorithm numbers are
      taken from John the Ripper v1.6.38 <literal>-test</> output.
-->
<literal>crypt-des</>および<literal>crypt-md5</>アルゴリズムの数値はJohn the Ripper v1.6.38の<literal>-test</>出力から得たものです。
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      <literal>md5 hash</> numbers are from mdcrack 1.2.
-->
<literal>md5ハッシュ</>の数値はmdcrack 1.2のものです。
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      <literal>sha1</> numbers are from lcrack-20031130-beta.
-->
<literal>sha1</>の数値はlcrack-20031130-betaのものです。
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      <literal>crypt-bf</literal> numbers are taken using a simple program that
      loops over 1000 8-character passwords.  That way I can show the speed
      with different numbers of iterations.  For reference: <literal>john
      -test</literal> shows 213 loops/sec for <literal>crypt-bf/5</>.
      (The very small
      difference in results is in accordance with the fact that the
      <literal>crypt-bf</literal> implementation in <filename>pgcrypto</>
      is the same one used in John the Ripper.)
-->
<literal>crypt-bf</literal>の数は、1000個の8文字パスワードをループする単純なプログラムを使用して得たものです。
こうして、異なる回数の速度を示すことができました。
参考までに、<literal>john -test</literal>は<literal>crypt-bf/5</>で213 loops/secでした。
（結果の差異が非常に小さいことは、<filename>pgcrypto</>における<literal>crypt-bf</literal>実装がJohn the Ripperで使用されるものと同じであるという事実と一致します。）
     </para>
    </listitem>
   </itemizedlist>

   <para>
<!--
    Note that <quote>try all combinations</quote> is not a realistic exercise.
    Usually password cracking is done with the help of dictionaries, which
    contain both regular words and various mutations of them.  So, even
    somewhat word-like passwords could be cracked much faster than the above
    numbers suggest, while a 6-character non-word-like password may escape
    cracking.  Or not.
-->
<quote>すべての組み合わせを試行する</quote>ことは現実的な行使ではありません。
通常パスワード推定は、普通の単語とその変形の両方を含む辞書を使用して行われます。
ですので、いささかなりとも言葉に似たパスワードは上で示した数値よりも速く推定されます。
また6文字の単語に似ていないパスワードは推定を免れるかもしれませんし、免れないかもしれません。
   </para>
  </sect3>
 </sect2>

 <sect2>
<!--
  <title>PGP Encryption Functions</title>
-->
  <title>PGP暗号化関数</title>

  <para>
<!--
   The functions here implement the encryption part of the OpenPGP (RFC 4880)
   standard.  Supported are both symmetric-key and public-key encryption.
-->
ここで示す関数はOpenPGP（RFC 4880）標準の暗号処理部分を実装します。
対称キーおよび公開キー暗号化がサポートされます。
  </para>

  <para>
<!--
   An encrypted PGP message consists of 2 parts, or <firstterm>packets</>:
-->
暗号化されたPGPメッセージは次の2つの部品（または<firstterm>パケット</>）から構成されます。
  </para>
  <itemizedlist>
   <listitem>
    <para>
<!--
     Packet containing a session key &mdash; either symmetric-key or public-key
     encrypted.
-->
セッションキーを含むパケット。
対称キーまたは公開キー暗号化の両方。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     Packet containing data encrypted with the session key.
-->
セッションキーにより暗号化されたデータを含むパケット。
    </para>
   </listitem>
  </itemizedlist>

  <para>
<!--
   When encrypting with a symmetric key (i.e., a password):
-->
対称キー（つまりパスワード）で暗号化する場合
  </para>
  <orderedlist>
   <listitem>
    <para>
<!--
     The given password is hashed using a String2Key (S2K) algorithm.  This is
     rather similar to <function>crypt()</> algorithms &mdash; purposefully
     slow and with random salt &mdash; but it produces a full-length binary
     key.
-->
与えられたパスワードはString2Key(S2K)アルゴリズムでハッシュ化されます。
これはどちらかというと<function>crypt()</>アルゴリズムと似て、意図的に低速で、かつランダムなソルトを使用します。
しかし、全長のバイナリキーを生成します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     If a separate session key is requested, a new random key will be
     generated.  Otherwise the S2K key will be used directly as the session
     key.
-->
分離したセッションキーが要求された場合、新しいランダムなキーが生成されます。
さもなくば、S2Kキーがそのままセッションキーとして使用されます。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     If the S2K key is to be used directly, then only S2K settings will be put
     into the session key packet.  Otherwise the session key will be encrypted
     with the S2K key and put into the session key packet.
-->
S2Kキーがそのまま使用される場合、S2K設定のみがセッションキーパケットに格納されます。
さもなくば、セッションキーはS2Kキーで暗号化され、セッションキーパケットに格納されます。
    </para>
   </listitem>
  </orderedlist>

  <para>
<!--
   When encrypting with a public key:
-->
公開キーで暗号化する場合
  </para>
  <orderedlist>
   <listitem>
    <para>
<!--
     A new random session key is generated.
-->
新しいランダムなセッションキーが生成されます。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     It is encrypted using the public key and put into the session key packet.
-->
これは公開キーを使用して暗号化され、セッションキーパケットに格納されます。
    </para>
   </listitem>
  </orderedlist>

  <para>
<!--
   In either case the data to be encrypted is processed as follows:
-->
どちらの場合でもデータ暗号化は以下のように処理されます。
  </para>
  <orderedlist>
   <listitem>
    <para>
<!--
     Optional data-manipulation: compression, conversion to UTF-8,
     and/or conversion of line-endings.
-->
省略可能なデータ操作として、圧縮、UTF-8への変換、改行の変換があります。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     The data is prefixed with a block of random bytes.  This is equivalent
     to using a random IV.
-->
データの前にはランダムなバイト数のブロックが付きます。
これはrandom IVを使用する場合と同じです。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     An SHA1 hash of the random prefix and data is appended.
-->
ランダムな前置ブロックとデータのSHA1ハッシュが後に付けられます。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     All this is encrypted with the session key and placed in the data packet.
-->
これをすべてセッションキーで暗号化し、データパケットに格納します。
    </para>
   </listitem>
  </orderedlist>

  <sect3>
   <title><function>pgp_sym_encrypt()</function></title>

   <indexterm>
    <primary>pgp_sym_encrypt</primary>
   </indexterm>

   <indexterm>
    <primary>pgp_sym_encrypt_bytea</primary>
   </indexterm>

<synopsis>
pgp_sym_encrypt(data text, psw text [, options text ]) returns bytea
pgp_sym_encrypt_bytea(data bytea, psw text [, options text ]) returns bytea
</synopsis>
   <para>
<!--
    Encrypt <parameter>data</> with a symmetric PGP key <parameter>psw</>.
    The <parameter>options</> parameter can contain option settings,
    as described below.
-->
対称PGPキー<parameter>psw</>で<parameter>data</>を暗号化します。
<parameter>options</>パラメータには後述のオプション設定を含めることができます。
   </para>
  </sect3>

  <sect3>
   <title><function>pgp_sym_decrypt()</function></title>

   <indexterm>
    <primary>pgp_sym_decrypt</primary>
   </indexterm>

   <indexterm>
    <primary>pgp_sym_decrypt_bytea</primary>
   </indexterm>

<synopsis>
pgp_sym_decrypt(msg bytea, psw text [, options text ]) returns text
pgp_sym_decrypt_bytea(msg bytea, psw text [, options text ]) returns bytea
</synopsis>
   <para>
<!--
    Decrypt a symmetric-key-encrypted PGP message.
-->
対称キーで暗号化されたPGPメッセージを復号します。
   </para>
   <para>
<!--
    Decrypting <type>bytea</> data with <function>pgp_sym_decrypt</> is disallowed.
    This is to avoid outputting invalid character data.  Decrypting
    originally textual data with <function>pgp_sym_decrypt_bytea</> is fine.
-->
<function>pgp_sym_decrypt</>で<type>bytea</>型のデータを復号することはできません。
これは無効な文字データの出力を防止するためです。
元のテキストのデータを<function>pgp_sym_decrypt_bytea</>で復号することが正しい方法です。
   </para>
   <para>
<!--
    The <parameter>options</> parameter can contain option settings,
    as described below.
-->
<parameter>options</>パラメータには後述のオプション設定を含めることができます。
   </para>
  </sect3>

  <sect3>
   <title><function>pgp_pub_encrypt()</function></title>

   <indexterm>
    <primary>pgp_pub_encrypt</primary>
   </indexterm>

   <indexterm>
    <primary>pgp_pub_encrypt_bytea</primary>
   </indexterm>

<synopsis>
pgp_pub_encrypt(data text, key bytea [, options text ]) returns bytea
pgp_pub_encrypt_bytea(data bytea, key bytea [, options text ]) returns bytea
</synopsis>
   <para>
<!--
    Encrypt <parameter>data</> with a public PGP key <parameter>key</>.
    Giving this function a secret key will produce an error.
-->
公開PGPキー<parameter>key</>で<parameter>data</>を暗号化します。
この関数に秘密キーを与えるとエラーになります。
   </para>
   <para>
<!--
    The <parameter>options</> parameter can contain option settings,
    as described below.
-->
<parameter>options</>パラメータには後述のオプション設定を含めることができます。
   </para>
  </sect3>

  <sect3>
   <title><function>pgp_pub_decrypt()</function></title>

   <indexterm>
    <primary>pgp_pub_decrypt</primary>
   </indexterm>

   <indexterm>
    <primary>pgp_pub_decrypt_bytea</primary>
   </indexterm>

<synopsis>
pgp_pub_decrypt(msg bytea, key bytea [, psw text [, options text ]]) returns text
pgp_pub_decrypt_bytea(msg bytea, key bytea [, psw text [, options text ]]) returns bytea
</synopsis>
   <para>
<!--
    Decrypt a public-key-encrypted message.  <parameter>key</> must be the
    secret key corresponding to the public key that was used to encrypt.
    If the secret key is password-protected, you must give the password in
    <parameter>psw</>.  If there is no password, but you want to specify
    options, you need to give an empty password.
-->
公開キーで暗号化されたメッセージを復号します。
<parameter>key</>は、暗号化に使用した公開キーに対応する秘密キーでなければなりません。
秘密キーがパスワードで保護されている場合は、そのパスワードを<parameter>psw</>で指定しなければなりません。
パスワードはないが、オプションを指定したい場合は空のパスワードを指定する必要があります。
   </para>
   <para>
<!--
    Decrypting <type>bytea</> data with <function>pgp_pub_decrypt</> is disallowed.
    This is to avoid outputting invalid character data.  Decrypting
    originally textual data with <function>pgp_pub_decrypt_bytea</> is fine.
-->
<function>pgp_pub_decrypt</>で<type>bytea</>型のデータを復号することはできません。
これは無効な文字データの出力を防止するためです。
元のテキストのデータを<function>pgp_pub_decrypt_bytea</>で復号することが正しい方法です。
   </para>
   <para>
<!--
    The <parameter>options</> parameter can contain option settings,
    as described below.
-->
<parameter>options</>パラメータには後述のオプション設定を含めることができます。
   </para>
  </sect3>

  <sect3>
   <title><function>pgp_key_id()</function></title>

   <indexterm>
    <primary>pgp_key_id</primary>
   </indexterm>

<synopsis>
pgp_key_id(bytea) returns text
</synopsis>
   <para>
<!--
    <function>pgp_key_id</> extracts the key ID of a PGP public or secret key.
    Or it gives the key ID that was used for encrypting the data, if given
    an encrypted message.
-->
<function>pgp_key_id</>はPGP公開キーまたは秘密キーのキーIDを取り出します。
暗号化されたメッセージが指定された場合は、データの暗号化に使用されたキーIDを与えます。
   </para>
   <para>
<!--
    It can return 2 special key IDs:
-->
2つの特殊なキーIDを返すことがあります。
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <literal>SYMKEY</>
     </para>
     <para>
<!--
      The message is encrypted with a symmetric key.
-->
メッセージは対称キーで暗号化されました。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>ANYKEY</>
     </para>
     <para>
<!--
      The message is public-key encrypted, but the key ID has been removed.
      That means you will need to try all your secret keys on it to see
      which one decrypts it.  <filename>pgcrypto</> itself does not produce
      such messages.
-->
メッセージは公開キーで暗号化されましたが、キーIDが消去されていました。
つまり、どれで復号できるかを判定するためにはすべての秘密キーを試行しなければならないことを意味します。
<filename>pgcrypto</>自身はこうしたメッセージを生成しません。
     </para>
    </listitem>
   </itemizedlist>
   <para>
<!--
    Note that different keys may have the same ID.   This is rare but a normal
    event. The client application should then try to decrypt with each one,
    to see which fits &mdash; like handling <literal>ANYKEY</>.
-->
異なるキーが同一IDを持つ場合があることに注意してください。
これは稀ですが、正常なイベントです。
この場合クライアントアプリケーションはどちらが当てはまるかを調べるために、<literal>ANYKEY</>の場合と同様に、それぞれのキーで復号を試行しなければなりません。
   </para>
  </sect3>

  <sect3>
   <title><function>armor()</function>, <function>dearmor()</function></title>

   <indexterm>
    <primary>armor</primary>
   </indexterm>

   <indexterm>
    <primary>dearmor</primary>
   </indexterm>

<synopsis>
armor(data bytea) returns text
dearmor(data text) returns bytea
</synopsis>
   <para>
<!--
    These functions wrap/unwrap binary data into PGP ASCII-armor format,
    which is basically Base64 with CRC and additional formatting.
-->
PGPのASCIIアーマー形式にデータを隠す、または、データを取り出します。
ASCIIアーマーは基本的にCRC付きのBASE64という形式で、追加のフォーマットがあります。
   </para>
  </sect3>

  <sect3>
<!--
   <title>Options for PGP Functions</title>
-->
   <title>PGP関数用のオプション</title>

   <para>
<!--
    Options are named to be similar to GnuPG.  An option's value should be
    given after an equal sign; separate options from each other with commas.
    For example:
-->
オプションはGnuPGに似せて命名しています。
オプションの値は等号記号の後に指定しなければなりません。
複数のオプションはカンマで区切ってください。
以下に例を示します。
<programlisting>
pgp_sym_encrypt(data, psw, 'compress-algo=1, cipher-algo=aes256')
</programlisting>
   </para>

   <para>
<!--
    All of the options except <literal>convert-crlf</literal> apply only to
    encrypt functions.  Decrypt functions get the parameters from the PGP
    data.
-->
<literal>convert-crlf</literal>を除くすべてのオプションは暗号化関数にのみ適用可能です。
復号関数はPGPデータからこうしたパラメータを入手します。
   </para>

   <para>
<!--
    The most interesting options are probably
    <literal>compress-algo</literal> and <literal>unicode-mode</literal>.
    The rest should have reasonable defaults.
-->
もっとも興味深いオプションはおそらく<literal>compress-algo</literal>と<literal>unicode-mode</literal>でしょう。
残りはデフォルトで問題ないはずです。
   </para>

  <sect4>
   <title>cipher-algo</title>

   <para>
<!--
    Which cipher algorithm to use.
-->
使用する暗号アルゴリズム。
   </para>
<literallayout>
<!--
Values: bf, aes128, aes192, aes256 (OpenSSL-only: <literal>3des</literal>, <literal>cast5</literal>)
Default: aes128
Applies to: pgp_sym_encrypt, pgp_pub_encrypt
-->
値: bf, aes128, aes192, aes256 (OpenSSL-only: <literal>3des</literal>, <literal>cast5</literal>)
デフォルト: aes128
適用範囲: pgp_sym_encrypt, pgp_pub_encrypt
</literallayout>
  </sect4>

  <sect4>
   <title>compress-algo</title>

   <para>
<!--
    Which compression algorithm to use.  Only available if
    <productname>PostgreSQL</productname> was built with zlib.
-->
使用する圧縮アルゴリズム。
<productname>PostgreSQL</productname>がzlib付きで構築されている場合のみ利用可能です。
   </para>
<literallayout>
<!--
Values:
  0 - no compression
  1 - ZIP compression
  2 - ZLIB compression (= ZIP plus meta-data and block CRCs)
Default: 0
Applies to: pgp_sym_encrypt, pgp_pub_encrypt
-->
値:
 0 - 非圧縮
 1 - ZIP圧縮
 2 - ZLIB圧縮 (ZIPにメタデータとブロックCRCを加えたもの)
デフォルト: 0
適用範囲: pgp_sym_encrypt, pgp_pub_encrypt
</literallayout>
  </sect4>

  <sect4>
   <title>compress-level</title>

   <para>
<!--
    How much to compress.  Higher levels compress smaller but are slower.
    0 disables compression.
-->
どの程度圧縮するかです。
レベルが大きい程小さくなりますが、低速になります。
0は圧縮を無効にします。
   </para>
<literallayout>
<!--
Values: 0, 1-9
Default: 6
Applies to: pgp_sym_encrypt, pgp_pub_encrypt
-->
値: 0, 1-9
デフォルト: 6
適用範囲: pgp_sym_encrypt, pgp_pub_encrypt
</literallayout>
  </sect4>

  <sect4>
   <title>convert-crlf</title>

   <para>
<!--
    Whether to convert <literal>\n</literal> into <literal>\r\n</literal> when
    encrypting and <literal>\r\n</literal> to <literal>\n</literal> when
    decrypting.  RFC 4880 specifies that text data should be stored using
    <literal>\r\n</literal> line-feeds.  Use this to get fully RFC-compliant
    behavior.
-->
暗号化の際に<literal>\n</literal>を<literal>\r\n</literal>に、復号の際に<literal>\r\n</literal> を<literal>\n</literal> に変換するかどうか。
RFC 4880では、テキストデータは改行コードとして<literal>\r\n</literal> を使用して格納すべきであると規定されています。
完全にRFC準拠の動作を行いたければ、これを使用してください。
   </para>
<literallayout>
<!--
Values: 0, 1
Default: 0
Applies to: pgp_sym_encrypt, pgp_pub_encrypt, pgp_sym_decrypt, pgp_pub_decrypt
-->
値: 0, 1
デフォルト: 0
適用範囲: pgp_sym_encrypt, pgp_pub_encrypt, pgp_sym_decrypt, pgp_pub_decrypt
</literallayout>
  </sect4>

  <sect4>
   <title>disable-mdc</title>

   <para>
<!--
    Do not protect data with SHA-1.  The only good reason to use this
    option is to achieve compatibility with ancient PGP products, predating
    the addition of SHA-1 protected packets to RFC 4880.
    Recent gnupg.org and pgp.com software supports it fine.
-->
データをSHA-1で保護しません。
このオプションを使用することが良い唯一の理由は、SHA-1で保護されたパケットがRFC 4880に追加される前の、古いPGP製品との互換性を得るためです。
最近のgnupg.orgおよびpgp.comのソフトウェアではこれを正しくサポートしています。
   </para>
<literallayout>
<!--
Values: 0, 1
Default: 0
Applies to: pgp_sym_encrypt, pgp_pub_encrypt
-->
値: 0, 1
デフォルト: 0
適用範囲: pgp_sym_encrypt, pgp_pub_encrypt
</literallayout>
  </sect4>

  <sect4>
   <title>sess-key</title>

   <para>
<!--
    Use separate session key.  Public-key encryption always uses a separate
    session key; this option is for symmetric-key encryption, which by default
    uses the S2K key directly.
-->
分離したセッションキーを使用します。
公開キー暗号では常に分離したセッションキーを使用します。
このオプションは対称キー暗号向けのもので、デフォルトではS2Kをそのまま使用します。
   </para>
<literallayout>
<!--
Values: 0, 1
Default: 0
Applies to: pgp_sym_encrypt
-->
値: 0, 1
デフォルト: 0
適用範囲: pgp_sym_encrypt
</literallayout>
  </sect4>

  <sect4>
   <title>s2k-mode</title>

   <para>
<!--
    Which S2K algorithm to use.
-->
使用するS2Kアルゴリズム。
   </para>
<literallayout>
<!--
Values:
  0 - Without salt.  Dangerous!
  1 - With salt but with fixed iteration count.
  3 - Variable iteration count.
Default: 3
Applies to: pgp_sym_encrypt
-->
値:
  0 - ソルト無。危険です
  1 - ソルト有。固定繰り返し回数。
  3 - 可変繰り返し回数
デフォルト: 3
適用範囲: pgp_sym_encrypt
</literallayout>
  </sect4>

  <sect4>
   <title>s2k-digest-algo</title>

   <para>
<!--
    Which digest algorithm to use in S2K calculation.
-->
S2K計算で使用するダイジェストアルゴリズム。
   </para>
<literallayout>
<!--
Values: md5, sha1
Default: sha1
Applies to: pgp_sym_encrypt
-->
値: md5, sha1
デフォルト: sha1
適用範囲: pgp_sym_encrypt
</literallayout>
  </sect4>

  <sect4>
   <title>s2k-cipher-algo</title>

   <para>
<!--
    Which cipher to use for encrypting separate session key.
-->
分離したセッションキーの暗号化に使用する暗号。
   </para>
<literallayout>
<!--
Values: bf, aes, aes128, aes192, aes256
Default: use cipher-algo
Applies to: pgp_sym_encrypt
-->
値: bf, aes, aes128, aes192, aes256
デフォルト: cipher-algoを使用
適用範囲: pgp_sym_encrypt
</literallayout>
  </sect4>

  <sect4>
   <title>unicode-mode</title>

   <para>
<!--
    Whether to convert textual data from database internal encoding to
    UTF-8 and back.  If your database already is UTF-8, no conversion will
    be done, but the message will be tagged as UTF-8.  Without this option
    it will not be.
-->
テキストデータをデータベース内部符号化方式からUTF-8に変換して戻すかどうかです。
データベースがすでにUTF-8であれば、変換は起こらず、データにUTF-8としてタグが付くのみです。
このオプションがないと、何も行われません。
   </para>
<literallayout>
<!--
Values: 0, 1
Default: 0
Applies to: pgp_sym_encrypt, pgp_pub_encrypt
-->
値: 0, 1
デフォルト: 0
適用範囲: pgp_sym_encrypt, pgp_pub_encrypt
</literallayout>
  </sect4>
  </sect3>

 <sect3>
<!--
  <title>Generating PGP Keys with GnuPG</title>
-->
  <title>GnuPGを使用したキーの生成</title>

  <para>
<!--
   To generate a new key:
-->
新しいキーを生成します。
<programlisting>
gpg --gen-key
</programlisting>
  </para>
  <para>
<!--
   The preferred key type is <quote>DSA and Elgamal</>.
-->
推奨するキー種類は<quote>DSAとElgamal</>です。
  </para>
  <para>
<!--
   For RSA encryption you must create either DSA or RSA sign-only key
   as master and then add an RSA encryption subkey with
   <literal>gpg &#045;&#045;edit-key</literal>.
-->
RSA暗号化のためには、マスタとしてDSAまたはRSAで署名のみのキーを作成し、そして<literal>gpg --edit-key</literal>を使用してRSAで暗号化された副キーを追加しなければなりません
  </para>
  <para>
<!--
   To list keys:
-->
キーを列挙します。
<programlisting>
gpg --list-secret-keys
</programlisting>
  </para>
  <para>
<!--
   To export a public key in ASCII-armor format:
-->
ASCIIアーマー形式で公開キーをエキスポートします。
<programlisting>
gpg -a --export KEYID > public.key
</programlisting>
  </para>
  <para>
<!--
   To export a secret key in ASCII-armor format:
-->
ASCIIアーマー形式の秘密キーをエキスポートします。
<programlisting>
gpg -a --export-secret-keys KEYID > secret.key
</programlisting>
  </para>
  <para>
<!--
   You need to use <function>dearmor()</> on these keys before giving them to
   the PGP functions.  Or if you can handle binary data, you can drop
   <literal>-a</literal> from the command.
-->
PGP関数にこれらのキーを渡す前に<function>dearmor()</>を使用する必要があります。
バイナリデータを扱うことができる場合、gpgから<literal>-a</literal>フラグを省略することができます。
  </para>
  <para>
<!--
   For more details see <literal>man gpg</literal>,
   <ulink url="http://www.gnupg.org/gph/en/manual.html">The GNU
   Privacy Handbook</ulink> and other documentation on
   <ulink url="http://www.gnupg.org"></ulink>.
-->
詳細は<literal>man gpg</literal>、<ulink url="http://www.gnupg.org/gph/en/manual.html">The GNU Privacy Handbook</ulink>、<ulink url="http://www.gnupg.org"></ulink>サイトの各種文書を参照してください。
  </para>
 </sect3>

 <sect3>
<!--
  <title>Limitations of PGP Code</title>
-->
  <title>PGPコードの制限</title>

  <itemizedlist>
   <listitem>
    <para>
<!--
    No support for signing.  That also means that it is not checked
    whether the encryption subkey belongs to the master key.
-->
署名に関するサポートはありません。
これはまた、暗号化副キーがマスタキーに属しているかどうか検査しないことを意味します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
    No support for encryption key as master key.  As such practice
    is generally discouraged, this should not be a problem.
-->
マスタキーとして暗号化キーをサポートしません。
一般的にこうした状況は現実的ではありませんので、問題にならないはずです。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
    No support for several subkeys.  This may seem like a problem, as this
    is common practice.  On the other hand, you should not use your regular
    GPG/PGP keys with <filename>pgcrypto</>, but create new ones,
    as the usage scenario is rather different.
-->
複数の副キーに関するサポートはありません。
よくありますので、これは問題になりそうに見えます。
一方、通常のGPG/PGPキーを<filename>pgcrypto</>で使用すべきではありません。
使用する状況が多少異なりますので新しく作成してください。
    </para>
   </listitem>
  </itemizedlist>
  </sect3>
 </sect2>

 <sect2>
<!--
  <title>Raw Encryption Functions</title>
-->
  <title>暗号化そのものを行う関数</title>

  <para>
<!--
   These functions only run a cipher over data; they don't have any advanced
   features of PGP encryption.  Therefore they have some major problems:
-->
これらの関数はデータ全体を暗号化するためだけに実行します。
PGP暗号化の持つ先端的な機能はありません。
したがって、大きな問題がいくつか存在します。
  </para>
  <orderedlist>
   <listitem>
    <para>
<!--
    They use user key directly as cipher key.
-->
暗号キーとしてユーザキーをそのまま使用します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
    They don't provide any integrity checking, to see
    if the encrypted data was modified.
-->
暗号化されたデータが変更されたかどうかを確認するための整合性検査をまったく提供しません。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
    They expect that users manage all encryption parameters
    themselves, even IV.
-->
ユーザが、IVをも含め暗号化パラメータ自体をすべて管理していることを想定しています。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
    They don't handle text.
-->
テキストは扱いません。
    </para>
   </listitem>
  </orderedlist>
  <para>
<!--
   So, with the introduction of PGP encryption, usage of raw
   encryption functions is discouraged.
-->
このため、PGP暗号化の導入もあり、暗号化のみの関数はあまり使用されません。
  </para>

  <indexterm>
   <primary>encrypt</primary>
  </indexterm>

  <indexterm>
   <primary>decrypt</primary>
  </indexterm>

  <indexterm>
   <primary>encrypt_iv</primary>
  </indexterm>

  <indexterm>
   <primary>decrypt_iv</primary>
  </indexterm>

<synopsis>
encrypt(data bytea, key bytea, type text) returns bytea
decrypt(data bytea, key bytea, type text) returns bytea

encrypt_iv(data bytea, key bytea, iv bytea, type text) returns bytea
decrypt_iv(data bytea, key bytea, iv bytea, type text) returns bytea
</synopsis>

  <para>
<!--
   Encrypt/decrypt data using the cipher method specified by
   <parameter>type</parameter>.  The syntax of the
   <parameter>type</parameter> string is:
-->
<parameter>type</parameter>で指定した暗号方法を使用してデータの暗号化・復号を行います。
<parameter>type</parameter>文字列の構文は以下の通りです。

<synopsis>
<replaceable>algorithm</> <optional> <literal>-</> <replaceable>mode</> </optional> <optional> <literal>/pad:</> <replaceable>padding</> </optional>
</synopsis>
<!--
   where <replaceable>algorithm</> is one of:
-->
ここで<replaceable>algorithm</>は以下の1つです。

  <itemizedlist>
   <listitem><para><literal>bf</literal> &mdash; Blowfish</para></listitem>
   <listitem><para><literal>aes</literal> &mdash; AES (Rijndael-128)</para></listitem>
  </itemizedlist>
<!--
   and <replaceable>mode</> is one of:
-->
また<replaceable>mode</>は以下の1つです。
  <itemizedlist>
   <listitem>
    <para>
<!--
    <literal>cbc</literal> &mdash; next block depends on previous (default)
-->
<literal>cbc</literal> &mdash; 次のブロックは前ブロックに依存します（デフォルト）
    </para>
   </listitem>
   <listitem>
    <para>
<!--
    <literal>ecb</literal> &mdash; each block is encrypted separately (for
    testing only)
-->
<literal>ecb</literal> &mdash; 各ブロックは独自に暗号化されます（試験用途のみ）
    </para>
   </listitem>
  </itemizedlist>
<!--
   and <replaceable>padding</> is one of:
-->
<replaceable>padding</>は以下の1つです。
  <itemizedlist>
   <listitem>
    <para>
<!--
    <literal>pkcs</literal> &mdash; data may be any length (default)
-->
<literal>pkcs</literal> &mdash; データ長に制限はありません（デフォルト）
    </para>
   </listitem>
   <listitem>
    <para>
<!--
    <literal>none</literal> &mdash; data must be multiple of cipher block size
-->
<literal>none</literal> &mdash; データは暗号ブロックサイズの倍数でなければなりません
    </para>
   </listitem>
  </itemizedlist>
  </para>
  <para>
<!--
   So, for example, these are equivalent:
-->
このため、例えば以下は同じです。
<programlisting>
encrypt(data, 'fooz', 'bf')
encrypt(data, 'fooz', 'bf-cbc/pad:pkcs')
</programlisting>
  </para>
  <para>
<!--
   In <function>encrypt_iv</> and <function>decrypt_iv</>, the
   <parameter>iv</> parameter is the initial value for the CBC mode;
   it is ignored for ECB.
   It is clipped or padded with zeroes if not exactly block size.
   It defaults to all zeroes in the functions without this parameter.
-->
<function>encrypt_iv</>および<function>decrypt_iv</>では、<parameter>iv</>パラメータはCBCモード用の初期値となります。
ECBでは無視されます。
正確にブロック長でない場合、切り詰められるか、もしくはゼロで埋められます。
このパラメータがない場合、関数のデフォルト値はすべてゼロです。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Random-Data Functions</title>
-->
  <title>ランダムデータ関数</title>

  <indexterm>
   <primary>gen_random_bytes</primary>
  </indexterm>

<synopsis>
gen_random_bytes(count integer) returns bytea
</synopsis>
  <para>
<!--
   Returns <parameter>count</> cryptographically strong random bytes.
   At most 1024 bytes can be extracted at a time.  This is to avoid
   draining the randomness generator pool.
-->
暗号論的に強いランダムな<parameter>count</>バイトを返します。
一度に最大で1024バイトを抽出することができます。
ランダム性ジェネレータプールを空にすることを防止するためのものです。
  </para>

  <indexterm>
   <primary>gen_random_uuid</primary>
  </indexterm>

<synopsis>
gen_random_uuid() returns uuid
</synopsis>
  <para>
<!--
   Returns a version 4 (random) UUID.
-->
バージョン4(ランダムな)UUIDを返します。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <sect3>
<!--
   <title>Configuration</title>
-->
   <title>構築</title>

   <para>
<!--
    <filename>pgcrypto</> configures itself according to the findings of the
    main PostgreSQL <literal>configure</literal> script.  The options that
    affect it are <literal>&#045;&#045;with-zlib</literal> and
    <literal>&#045;&#045;with-openssl</literal>.
-->
<filename>pgcrypto</>は自身で主PostgreSQLの<literal>configure</literal>スクリプトの検出結果に従って構築します。
構築に影響するオプションは<literal>--with-zlib</literal>と<literal>--with-openssl</literal>です。
   </para>

   <para>
<!--
    When compiled with zlib, PGP encryption functions are able to
    compress data before encrypting.
-->
ZLIB付きでコンパイルされた場合、PGP暗号化関数は暗号化前にデータを圧縮することができます。
   </para>

   <para>
<!--
    When compiled with OpenSSL, there will be more algorithms available.
    Also public-key encryption functions will be faster as OpenSSL
    has more optimized BIGNUM functions.
-->
OpenSSL付きでコンパイルされた場合、より多くのアルゴリズムが利用できるようになります。
また、OpenSSLがより最適化されたBIGNUM関数を持つため、公開キー暗号化関数は高速になります。
   </para>

   <table id="pgcrypto-with-without-openssl">
<!--
    <title>Summary of Functionality with and without OpenSSL</title>
-->
    <title>OpenSSLの有無による機能のまとめ</title>
    <tgroup cols="3">
     <thead>
      <row>
<!--
       <entry>Functionality</entry>
       <entry>Built-in</entry>
       <entry>With OpenSSL</entry>
-->
       <entry>機能</entry>
       <entry>組込み</entry>
       <entry>OpenSSL付き</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>MD5</entry>
<!--
       <entry>yes</entry>
       <entry>yes</entry>
-->
       <entry>○</entry>
       <entry>○</entry>
      </row>
      <row>
       <entry>SHA1</entry>
<!--
       <entry>yes</entry>
       <entry>yes</entry>
-->
       <entry>○</entry>
       <entry>○</entry>
      </row>
      <row>
       <entry>SHA224/256/384/512</entry>
<!--
       <entry>yes</entry>
       <entry>yes (Note 1)</entry>
-->
       <entry>○</entry>
       <entry>○（注１）</entry>
      </row>
      <row>
<!--
       <entry>Other digest algorithms</entry>
       <entry>no</entry>
       <entry>yes (Note 2)</entry>
-->
       <entry>この他のダイジェストアルゴリズム</entry>
       <entry>×</entry>
       <entry>○（注２）</entry>
      </row>
      <row>
       <entry>Blowfish</entry>
<!--
       <entry>yes</entry>
       <entry>yes</entry>
-->
       <entry>○</entry>
       <entry>○</entry>
      </row>
      <row>
       <entry>AES</entry>
<!--
       <entry>yes</entry>
       <entry>yes (Note 3)</entry>
-->
       <entry>○</entry>
       <entry>○（注３）</entry>
      </row>
      <row>
       <entry>DES/3DES/CAST5</entry>
<!--
       <entry>no</entry>
       <entry>yes</entry>
-->
       <entry>×</entry>
       <entry>○</entry>
      </row>
      <row>
<!--
       <entry>Raw encryption</entry>
-->
       <entry>暗号化そのもの</entry>
<!--
       <entry>yes</entry>
       <entry>yes</entry>
-->
       <entry>○</entry>
       <entry>○</entry>
      </row>
      <row>
<!--
       <entry>PGP Symmetric encryption</entry>
-->
       <entry>PGP対称暗号化</entry>
<!--
       <entry>yes</entry>
       <entry>yes</entry>
-->
       <entry>○</entry>
       <entry>○</entry>
      </row>
      <row>
<!--
       <entry>PGP Public-Key encryption</entry>
-->
       <entry>PGP公開キー暗号化</entry>
<!--
       <entry>yes</entry>
       <entry>yes</entry>
-->
       <entry>○</entry>
       <entry>○</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    Notes:
-->
注
   </para>

   <orderedlist>
    <listitem>
     <para>
<!--
      SHA2 algorithms were added to OpenSSL in version 0.9.8.  For
      older versions, <filename>pgcrypto</> will use built-in code.
-->
SHA2はOpenSSLバージョン0.9.8から含まれています。
これより古いバージョンでは、<filename>pgcrypto</>は組込みのコードを使用します。
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      Any digest algorithm OpenSSL supports is automatically picked up.
      This is not possible with ciphers, which need to be supported
      explicitly.
-->
OpenSSLがサポートする任意のダイジェストアルゴリズムが自動的に選択されます。
これは、明示的にサポートされなければならない暗号では使用できません。
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      AES is included in OpenSSL since version 0.9.7.  For
      older versions, <filename>pgcrypto</> will use built-in code.
-->
AESはOpenSSLバージョン0.9.7から含まれています。
これより古いバージョンでは、<filename>pgcrypto</>は組込みのコードを使用します。
     </para>
    </listitem>
   </orderedlist>
  </sect3>

  <sect3>
<!--
   <title>NULL Handling</title>
-->
   <title>NULLの扱い</title>

   <para>
<!--
    As is standard in SQL, all functions return NULL, if any of the arguments
    are NULL.  This may create security risks on careless usage.
-->
標準SQLの通り、引数のいずれかがNULLの場合、すべての関数はNULLを返します。
注意せずに使用すると、これがセキュリティ上の問題になるかもしれません。
   </para>
  </sect3>

  <sect3>
<!--
   <title>Security Limitations</title>
-->
   <title>セキュリティ上の制限</title>

   <para>
<!--
    All <filename>pgcrypto</> functions run inside the database server.
    That means that all
    the data and passwords move between <filename>pgcrypto</> and client
    applications in clear text.  Thus you must:
-->
<filename>pgcrypto</>の関数はすべてデータベースサーバ内部で実行されます。
これは、<filename>pgcrypto</>とクライアントアプリケーションとの間でやり取りされるデータはすべて平文であることを意味します。
したがって、以下を行う必要があります。
   </para>

   <orderedlist>
    <listitem>
<!--
     <para>Connect locally or use SSL connections.</para>
-->
     <para>ローカルまたはSSL接続で接続</para>
    </listitem>
    <listitem>
<!--
     <para>Trust both system and database administrator.</para>
-->
     <para>システム管理者およびデータベース管理者を信頼</para>
    </listitem>
   </orderedlist>

   <para>
<!--
    If you cannot, then better do crypto inside client application.
-->
これらが不可能であれば、クライアントアプリケーション内で暗号化する方が望まれます。
   </para>
  </sect3>

  <sect3>
<!--
   <title>Useful Reading</title>
-->
   <title>有用な文書</title>

   <itemizedlist>
    <listitem>
     <para><ulink url="http://www.gnupg.org/gph/en/manual.html"></ulink></para>
<!--
     <para>The GNU Privacy Handbook.</para>
-->
     <para>GNUプライバシーハンドブック</para>
    </listitem>
    <listitem>
     <para><ulink url="http://www.openwall.com/crypt/"></ulink></para>
<!--
     <para>Describes the crypt-blowfish algorithm.</para>
-->
     <para>blowfish暗号アルゴリズムの説明</para>
    </listitem>
    <listitem>
     <para>
      <ulink url="http://www.stack.nl/~galactus/remailers/passphrase-faq.html"></ulink>
     </para>
<!--
     <para>How to choose a good password.</para>
-->
     <para>優れたパスワードの選び方</para>
    </listitem>
    <listitem>
     <para><ulink url="http://world.std.com/~reinhold/diceware.html"></ulink></para>
<!--
     <para>Interesting idea for picking passwords.</para>
-->
     <para>パスワード決定に関する面白い考え</para>
    </listitem>
    <listitem>
     <para>
      <ulink url="http://www.interhack.net/people/cmcurtin/snake-oil-faq.html"></ulink>
     </para>
<!--
     <para>Describes good and bad cryptography.</para>
-->
     <para>良い暗号、悪い暗号に関する説明</para>
    </listitem>
   </itemizedlist>
  </sect3>

  <sect3>
<!--
   <title>Technical References</title>
-->
   <title>技術的な参考情報</title>

   <itemizedlist>
    <listitem>
     <para><ulink url="http://www.ietf.org/rfc/rfc4880.txt"></ulink></para>
<!--
     <para>OpenPGP message format.</para>
-->
     <para>OpenPGPメッセージフォーマット</para>
    </listitem>
    <listitem>
     <para><ulink url="http://www.ietf.org/rfc/rfc1321.txt"></ulink></para>
<!--
     <para>The MD5 Message-Digest Algorithm.</para>
-->
     <para>MD5 メッセージダイジェストアルゴリズム</para>
    </listitem>
    <listitem>
     <para><ulink url="http://www.ietf.org/rfc/rfc2104.txt"></ulink></para>
     <para>HMAC: Keyed-Hashing for Message Authentication.</para>
    </listitem>
    <listitem>
     <para>
      <ulink url="http://www.usenix.org/events/usenix99/provos.html"></ulink>
     </para>
<!--
     <para>Comparison of crypt-des, crypt-md5 and bcrypt algorithms.</para>
-->
     <para>DES暗号、MD5暗号、bcryptアルゴリズムの比較</para>
    </listitem>
    <listitem>
     <para>
      <ulink url="http://en.wikipedia.org/wiki/Fortuna_(PRNG)"></ulink>
     </para>
<!--
     <para>Description of Fortuna CSPRNG.</para>
-->
     <para>Fortuna CSPRNGの説明</para>
    </listitem>
    <listitem>
     <para><ulink url="http://jlcooke.ca/random/"></ulink></para>
<!--
     <para>Jean-Luc Cooke Fortuna-based <filename>/dev/random</> driver for Linux.</para>
-->
     <para>Linux用Jean-Luc Cooke Fortunaに基づく<filename>/dev/random</>ドライバ</para>
    </listitem>
    <listitem>
     <para><ulink url="http://research.cyber.ee/~lipmaa/crypto/"></ulink></para>
<!--
     <para>Collection of cryptology pointers.</para>
-->
     <para>暗号学に関するリンク集</para>
    </listitem>
   </itemizedlist>
  </sect3>
 </sect2>

 <sect2>
<!--
  <title>Author</title>
-->
  <title>作者</title>

  <para>
   Marko Kreen <email>markokr@gmail.com</email>
  </para>

  <para>
<!--
   <filename>pgcrypto</filename> uses code from the following sources:
-->
   <literal>pgcrypto</literal>は以下のソースを使用しています。
  </para>

  <informaltable>
   <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>Algorithm</entry>
      <entry>Author</entry>
      <entry>Source origin</entry>
-->
      <entry><para>アルゴリズム</para></entry>
      <entry><para>作者</para></entry>
      <entry><para>元ソース</para></entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>DES crypt</entry>
<!--
      <entry>David Burren and others</entry>
-->
      <entry>David Burren他</entry>
      <entry>FreeBSD libcrypt</entry>
     </row>
     <row>
      <entry>MD5 crypt</entry>
      <entry>Poul-Henning Kamp</entry>
      <entry>FreeBSD libcrypt</entry>
     </row>
     <row>
      <entry>Blowfish crypt</entry>
      <entry>Solar Designer</entry>
      <entry>www.openwall.com</entry>
     </row>
     <row>
      <entry>Blowfish cipher</entry>
      <entry>Simon Tatham</entry>
      <entry>PuTTY</entry>
     </row>
     <row>
      <entry>Rijndael cipher</entry>
      <entry>Brian Gladman</entry>
      <entry>OpenBSD sys/crypto</entry>
     </row>
     <row>
<!--
      <entry>MD5 hash and SHA1</entry>
-->
      <entry>MD5ハッシュとSHA1</entry>
      <entry>WIDE Project</entry>
      <entry>KAME kame/sys/crypto</entry>
     </row>
     <row>
      <entry>SHA256/384/512 </entry>
      <entry>Aaron D. Gifford</entry>
      <entry>OpenBSD sys/crypto</entry>
     </row>
     <row>
      <entry>BIGNUM math</entry>
      <entry>Michael J. Fromberger</entry>
      <entry>dartmouth.edu/~sting/sw/imath</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </sect2>

</sect1>
