<!-- doc/src/sgml/ref/set_transaction.sgml -->
<refentry id="SQL-SET-TRANSACTION">
 <indexterm zone="sql-set-transaction">
  <primary>SET TRANSACTION</primary>
 </indexterm>

 <indexterm>
<!--
  <primary>transaction isolation level</primary>
  <secondary>setting</secondary>
-->
  <primary>トランザクション隔離レベル</primary>
  <secondary>の設定</secondary>
 </indexterm>

 <indexterm>
<!--
  <primary>read-only transaction</primary>
  <secondary>setting</secondary>
-->
  <primary>読み取りのみトランザクション</primary>
  <secondary>の設定</secondary>
 </indexterm>

 <indexterm>
<!--
  <primary>deferrable transaction</primary>
  <secondary>setting</secondary>
-->
  <primary>遅延トランザクション</primary>
  <secondary>の設定</secondary>
 </indexterm>

 <refmeta>
  <refentrytitle>SET TRANSACTION</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>SET TRANSACTION</refname>
<!--
  <refpurpose>set the characteristics of the current transaction</refpurpose>
-->
<refpurpose>現在のトランザクションの特性を設定する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
SET TRANSACTION <replaceable class="parameter">transaction_mode</replaceable> [, ...]
SET TRANSACTION SNAPSHOT <replaceable class="parameter">snapshot_id</replaceable>
SET SESSION CHARACTERISTICS AS TRANSACTION <replaceable class="parameter">transaction_mode</replaceable> [, ...]

<!--
<phrase>where <replaceable class="parameter">transaction_mode</replaceable> is one of:</phrase>
-->
<phrase>ここで<replaceable class="parameter">transaction_mode</replaceable>は以下のいずれかです。</phrase>

    ISOLATION LEVEL { SERIALIZABLE | REPEATABLE READ | READ COMMITTED | READ UNCOMMITTED }
    READ WRITE | READ ONLY
    [ NOT ] DEFERRABLE
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   The <command>SET TRANSACTION</command> command sets the
   characteristics of the current transaction. It has no effect on any
   subsequent transactions.  <command>SET SESSION
   CHARACTERISTICS</command> sets the default transaction
   characteristics for subsequent transactions of a session.  These
   defaults can be overridden by <command>SET TRANSACTION</command>
   for an individual transaction.
-->
<command>SET TRANSACTION</command>は現在のトランザクションの特性を設定します。
これはそれより後のトランザクションには影響を及ぼしません。
<command>SET SESSION CHARACTERISTICS</command>は、セッションにおけるそれ以後のトランザクションのデフォルトのトランザクション特性を設定します。
個々のトランザクションについて<command>SET TRANSACTION</command>によりデフォルト特性を上書きすることができます。
  </para>

  <para>
<!--
   The available transaction characteristics are the transaction
   isolation level, the transaction access mode (read/write or
   read-only), and the deferrable mode.
   In addition, a snapshot can be selected, though only for the current
   transaction, not as a session default.
-->
利用可能なトランザクション特性はトランザクションの隔離レベル、トランザクションのアクセスモード（読み書きモードもしくは読み取りのみモード）、遅延モードです。
さらに、セッションのデフォルトとしてではなく、現在のトランザクションのみに対してスナップショットを選択することができます。
  </para>

  <para>
<!--
   The isolation level of a transaction determines what data the
   transaction can see when other transactions are running concurrently:
-->
トランザクションの隔離レベルは、並行して実行中の他のトランザクションが存在する場合、そのトランザクションが見ることができるデータを決定するものです。

   <variablelist>
    <varlistentry>
     <term><literal>READ COMMITTED</literal></term>
     <listitem>
      <para>
<!--
       A statement can only see rows committed before it began. This
       is the default.
-->
1つひとつの文から見ることができるのは、その文が開始される前にコミットされた行のみです。
これがデフォルトです。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>REPEATABLE READ</literal></term>
     <listitem>
      <para>
<!--
       All statements of the current transaction can only see rows committed
       before the first query or data-modification statement was executed in
       this transaction.
-->
現在のトランザクションにおける全ての文は、トランザクションで最初の問い合わせ文またはデータを変更する文が実行される前にコミットされた行だけを見ることができます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>SERIALIZABLE</literal></term>
     <listitem>
      <para>
<!--
       All statements of the current transaction can only see rows committed
       before the first query or data-modification statement was executed in
       this transaction.  If a pattern of reads and writes among concurrent
       serializable transactions would create a situation which could not
       have occurred for any serial (one-at-a-time) execution of those
       transactions, one of them will be rolled back with a
       <literal>serialization_failure</literal> error.
-->
現在のトランザクションにおける全ての文は、トランザクションで最初の問い合わせ文またはデータを変更する文が実行される前にコミットされた行だけを見ることができます。
同時実行のシリアライザブルトランザクションの中で読み取りと書き込みのパターンによって、これらのトランザクションの実行を直列に(同時に一度)行うことができない状況になる場合、その内１つのトランザクションは<literal>serialization_failure</literal>というエラーでロールバックされます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

<!--
   The SQL standard defines one additional level, <literal>READ
   UNCOMMITTED</literal>.
   In <productname>PostgreSQL</productname> <literal>READ
   UNCOMMITTED</literal> is treated as <literal>READ COMMITTED</literal>.
-->
標準SQLでは、<literal>READ UNCOMMITTED</literal>というもう1つのレベルを定義しています。
<productname>PostgreSQL</productname>では<literal>READ UNCOMMITTED</literal>は<literal>READ COMMITTED</literal>として扱われます。
  </para>

  <para>
<!--
   The transaction isolation level cannot be changed after the first query or
   data-modification statement (<command>SELECT</command>,
   <command>INSERT</command>, <command>DELETE</command>,
   <command>UPDATE</command>, <command>FETCH</command>, or
   <command>COPY</command>) of a transaction has been executed.  See
   <xref linkend="mvcc"> for more information about transaction
   isolation and concurrency control.
-->
トランザクション隔離レベルは、そのトランザクションにおける最初の問い合わせ文やデータ更新文（<command>SELECT</command>、<command>INSERT</command>、<command>DELETE</command>、<command>UPDATE</command>、<command>FETCH</command>、<command>COPY</command>）が実行された後では変更することができません。
トランザクションの隔離や同時実行制御についての詳細情報は<xref linkend="mvcc">を参照してください。
  </para>

  <para>
<!--
   The transaction access mode determines whether the transaction is
   read/write or read-only.  Read/write is the default.  When a
   transaction is read-only, the following SQL commands are
   disallowed: <literal>INSERT</literal>, <literal>UPDATE</literal>,
   <literal>DELETE</literal>, and <literal>COPY FROM</literal> if the
   table they would write to is not a temporary table; all
   <literal>CREATE</literal>, <literal>ALTER</literal>, and
   <literal>DROP</literal> commands; <literal>COMMENT</literal>,
   <literal>GRANT</literal>, <literal>REVOKE</literal>,
   <literal>TRUNCATE</literal>; and <literal>EXPLAIN ANALYZE</literal>
   and <literal>EXECUTE</literal> if the command they would execute is
   among those listed.  This is a high-level notion of read-only that
   does not prevent all writes to disk.
-->
トランザクションのアクセスモードは、そのトランザクションが読み書き可能か読み取りのみかを決定します。
デフォルトは読み書き可能です。
読み取りのみのトランザクションでは、以下のSQLコマンドの実行が制限されます。
書き込み対象のテーブルが一時テーブルでない場合、<literal>INSERT</literal>、<literal>UPDATE</literal>、<literal>DELETE</literal>、<literal>COPY FROM</literal>などのSQLコマンドを実行できません。
すべての<literal>CREATE</literal>、<literal>ALTER</literal>、<literal>DROP</literal>系のSQLコマンド、<literal>COMMENT</literal>、<literal>GRANT</literal>、<literal>REVOKE</literal>、<literal>TRUNCATE</literal>は、実行できません。
さらに、上述のコマンドが含まれる<literal>EXPLAIN ANALYZE</literal>と<literal>EXECUTE</literal>コマンドも実行できません。
この方法ではディスクへの書き込みをすべて防ぐわけではないので、読み取り専用の高レベルの概念です。
   
  </para>

  <para>
<!--
   The <literal>DEFERRABLE</literal> transaction property has no effect
   unless the transaction is also <literal>SERIALIZABLE</literal> and
   <literal>READ ONLY</literal>.  When all three of these properties are
   selected for a
   transaction, the transaction may block when first acquiring its snapshot,
   after which it is able to run without the normal overhead of a
   <literal>SERIALIZABLE</literal> transaction and without any risk of
   contributing to or being canceled by a serialization failure.  This mode
   is well suited for long-running reports or backups.
-->
<literal>DEFERRABLE</literal>トランザクション属性は、トランザクションが<literal>SERIALIZABLE</literal>かつ<literal>READ ONLY</literal>である場合のみ効果があります。
あるトランザクションでこれら３つの属性がすべて選択されている場合、最初にスナップショットを獲得する時にブロックされる可能性があります。
その後、そのトランザクションを<literal>SERIALIZABLE</literal>トランザクションの通常のオーバーヘッドを伴わず、またシリアライズ処理の失敗を引き起こす恐れやシリアライズ処理の失敗によりキャンセルされる恐れもなく実行することができます。
これは時間がかかるレポート処理やバックアップによく適しています。
  </para>

  <para>
<!--
   The <literal>SET TRANSACTION SNAPSHOT</literal> command allows a new
   transaction to run with the same <firstterm>snapshot</> as an existing
   transaction.  The pre-existing transaction must have exported its snapshot
   with the <literal>pg_export_snapshot</literal> function (see <xref
   linkend="functions-snapshot-synchronization">).  That function returns a
   snapshot identifier, which must be given to <literal>SET TRANSACTION
   SNAPSHOT</literal> to specify which snapshot is to be imported.  The
   identifier must be written as a string literal in this command, for example
   <literal>'000003A1-1'</>.
   <literal>SET TRANSACTION SNAPSHOT</literal> can only be executed at the
   start of a transaction, before the first query or
   data-modification statement (<command>SELECT</command>,
   <command>INSERT</command>, <command>DELETE</command>,
   <command>UPDATE</command>, <command>FETCH</command>, or
   <command>COPY</command>) of the transaction.  Furthermore, the transaction
   must already be set to <literal>SERIALIZABLE</literal> or
   <literal>REPEATABLE READ</literal> isolation level (otherwise, the snapshot
   would be discarded immediately, since <literal>READ COMMITTED</> mode takes
   a new snapshot for each command).  If the importing transaction uses
   <literal>SERIALIZABLE</literal> isolation level, then the transaction that
   exported the snapshot must also use that isolation level.  Also, a
   non-read-only serializable transaction cannot import a snapshot from a
   read-only transaction.
-->
<literal>SET TRANSACTION SNAPSHOT</literal>コマンドにより、
既存のトランザクションと同じ<firstterm>スナップショット</>を持つ新しいトランザクションを実行することができます。
既存のトランザクションは<literal>pg_export_snapshot</literal>関数(<xref linkend="functions-snapshot-synchronization">参照)を使用してそのスナップショットを公開していなければなりません。
この関数はスナップショット識別子を返します。
どのスナップショットを取り込むかを指定するために、この識別子を<literal>SET TRANSACTION SNAPSHOT</literal>に渡さなければなりません。
このコマンドでは、この識別子を例えば<literal>'000003A1-1'</>のようにリテラル文字列として記述しなければなりません。
<literal>SET TRANSACTION SNAPSHOT</literal>はトランザクションの開始時、つまり、トランザクションの最初の問い合わせまたはデータ変更文(<command>SELECT</command>、<command>INSERT</command>、<command>DELETE</command>、<command>UPDATE</command>、<command>FETCH</command>、<command>COPY</command>)の前でのみ実行できます。
さらに、そのトランザクションを前もって<literal>SERIALIZABLE</literal>または<literal>REPEATABLE READ</literal>隔離レベルに設定していなければなりません。
(さもないと、<literal>READ COMMITTED</>ではコマンドそれぞれに対して新しいスナップショットを取りますので、このスナップショットは即座に破棄されます。)
取り込むトランザクションが<literal>SERIALIZABLE</literal>隔離レベルを使用している場合、スナップショットを公開したトランザクションもこの隔離レベルを使用しなければなりません。
また、読み取り専用ではないシリアライザブルトランザクションは、読み取り専用トランザクションから公開されたスナップショットを取り込むことができません。
  </para>

 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   If <command>SET TRANSACTION</command> is executed without a prior
   <command>START TRANSACTION</command> or <command>BEGIN</command>,
   it emits a warning and otherwise has no effect.
-->
<command>SET TRANSACTION</command>を、その前に<command>START TRANSACTION</command>や<command>BEGIN</command>を発行することなく実行した場合、警告が発生しますが、それ以外は何の効果もありません。
  </para>

  <para>
<!--
   It is possible to dispense with <command>SET TRANSACTION</command>
   by instead specifying the desired <replaceable
   class="parameter">transaction_modes</replaceable> in
   <command>BEGIN</command> or <command>START TRANSACTION</command>.
   But that option is not available for <command>SET TRANSACTION
   SNAPSHOT</command>.
-->
<command>BEGIN</command>あるいは<command>START TRANSACTION</command>で目的の<replaceable class="parameter">transaction_modes</replaceable>を指定すれば、<command>SET TRANSACTION</command>を使わずに済ませることができます。
しかし<command>SET TRANSACTION SNAPSHOT</command>に対応するオプションはありません。
  </para>

  <para>
<!--
   The session default transaction modes can also be set by setting the
   configuration parameters <xref linkend="guc-default-transaction-isolation">,
   <xref linkend="guc-default-transaction-read-only">, and
   <xref linkend="guc-default-transaction-deferrable">.
   (In fact <command>SET SESSION CHARACTERISTICS</command> is just a
   verbose equivalent for setting these variables with <command>SET</>.)
   This means the defaults can be set in the configuration file, via
   <command>ALTER DATABASE</>, etc.  Consult <xref linkend="runtime-config">
   for more information.
-->
セッションのデフォルトのトランザクションモードは、設定パラメータ<xref linkend="guc-default-transaction-isolation">、<xref linkend="guc-default-transaction-read-only">、<xref linkend="guc-default-transaction-deferrable">で設定することができます
（実際、<command>SET SESSION CHARACTERISTICS</command>はこれらの変数を<command>SET</>で設定することと同等の冗長な記述に過ぎません。）。
したがって、トランザクションモードのデフォルトは設定ファイルや<command>ALTER DATABASE</>などで設定可能です。
詳細は<xref linkend="runtime-config">を参照してください。
  </para>

 </refsect1>

 <refsect1>
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   To begin a new transaction with the same snapshot as an already
   existing transaction, first export the snapshot from the existing
   transaction. That will return the snapshot identifier, for example:
-->
既存のトランザクションと同じスナップショットを持つトランザクションを新しく開始するためには、まず既存のトランザクションからスナップショットを公開します。
以下の例に示すように、これはスナップショット識別子を返します。

<programlisting>
BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SELECT pg_export_snapshot();
 pg_export_snapshot
--------------------
 000003A1-1
(1 row)
</programlisting>

<!--
   Then give the snapshot identifier in a <command>SET TRANSACTION
   SNAPSHOT</command> command at the beginning of the newly opened
   transaction:
-->
そして、新規に開始したトランザクションの先頭の<command>SET TRANSACTION SNAPSHOT</command>でこのスナップショット識別子を渡します。

<programlisting>
BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SET TRANSACTION SNAPSHOT '000003A1-1';
</programlisting></para>
 </refsect1>

 <refsect1 id="R1-SQL-SET-TRANSACTION-3">
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   These commands are defined in the <acronym>SQL</acronym> standard,
   except for the <literal>DEFERRABLE</literal> transaction mode
   and the <command>SET TRANSACTION SNAPSHOT</> form, which are
   <productname>PostgreSQL</productname> extensions.
-->
このコマンドは標準<acronym>SQL</acronym>で定義されています。
<literal>DEFERRABLE</literal>トランザクションモードと<command>SET TRANSACTION SNAPSHOT</>構文は例外であり、<productname>PostgreSQL</productname>の拡張です。
  </para>

  <para>
<!--
   <literal>SERIALIZABLE</literal> is the default transaction
   isolation level in the standard.  In
   <productname>PostgreSQL</productname> the default is ordinarily
   <literal>READ COMMITTED</literal>, but you can change it as
   mentioned above.
-->
標準<acronym>SQL</acronym>ではデフォルトのトランザクションは<literal>SERIALIZABLE</literal>です。
<productname>PostgreSQL</productname>では、通常、<literal>READ COMMITTED</literal>がデフォルトですが、これは上述の通り変更可能です。
  </para>

  <para>
<!--
   In the SQL standard, there is one other transaction characteristic
   that can be set with these commands: the size of the diagnostics
   area.  This concept is specific to embedded SQL, and therefore is
   not implemented in the <productname>PostgreSQL</productname> server.
-->
標準SQLでは、もう1つ、診断領域の大きさというトランザクション特性があり、このコマンドで設定可能です。
この概念は組み込みSQL固有のものなので、<productname>PostgreSQL</productname>サーバには実装されていません。
   
  </para>

  <para>
<!--
   The SQL standard requires commas between successive <replaceable
   class="parameter">transaction_modes</replaceable>, but for historical
   reasons <productname>PostgreSQL</productname> allows the commas to be
   omitted.
-->
標準SQLでは、連続する<replaceable class="parameter">transaction_modes</replaceable>の間にはカンマが必要です。
歴史的な理由より<productname>PostgreSQL</productname>ではカンマを省略することができます。
  </para>
 </refsect1>
</refentry>
