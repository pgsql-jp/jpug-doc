<!--
doc/src/sgml/ref/delete.sgml
PostgreSQL documentation
-->

<refentry id="sql-delete">
 <indexterm zone="sql-delete">
  <primary>DELETE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>DELETE</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>DELETE</refname>
<!--
  <refpurpose>delete rows of a table</refpurpose>
-->
  <refpurpose>テーブルから行を削除する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
[ WITH [ RECURSIVE ] <replaceable class="parameter">with_query</replaceable> [, ...] ]
DELETE FROM [ ONLY ] <replaceable class="parameter">table_name</replaceable> [ * ] [ [ AS ] <replaceable class="parameter">alias</replaceable> ]
    [ USING <replaceable class="parameter">from_item</replaceable> [, ...] ]
    [ WHERE <replaceable class="parameter">condition</replaceable> | WHERE CURRENT OF <replaceable class="parameter">cursor_name</replaceable> ]
    [ RETURNING [ WITH ( { OLD | NEW } AS <replaceable class="parameter">output_alias</replaceable> [, ...] ) ]
                { * | <replaceable class="parameter">output_expression</replaceable> [ [ AS ] <replaceable class="parameter">output_name</replaceable> ] } [, ...] ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>DELETE</command> deletes rows that satisfy the
   <literal>WHERE</literal> clause from the specified table.  If the
   <literal>WHERE</literal> clause is absent, the effect is to delete
   all rows in the table.  The result is a valid, but empty table.
-->
<command>DELETE</command>は、指定したテーブルから<literal>WHERE</literal>句を満たす行を削除します。
<literal>WHERE</literal>句がない場合、指定したテーブルの全ての行を削除することになります。
この結果、そのテーブルは存在するが中身が空のテーブルになります。
  </para>

   <tip>
    <para>
<!--
     <link linkend="sql-truncate"><command>TRUNCATE</command></link> provides a
     faster mechanism to remove all rows from a table.
-->
<link linkend="sql-truncate"><command>TRUNCATE</command></link>は、より高速に、テーブルから全ての行を削除する仕組みを提供します。
    </para>
   </tip>

  <para>
<!--
   There are two ways to delete rows in a table using information
   contained in other tables in the database: using sub-selects, or
   specifying additional tables in the <literal>USING</literal> clause.
   Which technique is more appropriate depends on the specific
   circumstances.
-->
データベース内のほかのテーブルに含まれる情報を用いてテーブル内の行を削除する方法には、副SELECTと<literal>USING</literal>句で追加テーブルを指定する方法の2つがあります。
どちらの技法が適切かはその状況によります。
  </para>

  <para>
<!--
   The optional <literal>RETURNING</literal> clause causes <command>DELETE</command>
   to compute and return value(s) based on each row actually deleted.
   Any expression using the table's columns, and/or columns of other
   tables mentioned in <literal>USING</literal>, can be computed.
   The syntax of the <literal>RETURNING</literal> list is identical to that of the
   output list of <command>SELECT</command>.
-->
<literal>RETURNING</literal>句を指定すると、<command>DELETE</command>は実際に削除された各行に基づいて計算された値を返すようになります。
そのテーブルの列、<literal>USING</literal>で指定された他のテーブルの列、あるいは、その両方を使用した式を計算することができます。
<literal>RETURNING</literal>リストの構文は<command>SELECT</command>の出力リストと同一です。
  </para>

  <para>
<!--
   You must have the <literal>DELETE</literal> privilege on the table
   to delete from it, as well as the <literal>SELECT</literal>
   privilege for any table in the <literal>USING</literal> clause or
   whose values are read in the <replaceable
   class="parameter">condition</replaceable>.
-->
削除を実行するには、そのテーブルの<literal>DELETE</literal>権限が必要です。
また、<literal>USING</literal>句内のテーブルに対する<literal>SELECT</literal>権限、および、<replaceable class="parameter">condition</replaceable>で使用する値を読み取るために、その値が含まれるテーブルに対する<literal>SELECT</literal>権限も必要です。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">with_query</replaceable></term>
    <listitem>
     <para>
<!--
      The <literal>WITH</literal> clause allows you to specify one or more
      subqueries that can be referenced by name in the <command>DELETE</command>
      query. See <xref linkend="queries-with"/> and <xref linkend="sql-select"/>
      for details.
-->
<literal>WITH</literal>句により<command>DELETE</command>問い合わせ内で名前で参照可能な１つ以上の副問い合わせを指定することができます。
詳しくは<xref linkend="queries-with"/>と<xref linkend="sql-select"/>を参照してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">table_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name (optionally schema-qualified) of the table to delete rows
      from.  If <literal>ONLY</literal> is specified before the table name,
      matching rows are deleted from the named table only.  If
      <literal>ONLY</literal> is not specified, matching rows are also deleted
      from any tables inheriting from the named table.  Optionally,
      <literal>*</literal> can be specified after the table name to explicitly
      indicate that descendant tables are included.
-->
行を削除するテーブルの名前です（スキーマ修飾名も可）。
テーブル名の前に<literal>ONLY</literal>が指定された場合、そのテーブルでのみマッチする行が削除されます。
<literal>ONLY</literal>が指定されていない場合、そのテーブルおよび（もしあれば）そのテーブルを継承する全てのテーブルから一致する行が削除されます。
オプションで、テーブル名の後に<literal>*</literal>を指定することで、明示的に継承するテーブルも含まれることを示すことができます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">alias</replaceable></term>
    <listitem>
     <para>
<!--
      A substitute name for the target table. When an alias is
      provided, it completely hides the actual name of the table.  For
      example, given <literal>DELETE FROM foo AS f</literal>, the remainder
      of the <command>DELETE</command> statement must refer to this
      table as <literal>f</literal> not <literal>foo</literal>.
-->
対象テーブルの別名です。
別名が与えられた場合、実際のテーブル名は完全に隠蔽されます。
たとえば、<literal>DELETE FROM foo AS f</literal>とあるとき、この<command>DELETE</command>文の残りの部分ではこのテーブルを<literal>foo</literal>ではなく<literal>f</literal>として参照しなければなりません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">from_item</replaceable></term>
    <listitem>
     <para>
<!--
      A table expression allowing columns from other tables to appear
      in the <literal>WHERE</literal> condition.  This uses the same
      syntax as the <link linkend="sql-from"><literal>FROM</literal></link>
      clause of a <command>SELECT</command> statement; for example, an alias
      for the table name can be specified.  Do not repeat the target
      table as a <replaceable class="parameter">from_item</replaceable>
      unless you wish to set up a self-join (in which case it must appear
      with an alias in the <replaceable>from_item</replaceable>).
-->
<literal>WHERE</literal>条件内に他のテーブルの列を記述できるようにするための、テーブル式です。
これは、<command>SELECT</command>文の<link linkend="sql-from"><literal>FROM</literal></link>句と同じ文法を使います。例えば、テーブル名の別名が指定できます。
自己結合を行う場合を除き、<replaceable class="parameter">from_item</replaceable>に対象のテーブルを繰り返してはいけません（自己結合を行う場合は、<replaceable>from_item</replaceable>内で対象のテーブルとその別名を指定しておく必要があります）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">condition</replaceable></term>
    <listitem>
     <para>
<!--
      An expression that returns a value of type <type>boolean</type>.
      Only rows for which this expression returns <literal>true</literal>
      will be deleted.
-->
<type>boolean</type>型の値を返す式です。
この式が<literal>true</literal>を返す行のみが削除されます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">cursor_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name of the cursor to use in a <literal>WHERE CURRENT OF</literal>
      condition.  The row to be deleted is the one most recently fetched
      from this cursor.  The cursor must be a non-grouping
      query on the <command>DELETE</command>'s target table.
      Note that <literal>WHERE CURRENT OF</literal> cannot be
      specified together with a Boolean condition.  See
      <xref linkend="sql-declare"/>
      for more information about using cursors with
      <literal>WHERE CURRENT OF</literal>.
-->
<literal>WHERE CURRENT OF</literal>条件で使用されるカーソルの名前です。
削除対象の行は、そのカーソルからもっとも最近に取り出される行です。
カーソルは、<command>DELETE</command>の対象テーブルに対するグループ化のない問い合わせでなければなりません。
<literal>WHERE CURRENT OF</literal>を論理条件といっしょに指定することはできません。
<literal>WHERE CURRENT OF</literal>付きのカーソルの使用に関する情報については<xref linkend="sql-declare"/>を参照してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">output_alias</replaceable></term>
    <listitem>
     <para>
<!--
      An optional substitute name for <literal>OLD</literal> or
      <literal>NEW</literal> rows in the <literal>RETURNING</literal> list.
-->
<literal>RETURNING</literal>リストの<literal>OLD</literal>または<literal>NEW</literal>行に付与できる任意の代替名です。
     </para>

     <para>
<!--
      By default, old values from the target table can be returned by writing
      <literal>OLD.<replaceable class="parameter">column_name</replaceable></literal>
      or <literal>OLD.*</literal>, and new values can be returned by writing
      <literal>NEW.<replaceable class="parameter">column_name</replaceable></literal>
      or <literal>NEW.*</literal>.  When an alias is provided, these names are
      hidden and the old or new rows must be referred to using the alias.
      For example <literal>RETURNING WITH (OLD AS o, NEW AS n) o.*, n.*</literal>.
-->
デフォルトでは、ターゲットテーブルの古い値は、<literal>OLD.<replaceable class="parameter">column_name</replaceable></literal>または<literal>OLD.*</literal>と返され、新しい値は<literal>NEW.<replaceable class="parameter">column_name</replaceable></literal>または<literal>NEW.*</literal>と返されます。
別名が提供されている場合、これらの名前は隠され、古い、もしくは新しい行は別名を使用します。
例<literal>RETURNING WITH (OLD AS o, NEW AS n) o.*, n.*</literal>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">output_expression</replaceable></term>
    <listitem>
     <para>
<!--
      An expression to be computed and returned by the <command>DELETE</command>
      command after each row is deleted.  The expression can use any
      column names of the table named by <replaceable class="parameter">table_name</replaceable>
      or table(s) listed in <literal>USING</literal>.
      Write <literal>*</literal> to return all columns.
-->
各行を削除した後に<command>DELETE</command>によって計算され、返される式です。
この式には、<replaceable class="parameter">table_name</replaceable>で指名したテーブルまたは<literal>USING</literal>で指定したテーブルの任意の列名を使用することができます。
すべての列を返す場合は<literal>*</literal>と記載してください。
     </para>

     <para>
<!--
      A column name or <literal>*</literal> may be qualified using
      <literal>OLD</literal> or <literal>NEW</literal>, or the corresponding
      <replaceable class="parameter">output_alias</replaceable> for
      <literal>OLD</literal> or <literal>NEW</literal>, to cause old or new
      values to be returned.  An unqualified column name, or
      <literal>*</literal>, or a column name or <literal>*</literal> qualified
      using the target table name or alias will return old values.
-->
列名や<literal>*</literal> は<literal>OLD</literal>や<literal>NEW</literal>または対応する<replaceable class="parameter">output_alias</replaceable> を使用して修飾すると、古い値または新しい値が戻されます。
非修飾の列名や<literal>*</literal>、またはターゲットテーブル名前もしくは別名を使用して修飾された列名または<literal>*</literal>は、古い値が戻されます。
     </para>

     <para>
<!--
      For a simple <command>DELETE</command>, all new values will be
      <literal>NULL</literal>.  However, if an <literal>ON DELETE</literal>
      rule causes an <command>INSERT</command> or <command>UPDATE</command>
      to be executed instead, the new values may be non-<literal>NULL</literal>.
-->
シンプルな<command>DELETE</command>では、すべての新しい値は<literal>NULL</literal>になります。
しかし<literal>ON DELETE</literal>ルールによって<command>INSERT</command>または<command>UPDATE</command>が代わりに実行される場合、新しい値は<literal>NULL</literal>ではない可能性があります。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">output_name</replaceable></term>
    <listitem>
     <para>
<!--
      A name to use for a returned column.
-->
返される列で使用される名前です。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--
  <title>Outputs</title>
-->
  <title>出力</title>

  <para>
<!--
   On successful completion, a <command>DELETE</command> command returns a command
   tag of the form
-->
正常に終了した場合、<command>DELETE</command>コマンドは以下の形式のコマンドタグを返します。
<screen>
DELETE <replaceable class="parameter">count</replaceable>
</screen>
<!--
   The <replaceable class="parameter">count</replaceable> is the number
   of rows deleted.  Note that the number may be less than the number of
   rows that matched the <replaceable
   class="parameter">condition</replaceable> when deletes were
   suppressed by a <literal>BEFORE DELETE</literal> trigger.  If <replaceable
   class="parameter">count</replaceable> is 0, no rows were deleted by
   the query (this is not considered an error).
-->
<replaceable class="parameter">count</replaceable>は削除した行数です。
この数は、<literal>BEFORE DELETE</literal>トリガによって削除が抑止された場合、<replaceable class="parameter">condition</replaceable>に合致した行より少なくなる可能性があることに注意してください。
<replaceable class="parameter">count</replaceable>が0の場合、問い合わせによって削除された行がなかったことを示します
（これはエラーとはみなされません）。
  </para>

  <para>
<!--
   If the <command>DELETE</command> command contains a <literal>RETURNING</literal>
   clause, the result will be similar to that of a <command>SELECT</command>
   statement containing the columns and values defined in the
   <literal>RETURNING</literal> list, computed over the row(s) deleted by the
   command.
-->
<command>DELETE</command>コマンドが<literal>RETURNING</literal>句を持つ場合、その結果は、<literal>RETURNING</literal>リストで定義した列と値を持ち、そのコマンドで削除された行全体に対して計算を行う<command>SELECT</command>文の結果と似たものになるでしょう。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   <productname>PostgreSQL</productname> lets you reference columns of
   other tables in the <literal>WHERE</literal> condition by specifying the
   other tables in the <literal>USING</literal> clause.  For example,
   to delete all films produced by a given producer, one can do:
-->
<productname>PostgreSQL</productname>では、<literal>USING</literal>句で他のテーブルを指定することで、<literal>WHERE</literal>条件内で他のテーブルの列を参照できます。
例えば、指定したプロデューサが製作した全ての映画を削除する時は、次のようなコマンドを実行します。
<programlisting>
DELETE FROM films USING producers
  WHERE producer_id = producers.id AND producers.name = 'foo';
</programlisting>
<!--
   What is essentially happening here is a join between <structname>films</structname>
   and <structname>producers</structname>, with all successfully joined
   <structname>films</structname> rows being marked for deletion.
   This syntax is not standard.  A more standard way to do it is:
-->
ここでは、<structname>films</structname>と<structname>producers</structname>とを結合して、<structname>films</structname>行に削除用の印を付けるという作業を行っています。
この構文は標準に従ったものではありません。
より標準的な方法は以下の通りです。
<programlisting>
DELETE FROM films
  WHERE producer_id IN (SELECT id FROM producers WHERE name = 'foo');
</programlisting>
<!--
   In some cases the join style is easier to write or faster to
   execute than the sub-select style.
-->
副SELECT形式より結合形式の方が書き易い、あるいは、実行が速くなることがあります。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   Delete all films but musicals:
-->
ミュージカル以外の全ての映画を削除します。
<programlisting>
DELETE FROM films WHERE kind &lt;&gt; 'Musical';
</programlisting>
  </para>

  <para>
<!--
   Clear the table <literal>films</literal>:
-->
<literal>films</literal>テーブルを空にします。
<programlisting>
DELETE FROM films;
</programlisting>
  </para>

  <para>
<!--
   Delete completed tasks, returning full details of the deleted rows:
-->
完了した作業（statusがDONE）を削除し、削除された行のすべての詳細を返します。
<programlisting>
DELETE FROM tasks WHERE status = 'DONE' RETURNING *;
</programlisting>
  </para>

  <para>
<!--
   Delete the row of <structname>tasks</structname> on which the cursor
   <literal>c_tasks</literal> is currently positioned:
-->
<structname>tasks</structname>において<literal>c_tasks</literal>カーソルが現在位置している行を削除します。
<programlisting>
DELETE FROM tasks WHERE CURRENT OF c_tasks;
</programlisting>
  </para>

  <para>
<!--
   While there is no <literal>LIMIT</literal> clause
   for <command>DELETE</command>, it is possible to get a similar effect
   using the same method described in <link linkend="update-limit">the
   documentation of <command>UPDATE</command></link>:
-->
<command>DELETE</command>には<literal>LIMIT</literal>句はありませんが、<link linkend="update-limit"><command>UPDATE</command>の文書</link>で説明したのと同じ方法で同様の効果を得ることができます。
<programlisting>
WITH delete_batch AS (
  SELECT l.ctid FROM user_logs AS l
    WHERE l.status = 'archived'
    ORDER BY l.creation_date
    FOR UPDATE
    LIMIT 10000
)
DELETE FROM user_logs AS dl
  USING delete_batch AS del
  WHERE dl.ctid = del.ctid;
</programlisting>
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   This command conforms to the <acronym>SQL</acronym> standard, except
   that the <literal>USING</literal> and <literal>RETURNING</literal> clauses
   are <productname>PostgreSQL</productname> extensions, as is the ability
   to use <literal>WITH</literal> with <command>DELETE</command>.
-->
このコマンドは標準<acronym>SQL</acronym>に準拠しています。
ただし、<literal>USING</literal>句と<literal>RETURNING</literal>句は<productname>PostgreSQL</productname>の拡張です。
<command>DELETE</command>で<literal>WITH</literal>が使用可能であることも同様に拡張です。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-truncate"/></member>
  </simplelist>
 </refsect1>
</refentry>
