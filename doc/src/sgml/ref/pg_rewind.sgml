<!--
doc/src/sgml/ref/pg_rewind.sgml
PostgreSQL documentation
-->

<refentry id="app-pgrewind">
 <indexterm zone="app-pgrewind">
  <primary>pg_rewind</primary>
 </indexterm>

 <refmeta>
  <refentrytitle><application>pg_rewind</application></refentrytitle>
  <manvolnum>1</manvolnum>
<!--
  <refmiscinfo>Application</refmiscinfo>
-->
  <refmiscinfo>アプリケーション</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pg_rewind</refname>
<!--
  <refpurpose>synchronize a <productname>PostgreSQL</productname> data directory with another data directory that was forked from it</refpurpose> ★原文変更あり
-->
  <refpurpose><productname>PostgreSQL</productname>のデータディレクトリを、そこから派生した他のデータディレクトリと同期する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pg_rewind</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <group choice="plain">
    <group choice="req">
     <arg choice="plain"><option>-D </option></arg>
     <arg choice="plain"><option>--target-pgdata</option></arg>
    </group>
    <replaceable> directory</replaceable>
    <group choice="req">
     <arg choice="plain"><option>--source-pgdata=<replaceable>directory</replaceable></option></arg>
     <arg choice="plain"><option>--source-server=<replaceable>connstr</replaceable></option></arg>
    </group>
   </group>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <application>pg_rewind</> is a tool for synchronizing a PostgreSQL cluster
   with another copy of the same cluster, after the clusters' timelines have
   diverged. A typical scenario is to bring an old master server back online
   after failover as a standby that follows the new master.
-->
<application>pg_rewind</>は、PostgreSQLのクラスタのタイムラインが分岐した後、クラスタをその複製のクラスタに同期するためのツールです。
典型的なシナリオとしては、フェイルオーバ後、新しいマスターに追従するスタンバイとして、古いマスターサーバをオンラインに戻す、というのがあります。
  </para>

  <para>
<!--
   The result is equivalent to replacing the target data directory with the
   source one. Only changed blocks from relation files are copied;
   all other files are copied in full, including configuration files. The
   advantage of <application>pg_rewind</> over taking a new base backup, or
   tools like <application>rsync</>, is that <application>pg_rewind</> does
   not require reading through unchanged blocks in the cluster. This makes
   it a lot faster when the database is large and only a small
   fraction of blocks differ between the clusters.
-->
実行結果は、ターゲットデータディレクトリをソースディレクトリと置き換えたのと等しくなります。
設定ファイルを含め、すべてのファイルがコピーされます。
新しいベースバックアップを取ったり、<application>rsync</>のようなツールを使う場合と比較して、<application>pg_rewind</>はクラスタ内の変更されていないファイルを読出す必要がないという利点があります。★原文変更あり
データベースが大きく、クラスタ間で変更されている部分がわずかの場合には、極めて高速になります。
  </para>

  <para>
<!--
   <application>pg_rewind</> examines the timeline histories of the source
   and target clusters to determine the point where they diverged, and
   expects to find WAL in the target cluster's <filename>pg_xlog</> directory
   reaching all the way back to the point of divergence. The point of divergence
   can be found either on the target timeline, the source timeline, or their common
   ancestor. In the typical failover scenario where the target cluster was
   shut down soon after the divergence, this is not a problem, but if the
   target cluster ran for a long time after the divergence, the old WAL
   files might no longer be present. In that case, they can be manually
   copied from the WAL archive to the <filename>pg_xlog</> directory, or
   fetched on startup by configuring <filename>recovery.conf</>.  The use of
   <application>pg_rewind</> is not limited to failover, e.g.  a standby
   server can be promoted, run some write transactions, and then rewinded
   to become a standby again.
-->
<application>pg_rewind</>はソースとターゲットクラスタ内のタイムラインヒストリーを調べ、それらがどの時点で異なるものになったのかを調べます。
そしてターゲットクラスタ内の<filename>pg_xlog</>ディレクトリ内の分岐点に到達するWALを見つけようとします。
★原文変更あり
分岐点のあと間をおかずシャットダウンされたような典型的なフェイルオーバのシナリオにおいては、これは特に問題になりません。
しかし、分岐点の後にターゲットクラスタが長時間運用されていた場合には、古いWALファイルはもう存在しないかもしれません。
この場合は、WALアーカイブから手動で<filename>pg_xlog</>ディレクトリにコピーすることができます。
不足しているWALファイルをアーカイブから自動的にコピーする機能は今のところサポートされていません。
  </para>

  <para>
<!--
   When the target server is started for the first time after running
   <application>pg_rewind</>, it will go into recovery mode and replay all
   WAL generated in the source server after the point of divergence.
   If some of the WAL was no longer available in the source server when
   <application>pg_rewind</> was run, and therefore could not be copied by the
   <application>pg_rewind</> session, it must be made available when the
   target server is started. This can be done by creating a
   <filename>recovery.conf</> file in the target data directory with a
   suitable <varname>restore_command</>.
-->
★原文変更あり
<application>pg_rewind</>を実行した後、最初にターゲットサーバを起動すると、そのサーバはリカバリモードに入り、分岐点以降ソースサーバで生成されたWALをすべてリプレイします。
<application>pg_rewind</>が実行された時にWALがソースサーバになくて<application>pg_rewind</>のセッションではコピーできなかった場合は、ターゲットサーバが起動した時にWALを読む込めるようになっていなければなりません。
適切な<varname>restore_command</>を設定した<filename>recovery.conf</>ファイルをターゲットデータディレクトリに置くことで、これを達成できます。
  </para>

  <para>
<!--
   <application>pg_rewind</> requires that the target server either has
   the <xref linkend="guc-wal-log-hints"> option enabled
   in <filename>postgresql.conf</> or data checksums enabled when
   the cluster was initialized with <application>initdb</>.  Neither of these
   are currently on by default.  <xref linkend="guc-full-page-writes">
   must also be set to <literal>on</>, but is enabled by default.
-->
★原文変更あり
<application>pg_rewind</>を使用するには、ターゲットサーバ上で<filename>postgresql.conf</>の<xref linkend="guc-wal-log-hints">オプションが有効になっているか、<application>initdb</>でクラスタを初期化した時にデータチェックサムが有効になっていなければなりません。
どちらもデフォルトでは無効です。
<xref linkend="guc-full-page-writes">も有効でなければなりませんが、これはデフォルトで有効です。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Options</title>
-->
  <title>オプション</title>
   <para>
<!--
    <application>pg_rewind</application> accepts the following command-line
    arguments:
-->
    <application>pg_rewind</application>は以下のコマンドラインオプションを受け付けます。

    <variablelist>
     <varlistentry>
      <term><option>-D <replaceable class="parameter">directory</replaceable></option></term>
      <term><option>--target-pgdata=<replaceable class="parameter">directory</replaceable></option></term>
      <listitem>
       <para>
<!--
        This option specifies the target data directory that is synchronized
        with the source. The target server must be shut down cleanly before
        running <application>pg_rewind</application>
-->
このオプションは、同期するターゲットデータディレクトリを指定します。
ターゲットサーバは、<application>pg_rewind</application>を実行する前に、正常にシャットダウンされていなければなりません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--source-pgdata=<replaceable class="parameter">directory</replaceable></option></term>
      <listitem>
       <para>
<!--
        Specifies the file system path to the data directory of the source
        server to synchronize the target with. This option requires the
        source server to be cleanly shut down.
-->
★原文変更あり
同期するソースサーバのデータディレクトリへのパスを指定します。
<option>--source-pgdata</>を使用する場合は、ソースサーバは正常にシャットダウンされていなければなりません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--source-server=<replaceable class="parameter">connstr</replaceable></option></term>
      <listitem>
       <para>
<!--
        Specifies a libpq connection string to connect to the source
        <productname>PostgreSQL</> server to synchronize the target with.
        The connection must be a normal (non-replication) connection
        with superuser access. This option requires the source
        server to be running and not in recovery mode.
-->
同期するソース<productname>PostgreSQL</>サーバへ接続するためのlibpq接続文字列を指定します。
接続は、スーパユーザアクセスである通常の接続(レプリケーション接続でない)でなければなりません。★原文変更あり
サーバは稼働中でなければならず、またリカバリモードであってはいけません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n</option></term>
      <term><option>--dry-run</option></term>
      <listitem>
       <para>
<!--
        Do everything except actually modifying the target directory.
-->
ターゲットディレクトリを実際に更新する以外はすべてのことを行います。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-P</option></term>
      <term><option>--progress</option></term>
      <listitem>
       <para>
<!--
        Enables progress reporting. Turning this on will deliver an approximate
        progress report while copying data from the source cluster.
-->
進行状況のレポートを有効にします。このオプションを有効にすると、データをソースクラスタからコピーする際のおおよその進行状況をレポートします。★原文変更あり
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--debug</option></term>
      <listitem>
       <para>
<!--
        Print verbose debugging output that is mostly useful for developers
        debugging <application>pg_rewind</>.
-->
主に開発者が<application>pg_rewind</>をデバッグするのに役立つ冗長なデバッグ出力を印字します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</option></term>
      <term><option>--version</option></term>
<!--
      <listitem><para>Display version information, then exit.</para></listitem>
-->
      <listitem><para>バージョン情報を表示して終了します。</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</option></term>
      <term><option>--help</option></term>
<!--
      <listitem><para>Show help, then exit.</para></listitem>
-->
      <listitem><para>ヘルプを表示して終了します。</para></listitem>
     </varlistentry>

    </variablelist>
   </para>
 </refsect1>

 <refsect1>
<!--
  <title>Environment</title>
-->
  <title>環境</title>

  <para>
<!--
   When <option>#045;&#045;source-server</> option is used,
   <application>pg_rewind</application> also uses the environment variables
   supported by <application>libpq</> (see <xref linkend="libpq-envars">).
-->
<option>--source-server</>オプションを使用する場合、<application>pg_rewind</application>は
<application>libpq</>で利用できる環境変数を使用します(<xref linkend="libpq-envars">を参照)。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <refsect2>
<!--
   <title>How it works</title>
-->
   <title>どうやって動くのか</title>

   <para>
<!--
    The basic idea is to copy all file system-level changes from the source
    cluster to the target cluster:
-->
基本的なアイデアは、同じであることがわかっているブロックを除き、すべてを新しいクラスタから古いクラスタにコピーする、というものです。★原文変更あり
   </para>

   <procedure>
    <step>
     <para>
<!--
      Scan the WAL log of the target cluster, starting from the last
      checkpoint before the point where the source cluster's timeline
      history forked off from the target cluster. For each WAL record,
      record each data block that was touched. This yields a list of all
      the data blocks that were changed in the target cluster, after the
      source cluster forked off.
-->
★原文変更あり
古いクラスタからタイムラインが新しいクラスタで分岐した時点より前の最後のチェックポイントから始めて、古いクラスタのWALログをスキャンしします。
各々のWALレコードについて、変更されたデータブロックを記録します。
これにより、新しいクラスタで分岐した以降に、古いクラスタで変更されたすべてのデータブロックのリストが作成できます。
     </para>
    </step>
    <step>
     <para>
<!--
      Copy all those changed blocks from the source cluster to
      the target cluster, either using direct file system access
      (<option>&#045;-source-pgdata</>) or SQL (<option>&#045;-source-server</>).
-->
★節追加
     </para>
    </step>
    <step>
     <para>
<!--
      Copy all other files such as <filename>pg_clog</filename> and
      configuration files from the source cluster to the target cluster
      (everything except the relation files).
-->
★原文変更あり
<filename>clog</filename>や設定ファイルなど、リレーションファイル以外のすべてのファイルを新しいクラスタから古いクラスタにコピーします。
     </para>
    </step>
    <step>
     <para>
<!--
      Apply the WAL from the source cluster, starting from the checkpoint
      created at failover. (Strictly speaking, <application>pg_rewind</>
      doesn't apply the WAL, it just creates a backup label file that
      makes <productname>PostgreSQL</> start by replaying all WAL from
      that checkpoint forward.)
-->
★原文変更あり
フェイルオーバの際に作られたチェックポイントから始めて、新しいクラスタのWALを適用します。(厳密に言うと、<application>pg_rewind</>はWALの適用はせず、単にバックアップラベルファイルを作るだけです。
それにより、<productname>PostgreSQL</>が起動する時、チェックポイントから始めてすべての必要なWALが適用されます)
     </para>
    </step>
   </procedure>
  </refsect2>
 </refsect1>

</refentry>
