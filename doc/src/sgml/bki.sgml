<!-- doc/src/sgml/bki.sgml -->

<chapter id="bki">
<!--
 <title><acronym>BKI</acronym> Backend Interface</title>
-->
 <title><acronym>BKI</acronym>バックエンドインタフェース</title>

 <para>
<!--
  Backend Interface (<acronym>BKI</acronym>) files are scripts in a
  special language that is understood by the
  <productname>PostgreSQL</productname> backend when running in the
  <quote>bootstrap</quote> mode.  The bootstrap mode allows system catalogs
  to be created and filled from scratch, whereas ordinary SQL commands
  require the catalogs to exist already.
  <acronym>BKI</acronym> files can therefore be used to create the
  database system in the first place.  (And they are probably not
  useful for anything else.)
-->
バックエンドインタフェース（<acronym>BKI</acronym>）ファイルは、<quote>bootstrap</quote>モードで稼動中の<productname>PostgreSQL</productname>で解釈される特殊な言語で記述されたスクリプトです。
普通のSQLコマンドを実行するにはシステムカタログが事前に存在していなければなりませんが、bootstrapモードではシステムカタログを一から作成することができます。
ですから<acronym>BKI</acronym>ファイルはデータベースシステムを初めて作成する時に使用します。
（そしてそれ以外の時にはあまり有効ではありません。）
 </para>

 <para>
<!--
  <application>initdb</application> uses a <acronym>BKI</acronym> file
  to do part of its job when creating a new database cluster.  The
  input file used by <application>initdb</application> is created as
  part of building and installing <productname>PostgreSQL</productname>
  by a program named <filename>genbki.pl</filename>, which reads some
  specially formatted C header files in the <filename>src/include/catalog/</>
  directory of the source tree.  The created <acronym>BKI</acronym> file
  is called <filename>postgres.bki</filename> and is
  normally installed in the
  <filename>share</filename> subdirectory of the installation tree.
-->
<application>initdb</application>は新しいデータベースクラスタを作成する際に、その作業の一部を担わすため<acronym>BKI</acronym>ファイルを使います。
<application>initdb</application>が使う入力ファイルは<productname>PostgreSQL</productname>の構築時に<filename>genbki.pl</filename>というプログラムによって、ソースツリー内の<filename>src/include/catalog/</>にある特別な書式のCのヘッダファイルから作成されます。
作成された<acronym>BKI</acronym>ファイルは<filename>postgres.bki</filename>と呼ばれ、通常インストールツリーの<filename>share</filename>サブディレクトリにインストールされます。
 </para>

 <para>
<!--
  Related information can be found in the documentation for
  <application>initdb</application>.
-->
関連情報は<application>initdb</application>のドキュメントから見付けられます。
 </para>

 <sect1 id="bki-format">
<!--
  <title><acronym>BKI</acronym> File Format</title>
-->
  <title><acronym>BKI</acronym>ファイル形式</title>

  <para>
<!--
   This section describes how the <productname>PostgreSQL</productname>
   backend interprets <acronym>BKI</acronym> files.  This description
   will be easier to understand if the <filename>postgres.bki</filename>
   file is at hand as an example.
-->
本節では<productname>PostgreSQL</productname>のバックエンドがどのようにして<acronym>BKI</acronym>ファイルを解釈するのかを説明します。
例として<filename>postgres.bki</filename>ファイルが手元にあると、説明が一層理解しやすくなるでしょう。
  </para>

  <para>
<!--
   <acronym>BKI</acronym> input consists of a sequence of commands.  Commands are made up
   of a number of tokens, depending on the syntax of the command.
   Tokens are usually separated by whitespace, but need not be if
   there is no ambiguity.  There is no special command separator; the
   next token that syntactically cannot belong to the preceding
   command starts a new one.  (Usually you would put a new command on
   a new line, for clarity.)  Tokens can be certain key words, special
   characters (parentheses, commas, etc.), numbers, or double-quoted
   strings.  Everything is case sensitive.
-->
<acronym>BKI</acronym>の入力は一連のコマンドで構成されます。
コマンドはいくつものトークンから構成されていて、コマンドの構文に依存しています。
トークンは通常空白で分離されていますが、どちらとも解釈されるような曖昧性がなければ必要性ありません。
特別なコマンド区切り文字はありません。
したがって、構文上その前のコマンドに属すことができない次のトークンは新たなコマンドとなります
（通常、わかりやすくするために、新しいコマンドは新しい行に記述します）。
トークンはある一定のキーワードや特別な文字（括弧やカンマなど）、数字、二重引用符で囲まれた文字列などが使用できます。
大文字/小文字は全て区別されます。
  </para>

  <para>
<!--
   Lines starting with <literal>#</literal> are ignored.
-->
<literal>#</literal>で始まる行は無視されます。
  </para>

 </sect1>

 <sect1 id="bki-commands">
<!--
  <title><acronym>BKI</acronym> Commands</title>
-->
  <title><acronym>BKI</acronym>コマンド</title>

  <variablelist>
   <varlistentry>
    <term>
     <literal>create</>
     <replaceable class="parameter">tablename</replaceable>
     <replaceable class="parameter">tableoid</replaceable>
     <optional><literal>bootstrap</></optional>
     <optional><literal>shared_relation</></optional>
     <optional><literal>without_oids</></optional>
     <optional><literal>rowtype_oid</> <replaceable>oid</></optional>
     (<replaceable class="parameter">name1</replaceable> =
     <replaceable class="parameter">type1</replaceable> <optional>,
     <replaceable class="parameter">name2</replaceable> = <replaceable
     class="parameter">type2</replaceable>, ...</optional>)
    </term>

    <listitem>
     <para>
<!--
      Create a table named <replaceable
      class="parameter">tablename</replaceable>, and having the OID
      <replaceable class="parameter">tableoid</replaceable>,
      with the columns given in parentheses.
-->
括弧で与えられた列と、OID <replaceable class="parameter">tableoid</replaceable>を持つ<replaceable class="parameter">tablename</replaceable>というテーブルを作成します。
     </para>

     <para>
<!--
      The following column types are supported directly by
      <filename>bootstrap.c</>: <type>bool</type>,
      <type>bytea</type>, <type>char</type> (1 byte),
      <type>name</type>, <type>int2</type>,
      <type>int4</type>, <type>regproc</type>, <type>regclass</type>,
      <type>regtype</type>, <type>text</type>,
      <type>oid</type>, <type>tid</type>, <type>xid</type>,
      <type>cid</type>, <type>int2vector</type>, <type>oidvector</type>,
      <type>_int4</type> (array), <type>_text</type> (array),
      <type>_oid</type> (array), <type>_char</type> (array),
      <type>_aclitem</type> (array).  Although it is possible to create
      tables containing columns of other types, this cannot be done until
      after <structname>pg_type</> has been created and filled with
      appropriate entries.  (That effectively means that only these
      column types can be used in bootstrapped tables, but non-bootstrap
      catalogs can contain any built-in type.)
-->
次の列型は<filename>bootstrap.c</>で直接サポートされます。
<type>bool</type>、<type>bytea</type>、<type>char</type>（1バイト）、<type>name</type>、<type>int2</type>、<type>int4</type>、<type>regproc</type>、<type>regclass</type>、<type>regtype</type>、<type>text</type>、<type>oid</type>、<type>tid</type>、<type>xid</type>、<type>cid</type>、<type>int2vector</type>、<type>oidvector</type>、<type>_int4</type>（配列）、<type>_text</type>（配列）、<type>_oid</type>（配列）、<type>_char</type>（配列）、<type>_aclitem</type>（配列）。
この他の型を持つテーブルを作成することはできますが、<structname>pg_type</>が完了し適切な項目で埋められるまで完了させることができません。（これらの列型のみブートストラップされたテーブルで使用されますが、非ブートストラップカタログは如何なる組み込み型も含む事があるという事を実際に意味しています。）
     </para>

     <para>
<!--
      When <literal>bootstrap</> is specified,
      the table will only be created on disk; nothing is entered into
      <structname>pg_class</structname>,
      <structname>pg_attribute</structname>, etc, for it.  Thus the
      table will not be accessible by ordinary SQL operations until
      such entries are made the hard way (with <literal>insert</>
      commands).  This option is used for creating
      <structname>pg_class</structname> etc themselves.
-->
<literal>bootstrap</>が指定された場合、テーブルはディスク上に作成されるだけで、<structname>pg_class</structname>や<structname>pg_attribute</structname>などにその項目は登録されません。
したがって、これらの項目が（<literal>insert</>コマンドで）固定化されるまで、普通のSQL操作でこのテーブルにアクセスできません。
このオプションは<structname>pg_class</structname>など自身を作成するために使用されます。
     </para>

     <para>
<!--
      The table is created as shared if <literal>shared_relation</> is
      specified.
      It will have OIDs unless <literal>without_oids</> is specified.
      The table's row type OID (<structname>pg_type</> OID) can optionally
      be specified via the <literal>rowtype_oid</> clause; if not specified,
      an OID is automatically generated for it.  (The <literal>rowtype_oid</>
      clause is useless if <literal>bootstrap</> is specified, but it can be
      provided anyway for documentation.)
-->
<literal>shared_relation</>が指定された場合、テーブルは作成されます。
<literal>without_oids</>が指定されていない限りテーブルはOIDを持ちます。
テーブルの行型OID（<structname>pg_type</> OID）は<literal>rowtype_oid</>句で指定できます。
指定されなければ、OIDは自動的に生成されます。
（<literal>bootstrap</> が指定されていれば、<literal>rowtype_oid</>句は役に立ちません。しかし、文書化のためにともかく指定はできます。）
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>open</> <replaceable class="parameter">tablename</replaceable>
    </term>

    <listitem>
     <para>
<!--
      Open the table named
      <replaceable class="parameter">tablename</replaceable>
      for insertion of data.  Any currently open table is closed.
-->
データを挿入するために<replaceable class="parameter">tablename</replaceable>と名前が付けられたテーブルを開きます。
現在開いているテーブルは閉じられます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>close</> <optional><replaceable class="parameter">tablename</replaceable></optional>
    </term>

    <listitem>
     <para>
<!--
      Close the open table.  The name of the table can be given as a
      cross-check, but this is not required.
-->
開いているテーブルを閉じます。
テーブル名は照合用に指定可能ですが、必須ではありません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>insert</> <optional><literal>OID =</> <replaceable class="parameter">oid_value</replaceable></optional> <literal>(</> <replaceable class="parameter">value1</replaceable> <replaceable class="parameter">value2</replaceable> ... <literal>)</>
    </term>

    <listitem>
     <para>
<!--
      Insert a new row into the open table using <replaceable
      class="parameter">value1</replaceable>, <replaceable
      class="parameter">value2</replaceable>, etc., for its column
      values and <replaceable
      class="parameter">oid_value</replaceable> for its OID.  If
      <replaceable class="parameter">oid_value</replaceable> is zero
      (0) or the clause is omitted, and the table has OIDs, then the
      next available OID is assigned.
-->
<replaceable class="parameter">value1</replaceable>や<replaceable class="parameter">value2</replaceable>などを列の値として、<replaceable class="parameter">oid_value</replaceable>をOIDとし、開いているテーブルに行を挿入します。
もし<replaceable class="parameter">oid_value</replaceable>がゼロ（0）、もしくは句が省略され、テーブルがOIDを所有していれば、次の有効なOIDが割り当てられます。
     </para>

     <para>
<!--
      NULL values can be specified using the special key word
      <literal>_null_</literal>.  Values containing spaces must be
      double quoted.
-->
NULL値は特別なキーワード、<literal>_null_</literal>によって指定できます。
空白を含む値は二重引用符で囲まなければなりません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>declare</> <optional><literal>unique</></optional>
     <literal>index</> <replaceable class="parameter">indexname</replaceable>
     <replaceable class="parameter">indexoid</replaceable>
     <literal>on</> <replaceable class="parameter">tablename</replaceable>
     <literal>using</> <replaceable class="parameter">amname</replaceable>
     <literal>(</> <replaceable class="parameter">opclass1</replaceable>
     <replaceable class="parameter">name1</replaceable>
     <optional>, ...</optional> <literal>)</>
    </term>

    <listitem>
     <para>
<!--
      Create an index named <replaceable
      class="parameter">indexname</replaceable>, having OID
      <replaceable class="parameter">indexoid</replaceable>,
      on the table named
      <replaceable class="parameter">tablename</replaceable>, using the
      <replaceable class="parameter">amname</replaceable> access
      method.  The fields to index are called <replaceable
      class="parameter">name1</replaceable>, <replaceable
      class="parameter">name2</replaceable> etc., and the operator
      classes to use are <replaceable
      class="parameter">opclass1</replaceable>, <replaceable
      class="parameter">opclass2</replaceable> etc., respectively.
      The index file is created and appropriate catalog entries are
      made for it, but the index contents are not initialized by this command.
-->
<replaceable class="parameter">amname</replaceable>アクセスメソッドを使用して、<replaceable class="parameter">tablename</replaceable>と名付けられたテーブル上に、OID <replaceable class="parameter">indexoid</replaceable>を所有する、<replaceable class="parameter">indexname</replaceable>という名前のインデックスを作成します。
インデックスが付けられるフィールドは、<replaceable class="parameter">name1</replaceable>、<replaceable class="parameter">name2</replaceable>など、そして使用される演算子クラスは<replaceable class="parameter">opclass1</replaceable>、<replaceable class="parameter">opclass2</replaceable>などとそれぞれ呼ばれます。
このインデックスファイルは作成され、適切なカタログ項目が作成されますが、このコマンドではインデックスの内容の初期化を行いません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>declare toast</>
     <replaceable class="parameter">toasttableoid</replaceable>
     <replaceable class="parameter">toastindexoid</replaceable>
     <literal>on</> <replaceable class="parameter">tablename</replaceable>
    </term>

    <listitem>
     <para>
<!--
      Create a TOAST table for the table named
      <replaceable class="parameter">tablename</replaceable>.
      The TOAST table is assigned OID
      <replaceable class="parameter">toasttableoid</replaceable>
      and its index is assigned OID
      <replaceable class="parameter">toastindexoid</replaceable>.
      As with <literal>declare index</>, filling of the index
      is postponed.
-->
<replaceable class="parameter">tablename</replaceable>という名前のテーブル用のTOASTテーブルを作成します。
このTOASTテーブルはOIDとして<replaceable class="parameter">toasttableoid</replaceable>が割り当てられ、そのインデックスはOIDとして<replaceable class="parameter">toastindexoid</replaceable>が割り当てられます。
<literal>declare index</>と同様、インデックスの作成は遅延されます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>build indices</></term>

    <listitem>
     <para>
<!--
      Fill in the indices that have previously been declared.
-->
前に宣言されたインデックスを作成します。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

 </sect1>

 <sect1 id="bki-structure">
<!--
  <title>Structure of the Bootstrap <acronym>BKI</acronym> File</title>
-->
  <title><acronym>BKI</acronym>ファイルのブートストラップの構成</title>

  <para>
<!--
   The <literal>open</> command cannot be used until the tables it uses
   exist and have entries for the table that is to be opened.
   (These minimum tables are <structname>pg_class</>,
   <structname>pg_attribute</>, <structname>pg_proc</>, and
   <structname>pg_type</>.)   To allow those tables themselves to be filled,
   <literal>create</> with the <literal>bootstrap</> option implicitly opens
   the created table for data insertion.
-->
<literal>open</>コマンドは、テーブルが、使用するテーブルが存在し、開かれるテーブルに対しエントリを所有するまで使用できません。（これら最小限度のテーブルは、<structname>pg_class</>、<structname>pg_attribute</>、<structname>pg_proc</>、および<structname>pg_type</>です。）これらのテーブル自体が充填されるようにするには、<literal>bootstrap</>オプションを伴った<literal>create</>が明示的にデータの挿入のために作成されたテーブルを開きます。
  </para>

  <para>
<!--
   Also, the <literal>declare index</> and <literal>declare toast</>
   commands cannot be used until the system catalogs they need have been
   created and filled in.
-->
また、必要とするシステムカタログが作成され、値が設定されるまで、<literal>declare index</>および<literal>declare toast</>コマンドは使用できません。
  </para>

  <para>
<!--
   Thus, the structure of the <filename>postgres.bki</filename> file has to
   be:
-->
従い、<filename>postgres.bki</filename>の構造は以下でなければなりません。
   <orderedlist>
    <listitem>
     <para>
      1つの重要なテーブルを<literal>create bootstrap</><!-- one of the critical tables-->
     </para>
    </listitem>
    <listitem>
     <para>
      少なくとも重要なテーブルを記述するデータを<literal>insert</><!-- data describing at least the critical tables-->
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>close</>
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      Repeat for the other critical tables.
-->
      その他の重要テーブルに対して反復。
     </para>
    </listitem>
    <listitem>
     <para>
      重要でないテーブルを（<literal>bootstrap</>無しで）<literal>create</><!-- (without <literal>bootstrap</>) a noncritical table-->
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>open</>
     </para>
    </listitem>
    <listitem>
     <para>
      求められるデータの<literal>insert</><!-- desired data-->
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>close</>
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      Repeat for the other noncritical tables.
-->
     その他の重要でないテーブルに対して反復。
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      Define indexes and toast tables.
-->
      インデックスおよびTOASTテーブルの定義。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>build indices</>
     </para>
    </listitem>
   </orderedlist>
  </para>

  <para>
<!--
   There are doubtless other, undocumented ordering dependencies.
-->
他にも確かに、ドキュメント化されていない順序に関する依存性があります。
  </para>
 </sect1>

 <sect1 id="bki-example">
<!--
  <title>Example</title>
-->
  <title>例</title>

  <para>
<!--
   The following sequence of commands will create the
   table <literal>test_table</literal> with OID 420, having two columns
   <literal>cola</literal> and <literal>colb</literal> of type
   <type>int4</type> and <type>text</type>, respectively, and insert
   two rows into the table:
-->
次の一連のコマンドは、それぞれ<type>int4</type>型と<type>text</type>型の２つの列、<literal>cola</literal>と<literal>colb</literal>を持ち、OID 420 が付いた<literal>test_table</literal>テーブルを作成し、そして２つの行をテーブルに挿入します。
<programlisting>
create test_table 420 (cola = int4, colb = text)
open test_table
insert OID=421 ( 1 "value1" )
insert OID=422 ( 2 _null_ )
close test_table
</programlisting>
  </para>
 </sect1>
</chapter>
