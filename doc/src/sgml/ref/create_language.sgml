<!--
doc/src/sgml/ref/create_language.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATELANGUAGE">
 <indexterm zone="sql-createlanguage">
  <primary>CREATE LANGUAGE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE LANGUAGE</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE LANGUAGE</refname>
<!--
  <refpurpose>define a new procedural language</refpurpose>
-->
<refpurpose>新しい手続き言語を定義する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ OR REPLACE ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">name</replaceable>
CREATE [ OR REPLACE ] [ TRUSTED ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">name</replaceable>
    HANDLER <replaceable class="parameter">call_handler</replaceable> [ INLINE <replaceable class="parameter">inline_handler</replaceable> ] [ VALIDATOR <replaceable>valfunction</replaceable> ]
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-createlanguage-description">
<!--
  <title>Description</title>
-->
<title>説明</title>

  <para>
<!--
   <command>CREATE LANGUAGE</command> registers a new
   procedural language with a <productname>PostgreSQL</productname>
   database.  Subsequently, functions and trigger procedures can be
   defined in this new language.
-->
<command>CREATE LANGUAGE</command>は新しい手続き言語を<productname>PostgreSQL</productname>データベースに登録します。
これにより、関数とトリガプロシージャをその新しい言語で定義できるようになります。
  </para>

  <note>
   <para>
<!--
    As of <productname>PostgreSQL</productname> 9.1, most procedural
    languages have been made into <quote>extensions</>, and should
    therefore be installed with <xref linkend="sql-createextension">
    not <command>CREATE LANGUAGE</command>.  Direct use of
    <command>CREATE LANGUAGE</command> should now be confined to
    extension installation scripts.  If you have a <quote>bare</>
    language in your database, perhaps as a result of an upgrade,
    you can convert it to an extension using
    <literal>CREATE EXTENSION <replaceable>langname</> FROM
    unpackaged</literal>.
-->
<productname>PostgreSQL</productname> 9.1から、ほとんどの手続き言語は<quote>拡張</>としてまとめられました。
したがって<command>CREATE LANGUAGE</command>ではなく<xref linkend="sql-createextension">を使用してインストールすべきです。
<command>CREATE LANGUAGE</command>を直接使用することは拡張インストール用スクリプトに限定されなければなりません。
おそらくアップグレードの結果<quote>むきだしの</>言語がデータベース内に存在する場合、<literal>CREATE EXTENSION <replaceable>langname</> FROM unpackaged</literal>を用いて拡張に変換することができます。
   </para>
  </note>

  <para>
<!--
   <command>CREATE LANGUAGE</command> effectively associates the
   language name with handler function(s) that are responsible for executing
   functions written in the language.  Refer to <xref linkend="plhandler">
   for more information about language handlers.
-->
<command>CREATE LANGUAGE</command>は、言語名とその言語で作成された関数の実行に責任を持つハンドラ関数を関連付けます。
言語ハンドラについての詳細は、<xref linkend="plhandler">を参照してください。
  </para>

  <para>
<!--
   There are two forms of the <command>CREATE LANGUAGE</command> command.
   In the first form, the user supplies just the name of the desired
   language, and the <productname>PostgreSQL</productname> server consults
   the <link linkend="catalog-pg-pltemplate"><structname>pg_pltemplate</structname></link>
   system catalog to determine the correct parameters.  In the second form,
   the user supplies the language parameters along with the language name.
   The second form can be used to create a language that is not defined in
   <structname>pg_pltemplate</>, but this approach is considered obsolescent.
-->
<command>CREATE LANGUAGE</command>コマンドには2種類の構文があります。
最初の構文は、ユーザは必要な言語の名前のみを単に指定するものです。
この場合、<productname>PostgreSQL</productname>サーバは<link linkend="catalog-pg-pltemplate"><structname>pg_pltemplate</structname></link>システムカタログを参照し、正しいパラメータを決定します。
2番目の構文では、ユーザは言語名の他に言語のパラメータも入力します。
この形式で、<structname>pg_pltemplate</>で定義されていない言語を作成することができますが、この手法は廃棄予定です。
  </para>

  <para>
<!--
   When the server finds an entry in the <structname>pg_pltemplate</> catalog
   for the given language name, it will use the catalog data even if the
   command includes language parameters.  This behavior simplifies loading of
   old dump files, which are likely to contain out-of-date information
   about language support functions.
-->
指定された言語名に対応する<structname>pg_pltemplate</>カタログの項目をサーバが見つけると、コマンドに言語のパラメータが含まれていたとしてもカタログのデータを使用します。
この動作により、言語のサポート関数に関する古すぎる情報を含む、古いダンプファイルからの読み込みが簡単になります。
  </para>

  <para>
<!--
   Ordinarily, the user must have the
   <productname>PostgreSQL</productname> superuser privilege to
   register a new language.  However, the owner of a database can register
   a new language within that database if the language is listed in
   the <structname>pg_pltemplate</structname> catalog and is marked
   as allowed to be created by database owners (<structfield>tmpldbacreate</>
   is true).  The default is that trusted languages can be created
   by database owners, but this can be adjusted by superusers by modifying
   the contents of <structname>pg_pltemplate</structname>.
   The creator of a language becomes its owner and can later
   drop it, rename it, or assign it to a new owner.
-->
通常、新しい言語を登録するには、ユーザは<productname>PostgreSQL</productname>のスーパーユーザ権限を持たなければなりません。
しかし、言語が<structname>pg_pltemplate</structname>カタログ内に記載され、データベース所有者による作成可能印（<structfield>tmpldbacreate</>が真）が付いていれば、データベース所有者はそのデータベース内に新しい言語を登録することができます。
デフォルトで、信頼された言語はデータベース所有者による作成ができます。
しかし、これはスーパーユーザによる<structname>pg_pltemplate</structname>の変更により調整できます。
言語作成者が言語の所有者になり、後で削除したり、名前を変えたり、別の所有者を割り当てたりすることができます。
  </para>

  <para>
<!--
   <command>CREATE OR REPLACE LANGUAGE</command> will either create a
   new language, or replace an existing definition.  If the language
   already exists, its parameters are updated according to the values
   specified or taken from <structname>pg_pltemplate</structname>,
   but the language's ownership and permissions settings do not change,
   and any existing functions written in the language are assumed to still
   be valid.  In addition to the normal privilege requirements for creating
   a language, the user must be superuser or owner of the existing language.
   The <literal>REPLACE</> case is mainly meant to be used to
   ensure that the language exists.  If the language has a
   <structname>pg_pltemplate</structname> entry then <literal>REPLACE</>
   will not actually change anything about an existing definition, except in
   the unusual case where the <structname>pg_pltemplate</structname> entry
   has been modified since the language was created.
-->
<command>CREATE OR REPLACE LANGUAGE</command>は新しい言語を作成、または、既存の定義を置き換えます。
言語がすでに存在する場合、パラメータは指定された値または<structname>pg_pltemplate</structname>から取り出された値にしたがって更新されますが、言語の所有権と権限に関する設定は変更されません。
また、その言語で作成された既存の関数も依然として有効であるものとみなされます。
言語を作成する際に通常要求される権限に加え、ユーザはスーパーユーザまたは既存言語の所有者でなければなりません。
<literal>REPLACE</>の場合、主に言語が存在することを確認するために使用することを意味します。
その言語が<structname>pg_pltemplate</structname>項目を持つ場合、<literal>REPLACE</>は既存の定義を実際にはまったく変更しません。
ただし、言語が作成された後で<structname>pg_pltemplate</structname>項目が変更されたという通常ではない場合は例外です。
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-parameters">
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

   <variablelist>
    <varlistentry>
     <term><literal>TRUSTED</literal></term>

     <listitem>
<!--
      <para><literal>TRUSTED</literal> specifies that the language does
       not grant access to data that the user would not otherwise
       have.  If this key word is omitted
       when registering the language, only users with the
       <productname>PostgreSQL</productname> superuser privilege can
       use this language to create new functions.
-->
<para><literal>TRUSTED</literal>は、他の方法ではユーザがアクセスできないデータに対しては、その言語でのアクセスが許されないことを指定します。
言語の登録時にこのキーワードを省略すると、<productname>PostgreSQL</productname>のスーパーユーザ権限を持つユーザのみが、この言語を使って新しい関数を作れるようになります。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>PROCEDURAL</literal></term>

     <listitem>
      <para>
<!--
       This is a noise word.
-->
これには意味はありません。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">name</replaceable></term>

     <listitem>
      <para>
<!--
       The name of the new procedural language.
       The name must be unique among the languages in the database.
-->
新しい手続き言語の名前です。
この名前はデータベースの言語の中で一意でなければなりません。
      </para>

      <para>
<!--
       For backward compatibility, the name can be enclosed by single
       quotes.
-->
後方互換を保持するため、この名前を単一引用符で囲むこともできます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>HANDLER</literal> <replaceable class="parameter">call_handler</replaceable></term>

     <listitem>
<!--
      <para><replaceable class="parameter">call_handler</replaceable> is
       the name of a previously registered function that will be
       called to execute the procedural language's functions.  The call
       handler for a procedural language must be written in a compiled
       language such as C with version 1 call convention and
       registered with <productname>PostgreSQL</productname> as a
       function taking no arguments and returning the
       <type>language_handler</type> type, a placeholder type that is
       simply used to identify the function as a call handler.
-->
<para><replaceable class="parameter">call_handler</replaceable>は手続き言語の関数を実行するために呼び出される関数の名前で、事前に登録しておく必要があります。
このハンドラは、Version-1呼び出し規約に則って、C言語のようなコンパイル言語で書かれている必要があります。また、引数を取らず<type>language_handler</type>型を返す関数として、<productname>PostgreSQL</productname>に登録されていなければなりません。
<type>language_handler</type>型は、単に関数を呼び出しハンドラとして識別するのに使用するプレースホルダ型です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>INLINE</literal> <replaceable class="parameter">inline_handler</replaceable></term>

     <listitem>
<!--
      <para><replaceable class="parameter">inline_handler</replaceable> is the
       name of a previously registered function that will be called
       to execute an anonymous code block
       (<xref linkend="sql-do"> command)
       in this language.
       If no <replaceable class="parameter">inline_handler</replaceable>
       function is specified, the language does not support anonymous code
       blocks.
       The handler function must take one argument of
       type <type>internal</type>, which will be the <command>DO</> command's
       internal representation, and it will typically return
       <type>void</>.  The return value of the handler is ignored.
-->
<para><replaceable class="parameter">inline_handler</replaceable>はこの言語で無名コードブロックを実行（<xref linkend="sql-do">コマンド）するために呼び出される、事前に登録された関数の名前です。
<replaceable class="parameter">inline_handler</replaceable>関数が指定されない場合、その言語では無名コードブロックをサポートしません。
このハンドラ関数は、<command>DO</>コマンドの内部表現となる<type>internal</type>型の引数を1つ取らなければならず、また、通常<type>void</>を返します。
ハンドラの戻り値は無視されます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>VALIDATOR</literal> <replaceable class="parameter">valfunction</replaceable></term>

     <listitem>
<!--
      <para><replaceable class="parameter">valfunction</replaceable> is the
       name of a previously registered function that will be called
       when a new function in the language is created, to validate the
       new function.
       If no
       validator function is specified, then a new function will not
       be checked when it is created.
       The validator function must take one argument of
       type <type>oid</type>, which will be the OID of the
       to-be-created function, and will typically return <type>void</>.
-->
<para><replaceable class="parameter">valfunction</replaceable>は、事前に登録された検証用関数の名前です。新しい関数が当該言語で作成された場合、その関数を検証するために呼び出されます。 
検証用関数が指定されていない場合、新しい関数は作成時にチェックされません。
検証用関数は、<type>oid</type>型の引数を1つ取る必要があります。
この引数は作成される関数のOIDになります。
また、通常<type>void</>型を返します。
      </para>

      <para>
<!--
       A validator function would typically inspect the function body
       for syntactical correctness, but it can also look at other
       properties of the function, for example if the language cannot
       handle certain argument types.  To signal an error, the
       validator function should use the <function>ereport()</function>
       function.  The return value of the function is ignored.
-->
検証用関数は、通常、関数本体が構文上正しいかどうかを検査するために使用されます。
しかし、それだけでなく、関数のプロパティも検査可能です。例えば、その言語が処理できない特定のデータ型が引数に含まれていないかなどがチェックできます。
エラーを通知するには、検証用関数で<function>ereport()</function>関数を使用すべきです。
関数の戻り値は無視されます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

  <para>
<!--
   The <literal>TRUSTED</> option and the support function name(s) are
   ignored if the server has an entry for the specified language
   name in <structname>pg_pltemplate</>.
-->
指定した言語名に対応する<structname>pg_pltemplate</>の項目がサーバにある場合、<literal>TRUSTED</>オプションとサポート関数名は無視されます。
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-notes">
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   The <xref linkend="app-createlang"> program is a simple wrapper around
   the <command>CREATE LANGUAGE</> command.  It eases
   installation of procedural languages from the shell command line.
-->
<xref linkend="app-createlang">は<command>CREATE LANGUAGE</>に対する単純なラッパプログラムです。
これを使用して簡単にシェルコマンドラインから手続き言語をインストールすることができます。
  </para>

  <para>
<!--
   Use <xref linkend="sql-droplanguage">, or better yet the <xref
   linkend="app-droplang"> program, to drop procedural languages.
-->
手続き言語を削除するには、<xref linkend="sql-droplanguage">、または<xref linkend="app-droplang">を使用してください（後者を勧めます）。
  </para>

  <para>
<!--
   The system catalog <classname>pg_language</classname> (see <xref
   linkend="catalog-pg-language">) records information about the
   currently installed languages.  Also, <command>createlang</command>
   has an option to list the installed languages.
-->
システムカタログ<classname>pg_language</classname>（ <xref linkend="catalog-pg-language">参照）には、現在インストールされている言語に関する情報が記録されています。
また、<command>createlang</command>にはインストールされた言語を列挙するオプションがあります。
  </para>

  <para>
<!--
   To create functions in a procedural language, a user must have the
   <literal>USAGE</literal> privilege for the language.  By default,
   <literal>USAGE</> is granted to <literal>PUBLIC</> (i.e., everyone)
   for trusted languages.  This can be revoked if desired.
-->
手続き言語で関数を作成するには、ユーザはその言語に対する<literal>USAGE</literal>権限を持たなければなりません。
デフォルトでは、信頼された言語については<literal>PUBLIC</>に（つまり全員に）<literal>USAGE</literal>が付与されています。
これは必要に応じて取り消すことができます。
  </para>

  <para>
<!--
   Procedural languages are local to individual databases.
   However, a language can be installed into the <literal>template1</literal>
   database, which will cause it to be available automatically in
   all subsequently-created databases.
-->
手続き言語は各データベースに局所的です。
しかし、言語を<literal>template1</literal>データベースにインストールすることができます。
この場合、その後に作成されたすべてのデータベースで自動的にその言語は使用できるようになります。
  </para>

  <para>
<!--
   The call handler function, the inline handler function (if any),
   and the validator function (if any)
   must already exist if the server does not have an entry for the language
   in <structname>pg_pltemplate</>.  But when there is an entry,
   the functions need not already exist;
   they will be automatically defined if not present in the database.
   (This might result in <command>CREATE LANGUAGE</> failing, if the
   shared library that implements the language is not available in
   the installation.)
-->
呼び出しハンドラ関数とインラインハンドラ関数（もしあれば）、検証関数（もしあれば）は、サーバが<structname>pg_pltemplate</>内にその言語に関する項目を持っていない場合には、存在しなければなりません。
しかし、その項目があったとしても、関数がすでに存在しているとは限りません。
データベース内に存在していなければ自動的に定義されます。
（言語を実装する共有ライブラリがインストレーションで利用できない場合、これにより<command>CREATE LANGUAGE</>が失敗する可能性があります。）
  </para>

  <para>
<!--
   In <productname>PostgreSQL</productname> versions before 7.3, it was
   necessary to declare handler functions as returning the placeholder
   type <type>opaque</>, rather than <type>language_handler</>.
   To support loading
   of old dump files, <command>CREATE LANGUAGE</> will accept a function
   declared as returning <type>opaque</>, but it will issue a notice and
   change the function's declared return type to <type>language_handler</>.
-->
<productname>PostgreSQL</productname> 7.3より前のバージョンでは、ハンドラ関数が返すプレースホルダ型を<type>language_handler</>型ではなく<type>opaque</>型と宣言する必要がありました。
古いダンプファイルのロードをサポートするために、<command>CREATE LANGUAGE</>は<type>opaque</>型を返すと宣言された関数を受け入れます。
しかし、注意を促すメッセージを表示し、宣言された関数の戻り値型を<type>language_handler</>に変換します。
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-examples">
<!--
  <title>Examples</title>
-->
<title>例</title>

  <para>
<!--
   The preferred way of creating any of the standard procedural languages
   is just:
-->
標準的な手続き言語を作成する推奨方法は単に以下のように行うことです。
<programlisting>
CREATE LANGUAGE plperl;
</programlisting>
  </para>

  <para>
<!--
   For a language not known in the <structname>pg_pltemplate</> catalog, a
   sequence such as this is needed:
-->
<structname>pg_pltemplate</>カタログ内に存在しない言語では、以下のような処理が必要です。
<programlisting>
CREATE FUNCTION plsample_call_handler() RETURNS language_handler
    AS '$libdir/plsample'
    LANGUAGE C;
CREATE LANGUAGE plsample
    HANDLER plsample_call_handler;
</programlisting></para>
 </refsect1>

 <refsect1 id="sql-createlanguage-compat">
<!--
  <title>Compatibility</title>
-->
<title>互換性</title>

  <para>
<!--
   <command>CREATE LANGUAGE</command> is a
   <productname>PostgreSQL</productname> extension.
-->
<command>CREATE LANGUAGE</command>は<productname>PostgreSQL</productname>の拡張です。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterlanguage"></member>
   <member><xref linkend="sql-createfunction"></member>
   <member><xref linkend="sql-droplanguage"></member>
   <member><xref linkend="sql-grant"></member>
   <member><xref linkend="sql-revoke"></member>
   <member><xref linkend="app-createlang"></member>
   <member><xref linkend="app-droplang"></member>
  </simplelist>
 </refsect1>
</refentry>
