<!-- doc/src/sgml/runtime.sgml -->

<chapter id="runtime">
<!--
 <title>Server Setup and Operation</title>
-->
 <title>サーバの準備と運用</title>

 <para>
<!--
  This chapter discusses how to set up and run the database server,
  and its interactions with the operating system.
-->
本章では、データベースサーバの設定と実行方法、そしてオペレーティングシステムとの相互作用について説明します。
 </para>

 <para>
<!--
  The directions in this chapter assume that you are working with
  plain <productname>PostgreSQL</productname> without any additional
  infrastructure, for example a copy that you built from source
  according to the directions in the preceding chapters.
  If you are working with a pre-packaged or vendor-supplied
  version of <productname>PostgreSQL</productname>, it is likely that
  the packager has made special provisions for installing and starting
  the database server according to your system's conventions.
  Consult the package-level documentation for details.
-->
本章で説明する手順は、追加の基盤を必要とせずに、単純な<productname>PostgreSQL</productname>を使用していることを前提としています。例えば、前の章で説明した手順に従ってソースからビルドしてコピーした等です。
<productname>PostgreSQL</productname>のパッケージ化された版またはベンダ提供版で作業している場合は、パッケージャがシステムの規約に従ってデータベースサーバをインストールし、開始するための特別な準備をしている場合があります。
詳細についてはパッケージレベルのドキュメントを参照してください。
 </para>

 <sect1 id="postgres-user">
<!--
  <title>The <productname>PostgreSQL</productname> User Account</title>
-->
  <title><productname>PostgreSQL</productname>ユーザアカウント</title>

  <indexterm>
   <primary>postgres user</primary>
  </indexterm>
  <indexterm>
   <primary>postgresユーザ</primary>
  </indexterm>

  <para>
<!--
   As with any server daemon that is accessible to the outside world,
   it is advisable to run <productname>PostgreSQL</productname> under a
   separate user account. This user account should only own the data
   that is managed by the server, and should not be shared with other
   daemons. (For example, using the user <literal>nobody</literal> is a bad
   idea.) In particular, it is advisable that this user account not own
   the <productname>PostgreSQL</productname> executable files, to ensure
   that a compromised server process could not modify those executables.
-->
外部へアクセスできるサーバデーモンと同じように、<productname>PostgreSQL</productname>を独立したユーザアカウントで実行することをお勧めします。
このユーザアカウントは、サーバによって管理されるデータのみを所有する必要があります。
また、他のデーモンとアカウントを共有しない方が良いです。
（例えば、<literal>nobody</literal>ユーザの使用はお勧めできません。）
このユーザによって所有される実行プログラムをインストールすることも好ましくありません。
特に、侵害されたサーバプロセスがこれらの実行可能ファイルを変更できないようにするために、このユーザアカウントは、<productname>PostgreSQL</productname>実行可能ファイルを所有しないことをお勧めします。
  </para>

  <para>
<!--
   Pre-packaged versions of <productname>PostgreSQL</productname> will
   typically create a suitable user account automatically during
   package installation.
-->
パッケージ化された版の<productname>PostgreSQL</productname>は、通常、パッケージのインストール中に自動的に適切なユーザアカウントを作成します。
  </para>

  <para>
<!--
   To add a Unix user account to your system, look for a command
   <command>useradd</command> or <command>adduser</command>. The user
   name <systemitem>postgres</systemitem> is often used, and is assumed
   throughout this book, but you can use another name if you like.
-->
システムにUnixのユーザアカウントを追加するためには、コマンド<command>useradd</command>か<command>adduser</command>を使用してください。
<systemitem>postgres</systemitem>というユーザ名がよく使われ、本書全体でも使用していますが、好みの名前を使用しても構いません。
  </para>
 </sect1>

 <sect1 id="creating-cluster">
<!--
  <title>Creating a Database Cluster</title>
-->
  <title>データベースクラスタの作成</title>

  <indexterm>
   <primary>database cluster</primary>
  </indexterm>
  <indexterm>
   <primary>データベースクラスタ</primary>
  </indexterm>

  <indexterm>
   <primary>data area</primary>
   <see>database cluster</see>
  </indexterm>
  <indexterm>
   <primary>データ領域</primary>
   <see>データベースクラスタ</see>
  </indexterm>

  <para>
<!--
   Before you can do anything, you must initialize a database storage
   area on disk. We call this a <firstterm>database cluster</firstterm>.
   (The <acronym>SQL</acronym> standard uses the term catalog cluster.) A
   database cluster is a collection of databases that is managed by a
   single instance of a running database server. After initialization, a
   database cluster will contain a database named <literal>postgres</literal>,
   which is meant as a default database for use by utilities, users and third
   party applications.  The database server itself does not require the
   <literal>postgres</literal> database to exist, but many external utility
   programs assume it exists.  There are two more databases created within
   each cluster during initialization, named <literal>template1</literal>
   and <literal>template0</literal>.  As the names suggest, these will be
   used as templates for subsequently-created databases; they should not be
   used for actual work.  (See <xref linkend="managing-databases"/> for
   information about creating new databases within a cluster.)
-->
まず最初に、ディスク上にデータベース格納領域を初期化する必要があります。
この格納領域を<firstterm>データベースクラスタ</firstterm>と呼びます。（標準<acronym>SQL</acronym>ではカタログクラスタという用語が使用されています）。
データベースクラスタはデータベースの集合で、稼働しているデータベースサーバのただ一つのインスタンスを通して管理されます。
初期化が終わると、データベースクラスタには<literal>postgres</literal>という名前のデータベースが含まれています。
このデータベースは、ユーティリティ、ユーザ、サードパーティ製アプリケーションが使用するデフォルトデータベースになります。
データベースサーバ自身はこの<literal>postgres</literal>データベースの存在を必要としていませんが、多くの外部ユーティリティはその存在を想定しています。
初期化中に他にも<literal>template1</literal>と<literal>template0</literal>という2つのデータベースが各クラスタ内に作成されます。
その名前から推測できるように、これはその後に作成されるデータベースのテンプレートとして使われます。
したがって、実際の作業に使用しない方がよいです。
（クラスタ内における新しいデータベースの作成については<xref linkend="managing-databases"/>を参照してください。）
  </para>

  <para>
<!--
   In file system terms, a database cluster is a single directory
   under which all data will be stored. We call this the <firstterm>data
   directory</firstterm> or <firstterm>data area</firstterm>. It is
   completely up to you where you choose to store your data.  There is no
   default, although locations such as
   <filename>/usr/local/pgsql/data</filename> or
   <filename>/var/lib/pgsql/data</filename> are popular.
   The data directory must be initialized before being used, using the program
   <xref linkend="app-initdb"/><indexterm><primary>initdb</primary></indexterm>
   which is installed with <productname>PostgreSQL</productname>.
-->
ファイルシステムの観点から見ると、データベースクラスタというのは、すべてのデータが格納される1つのディレクトリということになります。
これは<firstterm>データディレクトリ</firstterm>もしくは<firstterm>データ領域</firstterm>と呼ばれます。
どこにデータを格納するかは完全にユーザの自由です。
特にデフォルトの領域はありませんが、一般的によく使われるのは<filename>/usr/local/pgsql/data</filename>や<filename>/var/lib/pgsql/data</filename>です。
データディレクトリは、使用前に<productname>PostgreSQL</productname>と一緒にインストールされるコマンド<xref linkend="app-initdb"/><indexterm><primary>initdb</primary></indexterm>を使用して初期化する必要があります。
  </para>

  <para>
<!--
   If you are using a pre-packaged version
   of <productname>PostgreSQL</productname>, it may well have a specific
   convention for where to place the data directory, and it may also
   provide a script for creating the data directory.  In that case you
   should use that script in preference to
   running <command>initdb</command> directly.
   Consult the package-level documentation for details.
-->
パッケージ化された版の<productname>PostgreSQL</productname>を使用している場合は、データディレクトリを配置する場所について特別な規則がある場合があります。
また、データディレクトリを作成するためのスクリプトが提供されている場合もあります。
その場合は、<command>initdb</command>を直接実行するのではなくそのスクリプトを使用する必要があります。
詳細についてはパッケージレベルのドキュメントを参照してください。
  </para>

  <para>
<!--
   To initialize a database cluster manually,
   run <command>initdb</command> and specify the desired
   file system location of the database cluster with the
   <option>-D</option> option, for example:
-->
データベースクラスタを手動で初期化するには、<option>-D</option>オプションを使用してデータベースクラスタのファイルシステムの場所を指定し<command>initdb</command>を実行します。
例えば次のようにします。
<screen>
<prompt>$</prompt> <userinput>initdb -D /usr/local/pgsql/data</userinput>
</screen>
<!--
   Note that you must execute this command while logged into the
   <productname>PostgreSQL</productname> user account, which is
   described in the previous section.
-->
このコマンドは、前節で説明した<productname>PostgreSQL</productname>ユーザアカウントでログインしている間に実行する必要があることに注意してください。
  </para>

  <tip>
   <para>
<!--
    As an alternative to the <option>-D</option> option, you can set
    the environment variable <envar>PGDATA</envar>.
-->
<option>-D</option>オプションを使う代わりに<envar>PGDATA</envar>環境変数を設定することもできます。
    <indexterm><primary><envar>PGDATA</envar></primary></indexterm>
   </para>
  </tip>

  <para>
<!--
   Alternatively, you can run <command>initdb</command> via
   the <xref linkend="app-pg-ctl"/>
   program<indexterm><primary>pg_ctl</primary></indexterm> like so:
-->
他にも以下のように<xref linkend="app-pg-ctl"/><indexterm><primary>pg_ctl</primary></indexterm>プログラム経由で<command>initdb</command>を実行することができます。
<screen>
<prompt>$</prompt> <userinput>pg_ctl -D /usr/local/pgsql/data initdb</userinput>
</screen>
<!--
   This may be more intuitive if you are
   using <command>pg_ctl</command> for starting and stopping the
   server (see <xref linkend="server-start"/>), so
   that <command>pg_ctl</command> would be the sole command you use
   for managing the database server instance.
-->
<command>pg_ctl</command>がデータベースサーバインスタンスの管理に使用する単一のコマンドになりますので、サーバの起動や停止に<command>pg_ctl</command>を使用している場合(<xref linkend="server-start"/>参照)はこちらの方がより直感的かもしれません。
  </para>

  <para>
<!--
   <command>initdb</command> will attempt to create the directory you
   specify if it does not already exist.  Of course, this will fail if
   <command>initdb</command> does not have permissions to write in the
   parent directory.  It's generally recommendable that the
   <productname>PostgreSQL</productname> user own not just the data
   directory but its parent directory as well, so that this should not
   be a problem.  If the desired parent directory doesn't exist either,
   you will need to create it first, using root privileges if the
   grandparent directory isn't writable.  So the process might look
   like this:
-->
もし指定したディレクトリが存在しない場合は、<command>initdb</command>はその新しいディレクトリを作成しようとします。
もちろん、その親ディレクトリに書き込み権限がない場合<command>initdb</command>は失敗します。
<productname>PostgreSQL</productname>ユーザがデータディレクトリだけでなく、親ディレクトリも所有することを一般的に推奨します。
このようにすると問題になることはありません。
目的の親ディレクトリが存在しない場合は、まずそのディレクトリを作成する必要があります。
親の親ディレクトリが書き込み可能でない場合は、root権限を使用して作成します。
そのため、手順は下記のようになります。
<screen>
root# <userinput>mkdir /usr/local/pgsql</userinput>
root# <userinput>chown postgres /usr/local/pgsql</userinput>
root# <userinput>su postgres</userinput>
postgres$ <userinput>initdb -D /usr/local/pgsql/data</userinput>
</screen>
  </para>

  <para>
<!--
   <command>initdb</command> will refuse to run if the data directory
   exists and already contains files; this is to prevent accidentally
   overwriting an existing installation.
-->
データディレクトリが存在し、すでにファイルが含まれている場合は、<command>initdb</command>は実行を拒否します。これは、誤って既存のインストールを上書きしないようにするためです。
  </para>

  <para>
<!--
   Because the data directory contains all the data stored in the
   database, it is essential that it be secured from unauthorized
   access. <command>initdb</command> therefore revokes access
   permissions from everyone but the
   <productname>PostgreSQL</productname> user, and optionally, group.
   Group access, when enabled, is read-only.  This allows an unprivileged
   user in the same group as the cluster owner to take a backup of the
   cluster data or perform other operations that only require read access.
-->
データディレクトリにはデータベースの中のすべてのデータが保持されるため、権限を持たない人からのアクセスを確実に制限することが不可欠です。
ですから、<command>initdb</command>は<productname>PostgreSQL</productname>ユーザ、更にオプションでグループ以外からのアクセス権を剥奪します。
許可されている場合には、グループアクセスは読み出し専用になります。
これにより、クラスタの所有者と同じグループに所属する非特権ユーザが、そのクラスタのデータをバックアップすることや、読み出し権限だけが必要なその他の操作を実行することが可能になります。
  </para>

  <para>
<!--
   Note that enabling or disabling group access on an existing cluster requires
   the cluster to be shut down and the appropriate mode to be set on all
   directories and files before restarting
   <productname>PostgreSQL</productname>.  Otherwise, a mix of modes might
   exist in the data directory.  For clusters that allow access only by the
   owner, the appropriate modes are <literal>0700</literal> for directories
   and <literal>0600</literal> for files.  For clusters that also allow
   reads by the group, the appropriate modes are <literal>0750</literal>
   for directories and <literal>0640</literal> for files.
-->
既存のクラスタに対してグループアクセスを有効にする、あるいは無効にするには、<productname>PostgreSQL</productname>を再起動する前に、クラスタが停止済みの状態で、すべてのディレクトリとファイルに適切なモードが設定されている必要があることに注意してください。
そうでないと、データディレクトリ内に異なるモードが混在してしまうかもしれません。
所有者のみにアクセスを許可するクラスタでは、適切なディレクトリのモードは<literal>0700</literal>で、ファイルモードは<literal>0600</literal>です。
加えてグループに対して読み出しを許可するクラスタでは、適切なディレクトリのモードは<literal>0750</literal>で、ファイルモードは<literal>0640</literal>です。
  </para>

  <para>
<!--
   However, while the directory contents are secure, the default
   client authentication setup allows any local user to connect to the
   database and even become the database superuser. If you do not
   trust other local users, we recommend you use one of
   <command>initdb</command>'s <option>-W</option>, <option>&#45;-pwprompt</option>
   or <option>&#45;-pwfile</option> options to assign a password to the
   database superuser.<indexterm>
     <primary>password</primary>
     <secondary>of the superuser</secondary>
   </indexterm>
   Also, specify <option>-A scram-sha-256</option>
   so that the default <literal>trust</literal> authentication
   mode is not used; or modify the generated <filename>pg_hba.conf</filename>
   file after running <command>initdb</command>, but
   <emphasis>before</emphasis> you start the server for the first time. (Other
   reasonable approaches include using <literal>peer</literal> authentication
   or file system permissions to restrict connections. See <xref
   linkend="client-authentication"/> for more information.)
-->
しかし、ディレクトリの内容は安全ですが、デフォルトのクライアント認証の設定では、すべてのローカルユーザはデータベースに接続でき、データベーススーパーユーザになることさえ可能です。
他のローカルユーザを信用しない場合、<command>initdb</command>の<option>-W</option>、<option>--pwprompt</option>、<option>--pwfile</option>オプションのいずれか1つを使用して、データベーススーパーユーザにパスワードを付与することを推奨します。
   <indexterm>
     <primary>パスワード</primary>
     <secondary>スーパーユーザの</secondary>
   </indexterm>
また、デフォルトの<literal>trust</literal>認証モードを使用しないように、<option>-A scram-sha-256</option>を指定してください。
もしくは、<command>initdb</command>の後、初回のサーバの起動の<emphasis>前</emphasis>に、生成済みの<filename>pg_hba.conf</filename>ファイルを変更してください。
（他の穏当な方法として、<literal>peer</literal>認証やファイルシステムの権限を使用して、接続を制限することもできます。
詳細については<xref linkend="client-authentication"/>を参照してください。）
  </para>

  <para>
<!--
   <command>initdb</command> also initializes the default
   locale<indexterm><primary>locale</primary></indexterm> for the database cluster.
   Normally, it will just take the locale settings in the environment
   and apply them to the initialized database.  It is possible to
   specify a different locale for the database; more information about
   that can be found in <xref linkend="locale"/>.  The default sort order used
   within the particular database cluster is set by
   <command>initdb</command>, and while you can create new databases using
   different sort order, the order used in the template databases that initdb
   creates cannot be changed without dropping and recreating them.
   There is also a performance impact for using locales
   other than <literal>C</literal> or <literal>POSIX</literal>. Therefore, it is
   important to make this choice correctly the first time.
-->
<command>initdb</command>はまた、データベースクラスタのデフォルトのロケール<indexterm><primary>ロケール</primary></indexterm>を初期化します。
通常は、環境のロケール設定を初期化されたデータベースにそのまま適用します。
データベースに異なるロケールを指定することも可能です。
詳細については<xref linkend="locale"/>を参照してください。
特定のデータベースクラスタ内で使用されるデフォルトのソート順は<command>initdb</command>で設定されます。
異なるソート順を使用する新しいデータベースを作成することもできますが、initdbが作成するテンプレートデータベースで使用される順は削除して再作成しない限り変更することができません。
また、<literal>C</literal>や<literal>POSIX</literal>以外のロケールを使用する場合には性能上の影響もあります。
ですので初回にこれを正しく選択することが重要です。
  </para>

  <para>
<!--
   <command>initdb</command> also sets the default character set encoding
   for the database cluster.  Normally this should be chosen to match the
   locale setting.  For details see <xref linkend="multibyte"/>.
-->
また<command>initdb</command>は、データベースクラスタのデフォルトの文字集合符号化方式も設定します。
通常これは、ロケールの設定と合うものが選ばれなければなりません。
詳細は<xref linkend="multibyte"/>を参照してください。
  </para>

  <para>
<!--
   Non-<literal>C</literal> and non-<literal>POSIX</literal> locales rely on the
   operating system's collation library for character set ordering.
   This controls the ordering of keys stored in indexes.  For this reason,
   a cluster cannot switch to an incompatible collation library version,
   either through snapshot restore, binary streaming replication, a
   different operating system, or an operating system upgrade.
-->
非<literal>C</literal>および非<literal>POSIX</literal>のロケールでは、文字集合のソート順はオペレーティングシステムの照合ライブラリに依存しています。
これは、インデックスに格納されているキーの順序を制御します。
このためにクラスタは、スナップショットのリストア、バイナリストリーミングレプリケーション、異なるオペレーティングシステム、またはオペレーティングシステムのアップグレードのいずれでも互換性のない照合ライブラリバージョンに切り替えることは出来ません。
  </para>

  <sect2 id="creating-cluster-mount-points">
<!--
   <title>Use of Secondary File Systems</title>
-->
   <title>セカンダリファイルシステムの使用</title>

   <indexterm zone="creating-cluster-mount-points">
    <primary>file system mount points</primary>
   </indexterm>
   <indexterm zone="creating-cluster-mount-points">
    <primary>ファイルシステムマウントポイント</primary>
   </indexterm>

   <para>
<!--
    Many installations create their database clusters on file systems
    (volumes) other than the machine's <quote>root</quote> volume.  If you
    choose to do this, it is not advisable to try to use the secondary
    volume's topmost directory (mount point) as the data directory.
    Best practice is to create a directory within the mount-point
    directory that is owned by the <productname>PostgreSQL</productname>
    user, and then create the data directory within that.  This avoids
    permissions problems, particularly for operations such
    as <application>pg_upgrade</application>, and it also ensures clean failures if
    the secondary volume is taken offline.
-->
多くのインストールでは、マシンの<quote>ルート</quote>ボリューム以外のファイルシステム（ボリューム）上にデータベースクラスタを作成します。
この選択をした場合、セカンダリボリュームの最上位ディレクトリ（マウントポイント）をデータディレクトリとして使用することはお勧めできません。
最善の方法はマウントポイントディレクトリ内に<productname>PostgreSQL</productname>ユーザが所有するディレクトリを作成し、その中にデータディレクトリを作成することです。
これにより、権限の問題、特に<application>pg_upgrade</application>などの操作での問題を避けることができ、またセカンダリボリュームがオフラインになったときに、確実にきれいなエラーを起こすようになります。
   </para>

  </sect2>

  <sect2 id="creating-cluster-filesystem">
<!--
   <title>File Systems</title>
-->
   <title>ファイルシステム</title>

   <para>
<!--
    Generally, any file system with POSIX semantics can be used for
    PostgreSQL.  Users prefer different file systems for a variety of reasons,
    including vendor support, performance, and familiarity.  Experience
    suggests that, all other things being equal, one should not expect major
    performance or behavior changes merely from switching file systems or
    making minor file system configuration changes.
-->
一般的にはPOSIXのセマンティクスを備えたすべてのファイルシステムがPostgreSQLで利用できます。
ユーザはベンダのサポート、性能、慣れ親しんでいるかどうかなどの様々な理由で異なるファイルシステムを選択します。
経験が示すところによると、これ以外の要素が同じなら、単にファイルシステムを変更したり、ファイルシステムの設定を少し変えただけで大きな性能の違いや挙動の違いがあるとは思わないほうが良いでしょう。
   </para>

   <sect3 id="creating-cluster-nfs">
    <title>NFS</title>

    <indexterm zone="creating-cluster-nfs">
     <primary>NFS</primary>
    </indexterm>

    <para>
<!--
     It is possible to use an <acronym>NFS</acronym> file system for storing
     the <productname>PostgreSQL</productname> data directory.
     <productname>PostgreSQL</productname> does nothing special for
     <acronym>NFS</acronym> file systems, meaning it assumes
     <acronym>NFS</acronym> behaves exactly like locally-connected drives.
     <productname>PostgreSQL</productname> does not use any functionality that
     is known to have nonstandard behavior on <acronym>NFS</acronym>, such as
     file locking.
-->
<productname>PostgreSQL</productname>のデータディレクトリを格納するために<acronym>NFS</acronym>ファイルシステムが使えます。
<productname>PostgreSQL</productname>は<acronym>NFS</acronym>ファイルシステムのために何ら特別なことはしません。つまり<acronym>NFS</acronym>がローカルに接続されたドライブと完全に同じように振る舞うものとみなします。
<productname>PostgreSQL</productname>は、ファイルのロックなど、<acronym>NFS</acronym>上で非標準の振る舞いをすると知られている機能は使いません。
    </para>

    <para>
<!--
     The only firm requirement for using <acronym>NFS</acronym> with
     <productname>PostgreSQL</productname> is that the file system is mounted
     using the <literal>hard</literal> option.  With the
     <literal>hard</literal> option, processes can <quote>hang</quote>
     indefinitely if there are network problems, so this configuration will
     require a careful monitoring setup.  The <literal>soft</literal> option
     will interrupt system calls in case of network problems, but
     <productname>PostgreSQL</productname> will not repeat system calls
     interrupted in this way, so any such interruption will result in an I/O
     error being reported.
-->
<acronym>NFS</acronym>を<productname>PostgreSQL</productname>で使う上での必須要件は<literal>hard</literal>オプションを使ってファイルシステムをマウントすることです。
<literal>hard</literal>オプションでは、ネットワークに問題があればプロセスは永久に<quote>ハング</quote>する可能性があります。ですからこの設定では注意深い監視が必要になります。
<literal>soft</literal>オプションはネットワークに問題があるとシステムコールに割り込みますが、<productname>PostgreSQL</productname>はこの方法で割り込まれたシステムコールを再発行しません。ですからそのような割り込みに対してはI/Oエラーの発生が報告されることとなります。
    </para>

    <para>
<!--
     It is not necessary to use the <literal>sync</literal> mount option.  The
     behavior of the <literal>async</literal> option is sufficient, since
     <productname>PostgreSQL</productname> issues <literal>fsync</literal>
     calls at appropriate times to flush the write caches.  (This is analogous
     to how it works on a local file system.)  However, it is strongly
     recommended to use the <literal>sync</literal> export option on the NFS
     <emphasis>server</emphasis> on systems where it exists (mainly Linux).
     Otherwise, an <literal>fsync</literal> or equivalent on the NFS client is
     not actually guaranteed to reach permanent storage on the server, which
     could cause corruption similar to running with the parameter <xref
     linkend="guc-fsync"/> off.  The defaults of these mount and export
     options differ between vendors and versions, so it is recommended to
     check and perhaps specify them explicitly in any case to avoid any
     ambiguity.
-->
<literal>sync</literal>マウントオプションを使う必要はありません。
<literal>async</literal>オプションの動作で十分です。なぜなら<productname>PostgreSQL</productname>は書き込みキャッシュをフラッシュするために適切な時に<literal>fsync</literal>呼び出しを発行するからです。
（これはローカルファイルシステム上での動作と同様です。）
しかし、<literal>sync</literal>エクスポートオプションがあるシステム（主にLinux）上のNFS<emphasis>サーバ</emphasis>では、そのオプションを使うことを強くお勧めします。
さもないとNFSクライアント上の<literal>fsync</literal>、あるいは同等ものは実際にはサーバ上の永続ストレージに到達することが保証されず、<xref linkend="guc-fsync"/>パラメータをオフにして実行するのと同じような破壊をもたらす可能性があります。
これらのマウントオプションとエクスポートオプションのデフォルトはベンダとバージョンによって違います。ですから曖昧さを避けるためにこれらのオプションをチェックし、また常に明示的にオプションを指定したほうが良いでしょう。
    </para>

    <para>
<!--
     In some cases, an external storage product can be accessed either via NFS
     or a lower-level protocol such as iSCSI.  In the latter case, the storage
     appears as a block device and any available file system can be created on
     it.  That approach might relieve the DBA from having to deal with some of
     the idiosyncrasies of NFS, but of course the complexity of managing
     remote storage then happens at other levels.
-->
場合によっては外部ストレージ製品は、NFSあるいはiSCSIのような低レベルのプロトコルのどちらでもアクセスできます。
後者の場合にはストレージはブロックデバイスとして扱われ、利用可能などのようなファイルシステムもその上に作ることができます。
このアプローチはNFSの特異性に対処することからDBAを解放するかも知れません。もちろんリモートストレージを管理する複雑さが別のレベルで起こってしまいますが。
    </para>
   </sect3>
  </sect2>

 </sect1>

 <sect1 id="server-start">
<!--
  <title>Starting the Database Server</title>
-->
  <title>データベースサーバの起動</title>

  <para>
<!--
   Before anyone can access the database, you must start the database
   server. The database server program is called
   <command>postgres</command>.<indexterm><primary>postgres</primary></indexterm>
-->
データベースにアクセスするためには、まずデータベースサーバを起動しなくてはいけません。
データベースサーバプログラムは<command>postgres</command>という名前です。
<indexterm><primary>postgres</primary></indexterm>
  </para>

  <para>
<!--
   If you are using a pre-packaged version
   of <productname>PostgreSQL</productname>, it almost certainly includes
   provisions for running the server as a background task according to the
   conventions of your operating system.  Using the package's
   infrastructure to start the server will be much less work than figuring
   out how to do this yourself.  Consult the package-level documentation
   for details.
-->
パッケージ化された版の<productname>PostgreSQL</productname>を使用している場合は、オペレーティングシステムの規則に従って、サーバをバックグラウンドタスクとして実行するための提供がほぼ確実に含まれています。
パッケージの基盤を使用してサーバを起動させるほうが、自分でこれをおこなう方法を理解するよりもはるかに作業量が少なくなります。
詳細についてはパッケージレベルのドキュメントを参照してください。
  </para>

  <para>
<!--
   The bare-bones way to start the server manually is just to invoke
   <command>postgres</command> directly, specifying the location of the
   data directory with the <option>-D</option> option, for example:
-->
サーバを手動で起動するための必要最低限の方法は、<option>-D</option>オプションを使用してデータディレクトリの場所を指定<command>postgres</command>を直接呼び出することです。
次に例を示します。
<screen>
$ <userinput>postgres -D /usr/local/pgsql/data</userinput>
</screen>
<!--
   which will leave the server running in the foreground. This must be
   done while logged into the <productname>PostgreSQL</productname> user
   account. Without <option>-D</option>, the server will try to use
   the data directory named by the environment variable <envar>PGDATA</envar>.
   If that variable is not provided either, it will fail.
-->
上記のコマンドはサーバをフォアグラウンドで実行させます。
これは、<productname>PostgreSQL</productname>ユーザアカウントでログインしている間に実行されなくてはいけません。
<option>-D</option>オプションが指定されていない場合、サーバは<envar>PGDATA</envar>環境変数で指定されたデータディレクトリを使用しようと試みます。
どちらの変数も指定されていなければ失敗します。
  </para>

  <para>
<!--
   Normally it is better to start <command>postgres</command> in the
   background.  For this, use the usual Unix shell syntax:
-->
通常はバックグラウンドで<command>postgres</command>を起動することをお勧めします。
そのためには以下のように通常のUnixシェルの構文を使います。
<screen>
$ <userinput>postgres -D /usr/local/pgsql/data &gt;logfile 2&gt;&amp;1 &amp;</userinput>
</screen>
<!--
   It is important to store the server's <systemitem>stdout</systemitem> and
   <systemitem>stderr</systemitem> output somewhere, as shown above. It will help
   for auditing purposes and to diagnose problems. (See <xref
   linkend="logfile-maintenance"/> for a more thorough discussion of log
   file handling.)
-->
この例のように、サーバの<systemitem>標準出力</systemitem>と<systemitem>標準エラー</systemitem>出力をどこかに保管しておくことが重要です。
これは監査目的と問題の原因究明に役立ちます。
（ログファイルの取り扱いについての全体的な説明については<xref linkend="logfile-maintenance"/>を参照してください。）
  </para>

  <para>
<!--
   The <command>postgres</command> program also takes a number of other
   command-line options. For more information, see the
   <xref linkend="app-postgres"/> reference page
   and <xref linkend="runtime-config"/> below.
-->
<command>postgres</command>プログラムには、この他にも多くのコマンドラインオプションを指定することができます。
詳細は<xref linkend="app-postgres"/>リファレンスページと後述の<xref linkend="runtime-config"/>を参照してください。
  </para>

  <para>
<!--
   This shell syntax can get tedious quickly.  Therefore the wrapper
   program
   <xref linkend="app-pg-ctl"/><indexterm><primary>pg_ctl</primary></indexterm>
   is provided to simplify some tasks.  For example:
-->
こうしたシェル構文は長くなりがちです。そのため、
<xref linkend="app-pg-ctl"/><indexterm><primary>pg_ctl</primary></indexterm>
ラッパープログラムが提供されていて、いくつかのタスクを単純化しています。
以下に例を示します。
<programlisting>
pg_ctl start -l logfile
</programlisting>
<!--
   will start the server in the background and put the output into the
   named log file. The <option>-D</option> option has the same meaning
   here as for <command>postgres</command>. <command>pg_ctl</command>
   is also capable of stopping the server.
-->
これは、サーバをバックグラウンドで起動し、出力を指定されたログファイルに書き出します。
<option>-D</option>オプションは、ここでも<command>postgres</command>の場合と同じ意味を持ちます。
<command>pg_ctl</command>によってサーバを停止させることもできます。
  </para>

  <para>
<!--
   Normally, you will want to start the database server when the
   computer boots.<indexterm>
     <primary>booting</primary>
     <secondary>starting the server during</secondary>
   </indexterm>
   Autostart scripts are operating-system-specific.
   There are a few example scripts distributed with
   <productname>PostgreSQL</productname> in the
   <filename>contrib/start-scripts</filename> directory. Installing one will require
   root privileges.
-->
通常、コンピュータが起動された時にデータベースサーバも一緒に起動したい場合が多いと思われます。
   <indexterm>
    <primary>マシンの起動</primary>
    <secondary>時のサーバ起動</secondary>
   </indexterm>
自動起動スクリプトはオペレーティングシステム固有のものです。
いくつかのスクリプトの例は<productname>PostgreSQL</productname>の<filename>contrib/start-scripts</filename>ディレクトリに同梱されています。
このインストールにはおそらくroot権限が必要となります。
  </para>

  <para>
<!--
   Different systems have different conventions for starting up daemons
   at boot time. Many systems have a file
   <filename>/etc/rc.local</filename> or
   <filename>/etc/rc.d/rc.local</filename>. Others use <filename>init.d</filename> or
   <filename>rc.d</filename> directories. Whatever you do, the server must be
   run by the <productname>PostgreSQL</productname> user account
   <emphasis>and not by root</emphasis> or any other user. Therefore you
   probably should form your commands using
   <literal>su postgres -c '...'</literal>.  For example:
-->
起動時にデーモンを開始する方法はシステムによって異なります。
多くのシステムには<filename>/etc/rc.local</filename>ファイルや<filename>/etc/rc.d/rc.local</filename>ファイルがあります。
他のシステムでは<filename>init.d</filename>や<filename>rc.d</filename>ディレクトリが使用されます。
何を実行するにしても、サーバは<productname>PostgreSQL</productname>ユーザアカウントで起動させなければなりません。
<emphasis>rootであってはいけません</emphasis>し、他のユーザでもいけません。
したがって、<literal>su postgres -c '...'</literal>を使用してコマンドを実行する必要があるでしょう。
以下に例を示します。
<programlisting>
su postgres -c 'pg_ctl start -D /usr/local/pgsql/data -l serverlog'
</programlisting>
  </para>

  <para>
<!--
   Here are a few more operating-system-specific suggestions. (In each
   case be sure to use the proper installation directory and user
   name where we show generic values.)
-->
さらにいくつかのオペレーティングシステム固有の提案を挙げます。
（ここでは一般的な値で説明していますので、各項目において適切なインストールディレクトリとユーザ名に置き換えて読んでください。）

   <itemizedlist>
    <listitem>
     <para>
<!--
      For <productname>FreeBSD</productname>, look at the file
      <filename>contrib/start-scripts/freebsd</filename> in the
      <productname>PostgreSQL</productname> source distribution.
      <indexterm><primary>FreeBSD</primary><secondary>start script</secondary></indexterm>
-->
<productname>FreeBSD</productname>では、<productname>PostgreSQL</productname>のソース配布物の中にある<filename>contrib/start-scripts/freebsd</filename>ファイルを参照してください。
<indexterm><primary>FreeBSD</primary><secondary>の起動スクリプト</secondary></indexterm>
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      On <productname>OpenBSD</productname>, add the following lines
      to the file <filename>/etc/rc.local</filename>:
      <indexterm><primary>OpenBSD</primary><secondary>start script</secondary></indexterm>
-->
<productname>OpenBSD</productname>では、以下の数行を<filename>/etc/rc.local</filename>ファイルに追加してください。
<indexterm><primary>OpenBSD</primary><secondary>の起動スクリプト</secondary></indexterm>
<programlisting>
if [ -x /usr/local/pgsql/bin/pg_ctl -a -x /usr/local/pgsql/bin/postgres ]; then
    su -l postgres -c '/usr/local/pgsql/bin/pg_ctl start -s -l /var/postgresql/log -D /usr/local/pgsql/data'
    echo -n ' postgresql'
fi
</programlisting>
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      On <productname>Linux</productname> systems either add
      <indexterm><primary>Linux</primary><secondary>start script</secondary></indexterm>
-->
<productname>Linux</productname>システムでは、
<indexterm><primary>Linux</primary><secondary>の起動スクリプト</secondary></indexterm>
<programlisting>
/usr/local/pgsql/bin/pg_ctl start -l logfile -D /usr/local/pgsql/data
</programlisting>
<!--
      to <filename>/etc/rc.d/rc.local</filename>
      or <filename>/etc/rc.local</filename> or look at the file
      <filename>contrib/start-scripts/linux</filename> in the
      <productname>PostgreSQL</productname> source distribution.
-->
を<filename>/etc/rc.d/rc.local</filename>や<filename>/etc/rc.local</filename>に追加してください。
または、<productname>PostgreSQL</productname>のソース配布物の中にある<filename>contrib/start-scripts/linux</filename>ファイルを参照してください。
     </para>

     <para>
<!--
      When using <application>systemd</application>, you can use the following
      service unit file (e.g.,
      at <filename>/etc/systemd/system/postgresql.service</filename>):<indexterm><primary>systemd</primary></indexterm>
-->
<application>systemd</application>を使用する場合は以下のサービスユニットファイルを（例えば<filename>/etc/systemd/system/postgresql.service</filename>として）使用できます。
<indexterm><primary>systemd</primary></indexterm>
<programlisting>
[Unit]
Description=PostgreSQL database server
Documentation=man:postgres(1)
After=network-online.target
Wants=network-online.target

[Service]
Type=notify
User=postgres
ExecStart=/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data
ExecReload=/bin/kill -HUP $MAINPID
KillMode=mixed
KillSignal=SIGINT
TimeoutSec=infinity

[Install]
WantedBy=multi-user.target
</programlisting>
<!--
      Using <literal>Type=notify</literal> requires that the server binary was
      built with <literal>configure &#45;-with-systemd</literal>.
-->
<literal>Type=notify</literal>を使うには、サーバのバイナリが<literal>configure --with-systemd</literal>でビルドされている必要があります。
     </para>

     <para>
<!--
      Consider carefully the timeout
      setting.  <application>systemd</application> has a default timeout of 90
      seconds as of this writing and will kill a process that does not report
      readiness within that time.  But a <productname>PostgreSQL</productname>
      server that might have to perform crash recovery at startup could take
      much longer to become ready.  The suggested value
      of <literal>infinity</literal> disables the timeout logic.
-->
タイムアウトの設定について慎重に検討してください。
この文書を書いている時点で、<application>systemd</application>のデフォルトのタイムアウトは90秒で、その時間内に準備ができたことを報告しないプロセスは終了させられます。
しかし、<productname>PostgreSQL</productname>サーバは起動時にクラッシュリカバリを実行せねばならないことがあり、準備ができるまでにそれよりずっと長い時間を要することがあります。
ここで提案されている<literal>infinity</literal>という値は、そのタイムアウトの仕組みを無効にします。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      On <productname>NetBSD</productname>, use either the
      <productname>FreeBSD</productname> or
      <productname>Linux</productname> start scripts, depending on
      preference.
      <indexterm><primary>NetBSD</primary><secondary>start script</secondary></indexterm>
-->
<productname>NetBSD</productname>では、<productname>FreeBSD</productname>か<productname>Linux</productname>の好きな方の起動スクリプトを使用してください。
<indexterm><primary>NetBSD</primary><secondary>の起動スクリプト</secondary></indexterm>
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      On <productname>Solaris</productname>, create a file called
      <filename>/etc/init.d/postgresql</filename> that contains
      the following line:
-->
<productname>Solaris</productname>では、<filename>/etc/init.d/postgresql</filename>というファイルを作成し、そこに以下の1行を記述してください。
<!--
      <indexterm><primary>Solaris</primary><secondary>start script</secondary></indexterm>
-->
<indexterm><primary>Solaris</primary><secondary>の起動スクリプト</secondary></indexterm>
<programlisting>
su - postgres -c "/usr/local/pgsql/bin/pg_ctl start -l logfile -D /usr/local/pgsql/data"
</programlisting>
<!--
      Then, create a symbolic link to it in <filename>/etc/rc3.d</filename> as
      <filename>S99postgresql</filename>.
-->
そして、<filename>/etc/rc3.d</filename>以下に<filename>S99postgresql</filename>としてそのファイルに対するシンボリックリンクを作成してください。
     </para>
    </listitem>
   </itemizedlist>

  </para>

   <para>
<!--
    While the server is running, its
    <acronym>PID</acronym> is stored in the file
    <filename>postmaster.pid</filename> in the data directory. This is
    used to prevent multiple server instances from
    running in the same data directory and can also be used for
    shutting down the server.
-->
サーバが実行している間は、その<acronym>PID</acronym>はデータディレクトリの中の<filename>postmaster.pid</filename>ファイルに記述されています。
これは同じデータディレクトリで複数のサーバインスタンスが実行されるのを防止し、また、サーバの停止にも使うことができます。
   </para>

   <sect2 id="server-start-failures">
<!--
    <title>Server Start-up Failures</title>
-->
    <title>サーバ起動の失敗</title>

    <para>
<!--
     There are several common reasons the server might fail to
     start. Check the server's log file, or start it by hand (without
     redirecting standard output or standard error) and see what error
     messages appear. Below we explain some of the most common error
     messages in more detail.
-->
サーバの起動が失敗する理由として代表的なものがいくつかあります。
サーバのログファイルを点検するか、（標準出力や標準エラーをリダイレクトせずに）手動で起動して、どのようなエラーメッセージが出ているか確認してください。
以下に、よく発生するエラーメッセージのいくつかをより詳細に説明します。
    </para>

    <para>
<screen>
LOG:  could not bind IPv4 address "127.0.0.1": Address already in use
HINT:  Is another postmaster already running on port 5432? If not, wait a few seconds and retry.
FATAL:  could not create any TCP/IP sockets
</screen>
<!--
     This usually means just what it suggests: you tried to start
     another server on the same port where one is already running.
     However, if the kernel error message is not <computeroutput>Address
     already in use</computeroutput> or some variant of that, there might
     be a different problem. For example, trying to start a server
     on a reserved port number might draw something like:
-->
これはたいていの場合メッセージが示す通りの意味です。
既にサーバが動いているポートで別のサーバを起動しようとしたことを示しています。
しかし、カーネルエラーメッセージが<computeroutput>Address already in use</computeroutput>やそれに類似したものではない場合は、別の問題の可能性もあります。
例えば、予約済みのポート番号でサーバを起動しようとすると下記のようなメッセージが出るかもしれません。
<screen>
$ <userinput>postgres -p 666</userinput>
LOG:  could not bind IPv4 address "127.0.0.1": Permission denied
HINT:  Is another postmaster already running on port 666? If not, wait a few seconds and retry.
FATAL:  could not create any TCP/IP sockets
</screen>
    </para>

    <para>
<!--
     A message like:
-->
次のようなメッセージが表示された場合、
<screen>
FATAL:  could not create shared memory segment: Invalid argument
DETAIL:  Failed system call was shmget(key=5440001, size=4011376640, 03600).
</screen>
<!--
     probably means your kernel's limit on the size of shared memory is
     smaller than the work area <productname>PostgreSQL</productname>
     is trying to create (4011376640 bytes in this example).
     This is only likely to happen if you have set <literal>shared_memory_type</literal>
     to <literal>sysv</literal>.  In that case, you
     can try starting the server with a smaller-than-normal number of
     buffers (<xref linkend="guc-shared-buffers"/>), or
     reconfigure your kernel to increase the allowed shared memory
     size. You might also see this message when trying to start multiple
     servers on the same machine, if their total space requested
     exceeds the kernel limit.
-->
これは、おそらくカーネルによる共有メモリのサイズの上限が<productname>PostgreSQL</productname>が作ろうとしている作業領域（この例では4011376640バイト）よりも小さいことを示しています。
これは<literal>shared_memory_type</literal>を<literal>sysv</literal>に設定した場合にのみ発生する可能性があります。
その場合は、サーバを通常よりも少ないバッファ数（<xref linkend="guc-shared-buffers"/>）で起動するか、カーネルを再設定して許容される共有メモリサイズを増やすこともできます。
このメッセージは、同じマシン上で複数のサーバを起動しようとした時に、要求された領域の合計がカーネルの上限を超えた場合にも表示されます。
    </para>

    <para>
<!--
     An error like:
-->
下記のようなエラーの場合:
<screen>
FATAL:  could not create semaphores: No space left on device
DETAIL:  Failed system call was semget(5440126, 17, 03600).
</screen>
<!--
     does <emphasis>not</emphasis> mean you've run out of disk
     space. It means your kernel's limit on the number of <systemitem
     class="osname">System V</systemitem> semaphores is smaller than the number
     <productname>PostgreSQL</productname> wants to create. As above,
     you might be able to work around the problem by starting the
     server with a reduced number of allowed connections
     (<xref linkend="guc-max-connections"/>), but you'll eventually want to
     increase the kernel limit.
-->
ディスクの空き容量がなくなったということを示しているわけでは<emphasis>ありません</emphasis>。
これはカーネルの<systemitem class="osname">System V</systemitem>セマフォの上限が、<productname>PostgreSQL</productname>が作成しようとしている数よりも小さいということを意味しています。
上記のように、許可される接続の数（<xref linkend="guc-max-connections"/>）を減らしてサーバを起動させることで問題は回避できるかもしれませんが、最終的にはカーネルの設定を変えてセマフォの上限を増やした方が良いでしょう。
    </para>

    <para>
<!--
     Details about configuring <systemitem class="osname">System V</systemitem>
     <acronym>IPC</acronym> facilities are given in <xref linkend="sysvipc"/>.
-->
<systemitem class="osname">System V</systemitem> <acronym>IPC</acronym>設備の設定についての詳細は<xref linkend="sysvipc"/>を参照してください。
    </para>
   </sect2>

   <sect2 id="client-connection-problems">
<!--
    <title>Client Connection Problems</title>
-->
    <title>クライアント接続の問題</title>

    <para>
<!--
     Although the error conditions possible on the client side are quite
     varied and application-dependent, a few of them might be directly
     related to how the server was started. Conditions other than
     those shown below should be documented with the respective client
     application.
-->
クライアント側で起こり得るエラー状態はきわめて多様で、アプリケーションに依存します。
その中のいくつかはサーバが起動された方法と直接関係するかもしれません。
以下で説明する以外の状態については各々のクライアントアプリケーションの資料を参照してください。
    </para>

    <para>
<screen>
psql: error: connection to server at "server.joe.com" (123.123.123.123), port 5432 failed: Connection refused
        Is the server running on that host and accepting TCP/IP connections?
</screen>
<!--
     This is the generic <quote>I couldn't find a server to talk
     to</quote> failure. It looks like the above when TCP/IP
     communication is attempted. A common mistake is to forget to
     configure <xref linkend="guc-listen-addresses"/> so that the server
     accepts remote TCP connections.
-->
これは一般的な<quote>接続するサーバが見つけられませんでした</quote>という失敗です。
TCP/IP通信を試みた時に上記のように表示されます。
よくある間違いは、サーバがリモートのTCP接続を受け入れるように<xref linkend="guc-listen-addresses"/>を設定するのを忘れていることです。
    </para>

    <para>
<!--
     Alternatively, you might get this when attempting Unix-domain socket
     communication to a local server:
-->
代わりに、ローカルのサーバにUnixソケット通信を試みると下記のような表示が出ます。
<screen>
psql: error: connection to server on socket "/tmp/.s.PGSQL.5432" failed: No such file or directory
        Is the server running locally and accepting connections on that socket?
</screen>
<!--
     If the server is indeed running, check that the client's idea of the
     socket path (here <literal>/tmp</literal>) agrees with the server's
     <xref linkend="guc-unix-socket-directories"/> setting.
-->
サーバが実行中にもかかわらずこうなるなら、クライアントが想定しているソケットパス（ここでは<literal>/tmp</literal>）がサーバの<xref linkend="guc-unix-socket-directories"/>設定と一致しているかどうか確認してください。
    </para>

    <para>
<!--
     A connection failure message always shows the server address or socket
     path name, which is useful in verifying that the client is trying to
     connect to the right place. If there is in fact no server
     listening there, the kernel error message will typically be either
     <computeroutput>Connection refused</computeroutput> or
     <computeroutput>No such file or directory</computeroutput>, as
     illustrated. (It is important to realize that
     <computeroutput>Connection refused</computeroutput> in this context
     does <emphasis>not</emphasis> mean that the server got your
     connection request and rejected it. That case will produce a
     different message, as shown in <xref
     linkend="client-authentication-problems"/>.) Other error messages
     such as <computeroutput>Connection timed out</computeroutput> might
     indicate more fundamental problems, like lack of network
     connectivity, or a firewall blocking the connection.
-->
接続失敗のメッセージは常にサーバのアドレスか、ソケットパス名を表示し、クライアントが正しいところに接続しようとしていることを確認するのに役立ちます。
もしそこを接続待ちしているサーバがない場合、典型的なカーネルエラーメッセージは、表示されているように<computeroutput>Connection refused</computeroutput>もしくは<computeroutput>No such file or directory</computeroutput>となります。
（この場合の<computeroutput>Connection refused</computeroutput>はサーバが接続要求を受け付けた後に拒否したわけでは<emphasis>ない</emphasis>ということを理解しておくことが大切です。
もしそうだった場合は<xref linkend="client-authentication-problems"/>で示されるような別のメッセージが表示されます。）
<computeroutput>Connection timed out</computeroutput>のような他のメッセージは、例えばネットワーク接続の欠如、あるいはファイアウォールが接続をブロックしているようなもっと根本的な問題を表しています。
    </para>
   </sect2>
  </sect1>

 <sect1 id="kernel-resources">
<!--
  <title>Managing Kernel Resources</title>
-->
  <title>カーネルリソースの管理</title>

  <para>
<!--
   <productname>PostgreSQL</productname> can sometimes exhaust various operating system
   resource limits, especially when multiple copies of the server are running
   on the same system, or in very large installations.  This section explains
   the kernel resources used by <productname>PostgreSQL</productname> and the steps you
   can take to resolve problems related to kernel resource consumption.
-->
<productname>PostgreSQL</productname>は、特に同一システム上で複数のサーバコピーを実行している場合や非常に大規模なインストレーションでは、オペレーティングシステムの様々なリソース制限を超えてしまうことがあります。
本節では、<productname>PostgreSQL</productname>で使用されるカーネルリソース、およびカーネルリソース消費に関連した問題を解消する時に取ることができる手順について説明します。
  </para>

  <sect2 id="sysvipc">
<!--
   <title>Shared Memory and Semaphores</title>
-->
   <title>共有メモリとセマフォ</title>

   <indexterm zone="sysvipc">
    <primary>shared memory</primary>
   </indexterm>
   <indexterm zone="sysvipc">
    <primary>共有メモリ</primary>
   </indexterm>

   <indexterm zone="sysvipc">
    <primary>semaphores</primary>
   </indexterm>
   <indexterm zone="sysvipc">
    <primary>セマフォ</primary>
   </indexterm>

   <para>
<!--
    <productname>PostgreSQL</productname> requires the operating system to provide
    inter-process communication (<acronym>IPC</acronym>) features, specifically
    shared memory and semaphores.  Unix-derived systems typically provide
    <quote><systemitem class="osname">System V</systemitem></quote> <acronym>IPC</acronym>,
    <quote><systemitem class="osname">POSIX</systemitem></quote> <acronym>IPC</acronym>, or both.
    <systemitem class="osname">Windows</systemitem> has its own implementation of
    these features and is not discussed here.
-->
<productname>PostgreSQL</productname>はオペレーティングシステムが、プロセス間通信(<acronym>IPC</acronym>)特に共有メモリとセマフォ機能を提供することを要求します。
Unix（派生）システムでは、<quote><systemitem class="osname">System V</systemitem></quote> <acronym>IPC</acronym>や、<quote><systemitem class="osname">POSIX</systemitem></quote> <acronym>IPC</acronym>、またはその両方を提供します。
<systemitem class="osname">Windows</systemitem>は、これらの機能を独自で実装しているため、ここでは説明しません。
   </para>

   <para>
<!--
    By default, <productname>PostgreSQL</productname> allocates
    a very small amount of System V shared memory, as well as a much larger
    amount of anonymous <function>mmap</function> shared memory.
    Alternatively, a single large System V shared memory region can be used
    (see <xref linkend="guc-shared-memory-type"/>).

    In addition a significant number of semaphores, which can be either
    System V or POSIX style, are created at server startup.  Currently,
    POSIX semaphores are used on Linux and FreeBSD systems while other
    platforms use System V semaphores.
-->
デフォルトでは<productname>PostgreSQL</productname>は通常、非常に少量のSystem V共有メモリと、もっと大量の無名<function>mmap</function>共有メモリを割り当てます。
代替方法として、単一の大きなSystem Vメモリリージョンも利用できます
（<xref linkend="guc-shared-memory-type"/>参照）。

さらに、System V又はPOSIXスタイルのどちらかのセマフォがサーバの起動時に作成されます。
現在、LinuxとFreeBSDシステムではPOSIXセマフォが使用され、それ以外のプラットフォームではSystem Vセマフォが使用されます。
   </para>

   <para>
<!--
    System V <acronym>IPC</acronym> features are typically constrained by
    system-wide allocation limits.
    When <productname>PostgreSQL</productname> exceeds one of these limits,
    the server will refuse to start and
    should leave an instructive error message describing the problem
    and what to do about it. (See also <xref
    linkend="server-start-failures"/>.) The relevant kernel
    parameters are named consistently across different systems; <xref
    linkend="sysvipc-parameters"/> gives an overview. The methods to set
    them, however, vary. Suggestions for some platforms are given below.
-->
System V <acronym>IPC</acronym>機能は、通常システム全体の割り当て制限に制約されます。
<productname>PostgreSQL</productname>がこれらの制限のいずれかを超えると、サーバは起動を拒否し、問題および何をすべきかを説明するエラーメッセージを残します。
（<xref linkend="server-start-failures"/> も参照してください。）
関係するカーネルパラメータは別々のシステム上でも統一して名付けられています。
<xref linkend="sysvipc-parameters"/>で概略がわかります。
しかしこれらを設定するための方法は異なります。
以下に、いくつかのプラットフォームへの提案を挙げます。
   </para>

   <table id="sysvipc-parameters">
<!--
    <title><systemitem class="osname">System V</systemitem> <acronym>IPC</acronym> Parameters</title>
-->
    <title><systemitem class="osname">System V</systemitem> <acronym>IPC</acronym>パラメータ</title>

    <tgroup cols="3">
     <colspec colname="col1" colwidth="1*"/>
     <colspec colname="col2" colwidth="3*"/>
     <colspec colname="col3" colwidth="3*"/>
     <thead>
      <row>
<!--
       <entry>Name</entry>
-->
       <entry>名前</entry>
<!--
       <entry>Description</entry>
-->
       <entry>説明</entry>
<!--
       <entry>Values needed to run one <productname>PostgreSQL</productname> instance</entry>
-->
       <entry>一つの<productname>PostgreSQL</productname>インスタンスに必要な値</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><varname>SHMMAX</varname></entry>
<!--
       <entry>Maximum size of shared memory segment (bytes)</entry>
-->
       <entry>共有メモリセグメントの最大サイズ（バイト）</entry>
<!--
       <entry>at least 1kB, but the default is usually much higher</entry>
-->
       <entry>最小でも1キロバイト（ただしデフォルトはもっと多くなっています）</entry>
      </row>

      <row>
       <entry><varname>SHMMIN</varname></entry>
<!--
       <entry>Minimum size of shared memory segment (bytes)</entry>
-->
<entry>共有メモリセグメントの最小サイズ（バイト）</entry>
       <entry>1</entry>
      </row>

      <row>
       <entry><varname>SHMALL</varname></entry>
<!--
       <entry>Total amount of shared memory available (bytes or pages)</entry>
       <entry>same as <varname>SHMMAX</varname> if bytes,
        or <literal>ceil(SHMMAX/PAGE_SIZE)</literal> if pages,
        plus room for other applications</entry>
-->
<entry>使用可能な共有メモリの総量（バイトまたはページ）</entry>
<entry>バイト指定の場合は<varname>SHMMAX</varname>と同じ。ページ指定の場合は<literal>ceil(SHMMAX/PAGE_SIZE)</literal>。 + 他のアプリケーション用の空間</entry>
      </row>

      <row>
       <entry><varname>SHMSEG</varname></entry>
<!--
       <entry>Maximum number of shared memory segments per process</entry>
-->
       <entry>プロセスごとの共有メモリセグメントの最大数</entry>
<!--
       <entry>only 1 segment is needed, but the default is much higher</entry>
-->
       <entry>必要なのは1セグメントのみ（ただしデフォルトはもっと多くなっています）</entry>
      </row>

       <row>
        <entry><varname>SHMMNI</varname></entry>
<!--
        <entry>Maximum number of shared memory segments system-wide</entry>
-->
        <entry>システム全体の共有メモリセグメントの最大数</entry>
<!--
        <entry>like <varname>SHMSEG</varname> plus room for other applications</entry>
-->
        <entry><varname>SHMSEG</varname>と同様 + 他のアプリケーション用の空間</entry>
       </row>

       <row>
        <entry><varname>SEMMNI</varname></entry>
<!--
        <entry>Maximum number of semaphore identifiers (i.e., sets)</entry>
-->
        <entry>セマフォ識別子の最大数（つまりセット）</entry>
<!--
        <entry>at least <literal>ceil(num_os_semaphores / 16)</literal> plus room for other applications</entry>
-->
        <entry>最低<literal>ceil(num_os_semaphores / 16)</literal> + 他のアプリケーション用の空間</entry>
       </row>

       <row>
        <entry><varname>SEMMNS</varname></entry>
<!--
        <entry>Maximum number of semaphores system-wide</entry>
-->
        <entry>システム全体のセマフォの最大数</entry>
<!--
        <entry><literal>ceil(num_os_semaphores / 16) * 17</literal> plus room for other applications</entry>
-->
        <entry><literal>ceil(num_os_semaphores / 16) * 17</literal> + 他のアプリケーション用の空間</entry>
       </row>

       <row>
        <entry><varname>SEMMSL</varname></entry>
<!--
        <entry>Maximum number of semaphores per set</entry>
-->
        <entry>セットごとのセマフォの最大数</entry>
<!--
        <entry>at least 17</entry>
-->
        <entry>最低17</entry>
       </row>

       <row>
        <entry><varname>SEMMAP</varname></entry>
<!--
        <entry>Number of entries in semaphore map</entry>
-->
        <entry>セマフォマップの中の項目の数</entry>
<!--
        <entry>see text</entry>
-->
        <entry>本文を参照</entry>
       </row>

       <row>
        <entry><varname>SEMVMX</varname></entry>
<!--
        <entry>Maximum value of semaphore</entry>
-->
        <entry>セマフォの最大値</entry>
<!--
        <entry>at least 1000 (The default is often 32767; do not change unless necessary)</entry>
-->
        <entry>最低1000（デフォルトはしばしば32767ですが、必要がなければ変更しないでください）</entry>
       </row>

     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    <productname>PostgreSQL</productname> requires a few bytes of System V shared memory
    (typically 48 bytes, on 64-bit platforms) for each copy of the server.
    On most modern operating systems, this amount can easily be allocated.
    However, if you are running many copies of the server or you explicitly
    configure the server to use large amounts of System V shared memory (see
    <xref linkend="guc-shared-memory-type"/> and <xref
    linkend="guc-dynamic-shared-memory-type"/>), it may be necessary to
    increase <varname>SHMALL</varname>, which is the total amount of System V shared
    memory system-wide.  Note that <varname>SHMALL</varname> is measured in pages
    rather than bytes on many systems.
-->
<productname>PostgreSQL</productname>は、サーバのコピー毎にSystem V共有メモリの数バイト（64ビットプラットフォームでは通常48バイト）を必要とします。
最近のほとんどのオペレーティングシステムでは、このくらいの量は簡単に割り当てられます。
しかし複数のサーバのコピーを実行している場合やSystem V共有メモリを使用する他のアプリケーションを実行している場合（<xref linkend="guc-shared-memory-type"/>および<xref linkend="guc-dynamic-shared-memory-type"/>を参照）は、システム全体のSystem V共有メモリである<varname>SHMALL</varname>を増加させる必要があるかもしれません。
多くのシステムでは<varname>SHMALL</varname>をバイト単位ではなくページ単位で測ることに注意してください。
   </para>

   <para>
<!--
    Less likely to cause problems is the minimum size for shared
    memory segments (<varname>SHMMIN</varname>), which should be at most
    approximately 32 bytes for <productname>PostgreSQL</productname> (it is
    usually just 1). The maximum number of segments system-wide
    (<varname>SHMMNI</varname>) or per-process (<varname>SHMSEG</varname>) are unlikely
    to cause a problem unless your system has them set to zero.
-->
問題が少ないのは共有メモリセグメントの最小サイズ（<varname>SHMMIN</varname>）で、<productname>PostgreSQL</productname>では最大でもおよそ32バイトのはずです（通常では1です）。
システム全体のセグメントの最大数（<varname>SHMMNI</varname>）もしくはプロセスごとのセグメントの最大数（<varname>SHMSEG</varname>）に関して、使用しているシステムで0に設定されていない限り、問題が起きることはほぼありません。
   </para>

   <para>
<!--
    When using System V semaphores,
    <productname>PostgreSQL</productname> uses one semaphore per allowed connection
    (<xref linkend="guc-max-connections"/>), allowed autovacuum worker process
    (<xref linkend="guc-autovacuum-worker-slots"/>), allowed WAL sender process
    (<xref linkend="guc-max-wal-senders"/>), allowed background
    process (<xref linkend="guc-max-worker-processes"/>), etc., in sets of 16.
    The runtime-computed parameter <xref linkend="guc-num-os-semaphores"/>
    reports the number of semaphores required.  This parameter can be viewed
    before starting the server with a <command>postgres</command> command like:
-->
System Vセマフォを使用する場合、<productname>PostgreSQL</productname>は許可される接続数（<xref linkend="guc-max-connections"/>）、許可されるautovacuumワーカープロセス数（<xref linkend="guc-autovacuum-worker-slots"/>）、許可されるWAL送信プロセス数（<xref linkend="guc-max-wal-senders"/>）、許可されるバックグラウンドプロセス数（<xref linkend="guc-max-worker-processes"/>）などに対して、セマフォを16個ずつのセットで使用します。
実行時に計算されるパラメータ<xref linkend="guc-num-os-semaphores"/>は必要なセマフォの数を報告します。
このパラメータは、以下のような<command>postgres</command>コマンドでサーバを起動する前に確認できます。
<programlisting>
$ <userinput>postgres -D $PGDATA -C num_os_semaphores</userinput>
</programlisting>
   </para>

   <para>
<!--
    Each set of 16 semaphores will
    also contain a 17th semaphore which contains a <quote>magic
    number</quote>, to detect collision with semaphore sets used by
    other applications. The maximum number of semaphores in the system
    is set by <varname>SEMMNS</varname>, which consequently must be at least
    as high as <literal>num_os_semaphores</literal> plus one extra for
    each set of 16 required semaphores (see the formula in <xref
    linkend="sysvipc-parameters"/>).  The parameter <varname>SEMMNI</varname>
    determines the limit on the number of semaphore sets that can
    exist on the system at one time.  Hence this parameter must be at
    least <literal>ceil(num_os_semaphores / 16)</literal>.
    Lowering the number
    of allowed connections is a temporary workaround for failures,
    which are usually confusingly worded <quote>No space
    left on device</quote>, from the function <function>semget</function>.
-->
各16個のセマフォのセットには、他のアプリケーションで使用されているセマフォセットとの衝突を検出するための<quote>マジックナンバー</quote>を含む17番目のセマフォも含まれます。
システム内のセマフォの最大数は<varname>SEMMNS</varname>によって設定され、そのため必要なセマフォ16個ごとに1つ余分に加えた<literal>num_os_semaphores</literal>以上でなくてはいけません（<xref linkend="sysvipc-parameters"/>の式を参照）。
<varname>SEMMNI</varname>パラメータはシステム上に同時に存在できるセマフォ集合の数の上限を決定します。
ですから、このパラメータは少なくとも<literal>ceil(num_os_semaphores / 16)</literal>以上はなくてはいけません。
一時的な失敗の回避策としては許可される接続の数を下げることができますが、<quote>No space left on device</quote>という紛らわしい言葉が<function>semget</function>関数から表示されます。
   </para>

   <para>
<!--
    In some cases it might also be necessary to increase
    <varname>SEMMAP</varname> to be at least on the order of
    <varname>SEMMNS</varname>.  If the system has this parameter
    (many do not), it defines the size of the semaphore
    resource map, in which each contiguous block of available semaphores
    needs an entry. When a semaphore set is freed it is either added to
    an existing entry that is adjacent to the freed block or it is
    registered under a new map entry. If the map is full, the freed
    semaphores get lost (until reboot). Fragmentation of the semaphore
    space could over time lead to fewer available semaphores than there
    should be.
-->
場合によっては<varname>SEMMAP</varname>を少なくとも<varname>SEMMNS</varname>と同程度に増やすことが必要になる場合があるかもしれません。
システムにこのパラメータがあるなら（ないかもしれません）、このパラメータはセマフォリソースマップのサイズを定義し、その中では有効なセマフォのそれぞれの隣接したブロックの項目が必要です。
セマフォ集合が解放されると、解放されたブロックに隣接する既に存在する項目に追加されるか、もしくは新しいマップの項目の下に登録されます。
もしマップが一杯だった場合、解放されたセマフォは（再起動するまで）失われます。
セマフォ空間の断片化により時間が経つごとに、有効なセマフォがあるべき量よりも少なくなる可能性があります。
   </para>

   <para>
<!--
    Various other settings related to <quote>semaphore undo</quote>, such as
    <varname>SEMMNU</varname> and <varname>SEMUME</varname>, do not affect
    <productname>PostgreSQL</productname>.
-->
<varname>SEMMNU</varname>と<varname>SEMUME</varname>のような、その他の様々な<quote>semaphore undo</quote>に関する設定は<productname>PostgreSQL</productname>には影響を与えません。
   </para>

   <para>
<!--
    When using POSIX semaphores, the number of semaphores needed is the
    same as for System V, that is one semaphore per allowed connection
    (<xref linkend="guc-max-connections"/>), allowed autovacuum worker process
    (<xref linkend="guc-autovacuum-worker-slots"/>), allowed WAL sender process
    (<xref linkend="guc-max-wal-senders"/>), allowed background
    process (<xref linkend="guc-max-worker-processes"/>), etc.
    On the platforms where this option is preferred, there is no specific
    kernel limit on the number of POSIX semaphores.
-->
POSIXセマフォを使用している場合、System Vと同じ数のセマフォを必要とします。
つまり、許可した接続（<xref linkend="guc-max-connections"/>）、許可したオートバキュームワーカープロセス（<xref linkend="guc-autovacuum-worker-slots"/>）、許可したWAL送信プロセス（<xref linkend="guc-max-wal-senders"/>）、許可したバックエンドプロセス（<xref linkend="guc-max-worker-processes"/>）などに対して1つのセマフォです。
このオプションが優先されるプラットフォームでは、POSIXセマフォの数に特定のカーネル制限はありません。
   </para>


    <variablelist>
     <varlistentry>
      <term><systemitem class="osname">FreeBSD</systemitem>
      <indexterm><primary>FreeBSD</primary><secondary>IPC configuration</secondary></indexterm>
      <indexterm><primary>FreeBSD</primary><secondary>IPC設定</secondary></indexterm>
      </term>
      <listitem>
       <para>
<!--
        The default shared memory settings are usually good enough, unless
        you have set <literal>shared_memory_type</literal> to <literal>sysv</literal>.
        System V semaphores are not used on this platform.
-->
<literal>shared_memory_type</literal>を<literal>sysv</literal>に設定していない限り、通常はデフォルトの共有メモリ設定で十分です。
System V セマフォはこのプラットフォームでは使用しません。
       </para>

       <para>
<!--
        The default IPC settings can be changed using
        the <command>sysctl</command> or
        <command>loader</command> interfaces.  The following
        parameters can be set using <command>sysctl</command>:
-->
デフォルトのIPC設定は<command>sysctl</command>または<command>loader</command>インタフェースを使用して変更を行うことができます。
以下では<command>sysctl</command>を使用してパラメータを変更しています。
<screen>
<prompt>#</prompt> <userinput>sysctl kern.ipc.shmall=32768</userinput>
<prompt>#</prompt> <userinput>sysctl kern.ipc.shmmax=134217728</userinput>
</screen>
<!--
        To make these settings persist over reboots, modify
        <filename>/etc/sysctl.conf</filename>.
-->
これらの設定を再起動しても永続化するには、<filename>/etc/sysctl.conf</filename>を変更します。
       </para>

       <para>
<!--
        If you have set <literal>shared_memory_type</literal> to
        <literal>sysv</literal>, you might also want to configure your kernel
        to lock System V shared memory into RAM and prevent it from being paged
        out to swap.  This can be accomplished using the <command>sysctl</command>
        setting <literal>kern.ipc.shm_use_phys</literal>.
-->
<literal>shared_memory_type</literal>を<literal>sysv</literal>に設定している場合は、System V共有メモリをRAM上に固定して、スワップによってページアウトされるのを避けるために、カーネルを設定することもできます。
これは<command>sysctl</command>を使用して<literal>kern.ipc.shm_use_phys</literal>を設定することで実現できます。
       </para>

       <para>
<!--
        If running in a FreeBSD jail, you should set its
        <literal>sysvshm</literal> parameter to <literal>new</literal>, so that
        it has its own separate System V shared memory namespace.
        (Before FreeBSD 11.0, it was necessary to enable shared access to
        the host's IPC namespace from jails, and take measures to avoid
        collisions.)
-->
FreeBSD jailを実行している場合、<literal>sysvshm</literal>パラメータを<literal>new</literal>に設定して、独自のSystem V共有メモリ名前空間を有するようにする必要があります。
（FreeBSD 11.0以前は、jailからIPC名前空間への共有アクセスを可能にし、衝突を避けるための対策を講じる必要がありました。）
       </para>

      </listitem>
     </varlistentry>

     <varlistentry>
      <term><systemitem class="osname">NetBSD</systemitem>
      <indexterm><primary>NetBSD</primary><secondary>IPC configuration</secondary></indexterm>
      <indexterm><primary>NetBSD</primary><secondary>IPC設定</secondary></indexterm>
      </term>
      <listitem>
       <para>
<!--
        The default shared memory settings are usually good enough, unless
        you have set <literal>shared_memory_type</literal> to <literal>sysv</literal>.
        However, you will need to increase <literal>kern.ipc.semmni</literal>
        and <literal>kern.ipc.semmns</literal>,
        as <systemitem class="osname">NetBSD</systemitem>'s default settings
        for these are unworkably small.
-->
<literal>shared_memory_type</literal>を<literal>sysv</literal>に設定していない限り、通常はデフォルトの共有メモリ設定で十分です。
ただし、<literal>kern.ipc.semmni</literal>と<literal>kern.ipc.semmns</literal>を増やす必要があります。
<systemitem class="osname">NetBSD</systemitem>のデフォルト設定では実用的でないほど小さいためです。
       </para>

       <para>
<!--
        IPC parameters can be adjusted using <command>sysctl</command>,
        for example:
-->
以下の例のようにIPCパラメータを<command>sysctl</command>を用いて調整することができます。
<screen>
<prompt>#</prompt> <userinput>sysctl -w kern.ipc.semmni=100</userinput>
</screen>
<!--
        To make these settings persist over reboots, modify
        <filename>/etc/sysctl.conf</filename>.
-->
これらの設定を再起動しても永続化するには、<filename>/etc/sysctl.conf</filename>を変更します。
       </para>

       <para>
<!--
        If you have set <literal>shared_memory_type</literal> to
        <literal>sysv</literal>, you might also want to configure your kernel
        to lock System V shared memory into RAM and prevent it from being paged
        out to swap.  This can be accomplished using the <command>sysctl</command>
        setting <literal>kern.ipc.shm_use_phys</literal>.
-->
<literal>shared_memory_type</literal>を<literal>sysv</literal>に設定している場合は、System V共有メモリをRAM上に固定して、スワップによってページアウトされるのを避けるために、カーネルを設定することもできます。
これは<command>sysctl</command>を使用して<literal>kern.ipc.shm_use_phys</literal>を設定することで実現できます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><systemitem class="osname">OpenBSD</systemitem>
      <indexterm><primary>OpenBSD</primary><secondary>IPC configuration</secondary></indexterm>
      <indexterm><primary>OpenBSD</primary><secondary>IPC設定</secondary></indexterm>
      </term>
      <listitem>
       <para>
<!--
        The default shared memory settings are usually good enough, unless
        you have set <literal>shared_memory_type</literal> to <literal>sysv</literal>.
        However, you will need to
        increase <literal>kern.seminfo.semmni</literal>
        and <literal>kern.seminfo.semmns</literal>,
        as <systemitem class="osname">OpenBSD</systemitem>'s default settings
        for these are unworkably small.
-->
<literal>shared_memory_type</literal>を<literal>sysv</literal>に設定していない限り、通常はデフォルトの共有メモリ設定で十分です。
ただし、<literal>kern.seminfo.semmni</literal>と<literal>kern.seminfo.semmns</literal>を増やす必要があります。
<systemitem class="osname">OpenBSD</systemitem>のデフォルト設定では実用的でないほど小さいためです。
       </para>

       <para>
<!--
        IPC parameters can be adjusted using <command>sysctl</command>,
        for example:
-->
以下の例のようにIPCパラメータを<command>sysctl</command>を用いて調整することができます。
<screen>
<prompt>#</prompt> <userinput>sysctl kern.seminfo.semmni=100</userinput>
</screen>
<!--
        To make these settings persist over reboots, modify
        <filename>/etc/sysctl.conf</filename>.
-->
これらの設定を再起動しても永続化するには、<filename>/etc/sysctl.conf</filename>を変更します。
       </para>

      </listitem>
     </varlistentry>

     <varlistentry>
      <term><systemitem class="osname">Linux</systemitem>
      <indexterm><primary>Linux</primary><secondary>IPC configuration</secondary></indexterm>
      <indexterm><primary>Linux</primary><secondary>IPC設定</secondary></indexterm>
      </term>
      <listitem>
       <para>
<!--
        The default shared memory settings are usually good enough, unless
        you have set <literal>shared_memory_type</literal> to <literal>sysv</literal>,
        and even then only on older kernel versions that shipped with low defaults.
        System V semaphores are not used on this platform.
-->
<literal>shared_memory_type</literal>を<literal>sysv</literal>に設定していて、低いデフォルトで出荷されたより古いカーネルバージョンでない限り、通常はデフォルトの共有メモリ設定で十分です。
System V セマフォはこのプラットフォームでは使用しません。
       </para>

       <para>
<!--
        The shared memory size settings can be changed via the
        <command>sysctl</command> interface.  For example, to allow 16 GB:
-->
共有メモリサイズの設定は<command>sysctl</command>インタフェースを使用して変更可能です。
例えば16ギガバイトまで許すには以下のようにします。
<screen>
<prompt>$</prompt> <userinput>sysctl -w kernel.shmmax=17179869184</userinput>
<prompt>$</prompt> <userinput>sysctl -w kernel.shmall=4194304</userinput>
</screen>
<!--
        To make these settings persist over reboots, see
        <filename>/etc/sysctl.conf</filename>.
-->
これらの設定を再起動しても永続化するには、<filename>/etc/sysctl.conf</filename>を参照してください。
       </para>

      </listitem>
     </varlistentry>


     <varlistentry>
      <term><systemitem class="osname">macOS</systemitem>
      <indexterm><primary>macOS</primary><secondary>IPC configuration</secondary></indexterm>
      <indexterm><primary>macOS</primary><secondary>IPC設定</secondary></indexterm>
      </term>
      <listitem>
       <para>
<!--
        The default shared memory and semaphore settings are usually good enough, unless
        you have set <literal>shared_memory_type</literal> to <literal>sysv</literal>.
-->
<literal>shared_memory_type</literal>を<literal>sysv</literal>に設定していない限り、通常はデフォルトの共有メモリとセマフォ設定で十分です。
       </para>
       <para>
<!--
        The recommended method for configuring shared memory in macOS
        is to create a file named <filename>/etc/sysctl.conf</filename>,
        containing variable assignments such as:
-->
macOSにおける共有メモリの推奨設定方法は、以下のような変数代入文からなる<filename>/etc/sysctl.conf</filename>という名称のファイルを作成することです。
<programlisting>
kern.sysv.shmmax=4194304
kern.sysv.shmmin=1
kern.sysv.shmmni=32
kern.sysv.shmseg=8
kern.sysv.shmall=1024
</programlisting>
<!--
        Note that in some macOS versions,
        <emphasis>all five</emphasis> shared-memory parameters must be set in
        <filename>/etc/sysctl.conf</filename>, else the values will be ignored.
-->
一部のバージョンのmacOSでは<filename>/etc/sysctl.conf</filename>内に共有メモリパラメータ<emphasis>5つすべて</emphasis>を設定しなければならないという点に注意してください。
さもなくば値が無視されます。
       </para>

       <para>
<!--
        <varname>SHMMAX</varname> can only be set to a multiple of 4096.
-->
<varname>SHMMAX</varname>は4096の倍数のみ設定できます。
       </para>

       <para>
<!--
        <varname>SHMALL</varname> is measured in 4 kB pages on this platform.
-->
このプラットフォームでは<varname>SHMALL</varname>は4キロバイトページ単位です。
       </para>

       <para>
<!--
        It is possible to change all but <varname>SHMMNI</varname> on the fly, using
        <application>sysctl</application>.  But it's still best to set up your preferred
        values via <filename>/etc/sysctl.conf</filename>, so that the values will be
        kept across reboots.
-->
<varname>SHMMNI</varname>以外の変更は、<application>sysctl</application>を用いることにより、その場でおこなうことができます。
しかしいずれにせよ<filename>/etc/sysctl.conf</filename>経由で望む値に設定することが最善です。
再起動を行っても値が保持されるからです。
       </para>

      </listitem>
     </varlistentry>

     <varlistentry>
      <term><systemitem class="osname">Solaris</systemitem></term>
      <term><systemitem class="osname">illumos</systemitem></term>
      <listitem>
       <para>
<!--
        The default shared memory and semaphore settings are usually good enough for most
        <productname>PostgreSQL</productname> applications.  Solaris defaults
        to a <varname>SHMMAX</varname> of one-quarter of system <acronym>RAM</acronym>.
        To further adjust this setting, use a project setting associated
        with the <literal>postgres</literal> user.  For example, run the
        following as <literal>root</literal>:
-->
大抵の<productname>PostgreSQL</productname>アプリケーションではデフォルトの共有メモリとセマフォ設定で十分です。
Solarisのデフォルトの<varname>SHMMAX</varname>はシステムの<acronym>RAM</acronym>の1/4になりました。
さらにこの設定を調整するためには、<literal>postgres</literal>ユーザに関するプロジェクト設定を使用しなければなりません。
例えば以下を<literal>root</literal>権限で実行してください。
<programlisting>
projadd -c "PostgreSQL DB User" -K "project.max-shm-memory=(privileged,8GB,deny)" -U postgres -G postgres user.postgres
</programlisting>
       </para>

       <para>
<!--
        This command adds the <literal>user.postgres</literal> project and
        sets the shared memory maximum for the <literal>postgres</literal>
        user to 8GB, and takes effect the next time that user logs
        in, or when you restart <productname>PostgreSQL</productname> (not reload).
        The above assumes that <productname>PostgreSQL</productname> is run by
        the <literal>postgres</literal> user in the <literal>postgres</literal>
        group.  No server reboot is required.
-->
このコマンドは<literal>user.postgres</literal>プロジェクトを追加し、<literal>postgres</literal>ユーザの共有メモリの最大サイズを8GBに設定します。
この影響は次にこのユーザがログインした時、または<productname>PostgreSQL</productname>を再起動した時（再読み込み時ではありません）に有効になります。
上では<productname>PostgreSQL</productname>は<literal>postgres</literal>グループに属する<literal>postgres</literal>ユーザにより実行されていることを前提としています。
サーバの再起動は不要です。
       </para>

       <para>
<!--
        Other recommended kernel setting changes for database servers which will
        have a large number of connections are:
-->
多くの接続を受け付けるデータベースサーバにおいて推奨するカーネル設定にはこの他に以下があります。
<programlisting>
project.max-shm-ids=(priv,32768,deny)
project.max-sem-ids=(priv,4096,deny)
project.max-msg-ids=(priv,4096,deny)
</programlisting>
       </para>

       <para>
<!--
        Additionally, if you are running <productname>PostgreSQL</productname>
        inside a zone, you may need to raise the zone resource usage
        limits as well.  See "Chapter2:  Projects and Tasks" in the
        <citetitle>System Administrator's Guide</citetitle> for more
        information on <literal>projects</literal> and <command>prctl</command>.
-->
さらに、ゾーン内で<productname>PostgreSQL</productname>を実行している場合、ゾーンのリソース使用上限も上げる必要があるかもしれません。
<literal>projects</literal>と<command>prctl</command>については<citetitle>System Administrator's Guide</citetitle>の第2章 プロジェクトとタスクを参照してください。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>

  </sect2>

  <sect2 id="systemd-removeipc">
   <title>systemd RemoveIPC</title>

   <indexterm>
    <primary>systemd</primary>
    <secondary>RemoveIPC</secondary>
   </indexterm>

   <para>
<!--
    If <productname>systemd</productname> is in use, some care must be taken
    that IPC resources (including shared memory) are not prematurely
    removed by the operating system.  This is especially of concern when
    installing PostgreSQL from source.  Users of distribution packages of
    PostgreSQL are less likely to be affected, as
    the <literal>postgres</literal> user is then normally created as a system
    user.
-->
<productname>systemd</productname>が使用されている場合、（共有メモリを含む）IPCリソースがオペレーティングシステムによって時期尚早に削除されないように注意する必要があります。
これはPostgreSQLをソースからインストールした場合に特に重要です。
PostgreSQLのディストリビューションパッケージのユーザは、通常<literal>postgres</literal>ユーザがシステムユーザで作成されるため、影響を受けにくいでしょう。
   </para>

   <para>
<!--
    The setting <literal>RemoveIPC</literal>
    in <filename>logind.conf</filename> controls whether IPC objects are
    removed when a user fully logs out.  System users are exempt.  This
    setting defaults to on in stock <productname>systemd</productname>, but
    some operating system distributions default it to off.
-->
<filename>logind.conf</filename>の<literal>RemoveIPC</literal>の設定はユーザが完全にログアウトしたときにIPCオブジェクトを削除するかどうかを制御します。
システムユーザは免除されます。
この設定のデフォルトは<productname>systemd</productname>ですが、いくつかのオペレーティングシステムではデフォルトでオフになっています。
   </para>

   <para>
<!--
    A typical observed effect when this setting is on is that shared memory
    objects used for parallel query execution are removed at apparently random
    times, leading to errors and warnings while attempting to open and remove
    them, like
-->
この設定が有効になっている時の典型的な影響は、並列問い合わせの実行で使われる共有メモリオブジェクトが見かけ上ランダムな時間に削除され、共有メモリオブジェクトをオープンしようとしたり、削除しようとしたりした時に以下のようなエラーや警告が出ることです。
<screen>
WARNING:  could not remove shared memory segment "/PostgreSQL.1450751626": No such file or directory
</screen>
<!--
    Different types of IPC objects (shared memory vs. semaphores, System V
    vs. POSIX) are treated slightly differently
    by <productname>systemd</productname>, so one might observe that some IPC
    resources are not removed in the same way as others.  But it is not
    advisable to rely on these subtle differences.
-->
IPCオブジェクトの違い（共有メモリ vs. セマフォ、System V vs. POSIX）は<productname>systemd</productname>によって若干扱いが異なるため一部のIPCは他のものと違って削除されないことがあります。
しかし、これらの微妙な違いに依存することはお勧めできません。
   </para>

   <para>
<!--
    A <quote>user logging out</quote> might happen as part of a maintenance
    job or manually when an administrator logs in as
    the <literal>postgres</literal> user or something similar, so it is hard
    to prevent in general.
-->
<quote>ユーザログアウト</quote>は、メンテナンスジョブの一環として、又は手動で、管理者が<literal>postgres</literal>ユーザや類似のユーザでログインする可能性があるため、一般的に防止することは困難です。
   </para>

   <para>
<!--
    What is a <quote>system user</quote> is determined
    at <productname>systemd</productname> compile time from
    the <symbol>SYS_UID_MAX</symbol> setting
    in <filename>/etc/login.defs</filename>.
-->
<quote>システムユーザ</quote>は、<filename>/etc/login.defs</filename>の<symbol>SYS_UID_MAX</symbol>の設定により<productname>systemd</productname>のコンパイル時に決定されます。
   </para>

   <para>
<!--
    Packaging and deployment scripts should be careful to create
    the <literal>postgres</literal> user as a system user by
    using <literal>useradd -r</literal>, <literal>adduser &#45;-system</literal>,
    or equivalent.
-->
パッケージとデプロイスクリプトは、<literal>useradd -r</literal>, <literal>adduser --system</literal>又は同等のコマンドを使用して<literal>postgres</literal>ユーザを作成するように注意する必要があります。
   </para>

   <para>
<!--
    Alternatively, if the user account was created incorrectly or cannot be
    changed, it is recommended to set
-->
また、ユーザアカウントが誤って作成されて変更出来ないような場合は、以下を設定することを推奨します。
<programlisting>
RemoveIPC=no
</programlisting>
<!--
    in <filename>/etc/systemd/logind.conf</filename> or another appropriate
    configuration file.
-->
<filename>/etc/systemd/logind.conf</filename>又はその他の設定ファイルで上記を入れます。
   </para>

   <caution>
    <para>
<!--
     At least one of these two things has to be ensured, or the PostgreSQL
     server will be very unreliable.
-->
これらの２つのうち少なくとも１つが保証されてないとなりません。そうでないとPostgreSQLサーバは非常に信頼性が低くなります。
    </para>
   </caution>
  </sect2>

  <sect2 id="kernel-resources-limits">
<!--
   <title>Resource Limits</title>
-->
   <title>リソースの制限</title>

   <para>
<!--
    Unix-like operating systems enforce various kinds of resource limits
    that might interfere with the operation of your
    <productname>PostgreSQL</productname> server. Of particular
    importance are limits on the number of processes per user, the
    number of open files per process, and the amount of memory available
    to each process. Each of these have a <quote>hard</quote> and a
    <quote>soft</quote> limit. The soft limit is what actually counts
    but it can be changed by the user up to the hard limit. The hard
    limit can only be changed by the root user. The system call
    <function>setrlimit</function> is responsible for setting these
    parameters. The shell's built-in command <command>ulimit</command>
    (Bourne shells) or <command>limit</command> (<application>csh</application>) is
    used to control the resource limits from the command line. On
    BSD-derived systems the file <filename>/etc/login.conf</filename>
    controls the various resource limits set during login. See the
    operating system documentation for details. The relevant
    parameters are <varname>maxproc</varname>,
    <varname>openfiles</varname>, and <varname>datasize</varname>. For
    example:
-->
Unixライクなオペレーティングシステムでは<productname>PostgreSQL</productname>サーバの操作と関係する可能性のある様々な種類のリソース制限があります。
特に重要なのは、ユーザごとのプロセス数の制限、プロセスごとのオープンファイルの数、プロセスごとの利用可能なメモリの量です。
これらのそれぞれが<quote>ハード</quote>と<quote>ソフト</quote>の2つの制限を持っています。
ソフト制限が実際に有効な制限ですが、ユーザによってハード制限まで変えることが可能です。
ハード制限はrootユーザによってのみ変えることができます。
<function>setrlimit</function>システムコールがこれらのパラメータの設定を行います。
シェルの組み込みコマンド<command>ulimit</command>（Bourne シェル）もしくは<command>limit</command>（<application>csh</application>）は、コマンドラインからリソース制限を制御するために使われます。
BSD派生システム上では<filename>/etc/login.conf</filename>ファイルが、ログイン時に設定される様々なリソース制限を制御します。
詳細はオペレーティングシステムの文書を参照してください。
関連するパラメータは<varname>maxproc</varname>、<varname>openfiles</varname>、<varname>datasize</varname>です。
以下に例を示します。
<programlisting>
default:\
...
        :datasize-cur=256M:\
        :maxproc-cur=256:\
        :openfiles-cur=256:\
...
</programlisting>
<!--
    (<literal>-cur</literal> is the soft limit.  Append
    <literal>-max</literal> to set the hard limit.)
-->
（<literal>-cur</literal>はソフト制限です。
ハード制限を設定するためには<literal>-max</literal>を付けてください。）
   </para>

   <para>
<!--
    Kernels can also have system-wide limits on some resources.
-->
カーネルはいくつかのリソースに対して、システム全体の制限も持つことができます。
    <itemizedlist>
     <listitem>
      <para>
<!--
      On <productname>Linux</productname> the kernel parameter
      <varname>fs.file-max</varname> determines the maximum number of open
      files that the kernel will support.  It can be changed with
      <literal>sysctl -w fs.file-max=<replaceable>N</replaceable></literal>.
      To make the setting persist across reboots, add an assignment
      in <filename>/etc/sysctl.conf</filename>.
      The maximum limit of files per process is fixed at the time the
      kernel is compiled; see
      <filename>/usr/src/linux/Documentation/proc.txt</filename> for
      more information.
-->
<productname>Linux</productname>カーネルパラメータ<varname>fs.file-max</varname>は、カーネルがサポートするオープンファイルの最大数を決定します。
これは<literal>sysctl-w fs.file-max=<replaceable>N</replaceable></literal>で変更できます。
再起動後もこの設定を保持するには、<filename>/etc/sysctl.conf</filename>に割り当てを追加します。
プロセスあたりのファイル数の上限は、カーネルのコンパイル時に固定されます。
詳細は<filename>/usr/src/linux/Documentation/proc.txt</filename>を参照してください。
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
<!--
    The <productname>PostgreSQL</productname> server uses one process
    per connection so you should provide for at least as many processes
    as allowed connections, in addition to what you need for the rest
    of your system.  This is usually not a problem but if you run
    several servers on one machine things might get tight.
-->
<productname>PostgreSQL</productname>サーバは接続ごとに1つのプロセスを使うので、少なくとも許可された接続の数だけのプロセスに残りのシステムで必要な分を追加したものが必要になります。
通常はこれは問題ではありませんが、1つのマシン上でいくつかのサーバを起動している場合は厳しい状況になるかもしれません。
   </para>

   <para>
<!--
    The factory default limit on open files is often set to
    <quote>socially friendly</quote> values that allow many users to
    coexist on a machine without using an inappropriate fraction of
    the system resources.  If you run many servers on a machine this
    is perhaps what you want, but on dedicated servers you might want to
    raise this limit.
-->
オープンファイルの制限の出荷時のデフォルトは、しばしば大多数のユーザはマシン上でシステムリソースの不正使用をしないという前堤に立った<quote>社会的に友好的な</quote>値を設定してしまいます。
もし1つのマシン上で複数のサーバを起動する場合はそれが必要でしょうが、専用サーバではこの制限を上げたいかもしれません。
   </para>

   <para>
<!--
    On the other side of the coin, some systems allow individual
    processes to open large numbers of files; if more than a few
    processes do so then the system-wide limit can easily be exceeded.
    If you find this happening, and you do not want to alter the
    system-wide limit, you can set <productname>PostgreSQL</productname>'s <xref
    linkend="guc-max-files-per-process"/> configuration parameter to
    limit the consumption of open files.
-->
反対に、個々のプロセスが多数のファイルをオープンすることを許可するシステムもあります。
そのようなプロセスが数個以上あれば、システム全体の制限は簡単に超えてしまいます。
この発生を検知し、システム全体の制限の変更を望まない場合は、<productname>PostgreSQL</productname>の<xref linkend="guc-max-files-per-process"/>設定パラメータを設定し、オープンファイルの消費を制限することができます。
   </para>

   <para>
<!--
    Another kernel limit that may be of concern when supporting large
    numbers of client connections is the maximum socket connection queue
    length.  If more than that many connection requests arrive within a very
    short period, some may get rejected before the <productname>PostgreSQL</productname> server can service
    the requests, with those clients receiving unhelpful connection failure
    errors such as <quote>Resource temporarily unavailable</quote> or
    <quote>Connection refused</quote>.  The default queue length limit is 128
    on many platforms.  To raise it, adjust the appropriate kernel parameter
    via <application>sysctl</application>, then restart the <productname>PostgreSQL</productname> server.
    The parameter is variously named <varname>net.core.somaxconn</varname>
    on Linux, <varname>kern.ipc.soacceptqueue</varname> on newer FreeBSD,
    and <varname>kern.ipc.somaxconn</varname> on macOS and other BSD
    variants.
-->
多数のクライアント接続をサポートする場合に懸念されるもう1つのカーネル制限は、ソケット接続キューの最大長です。
非常に短い時間内にそれ以上の数の接続要求が到着すると、<productname>PostgreSQL</productname>サーバが要求を処理する前に一部が拒否される可能性があります。
これらのクライアントは<quote>Resource temporarily unavailable</quote>や<quote>Connection refused</quote>などの役に立たない接続失敗エラーを受け取ります。
多くのプラットフォームでデフォルトのキュー長制限は128です。
これを上げるには<application>sysctl</application>で適切なカーネルパラメータを調整し、<productname>PostgreSQL</productname>サーバを再起動します。
このパラメータはLinuxでは<varname>net.core.somaxconn</varname>、新しいFreeBSDでは<varname>kern.ipc.soacceptqueue</varname>、macOSや他のBSD系では<varname>kern.ipc.somaxconn</varname>と様々な名前が付けられています。
   </para>
  </sect2>

  <sect2 id="linux-memory-overcommit">
<!--
   <title>Linux Memory Overcommit</title>
-->
   <title>Linuxのメモリオーバーコミット</title>

   <indexterm>
    <primary>memory overcommit</primary>
   </indexterm>
   <indexterm>
    <primary>メモリオーバーコミット</primary>
   </indexterm>

   <indexterm>
    <primary>OOM</primary>
   </indexterm>

   <indexterm>
    <primary>overcommit</primary>
   </indexterm>
   <indexterm>
    <primary>オーバーコミット</primary>
   </indexterm>

   <para>
<!--
    The default virtual memory behavior on Linux is not
    optimal for <productname>PostgreSQL</productname>. Because of the
    way that the kernel implements memory overcommit, the kernel might
    terminate the <productname>PostgreSQL</productname> postmaster (the
    supervisor server process) if the memory demands of either
    <productname>PostgreSQL</productname> or another process cause the
    system to run out of virtual memory.
-->
Linuxでのデフォルトの仮想メモリの動作は<productname>PostgreSQL</productname>には最適ではありません。
カーネルがメモリオーバーコミットを実装する方法のため、カーネルは、<productname>PostgreSQL</productname>や他のプロセスのメモリ要求がシステムの仮想メモリを枯渇させた場合、<productname>PostgreSQL</productname> postmaster （スーパーバイザサーバプロセス）を終了させる可能性があります。
   </para>

   <para>
<!--
    If this happens, you will see a kernel message that looks like
    this (consult your system documentation and configuration on where
    to look for such a message):
-->
これが発生した場合、以下のようなカーネルメッセージが現れます
（こうしたメッセージを検索する場所についてはシステム文書と設定を参照してください）。
<programlisting>
Out of Memory: Killed process 12345 (postgres).
</programlisting>
<!--
    This indicates that the <filename>postgres</filename> process
    has been terminated due to memory pressure.
    Although existing database connections will continue to function
    normally, no new connections will be accepted.  To recover,
    <productname>PostgreSQL</productname> will need to be restarted.
-->
これは、<filename>postgres</filename>プロセスがメモリ不足のために終了してしまったことを示します。
起動中のデータベース接続は正常に動作しますが、新しい接続は受け付けられません。
復旧するには、<productname>PostgreSQL</productname>を再起動しなければなりません。
   </para>

   <para>
<!--
    One way to avoid this problem is to run
    <productname>PostgreSQL</productname> on a machine where you can
    be sure that other processes will not run the machine out of
    memory.  If memory is tight, increasing the swap space of the
    operating system can help avoid the problem, because the
    out-of-memory (OOM) killer is invoked only when physical memory and
    swap space are exhausted.
-->
この問題を防止する1つの方法として、<productname>PostgreSQL</productname>を他のプロセスがそのマシンのメモリを枯渇させないことが確実なマシンで起動するというものがあります。
物理メモリとスワップ領域が消費尽くされた時のみにメモリ不足（OOM）killerが発生するため、メモリが不足する場合、オペレーティングシステムのスワップ領域を増やすことが問題解決の役にたちます。
   </para>

   <para>
<!--
    If <productname>PostgreSQL</productname> itself is the cause of the
    system running out of memory, you can avoid the problem by changing
    your configuration.  In some cases, it may help to lower memory-related
    configuration parameters, particularly
    <link linkend="guc-shared-buffers"><varname>shared_buffers</varname></link>,
    <link linkend="guc-work-mem"><varname>work_mem</varname></link>, and
    <link linkend="guc-hash-mem-multiplier"><varname>hash_mem_multiplier</varname></link>.
    In other cases, the problem may be caused by allowing too many
    connections to the database server itself.  In many cases, it may
    be better to reduce
    <link linkend="guc-max-connections"><varname>max_connections</varname></link>
    and instead make use of external connection-pooling software.
-->
<productname>PostgreSQL</productname>自体が実行中のシステムのメモリ不足を引き起こした場合、設定を変更することで問題を防止することができます。
場合によっては、メモリ関連の設定パラメータ、<link linkend="guc-shared-buffers"><varname>shared_buffers</varname></link>、<link linkend="guc-work-mem"><varname>work_mem</varname></link>および<link linkend="guc-hash-mem-multiplier"><varname>hash_mem_multiplier</varname></link>を低くすることで回避できる場合もあります。
この他にもデータベースサーバ自体への接続を多く許可しすぎることで問題が引き起こされる場合もあります。
多くの場合、<link linkend="guc-max-connections"><varname>max_connections</varname></link>を減らし、外部のコネクションプールソフトウェアを使用することで改善されます。
   </para>

   <para>
<!--
    It is possible to modify the
    kernel's behavior so that it will not <quote>overcommit</quote> memory.
    Although this setting will not prevent the <ulink
    url="https://lwn.net/Articles/104179/">OOM killer</ulink> from being invoked
    altogether, it will lower the chances significantly and will therefore
    lead to more robust system behavior.  This is done by selecting strict
    overcommit mode via <command>sysctl</command>:
-->
メモリを<quote>オーバーコミット</quote>させないようにカーネルの動作を変更することができます。
この設定は完全に<ulink url="https://lwn.net/Articles/104179/">OOM killer</ulink>の発生を防ぐことはできませんが、その発生頻度をかなり軽減しますので、システム動作の堅牢性をより高めます。
これは、以下のように<command>sysctl</command>を使用して厳密なオーバーコミットモードを選択することで実施されます。
<programlisting>
sysctl -w vm.overcommit_memory=2
</programlisting>
<!--
    or placing an equivalent entry in <filename>/etc/sysctl.conf</filename>.
    You might also wish to modify the related setting
    <varname>vm.overcommit_ratio</varname>.  For details see the kernel documentation
    file <ulink url="https://www.kernel.org/doc/Documentation/vm/overcommit-accounting"></ulink>.
-->
または<filename>/etc/sysctl.conf</filename>に同等のエントリを配置します。
また、関連する<varname>vm.overcommit_ratio</varname>設定を変更した方が良いでしょう。
詳細はカーネル文書ファイル<ulink url="https://www.kernel.org/doc/Documentation/vm/overcommit-accounting"></ulink>を参照してください。
   </para>

   <para>
<!--
    Another approach, which can be used with or without altering
    <varname>vm.overcommit_memory</varname>, is to set the process-specific
    <firstterm>OOM score adjustment</firstterm> value for the postmaster process to
    <literal>-1000</literal>, thereby guaranteeing it will not be targeted by the OOM
    killer.  The simplest way to do this is to execute
-->
<varname>vm.overcommit_memory</varname>の変更と関係なく使用できるその他の方法は、プロセス固有の<firstterm>OOMスコア調整</firstterm>値をpostmasterプロセス向けに<literal>-1000</literal>に設定することです。
これによりOOM killerの対象とならないことが保証されます。
このための最も簡単な方法は以下を<productname>PostgreSQL</productname>の起動スクリプト内で<filename>postgres</filename>を実行する直前に実行することです。
<programlisting>
echo -1000 > /proc/self/oom_score_adj
</programlisting>
<!--
    in the <productname>PostgreSQL</productname> startup script just before
    invoking <filename>postgres</filename>.
    Note that this action must be done as root, or it will have no effect;
    so a root-owned startup script is the easiest place to do it.  If you
    do this, you should also set these environment variables in the startup
    script before invoking <filename>postgres</filename>:
-->
この作業をrootで実行しなければならないことに注意して下さい。
さもないと効果がありません。
このためrootが所有する起動スクリプトが、これを行うための最も簡単な場所です。
その場合には、起動スクリプトの<filename>postgres</filename>の起動前に以下の環境変数を設定することも推奨します。
<programlisting>
export PG_OOM_ADJUST_FILE=/proc/self/oom_score_adj
export PG_OOM_ADJUST_VALUE=0
</programlisting>
<!--
    These settings will cause postmaster child processes to run with the
    normal OOM score adjustment of zero, so that the OOM killer can still
    target them at need.  You could use some other value for
    <envar>PG_OOM_ADJUST_VALUE</envar> if you want the child processes to run
    with some other OOM score adjustment.  (<envar>PG_OOM_ADJUST_VALUE</envar>
    can also be omitted, in which case it defaults to zero.)  If you do not
    set <envar>PG_OOM_ADJUST_FILE</envar>, the child processes will run with the
    same OOM score adjustment as the postmaster, which is unwise since the
    whole point is to ensure that the postmaster has a preferential setting.
-->
これらの設定は、いざという時にpostmasterの子プロセスをOOM killerのターゲットに出来るようにOOMスコア調整を通常のゼロで実行します。
子プロセスを他のOOMスコア調整で実行したい場合には、<envar>PG_OOM_ADJUST_VALUE</envar>により別の値にすることが出来ます。
（<envar>PG_OOM_ADJUST_VALUE</envar>は省略することが出来て、その場合はデフォルトのゼロになります。）
<envar>PG_OOM_ADJUST_FILE</envar>を設定しない場合、子プロセスはpostmasterと同じOOMスコア調整で実行されますが、postmasterが優先される設定にすることが肝心なので、それは賢明とは言えません。
   </para>

  </sect2>

  <sect2 id="linux-huge-pages">
<!--
   <title>Linux Huge Pages</title>
-->
   <title>LinuxのHugePages</title>

   <para>
<!--
    Using huge pages reduces overhead when using large contiguous chunks of
    memory, as <productname>PostgreSQL</productname> does, particularly when
    using large values of <xref linkend="guc-shared-buffers"/>.  To use this
    feature in <productname>PostgreSQL</productname> you need a kernel
    with <varname>CONFIG_HUGETLBFS=y</varname> and
    <varname>CONFIG_HUGETLB_PAGE=y</varname>. You will also have to configure
    the operating system to provide enough huge pages of the desired size.
    The runtime-computed parameter
    <xref linkend="guc-shared-memory-size-in-huge-pages"/> reports the number
    of huge pages required.  This parameter can be viewed before starting the
    server with a <command>postgres</command> command like:
-->
<productname>PostgreSQL</productname>のように、メモリの大きな連続チャンクを使用するとき、特に<xref linkend="guc-shared-buffers"/>の値が大きい場合に、huge pagesを使用するとオーバーヘッドが減少します。
<productname>PostgreSQL</productname>でこの機能を有効にするには、<varname>CONFIG_HUGETLBFS=y</varname>および<varname>CONFIG_HUGETLB_PAGE=y</varname>としたカーネルが必要です。
また、要求される十分な量だけhuge pagesを提供するようにオペレーティングシステムを調整する必要があるでしょう。
実行時に計算されるパラメータ<xref linkend="guc-shared-memory-size-in-huge-pages"/>は、要求されるhuge pages数を報告します。
このパラメータは、サーバの開始前に<command>postgres</command>コマンドで次のようにして見ることができます。
<programlisting>
$ <userinput>postgres -D $PGDATA -C shared_memory_size_in_huge_pages</userinput>
3170
$ <userinput>grep ^Hugepagesize /proc/meminfo</userinput>
Hugepagesize:       2048 kB
$ <userinput>ls /sys/kernel/mm/hugepages</userinput>
hugepages-1048576kB  hugepages-2048kB
</programlisting>

<!--
     In this example the default is 2MB, but you can also explicitly request
     either 2MB or 1GB with <xref linkend="guc-huge-page-size"/> to adapt
     the number of pages calculated by
     <varname>shared_memory_size_in_huge_pages</varname>.
-->
この例ではデフォルトは2MBですが、明示的に2MBまたは1GBを<xref linkend="guc-huge-page-size"/>で要求して、<varname>shared_memory_size_in_huge_pages</varname>で計算されたページ数を調整することもできます。

<!--
     While we need at least <literal>3170</literal> huge pages in this example,
     a larger setting would be appropriate if other programs on the machine
     also need huge pages.
     We can set this with:
-->
この例では少なくとも<literal>3170</literal>のhuge pageが必要ですが、マシン上の他のプログラムもhuge pageを必要とする場合には、より大きな設定が適切です。
これは以下のように設定できます。
<programlisting>
# <userinput>sysctl -w vm.nr_hugepages=3170</userinput>
</programlisting>
<!--
     Don't forget to add this setting to <filename>/etc/sysctl.conf</filename>
     so that it is reapplied after reboots.  For non-default huge page sizes,
     we can instead use:
-->
再起動後にこの設定が行われるように、<filename>/etc/sysctl.conf</filename>にこの設定を追加するのを忘れないようにしましょう。
非標準のhuge pageサイズなら、代わりに以下のようにできます。
<programlisting>
# <userinput>echo 3170 > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages</userinput>
</programlisting>
<!--
    It is also possible to provide these settings at boot time using
    kernel parameters such as <literal>hugepagesz=2M hugepages=3170</literal>.
-->
<literal>hugepagesz=2M hugepages=3170</literal>のようにして、起動時にカーネルパラメータとしてこれらの設定を与えることもできます。
   </para>

   <para>
<!--
    Sometimes the kernel is not able to allocate the desired number of huge
    pages immediately due to fragmentation, so it might be necessary
    to repeat the command or to reboot.  (Immediately after a reboot, most of
    the machine's memory should be available to convert into huge pages.)
    To verify the huge page allocation situation for a given size, use:
-->
時には、断片化のためにカーネルは求められた数のhuge pagesを直ちには割り当てることができないことがあるので、そのコマンドを繰り返すか、再起動する必要があるかもしれません。
（再起動の直後は、マシンのメモリの大部分はhuge pagesへの変更が可能なはずです。）
指定サイズに対するhuge pagesの割り当ての状況を確認するには、次のようにします。
<programlisting>
$ <userinput>cat /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages</userinput>
</programlisting>
   </para>

   <para>
<!--
    It may also be necessary to give the database server's operating system
    user permission to use huge pages by setting
    <varname>vm.hugetlb_shm_group</varname> via <application>sysctl</application>, and/or
    give permission to lock memory with <command>ulimit -l</command>.
-->
<application>sysctl</application>を使って<varname>vm.hugetlb_shm_group</varname>を設定する、あるいは<command>ulimit -l</command>でメモリをロックする権限を与えることで、データベースサーバのOSユーザにhuge pagesを使用する権限を与える必要もあるかもしれません。
   </para>

   <para>
<!--
    The default behavior for huge pages in
    <productname>PostgreSQL</productname> is to use them when possible, with
    the system's default huge page size, and
    to fall back to normal pages on failure. To enforce the use of huge
    pages, you can set <xref linkend="guc-huge-pages"/>
    to <literal>on</literal> in <filename>postgresql.conf</filename>.
    Note that with this setting <productname>PostgreSQL</productname> will fail to
    start if not enough huge pages are available.
-->
<productname>PostgreSQL</productname>のhuge pagesのデフォルトの動作は、可能な場合はシステムのデフォルトサイズのhuge pagesを使用し、失敗した場合は通常のページを使用します。
<filename>postgresql.conf</filename>で<xref linkend="guc-huge-pages"/>を<literal>on</literal>に設定することで、huge pagesの使用を強制することができます。
この設定の場合、十分なhuge pagesが確保できなければ、<productname>PostgreSQL</productname>の起動に失敗することに注意してください。
   </para>

   <para>
<!--
    For a detailed description of the <productname>Linux</productname> huge
    pages feature have a look
    at <ulink url="https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt"></ulink>.
-->
<productname>Linux</productname>のhuge pages機能の詳細は<ulink url="https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt"></ulink>を参照してください。
   </para>

  </sect2>
 </sect1>


 <sect1 id="server-shutdown">
<!--
  <title>Shutting Down the Server</title>
-->
  <title>サーバのシャットダウン</title>

  <indexterm zone="server-shutdown">
   <primary>shutdown</primary>
  </indexterm>
  <indexterm zone="server-shutdown">
   <primary>シャットダウン</primary>
  </indexterm>

  <para>
<!--
   There are several ways to shut down the database server.
   Under the hood, they all reduce to sending a signal to the supervisor
   <command>postgres</command> process.
-->
データベースサーバをシャットダウンする方法は複数あります。
内部的には、これらはすべてスーパーバイザの<command>postgres</command>プロセスにシグナルを送信することになります。
  </para>

  <para>
<!--
   If you are using a pre-packaged version
   of <productname>PostgreSQL</productname>, and you used its provisions
   for starting the server, then you should also use its provisions for
   stopping the server.  Consult the package-level documentation for
   details.
-->
パッケージ化された版の<productname>PostgreSQL</productname>を使用していて、サーバの起動にその規定を使用した場合は、サーバの停止にもその規定を使用する必要があります。
詳細についてはパッケージレベルのドキュメントを参照してください。
  </para>

  <para>
<!--
   When managing the server directly, you can control the type of shutdown
   by sending different signals to the <command>postgres</command>
   process:
-->
サーバを直接管理する場合は、<command>postgres</command>プロセスに異なるシグナルを送信することで、シャットダウンのタイプを制御できます。

   <variablelist>
    <varlistentry>
     <term><systemitem>SIGTERM</systemitem><indexterm><primary>SIGTERM</primary></indexterm></term>
     <listitem>
      <para>
<!--
       This is the <firstterm>Smart Shutdown</firstterm> mode.
       After receiving <systemitem>SIGTERM</systemitem>, the server
       disallows new connections, but lets existing sessions end their
       work normally. It shuts down only after all of the sessions terminate.
       If the server is in recovery when a smart
       shutdown is requested, recovery and streaming replication will be
       stopped only after all regular sessions have terminated.
-->
これは<firstterm>スマートシャットダウン</firstterm>モードです。
<systemitem>SIGTERM</systemitem>を受信した後、サーバは新しい接続を禁止しますが、既存のセッションは正常に終了させます。
サーバはすべてのセッションが終了した後にのみシャットダウンします。
スマートシャットダウンが要求されたときにサーバがリカバリ中の場合、リカバリとストリーミングレプリケーションはすべての通常セッションが終了した後にのみ停止します。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><systemitem>SIGINT</systemitem><indexterm><primary>SIGINT</primary></indexterm></term>
     <listitem>
      <para>
<!--
       This is the <firstterm>Fast Shutdown</firstterm> mode.
       The server disallows new connections and sends all existing
       server processes <systemitem>SIGTERM</systemitem>, which will cause them
       to abort their current transactions and exit promptly. It then
       waits for all server processes to exit and finally shuts down.
-->
これは<firstterm>高速シャットダウン</firstterm>モードです。
サーバは新しい接続を禁止しすべての存在するサーバプロセスに<systemitem>SIGTERM</systemitem>を送り、この結果サーバプロセスは現在のトランザクションをアボートし、即座に終了します。
そして、サーバはすべてのサーバプロセスの終了を待って、最後にシャットダウンします。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><systemitem>SIGQUIT</systemitem><indexterm><primary>SIGQUIT</primary></indexterm></term>
     <listitem>
      <para>
<!--
      This is the <firstterm>Immediate Shutdown</firstterm> mode.
      The server will send <systemitem>SIGQUIT</systemitem> to all child
      processes and wait for them to terminate.  If any do not terminate
      within 5 seconds, they will be sent <systemitem>SIGKILL</systemitem>.
      The supervisor server process exits as soon as all child processes have
      exited, without doing normal database shutdown processing.
      This will lead to recovery (by
      replaying the WAL log) upon next start-up. This is recommended
      only in emergencies.
-->
これは<firstterm>即時シャットダウン</firstterm>モードです。
サーバは、すべての子プロセスに<systemitem>SIGQUIT</systemitem>を送信し、それらが終了するのを待ちます。
5秒以内に終了しないものには、<systemitem>SIGKILL</systemitem>が送られます。
すべての子プロセスが終了したら、スーパーバイザサーバプロセスはすぐに終了しますが、このとき通常のデータベースのシャットダウン処理を実行しません。
これは次の起動時に（WALログを再実行することで）リカバリをすることになります。
これは緊急の時にのみ使うことを勧めます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

  <para>
<!--
   The <xref linkend="app-pg-ctl"/> program provides a convenient
   interface for sending these signals to shut down the server.
   Alternatively, you can send the signal directly using <command>kill</command>
   on non-Windows systems.
   The <acronym>PID</acronym> of the <command>postgres</command> process can be
   found using the <command>ps</command> program, or from the file
   <filename>postmaster.pid</filename> in the data directory. For
   example, to do a fast shutdown:
-->
<xref linkend="app-pg-ctl"/>プログラムは、サーバをシャットダウンさせるシグナルを送信するための便利なインタフェースを提供します。
他にも、Windows以外のシステムでは<command>kill</command>を使用して直接シグナルを送信することもできます。
<command>postgres</command>プロセスの<acronym>PID</acronym>は、<command>ps</command>プログラム、もしくはデータディレクトリの中の<filename>postmaster.pid</filename>ファイルを使用して見つけることができます。
例えば、高速シャットダウンをするためには下記のようになります。
<screen>
$ <userinput>kill -INT `head -1 /usr/local/pgsql/data/postmaster.pid`</userinput>
</screen>
  </para>

  <important>
   <para>
<!--
    It is best not to use <systemitem>SIGKILL</systemitem> to shut down the
    server.  Doing so will prevent the server from releasing shared memory and
    semaphores.  Furthermore, <systemitem>SIGKILL</systemitem> kills
    the <command>postgres</command> process without letting it relay the
    signal to its subprocesses, so it might be necessary to kill the
    individual subprocesses by hand as well.
-->
サーバをシャットダウンするために<systemitem>SIGKILL</systemitem>を使わない方が良いでしょう。
これによってサーバが共有メモリとセマフォを解放できなくなります。
さらに、<systemitem>SIGKILL</systemitem>は、子プロセスにシグナルを中継することなく<command>postgres</command>を停止させます。
このため、個々の子プロセスを停止させるために、同じ作業を手作業で行わなければならなくなります。
   </para>
  </important>

  <para>
<!--
   To terminate an individual session while allowing other sessions to
   continue, use <function>pg_terminate_backend()</function> (see <xref
   linkend="functions-admin-signal-table"/>) or send a
   <systemitem>SIGTERM</systemitem> signal to the child process associated with
   the session.
-->
他のセッションを継続させながら個別のセッションを停止するには<function>pg_terminate_backend()</function>（<xref linkend="functions-admin-signal-table"/>を参照）を使用するか、そのセッションに関連する子プロセスに<systemitem>SIGTERM</systemitem>シグナルを送ります。
  </para>
 </sect1>

 <sect1 id="upgrading">
<!--
  <title>Upgrading a <productname>PostgreSQL</productname> Cluster</title>
-->
  <title><productname>PostgreSQL</productname>クラスタのアップグレード処理</title>

  <indexterm zone="upgrading">
   <primary>upgrading</primary>
  </indexterm>
  <indexterm zone="upgrading">
   <primary>アップグレード処理</primary>
  </indexterm>

  <indexterm zone="upgrading">
   <primary>version</primary>
   <secondary>compatibility</secondary>
  </indexterm>
  <indexterm zone="upgrading">
   <primary>バージョン</primary>
   <secondary>互換性</secondary>
  </indexterm>

  <para>
<!--
   This section discusses how to upgrade your database data from one
   <productname>PostgreSQL</productname> release to a newer one.
-->
本節では<productname>PostgreSQL</productname>リリースからより新しいリリースにデータベースデータをアップグレードする方法を説明します。
  </para>

  <para>
<!--
   Current <productname>PostgreSQL</productname> version numbers consist of a
   major and a minor version number.  For example, in the version number 10.1,
   the 10 is the major version number and the 1 is the minor version number,
   meaning this would be the first minor release of the major release 10.  For
   releases before <productname>PostgreSQL</productname> version 10.0, version
   numbers consist of three numbers, for example, 9.5.3.  In those cases, the
   major version consists of the first two digit groups of the version number,
   e.g., 9.5, and the minor version is the third number, e.g., 3, meaning this
   would be the third minor release of the major release 9.5.
-->
現在の<productname>PostgreSQL</productname>のバージョン番号はメジャーバージョンとマイナーバージョンのバージョン番号で構成されます。
例えばバージョン番号10.1は、10がメジャーバージョンで、1がマイナーバージョンです。メジャーリリース10の最初のマイナーリリースを意味します。
<productname>PostgreSQL</productname>の10.0より前のバージョンは、３つの番号で構成されています。例えば9.5.3です。
この場合は、メジャーバージョンが最初の２つのグループのバージョン番号、例えば9.5で構成されています。
そしてマイナーバージョンは３つ目の番号で例えば3です。これはメジャーリリース9.5の３番めのマイナーリリースを意味します。
  </para>

  <para>
<!--
   Minor releases never change the internal storage format and are always
   compatible with earlier and later minor releases of the same major version
   number.  For example, version 10.1 is compatible with version 10.0 and
   version 10.6.  Similarly, for example, 9.5.3 is compatible with 9.5.0,
   9.5.1, and 9.5.6.  To update between compatible versions, you simply
   replace the executables while the server is down and restart the server.
   The data directory remains unchanged &mdash; minor upgrades are that
   simple.
-->
マイナーリリースでは内部格納書式が変わることは決してありませんので、同じメジャーバージョンにおける前後のマイナーリリースとの間で常に互換性があります。
例えばバージョン10.1はバージョン10.0やバージョン10.6と互換性があります。
同様に、例えば9.5.3は9.5.0、9.5.1、9.5.6と互換性があります。
互換性があるバージョンとの間で更新するためには、サーバを停止させ、実行ファイルを置き換え、サーバを再起動させるだけです。
データディレクトリはまったく変更されません。
マイナーリリースのアップグレードは簡単です。
  </para>

  <para>
<!--
   For <emphasis>major</emphasis> releases of <productname>PostgreSQL</productname>, the
   internal data storage format is subject to change, thus complicating
   upgrades.  The traditional method for moving data to a new major version
   is to dump and restore the database, though this can be slow.  A
   faster method is <xref linkend="pgupgrade"/>.  Replication methods are
   also available, as discussed below.
   (If you are using a pre-packaged version
   of <productname>PostgreSQL</productname>, it may provide scripts to
   assist with major version upgrades.  Consult the package-level
   documentation for details.)
-->
<productname>PostgreSQL</productname>の<emphasis>メジャー</emphasis>リリースでは、内部データ格納書式は変更されがちです。
したがって、アップグレードは複雑になります。
新しいメジャーバージョンにデータを移行する伝統的な方法は、遅くなることがありますが、データベースをダンプしてリストアすることです。
より速い方法については、<xref linkend="pgupgrade"/>を参照してください。以下で説明するようにレプリケーションを使用する方法もあります。
（パッケージ化された版の<productname>PostgreSQL</productname>を使用している場合は、主要バージョンのアップグレードを支援するスクリプトが提供される場合があります。
詳細についてはパッケージレベルのドキュメントを参照してください。）
  </para>

  <para>
<!--
   New major versions also typically introduce some user-visible
   incompatibilities, so application programming changes might be required.
   All user-visible changes are listed in the release notes (<xref
   linkend="release"/>);  pay particular attention to the section
   labeled "Migration".  Though you can upgrade from one major version
   to another without upgrading to intervening versions, you should read
   the major release notes of all intervening versions.
-->
新しいメジャーバージョンは通常、ユーザにも影響する非互換性がいくつか導入されます。
このためアプリケーションのプログラム変更が必要になる可能性があります。
ユーザに影響する変更はすべてリリースノート（<xref linkend="release"/>）に列挙されています。
「移行」という名前の節に特に注意してください。
あるメジャーバージョンから他のメジャーバージョンへと途中のバージョンを経由しないでアップグレードできますが、途中のバージョンすべてのリリースノートを確認してください。
  </para>

  <para>
<!--
   Cautious users will want to test their client applications on the new
   version before switching over fully; therefore, it's often a good idea to
   set up concurrent installations of old and new versions.  When
   testing a <productname>PostgreSQL</productname> major upgrade, consider the
   following categories of possible changes:
-->
用心深いユーザは、完全に切り替える前に新しいバージョンにおける自身のクライアントアプリケーションを試験したいと考えるでしょう。
このため古いバージョンと新しいバージョンを並行してインストールさせるというのは、よく良い考えとなります。
<productname>PostgreSQL</productname>メジャーアップグレードを試験する時、以下に示す変更があり得る分野を検討してください。
  </para>

  <variablelist>

   <varlistentry>
<!--
    <term>Administration</term>
-->
    <term>管理</term>
    <listitem>
     <para>
<!--
      The capabilities available for administrators to monitor and control
      the server often change and improve in each major release.
-->
各メジャーリリースにおいて、管理者が利用できるサーバの監視、制御機能はよく変更、向上されます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>SQL</term>
    <listitem>
     <para>
<!--
      Typically this includes new SQL command capabilities and not changes
      in behavior, unless specifically mentioned in the release notes.
-->
通常、これには新しいSQLコマンド機能が含まれます。
リリースノートに特に記載がない限りその動作には変更はありません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--
    <term>Library API</term>
-->
    <term>ライブラリAPI</term>
    <listitem>
     <para>
<!--
      Typically libraries like <application>libpq</application> only add new
      functionality, again unless mentioned in the release notes.
-->
繰り返しになりますが、リリースノートに記載がない場合のみですが、通常<application>libpq</application>のようなライブラリには新しい機能が追加されるだけです。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--
    <term>System Catalogs</term>
-->
    <term>システムカタログ</term>
    <listitem>
     <para>
<!--
      System catalog changes usually only affect database management tools.
-->
システムカタログの変更は通常データベース管理用ツールにのみ影響します。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--
    <term>Server C-language API</term>
-->
    <term>サーバC言語API</term>
    <listitem>
     <para>
<!--
      This involves changes in the backend function API, which is written
      in the C programming language.  Such changes affect code that
      references backend functions deep inside the server.
-->
ここには、Cプログラム言語で作成されたバックエンド関数APIにおける変更が含まれます。
こうした変更は、サーバ内部深くにあるバックエンド関数を参照するコードに影響します。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

  <sect2 id="upgrading-via-pgdumpall">
<!--
   <title>Upgrading Data via <application>pg_dumpall</application></title>
-->
   <title><application>pg_dumpall</application>を介したデータのアップグレード</title>

   <para>
<!--
    One upgrade method is to dump data from one major version of
    <productname>PostgreSQL</productname> and restore it in another &mdash;  to do
    this, you must use a <emphasis>logical</emphasis> backup tool like
    <application>pg_dumpall</application>; file system
    level backup methods will not work. (There are checks in place that prevent
    you from using a data directory with an incompatible version of
    <productname>PostgreSQL</productname>, so no great harm can be done by
    trying to start the wrong server version on a data directory.)
-->
<productname>PostgreSQL</productname>のアップグレードの一つの方法は、<productname>PostgreSQL</productname>の１メジャーバージョンからデータをダンプし、別のバージョンにリストアすることです - これを行うには、<application>pg_dumpall</application>のような<emphasis>論理</emphasis>バックアップツールを使用しなければなりません。
ファイルシステムレベルのバックアップ方法は動作しません。
（あるデータディレクトリで間違ったバージョンのサーバを起動しようとして、大きな損害が起こることがないように、適所に互換性がないバージョンの<productname>PostgreSQL</productname>のデータディレクトリが使用されないようにするための検査があります。）
   </para>

   <para>
<!--
    It is recommended that you use the <application>pg_dump</application> and
    <application>pg_dumpall</application> programs from the <emphasis>newer</emphasis>
    version of
    <productname>PostgreSQL</productname>, to take advantage of enhancements
    that might have been made in these programs.  Current releases of the
    dump programs can read data from any server version back to 9.2.
-->
<emphasis>新しい</emphasis>バージョンの<productname>PostgreSQL</productname>の<application>pg_dump</application>と<application>pg_dumpall</application>を使用することを勧めます。
これらのプログラムで拡張された機能を利用する可能性があるためです。
現在のリリースのダンププログラムは9.2以降のバージョンのサーバからデータを読み取ることができます。
   </para>

   <para>
<!--
    These instructions assume that your existing installation is under the
    <filename>/usr/local/pgsql</filename> directory, and that the data area is in
    <filename>/usr/local/pgsql/data</filename>.  Substitute your paths
    appropriately.
-->
以下の手順では、既存のインストレーションが<filename>/usr/local/pgsql</filename>以下にあり、そのデータ領域が<filename>/usr/local/pgsql/data</filename>にあることを前提としています。
使用しているパスに適切に置き換えてください。
   </para>

   <procedure>
    <step>
     <para>
<!--
      If making a backup, make sure that your database is not being updated.
      This does not affect the integrity of the backup, but the changed
      data would of course not be included. If necessary, edit the
      permissions in the file <filename>/usr/local/pgsql/data/pg_hba.conf</filename>
      (or equivalent) to disallow access from everyone except you.
      See <xref linkend="client-authentication"/> for additional information on
      access control.
-->
バックアップを作成する場合、使用しているデータベースが確実に更新されないようにしてください。
これはバックアップの整合性には影響しませんが、当然ながら変更されたデータがバックアップに含まれません。
必要に応じて、<filename>/usr/local/pgsql/data/pg_hba.conf</filename>（またはこれと等価なファイル）における権限を変更して、バックアップを行うユーザ以外からのアクセスを禁止してください。
アクセス制御に関する情報は<xref linkend="client-authentication"/>を参照してください。
     </para>

     <para>
      <indexterm>
       <primary>pg_dumpall</primary>
       <secondary>use during upgrade</secondary>
      </indexterm>
      <indexterm>
       <primary>pg_dumpall</primary>
       <secondary>アップグレード中の使用</secondary>
      </indexterm>

<!--
      To back up your database installation, type:
-->
データベースインストレーションをバックアップするためには以下を入力してください。
<screen>
<userinput>pg_dumpall &gt; <replaceable>outputfile</replaceable></userinput>
</screen>
     </para>

     <para>
<!--
      To make the backup, you can use the <application>pg_dumpall</application>
      command from the version you are currently running;  see <xref
      linkend="backup-dump-all"/> for more details.  For best
      results, however, try to use the <application>pg_dumpall</application>
      command from <productname>PostgreSQL</productname> &version;,
      since this version contains bug fixes and improvements over older
      versions.  While this advice might seem idiosyncratic since you
      haven't installed the new version yet, it is advisable to follow
      it if you plan to install the new version in parallel with the
      old version.  In that case you can complete the installation
      normally and transfer the data later.  This will also decrease
      the downtime.
-->
バックアップを作成するために、現在起動中のバージョンの<application>pg_dumpall</application>コマンドを使用することができます。詳細は<xref linkend="backup-dump-all"/> を参照してください。
しかし最善の結果を得るためには、<productname>PostgreSQL</productname> &version;の<application>pg_dumpall</application>コマンドを試してください。
このバージョンでは、過去のバージョンに対して、不具合の修正や改良が含まれているからです。
新しいバージョンをまだインストールしていませんので、この勧告は奇異に思えるかもしれませんが、古いバージョンと並行して新しいバージョンをインストールすることを計画しているのであれば、これに従うことを推奨します。
この場合、インストールを普通に完了させてからデータを移行することができます。
これは同時に停止時間を短縮します。
     </para>
    </step>

    <step>
     <para>
<!--
      Shut down the old server:
-->
古いサーバを停止します。
<screen>
<userinput>pg_ctl stop</userinput>
</screen>
<!--
      On systems that have <productname>PostgreSQL</productname> started at boot time,
      there is probably a start-up file that will accomplish the same thing. For
      example, on a <systemitem class="osname">Red Hat Linux</systemitem> system one
      might find that this works:
-->
起動時に<productname>PostgreSQL</productname>を実行させるようにしているシステムではおそらく、同じことを達成する起動ファイルがあります。
例えば<systemitem class="osname">Red Hat Linux</systemitem>システムでは、以下が動作することが分かります。
<screen>
<userinput>/etc/rc.d/init.d/postgresql stop</userinput>
</screen>
<!--
      See <xref linkend="runtime"/> for details about starting and
      stopping the server.
-->
サーバの起動と停止については<xref linkend="runtime"/>を参照してください。
     </para>
    </step>

    <step>
     <para>
<!--
      If restoring from backup, rename or delete the old installation
      directory if it is not version-specific.  It is a good idea to
      rename the directory, rather than
      delete it, in case you have trouble and need to revert to it.  Keep
      in mind the directory might consume significant disk space.  To rename
      the directory, use a command like this:
-->
バックアップからリストアする場合、名前を変更、またはバージョン固有でない場合は古いインストレーションディレクトリを削除してください。
問題があった場合に戻さなければならない場合に備え、削除するよりディレクトリの名前を変更する方を勧めます。
このディレクトリが多くのディスク容量を占めている可能性があることに注意してください。
ディレクトリの名前を変更するためには、以下のようなコマンドを使用してください。
<screen>
<userinput>mv /usr/local/pgsql /usr/local/pgsql.old</userinput>
</screen>
<!--
     (Be sure to move the directory as a single unit so relative paths
     remain unchanged.)
-->
（相対パスが維持されるように確実にディレクトリ単位で移動してください。）
     </para>
    </step>

    <step>
     <para>
<!--
      Install the new version of <productname>PostgreSQL</productname> as
      outlined in <xref linkend="installation"/>.
-->
概要を<xref linkend="installation"/>で示すように、新しいバージョンの<productname>PostgreSQL</productname>をインストールしてください。
     </para>
    </step>

    <step>
     <para>
<!--
      Create a new database cluster if needed.  Remember that you must
      execute these commands while logged in to the special database user
      account (which you already have if you are upgrading).
-->
必要に応じて新しいデータベースクラスタを作成してください。
（アップグレードの場合はすでに存在している）特別なデータベースユーザアカウントでログインして、このコマンドを実行しなければならないことに注意してください。
<programlisting>
<userinput>/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data</userinput>
</programlisting>
     </para>
    </step>

    <step>
     <para>
<!--
      Restore your previous <filename>pg_hba.conf</filename> and any
      <filename>postgresql.conf</filename> modifications.
-->
以前の<filename>pg_hba.conf</filename>と<filename>postgresql.conf</filename>に加えた何らかの変更を戻してください。
     </para>
    </step>

    <step>
     <para>
<!--
      Start the database server, again using the special database user
      account:
-->
繰り返しになりますが、特別なデータベースユーザアカウントを使用して、データベースサーバを起動してください。
<programlisting>
<userinput>/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data</userinput>
</programlisting>
     </para>
    </step>

    <step>
     <para>
<!--
      Finally, restore your data from backup with:
-->
最後に、バックアップからデータをリストアしてください。
<screen>
<userinput>/usr/local/pgsql/bin/psql -d postgres -f <replaceable>outputfile</replaceable></userinput>
</screen>
<!--
      using the <emphasis>new</emphasis> <application>psql</application>.
-->
<emphasis>新しい</emphasis><application>psql</application>を使用します。
     </para>
    </step>
   </procedure>

   <para>
<!--
    The least downtime can be achieved by installing the new server in
    a different directory and running both the old and the new servers
    in parallel, on different ports. Then you can use something like:
-->
新しいサーバを異なるディレクトリにインストールし、古いサーバと新しいサーバを別のポートで並行して実行させることで、停止時間を最小にすることができます。
この場合、データを移行するために以下のようなコマンドを使用することができます。

<programlisting>
pg_dumpall -p 5432 | psql -d postgres -p 5433
</programlisting>
<!--
    to transfer your data.
-->
   </para>

  </sect2>

  <sect2 id="upgrading-via-pg-upgrade">
<!--
   <title>Upgrading Data via <application>pg_upgrade</application></title>
-->
   <title><application>pg_upgrade</application>を使用したアップグレード方法</title>

   <para>
<!--
    The <xref linkend="pgupgrade"/> module allows an installation to
    be migrated in-place from one major <productname>PostgreSQL</productname>
    version to another.  Upgrades can be performed in minutes,
    particularly with <option>&#45;-link</option> mode.  It requires steps similar to
    <application>pg_dumpall</application> above, e.g.,  starting/stopping the server,
    running <application>initdb</application>.  The <application>pg_upgrade</application> <link
    linkend="pgupgrade">documentation</link> outlines the necessary steps.
-->
<xref linkend="pgupgrade"/>モジュールにより、<productname>PostgreSQL</productname>のあるバージョンから次のバージョンにインストレーションをその場で移行することができます。
特に<option>--link</option>オプションを使用することで、アップグレードは数分で行うことができます。
これは、<application>pg_dumpall</application>と同様の工程を必要とします。
例えば、<application>initdb</application>を実行し、サーバの起動／停止をおこないます。
<application>pg_upgrade</application> <link linkend="pgupgrade">ドキュメント</link>で必要な手順を説明します。
   </para>

  </sect2>

  <sect2 id="upgrading-via-replication">
<!--
   <title>Upgrading Data via Replication</title>
-->
   <title>レプリケーション経由のアップグレード</title>

   <para>
<!--
    It is also possible to use logical replication methods to create a standby
    server with the updated version of <productname>PostgreSQL</productname>.
    This is possible because logical replication supports
    replication between different major versions of
    <productname>PostgreSQL</productname>.  The standby can be on the same computer or
    a different computer.  Once it has synced up with the primary server
    (running the older version of <productname>PostgreSQL</productname>), you can
    switch primaries and make the standby the primary and shut down the older
    database instance.  Such a switch-over results in only several seconds
    of downtime for an upgrade.
-->
論理レプリケーションを使って更新対象のバージョンの<productname>PostgreSQL</productname>をスタンバイサーバとして作成することもできます。
論理レプリケーションが異なるメジャーバージョンの<productname>PostgreSQL</productname>の間でレプリケーションすることができるため、これが実現できます。
スタンバイは同じコンピュータで作成することも異なるコンピュータで作成することもできます。
（古いバージョンの<productname>PostgreSQL</productname>で実行している）プライマリサーバと同期した後、プライマリを切り替え、スタンバイをプライマリにし、古いデータベースインスタンスを停止することができます。
このようなスイッチオーバーの結果、数秒の停止時間でアップグレードされます。
   </para>

   <para>
<!--
    This method of upgrading can be performed using the built-in logical
    replication facilities as well as using external logical replication
    systems such as <productname>pglogical</productname>,
    <productname>Slony</productname>, <productname>Londiste</productname>, and
    <productname>Bucardo</productname>.
-->
この方法によるアップグレードは、組み込みの論理レプリケーション機能か、あるいは<productname>pglogical</productname>、<productname>Slony</productname>、<productname>Londiste</productname>、<productname>Bucardo</productname>などの外部の論理レプリケーションシステムを使うことで実施できます。
   </para>
  </sect2>
 </sect1>

 <sect1 id="preventing-server-spoofing">
<!--
  <title>Preventing Server Spoofing</title>
-->
  <title>サーバのなりすまし防止</title>

  <indexterm zone="preventing-server-spoofing">
   <primary>server spoofing</primary>
  </indexterm>
  <indexterm zone="preventing-server-spoofing">
   <primary>サーバのなりすまし</primary>
  </indexterm>

  <para>
<!--
   While the server is running, it is not possible for a malicious user
   to take the place of the normal database server.  However, when the
   server is down, it is possible for a local user to spoof the normal
   server by starting their own server.  The spoof server could read
   passwords and queries sent by clients, but could not return any data
   because the <varname>PGDATA</varname> directory would still be secure because
   of directory permissions. Spoofing is possible because any user can
   start a database server; a client cannot identify an invalid server
   unless it is specially configured.
-->
サーバが稼働中、悪意のあるユーザが通常のデータベースサーバに取って代わることはできません。
しかし、サーバが停止している時、ローカルユーザに対し、独自のサーバを起動させることで正常なサーバになりすますことは可能です。
なりすましたサーバで、クライアントから送信されたパスワードを読み取ることも問い合わせを読み取ることも可能です。
しかし、<varname>PGDATA</varname>ディレクトリの安全性はディレクトリの権限により維持されていますので、データを返すことはできません。
誰もがデータベースサーバを起動させることができるため、なりすましは可能です。
特殊な設定がなされていなければ、クライアントは無効なサーバであることを識別できません。
  </para>

  <para>
<!--
   One way to prevent spoofing of <literal>local</literal>
   connections is to use a Unix domain socket directory (<xref
   linkend="guc-unix-socket-directories"/>) that has write permission only
   for a trusted local user.  This prevents a malicious user from creating
   their own socket file in that directory.  If you are concerned that
   some applications might still reference <filename>/tmp</filename> for the
   socket file and hence be vulnerable to spoofing, during operating system
   startup create a symbolic link <filename>/tmp/.s.PGSQL.5432</filename> that points
   to the relocated socket file.  You also might need to modify your
   <filename>/tmp</filename> cleanup script to prevent removal of the symbolic link.
-->
<literal>local</literal>接続に対してなりすましを防ぐ、ひとつの方法は、信頼できるローカルユーザのみに書き込み権限を付与したUnixドメインソケットディレクトリ（<xref linkend="guc-unix-socket-directories"/>）を使用することです。
これにより、悪意のあるユーザがそのディレクトリに独自のソケットを作成することを防ぐことができます。
一部のアプリケーションがソケットファイルのために<filename>/tmp</filename>を参照し、なりすましに対して脆弱であるかもしれないと気にするならば、オペレーティングシステムの起動時に、再割り当てされたソケットファイルを指し示す<filename>/tmp/.s.PGSQL.5432</filename>というシンボリックリンクを作成してください。
また、このシンボリックリンクが削除されることを防ぐために、<filename>/tmp</filename>を整理するスクリプトを変更する必要があるかもしれません。
  </para>

  <para>
<!--
   Another option for <literal>local</literal> connections is for clients to use
   <link linkend="libpq-connect-requirepeer"><literal>requirepeer</literal></link>
   to specify the required owner of the server process connected to
   the socket.
-->
<literal>local</literal>接続についての別の選択肢は、クライアントが<link linkend="libpq-connect-requirepeer"><literal>requirepeer</literal></link>を使用して、ソケットに接続しているサーバプロセスの必要な所有者を指定することです。
  </para>

  <para>
<!--
   To prevent spoofing on TCP connections, either use
   SSL certificates and make sure that clients check the server's certificate,
   or use GSSAPI encryption (or both, if they're on separate connections).
-->
TCP接続のなりすましを防ぐためには、SSL証明書を使用してクライアントにサーバの証明書を確実に検査させるか、GSSAPI暗号化を使用します。
（あるいはそれらが別々の接続上にあるなら、その両方を使います。）
  </para>

  <para>
<!--
   To prevent spoofing with SSL, the server
   must be configured to accept only <literal>hostssl</literal> connections (<xref
   linkend="auth-pg-hba-conf"/>) and have SSL key and certificate files
   (<xref linkend="ssl-tcp"/>). The TCP client must connect using
   <literal>sslmode=verify-ca</literal> or
   <literal>verify-full</literal> and have the appropriate root certificate
   file installed (<xref linkend="libq-ssl-certificates"/>). Alternatively the
   <link linkend="libpq-connect-sslrootcert">system CA pool</link>, as defined
   by the SSL implementation, can be used using <literal>sslrootcert=system</literal>; in
   this case, <literal>sslmode=verify-full</literal> is forced for safety, since
   it is generally trivial to obtain certificates which are signed by a public
   CA.
-->
SSLでなりすましを防ぐためには、サーバは<literal>hostssl</literal>接続（<xref linkend="auth-pg-hba-conf"/>）のみを受け付け、SSLキーと証明書ファイル（<xref linkend="ssl-tcp"/>）を持つ必要があります。
TCPクライアントは<literal>sslmode=verify-ca</literal>もしくは<literal>verify-full</literal>を使用して接続し、また、適切なルート証明書ファイルをインストールしなければなりません（<xref linkend="libq-ssl-certificates"/>）。
あるいは、SSL実装で定義されている<link linkend="libpq-connect-sslrootcert">システムCAプール</link>が<literal>sslrootcert=system</literal>で使用できます。この場合、<literal>sslmode=verify-full</literal>が安全のために強制されます。これは、一般的に公開CAによって署名された証明書を取得するのが簡単なためです。
  </para>

  <para>
<!--
   To prevent server spoofing from occurring when using
   <link linkend="auth-password">scram-sha-256</link> password authentication
   over a network, you should ensure that you connect to the server using SSL
   and with one of the anti-spoofing methods described in the previous
   paragraph. Additionally, the SCRAM implementation in
   <application>libpq</application> cannot protect the entire authentication
   exchange, but using the <literal>channel_binding=require</literal> connection
   parameter provides a mitigation against server spoofing. An attacker that
   uses a rogue server to intercept a SCRAM exchange can use offline analysis to
   potentially determine the hashed password from the client.
-->
ネットワーク経由で<link linkend="auth-password">scram-sha-256</link>パスワード認証を使用する場合にサーバのなりすましが発生しないようにするには、SSLを使用してサーバに接続し、前の段落で説明したなりすまし防止方法の1つを使用する必要があります。
さらに、<application>libpq</application>のSCRAM実装は認証情報の交換全体を保護できませんが、<literal>channel_binding=require</literal>接続パラメータを使用すると、サーバのなりすましに対する防御が提供されます。
不正なサーバを使用してSCRAM交換を傍受する攻撃者は、オフライン分析を使用して、クライアントからのハッシュ化されたパスワードを判断できる可能性があります。
  </para>

  <para>
<!--
    To prevent spoofing with GSSAPI, the server must be configured to accept
    only <literal>hostgssenc</literal> connections
    (<xref linkend="auth-pg-hba-conf"/>) and use <literal>gss</literal>
    authentication with them.  The TCP client must connect
    using <literal>gssencmode=require</literal>.
-->
GSSAPIでなりすましを防ぐためには、サーバは<literal>hostgssenc</literal>接続（<xref linkend="auth-pg-hba-conf"/>）のみを受け付け、<literal>gss</literal>認証をその接続で使います。
TCPクライアントは<literal>gssencmode=require</literal>を使用して接続しなければなりません。
  </para>
 </sect1>

 <sect1 id="encryption-options">
<!--
  <title>Encryption Options</title>
-->
  <title>暗号化オプション</title>

  <indexterm zone="encryption-options">
   <primary>encryption</primary>
  </indexterm>
  <indexterm zone="encryption-options">
   <primary>暗号化</primary>
  </indexterm>

  <para>
<!--
   <productname>PostgreSQL</productname> offers encryption at several
   levels, and provides flexibility in protecting data from disclosure
   due to database server theft, unscrupulous administrators, and
   insecure networks. Encryption might also be required to secure
   sensitive data such as medical records or financial transactions.
-->
<productname>PostgreSQL</productname>は、複数レベルの暗号化を備え、データベースサーバ自身、管理者の注意不足、安全ではないネットワークを原因とした漏洩からデータを柔軟に保護することができます。
また、医療記録や金融取引など高セキュリティが求められるデータを格納する場合に暗号化が必要な場合もあります。
  </para>

  <variablelist>

  <varlistentry>
<!--
   <term>Password Encryption</term>
-->
   <term>パスワードの暗号化</term>
   <listitem>

    <para>
<!--
     Database user passwords are stored as hashes (determined by the setting
     <xref linkend="guc-password-encryption"/>), so the administrator cannot
     determine the actual password assigned to the user. If SCRAM or MD5
     encryption is used for client authentication, the unencrypted password is
     never even temporarily present on the server because the client encrypts
     it before being sent across the network. SCRAM is preferred, because it
     is an Internet standard and is more secure than the PostgreSQL-specific
     MD5 authentication protocol.
-->
データベースユーザのパスワードは（<xref linkend="guc-password-encryption"/>によって決定される）ハッシュとして格納されます。ですので、ユーザに割り当てられているパスワードは管理者でも分かりません。
SCRAM又はMD5暗号化がクライアント認証に使用されている場合、平文のパスワードはサーバ上に一時的にも存在することはありません。ネットワーク上に流れる前にクライアントが暗号化を行うからです。
SCRAMは、インターネット標準で、PostgreSQL特有なMD5認証プロトコルよりセキュアであるため、より望ましいです。
    </para>

    <warning>
     <para>
<!--
      Support for MD5-encrypted passwords is deprecated and will be removed in
      a future release of <productname>PostgreSQL</productname>.  Refer to
      <xref linkend="auth-password"/> for details about migrating to another
      password type.
-->
MD5で暗号化されたパスワードのサポートは非推奨となり、将来の<productname>PostgreSQL</productname>のリリースで削除されます。
他のパスワードタイプへの移行の詳細については、<xref linkend="auth-password"/>を参照してください。
     </para>
    </warning>

   </listitem>
  </varlistentry>

  <varlistentry>
<!--
   <term>Encryption For Specific Columns</term>
-->
   <term>特定の列に関する暗号化</term>

   <listitem>
    <para>
<!--
     The <xref linkend="pgcrypto"/> module allows certain fields to be
     stored encrypted.
     This is useful if only some of the data is sensitive.
     The client supplies the decryption key and the data is decrypted
     on the server and then sent to the client.
-->
<xref linkend="pgcrypto"/>モジュールにより、あるフィールドを暗号化して保存することができます。
データの一部が極秘データであるような場合に有用です。
クライアントが提供した復号化用のキーで、サーバ上のデータを復号化し、クライアントに返されます。
    </para>

    <para>
<!--
     The decrypted data and the decryption key are present on the
     server for a brief time while it is being decrypted and
     communicated between the client and server. This presents a brief
     moment where the data and keys can be intercepted by someone with
     complete access to the database server, such as the system
     administrator.
-->
復号化されたデータと復号化用のキーは、復号処理中およびクライアントサーバ間の通信中サーバ上に存在している時間があります。
このため、データベースサーバへのすべてのアクセス権限を持つユーザ（例えばシステム管理者）によって、データとキーが盗まれるわずかな時間があります。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
<!--
   <term>Data Partition Encryption</term>
-->
   <term>データパーティションに関する暗号化</term>

   <listitem>
    <para>
<!--
     Storage encryption can be performed at the file system level or the
     block level.  Linux file system encryption options include eCryptfs
     and EncFS, while FreeBSD uses PEFS.  Block level or full disk
     encryption options include dm-crypt + LUKS on Linux and GEOM
     modules geli and gbde on FreeBSD.  Many other operating systems
     support this functionality, including Windows.
-->
ストレージの暗号化は、ファイルシステムレベルまたはブロックレベルで行うことができます。
Linuxファイルシステムの暗号化オプションには、eCryptfsとEncFSがあります。一方、FreeBSDではPEFSを使用します。
ブロックレベルまたはフルディスクの暗号化オプションとして、Linuxにはdm-crypt + LUKS、FreeBSDにはGEOMモジュールのgeliとgbdeがあります。
これにより、ファイルシステムパーティション全体をディスク上で暗号化することができます。
他の多くのオペレーティングシステムは、Windowsを含め、この機能をサポートしています。
    </para>

    <para>
<!--
     This mechanism prevents unencrypted data from being read from the
     drives if the drives or the entire computer is stolen. This does
     not protect against attacks while the file system is mounted,
     because when mounted, the operating system provides an unencrypted
     view of the data. However, to mount the file system, you need some
     way for the encryption key to be passed to the operating system,
     and sometimes the key is stored somewhere on the host that mounts
     the disk.
-->
この機構により、ディスク装置やコンピュータ全体が盗まれた場合でも、ディスクから平文のデータが読み取られることを防止できます。
ファイルシステムがマウントされている時は、この機構による保護は働きません。
マウント時にはオペレーティングシステムが復号化したデータを提供するからです。
しかし、ファイルシステムをマウントするためになんらかの方法で暗号化キーをオペレーティングシステムに渡さなければなりません。
そのディスク装置をマウントするホストのどこかに暗号化キーを格納している場合もあります。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
<!--
   <term>Encrypting Data Across A Network</term>
-->
   <term>ネットワーク越しのデータ暗号化</term>

    <listitem>
     <para>
<!--
      SSL connections encrypt all data sent across the network: the
      password, the queries, and the data returned. The
      <filename>pg_hba.conf</filename> file allows administrators to specify
      which hosts can use non-encrypted connections (<literal>host</literal>)
      and which require SSL-encrypted connections
      (<literal>hostssl</literal>). Also, clients can specify that they
      connect to servers only via SSL.
-->
SSL接続により、ネットワーク越しに送信されるデータ（パスワード、問い合わせ、結果のデータ）はすべて暗号化されます。
<filename>pg_hba.conf</filename>ファイルを使用して、管理者はどのホストは暗号化しない接続を使用し（<literal>host</literal>）、どのホストがSSLで暗号化された接続を必要とするか（<literal>hostssl</literal>）を指定することができます。
また、SSL経由のサーバとの接続のみを使用するようにクライアントで指定することもできます。
     </para>

     <para>
<!--
      GSSAPI-encrypted connections encrypt all data sent across the network,
      including queries and data returned.  (No password is sent across the
      network.)  The <filename>pg_hba.conf</filename> file allows
      administrators to specify which hosts can use non-encrypted connections
      (<literal>host</literal>) and which require GSSAPI-encrypted connections
      (<literal>hostgssenc</literal>).  Also, clients can specify that they
      connect to servers only on GSSAPI-encrypted connections
      (<literal>gssencmode=require</literal>).
-->
GSSAPI暗号化接続は、問い合わせ及び返却されるデータを含めてネットワーク上に転送されるすべてのデータを暗号化します。
（パスワードはネットワーク上に送信されません。）
管理者は<filename>pg_hba.conf</filename>ファイルを使ってどのホストが非暗号化接続を使うか(<literal>host</literal>)、どのホストがGSSAPI暗号化接続を要求するか(<literal>hostgssenc</literal>)を指定できます。
クライアントはGSSAPI暗号化接続のみを使ってサーバに接続することも指定できます(<literal>gssencmode=require</literal>)。
     </para>

     <para>
<!--
      <application>Stunnel</application> or
      <application>SSH</application> can also be used to encrypt
      transmissions.
-->
<application>Stunnel</application>や<application>SSH</application>を使用して暗号化転送を行うこともできます。
     </para>
    </listitem>
  </varlistentry>

  <varlistentry>
<!--
   <term>SSL Host Authentication</term>
-->
   <term>SSLホスト認証</term>

   <listitem>
    <para>
<!--
     It is possible for both the client and server to provide SSL
     certificates to each other. It takes some extra configuration
     on each side, but this provides stronger verification of identity
     than the mere use of passwords. It prevents a computer from
     pretending to be the server just long enough to read the password
     sent by the client. It also helps prevent <quote>man in the middle</quote>
     attacks where a computer between the client and server pretends to
     be the server and reads and passes all data between the client and
     server.
-->
クライアントとサーバの両方で証明書を互いに提供することができます。
これには両方で追加の設定を行わなければなりませんが、これにより単なるパスワードの使用よりも強力な身元の検証を行うことができます。
クライアントから送信されたパスワードを盗聴する偽装サーバからコンピュータを保護します。
また、クライアントとサーバとの間にあるコンピュータがサーバになりすまし、クライアントとサーバ間で流れるデータを読み取り中継する、<quote>中間者</quote>攻撃から保護することもできます。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
<!--
   <term>Client-Side Encryption</term>
-->
   <term>クライアントサイドの暗号化</term>

   <listitem>
    <para>
<!--
     If the system administrator for the server's machine cannot be trusted,
     it is necessary
     for the client to encrypt the data; this way, unencrypted data
     never appears on the database server. Data is encrypted on the
     client before being sent to the server, and database results have
     to be decrypted on the client before being used.
-->
サーバマシンのシステム管理者を信頼できない場合、クライアント側でデータを暗号化する必要があります。
この場合、平文のデータはデータベースサーバ上に存在しません。
データはサーバに送信される前にクライアント上で暗号化されます。
また、使用する前にデータベースからの結果をクライアントで復号化しなければなりません。
    </para>
   </listitem>
  </varlistentry>

  </variablelist>

 </sect1>

 <sect1 id="ssl-tcp">
<!--
  <title>Secure TCP/IP Connections with SSL</title>
-->
  <title>SSLによる安全なTCP/IP接続</title>

  <indexterm zone="ssl-tcp">
   <primary>SSL</primary>
   <secondary>TLS</secondary>
  </indexterm>

  <para>
<!--
   <productname>PostgreSQL</productname> has native support for using
   <acronym>SSL</acronym> connections to encrypt client/server communications
   for increased security. This requires that
   <productname>OpenSSL</productname> is installed on both client and
   server systems and that support in <productname>PostgreSQL</productname> is
   enabled at build time (see <xref linkend="installation"/>).
-->
<productname>PostgreSQL</productname>は標準で<acronym>SSL</acronym>接続をサポートし、クライアント/サーバの通信がさらに安全になるよう暗号化します。
そのためには<productname>OpenSSL</productname>がクライアントとサーバシステムの両方にインストールされ、構築時に<productname>PostgreSQL</productname>におけるそのサポートが有効になっている必要があります（<xref linkend="installation"/>を参照してください）。
  </para>

  <para>
<!--
   The terms <acronym>SSL</acronym> and <acronym>TLS</acronym> are often used
   interchangeably to mean a secure encrypted connection using a
   <acronym>TLS</acronym> protocol. <acronym>SSL</acronym> protocols are the
   precursors to <acronym>TLS</acronym> protocols, and the term
   <acronym>SSL</acronym> is still used for encrypted connections even though
   <acronym>SSL</acronym> protocols are no longer supported.
   <acronym>SSL</acronym> is used interchangeably with <acronym>TLS</acronym>
   in <productname>PostgreSQL</productname>.
-->
用語<acronym>SSL</acronym>と<acronym>TLS</acronym>は、<acronym>TLS</acronym>プロトコルを使用したセキュアな暗号化接続を意味するために互換的に使用されることがよくあります。
<acronym>SSL</acronym>プロトコルは<acronym>TLS</acronym>プロトコルの前段階であり、<acronym>SSL</acronym>という用語は、<acronym>SSL</acronym>プロトコルがサポートされなくなっても暗号化接続に使用されています。
<acronym>SSL</acronym>は<productname>PostgreSQL</productname>で<acronym>TLS</acronym>と互換的に使用されています。

  </para>
  <sect2 id="ssl-setup">
<!--
   <title>Basic Setup</title>
-->
   <title>基本的な設定</title>

  <para>
<!--
   With <acronym>SSL</acronym> support compiled in, the
   <productname>PostgreSQL</productname> server can be started with
   support for encrypted connections using <acronym>TLS</acronym> protocols
   enabled by setting the parameter
   <xref linkend="guc-ssl"/> to <literal>on</literal> in
   <filename>postgresql.conf</filename>.  The server will listen for both normal
   and <acronym>SSL</acronym> connections on the same TCP port, and will negotiate
   with any connecting client on whether to use <acronym>SSL</acronym>.  By
   default, this is at the client's option; see <xref
   linkend="auth-pg-hba-conf"/> about how to set up the server to require
   use of <acronym>SSL</acronym> for some or all connections.
-->
<acronym>SSL</acronym>サポートを有効にしてコンパイルされた場合、<productname>PostgreSQL</productname>サーバは、<filename>postgresql.conf</filename>において<xref linkend="guc-ssl"/>パラメータを<literal>on</literal>にすることで、<acronym>TLS</acronym>プロトコルを使った暗号化された接続のサポートを有効にして起動することができます。
サーバは同じTCPポートで通常の接続と<acronym>SSL</acronym>接続の両方を待ち受け、クライアントとの接続に<acronym>SSL</acronym>を使用するかどうかを調停します。
デフォルトでは、これはクライアント側の選択肢です。
一部またはすべての接続で<acronym>SSL</acronym>の使用を必要とさせるためのサーバ側の設定方法に関しては<xref linkend="auth-pg-hba-conf"/>を参照してください。
  </para>

  <para>
<!--
   To start in <acronym>SSL</acronym> mode, files containing the server certificate
   and private key must exist.  By default, these files are expected to be
   named <filename>server.crt</filename> and <filename>server.key</filename>, respectively, in
   the server's data directory, but other names and locations can be specified
   using the configuration parameters <xref linkend="guc-ssl-cert-file"/>
   and <xref linkend="guc-ssl-key-file"/>.
-->
<acronym>SSL</acronym>モードで起動するには、サーバ証明書と秘密鍵を含むファイルが存在していなければなりません。
デフォルトでは、これらのファイルは<filename>server.crt</filename>および<filename>server.key</filename>という名前で、それぞれがサーバのデータディレクトリに存在していることが想定されていますが、設定パラメータの<xref linkend="guc-ssl-cert-file"/>と<xref linkend="guc-ssl-key-file"/>によって他の名前、他の場所を指定することもできます。
  </para>

  <para>
<!--
   On Unix systems, the permissions on <filename>server.key</filename> must
   disallow any access to world or group; achieve this by the command
   <command>chmod 0600 server.key</command>.  Alternatively, the file can be
   owned by root and have group read access (that is, <literal>0640</literal>
   permissions).  That setup is intended for installations where certificate
   and key files are managed by the operating system.  The user under which
   the <productname>PostgreSQL</productname> server runs should then be made a
   member of the group that has access to those certificate and key files.
-->
Unixシステムでは、<filename>server.key</filename>の権限は所有者以外からのアクセスを許可してはなりません。
これは<command>chmod 0600 server.key</command>というコマンドで実現できます。
あるいは、このファイルの所有者をrootにして、グループに読み取りアクセス権を与える（つまり、パーミッションを<literal>0640</literal>にする）ということもできます。
この設定は、証明書と鍵ファイルがオペレーティングシステムによって管理されるインストレーションのためのものです。
<productname>PostgreSQL</productname>サーバを実行するユーザは、証明書と鍵ファイルにアクセス権のあるグループのメンバにする必要があります。
  </para>

  <para>
<!--
    If the data directory allows group read access then certificate files may
    need to be located outside of the data directory in order to conform to the
    security requirements outlined above.  Generally, group access is enabled
    to allow an unprivileged user to backup the database, and in that case the
    backup software will not be able to read the certificate files and will
    likely error.
-->
データディレクトリがグループアクセスを許可している場合、証明書ファイルは上記のセキュリティ上の要求を満たすためにデータディレクトリ外に置く必要があるかも知れません。
一般に、グループアクセスは権限を持たないユーザがデータベースをバックアップできるように有効化されます。
この場合、バックアップソフトウェアは証明書を読むことができず、おそらくエラーとなるでしょう。
  </para>

  <para>
<!--
   If the private key is protected with a passphrase, the
   server will prompt for the passphrase and will not start until it has
   been entered.
   Using a passphrase by default disables the ability to change the server's
   SSL configuration without a server restart, but see <xref
   linkend="guc-ssl-passphrase-command-supports-reload"/>.
   Furthermore, passphrase-protected private keys cannot be used at all
   on Windows.
-->
秘密鍵がパスフレーズで保護されている場合、サーバはパスフレーズの入力を促し、入力されるまでは起動しません。
パスフレーズを使用すると、サーバを再起動せずにサーバのSSL設定を変更する機能はデフォルトで無効になりますが、<xref linkend="guc-ssl-passphrase-command-supports-reload"/>を参照してください。
さらに、パスフレーズで保護された秘密鍵は、Windowsではまったく使用できません。
  </para>

  <para>
<!--
   The first certificate in <filename>server.crt</filename> must be the
   server's certificate because it must match the server's private key.
   The certificates of <quote>intermediate</quote> certificate authorities
   can also be appended to the file.  Doing this avoids the necessity of
   storing intermediate certificates on clients, assuming the root and
   intermediate certificates were created with <literal>v3_ca</literal>
   extensions.  (This sets the certificate's basic constraint of
   <literal>CA</literal> to <literal>true</literal>.)
   This allows easier expiration of intermediate certificates.
-->
<filename>server.crt</filename>の最初の証明書は、サーバ証明書になり、秘密鍵とマッチしなければなりません。
<quote>中間</quote>認証局の証明書をファイルに追加することもできます。
これにより、ルートと中間証明書が<literal>v3_ca</literal>拡張により作成されていることが前提になりますが、中間証明書をクライアントに保存する必要が無くなります。
（これにより、<literal>CA</literal>の証明書の基本制約が<literal>true</literal>に設定されます。）
これは、中間証明書の有効期限の扱いをより簡単にします。
  </para>

  <para>
<!--
   It is not necessary to add the root certificate to
   <filename>server.crt</filename>.  Instead, clients must have the root
   certificate of the server's certificate chain.
-->
<filename>server.crt</filename>にルート証明書を追加する必要はありません。
代わりに、クライアントはサーバ証明書のチェーンのルート証明書を持っていなければなりません。
  </para>
  </sect2>

  <sect2 id="ssl-openssl-config">
<!--
   <title>OpenSSL Configuration</title>
-->
   <title>OpenSSLの設定</title>

  <para>
<!--
   <productname>PostgreSQL</productname> reads the system-wide
   <productname>OpenSSL</productname> configuration file. By default, this
   file is named <filename>openssl.cnf</filename> and is located in the
   directory reported by <literal>openssl version -d</literal>.
   This default can be overridden by setting environment variable
   <envar>OPENSSL_CONF</envar> to the name of the desired configuration file.
-->
<productname>PostgreSQL</productname>はシステム全体の<productname>OpenSSL</productname>設定ファイルを読み込みます。
デフォルトでは、このファイルは<filename>openssl.cnf</filename>という名前で、<literal>openssl version -d</literal>が報告するディレクトリに設置されます。
このデフォルトは<envar>OPENSSL_CONF</envar>環境変数を設定することによって希望の名前に置き換えることができます。
  </para>

  <para>
<!--
   <productname>OpenSSL</productname> supports a wide range of ciphers
   and authentication algorithms, of varying strength.  While a list of
   ciphers can be specified in the <productname>OpenSSL</productname>
   configuration file, you can specify ciphers specifically for use by
   the database server by modifying <xref linkend="guc-ssl-ciphers"/> in
   <filename>postgresql.conf</filename>.
-->
<productname>OpenSSL</productname>は様々な強度を持つ、多様な暗号と認証アルゴリズムをサポートしています。
暗号のリストは<productname>OpenSSL</productname>の設定ファイルで指定できますが、使用するデータベースサーバ用に<filename>postgresql.conf</filename>の<xref linkend="guc-ssl-ciphers"/>で指定することができます。
  </para>

  <note>
   <para>
<!--
    It is possible to have authentication without encryption overhead by
    using <literal>NULL-SHA</literal> or <literal>NULL-MD5</literal> ciphers.  However,
    a man-in-the-middle could read and pass communications between client
    and server.  Also, encryption overhead is minimal compared to the
    overhead of authentication.  For these reasons NULL ciphers are not
    recommended.
-->
<literal>NULL-SHA</literal>あるいは<literal>NULL-MD5</literal>暗号を使って暗号化のオーバーヘッドがない認証を行うことができます。
しかし、中間者がクライアントとサーバの間のコミュニケーションを読んで転送することができます。
また、認証のオーバーヘッドに比べると暗号化のオーバーヘッドは最小限です。
これらの理由から、NULL暗号はお勧めできません。
   </para>
  </note>
  </sect2>

  <sect2 id="ssl-client-certificates">
<!--
   <title>Using Client Certificates</title>
-->
   <title>クライアント証明書の使用</title>

  <para>
<!--
   To require the client to supply a trusted certificate,
   place certificates of the root certificate authorities
   (<acronym>CA</acronym>s) you trust in a file in the data
   directory, set the parameter <xref linkend="guc-ssl-ca-file"/> in
   <filename>postgresql.conf</filename> to the new file name, and add the
   authentication option <literal>clientcert=verify-ca</literal> or
   <literal>clientcert=verify-full</literal> to the appropriate
   <literal>hostssl</literal> line(s) in <filename>pg_hba.conf</filename>.
   A certificate will then be requested from the client during SSL
   connection startup.  (See <xref linkend="libpq-ssl"/> for a description
   of how to set up certificates on the client.)
-->
信頼できる証明書をクライアントに要求するには、信頼するルート認証局（<acronym>CA</acronym>）の証明書をデータディレクトリ内のファイルに置き、<filename>postgresql.conf</filename>の<xref linkend="guc-ssl-ca-file"/>パラメータを設定し、認証オプション<literal>clientcert=verify-ca</literal>または<literal>clientcert=verify-full</literal>を<filename>pg_hba.conf</filename>の適切な<literal>hostssl</literal>行に追加します。
そうすると、SSL接続の開始時にクライアントへ証明書が要求されます。
（クライアント上での証明書の設定方法については<xref linkend="libpq-ssl"/>を参照してください。）
  </para>

  <para>
<!--
   For a <literal>hostssl</literal> entry with
   <literal>clientcert=verify-ca</literal>, the server will verify
   that the client's certificate is signed by one of the trusted
   certificate authorities. If <literal>clientcert=verify-full</literal>
   is specified, the server will not only verify the certificate
   chain, but it will also check whether the username or its mapping
   matches the <literal>cn</literal> (Common Name) of the provided certificate.
   Note that certificate chain validation is always ensured when the
   <literal>cert</literal> authentication method is used
   (see <xref linkend="auth-cert"/>).
-->
<literal>clientcert=verify-ca</literal>指定付きの<literal>hostssl</literal>エントリでは、サーバは、クライアントの証明書が信頼する認証局のいずれかにより署名されていることを検証します。
<literal>clientcert=verify-full</literal>が指定されていると、サーバは証明書チェーンを検証するだけでなく、ユーザ名あるいはユーザ名のマッピングが提供された証明書の<literal>cn</literal> (Common Name)に一致しているかどうかも検証します。
<literal>cert</literal>認証メソッドが使われている場合は認証チェーンの検証は常に行われることに注意してください。
（<xref linkend="auth-cert"/>参照。）
  </para>

  <para>
<!--
   Intermediate certificates that chain up to existing root certificates
   can also appear in the <xref linkend="guc-ssl-ca-file"/> file if
   you wish to avoid storing them on clients (assuming the root and
   intermediate certificates were created with <literal>v3_ca</literal>
   extensions).  Certificate Revocation List (CRL) entries are also
   checked if the parameter <xref linkend="guc-ssl-crl-file"/> or
   <xref linkend="guc-ssl-crl-dir"/> is set.
-->
既存のルート証明書に連鎖する中間証明書は、クライアントに保存することを避けたい場合に<xref linkend="guc-ssl-ca-file"/>に含めることができます（ルート証明書と中間証明書が<literal>v3_ca</literal>拡張で作成されている場合）。
<xref linkend="guc-ssl-crl-file"/>あるいは<xref linkend="guc-ssl-crl-dir"/>パラメータが設定されている場合、証明書失効リスト（CRL）項目も検査されます。
  </para>

  <para>
<!--
   The <literal>clientcert</literal> authentication option is available for
   all authentication methods, but only in <filename>pg_hba.conf</filename> lines
   specified as <literal>hostssl</literal>.  When <literal>clientcert</literal> is
   not specified, the server verifies the client certificate against its CA
   file only if a client certificate is presented and the CA is configured.
-->
認証オプション<literal>clientcert</literal>はすべての認証方式について利用可能ですが、<filename>pg_hba.conf</filename>の<literal>hostssl</literal>として指定された行でのみ有効です。
<literal>clientcert</literal>が指定されていない場合でも、クライアント証明書が提示され、認証局が設定されているときに限ってサーバはその認証局ファイルに対してクライアント証明書の検証を行います。
  </para>

  <para>
<!--
   There are two approaches to enforce that users provide a certificate during login.
-->
ユーザに対してログイン中に証明書を提供するように強制する二つのアプローチがあります。
  </para>

  <para>
<!--
   The first approach makes use of the <literal>cert</literal> authentication
   method for <literal>hostssl</literal> entries in <filename>pg_hba.conf</filename>,
   such that the certificate itself is used for authentication while also
   providing ssl connection security. See <xref linkend="auth-cert"/> for details.
   (It is not necessary to specify any <literal>clientcert</literal> options
   explicitly when using the <literal>cert</literal> authentication method.)
   In this case, the <literal>cn</literal> (Common Name) provided in
   the certificate is checked against the user name or an applicable mapping.
-->
最初のアプローチは<filename>pg_hba.conf</filename>の<literal>hostssl</literal>に<literal>cert</literal>認証メソッドを使うことです。
そうすることによりSSL接続によるセキュリティが提供されるとともに、証明書自身が認証に使われます。
詳細は<xref linkend="auth-cert"/>をご覧ください。
（<literal>cert</literal>認証メソッドを使う際には明示的に<literal>clientcert</literal>オプションを指定する必要はありません。）
この場合証明書が提供する<literal>cn</literal> (Common Name)がユーザ名あるいは適用可能なマッピングに対して検証されます。
  </para>

  <para>
<!--
   The second approach combines any authentication method for <literal>hostssl</literal>
   entries with the verification of client certificates by setting the
   <literal>clientcert</literal> authentication option to <literal>verify-ca</literal>
   or <literal>verify-full</literal>. The former option only enforces that
   the certificate is valid, while the latter also ensures that the
   <literal>cn</literal> (Common Name) in the certificate matches
   the user name or an applicable mapping.
-->
二番目のアプローチは、<literal>clientcert</literal>認証オプションに<literal>verify-ca</literal>あるいは<literal>verify-full</literal>を設定することによって<literal>hostssl</literal>エントリの認証メソッドにクライアント証明書の検証を組み合わせることです。
前者のオプションは証明書が有効であることだけを強制し、後者は更に証明書の<literal>cn</literal> (Common Name)がユーザ名あるいは適用可能なマッピングと一致することを強制します。
  </para>
  </sect2>

  <sect2 id="ssl-server-files">
<!--
   <title>SSL Server File Usage</title>
-->
   <title>サーバにおけるSSL関連ファイルの利用</title>

   <para>
<!--
    <xref linkend="ssl-file-usage"/> summarizes the files that are
    relevant to the SSL setup on the server.  (The shown file names are default
    names.  The locally configured names could be different.)
-->
<xref linkend="ssl-file-usage"/>にて、サーバにおけるSSLの設定に関連するファイルをまとめます。
（表示されているファイル名はデフォルトまたは一般的な名前です。異なる名前を個別に設定することもできます。）
   </para>

  <table id="ssl-file-usage">
<!--
   <title>SSL Server File Usage</title>
-->
   <title>SSLサーバファイルの使用方法</title>
   <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>File</entry>
-->
      <entry>ファイル</entry>
<!--
      <entry>Contents</entry>
-->
      <entry>内容</entry>
<!--
      <entry>Effect</entry>
-->
      <entry>影響</entry>
     </row>
    </thead>

    <tbody>

     <row>
      <entry><xref linkend="guc-ssl-cert-file"/> (<filename>$PGDATA/server.crt</filename>)</entry>
<!--
      <entry>server certificate</entry>
-->
      <entry>サーバ証明書</entry>
<!--
      <entry>sent to client to indicate server's identity</entry>
-->
      <entry>サーバの身元を示すためにクライアントに送信します</entry>
     </row>

     <row>
      <entry><xref linkend="guc-ssl-key-file"/> (<filename>$PGDATA/server.key</filename>)</entry>
<!--
      <entry>server private key</entry>
      <entry>proves server certificate was sent by the owner; does not indicate
      certificate owner is trustworthy</entry>
-->
      <entry>サーバの秘密鍵</entry>
      <entry>サーバ証明書が所有者によって送られたことを証明します。証明書所有者が信頼できることを意味しません。</entry>
     </row>

     <row>
      <entry><xref linkend="guc-ssl-ca-file"/></entry>
<!--
      <entry>trusted certificate authorities</entry>
      <entry>checks that client certificate is
      signed by a trusted certificate authority</entry>
-->
      <entry>信頼できる認証局</entry>
      <entry>信頼する認証局により署名されたクライアント証明書か検査します。</entry>
     </row>

     <row>
      <entry><xref linkend="guc-ssl-crl-file"/></entry>
<!--
      <entry>certificates revoked by certificate authorities</entry>
-->
      <entry>認証局により失効された証明書</entry>
<!--
      <entry>client certificate must not be on this list</entry>
-->
      <entry>クライアント証明書はこの一覧にあってはいけません。</entry>
     </row>

    </tbody>
   </tgroup>
  </table>

   <para>
<!--
    The server reads these files at server start and whenever the server
    configuration is reloaded.  On <systemitem class="osname">Windows</systemitem>
    systems, they are also re-read whenever a new backend process is spawned
    for a new client connection.
-->
サーバは、サーバ起動時及びサーバ設定がリロードされるたびに、これらのファイルを読み取ります。
<systemitem class="osname">Windows</systemitem>システム上では新しいクライアント接続のために新しいバックエンドプロセスが生成されるたびに再読み込みされます。
   </para>

   <para>
<!--
    If an error in these files is detected at server start, the server will
    refuse to start.  But if an error is detected during a configuration
    reload, the files are ignored and the old SSL configuration continues to
    be used.  On <systemitem class="osname">Windows</systemitem> systems, if an error in
    these files is detected at backend start, that backend will be unable to
    establish an SSL connection.  In all these cases, the error condition is
    reported in the server log.
-->
サーバ起動時にこれらのファイルのエラーが検出された場合、サーバは起動を拒否します。
ただし、設定のリロード中にエラーが検出された場合、ファイルは無視され、古いSSL設定が引き続き使用されます。
<systemitem class="osname">Windows</systemitem>システム上ではバックエンドの開始時にこれらのファイルのエラーが検出された場合、そのバックエンドはSSL接続を確立出来ません。
これらのすべてのケースでは、エラー状態がサーバログに記録されます。
   </para>
  </sect2>

  <sect2 id="ssl-certificate-creation">
<!--
   <title>Creating Certificates</title>
-->
   <title>証明書の作成</title>

   <para>
<!--
     To create a simple self-signed certificate for the server, valid for 365
     days, use the following <productname>OpenSSL</productname> command,
     replacing <replaceable>dbhost.yourdomain.com</replaceable> with the
     server's host name:
-->
365日有効なサーバ用の自己署名証明書を簡単に作るためには下記の<productname>OpenSSL</productname>コマンドを実行してください（<replaceable>dbhost.yourdomain.com</replaceable>をサーバのホスト名に置き換えてください）。
<programlisting>
openssl req -new -x509 -days 365 -nodes -text -out server.crt \
  -keyout server.key -subj "/CN=<replaceable>dbhost.yourdomain.com</replaceable>"
</programlisting>
<!--
    Then do:
-->
続けて以下も実行します。
<programlisting>
chmod og-rwx server.key
</programlisting>
<!--
    because the server will reject the file if its permissions are more
    liberal than this.
    For more details on how to create your server private key and
    certificate, refer to the <productname>OpenSSL</productname> documentation.
-->
サーバはファイルの権限がこれよりも広範囲である場合にファイルを拒否するためです。
サーバの秘密鍵および証明書を作成するための詳しい方法については<productname>OpenSSL</productname>の文書を参照してください。
   </para>

   <para>
<!--
    While a self-signed certificate can be used for testing, a certificate
    signed by a certificate authority (<acronym>CA</acronym>) (usually an
    enterprise-wide root <acronym>CA</acronym>) should be used in production.
-->
テストには自己署名証明書を使用できますが、運用時は認証局(<acronym>CA</acronym>)（通常は事業全体の<acronym>CA</acronym>）により署名された証明書を使用する必要があります。
   </para>

   <para>
<!--
    To create a server certificate whose identity can be validated
    by clients, first create a certificate signing request
    (<acronym>CSR</acronym>) and a public/private key file:
-->
クライアントが身元を検証できるサーバ証明書を作成するには、まず最初に証明書署名要求(<acronym>CSR</acronym>) と公開／秘密鍵ファイルを作成します。
<programlisting>
openssl req -new -nodes -text -out root.csr \
  -keyout root.key -subj "/CN=<replaceable>root.yourdomain.com</replaceable>"
chmod og-rwx root.key
</programlisting>
<!--
    Then, sign the request with the key to create a root certificate
    authority (using the default <productname>OpenSSL</productname>
    configuration file location on <productname>Linux</productname>):
-->
その後、鍵を使用して署名要求に署名しルート証明書を作成します（<productname>Linux</productname>上のデフォルトの<productname>OpenSSL</productname>設定ファイルの場所を使用）。
<programlisting>
openssl x509 -req -in root.csr -text -days 3650 \
  -extfile /etc/ssl/openssl.cnf -extensions v3_ca \
  -signkey root.key -out root.crt
</programlisting>
<!--
    Finally, create a server certificate signed by the new root certificate
    authority:
-->
最後に、新しいルート証明書によって署名されるサーバ証明書を作成します。
<programlisting>
openssl req -new -nodes -text -out server.csr \
  -keyout server.key -subj "/CN=<replaceable>dbhost.yourdomain.com</replaceable>"
chmod og-rwx server.key

openssl x509 -req -in server.csr -text -days 365 \
  -CA root.crt -CAkey root.key -CAcreateserial \
  -out server.crt
</programlisting>
<!--
    <filename>server.crt</filename> and <filename>server.key</filename>
    should be stored on the server, and <filename>root.crt</filename> should
    be stored on the client so the client can verify that the server's leaf
    certificate was signed by its trusted root certificate.
    <filename>root.key</filename> should be stored offline for use in
    creating future certificates.
-->
<filename>server.crt</filename>と<filename>server.key</filename>をサーバに格納し、<filename>root.crt</filename>をクライアントに格納します。
クライアントはサーバのリーフ証明書が信頼されたルート証明書によって署名されたことを確認できます。
<filename>root.key</filename>は将来の証明書の作成に使用するために、オフラインで保存する必要があります。
   </para>

   <para>
<!--
    It is also possible to create a chain of trust that includes
    intermediate certificates:
-->
中間証明書が含まれる信頼の連鎖を作成することも可能です。
<programlisting>
# root
openssl req -new -nodes -text -out root.csr \
  -keyout root.key -subj "/CN=<replaceable>root.yourdomain.com</replaceable>"
chmod og-rwx root.key
openssl x509 -req -in root.csr -text -days 3650 \
  -extfile /etc/ssl/openssl.cnf -extensions v3_ca \
  -signkey root.key -out root.crt

# intermediate
openssl req -new -nodes -text -out intermediate.csr \
  -keyout intermediate.key -subj "/CN=<replaceable>intermediate.yourdomain.com</replaceable>"
chmod og-rwx intermediate.key
openssl x509 -req -in intermediate.csr -text -days 1825 \
  -extfile /etc/ssl/openssl.cnf -extensions v3_ca \
  -CA root.crt -CAkey root.key -CAcreateserial \
  -out intermediate.crt

# leaf
openssl req -new -nodes -text -out server.csr \
  -keyout server.key -subj "/CN=<replaceable>dbhost.yourdomain.com</replaceable>"
chmod og-rwx server.key
openssl x509 -req -in server.csr -text -days 365 \
  -CA intermediate.crt -CAkey intermediate.key -CAcreateserial \
  -out server.crt
</programlisting>
<!--
    <filename>server.crt</filename> and
    <filename>intermediate.crt</filename> should be concatenated
    into a certificate file bundle and stored on the server.
    <filename>server.key</filename> should also be stored on the server.
    <filename>root.crt</filename> should be stored on the client so
    the client can verify that the server's leaf certificate was signed
    by a chain of certificates linked to its trusted root certificate.
    <filename>root.key</filename> and <filename>intermediate.key</filename>
    should be stored offline for use in creating future certificates.
-->
<filename>server.crt</filename>と<filename>intermediate.crt</filename>は証明書ファイルに束ねて連結し、サーバに格納する必要があります。
<filename>server.key</filename>もまたサーバに格納される必要があります。
サーバのリーフ証明書が信頼されたルート証明書にリンクされた一連の証明書によって署名されていることをクライアントが確認できるように、<filename>root.crt</filename>をクライアントに格納する必要があります。
<filename>root.key</filename>と<filename>intermediate.key</filename>は将来の証明書を作成に使用するためにオフラインで格納する必要があります。
   </para>
  </sect2>

 </sect1>

 <sect1 id="gssapi-enc">
<!--
  <title>Secure TCP/IP Connections with GSSAPI Encryption</title>
-->
  <title>GSSAPIによる安全なTCP/IP接続</title>

  <indexterm zone="gssapi-enc">
   <primary>gssapi</primary>
  </indexterm>

  <para>
<!--
   <productname>PostgreSQL</productname> also has native support for
   using <acronym>GSSAPI</acronym> to encrypt client/server communications for
   increased security.  Support requires that a <acronym>GSSAPI</acronym>
   implementation (such as MIT Kerberos) is installed on both client and server
   systems, and that support in <productname>PostgreSQL</productname> is
   enabled at build time (see <xref linkend="installation"/>).
-->
セキュリティを強化する目的でクライアント／サーバの通信を暗号化するために<productname>PostgreSQL</productname>もまた<acronym>GSSAPI</acronym>の利用を直接サポートしています。
このサポートには<acronym>GSSAPI</acronym>の実装（MIT Kerberosなど）がクライアントとサーバシステムの両方にインストールされていて、<productname>PostgreSQL</productname>の構築時にそのサポートが有効になっていること（<xref linkend="installation"/>参照）が必要です。
  </para>

  <sect2 id="gssapi-setup">
<!--
   <title>Basic Setup</title>
-->
   <title>基本的な設定</title>

   <para>
<!--
    The <productname>PostgreSQL</productname> server will listen for both
    normal and <acronym>GSSAPI</acronym>-encrypted connections on the same TCP
    port, and will negotiate with any connecting client whether to
    use <acronym>GSSAPI</acronym> for encryption (and for authentication).  By
    default, this decision is up to the client (which means it can be
    downgraded by an attacker); see <xref linkend="auth-pg-hba-conf"/> about
    setting up the server to require the use of <acronym>GSSAPI</acronym> for
    some or all connections.
-->
<productname>PostgreSQL</productname>サーバは通常の接続と<acronym>GSSAPI</acronym>による暗号化接続の両方を同じTCPポートで待ち受け、接続しようとするクライアントと<acronym>GSSAPI</acronym>による暗号化（そして認証）を使うかどうかを交渉します。
デフォルトではこの決定はクライアントに任されます（これは攻撃者によってダウングレードできることを意味します）。
サーバが一部あるいはすべての接続で<acronym>GSSAPI</acronym>を使うことを要求する設定に関しては<xref linkend="auth-pg-hba-conf"/>をご覧ください。
   </para>

   <para>
<!--
    When using <acronym>GSSAPI</acronym> for encryption, it is common to
    use <acronym>GSSAPI</acronym> for authentication as well, since the
    underlying mechanism will determine both client and server identities
    (according to the <acronym>GSSAPI</acronym> implementation) in any
    case.  But this is not required;
    another <productname>PostgreSQL</productname> authentication method
    can be chosen to perform additional verification.
-->
常に基盤の仕組みがクライアントとサーバの身元を（<acronym>GSSAPI</acronym>の実装により）特定するため、暗号化に<acronym>GSSAPI</acronym>を使用する際は、<acronym>GSSAPI</acronym>を認証にも使うのが一般的です。
しかしこれは必須ではありません。追加の認証を行うために、<productname>PostgreSQL</productname>の他の認証方法を選択することができます。
   </para>

   <para>
<!--
    Other than configuration of the negotiation
    behavior, <acronym>GSSAPI</acronym> encryption requires no setup beyond
    that which is necessary for GSSAPI authentication.  (For more information
    on configuring that, see <xref linkend="gssapi-auth"/>.)
-->
この交渉の挙動を設定すること以外には<acronym>GSSAPI</acronym>暗号化では、GSSAPI認証に必要な設定はこれ以上ありません。
（設定のより詳細に関しては<xref linkend="gssapi-auth"/>をご覧ください。）
   </para>
  </sect2>
 </sect1>

 <sect1 id="ssh-tunnels">
<!--
  <title>Secure TCP/IP Connections with <application>SSH</application> Tunnels</title>
-->
  <title><application>SSH</application>トンネルを使った安全なTCP/IP接続</title>

  <indexterm zone="ssh-tunnels">
   <primary>ssh</primary>
  </indexterm>

  <para>
<!--
   It is possible to use <application>SSH</application> to encrypt the network
   connection between clients and a
   <productname>PostgreSQL</productname> server. Done properly, this
   provides an adequately secure network connection, even for non-SSL-capable
   clients.
-->
クライアントと<productname>PostgreSQL</productname>サーバ間のネットワーク接続を暗号化するために<application>SSH</application>を使うことができます。
正しく行えば、SSL機能がクライアントになくても、これで十分に安全なネットワーク接続を行うことができます。
  </para>

  <para>
<!--
   First make sure that an <application>SSH</application> server is
   running properly on the same machine as the
   <productname>PostgreSQL</productname> server and that you can log in using
   <command>ssh</command> as some user;  you then can establish a
   secure tunnel to the remote server.  A secure tunnel listens on a
   local port and forwards all traffic to a port on the remote machine.
   Traffic sent to the remote port can arrive on its
   <literal>localhost</literal> address, or different bind
   address if desired;  it does not appear as coming from your
   local machine.  This command creates a secure tunnel from the client
   machine to the remote machine <literal>foo.com</literal>:
-->
まず<application>SSH</application>サーバが<productname>PostgreSQL</productname>サーバと同じマシン上で正しく起動していて、<command>ssh</command>を使ってログインできるユーザが存在することを確かめてください。
リモートサーバへ安全なトンネルを確立することができます。
安全なトンネルは、ローカルポートをリッスンし、すべてのトラフィックをリモートマシン上のポートに転送します。
リモートポートに送信されたトラフィックは、<literal>localhost</literal>アドレスまたは必要に応じて別のバインドアドレスに到達することができ、ローカルマシンからのトラフィックとは表示されません。
次のコマンドは、クライアントマシンからリモートマシン<literal>foo.com</literal>への安全なトンネルを作成します。
<programlisting>
ssh -L 63333:localhost:5432 joe@foo.com
</programlisting>
<!--
   The first number in the <option>-L</option> argument, 63333, is the
   local port number of the tunnel; it can be any unused port.  (IANA
   reserves ports 49152 through 65535 for private use.)  The name or IP
   address after this is the remote bind address you are connecting to,
   i.e., <literal>localhost</literal>, which is the default.  The second
   number, 5432, is the remote end of the tunnel, e.g., the port number
   your database server is using.  In order to connect to the database
   server using this tunnel, you connect to port 63333 on the local
   machine:
-->
<option>-L</option>引数の1番目の数字（63333）はトンネルのローカル側のポート番号で、未使用のポートを選択することが可能です。（IANAは49152から65535までのポートを私的使用のため予約しています。）
この後の名前かIPアドレスは、接続先のリモート側のバインドアドレス（デフォルトは<literal>localhost</literal>）です。
2番目の数字（5432）は、トンネルのリモート側のサーバが使用しているポート番号です。
このトンネルを使ってデータベースサーバに接続するためには、ローカルマシンのポート63333に接続します。
<programlisting>
psql -h localhost -p 63333 postgres
</programlisting>
<!--
   To the database server it will then look as though you are
   user <literal>joe</literal> on host <literal>foo.com</literal>
   connecting to the <literal>localhost</literal> bind address, and it
   will use whatever authentication procedure was configured for
   connections by that user to that bind address.  Note that the server will not
   think the connection is SSL-encrypted, since in fact it is not
   encrypted between the
   <application>SSH</application> server and the
   <productname>PostgreSQL</productname> server.  This should not pose any
   extra security risk because they are on the same machine.
-->
データベースサーバにとっては、ユーザがホスト<literal>foo.com</literal>上のユーザ<literal>joe</literal>であり、<literal>localhost</literal>バインドアドレスに接続しているように見え、そのバインドアドレスに対するそのユーザの接続向けに設定された認証手続きが使用されます。
実際、<application>SSH</application>サーバと<productname>PostgreSQL</productname>サーバとの間は暗号化されていないため、サーバはこの接続がSSLで暗号化されているとみなさないことに注意してください。
それらが、同じマシン上にあるため、セキュリティ上の危険性が増すことはありません。
  </para>

  <para>
<!--
   In order for the
   tunnel setup to succeed you must be allowed to connect via
   <command>ssh</command> as <literal>joe@foo.com</literal>, just
   as if you had attempted to use <command>ssh</command> to create a
   terminal session.
-->
トンネルの確立が成功するためには、<command>ssh</command>を使用して端末セッションを作成したのと同様に、<literal>joe@foo.com</literal>ユーザが<command>ssh</command>を通して接続することが許可されていなければいけません。
  </para>

  <para>
<!--
   You could also have set up port forwarding as
-->
以下に示すようにポートフォワードを設定することができます。
<programlisting>
ssh -L 63333:foo.com:5432 joe@foo.com
</programlisting>
<!--
   but then the database server will see the connection as coming in
   on its <literal>foo.com</literal> bind address, which is not opened by
   the default setting <literal>listen_addresses =
   'localhost'</literal>.  This is usually not what you want.
-->
しかしそうすると、データベースサーバはその<literal>foo.com</literal>バインドアドレスから接続が来たように判断し、デフォルトの設定である<literal>listen_addresses = 'localhost'</literal>では開かれません。
通常これは好ましいことではありません。
  </para>

  <para>
<!--
   If you have to <quote>hop</quote> to the database server via some
   login host, one possible setup could look like this:
-->
どこかのログインホスト経由でデータベースサーバに<quote>跳躍</quote>しなければならない場合、以下のようにすることが可能です。
<programlisting>
ssh -L 63333:db.foo.com:5432 joe@shell.foo.com
</programlisting>
<!--
   Note that this way the connection
   from <literal>shell.foo.com</literal>
   to <literal>db.foo.com</literal> will not be encrypted by the SSH
   tunnel.
   SSH offers quite a few configuration possibilities when the network
   is restricted in various ways.  Please refer to the SSH
   documentation for details.
-->
<literal>shell.foo.com</literal>から<literal>db.foo.com</literal>へのこのような接続はSSHトンネルで暗号化されません。
SSHはいろいろな方法でネットワークが制約されているとき、かなりの数の設定可能性を提供しています。
詳細はSSHの文書を参照してください。
  </para>

  <tip>
   <para>
<!--
    Several other applications exist that can provide secure tunnels using
    a procedure similar in concept to the one just described.
-->
ここで説明してきたものと似た概念の手続きを使用して、安全なトンネルを提供可能なアプリケーションが他にもいくつか存在します。
   </para>
  </tip>

 </sect1>

 <sect1 id="event-log-registration">
<!--
  <title>Registering <application>Event Log</application> on <systemitem
  class="osname">Windows</systemitem></title>
-->
  <title><systemitem class="osname">Windows</systemitem>における<application>Event Log</application>の登録</title>

  <indexterm zone="event-log-registration">
   <primary>event log</primary>
   <secondary>event log</secondary>
  </indexterm>

  <para>
<!--
   To register a <systemitem class="osname">Windows</systemitem>
   <application>event log</application> library with the operating system,
   issue this command:
-->
<systemitem class="osname">Windows</systemitem>のOSの<application>event log</application>ライブラリに登録するには、以下のコマンドを発行します:
<screen>
<userinput>regsvr32 <replaceable>pgsql_library_directory</replaceable>/pgevent.dll</userinput>
</screen>
<!--
   This creates registry entries used by the event viewer, under the default
   event source named <literal>PostgreSQL</literal>.
-->
このコマンドは、<literal>PostgreSQL</literal>というデフォルトのイベントソース名で、イベントビューアが使用するレジストリエントリを作成します。
  </para>

  <para>
<!--
   To specify a different event source name (see
   <xref linkend="guc-event-source"/>), use the <literal>/n</literal>
   and <literal>/i</literal> options:
-->
異なるイベントソース名（<xref linkend="guc-event-source"/>参照）を指定するには、<literal>/n</literal>および<literal>/i</literal>オプションを使ってください:
<screen>
<userinput>regsvr32 /n /i:<replaceable>event_source_name</replaceable> <replaceable>pgsql_library_directory</replaceable>/pgevent.dll</userinput>
</screen>
  </para>

  <para>
<!--
   To unregister the <application>event log</application> library from
   the operating system, issue this command:
-->
OSから<application>event log</application>ライブラリを削除するには、以下のコマンドを発行します:
<screen>
<userinput>regsvr32 /u [/i:<replaceable>event_source_name</replaceable>] <replaceable>pgsql_library_directory</replaceable>/pgevent.dll</userinput>
</screen>
  </para>

  <note>
   <para>
<!--
    To enable event logging in the database server, modify
    <xref linkend="guc-log-destination"/> to include
    <literal>eventlog</literal> in <filename>postgresql.conf</filename>.
-->
データベースサーバにおけるイベントロギングを有効にするには、<literal>eventlog</literal>を含むように<filename>postgresql.conf</filename>の<xref linkend="guc-log-destination"/>を変更してください。
   </para>
  </note>
 </sect1>

</chapter>
