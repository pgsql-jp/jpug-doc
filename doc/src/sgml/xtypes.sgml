<!-- doc/src/sgml/xtypes.sgml -->

 <sect1 id="xtypes">
<!--
  <title>User-defined Types</title>
-->
  <title>ユーザ定義の型</title>

  <indexterm zone="xtypes">
<!--
   <primary>data type</primary>
   <secondary>user-defined</secondary>
-->
   <primary>データ型</primary>
   <secondary>ユーザ定義の</secondary>
  </indexterm>

  <para>
<!--
   As described in <xref linkend="extend-type-system">,
   <productname>PostgreSQL</productname> can be extended to support new
   data types.  This section describes how to define new base types,
   which are data types defined below the level of the <acronym>SQL</>
   language.  Creating a new base type requires implementing functions
   to operate on the type in a low-level language, usually C.
-->
<xref linkend="extend-type-system">に述べられているように、<productname>PostgreSQL</productname>は、新しい型をサポートするように拡張することができます。
本節では、<acronym>SQL</>言語以下のレベルで定義されるデータ型である基本型を新しく定義する方法について説明します。
新しい基本型の作成には、低レベル言語、通常Cで作成された型を操作する関数の実装が必要です。
  </para>

  <para>
<!--
   The examples in this section can be found in
   <filename>complex.sql</filename> and <filename>complex.c</filename>
   in the <filename>src/tutorial</> directory of the source distribution.
   See the <filename>README</> file in that directory for instructions
   about running the examples.
-->
本節で使用する例は、ソース配布物内の<filename>src/tutorial</>ディレクトリに<filename>complex.sql</filename>と<filename>complex.c</filename>という名前で置いてあります。
この例の実行方法についてはディレクトリ内の<filename>README</>を参照してください。
  </para>

 <para>
  <indexterm>
<!--
   <primary>input function</primary>
-->
   <primary>入力関数</primary>
  </indexterm>
  <indexterm>
<!--
   <primary>output function</primary>
-->
   <primary>出力関数</primary>
  </indexterm>
<!--
  A user-defined type must always have input and output functions.
  These functions determine how the type appears in strings (for input
  by the user and output to the user) and how the type is organized in
  memory.  The input function takes a null-terminated character string
  as its argument and returns the internal (in memory) representation
  of the type.  The output function takes the internal representation
  of the type as argument and returns a null-terminated character
  string.  If we want to do anything more with the type than merely
  store it, we must provide additional functions to implement whatever
  operations we'd like to have for the type.
-->
ユーザ定義データ型では必ず入力関数と出力関数が必要です。
これらの関数は、その型が（ユーザによる入力とユーザへの出力のための）文字列としてどのように表現されるかと、その型がメモリ中でどう構成されるかを決定します。
入力関数は引数としてヌル終端文字列を取り、その型の（メモリ中の）内部表現を返します。
出力関数は引数としてその型の内部表現を取り、ヌル終端文字列を返します。
単に格納するだけではなく、その型に操作を加えたいのであれば、その型に持たせたいすべての操作を実装した関数をさらに提供しなければなりません。
 </para>

 <para>
<!--
  Suppose we want to define a type <type>complex</> that represents
  complex numbers. A natural way to represent a complex number in
  memory would be the following C structure:
-->
例えば、複素数を表現する<type>complex</>型を定義することを考えます。
おそらく、次のようなC構造体で複素数をメモリ中で表現することがごく自然な方法です。

<programlisting>
typedef struct Complex {
    double      x;
    double      y;
} Complex;
</programlisting>

<!--
  We will need to make this a pass-by-reference type, since it's too
  large to fit into a single <type>Datum</> value.
-->
単一の<type>Datum</>値で扱うには大き過ぎるので、これは参照渡し型にしなければなりません。
 </para>

 <para>
<!--
  As the external string representation of the type, we choose a
  string of the form <literal>(x,y)</literal>.
-->
この型の外部文字列表現として<literal>(x,y)</literal>形式の文字列を使用することを選択します。
 </para>

 <para>
<!--
  The input and output functions are usually not hard to write,
  especially the output function.  But when defining the external
  string representation of the type, remember that you must eventually
  write a complete and robust parser for that representation as your
  input function.  For instance:
-->
入出力関数、特に出力関数を作成することは困難ではありません。
しかし、この型の外部表現文字列を定義する時、その表現のための完全で堅牢なパーサを入力関数として作成しなければなりません。
以下に例を示します。

<programlisting><![CDATA[
PG_FUNCTION_INFO_V1(complex_in);

Datum
complex_in(PG_FUNCTION_ARGS)
{
    char       *str = PG_GETARG_CSTRING(0);
    double      x,
                y;
    Complex    *result;

    if (sscanf(str, " ( %lf , %lf )", &x, &y) != 2)
        ereport(ERROR,
                (errcode(ERRCODE_INVALID_TEXT_REPRESENTATION),
                 errmsg("invalid input syntax for complex: \"%s\"",
                        str)));

    result = (Complex *) palloc(sizeof(Complex));
    result->x = x;
    result->y = y;
    PG_RETURN_POINTER(result);
}
]]>
</programlisting>

<!--
  The output function can simply be:
-->
出力関数は以下のように簡単にできます。

<programlisting><![CDATA[
PG_FUNCTION_INFO_V1(complex_out);

Datum
complex_out(PG_FUNCTION_ARGS)
{
    Complex    *complex = (Complex *) PG_GETARG_POINTER(0);
    char       *result;

    result = psprintf("(%g,%g)", complex->x, complex->y);
    PG_RETURN_CSTRING(result);
}
]]>
</programlisting>
 </para>

 <para>
<!--
  You should be careful to make the input and output functions inverses of
  each other.  If you do not, you will have severe problems when you
  need to dump your data into a file and then read it back in.  This
  is a particularly common problem when floating-point numbers are
  involved.
-->
入出力関数は各々の逆関数になるように注意しなければなりません。
そうしないと、データをファイルにダンプし、それを読み戻そうとする際に、深刻な問題が発生するでしょう。
これは特に浮動小数点数が関係する際によく発生する問題です。
 </para>

 <para>
<!--
  Optionally, a user-defined type can provide binary input and output
  routines.  Binary I/O is normally faster but less portable than textual
  I/O.  As with textual I/O, it is up to you to define exactly what the
  external binary representation is.  Most of the built-in data types
  try to provide a machine-independent binary representation.  For
  <type>complex</type>, we will piggy-back on the binary I/O converters
  for type <type>float8</>:
-->
省略することができますが、ユーザ定義型はバイナリ入出力関数を提供することができます。
バイナリ入出力は通常テキスト入出力より高速ですが、テキスト入出力より移植性がありません。
テキスト入出力と同様に、外部バイナリ表現を正確に定義することは作成者の責任です。
ほとんどの組み込みデータ型は、マシンに依存しないバイナリ表現を提供しようとしています。
<type>complex</type>型では<type>float8</>型のバイナリ入出力コンバータを元にします。

<programlisting><![CDATA[
PG_FUNCTION_INFO_V1(complex_recv);

Datum
complex_recv(PG_FUNCTION_ARGS)
{
    StringInfo  buf = (StringInfo) PG_GETARG_POINTER(0);
    Complex    *result;

    result = (Complex *) palloc(sizeof(Complex));
    result->x = pq_getmsgfloat8(buf);
    result->y = pq_getmsgfloat8(buf);
    PG_RETURN_POINTER(result);
}

PG_FUNCTION_INFO_V1(complex_send);

Datum
complex_send(PG_FUNCTION_ARGS)
{
    Complex    *complex = (Complex *) PG_GETARG_POINTER(0);
    StringInfoData buf;

    pq_begintypsend(&buf);
    pq_sendfloat8(&buf, complex->x);
    pq_sendfloat8(&buf, complex->y);
    PG_RETURN_BYTEA_P(pq_endtypsend(&buf));
}
]]>
</programlisting>
 </para>

 <para>
<!--
  Once we have written the I/O functions and compiled them into a shared
  library, we can define the <type>complex</type> type in SQL.
  First we declare it as a shell type:
-->
入出力関数を作成し共有ライブラリ内にコンパイルすれば、SQLで<type>complex</type>型を定義することができます。
まずシェル型として宣言します。

<programlisting>
CREATE TYPE complex;
</programlisting>

<!--
  This serves as a placeholder that allows us to reference the type while
  defining its I/O functions.  Now we can define the I/O functions:
-->
これは、入出力関数を定義する時にこの型を参照することができるプレースホルダとして動作します。
この後以下のように、入出力関数を定義することができます。

<programlisting>
CREATE FUNCTION complex_in(cstring)
    RETURNS complex
    AS '<replaceable>filename</replaceable>'
    LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION complex_out(complex)
    RETURNS cstring
    AS '<replaceable>filename</replaceable>'
    LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION complex_recv(internal)
   RETURNS complex
   AS '<replaceable>filename</replaceable>'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION complex_send(complex)
   RETURNS bytea
   AS '<replaceable>filename</replaceable>'
   LANGUAGE C IMMUTABLE STRICT;
</programlisting>
 </para>

 <para>
<!--
  Finally, we can provide the full definition of the data type:
-->
最後にデータ型の完全な定義を提供することができます。
<programlisting>
CREATE TYPE complex (
   internallength = 16,
   input = complex_in,
   output = complex_out,
   receive = complex_recv,
   send = complex_send,
   alignment = double
);
</programlisting>
 </para>

 <para>
  <indexterm>
<!--
    <primary>array</primary>
    <secondary>of user-defined type</secondary>
-->
    <primary>配列</primary>
    <secondary>ユーザ定義型の</secondary>
  </indexterm>
<!--
  When you define a new base type,
  <productname>PostgreSQL</productname> automatically provides support
  for arrays of that type.  The array type typically
  has the same name as the base type with the underscore character
  (<literal>_</>) prepended.
-->
新しい基本型を定義すると、<productname>PostgreSQL</productname>は自動的にその型の配列のサポートを提供します。
配列型は通常、基本型の名前の前にアンダースコア文字<literal>_</>が付いた名前になります。
 </para>

 <para>
<!--
  Once the data type exists, we can declare additional functions to
  provide useful operations on the data type.  Operators can then be
  defined atop the functions, and if needed, operator classes can be
  created to support indexing of the data type.  These additional
  layers are discussed in following sections.
-->
データ型が存在するようになると、そのデータ型に対する有用な操作を提供する関数を宣言することができます。
そしてその関数を使用する演算子も定義できます。
また、必要に応じて、そのデータ型用のインデックスをサポートするための演算子クラスも作成することができます。
こうした追加層については後の節で説明します。
 </para>

 <para>
   <indexterm>
<!--
    <primary>TOAST</primary>
    <secondary>and user-defined types</secondary>
-->
    <primary>TOAST</primary>
    <secondary>とユーザ定義型</secondary>
   </indexterm>
<!--
  If the values of your data type vary in size (in internal form), you should
  make the data type <acronym>TOAST</>-able (see <xref
  linkend="storage-toast">). You should do this even if the data are always
  too small to be compressed or stored externally, because
  <acronym>TOAST</> can save space on small data too, by reducing header
  overhead.
-->
データ型の値により（内部形式で）容量が変動する場合、そのデータ型を<acronym>TOAST</>可能としなければなりません。
（<xref linkend="storage-toast">を参照してください。）
ヘッダのオーバーヘッドを減らすことで<acronym>TOAST</>は小さなデータに対しても容量を抑えることができますので、データが常に圧縮し外部に格納するには小さ過ぎる場合でも、これを行わなければなりません。
 </para>

 <para>
<!--
  To do this, the internal representation must follow the standard layout for
  variable-length data: the first four bytes must be a <type>char[4]</type>
  field which is never accessed directly (customarily named
  <structfield>vl_len_</>). You
  must use <function>SET_VARSIZE()</function> to store the size of the datum
  in this field and <function>VARSIZE()</function> to retrieve it. The C
  functions operating on the data type must always be careful to unpack any
  toasted values they are handed, by using <function>PG_DETOAST_DATUM</>.
  (This detail is customarily hidden by defining type-specific
  <function>GETARG_DATATYPE_P</function> macros.) Then, when running the
  <command>CREATE TYPE</command> command, specify the internal length as
  <literal>variable</> and select the appropriate storage option.
-->
このためには、内部表現が可変長データの標準レイアウトに従っていなければなりません。
先頭の4バイトは<type>char[4]</type>フィールドで、直接アクセスされることは決してありません（慣習的に<structfield>vl_len_</>と呼ばれます）。
<function>SET_VARSIZE()</function>を使用してデータの容量をこのフィールドに格納し、また、<function>VARSIZE()</function>を使用してこのフィールドを取り出さなければなりません。
そのデータ型を扱うC関数は常に、<function>PG_DETOAST_DATUM</>を使用して、渡されたTOAST化値を注意深く展開しなければなりません。
（通常、こうした詳細は型独自の<function>GETARG_DATATYPE_P</function>マクロを定義して隠蔽します。）
その後、<command>CREATE TYPE</command>コマンドを実行する際に、内部長を<literal>variable</>と指定し、また、適当な格納オプションを選択してください。
 </para>

 <para>
<!--
  If the alignment is unimportant (either just for a specific function or
  because the data type specifies byte alignment anyway) then it's possible
  to avoid some of the overhead of <function>PG_DETOAST_DATUM</>. You can use
  <function>PG_DETOAST_DATUM_PACKED</> instead (customarily hidden by
  defining a <function>GETARG_DATATYPE_PP</> macro) and using the macros
  <function>VARSIZE_ANY_EXHDR</> and <function>VARDATA_ANY</> to access
  a potentially-packed datum.
  Again, the data returned by these macros is not aligned even if the data
  type definition specifies an alignment. If the alignment is important you
  must go through the regular <function>PG_DETOAST_DATUM</> interface.
-->
整列が（単なる特定の関数向けやデータ型が常にバイト単位の整列を規定しているため）重要でない場合、<function>PG_DETOAST_DATUM</>のオーバヘッドの一部を省くことができます。
代わりに<function>PG_DETOAST_DATUM_PACKED</>を使用してください（通常は<function>GETARG_DATATYPE_PP</>マクロを定義することで隠蔽されます）。
そして、<function>VARSIZE_ANY_EXHDR</>および<function>VARDATA_ANY</>マクロを使用して、圧縮されている可能性があるデータにアクセスしてください。
繰り返しますが、これらのマクロから返されるデータは、たとえデータ型定義で整列を規定していたとしても、整列されません。
整列が重要であれば、通常の<function>PG_DETOAST_DATUM</>インタフェースを介して実行してください。
 </para>

 <note>
  <para>
<!--
   Older code frequently declares <structfield>vl_len_</> as an
   <type>int32</> field instead of <type>char[4]</>.  This is OK as long as
   the struct definition has other fields that have at least <type>int32</>
   alignment.  But it is dangerous to use such a struct definition when
   working with a potentially unaligned datum; the compiler may take it as
   license to assume the datum actually is aligned, leading to core dumps on
   architectures that are strict about alignment.
-->
古めのコードではしばしば<structfield>vl_len_</>を<type>char[4]</>ではなく<type>int32</>として宣言しています。
この構造体定義が少なくとも<type>int32</>で整列されたフィールドを持っている限り、これは問題ありません。
しかし、整列されていない可能性があるデータを扱う場合に、こうした構造体定義を使用することは危険です。
データが実際に整列されていると仮定することをコンパイラの規則としているかもしれず、この場合、整列に厳密なアーキテクチャではコアダンプしてしまいます。
  </para>
 </note>

 <para>
<!--
  For further details see the description of the
  <xref linkend="sql-createtype"> command.
-->
詳細については<xref linkend="sql-createtype">コマンドの説明を参照してください。
 </para>
</sect1>
