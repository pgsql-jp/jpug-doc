<!-- doc/src/sgml/config.sgml -->

<chapter id="runtime-config">
<!--
  <title>Server Configuration</title>
-->
  <title>サーバ設定</title>

  <indexterm>
   <primary>configuration</primary>
   <secondary>of the server</secondary>
  </indexterm>
  <indexterm>
   <primary>設定</primary>
   <secondary>サーバの</secondary>
  </indexterm>

  <para>
<!--
   There are many configuration parameters that affect the behavior of
   the database system. In the first section of this chapter we
   describe how to interact with configuration parameters. The subsequent sections
   discuss each parameter in detail.
-->
データベースシステムの動作に影響を与える数多くのパラメータがあります。
この章の最初の節で、どのように設定パラメータを操作するのかについて説明します。
引き続く節で、それぞれのパラメータの詳細を説明します。
  </para>

  <sect1 id="config-setting">
<!--
   <title>Setting Parameters</title>
-->
   <title>パラメータの設定</title>

   <sect2 id="config-setting-names-values">
<!--
    <title>Parameter Names and Values</title>
-->
    <title>パラメータ名とその値</title>

    <para>
<!--
     All parameter names are case-insensitive. Every parameter takes a
     value of one of five types: boolean, string, integer, floating point,
     or enumerated (enum).  The type determines the syntax for setting the
     parameter:
-->
全てのパラメータの名前は大文字と小文字を区別しません。
それぞれのパラメータは、論理値、整数、浮動小数点、文字列、またはenum（列挙型）の5つの型のいずれかの値を取ります。
型はパラメータをセットするための記法を定義します。
    </para>

    <itemizedlist>
     <listitem>
      <para>
<!--
       <emphasis>Boolean:</emphasis>
       Values can be written as
       <literal>on</literal>,
       <literal>off</literal>,
       <literal>true</literal>,
       <literal>false</literal>,
       <literal>yes</literal>,
       <literal>no</literal>,
       <literal>1</literal>,
       <literal>0</literal>
       (all case-insensitive) or any unambiguous prefix of one of these.
-->
<emphasis>論理型:</emphasis>
値は<literal>on</literal>、<literal>off</literal>、<literal>true</literal>、<literal>false</literal>、<literal>yes</literal>、<literal>no</literal>、<literal>1</literal>、<literal>0</literal>（すべて大文字小文字の区別なし）、あるいは、曖昧でなければ、これらの先頭から数文字を省略形として使うこともできます。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       <emphasis>String:</emphasis>
       In general, enclose the value in single quotes, doubling any single
       quotes within the value.  Quotes can usually be omitted if the value
       is a simple number or identifier, however.
       (Values that match an SQL keyword require quoting in some contexts.)
-->
<emphasis>文字列型:</emphasis>
一般に、単一引用符の中に値を入れます。
単一引用符を値に含める場合は単一引用符を２つ続けます。
なお、値が単純な数字や識別子である場合は、通常は引用符を省略できます。
（使用する場所によっては、SQLキーワードと一致する値に引用符が必要になることがあります。）
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       <emphasis>Numeric (integer and floating point):</emphasis>
       Numeric parameters can be specified in the customary integer and
       floating-point formats; fractional values are rounded to the nearest
       integer if the parameter is of integer type.  Integer parameters
       additionally accept hexadecimal input (beginning
       with <literal>0x</literal>) and octal input (beginning
       with <literal>0</literal>), but these formats cannot have a fraction.
       Do not use thousands separators.
       Quotes are not required, except for hexadecimal input.
-->
<emphasis>数値型(整数型と浮動小数点型):</emphasis>
数値パラメータには通常の整数と浮動小数点型が使用できます。
パラメータが整数型なら、小数値はもっとも近い整数に丸められます。
加えて整数型パラメータは16進数入力（<literal>0x</literal>で始まります）と8進数入力（<literal>0</literal>で始まります）を受け付けます。
しかし、これらの形式では小数点以下は使えません。
1000の位取りの区切り文字は使わないでください。
16進数入力を除き引用符は必要ありません。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       <emphasis>Numeric with Unit:</emphasis>
       Some numeric parameters have an implicit unit, because they describe
       quantities of memory or time. The unit might be bytes, kilobytes, blocks
       (typically eight kilobytes), milliseconds, seconds, or minutes.
       An unadorned numeric value for one of these settings will use the
       setting's default unit, which can be learned from
       <structname>pg_settings</structname>.<structfield>unit</structfield>.
       For convenience, settings can be given with a unit specified explicitly,
       for example <literal>'120 ms'</literal> for a time value, and they will be
       converted to whatever the parameter's actual unit is.  Note that the
       value must be written as a string (with quotes) to use this feature.
       The unit name is case-sensitive, and there can be whitespace between
       the numeric value and the unit.
-->
<emphasis>単位付きの数値:</emphasis>
数値型のパラメータによっては暗黙的な単位を持つことがあります。
メモリの量や時間について記述するからです。
単位はバイト、キロバイト、ブロック（通常8キロバイト）、ミリ秒、秒、分などです。
修飾無しの数値によるこれらの設定においては、 <structname>pg_settings</structname>.<structfield>unit</structfield> からデフォルト値が採用されます。
使い勝手を考えて、たとえば<literal>'120 ms'</literal>のように単位を明示的に指定することもできます。
この場合は、実際の単位に変換が行われます。
なお、この機能を使う場合は、引用符付きの文字列として値を指定しなければならないことに注意してください。
単位の名称は大文字小文字を区別します。
また、数値と単位の間に空白があっても構いません。

       <itemizedlist>
        <listitem>
         <para>
<!--
          Valid memory units are <literal>B</literal> (bytes),
          <literal>kB</literal> (kilobytes),
          <literal>MB</literal> (megabytes), <literal>GB</literal>
          (gigabytes), and <literal>TB</literal> (terabytes).
          The multiplier for memory units is 1024, not 1000.
-->
有効なメモリの単位は<literal>B</literal> (バイト) <literal>kB</literal> (キロバイト)、<literal>MB</literal> (メガバイト)、 <literal>GB</literal> (ギガバイト), <literal>TB</literal> (テラバイト)です。
メモリ単位の乗数は1024です。1000ではありません。
         </para>
        </listitem>

        <listitem>
         <para>
<!--
          Valid time units are
          <literal>us</literal> (microseconds),
          <literal>ms</literal> (milliseconds),
          <literal>s</literal> (seconds), <literal>min</literal> (minutes),
          <literal>h</literal> (hours), and <literal>d</literal> (days).
-->
有効な時間の単位は <literal>us</literal> (マイクロ秒)、<literal>ms</literal> (ミリ秒)、<literal>s</literal> (秒)、<literal>min</literal> (分)、<literal>h</literal> (時間)、<literal>d</literal> (日数) です。
         </para>
        </listitem>
       </itemizedlist>

<!--
       If a fractional value is specified with a unit, it will be rounded
       to a multiple of the next smaller unit if there is one.
       For example, <literal>30.1 GB</literal> will be converted
       to <literal>30822 MB</literal> not <literal>32319628902 B</literal>.
       If the parameter is of integer type, a final rounding to integer
       occurs after any unit conversion.
-->
単位に添えて小数点以下が指定された場合、より小さな単位が存在すれば、値はその小さな単位の積に丸められます。
たとえば、<literal>30.1 GB</literal>は<literal>32319628902 B</literal>ではなく<literal>30822 MB</literal>に変換されます。
整数型のパラメータでは、単位変換の後で最終的な整数への丸めが行われます。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       <emphasis>Enumerated:</emphasis>
       Enumerated-type parameters are written in the same way as string
       parameters, but are restricted to have one of a limited set of
       values.  The values allowable for such a parameter can be found from
       <structname>pg_settings</structname>.<structfield>enumvals</structfield>.
       Enum parameter values are case-insensitive.
-->
<emphasis>列挙型:</emphasis>
列挙型のパラメータは文字列パラメータと同じように記述します。
ただ、使用できる文字列の種類が決まっているだけです。
使用できる文字列は <structname>pg_settings</structname>.<structfield>enumvals</structfield> で定義されています。
列挙型の値は大文字小文字を区別しません。
      </para>
     </listitem>
    </itemizedlist>
   </sect2>

   <sect2 id="config-setting-configuration-file">
<!--
    <title>Parameter Interaction via the Configuration File</title>
-->
    <title>設定ファイルによるパラメータ操作</title>

    <para>
<!--
     The most fundamental way to set these parameters is to edit the file
     <filename>postgresql.conf</filename><indexterm><primary>postgresql.conf</primary></indexterm>,
     which is normally kept in the data directory.  A default copy is
     installed when the database cluster directory is initialized.
     An example of what this file might look like is:
-->
これらのパラメータを設定する最も基本的な方法は、<filename>postgresql.conf</filename><indexterm><primary>postgresql.conf</primary></indexterm>ファイルを編集することで、これは通常 data ディレクトリに格納されています。
デフォルトのコピーはデータベースクラスタディレクトリが初期化されるときそこにインストールされます。このファイルがどういったものかの例を示します。
<programlisting>
# This is a comment
log_connections = all
log_destination = 'syslog'
search_path = '"$user", public'
shared_buffers = 128MB
</programlisting>
<!--
     One parameter is specified per line. The equal sign between name and
     value is optional. Whitespace is insignificant (except within a quoted
     parameter value) and blank lines are
     ignored. Hash marks (<literal>#</literal>) designate the remainder
     of the line as a comment.  Parameter values that are not simple
     identifiers or numbers must be single-quoted.  To embed a single
     quote in a parameter value, write either two quotes (preferred)
     or backslash-quote.
     If the file contains multiple entries for the same parameter,
     all but the last one are ignored.
-->
1つの行毎に1つのパラメータが指定されます。
名前と値の間の等号は省略可能です。
（引用符付きのパラメータ値内を除き）空白は特に意味を持たず、何もない行は無視されます。
ハッシュ記号（<literal>#</literal>）はその行の後の表記がコメントであることを意味します。
単純でない識別子、または数値でないパラメータ値は単一引用符で括られなければなりません。
パラメータ値の中に単一引用符を埋め込むには、引用符を2つ（推奨）もしくはバックスラッシュ-引用符を使います。
ファイル中、同じパラメータに対して複数のエントリが指定されている場合は、最後のエントリ以外は無視されます。
    </para>

    <para>
<!--
     Parameters set in this way provide default values for the cluster.
     The settings seen by active sessions will be these values unless they
     are overridden.  The following sections describe ways in which the
     administrator or user can override these defaults.
-->
この方法によりクラスタに対してデフォルト値が設定されます。
上書きされない限り、アクティブなセッションが見るのはこの値です。
次節以降では、管理者やユーザがこれらのデフォルト値を上書きする方法を説明します。
    </para>

    <para>
     <indexterm>
      <primary>SIGHUP</primary>
     </indexterm>
<!--
     The configuration file is reread whenever the main server process
     receives a <systemitem>SIGHUP</systemitem> signal; this signal is most easily
     sent by running <literal>pg_ctl reload</literal> from the command line or by
     calling the SQL function <function>pg_reload_conf()</function>. The main
     server process also propagates this signal to all currently running
     server processes, so that existing sessions also adopt the new values
     (this will happen after they complete any currently-executing client
     command).  Alternatively, you can
     send the signal to a single server process directly.  Some parameters
     can only be set at server start; any changes to their entries in the
     configuration file will be ignored until the server is restarted.
     Invalid parameter settings in the configuration file are likewise
     ignored (but logged) during <systemitem>SIGHUP</systemitem> processing.
-->
設定ファイルは、メインサーバプロセスが<systemitem>SIGHUP</systemitem>シグナルを受け取るたびに再読み込みされます。
このシグナルを手っ取り早く送信するには、コマンドラインから<literal>pg_ctl reload</literal>を実行するか、SQL関数の<function>pg_reload_conf()</function>を呼び出します。
メインサーバプロセスは同時にこのシグナルを、現存のセッションが同様に新しい値を入手できるように、全ての現在実行しているサーバプロセスに伝播します(これは現在実行中のクライアントコマンドの処理を完了してから行われます)。
他の手段として、直接単一のサーバプロセスにシグナルを送ることも可能です。
一部のパラメータはサーバの起動時のみ設定されまするので、設定ファイル中のそれらのエントリの変更はすべて、サーバが再起動されるまで無視されます。
設定ファイル内で無効なパラメータが設定された場合も、同じように（ログには残りますが）<systemitem>SIGHUP</systemitem> 処理中は無視されます。
    </para>

    <para>
<!--
     In addition to <filename>postgresql.conf</filename>,
     a <productname>PostgreSQL</productname> data directory contains a file
     <filename>postgresql.auto.conf</filename><indexterm><primary>postgresql.auto.conf</primary></indexterm>,
     which has the same format as <filename>postgresql.conf</filename> but
     is intended to be edited automatically, not manually.  This file holds
     settings provided through the <link linkend="sql-altersystem"><command>ALTER SYSTEM</command></link> command.
     This file is read whenever <filename>postgresql.conf</filename> is,
     and its settings take effect in the same way.  Settings
     in <filename>postgresql.auto.conf</filename> override those
     in <filename>postgresql.conf</filename>.
-->
<filename>postgresql.conf</filename>に加え、<productname>PostgreSQL</productname>のデータディレクトリには <filename>postgresql.auto.conf</filename><indexterm><primary>postgresql.auto.conf</primary></indexterm>というファイルがあります。
このファイルは <filename>postgresql.conf</filename> と同じフォーマットですが、手動ではなく自動で編集されることを意図しています。
このファイルは<link linkend="sql-altersystem"><command>ALTER SYSTEM</command></link>コマンドを使った設定値を保存します。
このファイルは<filename>postgresql.conf</filename> が読み込まれるときはいつでも自動的に読み込まれ、同じように設定が反映されます。
<filename>postgresql.auto.conf</filename>は、<filename>postgresql.conf</filename>の設定を上書きします。
    </para>

    <para>
<!--
     External tools may also
     modify <filename>postgresql.auto.conf</filename>.  It is not
     recommended to do this while the server is running unless <xref
     linkend="guc-allow-alter-system"/> is set to <literal>off</literal>, since a
     concurrent <command>ALTER SYSTEM</command> command could overwrite
     such changes.  Such tools might simply append new settings to the end,
     or they might choose to remove duplicate settings and/or comments
     (as <command>ALTER SYSTEM</command> will).
-->
外部ツールも<filename>postgresql.auto.conf</filename>を変更するかも知れません。
<command>ALTER SYSTEM</command>が変更を上書きする可能性があるので、<xref linkend="guc-allow-alter-system"/>が<literal>off</literal>に設定されていない限り、サーバが稼働中は外部ツールによる変更は推奨されません。
そのようなツールは、単に新しい設定を最後に追加するか、重複した設定あるいはコメント(<command>ALTER SYSTEM</command>が行います)を削除することを選択するかも知れません。
    </para>

    <para>
<!--
     The system view
     <link linkend="view-pg-file-settings"><structname>pg_file_settings</structname></link>
     can be helpful for pre-testing changes to the configuration files, or for
     diagnosing problems if a <systemitem>SIGHUP</systemitem> signal did not have the
     desired effects.
-->
システムビューの<link linkend="view-pg-file-settings"><structname>pg_file_settings</structname></link>は、設定ファイルへの変更を前もってテストしたい場合や、<systemitem>SIGHUP</systemitem>シグナルで望み通りの効果がなかった場合に問題を調査する際に役立ちます。
    </para>
   </sect2>

   <sect2 id="config-setting-sql">
<!--
    <title>Parameter Interaction via SQL</title>
-->
    <title>SQLを通じたパラメータ操作</title>

     <para>
<!--
      <productname>PostgreSQL</productname> provides three SQL
      commands to establish configuration defaults.
      The already-mentioned <command>ALTER SYSTEM</command> command
      provides an SQL-accessible means of changing global defaults; it is
      functionally equivalent to editing <filename>postgresql.conf</filename>.
      In addition, there are two commands that allow setting of defaults
      on a per-database or per-role basis:
-->
<productname>PostgreSQL</productname>は3つのSQLコマンドでデフォルト値を設定します。
すでに説明した<command>ALTER SYSTEM</command>コマンドは、SQLによってグローバルな設定値を変更する方法を提供します; <filename>postgresql.conf</filename>を編集するのと等価です。これに加え、データベース単位あるいはロール単位で設定するためのコマンドがあります:
     </para>

     <itemizedlist>
     <listitem>
      <para>
<!--
       The <link linkend="sql-alterdatabase"><command>ALTER DATABASE</command></link> command allows global
       settings to be overridden on a per-database basis.
-->
<link linkend="sql-alterdatabase"><command>ALTER DATABASE</command></link>コマンドはデータベース単位でグローバルな設定値を上書きします。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       The <link linkend="sql-alterrole"><command>ALTER ROLE</command></link> command allows both global and
       per-database settings to be overridden with user-specific values.
-->
<link linkend="sql-alterrole"><command>ALTER ROLE</command></link>コマンドはグローバルと、データベース単位の両方をユーザ固有の設定値で上書きします。
      </para>
     </listitem>
    </itemizedlist>

     <para>
<!--
      Values set with <command>ALTER DATABASE</command> and <command>ALTER ROLE</command>
      are applied only when starting a fresh database session.  They
      override values obtained from the configuration files or server
      command line, and constitute defaults for the rest of the session.
      Note that some settings cannot be changed after server start, and
      so cannot be set with these commands (or the ones listed below).
-->
<command>ALTER DATABASE</command>と<command>ALTER ROLE</command>による設定値は新しくデータベースセッションを開始した時にのみ適用されます。
これらのコマンドは設定ファイルやサーバのコマンドラインから取得した値を上書きし、セッションの残りの部分のデフォルト値を構成します。
なお、一部の設定はサーバを起動した後では変更できず、これらのコマンドを使っては設定できません（以下に記述するコマンドでも同じことが言えます）。
    </para>

     <para>
<!--
      Once a client is connected to the database, <productname>PostgreSQL</productname>
      provides two additional SQL commands (and equivalent functions) to
      interact with session-local configuration settings:
-->
クライアントがデータベースに接続すると、<productname>PostgreSQL</productname>では更に2つのSQL(そして同等の関数)を使ってセッションローカルの設定変更を行うことができます。
    </para>

    <itemizedlist>
     <listitem>
     <para>
<!--
      The <link linkend="sql-show"><command>SHOW</command></link> command allows inspection of the
      current value of any parameter.  The corresponding SQL function is
      <function>current_setting(setting_name text)</function>
      (see <xref linkend="functions-admin-set"/>).
-->
<link linkend="sql-show"><command>SHOW</command></link>コマンドを使ってすべてのパラメータの現在の値を調べることができます。
対応する関数は<function>current_setting(setting_name text)</function>です（<xref linkend="functions-admin-set"/>を参照してください）。
     </para>
     </listitem>

     <listitem>
      <para>
<!--
       The <link linkend="sql-set"><command>SET</command></link> command allows modification of the
       current value of those parameters that can be set locally to a
       session; it has no effect on other sessions.
       Many parameters can be set this way by any user, but some can
       only be set by superusers and users who have been
       granted <literal>SET</literal> privilege on that parameter.
       The corresponding SQL function is
       <function>set_config(setting_name, new_value, is_local)</function>
       (see <xref linkend="functions-admin-set"/>).
-->
<link linkend="sql-set"><command>SET</command></link>コマンドでセッション内でローカルに変更できるパラメータの値を変更することができます。他のセッションには影響がありません。
多くのパラメータはすべてのユーザがこの方法で設定できますが、スーパーユーザか、そのパラメータの<literal>SET</literal>権限が与えられたユーザだけが設定できるものもあります。
対応するSQL関数は<function>set_config(setting_name, new_value, is_local)</function>です。
（<xref linkend="functions-admin-set"/>を参照してください）。
      </para>
     </listitem>
    </itemizedlist>

    <para>
<!--
     In addition, the system view <link
     linkend="view-pg-settings"><structname>pg_settings</structname></link> can be
     used to view and change session-local values:
-->
更にシステムビューの<link linkend="view-pg-settings"><structname>pg_settings</structname></link>を使ってセッションローカルな値を参照したり変更することができます。
    </para>

    <itemizedlist>
     <listitem>
      <para>
<!--
       Querying this view is similar to using <command>SHOW ALL</command> but
       provides more detail.  It is also more flexible, since it's possible
       to specify filter conditions or join against other relations.
-->
このビューを問い合わせるのは、<command>SHOW ALL</command>を使うのと同じですが、更に詳細な情報を提供します。
フィルタ条件を指定したり他のリレーションと結合ができるので、より柔軟です。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       Using <command>UPDATE</command> on this view, specifically
       updating the <structname>setting</structname> column, is the equivalent
       of issuing <command>SET</command> commands.  For example, the equivalent of
-->
このビューに対して<command>UPDATE</command>を実行する、具体的には<structname>setting</structname>列を更新することは、<command>SET</command>コマンドを実行するのと同等です。
たとえば、
<programlisting>
SET configuration_parameter TO DEFAULT;
</programlisting>
<!--
       is:
-->
は以下と同じです。
<programlisting>
UPDATE pg_settings SET setting = reset_val WHERE name = 'configuration_parameter';
</programlisting>
      </para>
     </listitem>
    </itemizedlist>

   </sect2>

   <sect2 id="config-setting-shell">
<!--
    <title>Parameter Interaction via the Shell</title>
-->
    <title>シェルによるパラメータ操作</title>

     <para>
<!--
      In addition to setting global defaults or attaching
      overrides at the database or role level, you can pass settings to
      <productname>PostgreSQL</productname> via shell facilities.
      Both the server and <application>libpq</application> client library
      accept parameter values via the shell.
-->
グローバルなデフォルト値を設定したりデータベース、ロール単位で上書きを行えるだけでなく、シェル機能を使って<productname>PostgreSQL</productname>に設定値を渡すことができます。
サーバも<application>libpq</application>クライアントライブラリもシェル経由でパラメータ値を受けとることができます。
     </para>

     <itemizedlist>
      <listitem>
      <para>
<!--
       During server startup, parameter settings can be
       passed to the <command>postgres</command> command via the
       <option>-c name=value</option> command-line parameter, or its equivalent
       <option>&#45;-name=value</option> variation.  For example,
-->
サーバ起動時に、<option>-c</option>コマンドラインパラメータか、それと同等で別の形式の<option>--name=value</option>を使ってパラメータ設定値を<command>postgres</command>に渡すことができます。たとえば、
<programlisting>
postgres -c log_connections=all --log-destination='syslog'
</programlisting>
<!--
       Settings provided in this way override those set via
       <filename>postgresql.conf</filename> or <command>ALTER SYSTEM</command>,
       so they cannot be changed globally without restarting the server.
-->
このようにして渡された設定値は、<filename>postgresql.conf</filename>や<command>ALTER SYSTEM</command>による設定を上書きします。
したがってサーバを再起動しない限りこれらの設定値をグローバルに変更することはできません。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      When starting a client session via <application>libpq</application>,
      parameter settings can be
      specified using the <envar>PGOPTIONS</envar> environment variable.
      Settings established in this way constitute defaults for the life
      of the session, but do not affect other sessions.
      For historical reasons, the format of <envar>PGOPTIONS</envar> is
      similar to that used when launching the <command>postgres</command>
      command; specifically, the <option>-c</option>, or prepended
      <literal>&#45;-</literal>, before the name must be specified. For example,
-->
<application>libpq</application>を使ってクライアントセッションを開始するときに<envar>PGOPTIONS</envar>環境変数を使って設定値を指定できます。
このようにして渡された設定値はセッションのデフォルトとなりますが、他のセッションには影響を与えません。
歴史的な理由により、<envar>PGOPTIONS</envar>の形式は<command>postgres</command>を起動するときのものと似ています。とりわけ、<option>-c</option>を指定するか、先頭に<literal>--</literal>を付加した名前を指定しなければならない点です。たとえば、
<programlisting>
env PGOPTIONS="-c geqo=off --statement-timeout=5min" psql
</programlisting>
     </para>

     <para>
<!--
      Other clients and libraries might provide their own mechanisms,
      via the shell or otherwise, that allow the user to alter session
      settings without direct use of SQL commands.
-->
他のクライアントやライブラリではそれぞれ固有の方法でシェルなどを経由して、SQLコマンドを直接使わずにセッションの設定を変更することができるかもしれません。
     </para>
    </listitem>
   </itemizedlist>

   </sect2>

   <sect2 id="config-includes">
<!--
    <title>Managing Configuration File Contents</title>
-->
    <title>設定ファイルの内容の管理</title>

     <para>
<!--
      <productname>PostgreSQL</productname> provides several features for breaking
      down complex <filename>postgresql.conf</filename> files into sub-files.
      These features are especially useful when managing multiple servers
      with related, but not identical, configurations.
-->
<productname>PostgreSQL</productname>は複雑な<filename>postgresql.conf</filename>ファイルを複数の小さなファイルに分割する複数の方法を提供しています。
これは、とりわけお互いに関連しているものの設定が同じではない複数のサーバを管理する際に有用です。
     </para>

     <para>
      <indexterm>
       <primary><literal>include</literal></primary>
       <secondary>in configuration file</secondary>
      </indexterm>
      <indexterm>
       <primary><literal>include</literal></primary>
       <secondary>設定ファイルにおける</secondary>
      </indexterm>
<!--
      In addition to individual parameter settings,
      the <filename>postgresql.conf</filename> file can contain <firstterm>include
      directives</firstterm>, which specify another file to read and process as if
      it were inserted into the configuration file at this point.  This
      feature allows a configuration file to be divided into physically
      separate parts.  Include directives simply look like:
-->
パラメータ設定に加え、<filename>postgresql.conf</filename>ファイルに<firstterm>includeディレクティブ</firstterm>を入れることができます。
このようにすると、別のファイルがあたかも設定ファイルのその場所に挿入されているかのごとく読み込まれ、処理されるように指定されます。
この機能により、設定ファイルを物理的に異なる複数のパーツに分解することができます。
Includeディレクティブは単に次のような形式になります。
<!--
<programlisting>
include 'filename'
</programlisting>
-->
<programlisting>
include 'ファイル名'
</programlisting>
<!--
      If the file name is not an absolute path, it is taken as relative to
      the directory containing the referencing configuration file.
      Inclusions can be nested.
-->
ファイル名が絶対パスでない場合、参照する設定ファイルを含むディレクトリからの相対パスであると受け取られます。
Includeコマンドは入れ子にすることができます。
     </para>

     <para>
      <indexterm>
       <primary><literal>include_if_exists</literal></primary>
       <secondary>in configuration file</secondary>
      </indexterm>
      <indexterm>
       <primary><literal>include_if_exists</literal></primary>
       <secondary>設定ファイルにおける</secondary>
      </indexterm>
<!--
      There is also an <literal>include_if_exists</literal> directive, which acts
      the same as the <literal>include</literal> directive, except
      when the referenced file does not exist or cannot be read.  A regular
      <literal>include</literal> will consider this an error condition, but
      <literal>include_if_exists</literal> merely logs a message and continues
      processing the referencing configuration file.
-->
<literal>include_if_exists</literal>ディレクティブもあります。
これは参照ファイルが存在しないか、または読み込むことができない場合の動作を除き、<literal>include</literal>ディレクティブと同一の動作をします。
通常の<literal>include</literal>はこれをエラーと解釈しますが、<literal>include_if_exists</literal>はただ単にメッセージをログ出力し、そして参照している設定ファイルの処理を続けます。
     </para>

     <para>
      <indexterm>
       <primary><literal>include_dir</literal></primary>
       <secondary>in configuration file</secondary>
      </indexterm>
      <indexterm>
       <primary><literal>include_dir</literal></primary>
       <secondary>設定ファイルにおける</secondary>
      </indexterm>
<!--
      The <filename>postgresql.conf</filename> file can also contain
      <literal>include_dir</literal> directives, which specify an entire
      directory of configuration files to include.  These look like
-->
includeする設定ファイルを含むディレクトリ全体を指定する<literal>include_dir</literal>ディレクティブを、<filename>postgresql.conf</filename>ファイルに含めることもできます。
このような感じです。
<!--
<programlisting>
include_dir 'directory'
</programlisting>
-->
<programlisting>
include_dir 'ディレクトリ名'
</programlisting>
<!--
      Non-absolute directory names are taken as relative to the directory
      containing the referencing configuration file.  Within the specified
      directory, only non-directory files whose names end with the
      suffix <literal>.conf</literal> will be included.  File names that
      start with the <literal>.</literal> character are also ignored, to
      prevent mistakes since such files are hidden on some platforms.  Multiple
      files within an include directory are processed in file name order
      (according to C locale rules, i.e., numbers before letters, and
      uppercase letters before lowercase ones).
-->
絶対パスではないディレクトリ名はその設定ファイルがあるディレクトリへの相対パスと見なされます。
指定したディレクトリの中で、ディレクトリではないファイルで末尾が<literal>.conf</literal>で終わるファイルだけがincludeされます。
また、文字<literal>.</literal> で開始するファイル名は一部のプラットフォームでは隠しファイルとされるので、間違いを防止するため無視されます。
includeされるディレクトリにある複数ファイルはファイル名順に処理されます(ファイル名は C ロケール規則で順序付けされます。
つまり、文字より数字、小文字より大文字が先になります)。
     </para>

     <para>
<!--
      Include files or directories can be used to logically separate portions
      of the database configuration, rather than having a single large
      <filename>postgresql.conf</filename> file.  Consider a company that has two
      database servers, each with a different amount of memory.  There are
      likely elements of the configuration both will share, for things such
      as logging.  But memory-related parameters on the server will vary
      between the two.  And there might be server specific customizations,
      too.  One way to manage this situation is to break the custom
      configuration changes for your site into three files.  You could add
      this to the end of your <filename>postgresql.conf</filename> file to include
      them:
-->
includeされるファイルもしくはディレクトリは、大きな単一の<filename>postgresql.conf</filename>ファイルを使う代わりに、データベース設定の一部分を論理的に分離するために使用することが可能です。
異なるメモリ容量を持つ二つのデータベースサーバを所有する会社を考えてみてください。
例えばログ出力のように、二つが共有する設定の要素があると思われます。
しかし、サーバ上のメモリに関連したパラメータは二つの間では異なります。
更に、サーバ特有のカスタマイズも存在することがあります。
この状況に対処する一つの方法として、そのサイトに対するカスタマイズされた設定の変更を三つのファイルにすることです。
それらをincludeするためには<filename>postgresql.conf</filename>ファイルの最後に以下を追加します。
<programlisting>
include 'shared.conf'
include 'memory.conf'
include 'server.conf'
</programlisting>
<!--
      All systems would have the same <filename>shared.conf</filename>.  Each
      server with a particular amount of memory could share the
      same <filename>memory.conf</filename>; you might have one for all servers
      with 8GB of RAM, another for those having 16GB.  And
      finally <filename>server.conf</filename> could have truly server-specific
      configuration information in it.
-->
全てのシステムは同一の<filename>shared.conf</filename>を所有する様になるでしょう。
特定のメモリ容量を所有するそれぞれのサーバは同じ<filename>memory.conf</filename>を共有できます。
RAMが8GBのすべてのサーバには共通の<filename>memory.conf</filename>を1つ使い、16GBのサーバ群には別のものを使う、ということもできるでしょう。
そして最後の<filename>server.conf</filename>には、本当にサーバ固有となる設定情報を記載します。
     </para>

     <para>
<!--
      Another possibility is to create a configuration file directory and
      put this information into files there. For example, a <filename>conf.d</filename>
      directory could be referenced at the end of <filename>postgresql.conf</filename>:
-->
別の方法として、設定ファイルディレクトリを作成し、この情報をそこのファイルに格納することができます。
たとえば、<filename>conf.d</filename>ディレクトリを<filename>postgresql.conf</filename>の最後で参照するようにできます。
<programlisting>
include_dir 'conf.d'
</programlisting>
<!--
      Then you could name the files in the <filename>conf.d</filename> directory
      like this:
-->
そして、<filename>conf.d</filename>の中のファイルを以下のような名前にすることができます。
<programlisting>
00shared.conf
01memory.conf
02server.conf
</programlisting>
<!--
       This naming convention establishes a clear order in which these
       files will be loaded.  This is important because only the last
       setting encountered for a particular parameter while the server is
       reading configuration files will be used.  In this example,
       something set in <filename>conf.d/02server.conf</filename> would override a
       value set in <filename>conf.d/01memory.conf</filename>.
-->
この命名規則により、これらのファイルが読み込まれる順序が明確になります。
サーバが設定を読み込んでいるときに各パラメータについて最後にあった設定だけが使用されるので、このことは重要です。
この例では、<filename>conf.d/02server.conf</filename>でされた指定は<filename>conf.d/01memory.conf</filename>の設定値よりも優先します。
     </para>

     <para>
<!--
      You might instead use this approach to naming the files
      descriptively:
-->
代わりに以下の方法を使って、ファイルにわかりやすい名前をつけることもできます。
<programlisting>
00shared.conf
01memory-8GB.conf
02server-foo.conf
</programlisting>
<!--
      This sort of arrangement gives a unique name for each configuration file
      variation.  This can help eliminate ambiguity when several servers have
      their configurations all stored in one place, such as in a version
      control repository.  (Storing database configuration files under version
      control is another good practice to consider.)
-->
こういった工夫で、設定ファイルのバリエーションに対して固有の名前を付与することができます。
また、バージョン管理リポジトリのリポジトリに複数のサーバの設定ファイルを置く場合に生じる曖昧さを排除することができます。
（データベース設定ファイルをバージョン管理することは、これもまた検討に値するやり方です。）
     </para>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-file-locations">
<!--
    <title>File Locations</title>
-->
    <title>ファイルの場所</title>

     <para>
<!--
      In addition to the <filename>postgresql.conf</filename> file
      already mentioned, <productname>PostgreSQL</productname> uses
      two other manually-edited configuration files, which control
      client authentication (their use is discussed in <xref
      linkend="client-authentication"/>).  By default, all three
      configuration files are stored in the database cluster's data
      directory.  The parameters described in this section allow the
      configuration files to be placed elsewhere.  (Doing so can ease
      administration.  In particular it is often easier to ensure that
      the configuration files are properly backed-up when they are
      kept separate.)
-->
すでに説明した<filename>postgresql.conf</filename>ファイルに加え、<productname>PostgreSQL</productname>は、クライアント認証の管理を行うために、他の2つの手作業で編集される設定ファイルを使用します（これらの使用方法は<xref linkend="client-authentication"/>で説明します）。
全ての3つの設定ファイルは、デフォルトではデータベースクラスタのdataディレクトリに格納されます。
本節で説明するパラメータにより、設定ファイルを他の場所に置くことが可能になります。
（そのようにすると管理がしやすくなります。
とりわけ、設定ファイルを分けて保存することで、設定ファイルの適切なバックアップを確実に行うことがしばしば容易になります。）
     </para>

     <variablelist>
     <varlistentry id="guc-data-directory" xreflabel="data_directory">
      <term><varname>data_directory</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>data_directory</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>data_directory</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
         Specifies the directory to use for data storage.
         This parameter can only be set at server start.
-->
データ格納に使用するディレクトリを指定します。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-config-file" xreflabel="config_file">
      <term><varname>config_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>config_file</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>config_file</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
         Specifies the main server configuration file
         (customarily called <filename>postgresql.conf</filename>).
         This parameter can only be set on the <command>postgres</command> command line.
-->
メインサーバ設定ファイルを指定します（通例<filename>postgresql.conf</filename>と呼ばれます）。
このパラメータは<command>postgres</command>コマンドライン上でのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-hba-file" xreflabel="hba_file">
      <term><varname>hba_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>hba_file</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>hba_file</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
         Specifies the configuration file for host-based authentication
         (customarily called <filename>pg_hba.conf</filename>).
         This parameter can only be set at server start.
-->
ホストベース認証（HBA）用のファイルを指定します（通例<filename>pg_hba.conf</filename>と呼ばれます）。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ident-file" xreflabel="ident_file">
      <term><varname>ident_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ident_file</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ident_file</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
         Specifies the configuration file for user name mapping
         (customarily called <filename>pg_ident.conf</filename>).
         This parameter can only be set at server start.
         See also <xref linkend="auth-username-maps"/>.
-->
ユーザ名マッピングの設定ファイルを指定します（通例<filename>pg_ident.conf</filename>と呼ばれます）。
このパラメータはサーバ起動時のみ設定可能です。
<xref linkend="auth-username-maps"/>もご覧ください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-external-pid-file" xreflabel="external_pid_file">
      <term><varname>external_pid_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>external_pid_file</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>external_pid_file</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the name of an additional process-ID (PID) file that the
        server should create for use by server administration programs.
        This parameter can only be set at server start.
-->
サーバ管理プログラムで使用するためにサーバが作成する、追加のプロセス識別子（PID）ファイルの名前を指定します。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>
     </variablelist>

     <para>
<!--
      In a default installation, none of the above parameters are set
      explicitly.  Instead, the
      data directory is specified by the <option>-D</option> command-line
      option or the <envar>PGDATA</envar> environment variable, and the
      configuration files are all found within the data directory.
-->
デフォルトのインストールでは、上記のいかなるパラメータも明示的に設定されません。
その代わり、data ディレクトリは<option>-D</option>コマンドラインオプション、または<envar>PGDATA</envar>環境変数で指定され、設定ファイル全てはその data ディレクトリ内に格納されます。
     </para>

     <para>
<!--
      If you wish to keep the configuration files elsewhere than the
      data directory, the <command>postgres</command> <option>-D</option>
      command-line option or <envar>PGDATA</envar> environment variable
      must point to the directory containing the configuration files,
      and the <varname>data_directory</varname> parameter must be set in
      <filename>postgresql.conf</filename> (or on the command line) to show
      where the data directory is actually located.  Notice that
      <varname>data_directory</varname> overrides <option>-D</option> and
      <envar>PGDATA</envar> for the location
      of the data directory, but not for the location of the configuration
      files.
-->
dataディレクトリ以外の場所に設定ファイルを格納したいのであれば、<command>postgres</command>の<option>-D</option>コマンドラインオプション、または<envar>PGDATA</envar>環境変数で設定ファイルの場所を指し示し、そしてdataディレクトリが実際どこに存在するのかを示すため、<filename>postgresql.conf</filename>の（もしくはコマンドライン上で）<varname>data_directory</varname>パラメータを設定しなければなりません。
<varname>data_directory</varname>は、設定ファイルの場所ではなく、data ディレクトリの位置に関して、<option>-D</option>および<envar>PGDATA</envar>を上書きすることに注意してください。
     </para>

     <para>
<!--
      If you wish, you can specify the configuration file names and locations
      individually using the parameters <varname>config_file</varname>,
      <varname>hba_file</varname> and/or <varname>ident_file</varname>.
      <varname>config_file</varname> can only be specified on the
      <command>postgres</command> command line, but the others can be
      set within the main configuration file.  If all three parameters plus
      <varname>data_directory</varname> are explicitly set, then it is not necessary
      to specify <option>-D</option> or <envar>PGDATA</envar>.
-->
必要に応じて、パラメータ<varname>config_file</varname>、<varname>hba_file</varname>、<varname>ident_file</varname>を使用し、設定ファイルの名前と場所を個別に指定することができます。
<varname>config_file</varname>は<command>postgres</command>コマンドラインによってのみ指定されますが、その他は主設定ファイル内で設定できます。
全ての3つのパラメータと<varname>data_directory</varname>が明示的に設定されていれば、<option>-D</option>または<envar>PGDATA</envar>を指定する必要はありません。
     </para>

     <para>
<!--
      When setting any of these parameters, a relative path will be interpreted
      with respect to the directory in which <command>postgres</command>
      is started.
-->
これらのパラメータのどれを設定する場合でも、相対パスは、<command>postgres</command>が起動されるディレクトリから見た相対パスとして解釈されます。
     </para>
   </sect1>

   <sect1 id="runtime-config-connection">
<!--
    <title>Connections and Authentication</title>
-->
    <title>接続と認証</title>

    <sect2 id="runtime-config-connection-settings">
<!--
     <title>Connection Settings</title>
-->
     <title>接続設定</title>

     <variablelist>

     <varlistentry id="guc-listen-addresses" xreflabel="listen_addresses">
      <term><varname>listen_addresses</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>listen_addresses</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>listen_addresses</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
         Specifies the TCP/IP address(es) on which the server is
         to listen for connections from client applications.
         The value takes the form of a comma-separated list of host names
         and/or numeric IP addresses.  The special entry <literal>*</literal>
         corresponds to all available IP interfaces.  The entry
         <literal>0.0.0.0</literal> allows listening for all IPv4 addresses and
         <literal>::</literal> allows listening for all IPv6 addresses.
         If the list is empty, the server does not listen on any IP interface
         at all, in which case only Unix-domain sockets can be used to connect
         to it.  If the list is not empty, the server will start if it
         can listen on at least one TCP/IP address.  A warning will be
         emitted for any TCP/IP address which cannot be opened.
         The default value is <systemitem class="systemname">localhost</systemitem>,
         which allows only local TCP/IP <quote>loopback</quote> connections to be
         made.
-->
クライアントアプリケーションからの接続をサーバが監視するTCP/IPアドレスを指定します。
この値は、ホスト名をカンマで区切ったリスト、そして/もしくは、数値によるIPアドレスです。
<literal>*</literal>という特別なエントリは利用可能な全てのIPインタフェースに対応します。
エントリ<literal>0.0.0.0</literal>は全てのIPv4アドレスの監視を、そしてエントリ<literal>::</literal>は全てのIPv6アドレスの監視を許容します。
リストが空の場合、サーバはいかなるIPインタフェースも全く監視しないで、Unixドメインソケットのみを使用して接続が行われます。
リストが空でない場合、少なくとも1つのTCP/IPアドレスがリスニングできる場合にサーバは起動します。
開くことのできなかったすべてのTCP/IPアドレスに対して警告が発せられます。
デフォルトの値は<systemitem class="systemname">localhost</systemitem>で、ローカルなTCP/IP <quote>loopback</quote>接続のみ許可します。
       </para>
       <para>
<!--
         While client authentication (<xref
         linkend="client-authentication"/>) allows fine-grained control
         over who can access the server, <varname>listen_addresses</varname>
         controls which interfaces accept connection attempts, which
         can help prevent repeated malicious connection requests on
         insecure network interfaces.  This parameter can only be set
         at server start.
-->
クライアント認証(<xref linkend="client-authentication"/>)は、誰がサーバにアクセスできるかを細かく制御できますが、<varname>listen_addresses</varname>は接続要求を受け付けるインタフェースを制御します。
これは、セキュアでないネットワークインタフェース上での悪意のある接続試行の繰り返しを防ぐのに役立ちます。
このパラメータはサーバ起動時にのみ設定できます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-port" xreflabel="port">
      <term><varname>port</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>port</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>port</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The TCP port the server listens on; 5432 by default.  Note that the
        same port number is used for all IP addresses the server listens on.
        This parameter can only be set at server start.
-->
サーバが監視するTCPポートで、デフォルトは 5432です。
サーバが監視する全てのIPアドレスに対し、同じポート番号が使用されることを覚えておいてください。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-connections" xreflabel="max_connections">
      <term><varname>max_connections</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_connections</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_connections</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Determines the maximum number of concurrent connections to the
        database server. The default is typically 100 connections, but
        might be less if your kernel settings will not support it (as
        determined during <application>initdb</application>).  This parameter can
        only be set at server start.
-->
データベースサーバに同時接続する最大数を決定します。
デフォルトは典型的に100接続ですが、カーネルの設定が（<application>initdb</application>の過程で）それをサポートしていない場合、もっと少なくなることがあります。
このパラメータはサーバ起動時のみに設定可能です。
       </para>

       <para>
<!--
        <productname>PostgreSQL</productname> sizes certain resources based directly on the value of
        <varname>max_connections</varname>. Increasing its value leads to
        higher allocation of those resources, including shared memory.
-->
《マッチ度[80.542986]》PostgreSQLは、<varname>max_connections</varname>の値に直接基づいてある種のリソースのサイズを設定します。
その値を大きくすると、共有メモリを含み、より大きなリソースがアロケーションされます。
《機械翻訳》<productname>PostgreSQL</productname>特定のリソースのサイズは、<varname>max_connections</varname>の値に直接基づいています。
その値を増やすと、共有メモリを含むそれらのリソースのアロケーションが高くなります。
       </para>

       <para>
<!--
        When running a standby server, you must set this parameter to the
        same or higher value than on the primary server. Otherwise, queries
        will not be allowed in the standby server.
-->
スタンバイサーバを運用している場合、このパラメータはプライマリサーバでの設定と同じ、もしくはより高い値に設定しなければなりません。そうしないと問い合わせがスタンバイサーバ内で受け入れられません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-reserved-connections" xreflabel="reserved_connections">
      <term><varname>reserved_connections</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>reserved_connections</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>reserved_connections</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Determines the number of connection <quote>slots</quote> that are
        reserved for connections by roles with privileges of the
        <xref linkend="predefined-role-pg-use-reserved-connections"/>
        role.  Whenever the number of free connection slots is greater than
        <xref linkend="guc-superuser-reserved-connections"/> but less than or
        equal to the sum of <varname>superuser_reserved_connections</varname>
        and <varname>reserved_connections</varname>, new connections will be
        accepted only for superusers and roles with privileges of
        <literal>pg_use_reserved_connections</literal>.  If
        <varname>superuser_reserved_connections</varname> or fewer connection
        slots are available, new connections will be accepted only for
        superusers.
-->
《マッチ度[80.812325]》<xref linkend="predefined-role-pg-use-reserved-connections"/>権限を持つロールによる接続のために予約される接続<quote>スロット</quote>の数を決定します。
空き接続スロットの数が<xref linkend="guc-superuser-reserved-connections"/>より大きく、かつ<varname>superuser_reserved_connections</varname>と<varname>reserved_connections</varname>の合計以下の場合は常に、新しい接続はスーパーユーザあるいは<literal>pg_use_reserved_connections</literal>権限を持つロールに対してのみ受け入れられます。
<varname>superuser_reserved_connections</varname>以下の接続スロットが利用可能な場合、新しい接続はスーパーユーザに対してのみ受け入れられます。
《機械翻訳》<xref linkend="predefined-role-pg-use-reserved-connections"/>コネクションの権限を持つロールによる接続のための予約であるロール<quote>スロット</quote>の数を決定します。
フリーコネクションスロットの数がより大きい<xref linkend="guc-superuser-reserved-connections"/>であっても、以下が<varname>superuser_reserved_connections</varname>および<varname>reserved_connections</varname>の総和である場合、新しい接続はスーパーユーザおよび<literal>pg_use_reserved_connections</literal>の権限を持つロールに対してのみ受け付けられます。
<varname>superuser_reserved_connections</varname>またはより少ないコネクションスロットが利用可能な場合、新しい接続はスーパーユーザに対してのみ受け付けられます。
       </para>

       <para>
<!--
        The default value is zero connections.  The value must be less than
        <varname>max_connections</varname> minus
        <varname>superuser_reserved_connections</varname>.  This parameter can
        only be set at server start.
-->
デフォルトの値は0接続です。
この値は <varname>max_connections</varname> - <varname>superuser_reserved_connections</varname>より小さくなくてはなりません。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-superuser-reserved-connections"
     xreflabel="superuser_reserved_connections">
      <term><varname>superuser_reserved_connections</varname>
      (<type>integer</type>)
      <indexterm>
       <primary><varname>superuser_reserved_connections</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>superuser_reserved_connections</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Determines the number of connection <quote>slots</quote> that
        are reserved for connections by <productname>PostgreSQL</productname>
        superusers.  At most <xref linkend="guc-max-connections"/>
        connections can ever be active simultaneously.  Whenever the
        number of active concurrent connections is at least
        <varname>max_connections</varname> minus
        <varname>superuser_reserved_connections</varname>, new
        connections will be accepted only for superusers.  The connection slots
        reserved by this parameter are intended as final reserve for emergency
        use after the slots reserved by
        <xref linkend="guc-reserved-connections"/> have been exhausted.
-->
<productname>PostgreSQL</productname>のスーパーユーザによる接続のために予約されている接続<quote>スロット</quote>の数を決定します。
最大、<xref linkend="guc-max-connections"/>の数までの接続を同時に有効にすることができます。
有効な同時接続数が<varname>max_connections</varname>から<varname>superuser_reserved_connections</varname>を差し引いた数以上のときは、新規接続はスーパーユーザのみが許可されます。
このパラメータによる接続スロット予約は、<xref linkend="guc-reserved-connections"/>によるスロット予約が使い果たされた後の緊急使用のための最終的な予備を意図しています。
       </para>

       <para>
<!--
        The default value is three connections. The value must be less
        than <varname>max_connections</varname> minus
        <varname>reserved_connections</varname>.
        This parameter can only be set at server start.
-->
デフォルトの値は3接続です。
この値は <varname>max_connections</varname>から<varname>reserved_connections</varname>を引いたものより小さくなくてはなりません。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-directories" xreflabel="unix_socket_directories">
      <term><varname>unix_socket_directories</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>unix_socket_directories</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>unix_socket_directories</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the directory of the Unix-domain socket(s) on which the
        server is to listen for connections from client applications.
        Multiple sockets can be created by listing multiple directories
        separated by commas.  Whitespace between entries is
        ignored; surround a directory name with double quotes if you need
        to include whitespace or commas in the name.
        An empty value
        specifies not listening on any Unix-domain sockets, in which case
        only TCP/IP sockets can be used to connect to the server.
-->
クライアントアプリケーションからの接続をlistenするサーバ上のUnixドメインソケットのディレクトリを指定します。
複数のディレクトリをカンマで区切って指定することにより、複数のソケットを作ることができます。
項目の間の空白は無視されます。
名前の中に空白かカンマが必要なら、ディレクトリ名を二重引用符で囲ってください。
空の値はUnixドメインソケットをlistenしないことを意味します。
この場合、TCP/IPソケットを使ってサーバに接続することだけが可能になります。
       </para>

       <para>
<!--
        A value that starts with <literal>@</literal> specifies that a
        Unix-domain socket in the abstract namespace should be created
        (currently supported on Linux only).  In that case, this value
        does not specify a <quote>directory</quote> but a prefix from which
        the actual socket name is computed in the same manner as for the
        file-system namespace.  While the abstract socket name prefix can be
        chosen freely, since it is not a file-system location, the convention
        is to nonetheless use file-system-like values such as
        <literal>@/tmp</literal>.
-->
<literal>@</literal>で始まる値は、抽象名前空間にUnixドメインソケットを作ることを指定します（今の所これはLinuxでのみサポートされています）。
この場合、この値は<quote>ディレクトリ</quote>ではなくファイルシステムの名前空間と同様の方法で、実際のソケット名の接頭辞が求められます。
ファイルシステムの位置ではないため、抽象ソケット名接頭辞は自由に選択できますが、それにもかかわらず<literal>@/tmp</literal>のようなファイルシステム的な値を使うのが慣例です。
       </para>

       <para>
<!--
        The default value is normally
        <filename>/tmp</filename>, but that can be changed at build time.
        On Windows, the default is empty, which means no Unix-domain socket is
        created by default.
        This parameter can only be set at server start.
-->
デフォルト値は通常<filename>/tmp</filename>ですが、ビルド時に変更できます。
Windowsではデフォルトは空文字で、これはつまりUnixドメインソケットがデフォルトでは作成されないことを意味します。
このパラメータはサーバ起動時のみ設定可能です。
       </para>

       <para>
<!--
        In addition to the socket file itself, which is named
        <literal>.s.PGSQL.<replaceable>nnnn</replaceable></literal> where
        <replaceable>nnnn</replaceable> is the server's port number, an ordinary file
        named <literal>.s.PGSQL.<replaceable>nnnn</replaceable>.lock</literal> will be
        created in each of the <varname>unix_socket_directories</varname> directories.
        Neither file should ever be removed manually.
        For sockets in the abstract namespace, no lock file is created.
-->
<literal>.s.PGSQL.<replaceable>nnnn</replaceable></literal>という名前のソケットファイル（<replaceable>nnnn</replaceable>はポート番号）のほかに、<literal>.s.PGSQL.<replaceable>nnnn</replaceable>.lock</literal>という通常ファイルがそれぞれの<varname>unix_socket_directories</varname>ディレクトリの中に作成されます。
いずれのファイルも手作業で削除してはいけません。
抽象名前空間にあるソケットにはロックファイルは作成されません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-group" xreflabel="unix_socket_group">
      <term><varname>unix_socket_group</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>unix_socket_group</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>unix_socket_group</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the owning group of the Unix-domain socket(s).  (The owning
        user of the sockets is always the user that starts the
        server.)  In combination with the parameter
        <varname>unix_socket_permissions</varname> this can be used as
        an additional access control mechanism for Unix-domain connections.
        By default this is the empty string, which uses the default
        group of the server user.  This parameter can only be set at
        server start.
-->
Unixドメインソケット（複数も）を所有するグループを設定します。
（ソケットを所有するユーザは常にサーバを起動するユーザです。）
<varname>unix_socket_permissions</varname>パラメータとの組合せで、Unixドメインソケット接続の追加的アクセス管理機構として使うことができます。
デフォルトでは空文字列で、サーバユーザのデフォルトグループを使用します。
このパラメータはサーバ起動時のみ設定可能です。
       </para>

       <para>
<!--
        This parameter is not supported on Windows.  Any setting will be
        ignored.  Also, sockets in the abstract namespace have no file owner,
        so this setting is also ignored in that case.
-->
このパラメータはWindowsではサポートされていません。
すべての設定は無視されます。
また、抽象名前空間にあるソケットはファイル所有者を持たないので、この場合も設定は無視されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-permissions" xreflabel="unix_socket_permissions">
      <term><varname>unix_socket_permissions</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>unix_socket_permissions</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>unix_socket_permissions</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the access permissions of the Unix-domain socket(s).  Unix-domain
        sockets use the usual Unix file system permission set.
        The parameter value is expected to be a numeric mode
        specified in the format accepted by the
        <function>chmod</function> and <function>umask</function>
        system calls.  (To use the customary octal format the number
        must start with a <literal>0</literal> (zero).)
-->
Unixドメインソケット（複数も）のアクセスパーミッションを設定します。
Unixドメインソケットは通常のUnixファイルシステムパーミッション設定の一式を使用します。
パラメータ値は、<function>chmod</function>および<function>umask</function>システムコールが受け付ける数値形式での指定を想定しています。
（通常使われる8進数形式を使用するのであれば、<literal>0</literal>（ゼロ）で始まらなければなりません。）
       </para>

       <para>
<!--
        The default permissions are <literal>0777</literal>, meaning
        anyone can connect. Reasonable alternatives are
        <literal>0770</literal> (only user and group, see also
        <varname>unix_socket_group</varname>) and <literal>0700</literal>
        (only user). (Note that for a Unix-domain socket, only write
        permission matters, so there is no point in setting or revoking
        read or execute permissions.)
-->
デフォルトのパーミッションは、誰でも接続できる<literal>0777</literal>になっています。
変更するならば<literal>0770</literal>（ユーザとグループのみです。<varname>unix_socket_group</varname>も参照してください）や<literal>0700</literal>（ユーザのみ）が適切です。
（Unixドメインソケットでは書き込み権限だけが問題になるため、読み込みや実行のパーミッションを設定または解除する意味はありません。）
       </para>

       <para>
<!--
        This access control mechanism is independent of the one
        described in <xref linkend="client-authentication"/>.
-->
このアクセス制御機構は <xref linkend="client-authentication"/>で記述されたものとは別個のものです。
       </para>

       <para>
<!--
        This parameter can only be set at server start.
-->
このパラメータはサーバ起動時のみ設定可能です。
       </para>

       <para>
<!--
        This parameter is irrelevant on systems, notably Solaris as of Solaris
        10, that ignore socket permissions entirely.  There, one can achieve a
        similar effect by pointing <varname>unix_socket_directories</varname> to a
        directory having search permission limited to the desired audience.
-->
このパラメータはSolaris 10の時点でのSolarisなど、ソケットのパーミッションを完全に無視するシステムでは無関係です。
こうしたシステムでは、許可したいユーザだけが検索パーミッションを持つディレクトリを<varname>unix_socket_directories</varname>で指すようにすることによって同じような効果を得ることができます。
       </para>

       <para>
<!--
        Sockets in the abstract namespace have no file permissions, so this
        setting is also ignored in that case.
-->
抽象名前空間にあるソケットはファイルパーミッションを持たないので、この設定も無視されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bonjour" xreflabel="bonjour">
      <term><varname>bonjour</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>bonjour</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>bonjour</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables advertising the server's existence via
        <productname>Bonjour</productname>.  The default is off.
        This parameter can only be set at server start.
-->
<productname>Bonjour</productname>によりサーバの存在を公表することを可能にします。デフォルトはoffです。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bonjour-name" xreflabel="bonjour_name">
      <term><varname>bonjour_name</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>bonjour_name</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>bonjour_name</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the <productname>Bonjour</productname> service
        name.  The computer name is used if this parameter is set to the
        empty string <literal>''</literal> (which is the default).  This parameter is
        ignored if the server was not compiled with
        <productname>Bonjour</productname> support.
        This parameter can only be set at server start.
-->
<productname>Bonjour</productname>サービス名を指定します。
このパラメータが空文字列<literal>''</literal>（デフォルトです）に設定されていると、コンピュータ名が使用されます。
サーバが<productname>Bonjour</productname>サポート付でコンパイルでされていない場合は無視されます。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>
     </variablelist>
     </sect2>

     <sect2 id="runtime-config-tcp-settings">
     <title>TCP Settings</title>

     <variablelist>

     <varlistentry id="guc-tcp-keepalives-idle" xreflabel="tcp_keepalives_idle">
      <term><varname>tcp_keepalives_idle</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>tcp_keepalives_idle</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>tcp_keepalives_idle</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the amount of time with no network activity after which
        the operating system should send a TCP keepalive message to the client.
        If this value is specified without units, it is taken as seconds.
        A value of 0 (the default) selects the operating system's default.
        On Windows, setting a value of 0 will set this parameter to 2 hours,
        since Windows does not provide a way to read the system default value.
        This parameter is supported only on systems that support
        <symbol>TCP_KEEPIDLE</symbol> or an equivalent socket option, and on
        Windows; on other systems, it must be zero.
        In sessions connected via a Unix-domain socket, this parameter is
        ignored and always reads as zero.
-->
クライアントとのやり取りがなくなった後、オペレーティングシステムがTCPのkeepaliveパケットをクライアントに送信するまでの時間を指定します。
この値が単位なしで指定された場合は、秒単位であるとみなします。
0（デフォルトです）の場合はオペレーティングシステムのデフォルト値を使用します。
Windowsでは、システムのデフォルト値を読み取る方法がないため、値0を設定すると、このパラメータは2時間に設定されます。
このパラメータは<symbol>TCP_KEEPIDLE</symbol>または同等のソケットオプションをサポートするシステムと、Windowsでのみサポートされます。
その他のシステムではゼロでなければなりません。
Unixドメインソケット経由で接続されたセッションでは、このパラメータは無視され、常にゼロとして読み取られます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-tcp-keepalives-interval" xreflabel="tcp_keepalives_interval">
      <term><varname>tcp_keepalives_interval</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>tcp_keepalives_interval</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>tcp_keepalives_interval</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the amount of time after which a TCP keepalive message
        that has not been acknowledged by the client should be retransmitted.
        If this value is specified without units, it is taken as seconds.
        A value of 0 (the default) selects the operating system's default.
        On Windows, setting a value of 0 will set this parameter to 1 second,
        since Windows does not provide a way to read the system default value.
        This parameter is supported only on systems that support
        <symbol>TCP_KEEPINTVL</symbol> or an equivalent socket option, and on
        Windows; on other systems, it must be zero.
        In sessions connected via a Unix-domain socket, this parameter is
        ignored and always reads as zero.
-->
TCPのkeepaliveメッセージに対してクライアントから応答がない場合に、再送を行うまでの時間を指定します。
この値が単位なしで指定された場合は、秒単位であるとみなします。
0（デフォルトです）の場合はシステムのデフォルト値を使用します。
Windowsでは、システムのデフォルト値を読み取る方法がないため、値0を設定すると、このパラメータが1秒に設定されます。
このパラメータは<symbol>TCP_KEEPINTVL</symbol>または同等のソケットオプションをサポートするシステムと、Windowsでのみサポートされます。
その他のシステムではゼロでなければなりません。
Unixドメインソケット経由で接続されたセッションでは、このパラメータは無視され、常にゼロとして読み取られます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-tcp-keepalives-count" xreflabel="tcp_keepalives_count">
      <term><varname>tcp_keepalives_count</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>tcp_keepalives_count</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>tcp_keepalives_count</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the number of TCP keepalive messages that can be lost before
        the server's connection to the client is considered dead.
        A value of 0 (the default) selects the operating system's default.
        This parameter is supported only on systems that support
        <symbol>TCP_KEEPCNT</symbol> or an equivalent socket option (which does not include Windows);
        on other systems, it must be zero.
        In sessions connected via a Unix-domain socket, this parameter is
        ignored and always reads as zero.
-->
サーバのクライアントへの接続が切れたと判断されるまでのTCP keepaliveメッセージの数を指定します。
0（デフォルトです）の場合はオペレーティングシステムのデフォルト値を使用します。
このパラメータは<symbol>TCP_KEEPCNT</symbol>または同等のソケットオプションをサポートするシステムでのみサポートされます（Windowsは含みません）。
その他のシステムではゼロでなければなりません。
Unixドメインソケット経由で接続されたセッションでは、このパラメータは無視され、常にゼロとして読み取られます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-tcp-user-timeout" xreflabel="tcp_user_timeout">
      <term><varname>tcp_user_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>tcp_user_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>tcp_user_timeout</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the amount of time that transmitted data may
        remain unacknowledged before the TCP connection is forcibly closed.
        If this value is specified without units, it is taken as milliseconds.
        A value of 0 (the default) selects the operating system's default.
        This parameter is supported only on systems that support
        <symbol>TCP_USER_TIMEOUT</symbol> (which does not include Windows); on other systems, it must be zero.
        In sessions connected via a Unix-domain socket, this parameter is
        ignored and always reads as zero.
-->
未応答の送信データが残ったままの接続が強制的に閉じられるまでの時間を指定します。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
0（デフォルトです）の場合はオペレーティングシステムのデフォルト値を使用します。
このパラメータは、<symbol>TCP_USER_TIMEOUT</symbol>をサポートするシステム（Windowsは含みません）でのみ使用できます。他のシステムでは、0にする必要があります。
UNIXドメインソケットで接続しているセッションではこのパラメータは無視され、常に0として扱われます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-client-connection-check-interval" xreflabel="client_connection_check_interval">
      <term><varname>client_connection_check_interval</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>client_connection_check_interval</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>client_connection_check_interval</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the time interval between optional checks that the client is still
        connected, while running queries.  The check is performed by polling
        the socket, and allows long running queries to be aborted sooner if
        the kernel reports that the connection is closed.
-->
問い合わせを実行中に、クライアントがまだ接続しているどうかの追加のチェックを行う時間間隔を指定します。
このチェックはソケットをポーリングすることによって行われ、その接続がクローズされていることをカーネルが報告することによって、長時間実行中の問い合わせをより早くアボートさせることができます。
       </para>
       <para>
<!--
        This option relies on kernel events exposed by Linux, macOS, illumos
        and the BSD family of operating systems, and is not currently available
        on other systems.
-->
このオプションは、Linux、macOS、illumos、BSD系のオペレーティングシステムによって公開されるカーネルイベントに依存しており、現在他のシステムでは利用できません。
       </para>
       <para>
<!--
        If the value is specified without units, it is taken as milliseconds.
        The default value is <literal>0</literal>, which disables connection
        checks.  Without connection checks, the server will detect the loss of
        the connection only at the next interaction with the socket, when it
        waits for, receives or sends data.
-->
値が単位なしに指定されると、ミリ秒であるとみなされます。
デフォルト値は<literal>0</literal>で、接続のチェックは無効になります。
接続チェックがない場合、サーバは接続が失われたことを、次のソケットへのアクセス、すなわちソケットの待受、データの受信、送信のときにだけ検出します。
       </para>
       <para>
<!--
        For the kernel itself to detect lost TCP connections reliably and within
        a known timeframe in all scenarios including network failure, it may
        also be necessary to adjust the TCP keepalive settings of the operating
        system, or the <xref linkend="guc-tcp-keepalives-idle"/>,
        <xref linkend="guc-tcp-keepalives-interval"/> and
        <xref linkend="guc-tcp-keepalives-count"/> settings of
        <productname>PostgreSQL</productname>.
-->
ネットワーク障害を含めて、TCP接続が失われたことをすべてのシナリオにおいて既知のタイムフレームの中で確実にカーネルが検出するためには、オペレーティングシステムのTCP keepalive設定、あるいは<productname>PostgreSQL</productname>の<xref linkend="guc-tcp-keepalives-idle"/>、<xref linkend="guc-tcp-keepalives-interval"/>、<xref linkend="guc-tcp-keepalives-count"/>設定を調整することが必要になるかもしれません。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>

     <sect2 id="runtime-config-connection-authentication">
<!--
     <title>Authentication</title>
-->
     <title>認証</title>

     <variablelist>
     <varlistentry id="guc-authentication-timeout" xreflabel="authentication_timeout">
      <term><varname>authentication_timeout</varname> (<type>integer</type>)
      <indexterm><primary>timeout</primary><secondary>client authentication</secondary></indexterm>
      <indexterm><primary>timeout</primary><secondary>クライアント認証</secondary></indexterm>
      <indexterm><primary>client authentication</primary><secondary>timeout during</secondary></indexterm>
      <indexterm><primary>client authentication</primary><secondary>タイムアウト期間</secondary></indexterm>
      <indexterm>
       <primary><varname>authentication_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>authentication_timeout</varname>設定パラメータ</primary>
      </indexterm>
      </term>

      <listitem>
       <para>
<!--
        Maximum amount of time allowed to complete client authentication. If a
        would-be client has not completed the authentication protocol in
        this much time, the server closes the connection. This prevents
        hung clients from occupying a connection indefinitely.
        If this value is specified without units, it is taken as seconds.
        The default is one minute (<literal>1m</literal>).
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
クライアント認証を完了するまでの最大時間です。
もし、この時間内に自称クライアントが認証プロトコルを完了しない場合、サーバは接続を閉じます。
これはハングしたクライアントが接続を永久に占有することを防ぎます。
この値が単位なしで指定された場合は、秒単位であるとみなします。
デフォルトは1分（<literal>1m</literal>）です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-password-encryption" xreflabel="password_encryption">
      <term><varname>password_encryption</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>password_encryption</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>password_encryption</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When a password is specified in <xref linkend="sql-createrole"/> or
        <xref linkend="sql-alterrole"/>, this parameter determines the
        algorithm to use to encrypt the password.  Possible values are
        <literal>scram-sha-256</literal>, which will encrypt the password with
        SCRAM-SHA-256, and <literal>md5</literal>, which stores the password
        as an MD5 hash.  The default is <literal>scram-sha-256</literal>.
-->
<xref linkend="sql-createrole"/>あるいは<xref linkend="sql-alterrole"/>でパスワードを設定する際に、このパラメータはパスワードを暗号化するアルゴリズムを指定します。
可能な値は、SCRAM-SHA-256でパスワードを暗号化する<literal>scram-sha-256</literal>とパスワードをMD5ハッシュとして格納する<literal>md5</literal>です。
デフォルト値は<literal>scram-sha-256</literal>です。
       </para>
       <para>
<!--
        Note that older clients might lack support for the SCRAM authentication
        mechanism, and hence not work with passwords encrypted with
        SCRAM-SHA-256.  See <xref linkend="auth-password"/> for more details.
-->
古いクライアントはSCRAM認証機構をサポートしていない可能性があり、したがってSCRAM-SHA-256による暗号化は動作しないかもしれないことに注意してください。
さらなる詳細については<xref linkend="auth-password"/>をご覧ください。
       </para>
       <warning>
        <para>
<!--
         Support for MD5-encrypted passwords is deprecated and will be removed
         in a future release of <productname>PostgreSQL</productname>.  Refer
         to <xref linkend="auth-password"/> for details about migrating to
         another password type.
-->
《機械翻訳》MD5で暗号化されたパスワードのサポートは非推奨となり、将来の<productname>PostgreSQL</productname>のリリースで削除されます。
他のパスワードタイプへの移行の詳細については、<xref linkend="auth-password"/>を参照してください。
        </para>
       </warning>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-scram-iterations" xreflabel="scram_iterations">
      <term><varname>scram_iterations</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>scram_iterations</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>scram_iterations</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The number of computational iterations to be performed when encrypting
        a password using SCRAM-SHA-256. The default is <literal>4096</literal>.
        A higher number of iterations provides additional protection against
        brute-force attacks on stored passwords, but makes authentication
        slower. Changing the value has no effect on existing passwords
        encrypted with SCRAM-SHA-256 as the iteration count is fixed at the
        time of encryption. In order to make use of a changed value, a new
        password must be set.
-->
SCRAM-SHA-256を使用してパスワードを暗号化するときに実行される計算の反復回数です。
デフォルトは<literal>4096</literal>です。
反復回数が多いほど、格納されたパスワードに対するブルートフォース攻撃に対する保護が強化されますが、認証の速度は低下します。
反復カウントは暗号化時に固定されるため、値を変更してもSCRAM-SHA-256で暗号化された既存のパスワードには影響しません。
変更された値を有効にするには、新しいパスワードを設定する必要があります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-md5-password-warnings" xreflabel="md5_password_warnings">
      <term><varname>md5_password_warnings</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>md5_password_warnings</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls whether a <literal>WARNING</literal> about MD5 password
        deprecation is produced when a <command>CREATE ROLE</command> or
        <command>ALTER ROLE</command> statement sets an MD5-encrypted password.
        The default value is <literal>on</literal>.
-->
《機械翻訳》<command>CREATE ROLE</command>または<command>ALTER ROLE</command>パスワードが暗号化されたステートメントを設定するときに、<literal>WARNING</literal> about MD5パスワードdeprecationを生成するかどうかを制御します。
デフォルト値は<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-server-keyfile" xreflabel="krb_server_keyfile">
      <term><varname>krb_server_keyfile</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>krb_server_keyfile</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>krb_server_keyfile</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the location of the server's Kerberos key file.  The default is
        <filename>FILE:/usr/local/pgsql/etc/krb5.keytab</filename>
        (where the directory part is whatever was specified
        as <varname>sysconfdir</varname> at build time; use
        <literal>pg_config &#45;-sysconfdir</literal> to determine that).
        If this parameter is set to an empty string, it is ignored and a
        system-dependent default is used.
        This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
        See <xref linkend="gssapi-auth"/> for more information.
-->
Kerberosサーバキーファイルの場所を設定します。
デフォルトは<filename>FILE:/usr/local/pgsql/etc/krb5.keytab</filename>です。
（ディレクトリ部分は構築時に<varname>sysconfdir</varname>で指定されたものです。
<literal>pg_config --sysconfdir</literal>を使って確認してください。）
このパラメータが空文字列に設定されると、それは無視されてシステム依存のデフォルトが使用されます。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
詳細は<xref linkend="gssapi-auth"/>をご覧ください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-caseins-users" xreflabel="krb_caseins_users">
      <term><varname>krb_caseins_users</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>krb_caseins_users</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>krb_caseins_users</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets whether GSSAPI user names should be treated
        case-insensitively.
        The default is <literal>off</literal> (case sensitive). This parameter can only be
        set in the <filename>postgresql.conf</filename> file or on the server command line.
-->
GSSAPIユーザ名を大文字小文字の区別なく取り扱うかどうかを設定します。
デフォルトは<literal>off</literal>（大文字小文字を区別する）です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-gss-accept-delegation" xreflabel="gss_accept_delegation">
      <term><varname>gss_accept_delegation</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>gss_accept_delegation</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>gss_accept_delegation</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets whether GSSAPI delegation should be accepted from the client.
        The default is <literal>off</literal> meaning credentials from the client will
        <emphasis>not</emphasis> be accepted.  Changing this to <literal>on</literal> will make the server
        accept credentials delegated to it from the client. This parameter can only be
        set in the <filename>postgresql.conf</filename> file or on the server command line.
-->
クライアントからのGSSAPI委任を受け入れるかどうかを設定します。
デフォルトは<literal>off</literal>です。
これは、クライアントからの資格証明が受け入れ<emphasis>られない</emphasis>ことを意味します。
これを<literal>on</literal>に変更すると、サーバは、クライアントから委任された資格証明を受け入れます。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-oauth-validator-libraries" xreflabel="oauth_validator_libraries">
      <term><varname>oauth_validator_libraries</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>oauth_validator_libraries</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The library/libraries to use for validating OAuth connection tokens. If
        only one validator library is provided, it will be used by default for
        any OAuth connections; otherwise, all
        <link linkend="auth-oauth"><literal>oauth</literal> HBA entries</link>
        must explicitly set a <literal>validator</literal> chosen from this
        list. If set to an empty string (the default), OAuth connections will be
        refused. This parameter can only be set in the
        <filename>postgresql.conf</filename> file.
-->
《機械翻訳》OAuthライブラリトークンの検証に使用するコネクション/ライブラリ。
バリデータライブラリが1つしか指定されていない場合は、デフォルトがすべてのOAuth接続に使用します。
それ以外の場合は、すべての<link linkend="auth-oauth"><literal>oauth</literal>HBAエントリ</link>に<literal>validator</literal>このリストから選択したものを明示的に設定する必要があります。
空の文字列（デフォルト）に設定すると、OAuth接続は拒否されます。
このパラメータは<filename>postgresql.conf</filename>ファイル。
       </para>
       <para>
<!--
        Validator modules must be implemented/obtained separately;
        <productname>PostgreSQL</productname> does not ship with any default
        implementations. For more information on implementing OAuth validators,
        see <xref linkend="oauth-validators" />.
-->
《機械翻訳》バリデータモジュールは別途実装/取得する必要があります<productname>PostgreSQL</productname>デフォルト実装には同梱されていません。
OAuthバリデータの実装の詳細については、<xref linkend="oauth-validators" />を参照してください。
       </para>
      </listitem>
     </varlistentry>
     </variablelist>
     </sect2>

     <sect2 id="runtime-config-connection-ssl">
     <title>SSL</title>

     <para>
<!--
      See <xref linkend="ssl-tcp"/> for more information about setting up
      <acronym>SSL</acronym>. The configuration parameters for controlling
      transfer encryption using <acronym>TLS</acronym> protocols are named
      <literal>ssl</literal> for historic reasons, even though support for
      the <acronym>SSL</acronym> protocol has been deprecated.
      <acronym>SSL</acronym> is in this context used interchangeably with
      <acronym>TLS</acronym>.
-->
<acronym>SSL</acronym>の設定の詳細は、<xref linkend="ssl-tcp"/>を参照してください。
<acronym>TLS</acronym>プロトコルを使用した転送暗号化を制御するための構成パラメータは、<acronym>SSL</acronym>プロトコルのサポートが推奨されていないにもかかわらず、歴史的な理由から<literal>ssl</literal>と名付けられています。
<acronym>SSL</acronym>はこの文脈で<acronym>TLS</acronym>と同じ意味で使用されます。
     </para>

     <variablelist>
     <varlistentry id="guc-ssl" xreflabel="ssl">
      <term><varname>ssl</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>ssl</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ssl</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables <acronym>SSL</acronym> connections.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
        The default is <literal>off</literal>.
-->
<acronym>SSL</acronym>による接続を有効にします。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
デフォルトは<literal>off</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-ca-file" xreflabel="ssl_ca_file">
      <term><varname>ssl_ca_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_ca_file</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ssl_ca_file</varname> 設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the name of the file containing the SSL server certificate
        authority (CA).
        Relative paths are relative to the data directory.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
        The default is empty, meaning no CA file is loaded,
        and client certificate verification is not performed.
-->
SSLサーバ認証局（CA）が入っているファイル名を設定します。
相対パスの場合は、データディレクトリからの相対パスになります。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
デフォルトは空で、この場合CAファイルは読み込まれず、クライアントのサーバ検証は行われません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-cert-file" xreflabel="ssl_cert_file">
      <term><varname>ssl_cert_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_cert_file</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ssl_cert_file</varname> 設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the name of the file containing the SSL server certificate.
        Relative paths are relative to the data directory.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
        The default is <filename>server.crt</filename>.
-->
SSLサーバ証明書が入っているファイル名を設定します。
相対パスの場合は、データディレクトリからの相対パスになります。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
デフォルトは <filename>server.crt</filename> です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-crl-file" xreflabel="ssl_crl_file">
      <term><varname>ssl_crl_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_crl_file</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ssl_crl_file</varname> 設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the name of the file containing the SSL client certificate
        revocation list (CRL).
        Relative paths are relative to the data directory.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
        The default is empty, meaning no CRL file is loaded (unless
        <xref linkend="guc-ssl-crl-dir"/> is set).
-->
SSLクライアント証明書失効リスト（CRL）が入っているファイル名を設定します。
相対パスの場合は、データディレクトリからの相対パスになります。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
デフォルトは空で、この場合CRLファイルは読み込まれません（<xref linkend="guc-ssl-crl-dir"/>が設定されていない限り）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-crl-dir" xreflabel="ssl_crl_dir">
      <term><varname>ssl_crl_dir</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_crl_dir</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ssl_crl_dir</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the name of the directory containing the SSL client
        certificate revocation list (CRL).  Relative paths are relative to the
        data directory.  This parameter can only be set in
        the <filename>postgresql.conf</filename> file or on the server command
        line.  The default is empty, meaning no CRLs are used (unless
        <xref linkend="guc-ssl-crl-file"/> is set).
-->
SSLクライアント証明書失効リスト（CRL）が入っているディレクトリ名を設定します。
相対パスの場合は、データディレクトリからの相対パスになります。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
デフォルトは空で、この場合CRLファイルは読み込まれません（<xref linkend="guc-ssl-crl-file"/>が設定されていない限り）。
       </para>

       <para>
<!--
        The directory needs to be prepared with the
        <productname>OpenSSL</productname> command
        <literal>openssl rehash</literal> or <literal>c_rehash</literal>.  See
        its documentation for details.
-->
このディレクトリは<productname>OpenSSL</productname>コマンドの<literal>openssl rehash</literal>あるいは<literal>c_rehash</literal>で準備されなければなりません。
詳細はそれらのドキュメントをご覧ください。
       </para>

       <para>
<!--
        When using this setting, CRLs in the specified directory are loaded
        on-demand at connection time.  New CRLs can be added to the directory
        and will be used immediately.  This is unlike <xref
        linkend="guc-ssl-crl-file"/>, which causes the CRL in the file to be
        loaded at server start time or when the configuration is reloaded.
        Both settings can be used together.
-->
この設定を使用すると、指定したディレクトリ内のCRLが接続時に必要に応じて読み込まれます。
新しいCRLをこのディレクトリに追加することが可能で、即座に使用されます。
サーバが起動されるとき、あるいは設定が再読込されるときに読み込まれる<xref linkend="guc-ssl-crl-file"/>とは異なります。
両方の設定は一緒に使用できます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-key-file" xreflabel="ssl_key_file">
      <term><varname>ssl_key_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_key_file</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ssl_key_file</varname> 設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the name of the file containing the SSL server private key.
        Relative paths are relative to the data directory.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
        The default is <filename>server.key</filename>.
-->
SSLサーバの秘密鍵が入っているファイル名を設定します。
相対パスの場合は、データディレクトリからの相対パスになります。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
デフォルトは <filename>server.key</filename> です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-tls13-ciphers" xreflabel="ssl_tls13_ciphers">
      <term><varname>ssl_tls13_ciphers</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_tls13_ciphers</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies a list of cipher suites that are allowed by connections using
        <acronym>TLS</acronym> version 1.3.  Multiple cipher suites can be
        specified by using a colon separated list. If left blank, the default
        set of cipher suites in <productname>OpenSSL</productname> will be used.
-->
《機械翻訳》<acronym>TLS</acronym>リスト1.3を使用する接続によって許可される暗号スイートのバージョンを指定します。
マルチプル暗号スイートは、コロンで区切られたリストを使用して指定できます。
空白のままにすると、<productname>OpenSSL</productname>の暗号スイートのデフォルトセットが使用されます。
       </para>

       <para>
<!--
        This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command
        line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-ciphers" xreflabel="ssl_ciphers">
      <term><varname>ssl_ciphers</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_ciphers</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ssl_ciphers</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies a list of <acronym>SSL</acronym> ciphers that are allowed by
        connections using TLS version 1.2 and lower, see
        <xref linkend="guc-ssl-tls13-ciphers"/> for TLS version 1.3 connections. See
        the <citerefentry><refentrytitle>ciphers</refentrytitle></citerefentry>
        manual page in the <productname>OpenSSL</productname> package for the
        syntax of this setting and a list of supported values.  The default value
        is <literal>HIGH:MEDIUM:+3DES:!aNULL</literal>.  The default is usually a
        reasonable choice unless you have specific security requirements.
-->
《機械翻訳》TLSリスト1.2以下を使用する接続で許可される<acronym>SSL</acronym>暗号のバージョンを指定します。
TLSバージョン1.3接続の場合は<xref linkend="guc-ssl-tls13-ciphers"/>を参照してください。
この設定のマニュアルページおよびサポートされている値のパッケージについては、<productname>OpenSSL</productname>構文の<citerefentry><refentrytitle>ciphers</refentrytitle></citerefentry>を参照してください。
デフォルト値は<literal>HIGH:MEDIUM:+3DES:!aNULL</literal>です。
デフォルトは、特定のセキュリティ要件がない限り、通常は合理的な選択です。
リスト
       </para>

       <para>
<!--
        This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command
        line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>

       <para>
<!--
        Explanation of the default value:
-->
デフォルト値の説明:
        <variablelist>
         <varlistentry id="guc-ssl-ciphers-high">
          <term><literal>HIGH</literal></term>
          <listitem>
           <para>
<!--
            Cipher suites that use ciphers from <literal>HIGH</literal> group (e.g.,
            AES, Camellia, 3DES)
-->
<literal>HIGH</literal>グループ(たとえばAES, Camellia, 3DES)を使用する暗号スイート
           </para>
          </listitem>
         </varlistentry>

         <varlistentry id="guc-ssl-ciphers-medium">
          <term><literal>MEDIUM</literal></term>
          <listitem>
           <para>
<!--
            Cipher suites that use ciphers from <literal>MEDIUM</literal> group
            (e.g., RC4, SEED)
-->
<literal>MEDIUM</literal>グループ(たとえば RC4, SEED)を使用する暗号スイート
           </para>
          </listitem>
         </varlistentry>

         <varlistentry id="guc-ssl-ciphers-plus-3des">
          <term><literal>+3DES</literal></term>
          <listitem>
           <para>
<!--
            The <productname>OpenSSL</productname> default order for
            <literal>HIGH</literal> is problematic because it orders 3DES
            higher than AES128.  This is wrong because 3DES offers less
            security than AES128, and it is also much slower.
            <literal>+3DES</literal> reorders it after all other
            <literal>HIGH</literal> and <literal>MEDIUM</literal> ciphers.
-->
<productname>OpenSSL</productname>の<literal>HIGH</literal>に対するデフォルトの並び順には問題があります。
3DESがAES128より高いとしているからです。
3DESはAES128よりもセキュアではなく、またずっと遅いので、これは間違っています。
<literal>+3DES</literal>ではそれを他のすべての<literal>HIGH</literal>と<literal>MEDIUM</literal>暗号よりも後に位置づけます。
           </para>
          </listitem>
         </varlistentry>

         <varlistentry id="guc-ssl-ciphers-not-anull">
          <term><literal>!aNULL</literal></term>
          <listitem>
           <para>
<!--
            Disables anonymous cipher suites that do no authentication.  Such
            cipher suites are vulnerable to <acronym>MITM</acronym> attacks and
            therefore should not be used.
-->
認証を行わない匿名暗号スイートを無効にします。
そういった暗号スイートは<acronym>MITM</acronym>攻撃に対して脆弱で、使用すべきではありません。
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
       </para>

       <para>
<!--
        Available cipher suite details will vary across
        <productname>OpenSSL</productname> versions.  Use the command
        <literal>openssl ciphers -v 'HIGH:MEDIUM:+3DES:!aNULL'</literal> to
        see actual details for the currently installed
        <productname>OpenSSL</productname> version.  Note that this list is
        filtered at run time based on the server key type.
-->
<productname>OpenSSL</productname>のバージョンにより、利用可能な暗号スイートの詳細は異なります。
<literal>openssl ciphers -v 'HIGH:MEDIUM:+3DES:!aNULL'</literal>
コマンドを使って現在インストールされている<productname>OpenSSL</productname>のバージョンに関する詳細情報を得てください。
ここで得られるリストは、サーバキータイプにより実行時にフィルタされることに注意してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-prefer-server-ciphers" xreflabel="ssl_prefer_server_ciphers">
      <term><varname>ssl_prefer_server_ciphers</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>ssl_prefer_server_ciphers</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ssl_prefer_server_ciphers</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies whether to use the server's SSL cipher preferences, rather
        than the client's.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
        The default is <literal>on</literal>.
-->
サーバのSSL暗号設定をクライアントに優先して使うかどうかを指定します。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
デフォルトは<literal>on</literal>です。
       </para>

       <para>
<!--
        <productname>PostgreSQL</productname> versions before 9.4 do not have
        this setting and always use the client's preferences.  This setting is
        mainly for backward compatibility with those versions.  Using the
        server's preferences is usually better because it is more likely that
        the server is appropriately configured.
-->
バージョン9.4より前の<productname>PostgreSQL</productname>にはこの設定がなく、常にクライアントの設定が使用されます。
この設定は、主に古いバージョンとの互換性のために設けられています。
通常サーバの設定に従うほうが良いです。大抵の場合、サーバはより適切に設定されているからです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-groups" xreflabel="ssl_groups">
      <term><varname>ssl_groups</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_groups</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the name of the curve to use in <acronym>ECDH</acronym> key
        exchange.  It needs to be supported by all clients that connect.
        Multiple curves can be specified by using a colon-separated list.
        It does not need to be the same curve used by the server's Elliptic
        Curve key.  This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
        The default is <literal>X25519:prime256v1</literal>.
-->
《マッチ度[73.981900]》<acronym>ECDH</acronym>キー交換で使われる曲線の名前を指定します。
接続するすべてのクライアントがこの設定をサポートしている必要があります。
サーバの楕円曲線キーで使用されるのと同じ曲線である必要はありません。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
デフォルト値は<literal>prime256v1</literal>です。
《機械翻訳》<acronym>ECDH</acronym>名前交換で使用する曲線のキーを指定します。
ニーズは、接続するすべてのクライアントでサポートされます。
マルチプル曲線は、コロンで区切られたリストを使用して指定できます。
サーバの楕円曲線キーで使用される曲線と同じである必要はありません。
このパラメータは<filename>postgresql.conf</filename>ファイルまたはサーバコマンドラインでのみ設定できます。
デフォルトは<literal>X25519:prime256v1</literal>です。
       </para>

       <para>
<!--
        <productname>OpenSSL</productname> names for the most common curves
        are:
-->
<productname>OpenSSL</productname>はよく使われる曲線に名前を付けています。
        <literal>prime256v1</literal> (NIST P-256),
        <literal>secp384r1</literal> (NIST P-384),
        <literal>secp521r1</literal> (NIST P-521).
        An incomplete list of available groups can be shown with the command
        <command>openssl ecparam -list_curves</command>.  Not all of them are
        usable with <acronym>TLS</acronym> though, and many supported group
        names and aliases are omitted.
       </para>

       <para>
<!--
        In <productname>PostgreSQL</productname> versions before 18.0 this
        setting was named <literal>ssl_ecdh_curve</literal> and only accepted
        a single value.
-->
《機械翻訳》<productname>PostgreSQL</productname>versions前18.0では、この設定は記名的でした<literal>ssl_ecdh_curve</literal>そして1つの値だけを受け付けました。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-min-protocol-version" xreflabel="ssl_min_protocol_version">
      <term><varname>ssl_min_protocol_version</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>ssl_min_protocol_version</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ssl_min_protocol_version</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the minimum SSL/TLS protocol version to use.  Valid values are
        currently: <literal>TLSv1</literal>, <literal>TLSv1.1</literal>,
        <literal>TLSv1.2</literal>, <literal>TLSv1.3</literal>.  Older
        versions of the <productname>OpenSSL</productname> library do not
        support all values; an error will be raised if an unsupported setting
        is chosen.  Protocol versions before TLS 1.0, namely SSL version 2 and
        3, are always disabled.
-->
使用するSSL/TLSプロトコルバージョンの最小値を設定します。
今の所使用できる値は<literal>TLSv1</literal>、<literal>TLSv1.1</literal>、<literal>TLSv1.2</literal>、<literal>TLSv1.3</literal>です。
古いバージョンの<productname>OpenSSL</productname>ライブラリはすべての値をサポートしません。
サポートしていない値が設定されるとエラーが発生します。
TLS 1.0より前のプロトコルバージョン、すなわちSSLバージョン2あるいは3は常に無効となります。
       </para>

       <para>
<!--
        The default is <literal>TLSv1.2</literal>, which satisfies industry
        best practices as of this writing.
-->
デフォルトは<literal>TLSv1.2</literal>で、本稿執筆時点では業界のベストプラクティスを満たしています。
       </para>

       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-max-protocol-version" xreflabel="ssl_max_protocol_version">
      <term><varname>ssl_max_protocol_version</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>ssl_max_protocol_version</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ssl_max_protocol_version</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the maximum SSL/TLS protocol version to use.  Valid values are as
        for <xref linkend="guc-ssl-min-protocol-version"/>, with addition of
        an empty string, which allows any protocol version.  The default is to
        allow any version.  Setting the maximum protocol version is mainly
        useful for testing or if some component has issues working with a
        newer protocol.
-->
使用するSSL/TLSプロトコルバージョンの最大値を設定します。
使用できる値は<xref linkend="guc-ssl-min-protocol-version"/>と、すべてのプロトコルバージョンを許可する空文字です。
デフォルトはすべてのプロトコルバージョンを許可する設定です。
最大プロトコルバージョンの設定は主にテスト、あるいは新しいプロトコルを使った時にコンポーネントのどこかに問題がある時に有用です。
       </para>

       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-dh-params-file" xreflabel="ssl_dh_params_file">
      <term><varname>ssl_dh_params_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_dh_params_file</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ssl_dh_params_file</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the name of the file containing Diffie-Hellman parameters
        used for so-called ephemeral DH family of SSL ciphers. The default is
        empty, in which case compiled-in default DH parameters used. Using
        custom DH parameters reduces the exposure if an attacker manages to
        crack the well-known compiled-in DH parameters. You can create your own
        DH parameters file with the command
        <command>openssl dhparam -out dhparams.pem 2048</command>.
-->
いわゆる短命DH系SSL暗号で使用するディフィー・ヘルマンパラメータを格納するファイル名を指定します。
デフォルトは空で、この場合はコンパイル時に決められたデフォルトのDHパラメータが使用されます。
攻撃者が、よく知られたコンパイル時設定のDHパラメータを解読しようとしている場合には、カスタムDHパラメータを使うことでその危険性を低減できます。
<command>openssl dhparam -out dhparams.pem 2048</command>を使って、独自のDHパラメータファイルを作ることができます。
       </para>

       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-passphrase-command" xreflabel="ssl_passphrase_command">
      <term><varname>ssl_passphrase_command</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_passphrase_command</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ssl_passphrase_command</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets an external command to be invoked when a passphrase for
        decrypting an SSL file such as a private key needs to be obtained.  By
        default, this parameter is empty, which means the built-in prompting
        mechanism is used.
-->
秘密鍵などのSSLファイルを復号する際に、パスフレーズの入手が必要な時に起動される外部コマンドを設定します。
デフォルトではこのパラメータは空文字で、組み込みのプロンプト機構が使用されます。
       </para>
       <para>
<!--
        The command must print the passphrase to the standard output and exit
        with code 0.  In the parameter value, <literal>%p</literal> is
        replaced by a prompt string.  (Write <literal>%%</literal> for a
        literal <literal>%</literal>.)  Note that the prompt string will
        probably contain whitespace, so be sure to quote adequately.  A single
        newline is stripped from the end of the output if present.
-->
このコマンドは、パスフレーズを標準出力に書き出し、コード0で終了しなければなりません。
パラメータの値の<literal>%p</literal>はプロンプト文字列に置き換えられます。
（<literal>%</literal>を使いたい場合は<literal>%%</literal>としてください。）
プロンプト文字列はおそらく空白文字を含むので、適切に引用符付けするように注意してください。
出力の最後に一個の改行があれば、削除されます。
       </para>
       <para>
<!--
        The command does not actually have to prompt the user for a
        passphrase.  It can read it from a file, obtain it from a keychain
        facility, or similar.  It is up to the user to make sure the chosen
        mechanism is adequately secure.
-->
このコマンドは実際にはパスフレーズ用にユーザにプロンプトを表示する必要はありません。
ファイルからパスフレーズが読めるなら、キーチェーン機構やその他から取得します。
選択された仕組みが適切にセキュアかどうかを確認するのはユーザ次第です。
       </para>
       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-passphrase-command-supports-reload" xreflabel="ssl_passphrase_command_supports_reload">
      <term><varname>ssl_passphrase_command_supports_reload</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>ssl_passphrase_command_supports_reload</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ssl_passphrase_command_supports_reload</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter determines whether the passphrase command set by
        <varname>ssl_passphrase_command</varname> will also be called during a
        configuration reload if a key file needs a passphrase.  If this
        parameter is off (the default), then
        <varname>ssl_passphrase_command</varname> will be ignored during a
        reload and the SSL configuration will not be reloaded if a passphrase
        is needed.  That setting is appropriate for a command that requires a
        TTY for prompting, which might not be available when the server is
        running.  Setting this parameter to on might be appropriate if the
        passphrase is obtained from a file, for example.
-->
このパラメータは、キーにパスフレーズが必要な場合、設定ファイルの再読み込み中に<varname>ssl_passphrase_command</varname>で設定されたパスフレーズコマンドも呼び出されるかどうかを設定します。
このパラメータがoff（デフォルト）なら、<varname>ssl_passphrase_command</varname>は再読込の際に無視され、パスフレーズが必要な場合、SSL設定は再読込されません。
この設定は、サーバ実行中は存在しないかもしれないTTYがプロンプトに必要なコマンドに適しています。
たとえばパスフレーズがファイルから読み込める場合には、この設定をonにするのが適切です。
       </para>
       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-resource">
<!--
    <title>Resource Consumption</title>
-->
    <title>資源の消費</title>

    <sect2 id="runtime-config-resource-memory">
<!--
     <title>Memory</title>
-->
     <title>メモリ</title>

     <variablelist>
     <varlistentry id="guc-shared-buffers" xreflabel="shared_buffers">
      <term><varname>shared_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>shared_buffers</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>shared_buffers</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the amount of memory the database server uses for shared
        memory buffers.  The default is typically 128 megabytes
        (<literal>128MB</literal>), but might be less if your kernel settings will
        not support it (as determined during <application>initdb</application>).
        This setting must be at least 128 kilobytes.  However,
        settings significantly higher than the minimum are usually needed
        for good performance.
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        (Non-default values of <symbol>BLCKSZ</symbol> change the minimum
        value.)
        This parameter can only be set at server start.
-->
データベースサーバが共有メモリバッファのために使用するメモリ量を設定します。
デフォルトは一般的に128メガバイト(<literal>128MB</literal>)です。
しかし、稼働中のカーネルの設定がこの値をサポートしていない場合、より少なくなることがあります（<application>initdb</application>の過程で決定されます）。
この設定は最低限128キロバイトなければなりません。
しかし、良い性能を引き出すためには、最小値よりかなり高い値の設定が通例必要です。
この値が単位なしで指定された場合は、ブロック単位であるとみなします。すなわち、<symbol>BLCKSZ</symbol>バイト、一般的には8kBです。
（<symbol>BLCKSZ</symbol>がデフォルト値と異なる場合、この最小値も異なる値になります。）
このパラメータはサーバ起動時のみ設定可能です。
       </para>

       <para>
<!--
        If you have a dedicated database server with 1GB or more of RAM, a
        reasonable starting value for <varname>shared_buffers</varname> is 25%
        of the memory in your system.  There are some workloads where even
        larger settings for <varname>shared_buffers</varname> are effective, but
        because <productname>PostgreSQL</productname> also relies on the
        operating system cache, it is unlikely that an allocation of more than
        40% of RAM to <varname>shared_buffers</varname> will work better than a
        smaller amount.  Larger settings for <varname>shared_buffers</varname>
        usually require a corresponding increase in
        <varname>max_wal_size</varname>, in order to spread out the
        process of writing large quantities of new or changed data over a
        longer period of time.
-->
1GB以上のRAMを載せた専用データベースサーバを使用している場合、<varname>shared_buffers</varname>に対する妥当な初期値はシステムメモリの25%です。
<varname>shared_buffers</varname>をこれよりも大きな値に設定することが有効なワークロードもあります。
しかし、<productname>PostgreSQL</productname>はオペレーティングシステムキャッシュにも依存するため、<varname>shared_buffers</varname>にRAMの40%以上を割り当てても、それより小さい値の時より動作が良くなる見込みはありません。
<varname>shared_buffers</varname>をより大きく設定する場合は、大抵<varname>max_wal_size</varname>も合わせて増やす必要があります。これは、新規または変更された多量のデータを書き出す処理をより長い時間に渡って分散させるためです。
       </para>

       <para>
<!--
        On systems with less than 1GB of RAM, a smaller percentage of RAM is
        appropriate, so as to leave adequate space for the operating system.
-->
1GB未満のRAMのシステムでは、オペレーティングシステムに十分な余裕を残すために、RAMに対してより小さい割合を設定することが適切です。
       </para>

      </listitem>
     </varlistentry>

     <varlistentry id="guc-huge-pages" xreflabel="huge_pages">
      <term><varname>huge_pages</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>huge_pages</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>huge_pages</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls whether huge pages are requested for the main shared memory
        area. Valid values are <literal>try</literal> (the default),
        <literal>on</literal>, and <literal>off</literal>.  With
        <varname>huge_pages</varname> set to <literal>try</literal>, the
        server will try to request huge pages, but fall back to the default if
        that fails. With <literal>on</literal>, failure to request huge pages
        will prevent the server from starting up. With <literal>off</literal>,
        huge pages will not be requested. The actual state of huge pages is
        indicated by the server variable
        <xref linkend="guc-huge-pages-status"/>.
-->
主共有メモリ領域に対してhuge pageを要求するかどうかを管理します。
可能な値は<literal>try</literal> (デフォルト)、<literal>on</literal>、<literal>off</literal>です。
<varname>huge_pages</varname>を<literal>try</literal>に設定すると、サーバはhuge pageの要求を試み、失敗したらデフォルトに戻します。
<literal>on</literal>にすると、要求に失敗した場合にサーバの起動ができなくなることになります。
<literal>off</literal>ならhuge pageの要求は行いません。
huge pageの実際の状態は、サーバ変数<xref linkend="guc-huge-pages-status"/>で示されています。
       </para>

       <para>
<!--
        At present, this setting is supported only on Linux and Windows. The
        setting is ignored on other systems when set to
        <literal>try</literal>.  On Linux, it is only supported when
        <varname>shared_memory_type</varname> is set to <literal>mmap</literal>
        (the default).
-->
今のところこの機能はLinuxとWindowsでのみサポートされています。
他のシステムでは<literal>try</literal>と設定しても無視されます。
Linuxではこの機能は<varname>shared_memory_type</varname>が<literal>mmap</literal>（デフォルトです）に設定されている時にのみサポートされます。
       </para>

       <para>
<!--
        The use of huge pages results in smaller page tables and less CPU time
        spent on memory management, increasing performance. For more details about
        using huge pages on Linux, see <xref linkend="linux-huge-pages"/>.
-->
huge pageを使うと、ページテーブルが小さくなり、メモリ管理に使用されるCPU時間が少なくなり、性能が向上します。
詳細は、<xref linkend="linux-huge-pages"/>を見てください。
       </para>

       <para>
<!--
        Huge pages are known as large pages on Windows.  To use them, you need to
        assign the user right <quote>Lock pages in memory</quote> to the Windows user account
        that runs <productname>PostgreSQL</productname>.
        You can use Windows Group Policy tool (gpedit.msc) to assign the user right
        <quote>Lock pages in memory</quote>.
        To start the database server on the command prompt as a standalone process,
        not as a Windows service, the command prompt must be run as an administrator or
        User Access Control (UAC) must be disabled. When the UAC is enabled, the normal
        command prompt revokes the user right <quote>Lock pages in memory</quote> when started.
-->
huge pageはWindowsではlarge pageとして知られています。
それを使用するには、<productname>PostgreSQL</productname>を実行するWindowsユーザアカウントに<quote>メモリ中のロックページ</quote>権限を与える必要があります。
ユーザに<quote>メモリ中のロックページ</quote>権限を与えるには、Windowsのグループポリシーツール(gpedit.msc)を利用できます。
Windowsサービスとしてではなく、スタンドアローンプロセスとしてデータベースサーバをコマンドプロンプトで起動するには、コマンドプロンプトを管理者として実行するか、ユーザアクセス管理(UAC)を無効にしておかなければなりません。
UACが有効ならば、通常のコマンドプロンプトは起動時にユーザの<quote>メモリ中のロックページ</quote>権限を剥奪します。
       </para>

       <para>
<!--
        Note that this setting only affects the main shared memory area.
        Operating systems such as Linux, FreeBSD, and Illumos can also use
        huge pages (also known as <quote>super</quote> pages or
        <quote>large</quote> pages) automatically for normal memory
        allocation, without an explicit request from
        <productname>PostgreSQL</productname>. On Linux, this is called
        <quote>transparent huge pages</quote><indexterm><primary>transparent
        huge pages</primary></indexterm> (THP). That feature has been known to
        cause performance degradation with
        <productname>PostgreSQL</productname> for some users on some Linux
        versions, so its use is currently discouraged (unlike explicit use of
        <varname>huge_pages</varname>).
-->
この設定は主共有メモリ領域にのみ影響することに注意してください。
Linux、FreeBSD、Illumosのようなオペレーティングシステムでは、<productname>PostgreSQL</productname>からの明示的な要求なしにhuge page（<quote>super</quote> pageあるいは<quote>large</quote>pageとしての知られています）が通常のメモリ獲得の際に使用できます。
Linuxでは、これは<quote>transparent huge pages</quote><indexterm><primary>transparent huge pages</primary></indexterm> (THP)と呼ばれています。
この機能は、あるLinuxバージョンのあるユーザにおいて<productname>PostgreSQL</productname>の性能低下をもたらすことが知られています。
ですから、この機能の利用は（<varname>huge_pages</varname>の明示的な利用と違って）今の所推奨されていません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-huge-page-size" xreflabel="huge_page_size">
      <term><varname>huge_page_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>huge_page_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>huge_page_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls the size of huge pages, when they are enabled with
        <xref linkend="guc-huge-pages"/>.
        The default is zero (<literal>0</literal>).
        When set to <literal>0</literal>, the default huge page size on the
        system will be used. This parameter can only be set at server start.
-->
<xref linkend="guc-huge-pages"/>が有効なときにhuge pageのサイズを制御します。
デフォルトはゼロ(<literal>0</literal>)です。
<literal>0</literal>に設定すると、システムのデフォルトのhuge pageのサイズが使われます。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
       <para>
<!--
        Some commonly available page sizes on modern 64 bit server architectures include:
        <literal>2MB</literal> and <literal>1GB</literal> (Intel and AMD), <literal>16MB</literal> and
        <literal>16GB</literal> (IBM POWER), and <literal>64kB</literal>, <literal>2MB</literal>,
        <literal>32MB</literal> and <literal>1GB</literal> (ARM). For more information
        about usage and support, see <xref linkend="linux-huge-pages"/>.
-->
現代の64ビットサーバアーキテクチャにおける可能な一般的なページサイズには以下が含まれます。
<literal>2MB</literal>と<literal>1GB</literal> (IntelとAMD)、<literal>16MB</literal>と<literal>16GB</literal> (IBM POWER)、<literal>64kB</literal>、<literal>2MB</literal>、<literal>32MB</literal>そして<literal>1GB</literal> (ARM)。
使い方とサポートに関する詳細な情報に関しては<xref linkend="linux-huge-pages"/>を参照してください。
       </para>
       <para>
<!--
        Non-default settings are currently supported only on Linux.
-->
今の所Linuxでサポートされるデフォルトの設定値はありません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-temp-buffers" xreflabel="temp_buffers">
      <term><varname>temp_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>temp_buffers</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>temp_buffers</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the maximum amount of memory used for temporary buffers within
        each database session.  These are session-local buffers used only
        for access to temporary tables.
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The default is eight megabytes (<literal>8MB</literal>).
        (If <symbol>BLCKSZ</symbol> is not 8kB, the default value scales
        proportionally to it.)
        This setting can be changed within individual
        sessions, but only before the first use of temporary tables
        within the session; subsequent attempts to change the value will
        have no effect on that session.
-->
それぞれのデータベースセッションが使用する一時バッファの最大メモリ量を設定します。
一時バッファは、一時テーブルにアクセスする時にのみ使用されるセッションローカルのバッファです。
この値が単位なしで指定された場合は、ブロック単位であるとみなします。すなわち、<symbol>BLCKSZ</symbol>バイト、一般的には8kBです。
デフォルトは8メガバイト（<literal>8MB</literal>）です。
（<symbol>BLCKSZ</symbol>が8kBでなければ、それに比例して増減します。）
設定はそれぞれのセッション内で変更できますが、そのセッション内で一時テーブルが最初に使用されるまでになります。それより後に値の変更を試みても、そのセッションでは効果がありません。
       </para>

       <para>
<!--
        A session will allocate temporary buffers as needed up to the limit
        given by <varname>temp_buffers</varname>.  The cost of setting a large
        value in sessions that do not actually need many temporary
        buffers is only a buffer descriptor, or about 64 bytes, per
        increment in <varname>temp_buffers</varname>.  However if a buffer is
        actually used an additional 8192 bytes will be consumed for it
        (or in general, <symbol>BLCKSZ</symbol> bytes).
-->
セッションは、<varname>temp_buffers</varname>を上限として、必要に応じて一時バッファを確保します。
多くの一時バッファを実際に必要としないセッションで大きな値を設定するコストとは、<varname>temp_buffers</varname>の増分毎に、1つのバッファ記述子、約64バイトだけです。
しかし、バッファが実際に使用されると、それに対して追加の8192バイト（汎用的に言えば<symbol>BLCKSZ</symbol>バイト）が消費されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-prepared-transactions" xreflabel="max_prepared_transactions">
      <term><varname>max_prepared_transactions</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_prepared_transactions</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_prepared_transactions</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the maximum number of transactions that can be in the
        <quote>prepared</quote> state simultaneously (see <xref
        linkend="sql-prepare-transaction"/>).
        Setting this parameter to zero (which is the default)
        disables the prepared-transaction feature.
        This parameter can only be set at server start.
-->
同時に<quote>プリペアド</quote>状態にできるトランザクションの最大数を設定します（<xref linkend="sql-prepare-transaction"/>を参照してください）。
このパラメータをゼロ（これがデフォルトです）に設定すると、プリペアドトランザクション機能が無効になります。
このパラメータはサーバ起動時のみ設定可能です。
       </para>

       <para>
<!--
        If you are not planning to use prepared transactions, this parameter
        should be set to zero to prevent accidental creation of prepared
        transactions.  If you are using prepared transactions, you will
        probably want <varname>max_prepared_transactions</varname> to be at
        least as large as <xref linkend="guc-max-connections"/>, so that every
        session can have a prepared transaction pending.
-->
プリペアドトランザクションの使用を意図しないのであれば、このパラメータはプリペアドトランザクションが偶然に作成されないようゼロに設定すべきです。
プリペアドトランザクションを使用する場合、全てのセッションがプリペアドトランザクションを保留できるように、<varname>max_prepared_transactions</varname>を少なくとも<xref linkend="guc-max-connections"/>と同じ大きさに設定するのが良いでしょう。
       </para>

       <para>
<!--
        When running a standby server, you must set this parameter to the
        same or higher value than on the primary server. Otherwise, queries
        will not be allowed in the standby server.
-->
スタンバイサーバを運用している場合、このパラメータはプライマリサーバ上の設定よりも同等かもしくはより高水準に設定しなければなりません。そうしないと問い合わせがスタンバイサーバ内で受け入れられません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-work-mem" xreflabel="work_mem">
      <term><varname>work_mem</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>work_mem</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>work_mem</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the base maximum amount of memory to be used by a query operation
        (such as a sort or hash table) before writing to temporary disk files.
        If this value is specified without units, it is taken as kilobytes.
        The default value is four megabytes (<literal>4MB</literal>).
        Note that a complex query might perform several sort and hash
        operations at the same time, with each operation generally being
        allowed to use as much memory as this value specifies before
        it starts
        to write data into temporary files.  Also, several running
        sessions could be doing such operations concurrently.
        Therefore, the total memory used could be many times the value
        of <varname>work_mem</varname>; it is necessary to keep this
        fact in mind when choosing the value.  Sort operations are used
        for <literal>ORDER BY</literal>, <literal>DISTINCT</literal>,
        and merge joins.
        Hash tables are used in hash joins, hash-based aggregation, memoize
        nodes and hash-based processing of <literal>IN</literal> subqueries.
-->
一時ディスクファイルに書き込む前に、問い合わせ操作（ソートやハッシュなど）で使用される最大メモリ量を設定します。
この値が単位なしで指定された場合は、キロバイト単位であるとみなします。
デフォルト値は4MB(<literal>4MB</literal>)です。
複雑な問い合わせでは、同時に複数のソート操作とハッシュ操作が実行される可能性があります。
各操作は通常、データを一時ファイルに書き込む前にこの値で指定された量のメモリを使用できます。
また、複数の実行中のセッションが同時にこのような操作を実行することもあります。
したがって、使用されるメモリの合計量は<varname>work_mem</varname>の数倍になる可能性があります。
値を選択する時には、この事実に留意することが必要です。
ソート操作は<literal>ORDER BY</literal>、<literal>DISTINCT</literal>、およびマージ結合に対して使われます。
ハッシュテーブルはハッシュ結合、ハッシュに基づいた集約、メモ化（memoize）ノードおよび<literal>IN</literal>副問い合わせのハッシュに基づいた処理で使用されます。
       </para>
       <para>
<!--
        Hash-based operations are generally more sensitive to memory
        availability than equivalent sort-based operations.  The
        memory limit for a hash table is computed by multiplying
        <varname>work_mem</varname> by
        <varname>hash_mem_multiplier</varname>.  This makes it
        possible for hash-based operations to use an amount of memory
        that exceeds the usual <varname>work_mem</varname> base
        amount.
-->
一般的に、ハッシュに基づく操作はソートに基づく操作よりも利用可能なメモリに敏感です。
ハッシュテーブルのメモリ制限は、<varname>work_mem</varname>に<varname>hash_mem_multiplier</varname>を乗算することで計算されます。
これにより、ハッシュに基づく操作では通常の<varname>work_mem</varname>に基づく量を超える量のメモリが使用される可能性があります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-hash-mem-multiplier" xreflabel="hash_mem_multiplier">
      <term><varname>hash_mem_multiplier</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>hash_mem_multiplier</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>hash_mem_multiplier</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Used to compute the maximum amount of memory that hash-based
        operations can use.  The final limit is determined by
        multiplying <varname>work_mem</varname> by
        <varname>hash_mem_multiplier</varname>.  The default value is
        2.0, which makes hash-based operations use twice the usual
        <varname>work_mem</varname> base amount.
-->
ハッシュに基づく操作が利用できる最大のメモリ量を計算するために使用します。
最終的な制限は<varname>work_mem</varname>に<varname>hash_mem_multiplier</varname>を掛けて決定されます。
デフォルト値は2.0で、ハッシュに基づく操作が通常の<varname>work_mem</varname>に基づく値の2倍使用することになります。
       </para>
       <para>
<!--
        Consider increasing <varname>hash_mem_multiplier</varname> in
        environments where spilling by query operations is a regular
        occurrence, especially when simply increasing
        <varname>work_mem</varname> results in memory pressure (memory
        pressure typically takes the form of intermittent out of
        memory errors).  The default setting of 2.0 is often effective with
        mixed workloads.  Higher settings in the range of 2.0 - 8.0 or
        more may be effective in environments where
        <varname>work_mem</varname> has already been increased to 40MB
        or more.
-->
問い合わせ操作によって日常的にメモリ不足になるような環境、とりわけ単に<varname>work_mem</varname>を増やしたことによってメモリ逼迫（メモリ逼迫が典型的には間欠的なメモリ不足エラーの発生の形で起こる）が起きる場合には<varname>hash_mem_multiplier</varname>を増やすことを考慮してください。
デフォルトの2.0が色々なワークロードが混在している場合には効果的かも知れません。
より大きな2.0から8.0、あるいはそれ以上の設定は<varname>work_mem</varname>がすでに40MB以上に増やしてあるような環境で効果的かも知れません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-maintenance-work-mem" xreflabel="maintenance_work_mem">
      <term><varname>maintenance_work_mem</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>maintenance_work_mem</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>maintenance_work_mem</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the maximum amount of memory to be used by maintenance
        operations, such as <command>VACUUM</command>, <command>CREATE
        INDEX</command>, and <command>ALTER TABLE ADD FOREIGN KEY</command>.
        If this value is specified without units, it is taken as kilobytes.
        It defaults
        to 64 megabytes (<literal>64MB</literal>).  Since only one of these
        operations can be executed at a time by a database session, and
        an installation normally doesn't have many of them running
        concurrently, it's safe to set this value significantly larger
        than <varname>work_mem</varname>.  Larger settings might improve
        performance for vacuuming and for restoring database dumps.
-->
<command>VACUUM</command>、<command>CREATE INDEX</command>、および<command>ALTER TABLE ADD FOREIGN KEY</command>の様な保守操作で使用されるメモリの最大容量を指定します。
この値が単位なしで指定された場合は、キロバイト単位であるとみなします。
デフォルト値は64メガバイト（<literal>64MB</literal>）です。
1つのデータベースセッションでは、一度に1つしか上記操作はできませんし、通常インストレーションでこうした操作が同時に非常に多く発生することはありませんので、これを<varname>work_mem</varname>よりもかなり多めの値にしても安全です。
大きい値を設定することでvacuum処理と、ダンプしたデータベースのリストア性能が向上します。
       </para>
       <para>
<!--
        Note that when autovacuum runs, up to
        <xref linkend="guc-autovacuum-max-workers"/> times this memory
        may be allocated, so be careful not to set the default value
        too high.  It may be useful to control for this by separately
        setting <xref linkend="guc-autovacuum-work-mem"/>.
-->
自動バキュームが稼働すると、最大でこのメモリの<xref linkend="guc-autovacuum-max-workers"/>倍が配分されるので、デフォルトの値をあまり高く設定しないよう注意してください。
別の設定項目<xref linkend="guc-autovacuum-work-mem"/>で制御するのが良いかもしれません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-work-mem" xreflabel="autovacuum_work_mem">
      <term><varname>autovacuum_work_mem</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_work_mem</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>autovacuum_work_mem</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the maximum amount of memory to be used by each
        autovacuum worker process.
        If this value is specified without units, it is taken as kilobytes.
        It defaults to -1, indicating that
        the value of <xref linkend="guc-maintenance-work-mem"/> should
        be used instead.  The setting has no effect on the behavior of
        <command>VACUUM</command> when run in other contexts.
        This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command
        line.
-->
個々の自動バキュームワーカープロセスが使用する最大のメモリ量を指定します。
この値が単位なしで指定された場合は、キロバイト単位であるとみなします。
デフォルトは-1で、<xref linkend="guc-maintenance-work-mem"/>が代わりに使われる設定になります。
別の文脈で実行される<command>VACUUM</command>にはこの設定は影響しません。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-buffer-usage-limit" xreflabel="vacuum_buffer_usage_limit">
      <term>
       <varname>vacuum_buffer_usage_limit</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_buffer_usage_limit</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>vacuum_buffer_usage_limit</varname>設定パラメータ</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the size of the
        <glossterm linkend="glossary-buffer-access-strategy">Buffer Access Strategy</glossterm>
        used by the <command>VACUUM</command> and <command>ANALYZE</command>
        commands.  A setting of <literal>0</literal> will allow the operation
        to use any number of <varname>shared_buffers</varname>.  Otherwise
        valid sizes range from <literal>128 kB</literal> to
        <literal>16 GB</literal>.  If the specified size would exceed 1/8 the
        size of <varname>shared_buffers</varname>, the size is silently capped
        to that value.  The default value is <literal>2MB</literal>.  If
        this value is specified without units, it is taken as kilobytes.  This
        parameter can be set at any time.  It can be overridden for
        <xref linkend="sql-vacuum"/> and <xref linkend="sql-analyze"/>
        when passing the <option>BUFFER_USAGE_LIMIT</option> option.  Higher
        settings can allow <command>VACUUM</command> and
        <command>ANALYZE</command> to run more quickly, but having too large a
        setting may cause too many other useful pages to be evicted from
        shared buffers.
-->
<command>VACUUM</command>コマンドおよび<command>ANALYZE</command>コマンドで使用される<glossterm linkend="glossary-buffer-access-strategy">バッファアクセスストラテジ</glossterm>の大きさを指定します。
<literal>0</literal>を設定すると、それらの操作で任意の数の<varname>shared_buffers</varname>を使用できることになります。
それ以外の場合は、有効なサイズは<literal>128 kB</literal>から<literal>16 GB</literal>までの範囲です。
指定されたサイズが<varname>shared_buffers</varname>のサイズの1/8を超える場合、サイズは黙ってその値に制限されます。
デフォルト値は<literal>2MB</literal>です。
この値が単位なしで指定された場合は、キロバイト単位であるとみなします。
このパラメータはいつでも設定できます。
このパラメータは、<option>BUFFER_USAGE_LIMIT</option>オプションを渡すことによって、<xref linkend="sql-vacuum"/>および<xref linkend="sql-analyze"/>に対して上書きできます。
設定を高くすると、<command>VACUUM</command>および<command>ANALYZE</command>の実行速度が速くなりますが、設定を高くしすぎると、他の多くの有用なページが共有バッファから削除されてしまう可能性があります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-logical-decoding-work-mem" xreflabel="logical_decoding_work_mem">
      <term><varname>logical_decoding_work_mem</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>logical_decoding_work_mem</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>logical_decoding_work_mem</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the maximum amount of memory to be used by logical decoding,
        before some of the decoded changes are written to local disk. This
        limits the amount of memory used by logical streaming replication
        connections. It defaults to 64 megabytes (<literal>64MB</literal>).
        Since each replication connection only uses a single buffer of this size,
        and an installation normally doesn't have many such connections
        concurrently (as limited by <varname>max_wal_senders</varname>), it's
        safe to set this value significantly higher than <varname>work_mem</varname>,
        reducing the amount of decoded changes written to disk.
-->
デコードされた更新がローカルディスクに書かれる前にロジカルデコーディングが使用する最大のメモリ量を指定します。
これにより、ロジカルストリーミングレプリケーションの接続が使用する最大メモリが制限されます。
デフォルトは64メガバイト(<literal>64MB</literal>)です。
個々のレプリケーション接続がここで指定した単一のバッファだけを使用し、インストールは通常たくさんの接続を並行して使わないので（<varname>max_wal_senders</varname>で制限されます）、この値を<varname>work_mem</varname>よりもずっと大きくしても安全で、それによってデコードされた更新がディスクに書かれる量が削減されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-commit-timestamp-buffers" xreflabel="commit_timestamp_buffers">
      <term><varname>commit_timestamp_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>commit_timestamp_buffers</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>commit_timestamp_buffers</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the amount of memory to use to cache the contents of
        <literal>pg_commit_ts</literal> (see
        <xref linkend="pgdata-contents-table"/>).
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The default value is <literal>0</literal>, which requests
        <varname>shared_buffers</varname>/512 up to 1024 blocks,
        but not fewer than 16 blocks.
        This parameter can only be set at server start.
-->
<literal>pg_commit_ts</literal>の内容をキャッシュするために使用するメモリ量を指定します（<xref linkend="pgdata-contents-table"/>を参照してください）。
この値が単位なしで指定された場合、ブロック、つまり<symbol>BLCKSZ</symbol>バイト、通常は8キロバイトとして扱われます。
デフォルト値は<literal>0</literal>で、最大1024ブロック、16ブロック以上の<varname>shared_buffers</varname>/512を要求します。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-multixact-member-buffers" xreflabel="multixact_member_buffers">
      <term><varname>multixact_member_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>multixact_member_buffers</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>multixact_member_buffers</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the amount of shared memory to use to cache the contents
        of <literal>pg_multixact/members</literal> (see
        <xref linkend="pgdata-contents-table"/>).
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The default value is <literal>32</literal>.
        This parameter can only be set at server start.
-->
<literal>pg_multixact/members</literal>の内容をキャッシュするために使用する共有メモリの量を指定します（<xref linkend="pgdata-contents-table"/>を参照してください）。
この値が単位なしで指定された場合、ブロック、つまり<symbol>BLCKSZ</symbol>バイト、通常は8キロバイトとして扱われます。
デフォルト値は<literal>32</literal>です。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-multixact-offset-buffers" xreflabel="multixact_offset_buffers">
      <term><varname>multixact_offset_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>multixact_offset_buffers</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>multixact_offset_buffers</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the amount of shared memory to use to cache the contents
        of <literal>pg_multixact/offsets</literal> (see
        <xref linkend="pgdata-contents-table"/>).
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The default value is <literal>16</literal>.
        This parameter can only be set at server start.
-->
<literal>pg_multixact/offsets</literal>の内容をキャッシュするために使用する共有メモリの量を指定します（<xref linkend="pgdata-contents-table"/>を参照してください）。
この値が単位なしで指定された場合、ブロック、つまり<symbol>BLCKSZ</symbol>バイト、通常は8キロバイトとして扱われます。
デフォルト値は<literal>16</literal>です。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-notify-buffers" xreflabel="notify_buffers">
      <term><varname>notify_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>notify_buffers</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>notify_buffers</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the amount of shared memory to use to cache the contents
        of <literal>pg_notify</literal> (see
        <xref linkend="pgdata-contents-table"/>).
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The default value is <literal>16</literal>.
        This parameter can only be set at server start.
-->
<literal>pg_notify</literal>の内容をキャッシュするために使用する共有メモリの量を指定します（<xref linkend="pgdata-contents-table"/>を参照してください）。
この値が単位なしで指定された場合、ブロック、つまり<symbol>BLCKSZ</symbol>バイト、通常は8キロバイトとして扱われます。
デフォルト値は<literal>16</literal>です。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-serializable-buffers" xreflabel="serializable_buffers">
      <term><varname>serializable_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>serializable_buffers</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>serializable_buffers</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the amount of shared memory to use to cache the contents
        of <literal>pg_serial</literal> (see
        <xref linkend="pgdata-contents-table"/>).
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The default value is <literal>32</literal>.
        This parameter can only be set at server start.
-->
<literal>pg_serial</literal>の内容をキャッシュするために使用する共有メモリの量を指定します（<xref linkend="pgdata-contents-table"/>を参照してください）。
この値が単位なしで指定された場合、ブロック、つまり<symbol>BLCKSZ</symbol>バイト、通常は8キロバイトとして扱われます。
デフォルト値は<literal>32</literal>です。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-subtransaction-buffers" xreflabel="subtransaction_buffers">
      <term><varname>subtransaction_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>subtransaction_buffers</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>subtransaction_buffers</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the amount of shared memory to use to cache the contents
        of <literal>pg_subtrans</literal> (see
        <xref linkend="pgdata-contents-table"/>).
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The default value is <literal>0</literal>, which requests
        <varname>shared_buffers</varname>/512 up to 1024 blocks,
        but not fewer than 16 blocks.
        This parameter can only be set at server start.
-->
<literal>pg_subtrans</literal>の内容をキャッシュするために使用する共有メモリの量を指定します（<xref linkend="pgdata-contents-table"/>を参照してください）。
この値が単位なしで指定された場合、ブロック、つまり<symbol>BLCKSZ</symbol>バイト、通常は8キロバイトとして扱われます。
デフォルト値は<literal>0</literal>で、最大1024ブロック、16ブロック以上の<varname>shared_buffers</varname>/512を要求します。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-transaction-buffers" xreflabel="transaction_buffers">
      <term><varname>transaction_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>transaction_buffers</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>transaction_buffers</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the amount of shared memory to use to cache the contents
        of <literal>pg_xact</literal> (see
        <xref linkend="pgdata-contents-table"/>).
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The default value is <literal>0</literal>, which requests
        <varname>shared_buffers</varname>/512 up to 1024 blocks,
        but not fewer than 16 blocks.
        This parameter can only be set at server start.
-->
<literal>pg_xact</literal>の内容をキャッシュするために使用する共有メモリの量を指定します（<xref linkend="pgdata-contents-table"/>を参照してください）。
この値が単位なしで指定された場合、ブロック、つまり<symbol>BLCKSZ</symbol>バイト、通常は8キロバイトとして扱われます。
デフォルト値は<literal>0</literal>で、最大1024ブロック、16ブロック以上の<varname>shared_buffers</varname>/512を要求します。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-stack-depth" xreflabel="max_stack_depth">
      <term><varname>max_stack_depth</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_stack_depth</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_stack_depth</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the maximum safe depth of the server's execution stack.
        The ideal setting for this parameter is the actual stack size limit
        enforced by the kernel (as set by <literal>ulimit -s</literal> or local
        equivalent), less a safety margin of a megabyte or so.  The safety
        margin is needed because the stack depth is not checked in every
        routine in the server, but only in key potentially-recursive routines.
        If this value is specified without units, it is taken as kilobytes.
        The default setting is two megabytes (<literal>2MB</literal>), which
        is conservatively small and unlikely to risk crashes.  However,
        it might be too small to allow execution of complex functions.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
サーバの実行スタックの最大安全深度を指定します。
このパラメータの理想的な設定はカーネルにより強要される実際のスタック容量の（<literal>ulimit -s</literal>もしくはそれと同等の機能で設定された）限界から、1メガバイト程度の安全余裕度を差し引いたものです。
この安全余裕度は、サーバがすべてのルーチンではスタック深度を検査をせず、再帰を行う可能性のある重要なルーチンでのみ検査をするために必要となるものです。
この値が単位なしで指定された場合は、キロバイト単位であるとみなします。
デフォルト設定は2メガバイト（<literal>2MB</literal>）で、かなり控え目、かつクラッシュの危険がなさそうな設定です。
しかし、複雑な関数の実行を許容するには小さ過ぎるかも知れません。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>

       <para>
<!--
        Setting <varname>max_stack_depth</varname> higher than
        the actual kernel limit will mean that a runaway recursive function
        can crash an individual backend process.  On platforms where
        <productname>PostgreSQL</productname> can determine the kernel limit,
        the server will not allow this variable to be set to an unsafe
        value.  However, not all platforms provide the information,
        so caution is recommended in selecting a value.
-->
<varname>max_stack_depth</varname>を実際のカーネルの制限よりも高い値に設定した場合、暴走した再帰関数により、個々のバックエンドプロセスがクラッシュするかもしれません。
<productname>PostgreSQL</productname>がカーネルの制限を決定することができるプラットフォームでは、この変数を危険な値に設定させません。
しかし、すべてのプラットフォームがこの情報を提供できるわけではありません。
このため、値を選ぶ時には注意が必要です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-shared-memory-type" xreflabel="shared_memory_type">
      <term><varname>shared_memory_type</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>shared_memory_type</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>shared_memory_type</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the shared memory implementation that the server
        should use for the main shared memory region that holds
        <productname>PostgreSQL</productname>'s shared buffers and other
        shared data.  Possible values are <literal>mmap</literal> (for
        anonymous shared memory allocated using <function>mmap</function>),
        <literal>sysv</literal> (for System V shared memory allocated via
        <function>shmget</function>) and <literal>windows</literal> (for Windows
        shared memory).  Not all values are supported on all platforms; the
        first supported option is the default for that platform.  The use of
        the <literal>sysv</literal> option, which is not the default on any
        platform, is generally discouraged because it typically requires
        non-default kernel settings to allow for large allocations (see <xref
        linkend="sysvipc"/>).
-->
<productname>PostgreSQL</productname>の共有バッファおよび他の共有データを保持する主共有メモリ領域のためにサーバが使用すべき共有メモリの実装を指定します。
可能な値は<literal>mmap</literal>（<function>mmap</function>を使って獲得した無名共有メモリ）、<literal>sysv</literal> （<function>shmget</function>を使って獲得したSystem V共有メモリ）、<literal>windows</literal> （Windows共有メモリ）です。
すべての値がすべてのプラットフォームでサポートされているわけではありません。
サポートされている最初のオプションがそのプラットフォームのデフォルトです。
どのプラットフォームでもデフォルトになっていない<literal>sysv</literal>オプションの利用は一般に推奨されません。
通常、デフォルトではないカーネルの設定が大きなアロケーションでは必要になるからです。
（<xref linkend="sysvipc"/>参照。）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-dynamic-shared-memory-type" xreflabel="dynamic_shared_memory_type">
      <term><varname>dynamic_shared_memory_type</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>dynamic_shared_memory_type</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>dynamic_shared_memory_type</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the dynamic shared memory implementation that the server
        should use.  Possible values are <literal>posix</literal> (for POSIX shared
        memory allocated using <literal>shm_open</literal>), <literal>sysv</literal>
        (for System V shared memory allocated via <literal>shmget</literal>),
        <literal>windows</literal> (for Windows shared memory),
        and <literal>mmap</literal> (to simulate shared memory using
        memory-mapped files stored in the data directory).
        Not all values are supported on all platforms; the first supported
        option is usually the default for that platform.  The use of the
        <literal>mmap</literal> option, which is not the default on any platform,
        is generally discouraged because the operating system may write
        modified pages back to disk repeatedly, increasing system I/O load;
        however, it may be useful for debugging, when the
        <literal>pg_dynshmem</literal> directory is stored on a RAM disk, or when
        other shared memory facilities are not available.
-->
サーバが使う動的共有メモリの実装を指定します。可能な値は<literal>posix</literal> (<literal>shm_open</literal>で獲得するPOSIX共有メモリ)、<literal>sysv</literal>(<literal>shmget</literal>で獲得するSystem V共有メモリ)、<literal>windows</literal> (Windows共有メモリ)、 <literal>mmap</literal>(データディレクトリ内のメモリマップファイルを使ってシミュレートする共有メモリ)です。
すべての値がすべてのプラットフォームでサポートされているわけではありません。
そのプラットフォームでの推奨実装が通常デフォルトになります。
どのプラットフォームでもデフォルトになっていない<literal>mmap</literal>は、オペレーティングシステムが変更されたページをディスクに継続的に書き込み、I/O負荷を増加させるので一般的には利用が推奨されていません。
しかし、デバッグ目的のために<literal>pg_dynshmem</literal>ディレクトリがRAMディスク上にある場合や、他の共有メモリ機能が使えない場合は有用かもしれません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-min-dynamic-shared-memory" xreflabel="min_dynamic_shared_memory">
      <term><varname>min_dynamic_shared_memory</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>min_dynamic_shared_memory</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>min_dynamic_shared_memory</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the amount of memory that should be allocated at server
        startup for use by parallel queries.  When this memory region is
        insufficient or exhausted by concurrent queries, new parallel queries
        try to allocate extra shared memory temporarily from the operating
        system using the method configured with
        <varname>dynamic_shared_memory_type</varname>, which may be slower due
        to memory management overheads.  Memory that is allocated at startup
        with <varname>min_dynamic_shared_memory</varname> is affected by
        the <varname>huge_pages</varname> setting on operating systems where
        that is supported, and may be more likely to benefit from larger pages
        on operating systems where that is managed automatically.
        The default value is <literal>0</literal> (none). This parameter can
        only be set at server start.
-->
サーバ起動時にパラレルクエリ用に獲得するメモリの量を指定します。
このメモリ領域不足していたり並列実行される問い合わせで使い尽くされると、新しいパラレルクエリは<varname>dynamic_shared_memory_type</varname>で設定された方法でオペレーティングシステムから一時的に共有メモリを獲得しようとします。
これはメモリ管理のオーバーヘッドにより遅くなる可能性があります。
起動時に<varname>min_dynamic_shared_memory</varname>で獲得するメモリは、サポートするオペレーティングシステムに対する<varname>huge_pages</varname>の設定に影響を受けます。
huge pageを自動管理するオペレーティングシステム上でより大きなページにより恩恵を被る可能性が大きいです。
デフォルト値は<literal>0</literal>（none）です。
このパラメータはサーバ起動時にのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>

     <sect2 id="runtime-config-resource-disk">
<!--
     <title>Disk</title>
-->
     <title>ディスク</title>

     <variablelist>
     <varlistentry id="guc-temp-file-limit" xreflabel="temp_file_limit">
      <term><varname>temp_file_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>temp_file_limit</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>temp_file_limit</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the maximum amount of disk space that a process can use
        for temporary files, such as sort and hash temporary files, or the
        storage file for a held cursor.  A transaction attempting to exceed
        this limit will be canceled.
        If this value is specified without units, it is taken as kilobytes.
        <literal>-1</literal> (the default) means no limit.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
あるプロセスが一時ファイルとして使用できるディスクの最大容量を設定します。
例えば、ソートやハッシュの一時ファイルであったり、カーソルを保持する格納ファイルです。
この制限値を超えようとするトランザクションはキャンセルされます。
この値が単位なしで指定された場合は、キロバイト単位であるとみなします。
<literal>-1</literal>（デフォルトです）の場合は制限がありません。
この設定はスーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみ変更可能です。
       </para>
       <para>
<!--
        This setting constrains the total space used at any instant by all
        temporary files used by a given <productname>PostgreSQL</productname> process.
        It should be noted that disk space used for explicit temporary
        tables, as opposed to temporary files used behind-the-scenes in query
        execution, does <emphasis>not</emphasis> count against this limit.
-->
この設定により、ある <productname>PostgreSQL</productname> セッションによって使用される一時ファイルの合計の容量が常に制約されることになります。
なお、問い合わせの実行において暗黙的に使用される一時ファイルとは異なり、一時テーブルとして明示的に使用されるディスク容量は、この制限には<emphasis>含まれません</emphasis>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-file-copy-method" xreflabel="file_copy_method">
      <term><varname>file_copy_method</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>file_copy_method</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the method used to copy files.
        Possible values are <literal>COPY</literal> (default) and
        <literal>CLONE</literal> (if operating support is available).
-->
《機械翻訳》ファイルのコピーに使用するメソッドを指定します。
有効な値は<literal>COPY</literal>デフォルトと<literal>CLONE</literal>サポートが使用可能な場合です。
       </para>

       <para>
<!--
       This parameter affects:
-->
《機械翻訳》このパラメータは以下に影響します。
       </para>
       <itemizedlist>
        <listitem>
        <para>
<!--
         <literal><command>CREATE DATABASE ... STRATEGY=FILE_COPY</command></literal>
-->
《機械翻訳》<literal><command>CREATE DATABASE ... STRATEGY=FILE_COPY</command></literal>です。
        </para>
        </listitem>
        <listitem>
        <para>
<!--
         <command>ALTER DATABASE ... SET TABLESPACE ...</command>
-->
《機械翻訳》<command>ALTER DATABASE ... SET TABLESPACE ...</command>です。
        </para>
        </listitem>
       </itemizedlist>

       <para>
<!--
        <literal>CLONE</literal> uses the <function>copy_file_range()</function>
        (Linux, FreeBSD) or <function>copyfile</function>
        (macOS) system calls, giving the kernel the opportunity to share disk
        blocks or push work down to lower layers on some file systems.
-->
《機械翻訳》<literal>CLONE</literal>は、<function>copy_file_range()</function>リナックス、FreeBSDまたは<function>copyfile</function>(macOS)システム呼び出しを使用して、カーネルにディスクブロックまたはプッシュ作業ダウンを一部のファイルシステムの下位レイヤと共有する機会を与えます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-notify-queue-pages" xreflabel="max_notify_queue_pages">
      <term><varname>max_notify_queue_pages</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_notify_queue_pages</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the maximum amount of allocated pages for
        <xref linkend="sql-notify"/> / <xref linkend="sql-listen"/> queue.
        The default value is 1048576. For 8 KB pages it allows to consume
        up to 8 GB of disk space.
-->
<xref linkend="sql-notify"/>/<xref linkend="sql-listen"/>キューのために割り当てられたページの最大量を指定します。
デフォルト値は1048576です。
8キロバイトページの場合、最大8ギガバイトのディスクスペースが消費されます。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>

     <sect2 id="runtime-config-resource-kernel">
<!--
     <title>Kernel Resource Usage</title>
-->
     <title>カーネル資源使用</title>

     <variablelist>
     <varlistentry id="guc-max-files-per-process" xreflabel="max_files_per_process">
      <term><varname>max_files_per_process</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_files_per_process</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_files_per_process</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the maximum number of open files each server subprocess is
        allowed to open simultaneously;  files already opened in the
        postmaster are not counted toward this limit. The default is one
        thousand files.
-->
《機械翻訳》各オープンサブプロセスが同時にオープンできるサーバファイルの最大数を設定します。
既にpostmasterで開かれるになっているファイルは、この制限にはカウントされません。
デフォルトは1,000ファイルです。
       </para>
       <para>
<!--
        If the kernel is enforcing
        a safe per-process limit, you don't need to worry about this setting.
        But on some platforms (notably, most BSD systems), the kernel will
        allow individual processes to open many more files than the system
        can actually support if many processes all try to open
        that many files. If you find yourself seeing <quote>Too many open
        files</quote> failures, try reducing this setting.
        This parameter can only be set at server start.
-->
《マッチ度[56.666667]》それぞれのサーバ子プロセスが同時にオープンできるファイル数の最大値をセットします。
デフォルトは1000ファイルです。
もしもカーネルがプロセス毎の安全制限を強要している場合、この設定を気にかける必要はありません。
しかし、いくつかのプラットフォーム（特にほとんどのBSDシステム）では、もし多くのプロセス全てがそれだけ多くのファイルを開くことを試みたとした場合、実際にサポートできるファイル数より多くのファイルを開くことを許しています。もしも<quote>Too many open files</quote>エラーが発生した場合、この設定を削減してみてください。
このパラメータはサーバ起動時のみ設定可能です。
《機械翻訳》カーネルがセーフごとの制限を実施している場合は、この設定について心配する必要はありません。
しかし、一部のプラットフォーム（特にほとんどのBSDシステム）では、多くのプロセスがすべてのプロセスをオープンにして多くのファイルをオープンする場合、カーネルはシステムが実際にサポートできるよりも多くのファイルをトライにすることを許可します。
<quote>開いているファイルが多すぎる</quote>障害が発生した場合は、トライはこの設定を減らします。
このパラメータはサーバスタートでのみ設定できます。
       </para>
      </listitem>
     </varlistentry>
     </variablelist>
    </sect2>


    <sect2 id="runtime-config-resource-background-writer">
<!--
     <title>Background Writer</title>
-->
     <title>バックグラウンドライタ</title>

     <para>
<!--
      There is a separate server
      process called the <firstterm>background writer</firstterm>, whose function
      is to issue writes of <quote>dirty</quote> (new or modified) shared
      buffers.  When the number of clean shared buffers appears to be
      insufficient, the background writer writes some dirty buffers to the
      file system and marks them as clean.  This reduces the likelihood
      that server processes handling user queries will be unable to find
      clean buffers and have to write dirty buffers themselves.
      However, the background writer does cause a net overall
      increase in I/O load, because while a repeatedly-dirtied page might
      otherwise be written only once per checkpoint interval, the
      background writer might write it several times as it is dirtied
      in the same interval.  The parameters discussed in this subsection
      can be used to tune the behavior for local needs.
-->
<firstterm>バックグラウンドライタ</firstterm>と呼ばれる個別のサーバプロセスがあり、その機能は（新規または更新された）<quote>ダーティ</quote>な共有バッファの書き込みを行うことです。
クリーンなバッファの数が足りないことが分かると、バックグラウンドライタはダーティバッファをファイルシステムに書き込み、それらのバッファにクリーンであるという印を付けます。
これにより、ユーザの問い合わせを処理するサーバプロセスがクリーンなバッファを見つけることができず、ダーティなバッファを自分で書き込まなければならなくなる可能性を減らすことができます。
しかし、バックグラウンドライタは正味の全体的I/O負荷の増加を引き起こします。
その理由は、繰り返しダーティ化されるページは、バックグラウンドライタを使わなければチェックポイント間隔で一度だけ書き出されれば十分なのに対し、バックグラウンドライタは同じ間隔内で何度もダーティ化されると、それを複数回書き出すかもしれないからです。
この副節で説明する各パラメータは、サイト独自の必要に応じて動作を調整することに使用できます。
     </para>

     <variablelist>
      <varlistentry id="guc-bgwriter-delay" xreflabel="bgwriter_delay">
       <term><varname>bgwriter_delay</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>bgwriter_delay</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>bgwriter_delay</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies the delay between activity rounds for the
         background writer.  In each round the writer issues writes
         for some number of dirty buffers (controllable by the
         following parameters).  It then sleeps for
         the length of <varname>bgwriter_delay</varname>, and repeats.
         When there are no dirty buffers in the
         buffer pool, though, it goes into a longer sleep regardless of
         <varname>bgwriter_delay</varname>.
         If this value is specified without units, it is taken as milliseconds.
         The default value is 200
         milliseconds (<literal>200ms</literal>). Note that on some systems, the
         effective resolution of sleep delays is 10 milliseconds; setting
         <varname>bgwriter_delay</varname> to a value that is not a multiple of 10
         might have the same results as setting it to the next higher multiple
         of 10.  This parameter can only be set in the
         <filename>postgresql.conf</filename> file or on the server command line.
-->
バックグラウンドライタの動作周期間の遅延を指定します。
それぞれの周期でライタは、（以下のパラメータで管理される）一部のダーティバッファの書き込みを行います。
そして<varname>bgwriter_delay</varname>の長さスリープした後、これを繰りかえします。
しかし、バッファプールにダーティバッファが存在しない場合、<varname>bgwriter_delay</varname>に係わらずより長くスリープします。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
デフォルトの値は200ミリ秒（<literal>200ms</literal>）です。
ある種のシステムでは、スリープ遅延の実精度は10ミリ秒です。
<varname>bgwriter_delay</varname>の値の設定を10の倍数としない場合、次に大きい10の倍数に設定した結果と同一になるかもしれないことを覚えておいてください。
このパラメータは<filename>postgresql.conf</filename>ファイル、または、サーバのコマンドラインで設定可能です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-bgwriter-lru-maxpages" xreflabel="bgwriter_lru_maxpages">
       <term><varname>bgwriter_lru_maxpages</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>bgwriter_lru_maxpages</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>bgwriter_lru_maxpages</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         In each round, no more than this many buffers will be written
         by the background writer.  Setting this to zero disables
         background writing.  (Note that checkpoints, which are managed by
         a separate, dedicated auxiliary process, are unaffected.)
         The default value is 100 buffers.
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line.
-->
それぞれの周期で、この数以上のバッファはバックグラウンドライタにより書き込まれません。
ゼロに設定することでバックグラウンド書き込みは無効になります。
（分離し、そして専用の補助プロセスにより管理されるチェックポイントは影響を受けません。）
デフォルト値は100バッファです。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-bgwriter-lru-multiplier" xreflabel="bgwriter_lru_multiplier">
       <term><varname>bgwriter_lru_multiplier</varname> (<type>floating point</type>)
       <indexterm>
        <primary><varname>bgwriter_lru_multiplier</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>bgwriter_lru_multiplier</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         The number of dirty buffers written in each round is based on the
         number of new buffers that have been needed by server processes
         during recent rounds.  The average recent need is multiplied by
         <varname>bgwriter_lru_multiplier</varname> to arrive at an estimate of the
         number of buffers that will be needed during the next round.  Dirty
         buffers are written until there are that many clean, reusable buffers
         available.  (However, no more than <varname>bgwriter_lru_maxpages</varname>
         buffers will be written per round.)
         Thus, a setting of 1.0 represents a <quote>just in time</quote> policy
         of writing exactly the number of buffers predicted to be needed.
         Larger values provide some cushion against spikes in demand,
         while smaller values intentionally leave writes to be done by
         server processes.
         The default is 2.0.
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line.
-->
各周期で書き出されるダーティバッファ数は、最近の周期でサーバプロセスが必要とした新しいバッファ数を基にします。
次の周期で必要となるバッファ数を推定するために、最近必要とされた平均が<varname>bgwriter_lru_multiplier</varname>と掛け合わせられます。
ダーティバッファの書き出しは、同数の整理済み、再利用可能なバッファが利用できるようになるまで行われます。
（しかし1周期に<varname>bgwriter_lru_maxpages</varname>を超えるバッファ数を書き出しません。）
したがって、1.0と設定することは、必要と予想されるバッファ数の書き込みについて<quote>必要なときに必要なだけ</quote>というポリシーを表します。
より大きな値は突発的な要求に対する多少の緩衝材を提供します。
より小さな値はサーバプロセスでなされる書き込みを意図的に残します。
デフォルトは2.0です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-bgwriter-flush-after" xreflabel="bgwriter_flush_after">
       <term><varname>bgwriter_flush_after</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>bgwriter_flush_after</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>bgwriter_flush_after</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Whenever more than this amount of data has
         been written by the background writer, attempt to force the OS to issue these
         writes to the underlying storage.  Doing so will limit the amount of
         dirty data in the kernel's page cache, reducing the likelihood of
         stalls when an <function>fsync</function> is issued at the end of a checkpoint, or when
         the OS writes data back in larger batches in the background.  Often
         that will result in greatly reduced transaction latency, but there
         also are some cases, especially with workloads that are bigger than
         <xref linkend="guc-shared-buffers"/>, but smaller than the OS's page
         cache, where performance might degrade.  This setting may have no
         effect on some platforms.
         If this value is specified without units, it is taken as blocks,
         that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
         The valid range is between
         <literal>0</literal>, which disables forced writeback, and
         <literal>2MB</literal>.  The default is <literal>512kB</literal> on Linux,
         <literal>0</literal> elsewhere.  (If <symbol>BLCKSZ</symbol> is not 8kB,
         the default and maximum values scale proportionally to it.)
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line.
-->
バックグラウンドライタがこの値より多く書く度に、OSが記憶装置に書き込むことを強制しようとします。
このことにより、カーネルのページキャッシュが持つダーティデータの量を一定量に制限し、チェックポイントの最後に<function>fsync</function>が実行される際、あるいはOSがバックグラウンドでデータを大きな塊で書き出す際に性能の急激な低下を招く可能性を減らします。
多くの場合これによってトランザクションの遅延が大幅に少なくなりますが、あるケース、特にワークロードが<xref linkend="guc-shared-buffers"/>よりも大きく、OSのページキャッシュよりも小さい時には性能が低下するかもしれません。
この設定が無効なプラットフォームがあります。
この値が単位なしで指定された場合は、ブロック単位であるとみなします。すなわち、<symbol>BLCKSZ</symbol>バイト、一般的には8kBです。
有効な設定値は、この強制書き込み機能が無効になる<literal>0</literal>から、<literal>2MB</literal>までです。
デフォルト値は、Linuxでは<literal>512kB</literal>で、それ以外は<literal>0</literal>です。
（<symbol>BLCKSZ</symbol>が8kBでなければ、この設定のデフォルト値と最大値が<symbol>BLCKSZ</symbol>に比例して変更されます。）
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <para>
<!--
      Smaller values of <varname>bgwriter_lru_maxpages</varname> and
      <varname>bgwriter_lru_multiplier</varname> reduce the extra I/O load
      caused by the background writer, but make it more likely that server
      processes will have to issue writes for themselves, delaying interactive
      queries.
-->
<varname>bgwriter_lru_maxpages</varname>および<varname>bgwriter_lru_multiplier</varname>の値がより少ないと、バックグラウンドライタで引き起こされる追加のI/O負荷を軽減しますが、サーバプロセスが自分自身で行わなければならない書き込みが増加することになり、会話型問い合わせを遅らせることになります。
     </para>
    </sect2>

    <sect2 id="runtime-config-resource-io">
     <title>I/O</title>

     <variablelist>
      <varlistentry id="guc-backend-flush-after" xreflabel="backend_flush_after">
       <term><varname>backend_flush_after</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>backend_flush_after</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>backend_flush_after</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Whenever more than this amount of data has
         been written by a single backend, attempt to force the OS to issue
         these writes to the underlying storage.  Doing so will limit the
         amount of dirty data in the kernel's page cache, reducing the
         likelihood of stalls when an <function>fsync</function> is issued at the end of a
         checkpoint, or when the OS writes data back in larger batches in the
         background.  Often that will result in greatly reduced transaction
         latency, but there also are some cases, especially with workloads
         that are bigger than <xref linkend="guc-shared-buffers"/>, but smaller
         than the OS's page cache, where performance might degrade.  This
         setting may have no effect on some platforms.
         If this value is specified without units, it is taken as blocks,
         that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
         The valid range is
         between <literal>0</literal>, which disables forced writeback,
         and <literal>2MB</literal>.  The default is <literal>0</literal>, i.e., no
         forced writeback.  (If <symbol>BLCKSZ</symbol> is not 8kB,
         the maximum value scales proportionally to it.)
-->
この量を超えるデータが単一のバックエンドによって書き込まれたときはいつでも、OSが記憶装置に書き込むことを強制します。
このことにより、カーネルのページキャッシュが持つダーティデータの量を一定量に制限し、チェックポイントの最後に<function>fsync</function>が実行される際、あるいはバックグラウンドで実行される大きなバッチの中でOSがデータを書き出す際に性能の急激な低下を招く可能性を減らします。
多くの場合これによってトランザクションの遅延が大幅に少なくなりますが、あるケース、特にワークロードが<xref linkend="guc-shared-buffers"/>よりも大きく、OSのページキャッシュよりも小さい時には性能が低下するかもしれません。
この設定が無効なプラットフォームがあります。
この値が単位なしで指定された場合は、ブロック単位であるとみなします。すなわち、<symbol>BLCKSZ</symbol>バイト、一般的には8kBです。
有効な範囲は、この強制書き込み機能が無効になる<literal>0</literal>から、<literal>2MB</literal>までです。
デフォルト値は<literal>0</literal>です(すなわち書き出し制御を行いません)。
（<symbol>BLCKSZ</symbol>が8kBでなければ、最大値が<symbol>BLCKSZ</symbol>に比例して変更されます。）
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-effective-io-concurrency" xreflabel="effective_io_concurrency">
       <term><varname>effective_io_concurrency</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>effective_io_concurrency</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>effective_io_concurrency</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Sets the number of concurrent storage I/O operations that
         <productname>PostgreSQL</productname> expects can be executed
         simultaneously.  Raising this value will increase the number of I/O
         operations that any individual <productname>PostgreSQL</productname>
         session attempts to initiate in parallel.  The allowed range is
         <literal>1</literal> to <literal>1000</literal>, or
         <literal>0</literal> to disable issuance of asynchronous I/O requests.
         The default is <literal>16</literal>.
-->
《マッチ度[66.179541]》<productname>PostgreSQL</productname>が同時実行可能であると想定する同時ディスクI/O操作の数を設定します。
この値を大きくすると、あらゆる個別の<productname>PostgreSQL</productname>セッションが並行して開始を試みるI/O操作の数が増加します。
設定可能な範囲は1から1000まで、または非同期I/Oリクエストの発行を無効にするゼロです。
現在、この設定はビットマップヒープスキャンのみに影響します。
《機械翻訳》が同時に実行できる同時ストレージ入出力操作の数を設定します。
この値を大きくすると、個々の<productname>PostgreSQL</productname>セッションがパラレルで開始しようとする入出力操作の数が増加します。
許可されるレンジは<literal>1</literal>から<literal>1000</literal>または<literal>0</literal>非同期入出力要求の発行を無効にするため。
デフォルトは<literal>16</literal>です。
<productname>PostgreSQL</productname>
        </para>

        <para>
<!--
         Higher values will have the most impact on higher latency storage
         where queries otherwise experience noticeable I/O stalls and on
         devices with high IOPs. Unnecessarily high values may increase I/O
         latency for all queries on the system
-->
《機械翻訳》値を大きくすると、高いインパクトストレージで最大のレイテンシが発生します。
このシステムでは、値を大きくしない場合に問い合わせで顕著な入出力停止が発生したり、IOPの高いデバイスで発生したりします。
必要以上に値を大きくすると、この地域のすべての問い合わせの入出力レイテンシが増加する可能性があります。
        </para>

        <para>
<!--
         On systems with prefetch advice support,
         <varname>effective_io_concurrency</varname> also controls the
         prefetch distance.
-->
《機械翻訳》プレフェッチアドバイスサポートのシステムでは、<varname>effective_io_concurrency</varname>はプレフェッチの間隔も制御します。
        </para>

        <para>
<!--
         This value can be overridden for tables in a particular tablespace by
         setting the tablespace parameter of the same name (see <xref
         linkend="sql-altertablespace"/>).
-->
《機械翻訳》同じテーブルスペースのテーブルスペースパラメータを設定することで、特定の名前にあるテーブルのこの値を上書きできます（<xref linkend="sql-altertablespace"/>を参照）。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-maintenance-io-concurrency" xreflabel="maintenance_io_concurrency">
       <term><varname>maintenance_io_concurrency</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>maintenance_io_concurrency</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>maintenance_io_concurrency</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Similar to <varname>effective_io_concurrency</varname>, but used
         for maintenance work that is done on behalf of many client sessions.
-->
<varname>effective_io_concurrency</varname>と似ていますが、多くのクライアントセッションのために行われる保守作業で適用されるところが異なります。
        </para>
        <para>
<!--
         The default is <literal>16</literal>.  This value can be overridden
         for tables in a particular tablespace by setting the tablespace
         parameter of the same name (see <xref
         linkend="sql-altertablespace"/>).
-->
《マッチ度[66.831683]》デフォルトは、サポートされているシステムでは1、そうでなければ0です。
この値は、テーブル空間パラメータの同じ名前のパラメータを設定することで、特定のテーブル空間内のテーブルに対して上書きできます。
(<xref linkend="sql-altertablespace"/>を参照ください)。
《機械翻訳》デフォルトは<literal>16</literal>です。
同じテーブルスペースのテーブルスペースパラメータを設定することで、特定の名前のテーブルの値を上書きできます（<xref linkend="sql-altertablespace"/>を参照してください）。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-io-max-combine-limit" xreflabel="io_max_combine_limit">
       <term><varname>io_max_combine_limit</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>io_max_combine_limit</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Controls the largest I/O size in operations that combine I/O, and silently
         limits the user-settable parameter <varname>io_combine_limit</varname>.
         This parameter can only be set in
         the <filename>postgresql.conf</filename> file or on the server
         command line.
         The maximum possible size depends on the operating system and block
         size, but is typically 1MB on Unix and 128kB on Windows.
         The default is 128kB.
-->
《機械翻訳》入出力を組み合せる操作の最大入出力サイズを制御し、ユーザを設定できるパラメータ<varname>io_combine_limit</varname>を暗黙的に制限します。
このパラメータは、<filename>postgresql.conf</filename>ファイルまたはサーバコマンドラインにのみ設定できます。
設定可能な最大サイズはオペレーティングシステムとブロックサイズによって異なりますが、通常はUNIXでは1メガバイト、Windowsでは128キロバイトです。
デフォルトは128キロバイトです。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-io-combine-limit" xreflabel="io_combine_limit">
       <term><varname>io_combine_limit</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>io_combine_limit</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Controls the largest I/O size in operations that combine I/O.  If set
         higher than the <varname>io_max_combine_limit</varname> parameter, the
         lower value will silently be used instead, so both may need to be raised
         to increase the I/O size.
         The maximum possible size depends on the operating system and block
         size, but is typically 1MB on Unix and 128kB on Windows.
         The default is 128kB.
-->
《機械翻訳》入出力を組み合せる操作の最大入出力サイズを制御します。
<varname>io_max_combine_limit</varname>パラメータより大きい値を設定すると、より小さい値が自動的に使用されるため、入出力サイズを増やすには、両方の値を大きくする必要があります。
可能な最大サイズはオペレーティングシステムとブロックサイズによって異なりますが、通常はUNIXでは1メガバイト、Windowsでは128キロバイトです。
デフォルトは128キロバイトです。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-io-max-concurrency" xreflabel="io_max_concurrency">
       <term><varname>io_max_concurrency</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>io_max_concurrency</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Controls the maximum number of I/O operations that one process can
         execute simultaneously.
-->
《機械翻訳》1つのプロセスが同時に実行できる入出力操作の最大数を制御します。
        </para>
        <para>
<!--
         The default setting of <literal>-1</literal> selects a number based
         on <xref linkend="guc-shared-buffers"/> and the maximum number of
         processes (<xref linkend="guc-max-connections"/>, <xref
         linkend="guc-autovacuum-worker-slots"/>, <xref
         linkend="guc-max-worker-processes"/> and <xref
         linkend="guc-max-wal-senders"/>), but not more than
         <literal>64</literal>.
-->
《機械翻訳》デフォルトに設定すると、<xref linkend="guc-shared-buffers"/>とプロセスの最大数（<xref linkend="guc-max-connections"/>、<xref linkend="guc-autovacuum-worker-slots"/>、<xref linkend="guc-max-worker-processes"/>、<xref linkend="guc-max-wal-senders"/>）に基づいて数が選択されますが、<literal>64</literal>を超えることはありません。
<literal>-1</literal>
        </para>
        <para>
<!--
         This parameter can only be set at server start.
-->
《マッチ度[82.978723]》このパラメータはサーバ起動時のみ設定可能です。
《機械翻訳》このパラメータはサーバ起動時のみ設定可能です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-io-method" xreflabel="io_method">
       <term><varname>io_method</varname> (<type>enum</type>)
       <indexterm>
        <primary><varname>io_method</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Selects the method for executing asynchronous I/O.
         Possible values are:
-->
《機械翻訳》非同期入出力を実行するメソッドを選択します。
可能な値は次のとおりです。
         <itemizedlist>
          <listitem>
           <para>
<!--
            <literal>worker</literal> (execute asynchronous I/O using worker processes)
-->
《機械翻訳》<literal>worker</literal>実行プロセスを使用したワーカー非同期入出力。
           </para>
          </listitem>
          <listitem>
           <para>
<!--
            <literal>io_uring</literal> (execute asynchronous I/O using
            io_uring, requires a build with
            <link linkend="configure-option-with-liburing"><option>&#45;-with-liburing</option></link> /
            <link linkend="configure-with-liburing-meson"><option>-Dliburing</option></link>)
-->
《機械翻訳》<literal>io_uring</literal> io_uringを使用する実行非同期の入出力では、<link linkend="configure-option-with-liburing"><option>--with-liburing</option></link>/<link linkend="configure-with-liburing-meson"><option>-Dliburing</option></link>を使用するビルドが必要です。
           </para>
          </listitem>
          <listitem>
           <para>
<!--
            <literal>sync</literal> (execute asynchronous-eligible I/O synchronously)
-->
《機械翻訳》<literal>sync</literal>実行非同期:同期的に適格なI/O。
           </para>
          </listitem>
         </itemizedlist>
         The default is <literal>worker</literal>.
        </para>
        <para>
<!--
         This parameter can only be set at server start.
-->
《マッチ度[82.978723]》このパラメータはサーバ起動時のみ設定可能です。
《機械翻訳》このパラメータはサーバ起動時のみ設定可能です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-io-workers" xreflabel="io_workers">
       <term><varname>io_workers</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>io_workers</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Selects the number of I/O worker processes to use. The default is
         3. This parameter can only be set in the
         <filename>postgresql.conf</filename> file or on the server command
         line.
-->
《マッチ度[68.156425]》このパラメータはデフォルトで無効です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
《機械翻訳》使用する入出力ワーカープロセスの数を選択します。
デフォルトは3です。
このパラメータは、<filename>postgresql.conf</filename>ファイルまたはサーバコマンドラインでのみ設定できます。
        </para>
        <para>
<!--
         Only has an effect if <xref linkend="guc-io-method"/> is set to
         <literal>worker</literal>.
-->
《機械翻訳》<xref linkend="guc-io-method"/>が<literal>worker</literal>に設定されている場合にのみ有効です。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </sect2>

    <sect2 id="runtime-config-resource-worker-processes">
     <title>Worker Processes</title>

     <variablelist>
      <varlistentry id="guc-max-worker-processes" xreflabel="max_worker_processes">
       <term><varname>max_worker_processes</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_worker_processes</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>max_worker_processes</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Sets the maximum number of background processes that the cluster
         can support.  This parameter can only be set at server start.  The
         default is 8.
-->
クラスタがサポートするバックグラウンドプロセスの最大数を指定します。
このパラメータはサーバ起動時のみ設定可能です。
デフォルトは8です。
        </para>

        <para>
<!--
         When running a standby server, you must set this parameter to the
         same or higher value than on the primary server. Otherwise, queries
         will not be allowed in the standby server.
-->
スタンバイサーバを起動しているときは、このパラメータを、プライマリサーバの設定値と同じかそれ以上にしなければなりません。
さもなければ、スタンバイサーバで問い合わせの実行ができなくなります。
        </para>

        <para>
<!--
         When changing this value, consider also adjusting
         <xref linkend="guc-max-parallel-workers"/>,
         <xref linkend="guc-max-parallel-maintenance-workers"/>, and
         <xref linkend="guc-max-parallel-workers-per-gather"/>.
-->
この値を変更する際は、<xref linkend="guc-max-parallel-workers"/>、<xref linkend="guc-max-parallel-maintenance-workers"/>、<xref linkend="guc-max-parallel-workers-per-gather"/>を変更することも考慮してください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-max-parallel-workers-per-gather" xreflabel="max_parallel_workers_per_gather">
       <term><varname>max_parallel_workers_per_gather</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_parallel_workers_per_gather</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>max_parallel_workers_per_gather</varname> 設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Sets the maximum number of workers that can be started by a single
         <literal>Gather</literal> or <literal>Gather Merge</literal> node.
         Parallel workers are taken from the pool of processes established by
         <xref linkend="guc-max-worker-processes"/>, limited by
         <xref linkend="guc-max-parallel-workers"/>.  Note that the requested
         number of workers may not actually be available at run time.  If this
         occurs, the plan will run with fewer workers than expected, which may
         be inefficient.  The default value is 2.  Setting this value to 0
         disables parallel query execution.
-->
一つの<literal>Gather</literal>または<literal>Gather Merge</literal>ノードに対して起動できるワーカー数の最大値を設定します。
パラレルワーカーは、<xref linkend="guc-max-parallel-workers"/>で上限が決まる<xref linkend="guc-max-worker-processes"/>で確立されたプロセスのプールから取得されます。
実行時には、要求された数のワーカーは取得できないかもしれないことに注意してください。
そうなると、実行プランは期待していたよりも少ない数のワーカーで実行されることになり、効率は悪化するかもしれません。
デフォルト値は2です。
この設定値を0にすると、パラレルクエリの実行は行われません。
        </para>

        <para>
<!--
         Note that parallel queries may consume very substantially more
         resources than non-parallel queries, because each worker process is
         a completely separate process which has roughly the same impact on the
         system as an additional user session.  This should be taken into
         account when choosing a value for this setting, as well as when
         configuring other settings that control resource utilization, such
         as <xref linkend="guc-work-mem"/>.  Resource limits such as
         <varname>work_mem</varname> are applied individually to each worker,
         which means the total utilization may be much higher across all
         processes than it would normally be for any single process.
         For example, a parallel query using 4 workers may use up to 5 times
         as much CPU time, memory, I/O bandwidth, and so forth as a query which
         uses no workers at all.
-->
パラレルクエリの実行により、パラレルクエリではない場合に比べて非常に多くのリソースが使用されるかもしれないことに注意してください。
これは、個々のワーカープロセスは完全に別個のプロセスであり、システムに対してユーザセッションが追加されたのと大体同じくらいの影響があるからです。
この設定値を選択する際には、他のリソースの消費量を制御する他の設定値、たとえば<xref linkend="guc-work-mem"/>を設定するときと同様に、この点を考慮しておく必要があります。
<varname>work_mem</varname>のような設定値によるリソース制限は、個々のワーカーに対して個別に適用されます。
つまり、ひとつのプロセスに対するよりも、すべてのプロセスの全体のリソース消費はずっと多いかもしれないということです。
たとえば、あるパラレルクエリが4つのワーカーを使っているとすると、ワーカーを使わない場合に比べて、最大5倍のCPU時間、メモリ、I/Oバンド幅、その他を使うかもしれません。
        </para>

        <para>
<!--
         For more information on parallel query, see
         <xref linkend="parallel-query"/>.
-->
パラレルクエリに関する更なる情報については、<xref linkend="parallel-query"/>をご覧ください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-max-parallel-maintenance-workers" xreflabel="max_parallel_maintenance_workers">
       <term><varname>max_parallel_maintenance_workers</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_parallel_maintenance_workers</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>max_parallel_maintenance_workers</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Sets the maximum number of parallel workers that can be
         started by a single utility command.  Currently, the parallel
         utility commands that support the use of parallel workers are
         <command>CREATE INDEX</command> when building a B-tree,
         GIN, or BRIN index,
         and <command>VACUUM</command> without <literal>FULL</literal>
         option.  Parallel workers are taken from the pool of processes
         established by <xref linkend="guc-max-worker-processes"/>, limited
         by <xref linkend="guc-max-parallel-workers"/>.  Note that the requested
         number of workers may not actually be available at run time.
         If this occurs, the utility operation will run with fewer
         workers than expected.  The default value is 2.  Setting this
         value to 0 disables the use of parallel workers by utility
         commands.
-->
《マッチ度[83.246073]》単一のユーティリティコマンドで使用されるパラレルワーカーの最大数を設定します。
今の所、パラレルワーカーの利用をサポートしているパラレルユーティリティコマンドは、<command>CREATE INDEX</command>がB-treeまたはBRINインデックスを構築するときと、<literal>FULL</literal>オプションなしの<command>VACUUM</command>です。
パラレルワーカーは、<xref linkend="guc-max-worker-processes"/>で確立したプロセスのプールから取得され、<xref linkend="guc-max-parallel-workers"/>によって制限されます。
要求したワーカー数は、実行時に実際には利用可能でないかも知れないことに注意してください。
この場合は、ユーティリティ操作は期待したよりも少ない数のワーカーにより実行されます。
デフォルト値は2です。
0に設定すると、ユーティリティコマンドはパラレルワーカーを使用しません。
《機械翻訳》1つのユーティリティコマンドで開始できるパラレル・ワーカーの最大数を設定します。
現在、パラレルのユーティリティでは、サポートでのパラレル・ワーカーの使用を次のように指示しています。
<command>CREATE INDEX</command>B-ツリー、GINまたはBRINインデックスを構築する場合、<literal>FULL</literal>オプションなし。
パラレル・ワーカーは、<xref linkend="guc-max-worker-processes"/>によって確立されたプロセスのプールから取得され、<xref linkend="guc-max-parallel-workers"/>によって制限されます。
要求されたワーカーの数が実行時に実際に使用可能でない可能性があることを示すノート。
この場合、ユーティリティオペレーションは予想よりも少ないワーカーで実行されます。
デフォルト値は2です。
この値を0に設定すると、ユーティリティコマンドによるパラレル・ワーカーの使用が無効になります。
<command>VACUUM</command>
        </para>

        <para>
<!--
         Note that parallel utility commands should not consume
         substantially more memory than equivalent non-parallel
         operations.  This strategy differs from that of parallel
         query, where resource limits generally apply per worker
         process.  Parallel utility commands treat the resource limit
         <varname>maintenance_work_mem</varname> as a limit to be applied to
         the entire utility command, regardless of the number of
         parallel worker processes.  However, parallel utility
         commands may still consume substantially more CPU resources
         and I/O bandwidth.
-->
パラレルユーティリティコマンドは同等の非パラレル操作よりもかなり多くのメモリを消費すべきでないことに留意してください。
この戦略は、一般的にワーカー毎にリソース制限を適用するパラレルクエリとは異なります。
パラレルワーカープロセスの数にかかわらず、パラレルユーティリティコマンドは、その全体でリソース制限<varname>maintenance_work_mem</varname>が適用されるとみなします。
しかし、パラレルユーティリティコマンドは、依然としてかなり多くのCPUリソースとI/Oバンド幅を消費するかも知れません。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-max-parallel-workers" xreflabel="max_parallel_workers">
       <term><varname>max_parallel_workers</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_parallel_workers</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>max_parallel_workers</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Sets the maximum number of workers that the cluster can support for
         parallel operations.  The default value is 8.  When increasing or
         decreasing this value, consider also adjusting
         <xref linkend="guc-max-parallel-maintenance-workers"/> and
         <xref linkend="guc-max-parallel-workers-per-gather"/>.
         Also, note that a setting for this value which is higher than
         <xref linkend="guc-max-worker-processes"/> will have no effect,
         since parallel workers are taken from the pool of worker processes
         established by that setting.
-->
パラレルクエリ操作用にクラスタがサポートできる最大のワーカー数を設定します。
デフォルト値は8です。
この値を増減するときは、<xref linkend="guc-max-parallel-maintenance-workers"/>と<xref linkend="guc-max-parallel-workers-per-gather"/>を調整することを考慮してください。
また、この設定値を<xref linkend="guc-max-worker-processes"/>よりも高い値にしても効果がないことに注意してください。
<xref linkend="guc-max-worker-processes"/>で決まるワーカープロセスのプールから、パラレルワーカーが使われるからです。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-parallel-leader-participation" xreflabel="parallel_leader_participation">
       <term>
       <varname>parallel_leader_participation</varname> (<type>boolean</type>)
       <indexterm>
        <primary><varname>parallel_leader_participation</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>parallel_leader_participation</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Allows the leader process to execute the query plan under
         <literal>Gather</literal> and <literal>Gather Merge</literal> nodes
         instead of waiting for worker processes.  The default is
         <literal>on</literal>.  Setting this value to <literal>off</literal>
         reduces the likelihood that workers will become blocked because the
         leader is not reading tuples fast enough, but requires the leader
         process to wait for worker processes to start up before the first
         tuples can be produced.  The degree to which the leader can help or
         hinder performance depends on the plan type, number of workers and
         query duration.
-->
ワーカープロセスを待つ代わりに、<literal>Gather</literal>ノードと<literal>Gather Merge</literal>ノード配下の問い合わせプランをリーダープロセスが実行できるようにします。
デフォルトは<literal>on</literal>です。
この値を<literal>off</literal>にすると、リーダーがタプルを十分早く読まないためにワーカーがブロックされる可能性を減らすことができますが、リーダープロセスは最初のタプルが生成される前にワーカープロセスが起動するのを待つ必要があります。
これがリーダーの性能を助けるのか、阻害要因になるかは計画型、ワーカーの数、問い合わせの実行時間の長さによります。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </sect2>
   </sect1>

<!-- split-config0-end -->
<!-- split-config1-start -->

   <sect1 id="runtime-config-wal">
<!--
    <title>Write Ahead Log</title>
-->
    <title>先行書き込みログ（WAL）</title>

   <para>
<!--
    For additional information on tuning these settings,
    see <xref linkend="wal-configuration"/>.
-->
これらの設定をチューニングする追加情報は<xref linkend="wal-configuration"/>を参照してください。
   </para>

    <sect2 id="runtime-config-wal-settings">
<!--
     <title>Settings</title>
-->
     <title>諸設定</title>
     <variablelist>

     <varlistentry id="guc-wal-level" xreflabel="wal_level">
      <term><varname>wal_level</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>wal_level</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_level</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        <varname>wal_level</varname> determines how much information is written to
        the WAL. The default value is <literal>replica</literal>, which writes enough
        data to support WAL archiving and replication, including running
        read-only queries on a standby server. <literal>minimal</literal> removes all
        logging except the information required to recover from a crash or
        immediate shutdown.  Finally,
        <literal>logical</literal> adds information necessary to support logical
        decoding.  Each level includes the information logged at all lower
        levels.  This parameter can only be set at server start.
-->
<varname>wal_level</varname>はどれだけの情報がWALに書かれるかを決定します。
デフォルト値は<literal>replica</literal>で、WALアーカイビングおよびレプリケーションをサポートするために十分なデータを書き出し、これにはスタンバイサーバで読み取り専用の問い合わせを実行することも含みます。
<literal>minimal</literal>はクラッシュまたは即時停止から回復するのに必要な情報を除き、すべてのログを削除します。
最後に、<literal>logical</literal>は、更にロジカルデコーディングをサポートするのに必要な情報を追加します。
それぞれのレベルは、下位のレベルのログ出力を含んでいます。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
       <para>
<!--
        The <literal>minimal</literal> level generates the least WAL
        volume.  It logs no row information for permanent relations
        in transactions that create or
        rewrite them.  This can make operations much faster (see
        <xref linkend="populate-pitr"/>).  Operations that initiate this
        optimization include:
-->
<literal>minimal</literal>レベルでは、最小限のWALの量しか生成されません。
永続リレーションを作成あるいは書き換えるトランザクションの差分に関する情報は記録されません。
これにより、それらの操作が大幅に高速になります（<xref linkend="populate-pitr"/>を参照してください）。
この最適化が適用される操作には以下のものがあげられます。
        <simplelist>
         <member><command>ALTER ... SET TABLESPACE</command></member>
         <member><command>CLUSTER</command></member>
         <member><command>CREATE TABLE</command></member>
         <member><command>REFRESH MATERIALIZED VIEW</command>
<!--
         (without <option>CONCURRENTLY</option>)</member>
-->
         (<option>CONCURRENTLY</option>なし)</member>
         <member><command>REINDEX</command></member>
         <member><command>TRUNCATE</command></member>
        </simplelist>
<!--
        However, minimal WAL does not contain sufficient information for
        point-in-time recovery, so <literal>replica</literal> or
        higher must be used to enable continuous archiving
        (<xref linkend="guc-archive-mode"/>) and streaming binary replication.
        In fact, the server will not even start in this mode if
        <varname>max_wal_senders</varname> is non-zero.
        Note that changing <varname>wal_level</varname> to
        <literal>minimal</literal> makes previous base backups unusable
        for point-in-time recovery and standby servers.
-->
しかし、minimal WALにはポイントインタイムリカバリのための十分な情報が含まれていないので、<literal>replica</literal>以上を使って継続的アーカイブ(<xref linkend="guc-archive-mode"/>)とストリーミングバイナリレプリケーションを可能にしなければなりません。
実際、<varname>max_wal_senders</varname>が0以外の場合、サーバはこのモードで起動することさえありません。
<varname>wal_level</varname>を<literal>minimal</literal>に変更すると、以前のベースバックアップがポイントインタイムリカバリとスタンバイサーバで使用できなくなることに注意してください。
       </para>
       <para>
<!--
        In <literal>logical</literal> level, the same information is logged as
        with <literal>replica</literal>, plus information needed to
        extract logical change sets from the WAL. Using a level of
        <literal>logical</literal> will increase the WAL volume, particularly if many
        tables are configured for <literal>REPLICA IDENTITY FULL</literal> and
        many <command>UPDATE</command> and <command>DELETE</command> statements are
        executed.
-->
<literal>logical</literal>レベルでは、<literal>replica</literal>と同じ情報が記録されるのに加え、ロジカルチェンジセットをWALから取り出すのに必要な情報が追加されます。
<literal>logical</literal>を使うとWALの量が増えます。
とりわけ、多数のテーブルが<literal>REPLICA IDENTITY FULL</literal>と設定されていて(訳注: ALTER TABLE参照)、多くの<command>UPDATE</command>と<command>DELETE</command>文が実行される場合はこのことが言えます。
       </para>
       <para>
<!--
        In releases prior to 9.6, this parameter also allowed the
        values <literal>archive</literal> and <literal>hot_standby</literal>.
        These are still accepted but mapped to <literal>replica</literal>.
-->
9.6よりも前のリリースでは、このパラメータは<literal>archive</literal>と<literal>hot_standby</literal>という設定値も可能でした。
引き続きこれらも受け付けられますが、<literal>replica</literal>へとマップされます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-fsync" xreflabel="fsync">
      <term><varname>fsync</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>fsync</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>fsync</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If this parameter is on, the <productname>PostgreSQL</productname> server
        will try to make sure that updates are physically written to
        disk, by issuing <function>fsync()</function> system calls or various
        equivalent methods (see <xref linkend="guc-wal-sync-method"/>).
        This ensures that the database cluster can recover to a
        consistent state after an operating system or hardware crash.
-->
このパラメータがオンの場合、<productname>PostgreSQL</productname>サーバは<function>fsync()</function>システムコールを発行するか、もしくはこれに相当する方法（<xref linkend="guc-wal-sync-method"/>を参照）で、更新が物理的にディスクに確実に書き込まれるように試みます。
これは、オペレーティングシステムもしくはハードウェアがクラッシュした後、データベースクラスタを一貫した状態に復旧させることを確実にします。
       </para>

       <para>
<!--
        While turning off <varname>fsync</varname> is often a performance
        benefit, this can result in unrecoverable data corruption in
        the event of a power failure or system crash.  Thus it
        is only advisable to turn off <varname>fsync</varname> if
        you can easily recreate your entire database from external
        data.
-->
<varname>fsync</varname>を停止することはしばしば性能上の利益になるとは言っても、停電やクラッシュの際に回復不可能なデータ破壊になることがあります。
従って外部データから全てのデータベースを簡単に再構築できる場合のみ<varname>fsync</varname>を停止してください。
       </para>

       <para>
<!--
        Examples of safe circumstances for turning off
        <varname>fsync</varname> include the initial loading of a new
        database cluster from a backup file, using a database cluster
        for processing a batch of data after which the database
        will be thrown away and recreated,
        or for a read-only database clone which
        gets recreated frequently and is not used for failover.  High
        quality hardware alone is not a sufficient justification for
        turning off <varname>fsync</varname>.
-->
<varname>fsync</varname>を停止しても安全な状況の例としては、以下があげられます。
バックアップファイルから新しいデータベースクラスタにデータの初期読み込みを行う場合、バッチデータの処理のためにデータベースクラスタを使用し、その後データベースを削除して再構築する場合、読み込み専用のデータベースのクローンを頻繁に再作成するが、それをフェイルオーバーに使用しない場合、などです。
高性能なハードウェアであるからと言って、<varname>fsync</varname>を停止することは正当性を主張する十分な理由とはなりません。
       </para>

       <para>
<!--
        For reliable recovery when changing <varname>fsync</varname>
        off to on, it is necessary to force all modified buffers in the
        kernel to durable storage.  This can be done while the cluster
        is shutdown or while <varname>fsync</varname> is on by running <command>initdb
        &#45;-sync-only</command>, running <command>sync</command>, unmounting the
        file system, or rebooting the server.
-->
<varname>fsync</varname>を無効(off)から有効(on)に変更したときの信頼できるリカバリのためには、カーネル内の全ての変更されたバッファを恒久的ストレージに強制的に吐き出させることが必要です。
これは、クラスタがシャットダウンしている間、または<varname>fsync</varname>が有効のときに、<command>initdb --sync-only</command>を実行する、<command>sync</command>を実行する、ファイルシステムをアンマウントする、またはサーバを再起動することによって可能となります。
       </para>

       <para>
<!--
        In many situations, turning off <xref linkend="guc-synchronous-commit"/>
        for noncritical transactions can provide much of the potential
        performance benefit of turning off <varname>fsync</varname>, without
        the attendant risks of data corruption.
-->
多くの場合、重要でないトランザクションに対して<xref linkend="guc-synchronous-commit"/>を無効にすることにより、データ破壊という付随的危険性を伴うことなく、<varname>fsync</varname>を無効にすることで得られるであろう性能上のメリットの多くを得ることができます。
       </para>

       <para>
<!--
        <varname>fsync</varname> can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
        If you turn this parameter off, also consider turning off
        <xref linkend="guc-full-page-writes"/>.
-->
<varname>fsync</varname> は<filename>postgresql.conf</filename>ファイル、または、サーバのコマンドラインでのみ設定可能です。
このパラメータを無効にする場合、<xref linkend="guc-full-page-writes"/>も同時に無効にすることを検討してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-synchronous-commit" xreflabel="synchronous_commit">
      <term><varname>synchronous_commit</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>synchronous_commit</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>synchronous_commit</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies how much WAL processing must complete before
        the database server returns a <quote>success</quote>
        indication to the client.  Valid values are
        <literal>remote_apply</literal>, <literal>on</literal>
        (the default), <literal>remote_write</literal>,
        <literal>local</literal>, and <literal>off</literal>.
-->
トランザクションのコミットがクライアントに<quote>成功</quote>の報告を返す前に、どれだけのWAL処理を完了しなければならないかを指定をします。
有効な値は<literal>remote_apply</literal>、<literal>on</literal>(デフォルト)、<literal>remote_write</literal>、<literal>local</literal>、<literal>off</literal>です。
       </para>

       <para>
<!--
        If <varname>synchronous_standby_names</varname> is empty,
        the only meaningful settings are <literal>on</literal> and
        <literal>off</literal>;  <literal>remote_apply</literal>,
        <literal>remote_write</literal> and <literal>local</literal>
        all provide the same local synchronization level
        as <literal>on</literal>.  The local behavior of all
        non-<literal>off</literal> modes is to wait for local flush of WAL
        to disk.  In <literal>off</literal> mode, there is no waiting,
        so there can be a delay between when success is reported to the
        client and when the transaction is later guaranteed to be safe
        against a server crash.  (The maximum
        delay is three times <xref linkend="guc-wal-writer-delay"/>.)  Unlike
        <xref linkend="guc-fsync"/>, setting this parameter to <literal>off</literal>
        does not create any risk of database inconsistency: an operating
        system or database crash might
        result in some recent allegedly-committed transactions being lost, but
        the database state will be just the same as if those transactions had
        been aborted cleanly.  So, turning <varname>synchronous_commit</varname> off
        can be a useful alternative when performance is more important than
        exact certainty about the durability of a transaction.  For more
        discussion see <xref linkend="wal-async-commit"/>.
-->
<varname>synchronous_standby_names</varname>が空文字なら、意味のある設定は<literal>on</literal>と<literal>off</literal>だけです。
<literal>remote_apply</literal>、<literal>remote_write</literal>、<literal>local</literal>はすべて<literal>on</literal>と同じ同期レベルを提供します。
<literal>off</literal>モード以外のローカルの振る舞いは、WALがディスクにローカルにフラッシュされるのを待ちます。
<literal>off</literal>モードでは待ちはありません。
ですから、クライアントに成功が報告されてから、トランザクションが後でサーバクラッシュに対して安全が保証されるまでの間に遅延が生じる可能性があります。
（遅延は最大で<xref linkend="guc-wal-writer-delay"/>の3倍です。）
<xref linkend="guc-fsync"/>と違って、このパラメータを<literal>off</literal>にすることでデータベースの一貫性が損なわれるリスクはありません。
オペレーティングシステムやデータベースのクラッシュにより最近コミットされたということになっているトランザクションの一部が失われる可能性がありますが、これらのトランザクションが正常にアボートされた時とデータベースの状態は変わりません。
したがって、<varname>synchronous_commit</varname>のオフによる調整は、トランザクションの耐障害性を確実にするよりも性能が重要な場合の有用な代替案となるかも知れません。
詳細は<xref linkend="wal-async-commit"/>を参照してください。
       </para>

       <para>
<!--
        If <xref linkend="guc-synchronous-standby-names"/> is non-empty,
        <varname>synchronous_commit</varname> also controls whether
        transaction commits will wait for their WAL records to be
        processed on the standby server(s).
-->
<xref linkend="guc-synchronous-standby-names"/>が空文字でない場合は、<varname>synchronous_commit</varname>は、WALレコードが、スタンバイサーバに複製されるまでトランザクションコミットを待機するか否かも制御します。
       </para>

       <para>
<!--
        When set to <literal>remote_apply</literal>, commits will wait
        until replies from the current synchronous standby(s) indicate they
        have received the commit record of the transaction and applied
        it, so that it has become visible to queries on the standby(s),
        and also written to durable storage on the standbys.  This will
        cause much larger commit delays than previous settings since
        it waits for WAL replay.  When set to <literal>on</literal>,
        commits wait until replies
        from the current synchronous standby(s) indicate they have received
        the commit record of the transaction and flushed it to durable storage.  This
        ensures the transaction will not be lost unless both the primary and
        all synchronous standbys suffer corruption of their database storage.
        When set to <literal>remote_write</literal>, commits will wait until replies
        from the current synchronous standby(s) indicate they have
        received the commit record of the transaction and written it to
        their file systems. This setting ensures data preservation if a standby instance of
        <productname>PostgreSQL</productname> crashes, but not if the standby
        suffers an operating-system-level crash because the data has not
        necessarily reached durable storage on the standby.
        The setting <literal>local</literal> causes commits to wait for
        local flush to disk, but not for replication.  This is usually not
        desirable when synchronous replication is in use, but is provided for
        completeness.
-->
<literal>remote_apply</literal>に設定すると、現在の同期スタンバイがトランザクションのコミットレコードを受け取って適用し、スタンバイ上で発行されたクエリから見えるようになり、スタンバイ上の永続的な記憶装置に書き込まれたことを報告するまでコミットは待機します。
WALのリプレイを待つので、今までの設定に比べるとこの設定によってずっと大きなコミットの遅延が発生します。
<literal>on</literal>に設定すると、現在の同期スタンバイがトランザクションのコミットレコードを受け取り、永続的な記憶装置にフラッシュしたことを報告するまでコミットは待機します。
このモードでは、プライマリおよびすべての同期スタンバイがデータベース記憶装置の故障を被った場合を除いて、トランザクションが失われないことが保証されます。
<literal>remote_write</literal>に設定すると、現在の同期スタンバイがトランザクションのコミットレコードを受け取り、スタンバイのファイルシステムに書き出したことを報告するまでコミットは待機します。
この設定は仮に<productname>PostgreSQL</productname>のスタンバイインスタンスがクラッシュしたとしても、データ保護を保証するのに充分です。
しかし、スタンバイがオペレーティングシステムのレベルでクラッシュした場合はこの限りではありません。
データが必ずしもスタンバイの永続的な記憶装置に到達したとは言えないからです。
最後に、<literal>local</literal>設定は、コミットがローカルにディスクにフラッシュされるまで待機しますが、レプリケーションされるまでは待機しません。
これは通常同期レプリケーションが使用されている場合は望ましい設定ではありませんが、完全さのために提供されています。
       </para>

       <para>
<!--
        This parameter can be changed at any time; the behavior for any
        one transaction is determined by the setting in effect when it
        commits.  It is therefore possible, and useful, to have some
        transactions commit synchronously and others asynchronously.
        For example, to make a single multistatement transaction commit
        asynchronously when the default is the opposite, issue <command>SET
        LOCAL synchronous_commit TO OFF</command> within the transaction.
-->
このパラメータはいつでも変更可能です。
どのトランザクションの動作も、コミット時に有効であった設定によって決まります。
したがって、一部のトランザクションのコミットを同期的に、その他を非同期的にすることが可能で、かつ、有用です。
例えば、デフォルトが同期コミットの場合に複数文トランザクションを一つだけ非同期にコミットさせるためには、トランザクション内で<command>SET LOCAL synchronous_commit TO OFF</command>を発行します。
       </para>

       <para>
<!--
        <xref linkend="synchronous-commit-matrix"/> summarizes the
        capabilities of the <varname>synchronous_commit</varname> settings.
-->
<varname>synchronous_commit</varname>設定の機能のまとめが<xref linkend="synchronous-commit-matrix"/>にあります。
       </para>

       <table id="synchronous-commit-matrix">
<!--
        <title>synchronous_commit Modes</title>
-->
        <title>synchronous_commitモード</title>
        <tgroup cols="5">
         <colspec colname="col1" colwidth="1.5*"/>
         <colspec colname="col2" colwidth="1*"/>
         <colspec colname="col3" colwidth="1*"/>
         <colspec colname="col4" colwidth="1*"/>
         <colspec colname="col5" colwidth="1*"/>
         <thead>
          <row>
<!--
           <entry>synchronous_commit setting</entry>
-->
           <entry>synchronous_commit設定</entry>
<!--
           <entry>local durable commit</entry>
-->
           <entry>localの永続的なコミット</entry>
<!--
           <entry>standby durable commit after PG crash</entry>
-->
           <entry>PGがクラッシュした後のスタンバイの永続的なコミット</entry>
<!--
           <entry>standby durable commit after OS crash</entry>
-->
           <entry>OSがクラッシュした後のスタンバイの永続的なコミット</entry>
<!--
           <entry>standby query consistency</entry>
-->
           <entry>スタンバイのクエリの一貫性</entry>
          </row>
         </thead>

         <tbody>

          <row>
           <entry>remote_apply</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
          </row>

          <row>
           <entry>on</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
           <entry align="center"></entry>
          </row>

          <row>
           <entry>remote_write</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
           <entry align="center"></entry>
           <entry align="center"></entry>
          </row>

          <row>
           <entry>local</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
           <entry align="center"></entry>
           <entry align="center"></entry>
           <entry align="center"></entry>
          </row>

          <row>
           <entry>off</entry>
           <entry align="center"></entry>
           <entry align="center"></entry>
           <entry align="center"></entry>
           <entry align="center"></entry>
          </row>

         </tbody>
        </tgroup>
       </table>

      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-sync-method" xreflabel="wal_sync_method">
      <term><varname>wal_sync_method</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>wal_sync_method</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_sync_method</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Method used for forcing WAL updates out to disk.
        If <varname>fsync</varname> is off then this setting is irrelevant,
        since WAL file updates will not be forced out at all.
        Possible values are:
-->
WALの更新をディスクへ強制するのに使用される方法です。
<varname>fsync</varname>がオフの場合この設定は役に立ちません。と言うのはWALファイルの更新が全く強制されないからです。取り得る値は以下のものです。
       </para>
       <itemizedlist>
        <listitem>
        <para>
<!--
         <literal>open_datasync</literal> (write WAL files with <function>open()</function> option <symbol>O_DSYNC</symbol>)
-->
<literal>open_datasync</literal>（<function>open()</function>のオプション<symbol>O_DSYNC</symbol>でWALファイルに書き込む）
        </para>
        </listitem>
        <listitem>
        <para>
<!--
         <literal>fdatasync</literal> (call <function>fdatasync()</function> at each commit)
-->
<literal>fdatasync</literal>（コミット毎に<function>fdatasync()</function>を呼び出す）
        </para>
        </listitem>
        <listitem>
        <para>
<!--
         <literal>fsync</literal> (call <function>fsync()</function> at each commit)
-->
<literal>fsync</literal>（コミット毎に<function>fsync()</function>を呼び出す）
        </para>
        </listitem>
        <listitem>
        <para>
<!--
         <literal>fsync_writethrough</literal> (call <function>fsync()</function> at each commit, forcing write-through of any disk write cache)
-->
<literal>fsync_writethrough</literal>（すべてのディスク書き込みキャッシュをライトスルーさせるため、コミット毎に<function>fsync()</function>を呼び出す）
        </para>
        </listitem>
        <listitem>
        <para>
<!--
         <literal>open_sync</literal> (write WAL files with <function>open()</function> option <symbol>O_SYNC</symbol>)
-->
<literal>open_sync</literal>（<function>open()</function>のオプション<symbol>O_SYNC</symbol>でWALファイルに書き込む）
        </para>
        </listitem>
       </itemizedlist>
       <para>
<!--
        Not all of these choices are available on all platforms.
        The default is the first method in the above list that is supported
        by the platform, except that <literal>fdatasync</literal> is the default on
        Linux and FreeBSD.  The default is not necessarily ideal; it might be
        necessary to change this setting or other aspects of your system
        configuration in order to create a crash-safe configuration or
        achieve optimal performance.
        These aspects are discussed in <xref linkend="wal-reliability"/>.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
全てのプラットフォームでこれら全ての選択肢が使えるわけではありません。
デフォルトは、上のリストのプラットフォームでサポートされるものの最初に列挙されているものです。
ただしLinuxとFreeBSDでは<literal>fdatasync</literal>がデフォルトです。
デフォルトは必ずしも理想的なものではありません。
クラッシュに適応した構成にする、あるいはアーカイブの最適性能を導くためには、この設定あるいはシステム構成の他の部分を変更することが必要かもしれません。
これらの側面は <xref linkend="wal-reliability"/>で解説されます。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-full-page-writes" xreflabel="full_page_writes">
      <term><varname>full_page_writes</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>full_page_writes</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>full_page_writes</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When this parameter is on, the <productname>PostgreSQL</productname> server
        writes the entire content of each disk page to WAL during the
        first modification of that page after a checkpoint.
        This is needed because
        a page write that is in process during an operating system crash might
        be only partially completed, leading to an on-disk page
        that contains a mix of old and new data.  The row-level change data
        normally stored in WAL will not be enough to completely restore
        such a page during post-crash recovery.  Storing the full page image
        guarantees that the page can be correctly restored, but at the price
        of increasing the amount of data that must be written to WAL.
        (Because WAL replay always starts from a checkpoint, it is sufficient
        to do this during the first change of each page after a checkpoint.
        Therefore, one way to reduce the cost of full-page writes is to
        increase the checkpoint interval parameters.)
-->
このパラメータが有効の場合、<productname>PostgreSQL</productname>サーバは、チェックポイントの後にそのページが最初に変更された過程で、ディスクページの全ての内容をWALに書き込みます。
オペレーティングシステムがクラッシュした時に進行中のページ書き込みは途中までしか終わっていない可能性があり、ディスク上のページが古いデータと新しいデータが混在する状態になるため、この機能が必要です。
通常WAL内に保存される行レベルの変更データは、クラッシュ後のリカバリ時にこうしたページを完全に復旧させるには不十分です。
完全なページイメージを保存することにより、ページを正しく復旧できることを保証しますが、その代わりに、WALに書き込まなければならないデータ量が増加することになります。
（WAL再生は常にチェックポイントから始まるため、チェックポイント後のそれぞれのページの最初の変更時にこれを行えば十分です。
従って、完全ページ書き出しのコストを低減する方法の1つは、チェックポイント間隔パラメータを大きくすることです。）
       </para>

       <para>
<!--
        Turning this parameter off speeds normal operation, but
        might lead to either unrecoverable data corruption, or silent
        data corruption, after a system failure. The risks are similar to turning off
        <varname>fsync</varname>, though smaller, and it should be turned off
        only based on the same circumstances recommended for that parameter.
-->
このパラメータを無効にすると、通常の操作速度が上がりますが、システム障害後に、回復不能なデータ破損、あるいは警告なしのデータ損壊をもたらすかもしれません。
このリスクは小さいながら<varname>fsync</varname>を無効にした場合と似ています。そしてその<varname>fsync</varname>に対して推奨されている同一の状況に基づく限りにおいて停止されなければなりません。
       </para>

       <para>
<!--
        Turning off this parameter does not affect use of
        WAL archiving for point-in-time recovery (PITR)
        (see <xref linkend="continuous-archiving"/>).
-->
このパラメータを無効にしてもポイントインタイムリカバリ（PITR）用のWALアーカイブの使用に影響ありません（ <xref linkend="continuous-archiving"/>を参照してください）。
       </para>

       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
        The default is <literal>on</literal>.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-log-hints" xreflabel="wal_log_hints">
      <term><varname>wal_log_hints</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_log_hints</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_log_hints</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When this parameter is <literal>on</literal>, the <productname>PostgreSQL</productname>
        server writes the entire content of each disk page to WAL during the
        first modification of that page after a checkpoint, even for
        non-critical modifications of so-called hint bits.
-->
このパラメータが<literal>on</literal>の場合、<productname>PostgreSQL</productname>サーバはチェックポイント後にはじめてページを変更する際に、ディスクページの全内容をWALに書き出します。
これは、あまり重要でない、ヒントビットと呼ばれるものに対する変更にさえ当てはまります。
       </para>

       <para>
<!--
        If data checksums are enabled, hint bit updates are always WAL-logged
        and this setting is ignored. You can use this setting to test how much
        extra WAL-logging would occur if your database had data checksums
        enabled.
-->
データチェックサムが有効であると、ヒントビットの更新は常にWALにログされ、この設定パラメータは無視されます。この設定パラメータを使って、データチェックサムが有効なときにどれだけのWALログは余計に書きだされるかをテストすることができます。
       </para>

       <para>
<!--
        This parameter can only be set at server start. The default value is <literal>off</literal>.
-->
このパラメータはサーバ起動時のみ設定可能です。
デフォルト値は<literal>off</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-compression" xreflabel="wal_compression">
      <term><varname>wal_compression</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>wal_compression</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_compression</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter enables compression of WAL using the specified
        compression method.
        When enabled, the <productname>PostgreSQL</productname>
        server compresses full page images written to WAL (e.g. when
        <xref linkend="guc-full-page-writes"/> is on, during a base backup,
        etc.).
        A compressed page image will be decompressed during WAL replay.
        The supported methods are <literal>pglz</literal>,
        <literal>lz4</literal> (if <productname>PostgreSQL</productname>
        was compiled with <option>&#45;-with-lz4</option>) and
        <literal>zstd</literal> (if <productname>PostgreSQL</productname>
        was compiled with <option>&#45;-with-zstd</option>).
        The default value is <literal>off</literal>.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
《マッチ度[84.785436]》このパラメータは、指定された圧縮方式を使用したWALの圧縮を有効にします。
有効にすると、<productname>PostgreSQL</productname>サーバは<xref linkend="guc-full-page-writes"/>がオンの時またはベースバックアップ中にWALに書き込まれた全ページイメージを圧縮します。
圧縮されたページイメージはWAL再生中に伸長されます。
サポートされている方法は<literal>pglz</literal>、<literal>lz4</literal>(<productname>PostgreSQL</productname>が<option>--with-lz4</option>でコンパイルされた場合)および<literal>zstd</literal>(<productname>PostgreSQL</productname>が<option>--with-zstd</option>でコンパイルされた場合)です。
デフォルト値は<literal>off</literal>です。
スーパーユーザと適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更できます。
《機械翻訳》このパラメータは指定された圧縮メソッドを使用したWALの圧縮を有効にします。
有効になっている場合、<productname>PostgreSQL</productname>サーバはWALに書き込まれたフルページイメージを圧縮します。
例えば<xref linkend="guc-full-page-writes"/>が有効な場合やベースバックアップ中など。
圧縮されたページイメージはWALリプレイ中に展開されます。
サポートされている方法は<literal>pglz</literal>,<literal>lz4</literal><productname>PostgreSQL</productname><option>--with-lz4</option>でコンパイルされた場合と<literal>zstd</literal><productname>PostgreSQL</productname><option>--with-zstd</option>でコンパイルされた場合です。
デフォルト値は<literal>off</literal>です。
スーパーユーザと適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>

       <para>
<!--
        Enabling compression can reduce the WAL volume without
        increasing the risk of unrecoverable data corruption,
        but at the cost of some extra CPU spent on the compression during
        WAL logging and on the decompression during WAL replay.
-->
このパラメータを有効にすると、回復不可能なデータ破壊のリスクを増やすこと無しにWALの量を減らすことができます。
しかし、WALロギングの際の圧縮のため、またWALリプレイの際には伸張のために余分なCPUを使用するというコストが発生します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-init-zero" xreflabel="wal_init_zero">
      <term><varname>wal_init_zero</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_init_zero</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_init_zero</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If set to <literal>on</literal> (the default), this option causes new
        WAL files to be filled with zeroes.  On some file systems, this ensures
        that space is allocated before we need to write WAL records.  However,
        <firstterm>Copy-On-Write</firstterm> (COW) file systems may not benefit
        from this technique, so the option is given to skip the unnecessary
        work.  If set to <literal>off</literal>, only the final byte is written
        when the file is created so that it has the expected size.
-->
このオプションが<literal>on</literal>（デフォルト）に設定されると、新しいWALファイルはゼロで初期化されます。
システムによっては、このことによってWALレコードを書く必要が出てくる前にスペースが割り当てられることを保証します。
しかし、<firstterm>Copy-On-Write</firstterm> (COW)ファイルシステムではこの技術は利点がないかもしれず、このオプションはスキップできるようになっています。
<literal>off</literal>に設定すると、ファイルを作る時に期待する大きさになるように最後のバイトだけが書かれます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-recycle" xreflabel="wal_recycle">
      <term><varname>wal_recycle</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_recycle</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_recycle</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If set to <literal>on</literal> (the default), this option causes WAL
        files to be recycled by renaming them, avoiding the need to create new
        ones.  On COW file systems, it may be faster to create new ones, so the
        option is given to disable this behavior.
-->
このオプションが<literal>on</literal>（デフォルト）に設定されると、新しくファイルを作るのを避けるために、名前を変えてWALファイルが再利用されます。
COWファイルシステムでは、新しいファイルを作るほうが速いかも知れないので、この挙動を無効にできるようにオプションとなっています。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-buffers" xreflabel="wal_buffers">
      <term><varname>wal_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_buffers</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_buffers</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The amount of shared memory used for WAL data that has not yet been
        written to disk.  The default setting of -1 selects a size equal to
        1/32nd (about 3%) of <xref linkend="guc-shared-buffers"/>, but not less
        than <literal>64kB</literal> nor more than the size of one WAL
        segment, typically <literal>16MB</literal>.  This value can be set
        manually if the automatic choice is too large or too small,
        but any positive value less than <literal>32kB</literal> will be
        treated as <literal>32kB</literal>.
        If this value is specified without units, it is taken as WAL blocks,
        that is <symbol>XLOG_BLCKSZ</symbol> bytes, typically 8kB.
        This parameter can only be set at server start.
-->
未だディスクに書き込まれていないWALデータに対して使用される共有メモリ容量です。
デフォルトの設定である-1は、<xref linkend="guc-shared-buffers"/>の1/32（約3%）の容量に等しい大きさを選択します。
しかし、<literal>64kB</literal>未満ではなく、かつ典型的に<literal>16MB</literal>であるWALセグメントの大きさを超えることはありません。
もし、自動設定による選択が大きすぎたり、小さすぎる場合この値は手作業で設定可能です。
しかし、<literal>32kB</literal>未満のどんな正の値であっても、<literal>32kB</literal>として取り扱われます。
この値が単位なしで指定された場合は、WALブロック単位であるとみなします。すなわち、<symbol>XLOG_BLCKSZ</symbol>バイト、一般的には8kBです。
このパラメータはサーバ起動時のみ設定可能です。
       </para>

       <para>
<!--
        The contents of the WAL buffers are written out to disk at every
        transaction commit, so extremely large values are unlikely to
        provide a significant benefit.  However, setting this value to at
        least a few megabytes can improve write performance on a busy
        server where many clients are committing at once.  The auto-tuning
        selected by the default setting of -1 should give reasonable
        results in most cases.
-->
WALバッファの内容はトランザクションのコミット毎にディスクに書き込まれます。
したがって、極端に大きな値は有意な効果を期待できません。
しかし、この値を数メガバイトに設定することにより、多くのクライアントが同時にコミットするトラフィック量の多いサーバでは書き込み性能が向上します。
デフォルト設定の-1で選択される自動チューニングによると、ほとんどの場合妥当な結果が得られます。
       </para>

      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-writer-delay" xreflabel="wal_writer_delay">
      <term><varname>wal_writer_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_writer_delay</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_writer_delay</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
      <para>
<!--
        Specifies how often the WAL writer flushes WAL, in time terms.
        After flushing WAL the writer sleeps for the length of time given
        by <varname>wal_writer_delay</varname>, unless woken up sooner
        by an asynchronously committing transaction. If the last flush
        happened less than <varname>wal_writer_delay</varname> ago and less
        than <varname>wal_writer_flush_after</varname> worth of WAL has been
        produced since, then WAL is only written to the operating system, not
        flushed to disk.
        If this value is specified without units, it is taken as milliseconds.
        The default value is 200 milliseconds (<literal>200ms</literal>).  Note that
        on some systems, the effective resolution of sleep delays is 10
        milliseconds; setting <varname>wal_writer_delay</varname> to a value that is
        not a multiple of 10 might have the same results as setting it to the
        next higher multiple of 10. This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
-->
WALライタがWALをフラッシュする頻度を時間で指定します。
WALをフラッシュしたあと、非同期コミットしているトランザクションに起こされない限り、<varname>wal_writer_delay</varname>ミリ秒待機します。
最後のフラッシュが過去<varname>wal_writer_delay</varname>以内に行われ、かつそれ以降<varname>wal_writer_flush_after</varname>相当のWALが生成されていない場合は、WALはオペレーティングシステムに書き込まれますが、ディスクにはフラッシュされません。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
デフォルト値は200ミリ秒（<literal>200ms</literal>）です。
ある種のシステムでは、待機間隔の実質的な分解能は10ミリ秒です。
10の倍数以外の値を<varname>wal_writer_delay</varname>に設定しても、その次に大きい10の倍数を設定した場合と同じ結果となります。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-writer-flush-after" xreflabel="wal_writer_flush_after">
      <term><varname>wal_writer_flush_after</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_writer_flush_after</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_writer_flush_after</varname> 設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
      <para>
<!--
        Specifies how often the WAL writer flushes WAL, in volume terms.
        If the last flush happened less
        than <varname>wal_writer_delay</varname> ago and less
        than <varname>wal_writer_flush_after</varname> worth of WAL has been
        produced since, then WAL is only written to the operating system, not
        flushed to disk.  If <varname>wal_writer_flush_after</varname> is set
        to <literal>0</literal> then WAL data is always flushed immediately.
        If this value is specified without units, it is taken as WAL blocks,
        that is <symbol>XLOG_BLCKSZ</symbol> bytes, typically 8kB.
        The default is <literal>1MB</literal>.
        This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
-->
WALライタがWALをフラッシュする頻度を量で指定します。
最後のフラッシュが過去<varname>wal_writer_delay</varname>以内に行われ、かつそれ以降<varname>wal_writer_flush_after</varname>相当のWALが生成されていない場合は、WALはオペレーティングシステムに書き込まれますが、ディスクにはフラッシュされません。
<varname>wal_writer_flush_after</varname>が<literal>0</literal>に設定されている場合は、WALデータが書かれるたびにWALが即時にフラッシュされます。
この値が単位なしで指定された場合は、WALブロック単位であるとみなします。すなわち、<symbol>XLOG_BLCKSZ</symbol>バイト、一般的には8kBです。
デフォルト値は<literal>1MB</literal>です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-skip-threshold" xreflabel="wal_skip_threshold">
      <term><varname>wal_skip_threshold</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_skip_threshold</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_skip_threshold</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When <varname>wal_level</varname> is <literal>minimal</literal> and a
        transaction commits after creating or rewriting a permanent relation,
        this setting determines how to persist the new data.  If the data is
        smaller than this setting, write it to the WAL log; otherwise, use an
        fsync of affected files.  Depending on the properties of your storage,
        raising or lowering this value might help if such commits are slowing
        concurrent transactions.  If this value is specified without units, it
        is taken as kilobytes.  The default is two megabytes
        (<literal>2MB</literal>).
-->
<varname>wal_level</varname>が<literal>minimal</literal>で、トランザクションのコミットが永続リレーションを作るかあるいは書き換えた場合に、この設定は新しいデータをどのように永続させるかを決定します。
データがこの設定よりも少なければ、WALログに書きます。そうでなければ、影響のあるファイルに対してfsyncを使用します。
そのようなコミットが現在のトランザクションを低速化しているようであれば、使用する記憶装置の特性によってはこの値を増減することが役に立つかも知れません。
この値が単位なしに指定されるとキロバイトであると見なします。
デフォルトは2メガバイト(<literal>2MB</literal>)です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-commit-delay" xreflabel="commit_delay">
      <term><varname>commit_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>commit_delay</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>commit_delay</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Setting <varname>commit_delay</varname> adds a time delay
        before a WAL flush is initiated.  This can improve
        group commit throughput by allowing a larger number of transactions
        to commit via a single WAL flush, if system load is high enough
        that additional transactions become ready to commit within the
        given interval.  However, it also increases latency by up to the
        <varname>commit_delay</varname> for each WAL
        flush.  Because the delay is just wasted if no other transactions
        become ready to commit, a delay is only performed if at least
        <varname>commit_siblings</varname> other transactions are active
        when a flush is about to be initiated.  Also, no delays are
        performed if <varname>fsync</varname> is disabled.
        If this value is specified without units, it is taken as microseconds.
        The default <varname>commit_delay</varname> is zero (no delay).
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
<varname>commit_delay</varname>を設定することにより、WALフラッシュを開始する前の時間遅延が追加されます。
このことにより、もし追加のトランザクションが与えられた時間間隔内でコミットが可能になるほどシステム負荷が充分に高い場合、一回のWALフラッシュでより多くの数のトランザクションをコミットできるようになり、コミット群のスループットを改善できます。
とは言っても、それぞれのWALフラッシュに対して最大<varname>commit_delay</varname>の待ち時間の増加をきたします。
コミットの準備が完了したトランザクションが他に存在しない場合、遅延は無駄になるため、遅延はフラッシュが開始されようとしている時点で少なくとも<varname>commit_siblings</varname>だけのトランザクションが活動している場合にだけ機能します。
同様に、<varname>fsync</varname>が無効の場合も遅延は機能しません。
この値が単位なしで指定された場合は、マイクロ秒単位であるとみなします。
デフォルトの<varname>commit_delay</varname>はゼロ（遅延無し）です。
スーパーユーザと適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更できます。
       </para>
       <para>
<!--
        In <productname>PostgreSQL</productname> releases prior to 9.3,
        <varname>commit_delay</varname> behaved differently and was much
        less effective: it affected only commits, rather than all WAL flushes,
        and waited for the entire configured delay even if the WAL flush
        was completed sooner.  Beginning in <productname>PostgreSQL</productname> 9.3,
        the first process that becomes ready to flush waits for the configured
        interval, while subsequent processes wait only until the leader
        completes the flush operation.
-->
9.3より前の<productname>PostgreSQL</productname>では、<varname>commit_delay</varname>の振る舞いは異なっており、あまり効果がありませんでした。
全てのWALフラッシュではなく、コミットだけに影響していました。また、そしてWALフラッシュが早めに完了しても設定された遅延分待機していました。
<productname>PostgreSQL</productname> 9.3以降では、フラッシュの準備が整った最初のプロセスが設定値分待機し、後続のプロセスは最初のプロセスがフラッシュ操作を完了するまでの間だけ待機をします。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-commit-siblings" xreflabel="commit_siblings">
      <term><varname>commit_siblings</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>commit_siblings</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>commit_siblings</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Minimum number of concurrent open transactions to require
        before performing the <varname>commit_delay</varname> delay. A larger
        value makes it more probable that at least one other
        transaction will become ready to commit during the delay
        interval. The default is five transactions.
-->
<varname>commit_delay</varname>の遅延を実行するときに必要とされる同時に開いているトランザクションの最小数です。
より大きい値にすると、遅延周期の間に、少なくとも1つの他のトランザクションのコミットの準備が整う確率が高くなります。
デフォルトは5トランザクションです。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-wal-checkpoints">
<!--
     <title>Checkpoints</title>
-->
     <title>チェックポイント</title>

    <variablelist>
     <varlistentry id="guc-checkpoint-timeout" xreflabel="checkpoint_timeout">
      <term><varname>checkpoint_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>checkpoint_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>checkpoint_timeout</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Maximum time between automatic WAL checkpoints.
        If this value is specified without units, it is taken as seconds.
        The valid range is between 30 seconds and one day.
        The default is five minutes (<literal>5min</literal>).
        Increasing this parameter can increase the amount of time needed
        for crash recovery.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
自動的WALチェックポイント間の最大間隔を指定します。
この値が単位なしで指定された場合は、秒単位であるとみなします。
有効な範囲は、30秒から1日の間です。
デフォルトは5分（<literal>5min</literal>）です。
このパラメータを増やすと、クラッシュリカバリで必要となる時間が増加します。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-completion-target" xreflabel="checkpoint_completion_target">
      <term><varname>checkpoint_completion_target</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>checkpoint_completion_target</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>checkpoint_completion_target</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the target of checkpoint completion, as a fraction of
        total time between checkpoints. The default is 0.9, which spreads the
        checkpoint across almost all of the available interval, providing fairly
        consistent I/O load while also leaving some time for checkpoint
        completion overhead.  Reducing this parameter is not recommended because
        it causes the checkpoint to complete faster.  This results in a higher
        rate of I/O during the checkpoint followed by a period of less I/O between
        the checkpoint completion and the next scheduled checkpoint.  This
        parameter can only be set in the <filename>postgresql.conf</filename> file
        or on the server command line.
-->
チェックポイントの間の時間のうち、どの程度の割合を使うかをチェックポイントの完了目標として指定します。
デフォルトは0.9で、可能な限りの間隔のほとんどにチェックポイントを拡散し、かなり一定のI/O負荷をもたらしますが、チェックポイントが完了するにあたってオーバーヘッドをもたらします。
チェックポイントの完了を早くするので、このパラメータを小さくするのはお勧めできません。
これにより、チェックポイント中はI/Oの割合が大きくなり、チェックポイントの完了から次のチェックポイントまでの間はより少ないI/Oとなります。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-flush-after" xreflabel="checkpoint_flush_after">
      <term><varname>checkpoint_flush_after</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>checkpoint_flush_after</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>checkpoint_flush_after</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Whenever more than this amount of data has been
        written while performing a checkpoint, attempt to force the
        OS to issue these writes to the underlying storage.  Doing so will
        limit the amount of dirty data in the kernel's page cache, reducing
        the likelihood of stalls when an <function>fsync</function> is issued at the end of the
        checkpoint, or when the OS writes data back in larger batches in the
        background.  Often that will result in greatly reduced transaction
        latency, but there also are some cases, especially with workloads
        that are bigger than <xref linkend="guc-shared-buffers"/>, but smaller
        than the OS's page cache, where performance might degrade.  This
        setting may have no effect on some platforms.
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The valid range is
        between <literal>0</literal>, which disables forced writeback,
        and <literal>2MB</literal>.  The default is <literal>256kB</literal> on
        Linux, <literal>0</literal> elsewhere.  (If <symbol>BLCKSZ</symbol> is not
        8kB, the default and maximum values scale proportionally to it.)
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
チェックポイント実行中にこのデータ量よりも多く書く度に、OSが記憶装置に書き込むことを強制しようとします。
このことにより、カーネルのページキャッシュが持つダーティデータの量を一定量に制限し、チェックポイントの最後に<function>fsync</function>が実行される際、あるいはOSがバックグラウンドでデータを大きな塊で書き出す際に性能の急激な低下を招く可能性を減らします。
多くの場合これによってトランザクションの遅延が大幅に少なくなりますが、あるケース、特にワークロードが<xref linkend="guc-shared-buffers"/>よりも大きく、OSのページキャッシュよりも小さい時には性能が低下するかもしれません。
この設定が無効なプラットフォームがあります。
この値が単位なしで指定された場合は、ブロック単位であるとみなします。すなわち、<symbol>BLCKSZ</symbol>バイト、一般的には8kBです。
有効な設定値は、この強制書き込み機能が無効になる<literal>0</literal>から、<literal>2MB</literal>までです。
デフォルト値は、Linuxでは<literal>256kB</literal>で、それ以外は<literal>0</literal>です。
（<symbol>BLCKSZ</symbol>が8kbでなければ、この設定のデフォルト値と最大値が<symbol>BLCKSZ</symbol>に比例して変更されます。）
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-warning" xreflabel="checkpoint_warning">
      <term><varname>checkpoint_warning</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>checkpoint_warning</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>checkpoint_warning</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Write a message to the server log if checkpoints caused by
        the filling of WAL segment files happen closer together
        than this amount of time (which suggests that
        <varname>max_wal_size</varname> ought to be raised).
        If this value is specified without units, it is taken as seconds.
        The default is 30 seconds (<literal>30s</literal>).
        Zero disables the warning.
        No warnings will be generated if <varname>checkpoint_timeout</varname>
        is less than <varname>checkpoint_warning</varname>.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
WALセグメントファイルが溢れることが原因で起きるチェックポイントが、ここで指定した時間よりも短い間隔で発生したとき、サーバログにメッセージを書き出します
（これは、<varname>max_wal_size</varname>を増やす必要があることを示唆しています）。
この値が単位なしで指定された場合は、秒単位であるとみなします。
デフォルトは30秒（<literal>30s</literal>）です。
零の場合は警告を出しません。
<varname>checkpoint_timeout</varname>が<varname>checkpoint_warning</varname>より小さい場合は警告を出しません。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-wal-size" xreflabel="max_wal_size">
      <term><varname>max_wal_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_wal_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_wal_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Maximum size to let the WAL grow during automatic
        checkpoints. This is a soft limit; WAL size can exceed
        <varname>max_wal_size</varname> under special circumstances, such as
        heavy load, a failing <varname>archive_command</varname> or <varname>archive_library</varname>, or a high
        <varname>wal_keep_size</varname> setting.
        If this value is specified without units, it is taken as megabytes.
        The default is 1 GB.
        Increasing this parameter can increase the amount of time needed for
        crash recovery.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
自動WALチェックポイントの際にWALが増加する最大サイズです。
これはソフトリミットです。特別な状況下、たとえば高負荷、<varname>archive_command</varname>の失敗、<varname>archive_library</varname>の失敗、<varname>wal_keep_size</varname>が大きな値に設定されている、などの時には、WALサイズは<varname>max_wal_size</varname>を超えることがあります。
この値が単位なしで指定された場合は、メガバイト単位であるとみなします。
デフォルトは1GBです。
このパラメータを大きくすると、クラッシュリカバリに必要な時間が長くなります。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-min-wal-size" xreflabel="min_wal_size">
      <term><varname>min_wal_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>min_wal_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>min_wal_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        As long as WAL disk usage stays below this setting, old WAL files are
        always recycled for future use at a checkpoint, rather than removed.
        This can be used to ensure that enough WAL space is reserved to
        handle spikes in WAL usage, for example when running large batch
        jobs.
        If this value is specified without units, it is taken as megabytes.
        The default is 80 MB.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
この設定以下にWALのディスク使用量が保たれる限り、古いWALファイルは、消去されることなく今後のチェックポイントで使用するために常にリサイクルされます。
この設定は、たとえば大きなバッチジョブを走らせる際のWALの利用スパイクを取り扱うために、十分なWALのスペースが予約されていることを保証するために使用できます。
この値が単位なしで指定された場合は、メガバイト単位であるとみなします。
デフォルトは80MBです。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-wal-archiving">
<!--
     <title>Archiving</title>
-->
     <title>アーカイビング</title>

    <variablelist>
     <varlistentry id="guc-archive-mode" xreflabel="archive_mode">
      <term><varname>archive_mode</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>archive_mode</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>archive_mode</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When <varname>archive_mode</varname> is enabled, completed WAL segments
        are sent to archive storage by setting
        <xref linkend="guc-archive-command"/> or
        <xref linkend="guc-archive-library"/>. In addition to <literal>off</literal>,
        to disable, there are two modes: <literal>on</literal>, and
        <literal>always</literal>. During normal operation, there is no
        difference between the two modes, but when set to <literal>always</literal>
        the WAL archiver is enabled also during archive recovery or standby
        mode. In <literal>always</literal> mode, all files restored from the archive
        or streamed with streaming replication will be archived (again). See
        <xref linkend="continuous-archiving-in-standby"/> for details.
-->
<varname>archive_mode</varname>が有効な場合、<xref linkend="guc-archive-command"/>あるいは<xref linkend="guc-archive-library"/>を設定することにより、完了したWALセグメントはアーカイブ格納領域に送信されます。
無効にするための<literal>off</literal>に加え、2つのモードがあります。<literal>on</literal>と<literal>always</literal>です。
通常の運用ではこの2つのモードには違いはありませんが、<literal>always</literal>に設定すると、アーカイブリカバリおよびスタンバイモードでWALアーカイバが有効になります。
<literal>always</literal>モードでは、アーカイブからリストアされたファイルや、ストリーミングレプリケーションでストリームされたファイルもすべて(再び)アーカイブされます。
詳細は<xref linkend="continuous-archiving-in-standby"/>を参照してください。
       </para>
       <para>
<!--
        <varname>archive_mode</varname> is a separate setting from
        <varname>archive_command</varname> and
        <varname>archive_library</varname> so that
        <varname>archive_command</varname> and
        <varname>archive_library</varname> can be changed without leaving
        archiving mode.
        This parameter can only be set at server start.
        <varname>archive_mode</varname> cannot be enabled when
        <varname>wal_level</varname> is set to <literal>minimal</literal>.
-->
<varname>archive_command</varname>と<varname>archive_library</varname>がアーカイブモードを停止することなく変更できるように、<varname>archive_mode</varname>は、<varname>archive_command</varname>と<varname>archive_library</varname>とは別の設定項目になっています。
このパラメータはサーバ起動時のみ設定可能です。
<varname>wal_level</varname>が<literal>minimal</literal>に設定されている場合、<varname>archive_mode</varname>を有効にすることはできません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-archive-command" xreflabel="archive_command">
      <term><varname>archive_command</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>archive_command</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>archive_command</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The local shell command to execute to archive a completed WAL file
        segment.  Any <literal>%p</literal> in the string is
        replaced by the path name of the file to archive, and any
        <literal>%f</literal> is replaced by only the file name.
        (The path name is relative to the working directory of the server,
        i.e., the cluster's data directory.)
        Use <literal>%%</literal> to embed an actual <literal>%</literal> character in the
        command.  It is important for the command to return a zero
        exit status only if it succeeds. For more information see
        <xref linkend="backup-archiving-wal"/>.
-->
完了したWALファイルセグメントのアーカイブを実行するローカルのシェルコマンドです。
文字列内のすべての<literal>%p</literal>は、格納されるファイルのパスで置き換えられ、そして、<literal>%f</literal>はファイル名のみ置換します。
（このパス名はサーバの作業用ディレクトリ、つまり、クラスタのデータディレクトリからの相対パスです。）
コマンド内に<literal>%</literal>文字そのものを埋め込むには<literal>%%</literal>を使用します。
コマンドが成功した場合にのみ終了ステータスゼロを返すことが重要です。
詳しくは<xref linkend="backup-archiving-wal"/>を参照ください。
       </para>
       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.  It is only used if
        <varname>archive_mode</varname> was enabled at server start and
        <varname>archive_library</varname> is set to an empty string.  If both
        <varname>archive_command</varname> and <varname>archive_library</varname>
        are set, an error will be raised.
        If <varname>archive_command</varname> is an empty string (the default) while
        <varname>archive_mode</varname> is enabled (and <varname>archive_library</varname>
        is set to an empty string), WAL archiving is temporarily
        disabled, but the server continues to accumulate WAL segment files in
        the expectation that a command will soon be provided.  Setting
        <varname>archive_command</varname> to a command that does nothing but
        return true, e.g., <literal>/bin/true</literal> (<literal>REM</literal> on
        Windows), effectively disables
        archiving, but also breaks the chain of WAL files needed for
        archive recovery, so it should only be used in unusual circumstances.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
サーバ起動時に<varname>archive_mode</varname>が有効で、<varname>archive_library</varname>が空文字の時にのみ使用されます。
<varname>archive_command</varname>と<varname>archive_library</varname>の両方が有効ならばエラーが発生します。
<varname>archive_mode</varname>が有効であるにもかかわらず、<varname>archive_command</varname>が空文字列（デフォルト）、（そして<varname>archive_library</varname>が空文字列）である場合、WALアーカイブ処理は一時的に無効になりますが、コマンドが後で提供されることを見越して、サーバはWALセグメントの蓄積を続けます。
例えば、<literal>/bin/true</literal>（Windowsでは<literal>REM</literal>）のように、真を返すだけで何もしないコマンドを<varname>archive_command</varname>に設定すると、実質的にアーカイブ処理が無効になりますが、アーカイブからの復帰に必要なWALファイルの連鎖も同時に断ち切るため、特別な場合のみ使用するようにしなければなりません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-archive-library" xreflabel="archive_library">
      <term><varname>archive_library</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>archive_library</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The library to use for archiving completed WAL file segments.  If set to
        an empty string (the default), archiving via shell is enabled, and
        <xref linkend="guc-archive-command"/> is used.  If both
        <varname>archive_command</varname> and <varname>archive_library</varname>
        are set, an error will be raised.  Otherwise, the specified
        shared library is used for archiving. The WAL archiver process is
        restarted by the postmaster when this parameter changes. For more
        information, see <xref linkend="backup-archiving-wal"/> and
        <xref linkend="archive-modules"/>.
-->
アーカイビングが完了したWALファイルセグメントに使用するライブラリです。
空文字列（デフォルト）に設定された場合、シェル経由のアーカイビングが有効になり、<xref linkend="guc-archive-command"/>が使用されます。
<varname>archive_command</varname>と<varname>archive_library</varname>の両方が有効ならばエラーが発生します。
それ以外の場合は、指定された共有ライブラリがアーカイブに使用されます。
WALアーカイバプロセスは、このパラメータが変更されたときにpostmasterによって再起動されます。
詳細については、<xref linkend="backup-archiving-wal"/>および<xref linkend="archive-modules"/>を参照してください。
       </para>
       <para>
<!--
        This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-archive-timeout" xreflabel="archive_timeout">
      <term><varname>archive_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>archive_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>archive_timeout</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The <xref linkend="guc-archive-command"/> or <xref linkend="guc-archive-library"/> is only invoked for
        completed WAL segments. Hence, if your server generates little WAL
        traffic (or has slack periods where it does so), there could be a
        long delay between the completion of a transaction and its safe
        recording in archive storage.  To limit how old unarchived
        data can be, you can set <varname>archive_timeout</varname> to force the
        server to switch to a new WAL segment file periodically.  When this
        parameter is greater than zero, the server will switch to a new
        segment file whenever this amount of time has elapsed since the last
        segment file switch, and there has been any database activity,
        including a single checkpoint (checkpoints are skipped if there is
        no database activity).  Note that archived files that are closed
        early due to a forced switch are still the same length as completely
        full files.  Therefore, it is unwise to use a very short
        <varname>archive_timeout</varname> &mdash; it will bloat your archive
        storage.  <varname>archive_timeout</varname> settings of a minute or so are
        usually reasonable.  You should consider using streaming replication,
        instead of archiving, if you want data to be copied off the primary
        server more quickly than that.
        If this value is specified without units, it is taken as seconds.
        This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
-->
<xref linkend="guc-archive-command"/>または<xref linkend="guc-archive-library"/> は、完了したWALセグメントに対してのみ呼び出されます。
したがって、サーバがWALトラフィックをほとんど生成しない場合（あるいはそのような余裕期間がある場合）、トランザクションの完了とアーカイブストレージへの安全な記録との間に長い遅延が発生する可能性があります。
アーカイブされていないデータの古さを制限するために、<varname>archive_timeout</varname>を設定して、サーバに新しいWALセグメントファイルへの定期的な切り替えを強制することができます。
このパラメータが0より大きい場合、サーバは、最後のセグメントファイル切り替えからこの時間が経過し、単一のチェックポイント（データベースアクティビティがない場合はチェックポイントはスキップされます）を含むデータベースアクティビティが発生するたびに新しいセグメントファイルへの切り替えを行います。
強制的な切り替えにより早期に閉じられたアーカイブファイルは、完全に満杯のファイルと同じ長さのままであることに注意してください。
したがって、非常に短い<varname>archive_timeout</varname>を使用することは賢明ではなく、アーカイブストレージを膨張させます。
通常は1分程度の<varname>archive_timeout</varname>設定が妥当です。
プライマリサーバからデータをより迅速にコピーしたい場合は、アーカイブではなくストリーミングレプリケーションを使用することを検討してください。この値が単位なしで指定された場合、秒として取得されます。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

   <sect2 id="runtime-config-wal-recovery">

<!--
    <title>Recovery</title>
-->
    <title>リカバリ</title>

     <indexterm>
      <primary>configuration</primary>
      <secondary>of recovery</secondary>
      <tertiary>general settings</tertiary>
     </indexterm>
     <indexterm>
      <primary>設定</primary>
      <secondary>リカバリの</secondary>
      <tertiary>一般設定</tertiary>
     </indexterm>

    <para>
<!--
     This section describes the settings that apply to recovery in general,
     affecting crash recovery, streaming replication and archive-based
     replication.
-->
この節では、クラッシュリカバリ、ストリーミングレプリケーション、およびアーカイブベースのレプリケーションに影響する一般的なリカバリに適用される設定について説明します。
    </para>


    <variablelist>
     <varlistentry id="guc-recovery-prefetch" xreflabel="recovery_prefetch">
      <term><varname>recovery_prefetch</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>recovery_prefetch</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>recovery_prefetch</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Whether to try to prefetch blocks that are referenced in the WAL that
        are not yet in the buffer pool, during recovery.  Valid values are
        <literal>off</literal>, <literal>on</literal> and
        <literal>try</literal> (the default).  The setting
        <literal>try</literal> enables
        prefetching only if the operating system provides support for issuing
        read-ahead advice.
-->
《機械翻訳》トライからプレフェッチへのブロックで、WALでは被参照であるがバッファプールではないものをリカバリ中に処理するかどうかを指定します。
有効な値は<literal>off</literal>、<literal>on</literal>および<literal>try</literal>デフォルトです。
設定<literal>try</literal>は、オペレーティングシステムが先読みアドバイスを発行するためにサポートを提供する場合にのみプリフェッチを有効にします。
       </para>
       <para>
<!--
        Prefetching blocks that will soon be needed can reduce I/O wait times
        during recovery with some workloads.
        See also the <xref linkend="guc-wal-decode-buffer-size"/> and
        <xref linkend="guc-maintenance-io-concurrency"/> settings, which limit
        prefetching activity.
-->
すぐに必要になるブロックをプリフェッチすると、一部のワークロードでリカバリ中のI/O待機時間を短縮できます。
プリフェッチ・アクティビティを制限する<xref linkend="guc-wal-decode-buffer-size"/>および<xref linkend="guc-maintenance-io-concurrency"/>設定も参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-decode-buffer-size" xreflabel="wal_decode_buffer_size">
      <term><varname>wal_decode_buffer_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_decode_buffer_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_decode_buffer_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        A limit on how far ahead the server can look in the WAL, to find
        blocks to prefetch.  If this value is specified without units, it is
        taken as bytes.
        The default is 512kB.
-->
サーバがプリフェッチするブロックを見つけるためにWAL内をどれだけ先まで見ることができるかの制限です。
この値が単位なしで指定された場合、バイトとして扱われます。
デフォルトは512KBです。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect2>

  <sect2 id="runtime-config-wal-archive-recovery">

<!--
    <title>Archive Recovery</title>
-->
    <title>アーカイブからのリカバリ</title>

    <indexterm>
     <primary>configuration</primary>
     <secondary>of recovery</secondary>
     <tertiary>of a standby server</tertiary>
    </indexterm>
    <indexterm>
     <primary>設定</primary>
     <secondary>リカバリの</secondary>
     <tertiary>スタンバイサーバの</tertiary>
    </indexterm>

    <para>
<!--
     This section describes the settings that apply only for the duration of
     the recovery.  They must be reset for any subsequent recovery you wish to
     perform.
-->
この節では、リカバリの間だけ適用する設定について説明します。
その後実施するリカバリでは、その設定はリセットしなければなりません。
    </para>

    <para>
<!--
     <quote>Recovery</quote> covers using the server as a standby or for
     executing a targeted recovery.  Typically, standby mode would be used to
     provide high availability and/or read scalability, whereas a targeted
     recovery is used to recover from data loss.
-->
<quote>リカバリ</quote>は、サーバをスタンバイとして使用するとき、あるいはターゲットを指定したリカバリで適用されます。
通常、スタンバイモードは、高可用性または読み出しスケーラビリティ、あるいはその両方を提供するために使用します。
一方ターゲットを指定したリカバリは失なわれたデータを回復するために使用します。
    </para>

    <para>
<!--
     To start the server in standby mode, create a file called
     <filename>standby.signal</filename><indexterm><primary>standby.signal</primary></indexterm>
     in the data directory.  The server will enter recovery and will not stop
     recovery when the end of archived WAL is reached, but will keep trying to
     continue recovery by connecting to the sending server as specified by the
     <varname>primary_conninfo</varname> setting and/or by fetching new WAL
     segments using <varname>restore_command</varname>.  For this mode, the
     parameters from this section and <xref
     linkend="runtime-config-replication-standby"/> are of interest.
     Parameters from <xref linkend="runtime-config-wal-recovery-target"/> will
     also be applied but are typically not useful in this mode.
-->
スタンバイモードでサーバを起動するには、<filename>standby.signal</filename><indexterm><primary>standby.signal</primary></indexterm>と呼ばれるファイルをデータディレクトリに作ります。
サーバはリカバリモードに入り、アーカイブWALの終端に到着してもリカバリを止めず、<varname>primary_conninfo</varname>の設定で指定された送信サーバに接続するか、<varname>restore_command</varname>を使って新しいWALセグメントを取得するか、あるいはその両方によってリカバリを継続しようとします。
このモードでは、この節と<xref linkend="runtime-config-replication-standby"/>で説明するパラメータが関係します。
<xref linkend="runtime-config-wal-recovery-target"/>のパラメータも適用できますが、このモードでは通常有用ではありません。
    </para>

    <para>
<!--
     To start the server in targeted recovery mode, create a file called
     <filename>recovery.signal</filename><indexterm><primary>recovery.signal</primary></indexterm>
     in the data directory.  If both <filename>standby.signal</filename> and
     <filename>recovery.signal</filename> files are created, standby mode
     takes precedence.  Targeted recovery mode ends when the archived WAL is
     fully replayed, or when <varname>recovery_target</varname> is reached.
     In this mode, the parameters from both this section and <xref
     linkend="runtime-config-wal-recovery-target"/> will be used.
-->
サーバをターゲットリカバリモードで起動するには、<filename>recovery.signal</filename><indexterm><primary>recovery.signal</primary></indexterm>という名前のファイルをデータディレクトリに作ります。
<filename>standby.signal</filename>と<filename>recovery.signal</filename>の両方が作られた場合は、スタンバイモードが優先します。
ターゲットリカバリモードはアーカイブWALが完全に再生されるか、<varname>recovery_target</varname>に到達した時に終了します。
このモードでは、この節と<xref linkend="runtime-config-wal-recovery-target"/>のパラメータの両方が使用されます。
    </para>

    <variablelist>
     <varlistentry id="guc-restore-command" xreflabel="restore_command">
      <term><varname>restore_command</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>restore_command</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>restore_command</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The local shell command to execute to retrieve an archived segment of
        the WAL file series. This parameter is required for archive recovery,
        but optional for streaming replication.
        Any <literal>%f</literal> in the string is
        replaced by the name of the file to retrieve from the archive,
        and any <literal>%p</literal> is replaced by the copy destination path name
        on the server.
        (The path name is relative to the current working directory,
        i.e., the cluster's data directory.)
        Any <literal>%r</literal> is replaced by the name of the file containing the
        last valid restart point. That is the earliest file that must be kept
        to allow a restore to be restartable, so this information can be used
        to truncate the archive to just the minimum required to support
        restarting from the current restore. <literal>%r</literal> is typically only
        used by warm-standby configurations
        (see <xref linkend="warm-standby"/>).
        Write <literal>%%</literal> to embed an actual <literal>%</literal> character.
-->
一連のWALファイルからアーカイブセグメントを取り出すために実行するローカルのシェルコマンドです。
このパラメータはアーカイブリカバリでは必須ですが、ストリーミングレプリケーションではオプションです。
文字列中の<literal>%f</literal>はアーカイブから取り出すファイルの名前に置換され、<literal>%p</literal>はサーバ上のコピー先のパス名に置換されます。
（パス名は現在の作業ディレクトリの相対パス、つまりクラスタのデータディレクトリです。）
<literal>%r</literal>は有効な最後のリスタートポイントを含むファイル名に置換されます。
これはリストアが再開可能であるために維持しなければならない最古のファイルで、現在のリストアからの再開をサポートするのに最小限必要なアーカイブを残して切り詰めるのに必要な情報として利用できます。
<literal>%r</literal>は通常ウォームスタンバイ構成でのみ使用されます。
（<xref linkend="warm-standby"/>参照。）
<literal>%</literal>文字自体を埋め込むには<literal>%%</literal>と書いてください。
       </para>

       <para>
<!--
        It is important for the command to return a zero exit status
        only if it succeeds.  The command <emphasis>will</emphasis> be asked for file
        names that are not present in the archive; it must return nonzero
        when so asked.  Examples:
-->
コマンドは、成功した時のみ終了コードのゼロを返却することが重要です。
コマンドはアーカイブにないファイル名を聞かれる<emphasis>ことになります</emphasis>。
その場合には、非ゼロの値を返却しなければなりません。以下に例を示します。
<programlisting>
restore_command = 'cp /mnt/server/archivedir/%f "%p"'
restore_command = 'copy "C:\\server\\archivedir\\%f" "%p"'  # Windows
</programlisting>
<!--
        An exception is that if the command was terminated by a signal (other
        than <systemitem>SIGTERM</systemitem>, which is used as part of a
        database server shutdown) or an error by the shell (such as command
        not found), then recovery will abort and the server will not start up.
-->
例外は、データベースサーバのシャットダウンの一部として、<systemitem>SIGTERM</systemitem>以外のシグナルでコマンドが終了させられたり、シェルによってエラーが発生した（コマンドが見つからない場合など）場合で、その場合はリカバリは中断され、サーバはスタートアップしなくなります。
       </para>

       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-archive-cleanup-command" xreflabel="archive_cleanup_command">
      <term><varname>archive_cleanup_command</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>archive_cleanup_command</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>archive_cleanup_command</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This optional parameter specifies a shell command that will be executed
        at every restartpoint.  The purpose of
        <varname>archive_cleanup_command</varname> is to provide a mechanism for
        cleaning up old archived WAL files that are no longer needed by the
        standby server.
        Any <literal>%r</literal> is replaced by the name of the file containing the
        last valid restart point.
        That is the earliest file that must be <emphasis>kept</emphasis> to allow a
        restore to be restartable, and so all files earlier than <literal>%r</literal>
        may be safely removed.
        This information can be used to truncate the archive to just the
        minimum required to support restart from the current restore.
        The <xref linkend="pgarchivecleanup"/> module
        is often used in <varname>archive_cleanup_command</varname> for
        single-standby configurations, for example:
-->
オプションのパラメータは、すべてのリスタートポイントで実行されるシェルコマンドを指定します。
<varname>archive_cleanup_command</varname>の目的は、スタンバイサーバにとって必要とされない古いアーカイブWALファイルをクリーンアップする仕組みを提供することです。
<literal>%r</literal>は最後の有効なリスタートポイントを含むファイル名に置換されます。
これはリストアが再開可能であるために<emphasis>保持</emphasis>しなければならない最古のファイルで、<literal>%r</literal>よりも前のすべてのファイルは安全に削除できます。
これは現在のリストアからの再開をサポートするのに最小限必要なアーカイブを残して切り詰めるのに必要な情報として利用できます。
単一のスタンバイ構成用の<varname>archive_cleanup_command</varname>で、たとえば以下のように、しばしば<xref linkend="pgarchivecleanup"/>モジュールが使われます。
<programlisting>archive_cleanup_command = 'pg_archivecleanup /mnt/server/archivedir %r'</programlisting>
<!--
        Note however that if multiple standby servers are restoring from the
        same archive directory, you will need to ensure that you do not delete
        WAL files until they are no longer needed by any of the servers.
        <varname>archive_cleanup_command</varname> would typically be used in a
        warm-standby configuration (see <xref linkend="warm-standby"/>).
        Write <literal>%%</literal> to embed an actual <literal>%</literal> character in the
        command.
-->
だたし、複数のスタンバイサーバが同じアーカイブディレクトリからリストアしている場合は、どのサーバにおいてももはや必要がなくなるまでWALファイルが削除されることのないようにする必要があることに留意してください。
<varname>archive_cleanup_command</varname>は通常ウォームスタンバイ構成で使用されます。
（<xref linkend="warm-standby"/>参照。）
<literal>%</literal>文字自体を埋め込むには<literal>%%</literal>と書いてください。
       </para>
       <para>
<!--
        If the command returns a nonzero exit status then a warning log
        message will be written.  An exception is that if the command was
        terminated by a signal or an error by the shell (such as command not
        found), a fatal error will be raised.
-->
コマンドが非ゼロの終了ステータスを返した場合、警告ログメッセージが出力されます。
例外は、コマンドがシグナルで終了されたとき、あるいはシェルがエラーを起こしたとき（コマンドが見つからないなど）で、その場合致命的エラーが生じます。
       </para>
       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-end-command" xreflabel="recovery_end_command">
      <term><varname>recovery_end_command</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>recovery_end_command</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_end_command</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter specifies a shell command that will be executed once only
        at the end of recovery. This parameter is optional. The purpose of the
        <varname>recovery_end_command</varname> is to provide a mechanism for cleanup
        following replication or recovery.
        Any <literal>%r</literal> is replaced by the name of the file containing the
        last valid restart point, like in <xref linkend="guc-archive-cleanup-command"/>.
-->
このパラメータは、リカバリの終了時に一度だけ起動されるシェルコマンドを指定します。
このパラメータはオプションです。
<varname>recovery_end_command</varname>の目的はレプリケーションあるいはリカバリの後のクリーンアップのための機構を提供することにあります。
<literal>%r</literal>は、<xref linkend="guc-archive-cleanup-command"/>と同じように、有効な最後のリスタートポイントを含むWALファイル名に置換されます。
       </para>
       <para>
<!--
        If the command returns a nonzero exit status then a warning log
        message will be written and the database will proceed to start up
        anyway.  An exception is that if the command was terminated by a
        signal or an error by the shell (such as command not found), the
        database will not proceed with startup.
-->
コマンドが非ゼロの終了ステータスを返した場合、警告ログメッセージが出力されますが、データベースはスタートアップ処理を続けます。
例外は、コマンドがシグナルによって終了させられたか、シェルによってエラーが発生した（そのようなコマンドは見つからない）場合で、その場合はデータベースはスタートアップ処理を継続させません。
       </para>
       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>

  </sect2>

  <sect2 id="runtime-config-wal-recovery-target">

<!--
    <title>Recovery Target</title>
-->
    <title>リカバリターゲット</title>

     <para>
<!--
      By default, recovery will recover to the end of the WAL log. The
      following parameters can be used to specify an earlier stopping point.
      At most one of <varname>recovery_target</varname>,
      <varname>recovery_target_lsn</varname>, <varname>recovery_target_name</varname>,
      <varname>recovery_target_time</varname>, or <varname>recovery_target_xid</varname>
      can be used; if more than one of these is specified in the configuration
      file, an error will be raised.
      These parameters can only be set at server start.
-->
デフォルトではWALログの最後までリカバリを行います。
次のパラメータがそれより前の時点でリカバリを停止するために利用できます。
次の<varname>recovery_target</varname>、<varname>recovery_target_lsn</varname>、<varname>recovery_target_name</varname>、<varname>recovery_target_time</varname>、<varname>recovery_target_xid</varname>のどれか一つが使えます。
設定ファイルの中で２つ以上指定するとエラーとなります。
これらのパラメータはサーバ起動時のみ設定可能です。
     </para>

     <variablelist>
     <varlistentry id="guc-recovery-target" xreflabel="recovery_target">
      <term><varname>recovery_target</varname><literal> = 'immediate'</literal>
      <indexterm>
        <primary><varname>recovery_target</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_target</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter specifies that recovery should end as soon as a
        consistent state is reached, i.e., as early as possible. When restoring
        from an online backup, this means the point where taking the backup
        ended.
-->
このパラメータは、リカバリが一貫した状態になり次第、すなわちできるだけ早く終了することを指定します。
オンラインバックアップからリストアした場合、これはバックアップが終了した時点を意味します。
       </para>
       <para>
<!--
        Technically, this is a string parameter, but <literal>'immediate'</literal>
        is currently the only allowed value.
-->
技術的にはこれは文字列型のパラメータですが、現時点では<literal>'immediate'</literal>だけが許容されている値です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-name" xreflabel="recovery_target_name">
      <term><varname>recovery_target_name</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>recovery_target_name</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_target_name</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter specifies the named restore point (created with
        <function>pg_create_restore_point()</function>) to which recovery will proceed.
-->
このパラメータは、指定した（<function>pg_create_restore_point()</function>により作成された）名前付きリストアポイントまでリカバリを進行させます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-time" xreflabel="recovery_target_time">
      <term><varname>recovery_target_time</varname> (<type>timestamp</type>)
      <indexterm>
        <primary><varname>recovery_target_time</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_target_time</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter specifies the time stamp up to which recovery
        will proceed.
        The precise stopping point is also influenced by
        <xref linkend="guc-recovery-target-inclusive"/>.
-->
このパラメータは、指定したタイムスタンプまでリカバリを進行させます。
正確な停止点は<xref linkend="guc-recovery-target-inclusive"/>にも影響されます。
       </para>

       <para>
<!--
        The value of this parameter is a time stamp in the same format
        accepted by the <type>timestamp with time zone</type> data type,
        except that you cannot use a time zone abbreviation (unless the
        <xref linkend="guc-timezone-abbreviations"/> variable has been set
        earlier in the configuration file).  Preferred style is to use a
        numeric offset from UTC, or you can write a full time zone name,
        e.g., <literal>Europe/Helsinki</literal> not <literal>EEST</literal>.
-->
（<xref linkend="guc-timezone-abbreviations"/>変数が設定ファイルで先に設定されていない限り）時間帯略語を使えないことを除けば、このパラメータの値は<type>timestamp with time zone</type>データ型が受け付けるのと同じ形式のタイムスタンプです。
おすすめの形式はUTCからのオフセットか、<literal>EEST</literal>ではなく<literal>Europe/Helsinki</literal>のような完全な時間帯名です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-xid" xreflabel="recovery_target_xid">
      <term><varname>recovery_target_xid</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>recovery_target_xid</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_target_xid</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter specifies the transaction ID up to which recovery
        will proceed. Keep in mind
        that while transaction IDs are assigned sequentially at transaction
        start, transactions can complete in a different numeric order.
        The transactions that will be recovered are those that committed
        before (and optionally including) the specified one.
        The precise stopping point is also influenced by
        <xref linkend="guc-recovery-target-inclusive"/>.
-->
このパラメータは、指定したトランザクションIDまでリカバリを進行させます。
トランザクションIDはトランザクション起動時に順番に割り当てられますが、トランザクションは数字順によらず完了することがあることに留意してください。
リカバリされるトランザクションは、指定されたものよりも前 (オプションによっては指定されたものも含まれる) にコミットされたものになります。
正確な停止点は<xref linkend="guc-recovery-target-inclusive"/>にも影響されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-lsn" xreflabel="recovery_target_lsn">
      <term><varname>recovery_target_lsn</varname> (<type>pg_lsn</type>)
      <indexterm>
        <primary><varname>recovery_target_lsn</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_target_lsn</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter specifies the LSN of the write-ahead log location up
        to which recovery will proceed. The precise stopping point is also
        influenced by <xref linkend="guc-recovery-target-inclusive"/>. This
        parameter is parsed using the system data type
        <link linkend="datatype-pg-lsn"><type>pg_lsn</type></link>.
-->
このパラメータは、指定した先行書き込みログ（WAL）の場所のLSNまでリカバリを進行させます。
正確な停止点は、<xref linkend="guc-recovery-target-inclusive"/>の影響も受けます。
このパラメータは、システムデータ型<link linkend="datatype-pg-lsn"><type>pg_lsn</type></link>を使用して解析されます。
       </para>
      </listitem>
     </varlistentry>
     </variablelist>

     <para>
<!--
       The following options further specify the recovery target, and affect
       what happens when the target is reached:
-->
以下のオプションはリカバリ対象をより詳細に指定し、リカバリが対象に達した時の動作に影響を与えます。
     </para>

     <variablelist>
     <varlistentry id="guc-recovery-target-inclusive"
                   xreflabel="recovery_target_inclusive">
      <term><varname>recovery_target_inclusive</varname> (<type>boolean</type>)
      <indexterm>
        <primary><varname>recovery_target_inclusive</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_target_inclusive</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies whether to stop just after the specified recovery target
        (<literal>on</literal>), or just before the recovery target
        (<literal>off</literal>).
        Applies when <xref linkend="guc-recovery-target-lsn"/>,
        <xref linkend="guc-recovery-target-time"/>, or
        <xref linkend="guc-recovery-target-xid"/> is specified.
        This setting controls whether transactions
        having exactly the target WAL location (LSN), commit time, or transaction ID, respectively, will
        be included in the recovery.  Default is <literal>on</literal>.
-->
指定したリカバリ対象のちょうど後に停止するか(<literal>on</literal>)、ちょうどその前に停止するか(<literal>off</literal>)を指定します。
<xref linkend="guc-recovery-target-lsn"/>、<xref linkend="guc-recovery-target-time"/>、又は<xref linkend="guc-recovery-target-xid"/>が指定されている場合は適用されます。
この設定は、指定した対象のWALの場所(LSN)、コミット時刻、あるいはトランザクションIDが、それぞれ正確に一致するトランザクションをリカバリに含めるかどうかを制御します。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-timeline"
                   xreflabel="recovery_target_timeline">
      <term><varname>recovery_target_timeline</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>recovery_target_timeline</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_target_timeline</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies recovering into a particular timeline.  The value can be a
        numeric timeline ID or a special value.  The value
        <literal>current</literal> recovers along the same timeline that was
        current when the base backup was taken.  The
        value <literal>latest</literal> recovers
        to the latest timeline found in the archive, which is useful in
        a standby server.  <literal>latest</literal> is the default.
-->
リカバリが作成する個別のタイムラインを指定します。
値は数値のタイムラインIDか、特殊な値です。
<literal>current</literal>では、ベースバックアップが取得されたときにカレントだったタイムラインに沿ってリカバリします。
<literal>latest</literal>では、アーカイブ時に見つけた最新のタイムラインにリカバリします。これはスタンバイサーバで有用です。
デフォルトは<literal>latest</literal>です。
       </para>

       <para>
<!--
        To specify a timeline ID in hexadecimal (for example, if extracted
        from a WAL file name or history file), prefix it with a
        <literal>0x</literal>.  For instance, if the WAL file name is
        <filename>00000011000000A10000004F</filename>, then the timeline ID is
        <literal>0x11</literal> (or 17 decimal).
-->
タイムラインIDを16進数で指定するには(たとえば、WALファイル名前または歴史ファイルから抽出した場合)、<literal>0x</literal>を前に置きます。
例として、WALファイル名前が<filename>00000011000000A10000004F</filename>であれば、タイムラインIDは<literal>0x11</literal>(または10進数で17)になります。
       </para>

       <para>
<!--
        You usually only need to set this parameter
        in complex re-recovery situations, where you need to return to
        a state that itself was reached after a point-in-time recovery.
        See <xref linkend="backup-timelines"/> for discussion.
-->
通常このパラメータの設定が必要となるのは、ポイントインタイムリカバリの実施後に到達した状態に戻す場合など、複雑なリカバリの状況のみです。
説明は<xref linkend="backup-timelines"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-action"
                   xreflabel="recovery_target_action">
      <term><varname>recovery_target_action</varname> (<type>enum</type>)
      <indexterm>
        <primary><varname>recovery_target_action</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_target_action</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies what action the server should take once the recovery target is
        reached. The default is <literal>pause</literal>, which means recovery will
        be paused. <literal>promote</literal> means the recovery process will finish
        and the server will start to accept connections.
        Finally <literal>shutdown</literal> will stop the server after reaching the
        recovery target.
-->
リカバリ対象に到達した場合に、サーバがする動作を指定します。
デフォルトは<literal>pause</literal>で、リカバリを休止することを意味します。
<literal>promote</literal>は、リカバリの過程が終われば、サーバは接続の受け付けを始めることを意味します。
最後に、<literal>shutdown</literal>は、リカバリ対象に到達した後にサーバを停止します。
       </para>
       <para>
<!--
        The intended use of the <literal>pause</literal> setting is to allow queries
        to be executed against the database to check if this recovery target
        is the most desirable point for recovery.
        The paused state can be resumed by
        using <function>pg_wal_replay_resume()</function> (see
        <xref linkend="functions-recovery-control-table"/>), which then
        causes recovery to end. If this recovery target is not the
        desired stopping point, then shut down the server, change the
        recovery target settings to a later target and restart to
        continue recovery.
-->
<literal>pause</literal>の設定の意図した使い方は、このリカバリ対象がリカバリのための最も望ましいポイントかどうかチェックするために、データベースに対して問い合わせを実行できるようにすることです。
休止された状態は、<function>pg_wal_replay_resume()</function>(<xref linkend="functions-recovery-control-table"/>参照)の使用により再開することができます。
その後、それはリカバリを終了させます。
このリカバリ対象が希望の止まるポイントでない場合、サーバをシャットダウンし、リカバリ対象の設定をより後の対象に変更し、リカバリを継続するために再起動してください。
       </para>
       <para>
<!--
        The <literal>shutdown</literal> setting is useful to have the instance ready
        at the exact replay point desired.  The instance will still be able to
        replay more WAL records (and in fact will have to replay WAL records
        since the last checkpoint next time it is started).
-->
<literal>shutdown</literal>の設定はインスタンスを正確に望ましい再生ポイントで準備するのに有用です。
インスタンスはさらに多くのWALレコードを再生できます(実際、次に起動するときには最後のチェックポイントからWALレコードを再生しなければなりません)。
       </para>
       <para>
<!--
        Note that because <filename>recovery.signal</filename> will not be
        removed when <varname>recovery_target_action</varname> is set to <literal>shutdown</literal>,
        any subsequent start will end with immediate shutdown unless the
        configuration is changed or the <filename>recovery.signal</filename>
        file is removed manually.
-->
<filename>recovery.signal</filename>は<varname>recovery_target_action</varname>が<literal>shutdown</literal>に設定されていると削除されないことに留意してください。
設定が変更されるか、<filename>recovery.signal</filename>が手動で削除されない限り、以降起動しても直ちに停止されてしまいます。
       </para>
       <para>
<!--
        This setting has no effect if no recovery target is set.
        If <xref linkend="guc-hot-standby"/> is not enabled, a setting of
        <literal>pause</literal> will act the same as <literal>shutdown</literal>.
        If the recovery target is reached while a promotion is ongoing,
        a setting of <literal>pause</literal> will act the same as
        <literal>promote</literal>.
-->
この設定はリカバリ対象が設定されていない場合には効果がありません。
<xref linkend="guc-hot-standby"/>が有効になっていない場合、<literal>pause</literal>の設定は<literal>shutdown</literal>と同じように動作します。
昇格中にリカバリ対象に到達した場合は、<literal>pause</literal>は<literal>promote</literal>と同じように働きます。
       </para>
       <para>
<!--
        In any case, if a recovery target is configured but the archive
        recovery ends before the target is reached, the server will shut down
        with a fatal error.
-->
どのような場合でも、リカバリ対象が設定されていて、アーカイブリカバリがそのリカバリ対象に到達する前に終了すると、サーバはフェイタルエラーで停止します。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect2>

   <sect2 id="runtime-config-wal-summarization">
<!--
    <title>WAL Summarization</title>
-->
    <title>WAL要約</title>

    <para>
<!--
     These settings control WAL summarization, a feature which must be
     enabled in order to perform an
     <link linkend="backup-incremental-backup">incremental backup</link>.
-->
これらの設定は、WAL要約を制御します。この機能は、<link linkend="backup-incremental-backup">インクリメンタルバックアップ</link>を実行するために有効にする必要があります。
    </para>

    <variablelist>
     <varlistentry id="guc-summarize-wal" xreflabel="summarize_wal">
      <term><varname>summarize_wal</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>summarize_wal</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>summarize_wal</varname>設定パラメータ</primary>
      </indexterm>
      </term>
     <listitem>
      <para>
<!--
       Enables the WAL summarizer process. Note that WAL summarization can
       be enabled either on a primary or on a standby.  This parameter can only
       be set in the <filename>postgresql.conf</filename> file or on the server
       command line.  The default is <literal>off</literal>.
-->
WAL要約プロセスを有効にします。
WAL要約はプライマリまたはスタンバイのいずれかで有効にできることに注意してください。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
デフォルトは<literal>off</literal>です。
      </para>
      <para>
<!--
       The server cannot be started with <literal>summarize_wal=on</literal>
       if <literal>wal_level</literal> is set to <literal>minimal</literal>. If
       <literal>summarize_wal=on</literal> is configured after server startup
       while <literal>wal_level=minimal</literal>, the summarizer will run
       but refuse to generate summary files for any WAL generated with
       <literal>wal_level=minimal</literal>.
-->
<literal>wal_level</literal>が<literal>minimal</literal>に設定されている場合、サーバを<literal>summarize_wal=on</literal>で起動することはできません。
<literal>wal_level=minimal</literal>の状態でサーバを起動し、その後<literal>summarize_wal=on</literal>に設定した場合、要約処理は動作しますが、<literal>wal_level=minimal</literal>で生成されたWALの要約ファイルの生成は拒否します。
      </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-summary-keep-time" xreflabel="wal_summary_keep_time">
      <term><varname>wal_summary_keep_time</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_summary_keep_time</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_summary_keep_time</varname>設定パラメータ</primary>
      </indexterm>
      </term>
     <listitem>
      <para>
<!--
       Configures the amount of time after which the WAL summarizer
       automatically removes old WAL summaries. The file timestamp is used to
       determine which files are old enough to remove. Typically, you should set
       this comfortably higher than the time that could pass between a backup
       and a later incremental backup that depends on it.  WAL summaries must
       be available for the entire range of WAL records between the preceding
       backup and the new one being taken; if not, the incremental backup will
       fail. If this parameter is set to zero, WAL summaries will not be
       automatically deleted, but it is safe to manually remove files that you
       know will not be required for future incremental backups.
       This parameter can only be set in the
       <filename>postgresql.conf</filename> file or on the server command line.
       If this value is specified without units, it is taken as minutes.
       The default is 10 days. If <literal>summarize_wal = off</literal>,
       existing WAL summaries will not be removed regardless of the value of
       this parameter, because the WAL summarizer will not run.
-->
WAL要約処理が自動的に古いWAL要約を削除するまでの時間を設定します。
ファイルタイムスタンプは、どのファイルが削除するのに十分な古さであるかを判断するために使用されます。
通常、この値は、バックアップとそれに依存する後のインクリメンタルバックアップとの間で経過する時間よりも余裕を持って高く設定する必要があります。
WAL要約は、先行するバックアップと新しいバックアップの間のWALレコードの全範囲に対して利用可能でなければなりません。そうでない場合、インクリメンタルバックアップは失敗します。
このパラメータがゼロに設定されている場合、WAL要約は自動的には削除されませんが、将来の増分バックアップに必要でないことが分かっているファイルは手動で安全に削除できます。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
この値が単位なしで指定されると、分として解釈されます。
デフォルトは10日間です。
<literal>summarize_wal = off</literal>の場合、WAL要約処理が動作しないため、このパラメータの値に関わらず、既存のWAL要約は削除されません。
      </para>
      </listitem>
     </varlistentry>

    </variablelist>

   </sect2>

   </sect1>

   <sect1 id="runtime-config-replication">
<!--
    <title>Replication</title>
-->
    <title>レプリケーション</title>

    <para>
<!--
     These settings control the behavior of the built-in
     <firstterm>streaming replication</firstterm> feature (see
     <xref linkend="streaming-replication"/>), and the built-in
     <firstterm>logical replication</firstterm> feature (see
     <xref linkend="logical-replication"/>).
-->
これらの設定は、組み込み<firstterm>ストリーミングレプリケーション</firstterm>機能（<xref linkend="streaming-replication"/>参照）および組み込み<firstterm>論理レプリケーション</firstterm>機能（<xref linkend="logical-replication"/>を参照）の動作を制御します。
<xref linkend="streaming-replication"/>
    </para>

    <para>
<!--
     For <emphasis>streaming replication</emphasis>, servers will be either a
     primary or a standby server.  Primaries can send data, while standbys
     are always receivers of replicated data.  When cascading replication
     (see <xref linkend="cascading-replication"/>) is used, standby servers
     can also be senders, as well as receivers.
     Parameters are mainly for sending and standby servers, though some
     parameters have meaning only on the primary server.  Settings may vary
     across the cluster without problems if that is required.
-->
<emphasis>ストリーミングレプリケーション</emphasis>では、サーバ群のサーバはプライマリかスタンバイのいずれかです。
プライマリはデータを送出する一方、複数のスタンバイは複製されたデータを常に受け取ります。
カスケードレプリケーション（<xref linkend="cascading-replication"/>を参照）が使用されている場合、スタンバイサーバ群は受け取り手でもあり、送り手でもあります。
パラメータは主として送出サーバとスタンバイサーバ用ですが、いくつかのパラメータはプライマリサーバのみに効力を発します。
必要とあればクラスタに渡って問題なく設定を変化させることができます。
    </para>

    <para>
<!--
     For <emphasis>logical replication</emphasis>, <firstterm>publishers</firstterm>
     (servers that do <link linkend="sql-createpublication"><command>CREATE PUBLICATION</command></link>)
     replicate data to <firstterm>subscribers</firstterm>
     (servers that do <link linkend="sql-createsubscription"><command>CREATE SUBSCRIPTION</command></link>).
     Servers can also be publishers and subscribers at the same time. Note,
     the following sections refer to publishers as "senders". For more details
     about logical replication configuration settings refer to
     <xref linkend="logical-replication-config"/>.
-->
<emphasis>論理レプリケーション</emphasis>の場合、<firstterm>パブリッシャー（</firstterm><link linkend="sql-createpublication"><command>CREATE PUBLICATION</command></link>を実行するサーバ）は、データを<firstterm>サブスクライバー</firstterm>（<link linkend="sql-createsubscription"><command>CREATE SUBSCRIPTION</command></link>を実行するサーバ）に複製します。
サーバは、パブリッシャーとサブスクライバーを同時に兼ねることもできます。
以降の節でパブリッシャーを「送信者」と呼ぶことに注意してください。
論理レプリケーション設定設定の詳細は、<xref linkend="logical-replication-config"/>を参照してください。
    </para>

    <sect2 id="runtime-config-replication-sender">
<!--
     <title>Sending Servers</title>
-->
     <title>送出サーバ群</title>

     <para>
<!--
      These parameters can be set on any server that is
      to send replication data to one or more standby servers.
      The primary is always a sending server, so these parameters must
      always be set on the primary.
      The role and meaning of these parameters does not change after a
      standby becomes the primary.
-->
これらのパラメータはレプリケーションデータを１つ、またはそれ以上複数のスタンバイサーバに送るすべてのサーバ上で設定することができます。
プライマリは常に送出サーバであるため、パラメータは常にプライマリ上に設定されなければなりません。
これらのパラメータの役割と意味はスタンバイが後にプライマリに昇格しても変わりません。
     </para>

     <variablelist>
      <varlistentry id="guc-max-wal-senders" xreflabel="max_wal_senders">
       <term><varname>max_wal_senders</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_wal_senders</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>max_wal_senders</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
       <para>
<!--
        Specifies the maximum number of concurrent connections from standby
        servers or streaming base backup clients (i.e., the maximum number of
        simultaneously running WAL sender processes). The default is
        <literal>10</literal>.  The value <literal>0</literal> means
        replication is disabled.  Abrupt disconnection of a streaming client might
        leave an orphaned connection slot behind until a timeout is reached,
        so this parameter should be set slightly higher than the maximum
        number of expected clients so disconnected clients can immediately
        reconnect.  This parameter can only be set at server start.  Also,
        <varname>wal_level</varname> must be set to
        <literal>replica</literal> or higher to allow connections from standby
        servers.
-->
複数のスタンバイサーバあるいは、ストリーミングを使ったベースバックアップクライアントからの同時接続を受ける接続最大値を設定します（つまり、同時に稼働するWAL送信プロセスの最大値です）。
デフォルトは<literal>10</literal>です。
<literal>0</literal>ならば、レプリケーションは無効であるという意味になります。
ストリーミングクライアントの突然の切断により、タイムアウトになるまで親のない接続スロットが残ることがあります。
ですから、このパラメータは想定されるクライアント数の最大値よりも少し大きめにして、切断されたクライアントが直ちに再接続できるようにした方が良いでしょう。
このパラメータはサーバ起動時のみ設定可能です。
また、スタンバイサーバからの接続を許可するには、<varname>wal_level</varname>を<literal>replica</literal>以上に設定しておかなければなりません。
       </para>

       <para>
<!--
         When running a standby server, you must set this parameter to the
         same or higher value than on the primary server. Otherwise, queries
         will not be allowed in the standby server.
-->
スタンバイサーバを実行する際は、このパラメータをプライマリサーバと同じか高い値にしなければなりません。
さもなければ、スタンバイサーバでクエリを実行できなくなります。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-max-replication-slots" xreflabel="max_replication_slots">
       <term><varname>max_replication_slots</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_replication_slots</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies the maximum number of replication slots
         (see <xref linkend="streaming-replication-slots"/>) that the server
         can support. The default is 10.  This parameter can only be set at
         server start.
         Setting it to a lower value than the number of currently
         existing replication slots will prevent the server from starting.
         Also, <varname>wal_level</varname> must be set
         to <literal>replica</literal> or higher to allow replication slots to
         be used.
-->
サーバが使用できるレプリケーションスロット(<xref linkend="streaming-replication-slots"/>参照)の最大数を指定します。
デフォルトは10です。
このパラメータはサーバ起動時のみ設定可能です。
現在存在しているレプリケーションスロットの数よりも少ない値を設定すると、サーバは起動しません。
また、レプリケーションスロットが使用できるためには、<varname>wal_level</varname>を<literal>replica</literal>以上に設定しなければなりません。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-wal-keep-size" xreflabel="wal_keep_size">
       <term><varname>wal_keep_size</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>wal_keep_size</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>wal_keep_size</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
       <para>
<!--
        Specifies the minimum size of past WAL files kept in the
        <filename>pg_wal</filename>
        directory, in case a standby server needs to fetch them for streaming
        replication. If a standby
        server connected to the sending server falls behind by more than
        <varname>wal_keep_size</varname> megabytes, the sending server might
        remove a WAL segment still needed by the standby, in which case the
        replication connection will be terminated.  Downstream connections
        will also eventually fail as a result.  (However, the standby
        server can recover by fetching the segment from archive, if WAL
        archiving is in use.)
-->
<filename>pg_wal</filename>ディレクトリに保持する過去のWALファイルの最小サイズを指定します。
もし送出サーバに接続しているスタンバイサーバが<varname>wal_keep_size</varname>メガバイトを越えて遅延した場合、送出サーバはスタンバイサーバが今後とも必要とするWALセグメントを削除する可能性があります。
この場合、レプリケーション接続は終了させられます。結果として下流に対する接続も結局は終了されることがあります。（しかし、WALアーカイブが使用されていれば、スタンバイサーバはアーカイブからセグメントを取り出し、復旧することができます。）
       </para>

       <para>
<!--
        This sets only the minimum size of segments retained in
        <filename>pg_wal</filename>; the system might need to retain more segments
        for WAL archival or to recover from a checkpoint. If
        <varname>wal_keep_size</varname> is zero (the default), the system
        doesn't keep any extra segments for standby purposes, so the number
        of old WAL segments available to standby servers is a function of
        the location of the previous checkpoint and status of WAL
        archiving.
        If this value is specified without units, it is taken as megabytes.
        This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
-->
<filename>pg_wal</filename>に保持され続けるセグメントの最小値のみを設定します。
システムはWALアーカイブのため、またはチェックポイントからの復旧のため、より多くのセグメント保持が必要となることがあります。
もし<varname>wal_keep_size</varname>が（デフォルトの）ゼロの場合、システムはスタンバイサーバのために追加セグメントを保持することはしません。
従って、スタンバイサーバが使用できる古いWALセグメントの数は、直前のチェックポイントの場所とWALアーカイブの状況によって算出されます。
この値が単位無しで指定されると、メガバイトであると見なします。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-max-slot-wal-keep-size" xreflabel="max_slot_wal_keep_size">
       <term><varname>max_slot_wal_keep_size</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_slot_wal_keep_size</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>max_slot_wal_keep_size</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
       <para>
<!--
        Specify the maximum size of WAL files
        that <link linkend="streaming-replication-slots">replication
        slots</link> are allowed to retain in the <filename>pg_wal</filename>
        directory at checkpoint time.
        If <varname>max_slot_wal_keep_size</varname> is -1 (the default),
        replication slots may retain an unlimited amount of WAL files.  Otherwise, if
        restart_lsn of a replication slot falls behind the current LSN by more
        than the given size, the standby using the slot may no longer be able
        to continue replication due to removal of required WAL files. You
        can see the WAL availability of replication slots
        in <link linkend="view-pg-replication-slots">pg_replication_slots</link>.
        If this value is specified without units, it is taken as megabytes.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
チェックポイント時に<link linkend="streaming-replication-slots">レプリケーションスロット</link>が<filename>pg_wal</filename>ディレクトリに残すことのできる
最大のWALファイルのサイズを指定します。
<varname>max_slot_wal_keep_size</varname>が-1 (デフォルトです)なら、レプリケーションスロットは無制限のWALファイルを残すかも知れません。
そうでなければ、レプリケーションスロットのrestart_lsnが現在のLSNよりも与えられたサイズ分遅れると、そのスロットを使っているスタンバイは必要なWALファイルが削除されたためにレプリケーションを継続できなくなります。
レプリケーションスロットのWALが存在するかどうかは<link linkend="view-pg-replication-slots">pg_replication_slots</link>を見て確認できます。
この値が単位無しで指定されると、メガバイトであると見なします。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
       </listitem>
      </varlistentry>

     <varlistentry id="guc-idle-replication-slot-timeout" xreflabel="idle_replication_slot_timeout">
      <term><varname>idle_replication_slot_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>idle_replication_slot_timeout</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Invalidate replication slots that have remained inactive (not used by
        a <link linkend="protocol-replication">replication connection</link>)
        for longer than this duration.
        If this value is specified without units, it is taken as seconds.
        A value of zero (the default) disables the idle timeout
        invalidation mechanism.  This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command
        line.
-->
《機械翻訳》この期間より長く非アクティブのままになっている<link linkend="protocol-replication">レプリケーションレプリケーション</link>によって使用されていないコネクションスロットを無効にします。
この値がユニットなしで指定された場合、秒単位で処理されます。
ゼロ（デフォルト）の値は、アイドル状態のタイムアウト無効化メカニズムを無効にします。
このパラメータは、<filename>postgresql.conf</filename>ファイルまたはサーバコマンドラインでのみ設定できます。
       </para>

       <para>
<!--
        Slot invalidation due to idle timeout occurs during checkpoint.
        Because checkpoints happen at <varname>checkpoint_timeout</varname>
        intervals, there can be some lag between when the
        <varname>idle_replication_slot_timeout</varname> was exceeded and when
        the slot invalidation is triggered at the next checkpoint.
        To avoid such lags, users can force a checkpoint to promptly invalidate
        inactive slots. The duration of slot inactivity is calculated using the
        slot's <link linkend="view-pg-replication-slots">pg_replication_slots</link>.<structfield>inactive_since</structfield>
        value.
-->
《機械翻訳》スロットの空き時間によるタイムアウトの無効化は、チェックポイント中に発生します。
チェックポイントは<varname>checkpoint_timeout</varname>間隔で発生するため、<varname>idle_replication_slot_timeout</varname>を超えた時点と、次のスロットでチェックポイントの無効化がトリガされる時点との間に多少の遅延が発生する可能性があります。
このような遅延を回避するために、ユーザはチェックポイントに対して、すぐに非アクティブなスロットを無効にするように強制できます。
スロットの非アクティブな期間は、スロットの<link linkend="view-pg-replication-slots">pg_replication_slots</link>.<structfield>inactive_since</structfield>値を使用して計算されます。
       </para>

       <para>
<!--
        Note that the idle timeout invalidation mechanism is not applicable
        for slots that do not reserve WAL or for slots on the standby server
        that are being synced from the primary server (i.e., standby slots
        having <link linkend="view-pg-replication-slots">pg_replication_slots</link>.<structfield>synced</structfield>
        value <literal>true</literal>). Synced slots are always considered to
        be inactive because they don't perform logical decoding to produce
        changes.
-->
《機械翻訳》ノートアイドルタイムアウト無効化メカニズムは、WALを予約しないスロットや、スタンバイサーバから同期されるプライマリサーバ上のスロット（すなわち、<link linkend="view-pg-replication-slots">pg_replication_slots</link>.<structfield>synced</structfield>の値<literal>true</literal>を持つレプリケーションスロット）には適用されません。
同期スロットは、変更を生成するロジカルデコーディングを行わないため、常に非アクティブとみなされます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-sender-timeout" xreflabel="wal_sender_timeout">
      <term><varname>wal_sender_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_sender_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_sender_timeout</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Terminate replication connections that are inactive for longer
        than this amount of time. This is useful for
        the sending server to detect a standby crash or network outage.
        If this value is specified without units, it is taken as milliseconds.
        The default value is 60 seconds.
        A value of zero disables the timeout mechanism.
-->
指定された時間より長く非活動であるレプリケーション接続を停止します。
スタンバイサーバのクラッシュ、またはネットワークの停止を送出サーバが検出することにこれが役立ちます。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
デフォルトの値は60秒です。
値ゼロはこのタイムアウト機能を無効にします。
       </para>
       <para>
<!--
        With a cluster distributed across multiple geographic
        locations, using different values per location brings more flexibility
        in the cluster management. A smaller value is useful for faster
        failure detection with a standby having a low-latency network
        connection, and a larger value helps in judging better the health
        of a standby if located on a remote location, with a high-latency
        network connection.
-->
地理的に複数の場所に分散したクラスタでは、場所によって異なる値を使うことでクラスタ管理がより柔軟にできるようになります。
より小さな値は低遅延ネットワーク接続上のスタンバイの障害検知をより高速にするのに役立ちます。
遅延の大きなネットワーク接続に設置されたスタンバイの健全性の判断にはより大きな値が助けになるでしょう。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-track-commit-timestamp" xreflabel="track_commit_timestamp">
      <term><varname>track_commit_timestamp</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>track_commit_timestamp</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>track_commit_timestamp</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Record commit time of transactions. This parameter
        can only be set in <filename>postgresql.conf</filename> file or on the server
        command line. The default value is <literal>off</literal>.
-->
トランザクションのコミットタイムを記録します。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
デフォルトは<literal>off</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-synchronized-standby-slots" xreflabel="synchronized_standby_slots">
      <term><varname>synchronized_standby_slots</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>synchronized_standby_slots</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>synchronized_standby_slots</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        A comma-separated list of streaming replication standby server slot names
        that logical WAL sender processes will wait for. Logical WAL sender processes
        will send decoded changes to plugins only after the specified replication
        slots confirm receiving WAL. This guarantees that logical replication
        failover slots do not consume changes until those changes are received
        and flushed to corresponding physical standbys. If a
        logical replication connection is meant to switch to a physical standby
        after the standby is promoted, the physical replication slot for the
        standby should be listed here. Note that logical replication will not
        proceed if the slots specified in the
        <varname>synchronized_standby_slots</varname> do not exist or are invalidated.
        Additionally, the replication management functions
-->
ロジカルWAL送信プロセスが待機する、カンマで区切られたストリーミングレプリケーションのスタンバイサーバのスロット名です。
ロジカルWAL送信プロセスは、指定されたレプリケーションスロットがWALの受信を確認した後にのみ、デコードされた変更をプラグインに送信します。
これにより、論理レプリケーションフェイルオーバースロットは、変更が受信され、対応する物理的スタンバイに吐き出されるまで、変更を消費しないことが保証されます。
物理スタンバイが昇格した後、論理レプリケーションコネクションがその物理スタンバイに移動した場合は、スタンバイの物理レプリケーションスロットがここに表示されます。
<varname>synchronized_standby_slots</varname>で指定されたスロットが存在しないか、無効になっている場合、論理レプリケーションが続行しないことに注意してください。
また、レプリケーション管理関数である
<!--
        <link linkend="pg-replication-slot-advance">
        <function>pg_replication_slot_advance</function></link>,
        <link linkend="pg-logical-slot-get-changes">
        <function>pg_logical_slot_get_changes</function></link>, and
        <link linkend="pg-logical-slot-peek-changes">
        <function>pg_logical_slot_peek_changes</function></link>,
        when used with logical failover slots, will block until all
        physical slots specified in <varname>synchronized_standby_slots</varname> have
        confirmed WAL receipt.
-->
<link linkend="pg-replication-slot-advance">、<function>pg_replication_slot_advance</function></link>、<link linkend="pg-logical-slot-get-changes">、<function>pg_logical_slot_get_changes</function></link>、<link linkend="pg-logical-slot-peek-changes">、<function>pg_logical_slot_peek_changes</function></link>がロジカルフェイルオーバースロットに使用されると、<varname>synchronized_standby_slots</varname>で指定されたすべての物理スロットでWAL受信が確認されるまでブロックします。
       </para>
       <para>
<!--
        The standbys corresponding to the physical replication slots in
        <varname>synchronized_standby_slots</varname> must configure
        <literal>sync_replication_slots = true</literal> so they can receive
        logical failover slot changes from the primary.
-->
<varname>synchronized_standby_slots</varname>内の物理レプリケーションスロットに対応するスタンバイは、<literal>sync_replication_slots = true</literal>を設定して、プライマリからロジカルフェイルオーバースロットの変更を受信できるようにする必要があります。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-replication-primary">
<!--
     <title>Primary Server</title>
-->
     <title>プライマリサーバ</title>

     <para>
<!--
      These parameters can be set on the primary server that is
      to send replication data to one or more standby servers.
      Note that in addition to these parameters,
      <xref linkend="guc-wal-level"/> must be set appropriately on the primary
      server, and optionally WAL archiving can be enabled as
      well (see <xref linkend="runtime-config-wal-archiving"/>).
      The values of these parameters on standby servers are irrelevant,
      although you may wish to set them there in preparation for the
      possibility of a standby becoming the primary.
-->
これらのパラメータはレプリケーションデータを１つ、またはそれ以上複数のスタンバイサーバに送るプライマリサーバ上で設定することができます。
これらパラメータに加え、<xref linkend="guc-wal-level"/>はプライマリサーバ上で適切に設定される必要があり、オプションとしてWALアーカイブを有効にしてもかまいません（<xref linkend="runtime-config-wal-archiving"/>を参照してください）。
スタンバイサーバがプライマリサーバになるかもしれない状況に備え、それらのパラメータをスタンバイサーバで設定したいと考えたとしても、スタンバイサーバ上でのパラメータの値は意味をなしません。
     </para>

    <variablelist>

     <varlistentry id="guc-synchronous-standby-names" xreflabel="synchronous_standby_names">
      <term><varname>synchronous_standby_names</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>synchronous_standby_names</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>synchronous_standby_names</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies a list of standby servers that can support
        <firstterm>synchronous replication</firstterm>, as described in
        <xref linkend="synchronous-replication"/>.
        There will be one or more active synchronous standbys;
        transactions waiting for commit will be allowed to proceed after
        these standby servers confirm receipt of their data.
        The synchronous standbys will be those whose names appear
        in this list, and
        that are both currently connected and streaming data in real-time
        (as shown by a state of <literal>streaming</literal> in the
        <link linkend="monitoring-pg-stat-replication-view">
        <structname>pg_stat_replication</structname></link> view).
        Specifying more than one synchronous standby can allow for very high
        availability and protection against data loss.
-->
<xref linkend="synchronous-replication"/>で説明されているように、<firstterm>同期レプリケーション</firstterm>をサポート可能なスタンバイサーバのリストを指定します。
活動中の同期スタンバイサーバは1つまたはそれ以上です。
コミットを待機しているトランザクションは、このスタンバイサーバがそのデータの受信を確認してから処理の継続が許可されます。
同期スタンバイサーバはこのリストに名前が挙げられていており、現時点で接続され、そしてデータをリアルタイムでストリーミングしているものです（<link linkend="monitoring-pg-stat-replication-view"><structname>pg_stat_replication</structname></link> ビューにおいて<literal>streaming</literal>状態として示されています）。
このリストの後の方に記載されているその他のスタンバイサーバは潜在的に同期スタンバイサーバになることを示しています。
二つ以上の同期スタンバイサーバ名を指定することで、かなりの高可用性とデータ損失に対する保護が得られます。
       </para>
       <para>
<!--
        The name of a standby server for this purpose is the
        <varname>application_name</varname> setting of the standby, as set in the
        standby's connection information.  In case of a physical replication
        standby, this should be set in the <varname>primary_conninfo</varname>
        setting; the default is the setting of <xref linkend="guc-cluster-name"/>
        if set, else <literal>walreceiver</literal>.
        For logical replication, this can be set in the connection
        information of the subscription, and it defaults to the
        subscription name.  For other replication stream consumers,
        consult their documentation.
-->
この目的のためのスタンバイサーバ名は、スタンバイの接続情報で指定された、スタンバイの<varname>application_name</varname>設定です。
物理レプリケーションスタンバイでは、<varname>primary_conninfo</varname>設定です。
デフォルトは<xref linkend="guc-cluster-name"/>の設定で、さもなければ<literal>walreceiver</literal>です。
論理レプリケーションでは、サブスクリプションの接続情報で設定でき、デフォルトはサブスクリプション名です。
それ以外のレプリケーションストリームの消費者については、それぞれのドキュメントをご覧ください。
       </para>
       <para>
<!--
        This parameter specifies a list of standby servers using
        either of the following syntaxes:
-->
このパラメータは、以下の構文のいずれかを用いてスタンバイサーバのリストを指定します。
<synopsis>
[FIRST] <replaceable class="parameter">num_sync</replaceable> ( <replaceable class="parameter">standby_name</replaceable> [, ...] )
ANY <replaceable class="parameter">num_sync</replaceable> ( <replaceable class="parameter">standby_name</replaceable> [, ...] )
<replaceable class="parameter">standby_name</replaceable> [, ...]
</synopsis>
<!--
        where <replaceable class="parameter">num_sync</replaceable> is
        the number of synchronous standbys that transactions need to
        wait for replies from,
        and <replaceable class="parameter">standby_name</replaceable>
        is the name of a standby server.
        <replaceable class="parameter">num_sync</replaceable>
        must be an integer value greater than zero.
        <literal>FIRST</literal> and <literal>ANY</literal> specify the method to choose
        synchronous standbys from the listed servers.
-->
《マッチ度[70.171674]》ここで、<replaceable class="parameter">num_sync</replaceable>は、トランザクションが応答を待機する必要のある同期スタンバイの数です。
<replaceable class="parameter">standby_name</replaceable>は、スタンバイサーバの名前です。
<literal>FIRST</literal>と<literal>ANY</literal>は、リスト中のサーバから同期スタンバイを選ぶ方法を指定します。
《機械翻訳》ここで、<replaceable class="parameter">num_sync</replaceable>はトランザクションが応答を待機する必要がある同期的スタンバイの数、<replaceable class="parameter">standby_名前</replaceable>はスタンバイサーバの名前です。
<replaceable class="parameter">num_sync</replaceable>は整数の値より大きいゼロである必要があります。
<literal>FIRST</literal>および<literal>ANY</literal>メソッドを指定して、リストされたサーバから同期的スタンバイを選択します。
       </para>
       <para>
<!--
        The keyword <literal>FIRST</literal>, coupled with
        <replaceable class="parameter">num_sync</replaceable>, specifies a
        priority-based synchronous replication and makes transaction commits
        wait until their WAL records are replicated to
        <replaceable class="parameter">num_sync</replaceable> synchronous
        standbys chosen based on their priorities. For example, a setting of
        <literal>FIRST 3 (s1, s2, s3, s4)</literal> will cause each commit to wait for
        replies from three higher-priority standbys chosen from standby servers
        <literal>s1</literal>, <literal>s2</literal>, <literal>s3</literal> and <literal>s4</literal>.
        The standbys whose names appear earlier in the list are given higher
        priority and will be considered as synchronous. Other standby servers
        appearing later in this list represent potential synchronous standbys.
        If any of the current synchronous standbys disconnects for whatever
        reason, it will be replaced immediately with the next-highest-priority
        standby. The keyword <literal>FIRST</literal> is optional.
-->
キーワード<literal>FIRST</literal>を<replaceable class="parameter">num_sync</replaceable>と組み合わせると、優先度に基づく同期レプリケーションを指定し、優先度に基づいて選ばれた<replaceable class="parameter">num_sync</replaceable>個の同期スタンバイにWALレコードがレプリケーションされるまで、トランザクションのコミットは待機します。
たとえば<literal>FIRST 3 (s1, s2, s3, s4)</literal>とすると、<literal>s1</literal>、<literal>s2</literal>、<literal>s3</literal>、<literal>s4</literal>の中から選ばれた優先順位の高い3つのスタンバイサーバが応答を返すまでコミットは待機します。
リストの中で前の方に名前が出現するスタンバイには高い優先度が与えられ、同期と見なされます。
それ以外のリストの中で後の方に名前が上がっているスタンバイサーバは、潜在的な同期スタンバイであることを表しています。
どんな理由であれ、現在の同期スタンバイが切断されると、次に高い優先度を持つスタンバイに直ちに取って代わられます。
キーワード<literal>FIRST</literal>はオプションです。
       </para>
       <para>
<!--
        The keyword <literal>ANY</literal>, coupled with
        <replaceable class="parameter">num_sync</replaceable>, specifies a
        quorum-based synchronous replication and makes transaction commits
        wait until their WAL records are replicated to <emphasis>at least</emphasis>
        <replaceable class="parameter">num_sync</replaceable> listed standbys.
        For example, a setting of <literal>ANY 3 (s1, s2, s3, s4)</literal> will cause
        each commit to proceed as soon as at least any three standbys of
        <literal>s1</literal>, <literal>s2</literal>, <literal>s3</literal> and <literal>s4</literal>
        reply.
-->
キーワード<literal>ANY</literal>を<replaceable class="parameter">num_sync</replaceable>と組み合わせると、クォーラムに基づく同期レプリケーションを指定し、列挙されたスタンバイのうち<emphasis>少なくとも</emphasis><replaceable class="parameter">num_sync</replaceable>個の同期スタンバイにWALレコードがレプリケーションされるまで、トランザクションのコミットを待たせます。
たとえば<literal>ANY 3 (s1, s2, s3, s4)</literal>とすると、<literal>s1</literal>、<literal>s2</literal>、<literal>s3</literal>、<literal>s4</literal>のうちの少なくとも3つが応答を返した時点でコミットが進行します。
       </para>
       <para>
<!--
        <literal>FIRST</literal> and <literal>ANY</literal> are case-insensitive. If these
        keywords are used as the name of a standby server,
        its <replaceable class="parameter">standby_name</replaceable> must
        be double-quoted.
-->
<literal>FIRST</literal>と<literal>ANY</literal>は、大文字小文字を区別しません。
もしこれらのキーワードをスタンバイサーバの名前に使う場合は、<replaceable class="parameter">standby_name</replaceable>は二重引用符で囲わなければなりません。
       </para>
       <para>
<!--
        The third syntax was used before <productname>PostgreSQL</productname>
        version 9.6 and is still supported. It's the same as the first syntax
        with <literal>FIRST</literal> and
        <replaceable class="parameter">num_sync</replaceable> equal to 1.
        For example, <literal>FIRST 1 (s1, s2)</literal> and <literal>s1, s2</literal> have
        the same meaning: either <literal>s1</literal> or <literal>s2</literal> is chosen
        as a synchronous standby.
-->
3番目の構文は、<productname>PostgreSQL</productname> 9.6よりも前のバージョンで用いられていたもので、依然としてサポートされています。
最初の構文で、<literal>FIRST</literal>、<replaceable class="parameter">num_sync</replaceable>を1とした時と同じです。
たとえば、<literal>FIRST 1 (s1, s2)</literal>と<literal>s1, s2</literal>は同じ意味です。
<literal>s1</literal>か<literal>s2</literal>が同期スタンバイとして選ばれます。
       </para>
       <para>
<!--
        The special entry <literal>*</literal> matches any standby name.
-->
特別なエントリ<literal>*</literal>は、すべてのスタンバイ名に一致します。
       </para>
       <para>
<!--
        There is no mechanism to enforce uniqueness of standby names.  In case
        of duplicates one of the matching standbys will be considered as
        higher priority, though exactly which one is indeterminate.
-->
スタンバイの一意性を強制する仕組みはありません。
重複があった場合、一致したスタンバイは優先順位が高いと見なされますが、どれが選ばれるかは非決定的です。
       </para>
       <note>
        <para>
<!--
         Each <replaceable class="parameter">standby_name</replaceable>
         should have the form of a valid SQL identifier, unless it
         is <literal>*</literal>.  You can use double-quoting if necessary.  But note
         that <replaceable class="parameter">standby_name</replaceable>s are
         compared to standby application names case-insensitively, whether
         double-quoted or not.
-->
各々の<replaceable class="parameter">standby_name</replaceable>は、<literal>*</literal>である場合を除き、SQL識別子の形式を取らなければなりません。
二重引用符を用いることもできます。
しかし、二重引用符の有無に関わらず、<replaceable class="parameter">standby_name</replaceable>とスタンバイのアプリケーション名の比較は、大文字小文字の区別なしに行われることに注意してください。
        </para>
       </note>
       <para>
<!--
        If no synchronous standby names are specified here, then synchronous
        replication is not enabled and transaction commits will not wait for
        replication.  This is the default configuration.  Even when
        synchronous replication is enabled, individual transactions can be
        configured not to wait for replication by setting the
        <xref linkend="guc-synchronous-commit"/> parameter to
        <literal>local</literal> or <literal>off</literal>.
-->
ここに同期スタンバイ名が指定されていない場合、同期レプリケーションは有効とはならず、トランザクションコミットはレプリケーションを待機しません。これがデフォルトの設定です。同期レプリケーションが有効であっても、<xref linkend="guc-synchronous-commit"/>パラメータを<literal>local</literal> または <literal>off</literal>に設定することにより、個別のトランザクションをレプリケーションに対して待機しないように設定できます。
       </para>
       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-replication-standby">
<!--
     <title>Standby Servers</title>
-->
     <title>スタンバイサーバ</title>

     <para>
<!--
      These settings control the behavior of a
      <link linkend="standby-server-operation">standby server</link>
      that is
      to receive replication data.  Their values on the primary server
      are irrelevant.
-->
これらの設定はレプリケーションデータを受け取る<link linkend="standby-server-operation">スタンバイサーバ</link>の動作を管理します。
プライマリサーバ上のこれらの値は無意味です。
     </para>

    <variablelist>

       <varlistentry id="guc-primary-conninfo" xreflabel="primary_conninfo">
        <term><varname>primary_conninfo</varname> (<type>string</type>)
        <indexterm>
          <primary><varname>primary_conninfo</varname> configuration parameter</primary>
        </indexterm>
        <indexterm>
          <primary><varname>primary_conninfo</varname>設定パラメータ</primary>
        </indexterm>
        </term>
        <listitem>
         <para>
<!--
          Specifies a connection string to be used for the standby server
          to connect with a sending server. This string is in the format
          described in <xref linkend="libpq-connstring"/>. If any option is
          unspecified in this string, then the corresponding environment
          variable (see <xref linkend="libpq-envars"/>) is checked. If the
          environment variable is not set either, then
          defaults are used.
-->
スタンバイサーバが送信サーバに接続するための接続文字列を指定します。
この文字列は、<xref linkend="libpq-connstring"/>で説明されている書式で記述されます。
この文字列に何のオプションも指定されていない場合、これに対応する環境変数 (<xref linkend="libpq-envars"/> 参照) が確認されます。
環境変数も設定されていなければデフォルトの値が使われます。
         </para>
         <para>
<!--
          The connection string should specify the host name (or address)
          of the sending server, as well as the port number if it is not
          the same as the standby server's default.
          Also specify a user name corresponding to a suitably-privileged role
          on the sending server (see
          <xref linkend="streaming-replication-authentication"/>).
          A password needs to be provided too, if the sender demands password
          authentication.  It can be provided in the
          <varname>primary_conninfo</varname> string, or in a separate
          <filename>~/.pgpass</filename> file on the standby server (use
          <literal>replication</literal> as the database name).
-->
接続文字列では、プライマリサーバのホスト名（またはアドレス）、スタンバイサーバのデフォルトと異なるのであればポート番号も指定する必要があります。
また、送信サーバ上で適切な権限を保有するロールのユーザを指定しなければなりません (<xref linkend="streaming-replication-authentication"/> 参照)。
送信サーバがパスワード認証を要求するのであれば、パスワードも記述される必要があります。
パスワードは <varname>primary_conninfo</varname>に記述することもできますし、スタンバイサーバ上の分離されたファイル<filename>~/.pgpass</filename>に記述することもできます (データベース名には <literal>replication</literal> を使います)。
         </para>
         <para>
<!--
          For replication slot synchronization (see
          <xref linkend="logicaldecoding-replication-slots-synchronization"/>),
          it is also necessary to specify a valid <literal>dbname</literal>
          in the <varname>primary_conninfo</varname> string. This will only be
          used for slot synchronization. It is ignored for streaming.
-->
レプリケーションスロットを同期（<xref linkend="logicaldecoding-replication-slots-synchronization"/>を参照）するために、<varname>primary_conninfo</varname>文字列に有効な<literal>dbname</literal>を指定する必要もあります。
これはスロットの同期にのみ使用されます。
ストリーミングでは無視されます。
         </para>
         <para>
<!--
          This parameter can only be set in the <filename>postgresql.conf</filename>
          file or on the server command line.
          If this parameter is changed while the WAL receiver process is
          running, that process is signaled to shut down and expected to
          restart with the new setting (except if <varname>primary_conninfo</varname>
          is an empty string).
          This setting has no effect if the server is not in standby mode.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
WAL受信プロセスが実行中にこのパラメータが変更されると、そのプロセスにシグナルが送られ、新しい設定で再起動するために停止します（<varname>primary_conninfo</varname>が空文字の場合を除きます。）
サーバがスタンバイモードでなければこの設定は無効となります。
         </para>
        </listitem>
       </varlistentry>
       <varlistentry id="guc-primary-slot-name" xreflabel="primary_slot_name">
        <term><varname>primary_slot_name</varname> (<type>string</type>)
        <indexterm>
          <primary><varname>primary_slot_name</varname> configuration parameter</primary>
        </indexterm>
        <indexterm>
          <primary><varname>primary_slot_name</varname>設定パラメータ</primary>
        </indexterm>
        </term>
        <listitem>
         <para>
<!--
          Optionally specifies an existing replication slot to be used when
          connecting to the sending server via streaming replication to control
          resource removal on the upstream node
          (see <xref linkend="streaming-replication-slots"/>).
          This parameter can only be set in the <filename>postgresql.conf</filename>
          file or on the server command line.
          If this parameter is changed while the WAL receiver process is running,
          that process is signaled to shut down and expected to restart with the
          new setting.
          This setting has no effect if <varname>primary_conninfo</varname> is not
          set or the server is not in standby mode.
-->
上流ノードのリソース削除を制御するためにストリーミングレプリケーション経由でプライマリに接続した場合、既存のレプリケーションスロットを使うように、必要に応じて指定します（<xref linkend="streaming-replication-slots"/>を参照）。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
WAL受信プロセスが実行中にこのパラメータが変更されると、そのプロセスにシグナルが送られ、新しい設定で再起動するために停止します。
<varname>primary_conninfo</varname>が設定されていない場合、この設定は無効です。
         </para>
        </listitem>
       </varlistentry>

     <varlistentry id="guc-hot-standby" xreflabel="hot_standby">
      <term><varname>hot_standby</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>hot_standby</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>hot_standby</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies whether or not you can connect and run queries during
        recovery, as described in <xref linkend="hot-standby"/>.
        The default value is <literal>on</literal>.
        This parameter can only be set at server start. It only has effect
        during archive recovery or in standby mode.
-->
<xref linkend="hot-standby"/>に記載されている通り、リカバリの最中に接続し、そして問い合わせを実行できるか否かを設定します。デフォルト値は<literal>on</literal>です。
このパラメータはサーバ起動時のみ設定可能です。
これは、アーカイブリカバリ期間、又はスタンバイモードにある場合にのみ効果をもたらします。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-standby-archive-delay" xreflabel="max_standby_archive_delay">
      <term><varname>max_standby_archive_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_standby_archive_delay</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_standby_archive_delay</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When hot standby is active, this parameter determines how long the
        standby server should wait before canceling standby queries that
        conflict with about-to-be-applied WAL entries, as described in
        <xref linkend="hot-standby-conflict"/>.
        <varname>max_standby_archive_delay</varname> applies when WAL data is
        being read from WAL archive (and is therefore not current).
        If this value is specified without units, it is taken as milliseconds.
        The default is 30 seconds.
        A value of -1 allows the standby to wait forever for conflicting
        queries to complete.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
ホットスタンバイがアクティブな場合、このパラメータは、<xref linkend="hot-standby-conflict"/>で説明されているように、適用されようとしているWALエントリと競合するスタンバイクエリをキャンセルするまで待機する時間を決定します。
<varname>max_standby_archive_delay</varname>は、WALデータがWALアーカイブから読み取られるときに適用されます（したがって最新ではありません）。
この値が単位なしで指定された場合、ミリ秒単位で取得されます。
デフォルトは30秒です。
値-1を指定すると、スタンバイは競合するクエリが完了するまで永遠に待機します。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
       <para>
<!--
        Note that <varname>max_standby_archive_delay</varname> is not the same as the
        maximum length of time a query can run before cancellation; rather it
        is the maximum total time allowed to apply any one WAL segment's data.
        Thus, if one query has resulted in significant delay earlier in the
        WAL segment, subsequent conflicting queries will have much less grace
        time.
-->
<varname>max_standby_archive_delay</varname>はキャンセル前に問い合わせが実行できる最大の時間の長さと同じでないことに注意してください。
むしろ、任意の１つのWALセグメントのデータの適用のために許される最大合計時間です。
従って、ある問い合わせによりWALセグメント内の前の部分で大幅な遅延となった場合、その後の衝突する問い合わせの猶予時間はずっと短くなります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-standby-streaming-delay" xreflabel="max_standby_streaming_delay">
      <term><varname>max_standby_streaming_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_standby_streaming_delay</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_standby_streaming_delay</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When hot standby is active, this parameter determines how long the
        standby server should wait before canceling standby queries that
        conflict with about-to-be-applied WAL entries, as described in
        <xref linkend="hot-standby-conflict"/>.
        <varname>max_standby_streaming_delay</varname> applies when WAL data is
        being received via streaming replication.
        If this value is specified without units, it is taken as milliseconds.
        The default is 30 seconds.
        A value of -1 allows the standby to wait forever for conflicting
        queries to complete.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
ホットスタンバイがアクティブな場合、このパラメータは、 <xref linkend="hot-standby-conflict"/>で説明されているように、適用されようとしているWALエントリと競合するスタンバイクエリをキャンセルするまで待機する時間を決定します。
<varname>max_standby_streaming_delay</varname>は、ストリーミングレプリケーションを介してWALデータを受信するときに適用されます。
この値が単位なしで指定された場合、ミリ秒単位で取得されます。
デフォルトは30秒です。
値-1を指定すると、スタンバイは競合するクエリが完了するまで永久に待機します。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
       <para>
<!--
        Note that <varname>max_standby_streaming_delay</varname> is not the same as
        the maximum length of time a query can run before cancellation; rather
        it is the maximum total time allowed to apply WAL data once it has
        been received from the primary server.  Thus, if one query has
        resulted in significant delay, subsequent conflicting queries will
        have much less grace time until the standby server has caught up
        again.
-->
<varname>max_standby_streaming_delay</varname>はキャンセル前に問い合わせが実行できる最大の時間の長さと同じでないことに注意してください。
むしろ、プライマリサーバから一度受け取られたWALデータを適用するために許される最大合計時間です。
従って、ある問い合わせが大幅な遅延を起こした場合、その後の衝突する問い合わせは、スタンバイサーバがふたたび遅れを取り戻すまでの間、猶予時間はずっと短くなります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-receiver-create-temp-slot" xreflabel="wal_receiver_create_temp_slot">
      <term><varname>wal_receiver_create_temp_slot</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_receiver_create_temp_slot</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_receiver_create_temp_slot</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies whether the WAL receiver process should create a temporary replication
        slot on the remote instance when no permanent replication slot to use
        has been configured (using <xref linkend="guc-primary-slot-name"/>).
        The default is off.  This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
        If this parameter is changed while the WAL receiver process is running,
        that process is signaled to shut down and expected to restart with
        the new setting.
-->
永続レプリケーションスロットが(<xref linkend="guc-primary-slot-name"/>を使って)作成されない設定になっている時に、WAL受信プロセスがリモートインスタンス上に一時レプリケーションスロットを作るかどうかを指定します。
デフォルトはoffです。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
WAL受信プロセスが実行中にこのパラメータが変更されると、そのプロセスにシグナルが送られ、新しい設定で再起動するために停止します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-receiver-status-interval" xreflabel="wal_receiver_status_interval">
      <term><varname>wal_receiver_status_interval</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_receiver_status_interval</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_receiver_status_interval</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
      <para>
<!--
       Specifies the minimum frequency for the WAL receiver
       process on the standby to send information about replication progress
       to the primary or upstream standby, where it can be seen using the
       <link linkend="monitoring-pg-stat-replication-view">
       <structname>pg_stat_replication</structname></link>
       view.  The standby will report
       the last write-ahead log location it has written, the last position it
       has flushed to disk, and the last position it has applied.
       This parameter's value is the maximum amount of time between reports.
       Updates are sent each time the write or flush positions change, or as
       often as specified by this parameter if set to a non-zero value.
       There are additional cases where updates are sent while ignoring this
       parameter; for example, when processing of the existing WAL completes
       or when <varname>synchronous_commit</varname> is set to
       <literal>remote_apply</literal>.
       Thus, the apply position may lag slightly behind the true position.
       If this value is specified without units, it is taken as seconds.
       The default value is 10 seconds. This parameter can only be set in
       the <filename>postgresql.conf</filename> file or on the server
       command line.
-->
スタンバイサーバ上のWAL受信プロセスがプライマリ、または上位サーバに対してレプリケーションの進捗情報を送信する最小頻度を指定します。
送信された進捗情報は<link linkend="monitoring-pg-stat-replication-view"><structname>pg_stat_replication</structname></link>ビューにより確認することが可能です。
スタンバイサーバは書き込みがされた直近の先行書き込みログ（WAL）位置、ディスクにフラッシュされた直近のログ位置、およびリカバリ適用された直近のログ位置を報告します。
このパラメータの値がそれぞれの報告間における最大の時間間隔です。
書き込み、またはフラッシュ位置が変更される毎、あるいはこのパラメータがゼロ以外なら、最低でもこのパラメータで設定された頻度で更新情報が送信されます。
他にもこのパラメータを無視して更新情報が送信される場合があります。
たとえば、既存のWALの処理が完了するか、<varname>synchronous_commit</varname>が<literal>remote_apply</literal>に設定されている場合です。
従って、適用位置は真の位置よりも少し後ろにずれることがあります。
この値が単位なしで指定された場合は、秒単位であるとみなします。
デフォルトの値は10秒です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
      </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-hot-standby-feedback" xreflabel="hot_standby_feedback">
      <term><varname>hot_standby_feedback</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>hot_standby_feedback</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>hot_standby_feedback</varname> 設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies whether or not a hot standby will send feedback to the primary
        or upstream standby
        about queries currently executing on the standby. This parameter can
        be used to eliminate query cancels caused by cleanup records, but
        can cause database bloat on the primary for some workloads.
        Feedback messages will not be sent more frequently than once per
        <varname>wal_receiver_status_interval</varname>. The default value is
        <literal>off</literal>. This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
-->
ホットスタンバイがスタンバイサーバ上で現在処理を行っている問い合わせについて、プライマリまたは上位サーバにフィードバックを送るか否かを指定します。
このパラメータはレコードの回収に起因する問い合わせの取り消しを排除するために使用することができます。
しかし、いくつかのワークロードに対してはプライマリサーバ上でのデータベース肥大の原因となります。
フィードバックメッセージは<varname>wal_receiver_status_interval</varname>毎に、2回以上送信されません。
デフォルトの値は<literal>off</literal>です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
       <para>
<!--
        If cascaded replication is in use the feedback is passed upstream
        until it eventually reaches the primary.  Standbys make no other use
        of feedback they receive other than to pass upstream.
-->
カスケードレプリケーションが使用されている場合、フィードバックは最終的にプライマリに到達するまで上位サーバに転送されます。スタンバイは上位に転送する以外、受け取ったフィードバックを他に使用しません。
       </para>
       <para>
<!--
        Note that if the clock on standby is moved ahead or backward, the
        feedback message might not be sent at the required interval.  In
        extreme cases, this can lead to a prolonged risk of not removing dead
        rows on the primary for extended periods, as the feedback mechanism is
        based on timestamps.
-->
《機械翻訳》スタンバイのノートを前後に移動すると、必要なクロックでフィードバックメッセージが送信されない可能性があるインターバル。
極端な場合、フィードバックのリスクはタイムスタンプに基づいているため、拡張期間のプライマリで不要な行が削除されないメカニズムが長くなる可能性があります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-receiver-timeout" xreflabel="wal_receiver_timeout">
      <term><varname>wal_receiver_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_receiver_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_receiver_timeout</varname> 設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Terminate replication connections that are inactive for longer
        than this amount of time. This is useful for
        the receiving standby server to detect a primary node crash or network
        outage.
        If this value is specified without units, it is taken as milliseconds.
        The default value is 60 seconds.
        A value of zero disables the timeout mechanism.
        This parameter can only be set in
        the <filename>postgresql.conf</filename> file or on the server
        command line.
-->
指定された時間より長い間、活動していないレプリケーション接続は停止します。
このことは受信するスタンバイサーバがプライマリノードの機能停止、またはネットワーク停止を検出するのに便利です。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
デフォルト値は60秒です。
値ゼロは時間切れメカニズムを無効にします。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-retrieve-retry-interval" xreflabel="wal_retrieve_retry_interval">
      <term><varname>wal_retrieve_retry_interval</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_retrieve_retry_interval</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_retrieve_retry_interval</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies how long the standby server should wait when WAL data is not
        available from any sources (streaming replication,
        local <filename>pg_wal</filename> or WAL archive) before trying
        again to retrieve WAL data.
        If this value is specified without units, it is taken as milliseconds.
        The default value is 5 seconds.
        This parameter can only be set in
        the <filename>postgresql.conf</filename> file or on the server
        command line.
-->
WALデータがソース(ストリーミングレプリケーション、ローカルの<filename>pg_wal</filename>、またはWALアーカイブ)から取得できない時に、スタンバイサーバがWALデータ受信をリトライするまでにどの位の時間待つべきかを指定します。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
デフォルト値は5秒です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
       <para>
<!--
        This parameter is useful in configurations where a node in recovery
        needs to control the amount of time to wait for new WAL data to be
        available. For example, in archive recovery, it is possible to
        make the recovery more responsive in the detection of a new WAL
        file by reducing the value of this parameter. On a system with
        low WAL activity, increasing it reduces the amount of requests necessary
        to access WAL archives, something useful for example in cloud
        environments where the number of times an infrastructure is accessed
        is taken into account.
-->
このパラメータは、リカバリ対象のノードにおいて、新しいWALデータが読み込み可能になるまでの待ち時間を制御する必要のある時に有用です。
たとえば、アーカイブリカバリにおいては、このパラメータの値を小さくすることにより、新しいWALファイルを検出する際にリカバリの応答を早くすることができます。
WALの生成頻度が少ないシステムでは、この値を大きくすることにより、WALアーカイブへのアクセス頻度を減らすことができます。
これは、たとえば基盤へのアクセス回数が課金対象になるクラウド環境において、有用です。
       </para>
       <para>
<!--
        In logical replication, this parameter also limits how often a failing
        replication apply worker or table synchronization worker will be
        respawned.
-->
《マッチ度[67.123288]》論理レプリケーションでは、このパラメータによって、失敗したレプリケーション適用ワーカーが再生成される頻度も制限されます。
《機械翻訳》論理レプリケーションでは、このパラメータによって、失敗したレプリケーション適用ワーカーまたはテーブル同期化ワーカーが再生成される頻度も制限されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-min-apply-delay" xreflabel="recovery_min_apply_delay">
      <term><varname>recovery_min_apply_delay</varname> (<type>integer</type>)
      <indexterm>
        <primary><varname>recovery_min_apply_delay</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_min_apply_delay</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        By default, a standby server restores WAL records from the
        sending server as soon as possible. It may be useful to have a time-delayed
        copy of the data, offering opportunities to correct data loss errors.
        This parameter allows you to delay recovery by a specified amount
        of time.  For example, if
        you set this parameter to <literal>5min</literal>, the standby will
        replay each transaction commit only when the system time on the standby
        is at least five minutes past the commit time reported by the primary.
        If this value is specified without units, it is taken as milliseconds.
        The default is zero, adding no delay.
-->
デフォルトでは、スタンバイサーバは可能な限り早くプライマリからWALレコードをリストアします。
時間遅れのデータのコピーを持つことで、データ損失エラーを修正する機会を提供するのは有用かもしれません。
このパラメータを使う事で、決まった時間だけリカバリを遅らせることができます。
例えば、パラメータに<literal>5min</literal>と指定した場合、各トランザクションについて、スタンバイのシステム時刻が、プライマリから報告されたコミット時刻より5分以上経過している場合のみ、スタンバイサーバはコミットを再生します。
単位を指定しない場合、ミリ秒として扱われます。
デフォルトは0で、遅延を与えません。
       </para>
       <para>
<!--
        It is possible that the replication delay between servers exceeds the
        value of this parameter, in which case no delay is added.
        Note that the delay is calculated between the WAL time stamp as written
        on primary and the current time on the standby. Delays in transfer
        because of network lag or cascading replication configurations
        may reduce the actual wait time significantly. If the system
        clocks on primary and standby are not synchronized, this may lead to
        recovery applying records earlier than expected; but that is not a
        major issue because useful settings of this parameter are much larger
        than typical time deviations between servers.
-->
サーバ間のレプリケーション遅延はパラメータの値を上回る可能性があり、その場合には遅延は追加されません。
遅延は、プライマリサーバで書かれたWALのタイムスタンプと、スタンバイサーバの現在時刻を使って計算されていることに注意してください。
ネットワークの遅延やカスケーディングレプリケーション構成によるデータ転送の遅延は、実際の待ち時間を大幅に減らすかもしれません。
もし、プライマリサーバとスタンバイサーバのシステムクロックが同期されていない場合、期待値よりも早くレコードのリカバリを始めるかもしれません。
しかし、このパラメータの有用な設定値は典型的なサーバ間の時間のずれよりもずっと大きいので、それらは大きな問題ではありません。
       </para>
       <para>
<!--
        The delay occurs only on WAL records for transaction commits.
        Other records are replayed as quickly as possible, which
        is not a problem because MVCC visibility rules ensure their effects
        are not visible until the corresponding commit record is applied.
-->
遅延はトランザクションコミットのWALレコードだけで発生します。
他のレコードは可能な限り早く再生されるでしょう。
対応する（トランザクション）コミットレコードが適用されるまではその効果が不可視であることがMVCCの可視ルールによって保証されているため、他のレコードが可能な限り早く再生されることは問題にはなりません。
       </para>
       <para>
<!--
        The delay occurs once the database in recovery has reached a consistent
        state, until the standby is promoted or triggered. After that the standby
        will end recovery without further waiting.
-->
ひとたびリカバリ中のデータベースが整合性のとれた状態になれば、スタンバイサーバが昇格またはトリガになるまで、遅延が発生します。
その後、スタンバイサーバはそれ以上待たずにリカバリを終了します。
       </para>
       <para>
<!--
        WAL records must be kept on the standby until they are ready to be
        applied. Therefore, longer delays will result in a greater accumulation
        of WAL files, increasing disk space requirements for the standby's
        <filename>pg_wal</filename> directory.
-->
WALレコードは、適用される準備が整うまでスタンバイに保持されなければなりません。
したがって、遅延が長くなるとWALファイルの蓄積量が増加し、スタンバイの<filename>pg_wal</filename>ディレクトリに必要なディスク容量が増加します。
       </para>
       <para>
<!--
        This parameter is intended for use with streaming replication deployments;
        however, if the parameter is specified it will be honored in all cases
        except crash recovery.

        <varname>hot_standby_feedback</varname> will be delayed by use of this feature
        which could lead to bloat on the primary; use both together with care.
-->
このパラメータはストリーミングレプリケーション配信で使われることを目的としていますが、パラメータが指定されていると、クラッシュリカバリを除くすべてのケースで使用されます。
この機能を使うことによって<varname>hot_standby_feedback</varname>が遅延され、プライマリサーバの肥大化に繋がる可能性があります。両方同時に使う場合には注意して使ってください。

        <warning>
         <para>
<!--
          Synchronous replication is affected by this setting when <varname>synchronous_commit</varname>
          is set to <literal>remote_apply</literal>; every <literal>COMMIT</literal>
          will need to wait to be applied.
-->
<varname>synchronous_commit</varname>が<literal>remote_apply</literal>に設定されていれば、同期レプリケーションは、この設定に影響を受けます。各<literal>COMMIT</literal>は適用されるのを待つことが必要です。
         </para>
        </warning>
       </para>
       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-sync-replication-slots" xreflabel="sync_replication_slots">
      <term><varname>sync_replication_slots</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>sync_replication_slots</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>sync_replication_slots</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        It enables a physical standby to synchronize logical failover slots
        from the primary server so that logical subscribers can resume
        replication from the new primary server after failover.
-->
これにより、物理スタンバイはプライマリサーバからのロジカルフェイルオーバースロットの同期が可能となり、ロジカルサブスクライバーはフェイルオーバー後に新しいプライマリサーバからレプリケーションを再開できます。
       </para>
       <para>
<!--
        It is disabled by default. This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
-->
このパラメータはデフォルトで無効です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>
     </variablelist>
    </sect2>

    <sect2 id="runtime-config-replication-subscriber">
<!--
     <title>Subscribers</title>
-->
     <title>サブスクライバー</title>

     <para>
<!--
      These settings control the behavior of a logical replication subscriber.
      Their values on the publisher are irrelevant.
      See <xref linkend="logical-replication-config"/> for more details.
-->
これらの設定項目は、論理レプリケーションのサブスクライバーの挙動を制御します。
パブリッシャーにおける設定値とは無関係です。
詳細については<xref linkend="logical-replication-config"/>を参照してください。
     </para>

     <variablelist>

     <varlistentry id="guc-max-active-replication-origins" xreflabel="max_active_replication_origins">
      <term><varname>max_active_replication_origins</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_active_replication_origins</varname> configuration parameter</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies how many replication origins (see
        <xref linkend="replication-origins"/>) can be tracked simultaneously,
        effectively limiting how many logical replication subscriptions can
        be created on the server. Setting it to a lower value than the current
        number of tracked replication origins (reflected in
        <link linkend="view-pg-replication-origin-status">pg_replication_origin_status</link>)
        will prevent the server from starting. It defaults to 10. This parameter
        can only be set at server start.

        <literal>max_active_replication_origins</literal> must be set to at least the
        number of subscriptions that will be added to the subscriber, plus some
        reserve for table synchronization.
-->
《マッチ度[78.739003]》サブスクライバー側ではレプリケーション原点(origin)（<xref linkend="replication-origins"/>参照）をいくつ並行して追跡できるかを指定します。
これは実質的に論理レプリケーションのサブスクリプションをサーバ上にいくつ作ることができるかを制限します。
現在追跡しているレプリケーション原点の数（<link linkend="view-pg-replication-origin-status">pg_replication_origin_status</link>に反映されます）よりも小さい値を設定すると、サーバが起動しなくなります。
<literal>max_replication_slots</literal>は、少なくともサブスクライバーに追加されるサブスクリプションの数に、テーブル同期用の予備を加えた数に設定する必要があります。
<xref linkend="replication-origins"/>
《機械翻訳》同時に追跡できるレプリケーション起点（<xref linkend="replication-origins"/>を参照）の数を指定し、その論理レプリケーションで作成できるサーバサブスクリプションの数を効果的に制限します。
 <link linkend="view-pg-replication-origin-status">pg_replication_origin_status</link>に反映される追跡される現在のレプリケーション起点番号よりも小さい値に設定すると、サーバは開始できなくなります。
デフォルトは10です。
このパラメータはサーバスタートにのみ設定できます。
<literal>max_active_replication_origins</literal>少なくともサブスクライバーに追加されるサブスクリプションの数に設定する必要があります。
プラスはテーブルの同期化のために予約します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-logical-replication-workers" xreflabel="max_logical_replication_workers">
      <term><varname>max_logical_replication_workers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_logical_replication_workers</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_logical_replication_workers</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies maximum number of logical replication workers. This includes
        leader apply workers, parallel apply workers, and table synchronization
        workers.
-->
論理レプリケーションワーカーの最大数を指定します。
これには、リーダー適用ワーカー、パラレル適用ワーカーおよびテーブル同期ワーカーが含まれます。
       </para>
       <para>
<!--
        Logical replication workers are taken from the pool defined by
        <varname>max_worker_processes</varname>.
-->
論理レプリケーションワーカーは、<varname>max_worker_processes</varname>で定義されたプールから取得されます。
       </para>
       <para>
<!--
        The default value is 4. This parameter can only be set at server
        start.
-->
デフォルト値は4です。
このパラメータはサーバ起動時にのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-sync-workers-per-subscription" xreflabel="max_sync_workers_per_subscription">
      <term><varname>max_sync_workers_per_subscription</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_sync_workers_per_subscription</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_sync_workers_per_subscription</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Maximum number of synchronization workers per subscription. This
        parameter controls the amount of parallelism of the initial data copy
        during the subscription initialization or when new tables are added.
-->
サブスクリプションごとの同期ワーカーの最大数です。
このパラメータは、サブスクリプションの初期化中、あるいは新しいテーブルが追加されたときの初期データコピーの並列度を制御します。
       </para>
       <para>
<!--
        Currently, there can be only one synchronization worker per table.
-->
今のところ、一つのテーブルにつき、同期ワーカーは一つだけです。
       </para>
       <para>
<!--
        The synchronization workers are taken from the pool defined by
        <varname>max_logical_replication_workers</varname>.
-->
同期ワーカーは、<varname>max_logical_replication_workers</varname>で定義されたプールから取得されます。
       </para>
       <para>
<!--
        The default value is 2. This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command
        line.
-->
デフォルト値は2です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-parallel-apply-workers-per-subscription" xreflabel="max_parallel_apply_workers_per_subscription">
      <term><varname>max_parallel_apply_workers_per_subscription</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_parallel_apply_workers_per_subscription</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_parallel_apply_workers_per_subscription</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Maximum number of parallel apply workers per subscription. This
        parameter controls the amount of parallelism for streaming of
        in-progress transactions with subscription parameter
        <literal>streaming = parallel</literal>.
-->
サブスクリプションごとのパラレル適用ワーカーの最大数です。
このパラメータは、サブスクリプションパラメータの<literal>streaming = parallel</literal>が指定されている進行中のトランザクションのストリーミングに対する並列度の数を制御します。
       </para>
       <para>
<!--
        The parallel apply workers are taken from the pool defined by
        <varname>max_logical_replication_workers</varname>.
-->
パラレル適用ワーカーは、<varname>max_logical_replication_workers</varname>で定義されたプールから取得されます。
       </para>
       <para>
<!--
        The default value is 2. This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command
        line.
-->
デフォルト値は2です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

   </sect1>

   <sect1 id="runtime-config-query">
<!--
    <title>Query Planning</title>
-->
    <title>問い合わせ計画</title>

    <sect2 id="runtime-config-query-enable">
<!--
     <title>Planner Method Configuration</title>
-->
     <title>プランナメソッド設定</title>

      <para>
<!--
       These configuration parameters provide a crude method of
       influencing the query plans chosen by the query optimizer. If
       the default plan chosen by the optimizer for a particular query
       is not optimal, a <emphasis>temporary</emphasis> solution is to use one
       of these configuration parameters to force the optimizer to
       choose a different plan.
       Better ways to improve the quality of the
       plans chosen by the optimizer include adjusting the planner cost
       constants (see <xref linkend="runtime-config-query-constants"/>),
       running <link linkend="sql-analyze"><command>ANALYZE</command></link> manually, increasing
       the value of the <xref
       linkend="guc-default-statistics-target"/> configuration parameter,
       and increasing the amount of statistics collected for
       specific columns using <command>ALTER TABLE SET
       STATISTICS</command>.
-->
以下の設定パラメータは、問い合わせオプティマイザが選択する問い合わせ計画に影響する大雑把な手法を提供します。
ある問い合わせに対してオプティマイザが選択したデフォルト計画が最適でない場合、<emphasis>暫定的な</emphasis>解決策は、これらの設定パラメータの1つを使用し、オプティマイザに異なる計画を選択するように仕向けることです。
オプティマイザが選択する計画の品質を改善するためのより良い方法には、プランナコスト定数を調節する（<xref linkend="runtime-config-query-constants"/>を参照）、<link linkend="sql-analyze"><command>ANALYZE</command></link>を手作業で実行する、<xref linkend="guc-default-statistics-target"/>設定パラメータの値を大きくする、<command>ALTER TABLE SET STATISTICS</command>を使用して、特定の列に対して収集される統計情報を増やす、などがあります。
      </para>

     <variablelist>
     <varlistentry id="guc-enable-async-append" xreflabel="enable_async_append">
      <term><varname>enable_async_append</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_async_append</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_async_append</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of async-aware
        append plan types. The default is <literal>on</literal>.
-->
問い合わせプランナが非同期を意識したアペンド計画型を使うのを可能あるいは不可能にします。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-bitmapscan" xreflabel="enable_bitmapscan">
      <term><varname>enable_bitmapscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary>bitmap scan</primary>
      </indexterm>
      <indexterm>
       <primary>ビットマップスキャン</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_bitmapscan</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_bitmapscan</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of bitmap-scan plan
        types. The default is <literal>on</literal>.
-->
問い合わせプランナがビットマップスキャン計画型を選択することを有効もしくは無効にします。デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-distinct-reordering" xreflabel="enable_distinct_reordering">
      <term><varname>enable_distinct_reordering</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_distinct_reordering</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's ability to reorder DISTINCT
        keys to match the input path's pathkeys. The default is <literal>on</literal>.
-->
《マッチ度[59.589041]》問い合わせプランナがギャザーマージ計画型を選択することを有効もしくは無効にします。
デフォルトは<literal>on</literal>です。
《機械翻訳》入力されたプランナのパスキーをマッチするために、問い合わせパスがDISTINCTキーを並べ替える機能を有効または無効にします。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-gathermerge" xreflabel="enable_gathermerge">
      <term><varname>enable_gathermerge</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_gathermerge</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_gathermerge</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of gather
        merge plan types. The default is <literal>on</literal>.
-->
問い合わせプランナがギャザーマージ計画型を選択することを有効もしくは無効にします。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-groupby-reordering" xreflabel="enable_group_by_reordering">
      <term><varname>enable_group_by_reordering</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_group_by_reordering</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_group_by_reordering</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls if the query planner will produce a plan which will provide
        <literal>GROUP BY</literal> keys sorted in the order of keys of
        a child node of the plan, such as an index scan.  When disabled, the
        query planner will produce a plan with <literal>GROUP BY</literal>
        keys only sorted to match the <literal>ORDER BY</literal> clause,
        if any. When enabled, the planner will try to produce a more
        efficient plan. The default value is <literal>on</literal>.
-->
問い合わせプランナが、インデックススキャンのようなプランの子ノードのキーの順でソートされた<literal>GROUP BY</literal>キーを提供するプランを生成するかどうかを制御します。
無効にすると、問い合わせプランナは、<literal>GROUP BY</literal>句があれば、それに合わせたソート順の<literal>ORDER BY</literal>キーを持つプランを生成します。
有効にすると、プランナはより効率的プランの生成を試みます。
デフォルト値は<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-hashagg" xreflabel="enable_hashagg">
      <term><varname>enable_hashagg</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_hashagg</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_hashagg</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of hashed
        aggregation plan types. The default is <literal>on</literal>.
-->
問い合わせプランナがハッシュ集約計画型を選択することを有効もしくは無効にします。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-hashjoin" xreflabel="enable_hashjoin">
      <term><varname>enable_hashjoin</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_hashjoin</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_hashjoin</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of hash-join plan
        types. The default is <literal>on</literal>.
-->
問い合わせプランナがハッシュ結合計画型を選択することを有効もしくは無効にします。デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-incremental-sort" xreflabel="enable_incremental_sort">
      <term><varname>enable_incremental_sort</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_incremental_sort</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_incremental_sort</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of incremental sort steps.
        The default is <literal>on</literal>.
-->
問い合わせプランナが増分ソートステップを使うのを有効あるいは無効にします。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-indexscan" xreflabel="enable_indexscan">
      <term><varname>enable_indexscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary>index scan</primary>
      </indexterm>
      <indexterm>
       <primary>インデックススキャン</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_indexscan</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_indexscan</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of index-scan and
        index-only-scan plan types.  The default is <literal>on</literal>.
        Also see <xref linkend="guc-enable-indexonlyscan"/>.
-->
問い合わせプランナがインデックススキャン計画型とインデックスオンリースキャン計画型を選択することを有効もしくは無効にします。
デフォルトは<literal>on</literal>です。
<xref linkend="guc-enable-indexonlyscan"/>も参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-indexonlyscan" xreflabel="enable_indexonlyscan">
      <term><varname>enable_indexonlyscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_indexonlyscan</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_indexonlyscan</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of index-only-scan plan
        types (see <xref linkend="indexes-index-only-scans"/>).
        The default is <literal>on</literal>.  The
        <xref linkend="guc-enable-indexscan"/> setting must also be
        enabled to have the query planner consider index-only-scans.
-->
問い合わせプランナがインデックスオンリースキャン計画型を選択することを有効もしくは無効にします（<xref linkend="indexes-index-only-scans"/>を参照）。
デフォルトは<literal>on</literal>です。
問い合わせプランナがインデックスオンリースキャンを考慮するようにするには、<xref linkend="guc-enable-indexscan"/>設定も有効にすることが必要です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-material" xreflabel="enable_material">
      <term><varname>enable_material</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_material</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_material</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of materialization.
        It is impossible to suppress materialization entirely,
        but turning this variable off prevents the planner from inserting
        materialize nodes except in cases where it is required for correctness.
        The default is <literal>on</literal>.
-->
問い合わせプランナの具体化の使用を有効、または無効にします。
全体にわたって具体化を差し止めることはできませんが、この値をoffにすることにより、正確性が要求される場合を除いて、具体化ノードをプランナが挿入することを防止します。デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-memoize" xreflabel="enable_memoize">
      <term><varname>enable_memoize</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_memoize</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_memoize</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of memoize plans for
        caching results from parameterized scans inside nested-loop joins.
        This plan type allows scans to the underlying plans to be skipped when
        the results for the current parameters are already in the cache.  Less
        commonly looked up results may be evicted from the cache when more
        space is required for new entries. The default is
        <literal>on</literal>.
-->
問い合わせプランナが、ネステッドループ結合の中のパラメータ付きスキャンの結果をキャッシュするメモ化計画を使用するのを有効あるいは無効にします。
この計画型は、キャッシュ中に現在のパラメータに対応する結果があれば、配下の計画をスキップすることを可能にします。
新しい項目のためにより多くのスペースが必要な場合は、あまり参照されていない結果は削除されるかもしれません。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-mergejoin" xreflabel="enable_mergejoin">
      <term><varname>enable_mergejoin</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_mergejoin</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_mergejoin</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of merge-join plan
        types. The default is <literal>on</literal>.
-->
問い合わせプランナがマージ結合計画型を選択することを有効もしくは無効にします。デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-nestloop" xreflabel="enable_nestloop">
      <term><varname>enable_nestloop</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_nestloop</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_nestloop</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of nested-loop join
        plans. It is impossible to suppress nested-loop joins entirely,
        but turning this variable off discourages the planner from using
        one if there are other methods available. The default is
        <literal>on</literal>.
-->
問い合わせプランナがネステッドループ結合計画を選択することを有効もしくは無効にします。
ネステッドループ結合を完全に禁止することは不可能ですが、この変数をオフにすると、もし他の方法が利用できるのであれば、プランナはその使用を行わないようになります。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-parallel-append" xreflabel="enable_parallel_append">
      <term><varname>enable_parallel_append</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_parallel_append</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_parallel_append</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of parallel-aware
        append plan types. The default is <literal>on</literal>.
-->
問い合わせプランナによるパラレル認識なアペンド計画型の利用を有効あるいは無効にします。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-parallel-hash" xreflabel="enable_parallel_hash">
      <term><varname>enable_parallel_hash</varname> (<type>boolean</type>)
       <indexterm>
        <primary><varname>enable_parallel_hash</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>enable_parallel_hash</varname>設定パラメータ</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of hash-join plan
        types with parallel hash. Has no effect if hash-join plans are not
        also enabled. The default is <literal>on</literal>.
-->
問い合わせプランナによる、パラレルハッシュを使ったハッシュ結合計画型の利用を有効あるいは無効にします。
ハッシュ結合計画が有効でない場合は無効です。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-partition-pruning" xreflabel="enable_partition_pruning">
      <term><varname>enable_partition_pruning</varname> (<type>boolean</type>)
       <indexterm>
        <primary><varname>enable_partition_pruning</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>enable_partition_pruning</varname>設定パラメータ</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's ability to eliminate a
        partitioned table's partitions from query plans.  This also controls
        the planner's ability to generate query plans which allow the query
        executor to remove (ignore) partitions during query execution.  The
        default is <literal>on</literal>.
        See <xref linkend="ddl-partition-pruning"/> for details.
-->
問い合わせプランナが、クエリプランからパーティション化テーブルのパーティションを除く機能を有効あるいは無効にします。
これはまた、クエリエグゼキュータがクエリ実行中にパーティションを削除（無視）することができるプランを生成するプランナの機能を制御します。
デフォルトは<literal>on</literal>です。
詳細は<xref linkend="ddl-partition-pruning"/>をご覧ください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-partitionwise-join" xreflabel="enable_partitionwise_join">
      <term><varname>enable_partitionwise_join</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_partitionwise_join</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_partitionwise_join</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of partitionwise join,
        which allows a join between partitioned tables to be performed by
        joining the matching partitions.  Partitionwise join currently applies
        only when the join conditions include all the partition keys, which
        must be of the same data type and have one-to-one matching sets of
        child partitions.  With this setting enabled, the number of nodes
        whose memory usage is restricted by <varname>work_mem</varname>
        appearing in the final plan can increase linearly according to the
        number of partitions being scanned.  This can result in a large
        increase in overall memory consumption during the execution of the
        query.  Query planning also becomes significantly more expensive in
        terms of memory and CPU.  The default value is <literal>off</literal>.
-->
パーティション同士の結合(partitionwise join)を問い合わせプランナが使用するのを有効あるいは無効にします。
パーティション同士の結合は、適合するパーティションを結合することによって実行される、パーティション化テーブルにまたがる結合を可能にします。
今の所、パーティション同士の結合は、すべてのパーティションキーを含んでいて、かつパーティションキーの型が同じで、一対一で一致する子パーティションの集合を持つ結合条件のときだけに適用されます。
この設定を有効にすると、最終プランに表示され、<varname>work_mem</varname>によってメモリ使用が制限されるノードの数は、スキャンされるパーティションの数に応じて直線的に増加します。
これにより、問い合わせの実行中の全体的なメモリ消費の大きな増加をもたらす可能性があります。
また、問い合わせ計画の作成が、メモリとCPU使用率の点でも非常に高価になります。
デフォルト値は<literal>off</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-partitionwise-aggregate" xreflabel="enable_partitionwise_aggregate">
      <term><varname>enable_partitionwise_aggregate</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_partitionwise_aggregate</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_partitionwise_aggregate</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of partitionwise grouping
        or aggregation, which allows grouping or aggregation on partitioned
        tables to be performed separately for each partition.  If the
        <literal>GROUP BY</literal> clause does not include the partition
        keys, only partial aggregation can be performed on a per-partition
        basis, and finalization must be performed later.  With this setting
        enabled, the number of nodes whose memory usage is restricted by
        <varname>work_mem</varname> appearing in the final plan can increase
        linearly according to the number of partitions being scanned.  This
        can result in a large increase in overall memory consumption during
        the execution of the query.  Query planning also becomes significantly
        more expensive in terms of memory and CPU.  The default value is
        <literal>off</literal>.
-->
パーティション化されたテーブルに対してグループ化または集約を個別に実行できるように、問い合わせプランナのパーティションごと（partitionwise）のグループ化または集約の使用を有効または無効にします。
<literal>GROUP BY</literal>句がパーティションキーを含まない場合は、パーティション単位で部分集約だけが実行でき、最終結果の算出は後で行われます。
この設定を有効にすると、最終プランに表示され、<varname>work_mem</varname>によってメモリ使用が制限されるノードの数は、スキャンされるパーティションの数に応じて直線的に増加します。
これにより、問い合わせの実行中の全体的なメモリ消費の大きな増加をもたらす可能性があります。
また、問い合わせ計画の作成が、メモリとCPU使用率の点でも非常に高価になります。
デフォルト値は<literal>off</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-presorted-aggregate" xreflabel="enable_presorted_aggregate">
      <term><varname>enable_presorted_aggregate</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_presorted_aggregate</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_presorted_aggregate</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls if the query planner will produce a plan which will provide
        rows which are presorted in the order required for the query's
        <literal>ORDER BY</literal> / <literal>DISTINCT</literal> aggregate
        functions.  When disabled, the query planner will produce a plan which
        will always require the executor to perform a sort before performing
        aggregation of each aggregate function containing an
        <literal>ORDER BY</literal> or <literal>DISTINCT</literal> clause.
        When enabled, the planner will try to produce a more efficient plan
        which provides input to the aggregate functions which is presorted in
        the order they require for aggregation.  The default value is
        <literal>on</literal>.
-->
問い合わせプランナが、問い合わせの<literal>ORDER BY</literal>/<literal>DISTINCT</literal>集約関数に必要なオーダーで事前にソートされた行を生成するかどうかを制御します。
無効の場合、問い合わせプランナは、<literal>ORDER BY</literal>または<literal>DISTINCT</literal>句を含む各集約関数の集計を実行する前に、ソートをエグゼキュータが実行することを常に要求するプランを生成します。
有効な場合、集約に必要とされる事前にソートされた入力を集約関数に提供する、より効率的なプランをプランナは生成します。
デフォルト値は<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-self-join-elimination" xreflabel="enable_self_join_elimination">
      <term><varname>enable_self_join_elimination</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_self_join_elimination</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's optimization which analyses
        the query tree and replaces self joins with semantically equivalent
        single scans.  Takes into consideration only plain tables.
        The default is <literal>on</literal>.
-->
《機械翻訳》プランナを分析し、自己結合を意味的に等価な単一スキャンに置換する問い合わせ「最適化の問い合わせツリー」を有効または無効にします。
プレーン表のみが考慮されます。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-seqscan" xreflabel="enable_seqscan">
      <term><varname>enable_seqscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary>sequential scan</primary>
      </indexterm>
      <indexterm>
       <primary>シーケンシャルスキャン</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_seqscan</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_seqscan</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of sequential scan
        plan types. It is impossible to suppress sequential scans
        entirely, but turning this variable off discourages the planner
        from using one if there are other methods available. The
        default is <literal>on</literal>.
-->
問い合わせプランナがシーケンシャルスキャン計画型を選択することを有効もしくは無効にします。
シーケンシャルスキャンを完全に禁止することは不可能ですが、この変数をオフにすると、もし他の方法が利用できるのであれば、プランナはその使用を行わないようになります。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-sort" xreflabel="enable_sort">
      <term><varname>enable_sort</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_sort</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_sort</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of explicit sort
        steps. It is impossible to suppress explicit sorts entirely,
        but turning this variable off discourages the planner from
        using one if there are other methods available. The default
        is <literal>on</literal>.
-->
問い合わせプランナが明示的並べ替え手順を選択することを有効もしくは無効にします。
明示的並べ替えを完全に禁止することは不可能ですが、この変数をオフにすると、もし他の方法が利用できるのであれば、プランナはその使用を行わないようになります。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-tidscan" xreflabel="enable_tidscan">
      <term><varname>enable_tidscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_tidscan</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_tidscan</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of <acronym>TID</acronym>
        scan plan types. The default is <literal>on</literal>.
-->
問い合わせプランナが<acronym>TID</acronym>スキャン計画型を選択することを有効もしくは無効にします。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-query-constants">
<!--
     <title>Planner Cost Constants</title>
-->
     <title>プランナコスト定数</title>

    <para>
<!--
     The <firstterm>cost</firstterm> variables described in this section are measured
     on an arbitrary scale.  Only their relative values matter, hence
     scaling them all up or down by the same factor will result in no change
     in the planner's choices.  By default, these cost variables are based on
     the cost of sequential page fetches; that is,
     <varname>seq_page_cost</varname> is conventionally set to <literal>1.0</literal>
     and the other cost variables are set with reference to that.  But
     you can use a different scale if you prefer, such as actual execution
     times in milliseconds on a particular machine.
-->
本節で扱う<firstterm>コスト</firstterm>変数は、任意の尺度で測られます。
これらは相対的な値のみが意味を持つため、それらの値をすべて同じ係数で大きく、あるいは小さくしても、プランナの選択は結果として変わりません。
デフォルトではこれらのコスト変数はシーケンシャルなページ取り込みに基づいています。
つまり、<varname>seq_page_cost</varname>を慣習的に<literal>1.0</literal>とし、他のコスト変数はそれを参考にして設定されています。
しかし望むなら、特定のマシンにおけるミリ秒単位の実行時間など、異なる尺度を使用することができます。
    </para>

   <note>
    <para>
<!--
     Unfortunately, there is no well-defined method for determining ideal
     values for the cost variables.  They are best treated as averages over
     the entire mix of queries that a particular installation will receive.  This
     means that changing them on the basis of just a few experiments is very
     risky.
-->
残念ながら、コスト変数に対する理想的な値を決定する、上手く定義された方法がありません。
特定のインストレーションが受け取る問い合わせ全体を混在させたものの平均として扱うのが最善でしょう。
数回の実験のみを根拠にこの値を変更することは危険であるといえます。
    </para>
   </note>

     <variablelist>

     <varlistentry id="guc-seq-page-cost" xreflabel="seq_page_cost">
      <term><varname>seq_page_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>seq_page_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>seq_page_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the planner's estimate of the cost of a disk page fetch
        that is part of a series of sequential fetches.  The default is 1.0.
        This value can be overridden for tables and indexes in a particular
        tablespace by setting the tablespace parameter of the same name
        (see <xref linkend="sql-altertablespace"/>).
-->
シーケンシャルな一連の取り出しの一部となる、ディスクページ取り出しに関する、プランナの推定コストを設定します。
デフォルトは1.0です。
この値は同じ名前のテーブル空間パラメータを設定することで、特定のテーブル空間の中にあるテーブルとインデックスに対して上書きできます（<xref linkend="sql-altertablespace"/>を参照してください）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-random-page-cost" xreflabel="random_page_cost">
      <term><varname>random_page_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>random_page_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>random_page_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the planner's estimate of the cost of a
        non-sequentially-fetched disk page.  The default is 4.0.
        This value can be overridden for tables and indexes in a particular
        tablespace by setting the tablespace parameter of the same name
        (see <xref linkend="sql-altertablespace"/>).
-->
非シーケンシャル的に取り出されるディスクページのコストに対するプランナの推測を設定します。
デフォルトは4です。
この値は同じ名前のテーブル空間パラメータを設定することで、特定のテーブル空間の中にあるテーブルとインデックスに対して上書きできます（<xref linkend="sql-altertablespace"/>を参照してください）。
       </para>

       <para>
<!--
        Reducing this value relative to <varname>seq_page_cost</varname>
        will cause the system to prefer index scans; raising it will
        make index scans look relatively more expensive.  You can raise
        or lower both values together to change the importance of disk I/O
        costs relative to CPU costs, which are described by the following
        parameters.
-->
この値を<varname>seq_page_cost</varname>と比較して小さくすると、システムはなるべくインデックススキャンを使用するようになります。
大きくすると、インデックススキャンが相対的に高価になります。
両方の値を増減させることで、CPUコストに対するディスクI/Oコストの重要性を変更させることができます。
これについては、後述のパラメータで説明します。
       </para>

       <para>
<!--
        Random access to mechanical disk storage is normally much more expensive
        than four times sequential access.  However, a lower default is used
        (4.0) because the majority of random accesses to disk, such as indexed
        reads, are assumed to be in cache.  The default value can be thought of
        as modeling random access as 40 times slower than sequential, while
        expecting 90% of random reads to be cached.
-->
機械的ディスク記憶装置に対するランダムアクセスは通常はシーケンシャルアクセスの4倍よりもかなり高価です。
しかし、より低いデフォルト（4.0）が使用されます。というのはインデックスのついた読み取りのようなディスクに対するランダムアクセスのほとんどはキャッシュにあると想定されるからです。
このデフォルト値は、ランダムアクセスがシーケンシャルアクセスより40倍遅い一方で、ランダム読み込みの90%はキャッシュされていることが期待されるというモデルとして考えることができます。
       </para>

       <para>
<!--
        If you believe a 90% cache rate is an incorrect assumption
        for your workload, you can increase random_page_cost to better
        reflect the true cost of random storage reads. Correspondingly,
        if your data is likely to be completely in cache, such as when
        the database is smaller than the total server memory, decreasing
        random_page_cost can be appropriate.  Storage that has a low random
        read cost relative to sequential, e.g., solid-state drives, might
        also be better modeled with a lower value for random_page_cost,
        e.g., <literal>1.1</literal>.
-->
自環境の作業負荷において、90％のキャッシュ率は誤った仮定と考えられるのであれば、ランダム記憶装置読み込みのコストをより良く反映するため random_page_cost を大きくすることができます。
反対に、データが完全にキャッシュされていると思われるのであれば、random_page_cost を小さくすることが適切です。例えば、データベースの容量がサーバのメモリより小さい場合などです。
例えばSSDのような、シーケンシャルアクセスに比べてランダム読み込みコストがあまり大きくない記憶装置の場合も、random_page_cost に対し<literal>1.1</literal>のようにより低い値のモデル化の方が良いでしょう。
       </para>

       <tip>
        <para>
<!--
         Although the system will let you set <varname>random_page_cost</varname> to
         less than <varname>seq_page_cost</varname>, it is not physically sensible
         to do so.  However, setting them equal makes sense if the database
         is entirely cached in RAM, since in that case there is no penalty
         for touching pages out of sequence.  Also, in a heavily-cached
         database you should lower both values relative to the CPU parameters,
         since the cost of fetching a page already in RAM is much smaller
         than it would normally be.
-->
システムは<varname>random_page_cost</varname>を<varname>seq_page_cost</varname>よりも小さな値に設定することを許しますが、そのようにすることは物理的にはおかしなことです。
しかし、データベースが完全にRAMにキャッシュされる場合、同じ値に設定することは意味を持ちます。
この場合、順序通りではないページアクセスに対するペナルティが存在しないからです。
また、多くがキャッシュされるデータベースでは、CPUパラメータに対して両値を小さく設定すべきです。
RAM内に存在するページの取り出しコストは通常よりもかなり小さくなるためです。
        </para>
       </tip>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-tuple-cost" xreflabel="cpu_tuple_cost">
      <term><varname>cpu_tuple_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cpu_tuple_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>cpu_tuple_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the planner's estimate of the cost of processing
        each row during a query.
        The default is 0.01.
-->
問い合わせ時のそれぞれの行の処理コストに対するプランナの推測を設定します。
デフォルトは0.01です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-index-tuple-cost" xreflabel="cpu_index_tuple_cost">
      <term><varname>cpu_index_tuple_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cpu_index_tuple_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>cpu_index_tuple_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the planner's estimate of the cost of processing
        each index entry during an index scan.
        The default is 0.005.
-->
インデックススキャン時のそれぞれのインデックス行の処理コストに対するプランナの推測を設定します。
デフォルトは0.005です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-operator-cost" xreflabel="cpu_operator_cost">
      <term><varname>cpu_operator_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cpu_operator_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>cpu_operator_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the planner's estimate of the cost of processing each
        operator or function executed during a query.
        The default is 0.0025.
-->
問い合わせ時に実行される各演算子や関数の処理コストに対するプランナの推測を設定します。デフォルトは0.0025です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-parallel-setup-cost" xreflabel="parallel_setup_cost">
      <term><varname>parallel_setup_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>parallel_setup_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>parallel_setup_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the planner's estimate of the cost of launching parallel worker
        processes.
        The default is 1000.
-->
パラレルワーカープロセスを起動するためのコストに対するプランナの推測値を設定します。
デフォルトは1000です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-parallel-tuple-cost" xreflabel="parallel_tuple_cost">
      <term><varname>parallel_tuple_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>parallel_tuple_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>parallel_tuple_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the planner's estimate of the cost of transferring one tuple
        from a parallel worker process to another process.
        The default is 0.1.
-->
あるパラレルワーカープロセスから、1タプルを他のプロセスに転送するためのコストに対するプランナの推測値を設定します。
デフォルトは0.1です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-min-parallel-table-scan-size" xreflabel="min_parallel_table_scan_size">
      <term><varname>min_parallel_table_scan_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>min_parallel_table_scan_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>min_parallel_table_scan_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the minimum amount of table data that must be scanned in order
        for a parallel scan to be considered.  For a parallel sequential scan,
        the amount of table data scanned is always equal to the size of the
        table, but when indexes are used the amount of table data
        scanned will normally be less.
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The default is 8 megabytes (<literal>8MB</literal>).
-->
パラレルスキャンを考慮する最小のテーブルデータのサイズを指定します。
パラレルシーケンシャルスキャンでは、スキャンされるテーブルのデータ量は、常にテーブルのサイズと同じです。
しかし、インデックスが使われる場合は、スキャンされるテーブルの量は通常少なくなるでしょう。
この値が単位なしで指定された場合は、ブロック単位であるとみなします。すなわち、<symbol>BLCKSZ</symbol>バイト、一般的には8kBです。
デフォルトは8メガバイト（ <literal>8MB</literal>）です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-min-parallel-index-scan-size" xreflabel="min_parallel_index_scan_size">
      <term><varname>min_parallel_index_scan_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>min_parallel_index_scan_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>min_parallel_index_scan_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the minimum amount of index data that must be scanned in order
        for a parallel scan to be considered.  Note that a parallel index scan
        typically won't touch the entire index; it is the number of pages
        which the planner believes will actually be touched by the scan which
        is relevant.  This parameter is also used to decide whether a
        particular index can participate in a parallel vacuum.  See
        <xref linkend="sql-vacuum"/>.
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The default is 512 kilobytes (<literal>512kB</literal>).
-->
パラレルスキャンが考慮されるために、スキャンされなければならないインデックスデータの最小量を設定します。
通常パラレルインデックススキャンは、典型的にはインデックス全体をアクセスしないことに注意してください。
これは、関連するスキャンにより、プランナが実際にアクセスされると信じるページ数です。
またこのパラメータは、あるインデックスがパラレルVACUUMで利用できるかどうかを決定するのにも使われます。
<xref linkend="sql-vacuum"/>をご覧ください。
この値が単位なしで指定された場合は、ブロック単位であるとみなします。すなわち、<symbol>BLCKSZ</symbol>バイト、一般的には8kBです。
デフォルトは512キロバイト（<literal>512kB</literal>）です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-effective-cache-size" xreflabel="effective_cache_size">
      <term><varname>effective_cache_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>effective_cache_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>effective_cache_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the planner's assumption about the effective size of the
        disk cache that is available to a single query.  This is
        factored into estimates of the cost of using an index; a
        higher value makes it more likely index scans will be used, a
        lower value makes it more likely sequential scans will be
        used. When setting this parameter you should consider both
        <productname>PostgreSQL</productname>'s shared buffers and the
        portion of the kernel's disk cache that will be used for
        <productname>PostgreSQL</productname> data files, though some
        data might exist in both places. Also, take
        into account the expected number of concurrent queries on different
        tables, since they will have to share the available
        space.  This parameter has no effect on the size of shared
        memory allocated by <productname>PostgreSQL</productname>, nor
        does it reserve kernel disk cache; it is used only for estimation
        purposes.  The system also does not assume data remains in
        the disk cache between queries.
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The default is 4 gigabytes (<literal>4GB</literal>).
        (If <symbol>BLCKSZ</symbol> is not 8kB, the default value scales
        proportionally to it.)
-->
単一の問い合わせで利用できるディスクキャッシュの実効容量に関するプランナの条件を設定します。
これは、インデックスを使用するコスト推定値の要素となります。
より高い値にすれば、よりインデックススキャンが使用されるようになり、より小さく設定すれば、シーケンシャルスキャンがより使用されるようになります。
このパラメータを設定する時には、<productname>PostgreSQL</productname>の共有バッファと<productname>PostgreSQL</productname>データファイルに使用されるカーネルのディスクキャッシュの量の両方を考慮しなければなりませんが、データは両方に存在することもあります。
また、利用可能な領域を共有しますので、異なるテーブルに対して同時に実行される問い合わせの想定数も考慮してください。
このパラメータは、<productname>PostgreSQL</productname>で割り当てられる共有メモリの大きさには影響を与えません。また、カーネルのディスクキャッシュを予約したりもしません。
これは推定目的のみで使用されます。
同時に、システムは問い合わせの間のディスクキャッシュ内のデータの残滓を想定していません。
この値が単位なしで指定された場合は、ブロック単位であるとみなします。すなわち、<symbol>BLCKSZ</symbol>バイト、一般的には8kBです。
デフォルトは4ギガバイト（<literal>4GB</literal>）です。
（<symbol>BLCKSZ</symbol>が8kbでなければ、この設定のデフォルト値と最大値が<symbol>BLCKSZ</symbol>に比例して変更されます。）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-above-cost" xreflabel="jit_above_cost">
      <term><varname>jit_above_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>jit_above_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>jit_above_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the query cost above which JIT compilation is activated, if
        enabled (see <xref linkend="jit"/>).
        Performing <acronym>JIT</acronym> costs planning time but can
        accelerate query execution.
        Setting this to <literal>-1</literal> disables JIT compilation.
        The default is <literal>100000</literal>.
-->
JITが有効な場合（<xref linkend="jit"/>参照）、それ以上ならJITコンパイルが起動する問い合わせコストを設定します。
<acronym>JIT</acronym>を実行するとプラン時間がかかりますが、問い合わせの実行を高速化することができます。
これを<literal>-1</literal>にすると、JITコンパイルは無効になります。
デフォルトは<literal>100000</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-inline-above-cost" xreflabel="jit_inline_above_cost">
      <term><varname>jit_inline_above_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>jit_inline_above_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>jit_inline_above_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the query cost above which JIT compilation attempts to inline
        functions and operators.  Inlining adds planning time, but can
        improve execution speed.  It is not meaningful to set this to less
        than <varname>jit_above_cost</varname>.
        Setting this to <literal>-1</literal> disables inlining.
        The default is <literal>500000</literal>.
-->
それ以上ならJITコンパイルが関数と演算子のインライン化を試みる問い合わせコストを設定します。
インライン化するとプラン時間がかかりますが、問い合わせの実行速度を改善できます。
これを<varname>jit_above_cost</varname>よりも小さくするのは意味がありません。
これを<literal>-1</literal>にすると、インライン化は無効になります。
デフォルトは<literal>500000</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-optimize-above-cost" xreflabel="jit_optimize_above_cost">
      <term><varname>jit_optimize_above_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>jit_optimize_above_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>jit_optimize_above_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the query cost above which JIT compilation applies expensive
        optimizations.  Such optimization adds planning time, but can improve
        execution speed.  It is not meaningful to set this to less
        than <varname>jit_above_cost</varname>, and it is unlikely to be
        beneficial to set it to more
        than <varname>jit_inline_above_cost</varname>.
        Setting this to <literal>-1</literal> disables expensive optimizations.
        The default is <literal>500000</literal>.
-->
それ以上ならJITコンパイルが高価な最適化を実行する問い合わせコストを設定します。
そうした最適化にはプラン時間がかかりますが、問い合わせの実行速度を改善できます。
これを<varname>jit_above_cost</varname>よりも小さくするのは意味がなく、また<varname>jit_inline_above_cost</varname>よりも大きくしても利益はないでしょう。
これを<literal>-1</literal>にすると、高価な最適化は無効になります。
デフォルトは<literal>500000</literal>です。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect2>
     <sect2 id="runtime-config-query-geqo">
<!--
     <title>Genetic Query Optimizer</title>
-->
     <title>遺伝的問い合わせオプティマイザ</title>

     <para>
<!--
      The genetic query optimizer (GEQO) is an algorithm that does query
      planning using heuristic searching.  This reduces planning time for
      complex queries (those joining many relations), at the cost of producing
      plans that are sometimes inferior to those found by the normal
      exhaustive-search algorithm.
      For more information see <xref linkend="geqo"/>.
-->
遺伝的問い合わせオプティマイザ（GEQO）はヒューリスティック（発見的）検索法を用いた問い合わせ計画を行なう演算手法です。
通常のしらみつぶしの検索演算手法で見いだされる計画よりも時として劣った計画を作成するという代償を払いますが、この手法は（多くのリレーションを結合するような）複雑な問い合わせに対し計画時間を軽減します。
より詳細は<xref linkend="geqo"/>を参照してください。
     </para>

     <variablelist>

     <varlistentry id="guc-geqo" xreflabel="geqo">
      <term><varname>geqo</varname> (<type>boolean</type>)
      <indexterm>
       <primary>genetic query optimization</primary>
      </indexterm>
      <indexterm>
       <primary>遺伝的問い合わせ最適化</primary>
      </indexterm>
      <indexterm>
       <primary>GEQO</primary>
       <see>genetic query optimization</see>
      </indexterm>
      <indexterm>
       <primary>GEQO</primary>
       <see>遺伝的問い合わせ最適化</see>
      </indexterm>
      <indexterm>
       <primary><varname>geqo</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>geqo</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables genetic query optimization.
        This is on by default.  It is usually best not to turn it off in
        production; the <varname>geqo_threshold</varname> variable provides
        more granular control of GEQO.
-->
遺伝的問い合わせ最適化を有効もしくは無効にします。デフォルトは有効です。
運用時には無効にしないことが通常最善です。<varname>geqo_threshold</varname>変数は、GEQOを制御するためよりきめ細かな方法を提供します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-threshold" xreflabel="geqo_threshold">
      <term><varname>geqo_threshold</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_threshold</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>geqo_threshold</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Use genetic query optimization to plan queries with at least
        this many <literal>FROM</literal> items involved. (Note that a
        <literal>FULL OUTER JOIN</literal> construct counts as only one <literal>FROM</literal>
        item.) The default is 12. For simpler queries it is usually best
        to use the regular, exhaustive-search planner, but for queries with
        many tables the exhaustive search takes too long, often
        longer than the penalty of executing a suboptimal plan.  Thus,
        a threshold on the size of the query is a convenient way to manage
        use of GEQO.
-->
少なくともこれだけの数の<literal>FROM</literal>項目数があるときに、問い合わせを計画するのに遺伝的問い合わせ最適化を使用します。
（<literal>FULL OUTER JOIN</literal>の生成子は、<literal>FROM</literal>項目が１つだけとして計算することに注意してください。）
デフォルトは12です。
もっと単純な問い合わせでは、通常の、そしてしらみつぶしの検索プランナを使用するのが最善ですが、多くのテーブルを持つ問い合わせでは、しらみつぶしの検索は非常に時間がかかり、しばしば次善の計画を実行する代償より長くなります。
従って、問い合わせの大きさに対する閾値はGEQOの使用を管理するのに便利な方法です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-effort" xreflabel="geqo_effort">
      <term><varname>geqo_effort</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_effort</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>geqo_effort</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls the trade-off between planning time and query plan
        quality in GEQO. This variable must be an integer in the
        range from 1 to 10. The default value is five. Larger values
        increase the time spent doing query planning, but also
        increase the likelihood that an efficient query plan will be
        chosen.
-->
GEQOにおける計画時間と問い合わせ計画の品質間のトレードオフを制御します。この変数は1から10までの範囲の整数でなければなりません。
デフォルトの値は5です。値を大きくすると、問い合わせ計画作成により多くの時間を費すことになりますが、より効率的な問い合わせ計画が選択される可能性が増加します。
       </para>

       <para>
<!--
        <varname>geqo_effort</varname> doesn't actually do anything
        directly; it is only used to compute the default values for
        the other variables that influence GEQO behavior (described
        below). If you prefer, you can set the other parameters by
        hand instead.
-->
実際<varname>geqo_effort</varname>は直接何も行いません。それはGEQOの動作に影響を与える他の変数に対し、デフォルトの値を計算するためにのみ使用されます（以下で説明します）。もしよければ、代わりに手作業で他のパラメータを設定できます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-pool-size" xreflabel="geqo_pool_size">
      <term><varname>geqo_pool_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_pool_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>geqo_pool_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls the pool size used by GEQO, that is the
        number of individuals in the genetic population.  It must be
        at least two, and useful values are typically 100 to 1000.  If
        it is set to zero (the default setting) then a suitable
        value is chosen based on <varname>geqo_effort</varname> and
        the number of tables in the query.
-->
GEQOで使用されるプール容量を管理します。それは遺伝的個体群内の個体数です。最低でも2つはなければならず、よく100から1000までの値が使用されます。
もし（デフォルトの設定である）零に設定されると、<varname>geqo_effort</varname>および問い合わせの中のテーブル数に基づいて、適切な値が選択されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-generations" xreflabel="geqo_generations">
      <term><varname>geqo_generations</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_generations</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>geqo_generations</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls the number of generations used by GEQO, that is
        the number of iterations of the algorithm.  It must
        be at least one, and useful values are in the same range as
        the pool size.  If it is set to zero (the default setting)
        then a suitable value is chosen based on
        <varname>geqo_pool_size</varname>.
-->
GEQOで使用される世代の数を管理します。それはアルゴリズムの反復数です。最低でも1はなければならず、よくプールサイズと同じ範囲の値が使用されます。
これを0に設定（デフォルトの設定）すると、適切な値が<varname>geqo_pool_size</varname>に基づいて選択されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-selection-bias" xreflabel="geqo_selection_bias">
      <term><varname>geqo_selection_bias</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>geqo_selection_bias</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>geqo_selection_bias</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls the selection bias used by GEQO. The selection bias
        is the selective pressure within the population. Values can be
        from 1.50 to 2.00; the latter is the default.
-->
GEQOで使用される淘汰の偏りを管理します。
淘汰の偏りは個体群内の（遺伝的な）自然淘汰です。値は1.50から2.00で、2.00がデフォルトです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-seed" xreflabel="geqo_seed">
      <term><varname>geqo_seed</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>geqo_seed</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>geqo_seed</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls the initial value of the random number generator used
        by GEQO to select random paths through the join order search space.
        The value can range from zero (the default) to one.  Varying the
        value changes the set of join paths explored, and may result in a
        better or worse best path being found.
-->
結合順序検索空間にわたって、GEQOが無作為のパスを選択するために使用される乱数発生器の初期値を制御します。
値は0（デフォルト）から1までの範囲です。
値を変動させると探査される結合パスの集合が変化するため、見つかる最善のパスが良くなる場合も悪くなる場合もあります。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
     <sect2 id="runtime-config-query-other">
<!--
     <title>Other Planner Options</title>
-->
     <title>その他のプランナオプション</title>

     <variablelist>

     <varlistentry id="guc-default-statistics-target" xreflabel="default_statistics_target">
      <term><varname>default_statistics_target</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>default_statistics_target</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>default_statistics_target</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the default statistics target for table columns without
        a column-specific target set via <command>ALTER TABLE
        SET STATISTICS</command>.  Larger values increase the time needed to
        do <command>ANALYZE</command>, but might improve the quality of the
        planner's estimates. The default is 100. For more information
        on the use of statistics by the <productname>PostgreSQL</productname>
        query planner, refer to <xref linkend="planner-stats"/>.
-->
<command>ALTER TABLE SET STATISTICS</command>で列特定の目標値が設定されていないテーブル列に対し、デフォルトの統計情報目標値を設定します。
より大きい値は<command>ANALYZE</command>に必要な時間を増加させますが、プランナの予測の品質を向上させます。
デフォルトは100です。
<productname>PostgreSQL</productname>の問い合わせプランナによる統計情報の使用方法に関するより詳細な情報は、<xref linkend="planner-stats"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-constraint-exclusion" xreflabel="constraint_exclusion">
      <term><varname>constraint_exclusion</varname> (<type>enum</type>)
      <indexterm>
       <primary>constraint exclusion</primary>
      </indexterm>
      <indexterm>
       <primary>制約除外</primary>
      </indexterm>
      <indexterm>
       <primary><varname>constraint_exclusion</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>constraint_exclusion</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls the query planner's use of table constraints to
        optimize queries.
        The allowed values of <varname>constraint_exclusion</varname> are
        <literal>on</literal> (examine constraints for all tables),
        <literal>off</literal> (never examine constraints), and
        <literal>partition</literal> (examine constraints only for inheritance
        child tables and <literal>UNION ALL</literal> subqueries).
        <literal>partition</literal> is the default setting.
        It is often used with traditional inheritance trees to improve
        performance.
-->
問い合わせプランナが問い合わせを最適化する際のテーブル制約の使用を制御します。
<varname>constraint_exclusion</varname>に許容される値は、<literal>on</literal>（全てのテーブルに対し制約を検査する）、<literal>off</literal>（決して制約を検査しない）、および<literal>partition</literal>（継承された子テーブルおよび<literal>UNION ALL</literal>副問い合わせのみ制約を検査する）です。
<literal>partition</literal>がデフォルトの設定です。
伝統的な継承ツリーでしばしば性能向上のために使用されます。
      </para>

       <para>
<!--
        When this parameter allows it for a particular table, the planner
        compares query conditions with the table's <literal>CHECK</literal>
        constraints, and omits scanning tables for which the conditions
        contradict the constraints.  For example:
-->
このパラメータが特定のテーブルに対して許される時、プランナはそのテーブルの<literal>CHECK</literal>制約で問い合わせ条件を比較し、制約と矛盾する条件のテーブルのスキャンを省きます。
例えば以下のようになります。

<programlisting>
CREATE TABLE parent(key integer, ...);
CREATE TABLE child1000(check (key between 1000 and 1999)) INHERITS(parent);
CREATE TABLE child2000(check (key between 2000 and 2999)) INHERITS(parent);
...
SELECT * FROM parent WHERE key = 2400;
</programlisting>

<!--
        With constraint exclusion enabled, this <command>SELECT</command>
        will not scan <structname>child1000</structname> at all, improving performance.
-->
制約排除が有効であると、この<command>SELECT</command>は全く<structname>child1000</structname>をスキャンせず、性能を向上させます。
       </para>

       <para>
<!--
        Currently, constraint exclusion is enabled by default
        only for cases that are often used to implement table partitioning via
        inheritance trees.  Turning it on for all tables imposes extra
        planning overhead that is quite noticeable on simple queries, and most
        often will yield no benefit for simple queries.  If you have no
        tables that are partitioned using traditional inheritance, you might
        prefer to turn it off entirely.  (Note that the equivalent feature for
        partitioned tables is controlled by a separate parameter,
        <xref linkend="guc-enable-partition-pruning"/>.)
-->
現在、継承ツリーを使ってテーブルパーティショニングを実装するために使用されるよくある場合のことだけを考慮して、制約排除はデフォルトで有効です。
すべてのテーブルに対して有効にするのは、単純な問い合わせにおいて特にはっきりわかる計画作成の余計なオーバーヘッドをもたらし、単純な問い合わせにはメリットがありません。
伝統的な継承を使うパーティショニングされたテーブルがない場合、完全に無効にする方が良いでしょう。
（パーティショニングされたテーブル用の同等の機能は別のパラメータ<xref linkend="guc-enable-partition-pruning"/>で制御します。）
       </para>

       <para>
<!--
        Refer to <xref linkend="ddl-partitioning-constraint-exclusion"/> for
        more information on using constraint exclusion to implement
        partitioning.
-->
パーティショニングを実装するための制約排除の利用についてのより進んだ情報は<xref linkend="ddl-partitioning-constraint-exclusion"/>を参照ください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cursor-tuple-fraction" xreflabel="cursor_tuple_fraction">
      <term><varname>cursor_tuple_fraction</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cursor_tuple_fraction</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>cursor_tuple_fraction</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the planner's estimate of the fraction of a cursor's rows that
        will be retrieved.  The default is 0.1.  Smaller values of this
        setting bias the planner towards using <quote>fast start</quote> plans
        for cursors, which will retrieve the first few rows quickly while
        perhaps taking a long time to fetch all rows.  Larger values
        put more emphasis on the total estimated time.  At the maximum
        setting of 1.0, cursors are planned exactly like regular queries,
        considering only the total estimated time and not how soon the
        first rows might be delivered.
-->
検索されるカーソル行の割合のプランナの見積もりを設定します。
デフォルトは0.1です。
この設定をより小さくすると、プランナはカーソルに対し<quote>起動を高速にする</quote>計画を使用するようになりがちになります。
この場合先頭の数行の取り出しは高速になりますが、行全体を取り出す場合に時間がかかるようになる可能性があります。
この値をより大きくすると、推定時間全体がより強調されるようになります。
最大の設定である1.0の場合、カーソルは通常の問い合わせとまったく同様に計画されます。
つまり、推定時間全体のみが考慮され、先頭の行の取り出しにかかる時間は考慮されなくなります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-from-collapse-limit" xreflabel="from_collapse_limit">
      <term><varname>from_collapse_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>from_collapse_limit</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>from_collapse_limit</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The planner will merge sub-queries into upper queries if the
        resulting <literal>FROM</literal> list would have no more than
        this many items.  Smaller values reduce planning time but might
        yield inferior query plans.  The default is eight.
        For more information see <xref linkend="explicit-joins"/>.
-->
プランナは、<literal>FROM</literal>リストがこの数の項目より少ない結果の場合、副問い合わせを上位の問い合わせに併合します。
より小さい値は計画時間を縮小させますが、劣った問い合わせ計画をもたらす可能性があります。
デフォルトは8です。
詳細は<xref linkend="explicit-joins"/>を参照してください。
       </para>

       <para>
<!--
        Setting this value to <xref linkend="guc-geqo-threshold"/> or more
        may trigger use of the GEQO planner, resulting in non-optimal
        plans.  See <xref linkend="runtime-config-query-geqo"/>.
-->
この値を<xref linkend="guc-geqo-threshold"/>か、それ以上に設定するとGEQOプランナ使用の誘引となり、最適ではない計画をもたらします。<xref linkend="runtime-config-query-geqo"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit" xreflabel="jit">
      <term><varname>jit</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>jit</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>jit</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Determines whether <acronym>JIT</acronym> compilation may be used by
        <productname>PostgreSQL</productname>, if available (see <xref
        linkend="jit"/>).
        The default is <literal>on</literal>.
-->
<productname>PostgreSQL</productname>が、可能ならば<acronym>JIT</acronym>コンパイルを使うかどうかを決定します（<xref linkend="jit"/>を参照）。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>
<!-- split-config1-end -->
<!-- split-config2-start -->

     <varlistentry id="guc-join-collapse-limit" xreflabel="join_collapse_limit">
      <term><varname>join_collapse_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>join_collapse_limit</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>join_collapse_limit</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The planner will rewrite explicit <literal>JOIN</literal>
        constructs (except <literal>FULL JOIN</literal>s) into lists of
        <literal>FROM</literal> items whenever a list of no more than this many items
        would result.  Smaller values reduce planning time but might
        yield inferior query plans.
-->
最終的にリストがこの項目数以下になる時、プランナは、明示的な<literal>JOIN</literal>構文（<literal>FULL JOIN</literal>を除く）を<literal>FROM</literal>項目のリストに直します。
この値を小さくすれば計画作成時間は減少しますが、劣った問い合わせ計画が作成される可能性があります。
       </para>

       <para>
<!--
        By default, this variable is set the same as
        <varname>from_collapse_limit</varname>, which is appropriate
        for most uses. Setting it to 1 prevents any reordering of
        explicit <literal>JOIN</literal>s. Thus, the explicit join order
        specified in the query will be the actual order in which the
        relations are joined. Because the query planner does not always choose
        the optimal join order, advanced users can elect to
        temporarily set this variable to 1, and then specify the join
        order they desire explicitly.
        For more information see <xref linkend="explicit-joins"/>.
-->
デフォルトでは、この値は<varname>from_collapse_limit</varname>と同じ値に設定されており、殆どの場合に適切です。
これを1に設定すると明示的な<literal>JOIN</literal>の再順序付けは行われなくなります。
したがって、問い合わせで指定された明示的結合順序は、関係（リレーション）が結合される実際の順序となります。
問い合わせプランナは常に最適な結合順序を選択するとは限らないので、
上級ユーザなら暫定的にこの変数を1に設定し、明示的に希望とする結合順序を指定してもよいでしょう。
詳細は<xref linkend="explicit-joins"/>を参照してください。
       </para>

       <para>
<!--
        Setting this value to <xref linkend="guc-geqo-threshold"/> or more
        may trigger use of the GEQO planner, resulting in non-optimal
        plans.  See <xref linkend="runtime-config-query-geqo"/>.
-->
この値を<xref linkend="guc-geqo-threshold"/>か、それ以上に設定するとGEQOプランナ使用の誘引となり、最適ではない計画をもたらします。<xref linkend="runtime-config-query-geqo"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-plan-cache-mode" xreflabel="plan_cache_mode">
      <term><varname>plan_cache_mode</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>plan_cache_mode</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>plan_cache_mode</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Prepared statements (either explicitly prepared or implicitly
        generated, for example by PL/pgSQL) can be executed using custom or
        generic plans.  Custom plans are made afresh for each execution
        using its specific set of parameter values, while generic plans do
        not rely on the parameter values and can be re-used across
        executions.  Thus, use of a generic plan saves planning time, but if
        the ideal plan depends strongly on the parameter values then a
        generic plan may be inefficient.  The choice between these options
        is normally made automatically, but it can be overridden
        with <varname>plan_cache_mode</varname>.
        The allowed values are <literal>auto</literal> (the default),
        <literal>force_custom_plan</literal> and
        <literal>force_generic_plan</literal>.
        This setting is considered when a cached plan is to be executed,
        not when it is prepared.
        For more information see <xref linkend="sql-prepare"/>.
-->
準備された文（明示的に準備されたものあるいはPL/pgSQLのように暗黙的に生成されたもののどちらにおいても）は、カスタムあるいは汎用(generic)プランで実行することができます。
カスタムプランは実行ごとに指定されたパラメータ値の集合で新たに作られます。
一方汎用プランはパラメータ値に依存せず、複数の実行にまたがって再利用できます。
したがって、汎用プランはプランニングに要する時間を節約できますが、理想的なプランがパラメータ値に強く依存している場合は、汎用プランは非効率かも知れません。
通常この両者の選択は自動的に行われますが、<varname>plan_cache_mode</varname>で上書きできます。
可能な値は<literal>auto</literal>（デフォルト）、<literal>force_custom_plan</literal>、<literal>force_generic_plan</literal>です。
この設定は、準備するときではなく、キャッシュされたプランを実行する際に考慮されます。
詳細は<xref linkend="sql-prepare"/>をご覧ください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recursive-worktable-factor" xreflabel="recursive_worktable_factor">
      <term><varname>recursive_worktable_factor</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>recursive_worktable_factor</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>recursive_worktable_factor</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the planner's estimate of the average size of the working
        table of a <link linkend="queries-with-recursive">recursive
        query</link>, as a multiple of the estimated size of the initial
        non-recursive term of the query.  This helps the planner choose
        the most appropriate method for joining the working table to the
        query's other tables.
        The default value is <literal>10.0</literal>.  A smaller value
        such as <literal>1.0</literal> can be helpful when the recursion
        has low <quote>fan-out</quote> from one step to the next, as for
        example in shortest-path queries.  Graph analytics queries may
        benefit from larger-than-default values.
-->
<link linkend="queries-with-recursive">再帰問い合わせ</link>のワーキング・テーブルの平均サイズのプランナの推定値を、問い合わせの最初の非再帰項の推定サイズの倍数として設定します。
これにより、プランナは、ワーキング・テーブルを問い合わせの他のテーブルに結合するための最も適切な方法を選択できます。
デフォルト値は<literal>10.0</literal>です。
<literal>1.0</literal>などの小さい値は、最短パス問い合わせなど、あるステップから次のステップへの再帰が低い<quote>広がり方(fanout)</quote>の場合に役立ちます。
グラフ分析の問い合わせでは、デフォルト値より大きい値が有効な場合があります。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-logging">
<!--
    <title>Error Reporting and Logging</title>
-->
    <title>エラー報告とログ出力</title>

    <indexterm zone="runtime-config-logging">
     <primary>server log</primary>
    </indexterm>
    <indexterm zone="runtime-config-logging">
     <primary>サーバログ</primary>
    </indexterm>

    <sect2 id="runtime-config-logging-where">
<!--
     <title>Where to Log</title>
-->
     <title>どこにログを出力するか</title>

     <indexterm zone="runtime-config-logging-where">
      <primary>where to log</primary>
     </indexterm>
     <indexterm zone="runtime-config-logging-where">
      <primary>ログの出力先</primary>
     </indexterm>

     <indexterm>
       <primary>current_logfiles</primary>
       <secondary>and the log_destination configuration parameter</secondary>
     </indexterm>
     <indexterm>
       <primary>current_logfiles</primary>
       <secondary>およびlog_destination設定パラメータ</secondary>
     </indexterm>

     <variablelist>

     <varlistentry id="guc-log-destination" xreflabel="log_destination">
      <term><varname>log_destination</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_destination</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_destination</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        <productname>PostgreSQL</productname> supports several methods
         for logging server messages, including
         <systemitem>stderr</systemitem>, <systemitem>csvlog</systemitem>,
         <systemitem>jsonlog</systemitem>, and
         <systemitem>syslog</systemitem>. On Windows,
         <systemitem>eventlog</systemitem> is also supported. Set this
         parameter to a list of desired log destinations separated by
         commas. The default is to log to <systemitem>stderr</systemitem>
         only.
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line.
-->
<productname>PostgreSQL</productname>は、<systemitem>stderr</systemitem>、<systemitem>jsonlog</systemitem>、<systemitem>csvlog</systemitem>、<systemitem>jsonlog</systemitem>および<systemitem>syslog</systemitem>を含めて、サーバメッセージのログ出力に対し数種類の方法を提供します。
Windowsでは、<systemitem>eventlog</systemitem>も同時に提供します。
このパラメータを設定するには、カンマ区切りでお好みのログ出力先を記載します。
デフォルトでは、ログは<systemitem>stderr</systemitem>のみに出力されます。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
       <para>
<!--
        If <systemitem>csvlog</systemitem> is included in <varname>log_destination</varname>,
        log entries are output in <quote>comma-separated
        value</quote> (<acronym>CSV</acronym>) format, which is convenient for
        loading logs into programs.
        See <xref linkend="runtime-config-logging-csvlog"/> for details.
        <xref linkend="guc-logging-collector"/> must be enabled to generate
        CSV-format log output.
-->
《マッチ度[85.347044]》<systemitem>csvlog</systemitem>が<varname>log_destination</varname>に含まれる場合、ログ項目はプログラムへの読み込みが簡便な<quote>カンマ区切り値</quote>書式（<acronym>CSV</acronym>）で出力されます。
詳細は<xref linkend="runtime-config-logging-csvlog"/>を参照してください。
CSV書式のログ出力を生成するためには<xref linkend="guc-logging-collector"/>を有効にする必要があります。
《機械翻訳》<varname>log_destination</varname> csvlogが含まれている場合、ログエントリは<quote>カンマ区切り値</quote>（<acronym>CSV</acronym>）フォーマットに出力されます。
プログラムにログをロードするのに便利です。
詳細は<xref linkend="runtime-config-logging-csvlog"/>を参照してください。
CSV-フォーマットログ出力を生成するには、<xref linkend="guc-logging-collector"/>を有効にする必要があります。
<systemitem></systemitem>
       </para>
       <para>
<!--
        If <systemitem>jsonlog</systemitem> is included in
        <varname>log_destination</varname>, log entries are output in
        <acronym>JSON</acronym> format, which is convenient for loading logs
        into programs.
        See <xref linkend="runtime-config-logging-jsonlog"/> for details.
        <xref linkend="guc-logging-collector"/> must be enabled to generate
        JSON-format log output.
-->
<systemitem>jsonlog</systemitem>が<varname>log_destination</varname>に含まれる場合、ログ項目はプログラムへの読み込みが簡便な<acronym>JSON</acronym>書式で出力されます。
詳細は<xref linkend="runtime-config-logging-jsonlog"/>を参照してください。
JSON書式のログ出力を生成するためには<xref linkend="guc-logging-collector"/>を有効にする必要があります。
       </para>
       <para>
<!--
        When either <systemitem>stderr</systemitem>,
        <systemitem>csvlog</systemitem> or <systemitem>jsonlog</systemitem> are
        included, the file <filename>current_logfiles</filename> is created to
        record the location of the log file(s) currently in use by the logging
        collector and the associated logging destination. This provides a
        convenient way to find the logs currently in use by the instance. Here
        is an example of this file's content:
-->
<systemitem>stderr</systemitem>、<systemitem>csvlog</systemitem>、または<systemitem>jsonlog</systemitem>のいずれかが含まれている場合、ファイル<filename>current_logfiles</filename>が作成され、ロギングコレクタによって現在使用されているログファイルの場所と関連付けられたロギング先が記録されます。
これにより、インスタンスによって現在使用されているログを簡単に見つけることができます。
このファイルの内容の例を次に示します:
<programlisting>
stderr log/postgresql.log
csvlog log/postgresql.csv
jsonlog log/postgresql.json
</programlisting>

<!--
        <filename>current_logfiles</filename> is recreated when a new log file
        is created as an effect of rotation, and
        when <varname>log_destination</varname> is reloaded.  It is removed when
        none of <systemitem>stderr</systemitem>,
        <systemitem>csvlog</systemitem> or <systemitem>jsonlog</systemitem> are
        included in <varname>log_destination</varname>, and when the logging
        collector is disabled.
-->
<filename>current_logfiles</filename>は、ローテーションの効果として新しいログファイルが作成されたとき、および<varname>log_destination</varname>がリロードされたときに再作成されます。
<systemitem>stderr</systemitem>、<systemitem>csvlog</systemitem>、<systemitem>jsonlog</systemitem>のいずれも<varname>log_destination</varname>に含まれていないとき、およびロギングコレクタが無効になっているときに削除されます。
       </para>

       <note>
        <para>
<!--
         On most Unix systems, you will need to alter the configuration of
         your system's <application>syslog</application> daemon in order
         to make use of the <systemitem>syslog</systemitem> option for
         <varname>log_destination</varname>.  <productname>PostgreSQL</productname>
         can log to <application>syslog</application> facilities
         <literal>LOCAL0</literal> through <literal>LOCAL7</literal> (see <xref
         linkend="guc-syslog-facility"/>), but the default
         <application>syslog</application> configuration on most platforms
         will discard all such messages.  You will need to add something like:
-->
<varname>log_destination</varname>で<systemitem>syslog</systemitem>オプションを使用できるようにするために、ほとんどのUnixシステムではシステムの<application>syslog</application>デーモンの設定を変更しなければならないでしょう。
<productname>PostgreSQL</productname>ではログを<literal>LOCAL0</literal>から<literal>LOCAL7</literal>までの<application>syslog</application>ファシリティで記録することができます（<xref linkend="guc-syslog-facility"/>を参照してください）。
しかし、ほとんどのプラットフォームのデフォルトの<application>syslog</application>設定ではこれらのメッセージはすべて破棄されます。
うまく動作させるために
<programlisting>
local0.*    /var/log/postgresql
</programlisting>
<!--
         to the  <application>syslog</application> daemon's configuration file
         to make it work.
-->
<application>syslog</application>デーモンの設定ファイルに追加しなければならないでしょう。
        </para>
        <para>
<!--
         On Windows, when you use the <literal>eventlog</literal>
         option for <varname>log_destination</varname>, you should
         register an event source and its library with the operating
         system so that the Windows Event Viewer can display event
         log messages cleanly.
         See <xref linkend="event-log-registration"/> for details.
-->
Windowsで<varname>log_destination</varname>に対し<literal>eventlog</literal>オプションを使用する場合、Windows Event Viewer がイベントログメッセージを手際良く表示できるよう、オペレーティングシステムでイベントソースとそのライブラリを登録しなければなりません。
詳細は<xref linkend="event-log-registration"/>を参照ください。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-logging-collector" xreflabel="logging_collector">
      <term><varname>logging_collector</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>logging_collector</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>logging_collector</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
         This parameter enables the <firstterm>logging collector</firstterm>, which
         is a background process that captures log messages
         sent to <systemitem>stderr</systemitem> and redirects them into log files.
         This approach is often more useful than
         logging to <application>syslog</application>, since some types of messages
         might not appear in <application>syslog</application> output.  (One common
         example is dynamic-linker failure messages; another is error messages
         produced by scripts such as <varname>archive_command</varname>.)
         This parameter can only be set at server start.
-->
このパラメータは<firstterm>ログ収集機構</firstterm>を有効にします。
それは<systemitem>stderr</systemitem>に送られたログメッセージを捕捉し、ログファイルにリダイレクトするバックグラウンドプロセスです。
この手法は<application>syslog</application>へのログよりもしばしば有用です。
メッセージの一部の種類が<application>syslog</application>では出力されない可能性があるためです。
（一般的な例として、ダイナミックリンカのエラーメッセージがあり、その他の例として<varname>archive_command</varname>のようなスクリプトにより生成されたエラーメッセージが挙げられます。）
このパラメータはサーバ起動時のみ設定可能です。
       </para>

       <note>
        <para>
<!--
         It is possible to log to <systemitem>stderr</systemitem> without using the
         logging collector; the log messages will just go to wherever the
         server's <systemitem>stderr</systemitem> is directed.  However, that method is
         only suitable for low log volumes, since it provides no convenient
         way to rotate log files.  Also, on some platforms not using the
         logging collector can result in lost or garbled log output, because
         multiple processes writing concurrently to the same log file can
         overwrite each other's output.
-->
ログ収集機構を使用せずに<systemitem>stderr</systemitem>のログを取ることは可能です。
ログメッセージはサーバの<systemitem>stderr</systemitem>が指し示すいかなる場所にも向かうだけです。
しかし、その方法はログファイルを巡回させる都合のよい方法を提供しないので、ログ容量が小さい場合のみに適しています。
同時に、ログ収集機構を使用しないいくつかのプラットフォームにおいては、ログ出力が失われたり、文字化けします。なぜなら、同一のログファイルに同時に書き込みを行うマルチプロセッサはそれぞれの出力を上書きできるからです。
        </para>
       </note>

       <note>
        <para>
<!--
          The logging collector is designed to never lose messages.  This means
          that in case of extremely high load, server processes could be
          blocked while trying to send additional log messages when the
          collector has fallen behind.  In contrast, <application>syslog</application>
          prefers to drop messages if it cannot write them, which means it
          may fail to log some messages in such cases but it will not block
          the rest of the system.
-->
ログ収集機構はメッセージを決して失わないために設計されています。
これは、極端に高い負荷の場合、サーバプロセスはコレクタが遅れをとった場合、追加のログメッセージを送信しようと試みる時に阻止される可能性があります。
それとは対象的に<application>syslog</application>は、もし書き込みができなかったときメッセージの廃棄を選びます。
これらの場合にはいくつかのログメッセージを失うことになりますが、残ったシステムを阻止しません。
        </para>
       </note>

      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-directory" xreflabel="log_directory">
      <term><varname>log_directory</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_directory</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_directory</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When <varname>logging_collector</varname> is enabled,
        this parameter determines the directory in which log files will be created.
        It can be specified as an absolute path, or relative to the
        cluster data directory.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
        The default is <literal>log</literal>.
-->
<varname>logging_collector</varname>を有効と設定した場合、このパラメータはログファイルが作成されるディレクトリを確定します。
ディレクトリは、絶対パス、もしくはデータベースクラスタのディレクトリに対する相対パスで指定することができます。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
デフォルトは<literal>log</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-filename" xreflabel="log_filename">
      <term><varname>log_filename</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_filename</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_filename</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When <varname>logging_collector</varname> is enabled,
        this parameter sets the file names of the created log files.  The value
        is treated as a <function>strftime</function> pattern,
        so <literal>%</literal>-escapes can be used to specify time-varying
        file names.  (Note that if there are
        any time-zone-dependent <literal>%</literal>-escapes, the computation
        is done in the zone specified
        by <xref linkend="guc-log-timezone"/>.)
        The supported <literal>%</literal>-escapes are similar to those
        listed in the Open Group's <ulink
        url="https://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html">strftime
        </ulink> specification.
        Note that the system's <function>strftime</function> is not used
        directly, so platform-specific (nonstandard) extensions do not work.
        The default is <literal>postgresql-%Y-%m-%d_%H%M%S.log</literal>.
-->
<varname>logging_collector</varname>が有効な場合、このパラメータは作成されたログファイルのファイル名を設定します。
値は<function>strftime</function>パターンとして扱われるため、<literal>%</literal>エスケープを使用して、時刻によって変動するファイル名を指定することができます。
（時間帯に依存した<literal>%</literal>エスケープが存在する場合、<xref
linkend="guc-log-timezone"/>で指定された時間帯で計算が行われます。）
サポートされている<literal>%</literal>-エスケープは<ulink url="https://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html">strftime</ulink> 仕様によく似ています。
システムの<function>strftime</function>は直接使用されないので、プラットフォーム固有の（非標準）の拡張は動作しません。
デフォルトは<literal>postgresql-%Y-%m-%d_%H%M%S.log</literal>です。
       </para>
       <para>
<!--
        If you specify a file name without escapes, you should plan to
        use a log rotation utility to avoid eventually filling the
        entire disk.  In releases prior to 8.4, if
        no <literal>%</literal> escapes were
        present, <productname>PostgreSQL</productname> would append
        the epoch of the new log file's creation time, but this is no
        longer the case.
-->
エスケープすることなくファイル名を指定する場合、ディスク全体を使い切ってしまうことを防止するためにログローテーションを行うユーティリティを使用することを計画しなければなりません。
8.4より前のリリースの<productname>PostgreSQL</productname>では、<literal>%</literal>エスケープがなければ、新しいログファイルの生成時のエポック時刻を付与しますが、これはもはや当てはまりません。
       </para>
       <para>
<!--
        If CSV-format output is enabled in <varname>log_destination</varname>,
        <literal>.csv</literal> will be appended to the timestamped
        log file name to create the file name for CSV-format output.
        (If <varname>log_filename</varname> ends in <literal>.log</literal>, the suffix is
        replaced instead.)
-->
CSV書式の出力が<varname>log_destination</varname>で有効な場合、タイムスタンプ付きのログファイル名に<literal>.csv</literal>を付与し、最終的なCSV書式出力用のファイル名が作成されます。
（<varname>log_filename</varname>が<literal>.log</literal>で終わる場合は後置詞が置き換えられます。）
       </para>
       <para>
<!--
        If JSON-format output is enabled in <varname>log_destination</varname>,
        <literal>.json</literal> will be appended to the timestamped
        log file name to create the file name for JSON-format output.
        (If <varname>log_filename</varname> ends in <literal>.log</literal>, the suffix is
        replaced instead.)
-->
JSON書式の出力が<varname>log_destination</varname>で有効な場合、タイムスタンプ付きのログファイル名に<literal>.json</literal>を付与し、最終的なJSON書式出力用のファイル名が作成されます。
（<varname>log_filename</varname>が<literal>.log</literal>で終わる場合は後置詞が置き換えられます。）
       </para>
       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-file-mode" xreflabel="log_file_mode">
      <term><varname>log_file_mode</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_file_mode</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_file_mode</varname> 設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        On Unix systems this parameter sets the permissions for log files
        when <varname>logging_collector</varname> is enabled. (On Microsoft
        Windows this parameter is ignored.)
        The parameter value is expected to be a numeric mode
        specified in the format accepted by the
        <function>chmod</function> and <function>umask</function>
        system calls.  (To use the customary octal format the number
        must start with a <literal>0</literal> (zero).)
-->
Unixシステムにおいては、<varname>logging_collector</varname>が有効になっている場合、このパラメータはログファイルのパーミッションを設定します。
（Microsoft Windowsではこのパラメータは無視されます。）
パラメータの値は<function>chmod</function> および <function>umask</function>システムコールで許容されるフォーマットで指定される数値モードであると期待されます。
（慣例的な8進数フォーマットを使用する場合、番号は<literal>0</literal>（ゼロ）で始まらなければなりません。
       </para>
       <para>
<!--
        The default permissions are <literal>0600</literal>, meaning only the
        server owner can read or write the log files.  The other commonly
        useful setting is <literal>0640</literal>, allowing members of the owner's
        group to read the files.  Note however that to make use of such a
        setting, you'll need to alter <xref linkend="guc-log-directory"/> to
        store the files somewhere outside the cluster data directory.  In
        any case, it's unwise to make the log files world-readable, since
        they might contain sensitive data.
-->
デフォルトのパーミッションは<literal>0600</literal>で、意味するところはサーバの所有者のみログファイルの読み書きが可能です。
そのほか一般的に実用的な設定は<literal>0640</literal>で、所有者のグループはファイルを読み込めます。
しかし、これらの設定を活用するには<xref linkend="guc-log-directory"/>がクラスタデータディレクトリの外部のどこかにあるファイルを格納できるように変更する必要があります。
いずれにせよ、それらは機密データを含む可能性があるため、ログファイルを誰もが読み取り可能にすることは賢明ではありません。
       </para>
       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-rotation-age" xreflabel="log_rotation_age">
      <term><varname>log_rotation_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_rotation_age</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_rotation_age</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When <varname>logging_collector</varname> is enabled,
        this parameter determines the maximum amount of time to use an
        individual log file, after which a new log file will be created.
        If this value is specified without units, it is taken as minutes.
        The default is 24 hours.
        Set to zero to disable time-based creation of new log files.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
<varname>logging_collector</varname>が有効な場合、このパラメータは個々のログファイルの最大寿命を決定します。
ここで指定した時間経過すると、新しいログファイルが生成されます。
この値が単位なしで指定された場合は、分単位であるとみなします。
デフォルトは24時間です。
ゼロに設定することで、時間に基づいた新しいログファイルの生成は無効になります。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-rotation-size" xreflabel="log_rotation_size">
      <term><varname>log_rotation_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_rotation_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_rotation_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When <varname>logging_collector</varname> is enabled,
        this parameter determines the maximum size of an individual log file.
        After this amount of data has been emitted into a log file,
        a new log file will be created.
        If this value is specified without units, it is taken as kilobytes.
        The default is 10 megabytes.
        Set to zero to disable size-based creation of new log files.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
<varname>logging_collector</varname>が有効な場合、このパラメータは個々のログファイルの最大容量を決定します。
ここで指定したデータ量がログファイルに出力された後、新しいログファイルが生成されます。
この値が単位なしで指定された場合は、キロバイト単位であるとみなします。
デフォルトは10メガバイトです。
ゼロに設定することで、サイズに基づいた新しいログファイルの生成は無効になります。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-truncate-on-rotation" xreflabel="log_truncate_on_rotation">
      <term><varname>log_truncate_on_rotation</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_truncate_on_rotation</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_truncate_on_rotation</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When <varname>logging_collector</varname> is enabled,
        this parameter will cause <productname>PostgreSQL</productname> to truncate (overwrite),
        rather than append to, any existing log file of the same name.
        However, truncation will occur only when a new file is being opened
        due to time-based rotation, not during server startup or size-based
        rotation.  When off, pre-existing files will be appended to in
        all cases.  For example, using this setting in combination with
        a <varname>log_filename</varname> like <literal>postgresql-%H.log</literal>
        would result in generating twenty-four hourly log files and then
        cyclically overwriting them.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
<varname>logging_collector</varname>が有効な場合、このパラメータにより、<productname>PostgreSQL</productname>は既存の同名のファイルに追加するのではなく、そのファイルを切り詰める（上書きする）ようになります。
しかし、切り詰めは時間を基にしたローテーションのために新規にファイルが開かれた時にのみ発生し、サーバ起動時やサイズを基にしたローテーションでは発生しません。
偽の場合、全ての場合において既存のファイルは追記されます。
例えば、この設定を<literal>postgresql-%H.log</literal>のような<varname>log_filename</varname>と組み合わせて使用すると、24個の時別のログファイルが生成され、それらは周期的に上書きされることになります。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
       <para>
<!--
        Example:  To keep 7 days of logs, one log file per day named
        <literal>server_log.Mon</literal>, <literal>server_log.Tue</literal>,
        etc., and automatically overwrite last week's log with this week's log,
        set <varname>log_filename</varname> to <literal>server_log.%a</literal>,
        <varname>log_truncate_on_rotation</varname> to <literal>on</literal>, and
        <varname>log_rotation_age</varname> to <literal>1440</literal>.
-->
例：7日間のログを保存し、毎日のログを <literal>server_log.Mon</literal>、<literal>server_log.Tue</literal>、等とし、そして自動的に前週のログを今週のログで上書きするには以下のように設定します。
<varname>log_filename</varname> を <literal>server_log.%a</literal>とし、<varname>log_truncate_on_rotation</varname> を <literal>on</literal>にし、そして<varname>log_rotation_age</varname> を <literal>1440</literal>に設定します。
       </para>
       <para>
<!--
        Example: To keep 24 hours of logs, one log file per hour, but
        also rotate sooner if the log file size exceeds 1GB, set
        <varname>log_filename</varname> to <literal>server_log.%H%M</literal>,
        <varname>log_truncate_on_rotation</varname> to <literal>on</literal>,
        <varname>log_rotation_age</varname> to <literal>60</literal>, and
        <varname>log_rotation_size</varname> to <literal>1000000</literal>.
        Including <literal>%M</literal> in <varname>log_filename</varname> allows
        any size-driven rotations that might occur to select a file name
        different from the hour's initial file name.
-->
例：24時間のログを保持、1時間おきに1つのログファイルを作成、ただし、ログファイルのサイズが1ギガバイトを超えた場合それより早く切り替えさせるには、<varname>log_filename</varname>を<literal>server_log.%H%M</literal>にし、<varname>log_truncate_on_rotation</varname>を<literal>on</literal>にし、<varname>log_rotation_age</varname>を<literal>60</literal>にし、そして<varname>log_rotation_size</varname>を<literal>1000000</literal>に設定します。
<varname>log_filename</varname>に<literal>%M</literal>を含めると、サイズを元にしたローテーションが時間毎の始めのファイル名とは異なる名前のファイルを選択するようにできます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-syslog-facility" xreflabel="syslog_facility">
      <term><varname>syslog_facility</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>syslog_facility</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>syslog_facility</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When logging to <application>syslog</application> is enabled, this parameter
        determines the <application>syslog</application>
        <quote>facility</quote> to be used.  You can choose
        from <literal>LOCAL0</literal>, <literal>LOCAL1</literal>,
        <literal>LOCAL2</literal>, <literal>LOCAL3</literal>, <literal>LOCAL4</literal>,
        <literal>LOCAL5</literal>, <literal>LOCAL6</literal>, <literal>LOCAL7</literal>;
        the default is <literal>LOCAL0</literal>. See also the
        documentation of your system's
        <application>syslog</application> daemon.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
<application>syslog</application>へのログ出力が有効な場合、このパラメータは<application>syslog</application>の<quote>facility</quote>が使われるように確定します。
<literal>LOCAL0</literal>、<literal>LOCAL1</literal>、<literal>LOCAL2</literal>、<literal>LOCAL3</literal>、<literal>LOCAL4</literal>、<literal>LOCAL5</literal>、<literal>LOCAL6</literal>、<literal>LOCAL7</literal>の中から選んでください。
デフォルトは<literal>LOCAL0</literal>です。
使用しているシステムの<application>syslog</application>デーモンの文書を同時に参照してください。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-syslog-ident" xreflabel="syslog_ident">
      <term><varname>syslog_ident</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>syslog_ident</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>syslog_ident</varname>設定パラメータ</primary>
      </indexterm>
      </term>
       <listitem>
        <para>
<!--
         When logging to <application>syslog</application> is enabled, this parameter
         determines the program name used to identify
         <productname>PostgreSQL</productname> messages in
         <application>syslog</application> logs. The default is
         <literal>postgres</literal>.
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line.
-->
<application>syslog</application>にログ出力が有効な場合、このパラメータは<application>syslog</application>ログ内の<productname>PostgreSQL</productname>メッセージを特定するのに使用するプログラム名を確定します。デフォルトは<literal>postgres</literal>です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-syslog-sequence-numbers" xreflabel="syslog_sequence_numbers">
       <term><varname>syslog_sequence_numbers</varname> (<type>boolean</type>)
        <indexterm>
         <primary><varname>syslog_sequence_numbers</varname> configuration parameter</primary>
        </indexterm>
        <indexterm>
         <primary><varname>syslog_sequence_numbers</varname>設定パラメータ</primary>
        </indexterm>
       </term>

       <listitem>
        <para>
<!--
         When logging to <application>syslog</application> and this is on (the
         default), then each message will be prefixed by an increasing
         sequence number (such as <literal>[2]</literal>).  This circumvents
         the <quote>&#45;&#45;- last message repeated N times &#45;&#45;-</quote> suppression
         that many syslog implementations perform by default.  In more modern
         syslog implementations, repeated message suppression can be configured
         (for example, <literal>$RepeatedMsgReduction</literal>
         in <productname>rsyslog</productname>), so this might not be
         necessary.  Also, you could turn this off if you actually want to
         suppress repeated messages.
-->
<application>syslog</application>にログを出力している場合で、これがオン（デフォルト）であると、各メッセージには（<literal>[2]</literal>のような）増加する順序数が頭に追加されます。
これにより、多くのsyslogの実装がデフォルトで行う<quote>--- last message repeated N times ---</quote>による出力の抑止が回避されます。
より近代的なsyslogの実装では、繰り返されるメッセージの抑止は設定変更できるので（たとえば、<productname>rsyslog</productname>）における<literal>$RepeatedMsgReduction</literal>）、この機能は必要ないかもしれません。
繰り返されるメッセージを抑止したい場合には、これをオフにできます。
        </para>

        <para>
<!--
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
        </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-syslog-split-messages" xreflabel="syslog_split_messages">
      <term><varname>syslog_split_messages</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>syslog_split_messages</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>syslog_split_messages</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When logging to <application>syslog</application> is enabled, this parameter
        determines how messages are delivered to syslog.  When on (the
        default), messages are split by lines, and long lines are split so
        that they will fit into 1024 bytes, which is a typical size limit for
        traditional syslog implementations.  When off, PostgreSQL server log
        messages are delivered to the syslog service as is, and it is up to
        the syslog service to cope with the potentially bulky messages.
-->
<application>syslog</application>へのログ出力が有効な場合、このパラメータはメッセージがどのようにsyslogに送られるかを規定します。
オンなら（デフォルト）、メッセージは行に分割され、長い行は、伝統的なsyslog実装のサイズ上限である1024バイト以内に分割されます。
オフならば、PostgreSQLサーバログメッセージは、そのままsyslogサービスに送られます。
大きなサイズになるかもしれないメッセージにどう対応するかは、syslogサービス次第となります。
       </para>

       <para>
<!--
        If syslog is ultimately logging to a text file, then the effect will
        be the same either way, and it is best to leave the setting on, since
        most syslog implementations either cannot handle large messages or
        would need to be specially configured to handle them.  But if syslog
        is ultimately writing into some other medium, it might be necessary or
        more useful to keep messages logically together.
-->
もしsyslogが最終的にテキストファイルにログを出力するのであれば、どちらに設定しても効果は同じです。
設定値をオンにしておくのが最善です。
多くのsyslogの実装では、長いメッセージを扱えないか、長いメッセージを扱うための特別な設定が必要だからです。
しかし、syslogが最終的に他のメディアに書き込むのであれば、メッセージを論理的に一緒にしておくことが必要か、もしくは有用です。
       </para>

       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-event-source" xreflabel="event_source">
      <term><varname>event_source</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>event_source</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>event_source</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When logging to <application>event log</application> is enabled, this parameter
        determines the program name used to identify
        <productname>PostgreSQL</productname> messages in
        the log. The default is <literal>PostgreSQL</literal>.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
<application>event log</application>へのログ出力が有効になっていると、このパラメータはログ中の<productname>PostgreSQL</productname>メッセージを特定するのに使用されるプログラム名を決定します。デフォルトは<literal>PostgreSQL</literal>です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

      </variablelist>
    </sect2>
     <sect2 id="runtime-config-logging-when">
<!--
     <title>When to Log</title>
-->
     <title>いつログを出力するか</title>

     <variablelist>

     <varlistentry id="guc-log-min-messages" xreflabel="log_min_messages">
      <term><varname>log_min_messages</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>log_min_messages</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_min_messages</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls which <link linkend="runtime-config-severity-levels">message
        levels</link> are written to the server log.
        Valid values are <literal>DEBUG5</literal>, <literal>DEBUG4</literal>,
        <literal>DEBUG3</literal>, <literal>DEBUG2</literal>, <literal>DEBUG1</literal>,
        <literal>INFO</literal>, <literal>NOTICE</literal>, <literal>WARNING</literal>,
        <literal>ERROR</literal>, <literal>LOG</literal>, <literal>FATAL</literal>, and
        <literal>PANIC</literal>.  Each level includes all the levels that
        follow it.  The later the level, the fewer messages are sent
        to the log.  The default is <literal>WARNING</literal>.  Note that
        <literal>LOG</literal> has a different rank here than in
        <xref linkend="guc-client-min-messages"/>.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
どの<link linkend="runtime-config-severity-levels">メッセージレベル</link>をサーバログに書き込むかを管理します。
有効な値は<literal>DEBUG5</literal>、<literal>DEBUG4</literal>、<literal>DEBUG3</literal>、<literal>DEBUG2</literal>、<literal>DEBUG1</literal>、<literal>INFO</literal>、<literal>NOTICE</literal>、<literal>WARNING</literal>、<literal>ERROR</literal>、<literal>LOG</literal>、<literal>FATAL</literal>、および<literal>PANIC</literal>です。
それぞれの階層はその下の全ての階層を含みます。階層を低くする程、より少ないメッセージがログに送られます。
デフォルトは<literal>WARNING</literal>です。
ここでの<literal>LOG</literal>の優先順位が<xref linkend="guc-client-min-messages"/>の場合と異なることに注意してください。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-min-error-statement" xreflabel="log_min_error_statement">
      <term><varname>log_min_error_statement</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>log_min_error_statement</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_min_error_statement</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls which SQL statements that cause an error
        condition are recorded in the server log.  The current
        SQL statement is included in the log entry for any message of
        the specified
        <link linkend="runtime-config-severity-levels">severity</link>
        or higher.
        Valid values are <literal>DEBUG5</literal>,
        <literal>DEBUG4</literal>, <literal>DEBUG3</literal>,
        <literal>DEBUG2</literal>, <literal>DEBUG1</literal>,
        <literal>INFO</literal>, <literal>NOTICE</literal>,
        <literal>WARNING</literal>, <literal>ERROR</literal>,
        <literal>LOG</literal>,
        <literal>FATAL</literal>, and <literal>PANIC</literal>.
        The default is <literal>ERROR</literal>, which means statements
        causing errors, log messages, fatal errors, or panics will be logged.
        To effectively turn off logging of failing statements,
        set this parameter to <literal>PANIC</literal>.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
エラー条件の原因となったどのSQL文をサーバログに記録するかを制御します。
設定した<link linkend="runtime-config-severity-levels">レベル</link>以上のメッセージについては現在のSQL文がログに記録されます。
有効な値は、<literal>DEBUG5</literal>、<literal>DEBUG4</literal>、<literal>DEBUG3</literal>、<literal>DEBUG2</literal>、<literal>DEBUG1</literal>、<literal>INFO</literal>、<literal>NOTICE</literal>、<literal>WARNING</literal>、<literal>ERROR</literal>、<literal>LOG</literal>、<literal>FATAL</literal>、<literal>PANIC</literal>です。
デフォルトは<literal>ERROR</literal>です。
エラー、ログメッセージ、致命的エラー、パニックを引き起こした文がログに記録されることを意味します。
失敗した文の記録を実質的に無効にするには、このパラメータを<literal>PANIC</literal>に設定してください。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-min-duration-statement" xreflabel="log_min_duration_statement">
      <term><varname>log_min_duration_statement</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_min_duration_statement</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_min_duration_statement</varname>設定パラメータ</primary>
      </indexterm>
      </term>
       <listitem>
        <para>
<!--
         Causes the duration of each completed statement to be logged
         if the statement ran for at least the specified amount of time.
         For example, if you set it to <literal>250ms</literal>
         then all SQL statements that run 250ms or longer will be
         logged.  Enabling this parameter can be helpful in tracking down
         unoptimized queries in your applications.
         If this value is specified without units, it is taken as milliseconds.
         Setting this to zero prints all statement durations.
         <literal>-1</literal> (the default) disables logging statement
         durations.
         Only superusers and users with the appropriate <literal>SET</literal>
         privilege can change this setting.
-->
文の実行に少なくとも指定した時間かかった場合、それぞれの文の実行に要した時間をログに記録します。
例えば、<literal>250ms</literal>と設定した場合、250msもしくはそれ以上長くかかった全てのSQL文がログとして残ります。
このパラメータを有効にすることにより、アプリケーションで最適化されていない問い合わせを追跡するのが便利になります。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
0に設定すれば、すべての文の実行時間が出力されます。
<literal>-1</literal>（デフォルト）は、文実行時間の記録を無効にします。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
        </para>

        <para>
<!--
         This overrides <xref linkend="guc-log-min-duration-sample"/>,
         meaning that queries with duration exceeding this setting are not
         subject to sampling and are always logged.
-->
これは<xref linkend="guc-log-min-duration-sample"/>を上書きします。つまり、問い合わせがこの設定を越えると、実行時間のサンプリングの対象にならず、常に記録されます。
        </para>

        <para>
<!--
         For clients using extended query protocol, durations of the Parse,
         Bind, and Execute steps are logged independently.
-->
拡張問い合わせプロトコルを使用するクライアントでは、Parse、Bind、Executeそれぞれの段階で要した時間が独立して記録されます。
        </para>

       <note>
        <para>
<!--
         When using this option together with
         <xref linkend="guc-log-statement"/>,
         the text of statements that are logged because of
         <varname>log_statement</varname> will not be repeated in the
         duration log message.
         If you are not using <application>syslog</application>, it is recommended
         that you log the PID or session ID using
         <xref linkend="guc-log-line-prefix"/>
         so that you can link the statement message to the later
         duration message using the process ID or session ID.
-->
このオプションと<xref linkend="guc-log-statement"/>を一緒に使用する時、<varname>log_statement</varname>によって記録されるテキスト文は、実行時間のログには重複されません。
<application>syslog</application>を使用していなければ、プロセスIDとセッションIDを使用して、文メッセージと後の実行時間メッセージを関連付けできるように、<xref linkend="guc-log-line-prefix"/>を使用してPIDまたはセッションIDをログに記録することを勧めます。
        </para>
       </note>
       </listitem>
      </varlistentry>

     <varlistentry id="guc-log-min-duration-sample" xreflabel="log_min_duration_sample">
      <term><varname>log_min_duration_sample</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_min_duration_sample</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_min_duration_sample</varname>設定パラメータ</primary>
      </indexterm>
      </term>
       <listitem>
        <para>
<!--
         Allows sampling the duration of completed statements that ran for
         at least the specified amount of time.  This produces the same
         kind of log entries as
         <xref linkend="guc-log-min-duration-statement"/>, but only for a
         subset of the executed statements, with sample rate controlled by
         <xref linkend="guc-log-statement-sample-rate"/>.
         For example, if you set it to <literal>100ms</literal> then all
         SQL statements that run 100ms or longer will be considered for
         sampling.  Enabling this parameter can be helpful when the
         traffic is too high to log all queries.
         If this value is specified without units, it is taken as milliseconds.
         Setting this to zero samples all statement durations.
         <literal>-1</literal> (the default) disables sampling statement
         durations.
         Only superusers and users with the appropriate <literal>SET</literal>
         privilege can change this setting.
-->
指定した時間以上で実行完了した文の実行時間のサンプルを許可します。
これにより<xref linkend="guc-log-min-duration-statement"/>と同様ですが、<xref linkend="guc-log-statement-sample-rate"/>で制御するレートでサンプルされた実行時間のサブセットのログエントリを生成します。
たとえば、<literal>100ms</literal>に設定すると、100ミリ秒以上かかったSQL文がサンプルの対象となります。
このパラメータを有効にすることで、トラフィックが多すぎてすべての問い合わせをログできない状況で助けになることもあります。
この値を単位無しで指定すると、ミリ秒と見なされます。
これをゼロに設定すると、すべての文の実行時間がサンプルされます。
<literal>-1</literal>（デフォルトです）とすると、文の実行時間のサンプリングが無効になります。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
        </para>

        <para>
<!--
         This setting has lower priority
         than <varname>log_min_duration_statement</varname>, meaning that
         statements with durations
         exceeding <varname>log_min_duration_statement</varname> are not
         subject to sampling and are always logged.
-->
この設定は<varname>log_min_duration_statement</varname>よりも優先度が低いです。つまり、<varname>log_min_duration_statement</varname>を超えた実行時間の文はサンプリングの対象となり、常に記録されます。
        </para>

        <para>
<!--
         Other notes for <varname>log_min_duration_statement</varname>
         apply also to this setting.
-->
<varname>log_min_duration_statement</varname>のその他の注意事項もこの設定に適用されます。
        </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-statement-sample-rate" xreflabel="log_statement_sample_rate">
      <term><varname>log_statement_sample_rate</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>log_statement_sample_rate</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_statement_sample_rate</varname>設定パラメータ</primary>
      </indexterm>
      </term>
       <listitem>
        <para>
<!--
         Determines the fraction of statements with duration exceeding
         <xref linkend="guc-log-min-duration-sample"/> that will be logged.
         Sampling is stochastic, for example <literal>0.5</literal> means
         there is statistically one chance in two that any given statement
         will be logged.
         The default is <literal>1.0</literal>, meaning to log all sampled
         statements.
         Setting this to zero disables sampled statement-duration logging,
         the same as setting
         <varname>log_min_duration_sample</varname> to
         <literal>-1</literal>.
         Only superusers and users with the appropriate <literal>SET</literal>
         privilege can change this setting.
-->
<xref linkend="guc-log-min-duration-sample"/>を越え、記録対象となる文の割合を決定します。
サンプリングは確率論的で、たとえば<literal>0.5</literal>は2つの文のうちひとつが統計的に記録対象になることを意味します。
デフォルトは<literal>1.0</literal>で、サンプルされた文はすべて記録対象となります。
ゼロに設定すると、<varname>log_min_duration_sample</varname>を<literal>-1</literal>にしたのと同じで、文の実行時間のサンプルを記録しません。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
        </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-transaction-sample-rate" xreflabel="log_transaction_sample_rate">
      <term><varname>log_transaction_sample_rate</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>log_transaction_sample_rate</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_transaction_sample_rate</varname>設定パラメータ</primary>
      </indexterm>
      </term>
       <listitem>
        <para>
<!--
         Sets the fraction of transactions whose statements are all logged,
         in addition to statements logged for other reasons.  It applies to
         each new transaction regardless of its statements' durations.
         Sampling is stochastic, for example <literal>0.1</literal> means
         there is statistically one chance in ten that any given transaction
         will be logged.
         <varname>log_transaction_sample_rate</varname> can be helpful to
         construct a sample of transactions.
         The default is <literal>0</literal>, meaning not to log
         statements from any additional transactions.  Setting this
         to <literal>1</literal> logs all statements of all transactions.
         Only superusers and users with the appropriate <literal>SET</literal>
         privilege can change this setting.
-->
他の理由に加え、トランザクションの文のうち、ログの対象となる割合を設定します。
文の実行時間にかかわらず、新しいトランザクションに適用されます。
サンプリングは確率論的で、たとえば<literal>0.1</literal>は10のトランザクションのうちひとつが統計的に記録対象になることを意味します。
デフォルトは<literal>0</literal>で、これは追加のトランザクションのログを取らないことを意味します。
<literal>1</literal>に設定すると、すべてのトランザクションのすべての文のログを取ります。
<varname>log_transaction_sample_rate</varname>は、トランザクションのサンプルを調査するのに役立ちます。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
        </para>
       <note>
        <para>
<!--
         Like all statement-logging options, this option can add significant
         overhead.
-->
他の文のログを取るオプション同様、このオプションも大きなオーバーヘッドを与える可能性があります。
        </para>
       </note>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-startup-progress-interval" xreflabel="log_startup_progress_interval">
      <term><varname>log_startup_progress_interval</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_startup_progress_interval</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_startup_progress_interval</varname>設定パラメータ</primary>
      </indexterm>
      </term>
       <listitem>
        <para>
<!--
         Sets the amount of time after which the startup process will log
         a message about a long-running operation that is still in progress,
         as well as the interval between further progress messages for that
         operation. The default is 10 seconds. A setting of <literal>0</literal>
         disables the feature.  If this value is specified without units,
         it is taken as milliseconds.  This setting is applied separately to
         each operation.
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line.
-->
起動プロセスが実行中の長時間実行操作に関するメッセージをログに記録するまでの時間と、その操作に関する次の進行状況メッセージの間隔を設定します。
デフォルトは10秒です。
<literal>0</literal>に設定すると、この機能は無効になります。この値を単位なしで指定すると、ミリ秒とみなされます。
この設定は、各操作に個別に適用されます。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
        </para>

        <para>
<!--
         For example, if syncing the data directory takes 25 seconds and
         thereafter resetting unlogged relations takes 8 seconds, and if this
         setting has the default value of 10 seconds, then a messages will be
         logged for syncing the data directory after it has been in progress
         for 10 seconds and again after it has been in progress for 20 seconds,
         but nothing will be logged for resetting unlogged relations.
-->
たとえば、データディレクトリの同期に25秒かかり、その後、unloggedリレーションのリセットに8秒かかったとします。
この設定がデフォルト値の10秒である場合、データディレクトリを同期するためのメッセージは、10秒間処理された後と20秒間処理された後に記録されますが、unloggedリレーションのリセットに関しては何も記録されません。
        </para>
       </listitem>
     </varlistentry>

     </variablelist>

    <para>
<!--
     <xref linkend="runtime-config-severity-levels"/> explains the message
     severity levels used by <productname>PostgreSQL</productname>.  If logging output
     is sent to <systemitem>syslog</systemitem> or Windows'
     <systemitem>eventlog</systemitem>, the severity levels are translated
     as shown in the table.
-->
<xref linkend="runtime-config-severity-levels"/>で、<productname>PostgreSQL</productname>で使用されるメッセージ深刻度レベルを説明します。
ログ出力が<systemitem>syslog</systemitem>またはWindowsの<systemitem>eventlog</systemitem>に送られる場合、この深刻度レベルは表で示すように変換されます。
    </para>

    <table id="runtime-config-severity-levels">
<!--
     <title>Message Severity Levels</title>
-->
     <title>メッセージ深刻度レベル</title>
     <tgroup cols="4">
      <colspec colname="col1" colwidth="1*"/>
      <colspec colname="col2" colwidth="2*"/>
      <colspec colname="col3" colwidth="1*"/>
      <colspec colname="col4" colwidth="1*"/>
      <thead>
       <row>
<!--
        <entry>Severity</entry>
-->
        <entry>深刻度</entry>
<!--
        <entry>Usage</entry>
-->
        <entry>使用方法</entry>
        <entry><systemitem>syslog</systemitem></entry>
        <entry><systemitem>eventlog</systemitem></entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><literal>DEBUG1 .. DEBUG5</literal></entry>
<!--
        <entry>Provides successively-more-detailed information for use by
         developers.</entry>
-->
        <entry>開発者が使用する連続的かつより詳細な情報を提供します。</entry>
        <entry><literal>DEBUG</literal></entry>
        <entry><literal>INFORMATION</literal></entry>
       </row>

       <row>
        <entry><literal>INFO</literal></entry>
<!--
        <entry>Provides information implicitly requested by the user,
         e.g., output from <command>VACUUM VERBOSE</command>.</entry>
-->
        <entry><command>VACUUM VERBOSE</command>の出力などの、ユーザによって暗黙的に要求された情報を提供します。</entry>
        <entry><literal>INFO</literal></entry>
        <entry><literal>INFORMATION</literal></entry>
       </row>

       <row>
        <entry><literal>NOTICE</literal></entry>
<!--
        <entry>Provides information that might be helpful to users, e.g.,
         notice of truncation of long identifiers.</entry>
-->
        <entry>長い識別子の切り詰めに関する注意など、ユーザの補助になる情報を提供します。</entry>
        <entry><literal>NOTICE</literal></entry>
        <entry><literal>INFORMATION</literal></entry>
       </row>

       <row>
        <entry><literal>WARNING</literal></entry>
<!--
        <entry>Provides warnings of likely problems, e.g., <command>COMMIT</command>
         outside a transaction block.</entry>
-->
        <entry>トランザクションブロック外での<command>COMMIT</command>の様な、ユーザへの警告を提供します。</entry>
        <entry><literal>NOTICE</literal></entry>
        <entry><literal>WARNING</literal></entry>
       </row>

       <row>
        <entry><literal>ERROR</literal></entry>
<!--
        <entry>Reports an error that caused the current command to
         abort.</entry>
-->
        <entry>現在のコマンドを中断させる原因となったエラーを報告します。</entry>
        <entry><literal>WARNING</literal></entry>
        <entry><literal>ERROR</literal></entry>
       </row>

       <row>
        <entry><literal>LOG</literal></entry>
<!--
        <entry>Reports information of interest to administrators, e.g.,
         checkpoint activity.</entry>
-->
        <entry>チェックポイントの活動の様な、管理者に関心のある情報を報告します。</entry>
        <entry><literal>INFO</literal></entry>
        <entry><literal>INFORMATION</literal></entry>
       </row>

       <row>
        <entry><literal>FATAL</literal></entry>
<!--
        <entry>Reports an error that caused the current session to
         abort.</entry>
-->
        <entry>現在のセッションを中断させる原因となったエラーを報告します。</entry>
        <entry><literal>ERR</literal></entry>
        <entry><literal>ERROR</literal></entry>
       </row>

       <row>
        <entry><literal>PANIC</literal></entry>
<!--
        <entry>Reports an error that caused all database sessions to abort.</entry>
-->
        <entry>全てのデータベースセッションを中断させる原因となったエラーを報告します。</entry>
        <entry><literal>CRIT</literal></entry>
        <entry><literal>ERROR</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

    </sect2>
     <sect2 id="runtime-config-logging-what">
<!--
     <title>What to Log</title>
-->
     <title>なにをログに出力するか</title>

     <note>
      <para>
<!--
       What you choose to log can have security implications;  see
       <xref linkend="logfile-maintenance"/>.
-->
ログに出力する内容は、セキュリティに影響を与える可能性があります。
<xref linkend="logfile-maintenance"/>を参照してください。
      </para>
     </note>

     <variablelist>

     <varlistentry id="guc-application-name" xreflabel="application_name">
      <term><varname>application_name</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>application_name</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>application_name</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The <varname>application_name</varname> can be any string of less than
        <symbol>NAMEDATALEN</symbol> characters (64 characters in a standard build).
        It is typically set by an application upon connection to the server.
        The name will be displayed in the <structname>pg_stat_activity</structname> view
        and included in CSV log entries.  It can also be included in regular
        log entries via the <xref linkend="guc-log-line-prefix"/> parameter.
        Only printable ASCII characters may be used in the
        <varname>application_name</varname> value.
        Other characters are replaced with <link
        linkend="sql-syntax-strings-escape">C-style hexadecimal escapes</link>.
-->
<varname>application_name</varname>は<symbol>NAMEDATALEN</symbol>文字未満の任意の文字列（標準ビルドでは64文字）にすることができます。
これは通常、サーバへの接続時にアプリケーションによって設定されます。
この名前は<structname>pg_stat_activity</structname>ビューに表示され、CSVログエントリに含まれます。
また<xref linkend="guc-log-line-prefix"/>パラメータにより通常のログ項目に含めることができます。
<varname>application_name</varname>値には印字可能なASCII文字のみを使用できます。
他の文字は<link linkend="sql-syntax-strings-escape">Cスタイルの16進エスケープ文字</link>に置き換えられます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-print-parse">
      <term><varname>debug_print_parse</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_print_parse</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>debug_print_parse</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <term><varname>debug_print_rewritten</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_print_rewritten</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>debug_print_rewritten</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <term><varname>debug_print_plan</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_print_plan</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>debug_print_plan</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        These parameters enable various debugging output to be emitted.
        When set, they print the resulting parse tree, the query rewriter
        output, or the execution plan for each executed query.
        These messages are emitted at <literal>LOG</literal> message level, so by
        default they will appear in the server log but will not be sent to the
        client.  You can change that by adjusting
        <xref linkend="guc-client-min-messages"/> and/or
        <xref linkend="guc-log-min-messages"/>.
        These parameters are off by default.
-->
これらのパラメータは生成される各種デバッグ出力を有効にします。
設定すると実行された問い合わせそれぞれに対し、最終的な解析ツリー、問い合わせリライタの出力、実行計画を出力します。
これらのメッセージは<literal>LOG</literal>メッセージレベルで出力されますので、デフォルトではサーバログに出力され、クライアントには渡されません。
<xref linkend="guc-client-min-messages"/>、<xref linkend="guc-log-min-messages"/>またはその両方を調整することで変更することができます。
デフォルトではこれらのパラメータは無効です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-pretty-print">
      <term><varname>debug_pretty_print</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_pretty_print</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>debug_pretty_print</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When set, <varname>debug_pretty_print</varname> indents the messages
        produced by <varname>debug_print_parse</varname>,
        <varname>debug_print_rewritten</varname>, or
        <varname>debug_print_plan</varname>.  This results in more readable
        but much longer output than the <quote>compact</quote> format used when
        it is off.  It is on by default.
-->
設定された場合、<varname>debug_pretty_print</varname>は<varname>debug_print_parse</varname>、<varname>debug_print_rewritten</varname>、または<varname>debug_print_plan</varname>で生成されたメッセージを字下げします。
設定されない場合の<quote>コンパクト</quote>形式よりもより見やすく、しかしより長いものとなります。デフォルトは有効です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-autovacuum-min-duration" xreflabel="log_autovacuum_min_duration">
      <term><varname>log_autovacuum_min_duration</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_autovacuum_min_duration</varname></primary>
       <secondary>configuration parameter</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>log_autovacuum_min_duration</varname></primary>
       <secondary>設定パラメータ</secondary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Causes each action executed by autovacuum to be logged if it ran for at
        least the specified amount of time.  Setting this to zero logs
        all autovacuum actions. <literal>-1</literal> disables logging autovacuum
        actions. If this value is specified without units, it is taken as milliseconds.
        For example, if you set this to
        <literal>250ms</literal> then all automatic vacuums and analyzes that run
        250ms or longer will be logged.  In addition, when this parameter is
        set to any value other than <literal>-1</literal>, a message will be
        logged if an autovacuum action is skipped due to a conflicting lock or a
        concurrently dropped relation. The default is <literal>10min</literal>.
        Enabling this parameter can be helpful in tracking autovacuum activity.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line; but the setting can be overridden for
        individual tables by changing table storage parameters.
-->
少なくとも指定時間実行した場合、autovacuumで実行される各活動がログに残るようになります。
これをゼロに設定すると、すべてのautovacuumの活動がログに残ります。
<literal>-1</literal>はautovacuum活動のログを無効にします。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
例えば、これを<literal>250ms</literal>に設定すると、250ms以上かかって実行されたautovacuumやanalyzeはすべてログに残ります。
さらに、<literal>-1</literal>以外の値にこのパラメータが設定された場合、競合するロックや並行して削除されたリレーションによりautovacuum動作がスキップされるとメッセージはログに記録されます。
デフォルトは<literal>10min</literal>です。
このパラメータを有効にすることは、autovacuum活動の追跡に役に立ちます。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
ただし、この設定はテーブルストレージパラメータの変更により、それぞれのテーブルに対して上書きすることができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-checkpoints" xreflabel="log_checkpoints">
      <term><varname>log_checkpoints</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_checkpoints</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_checkpoints</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Causes checkpoints and restartpoints to be logged in the server log.
        Some statistics are included in the log messages, including the number
        of buffers written and the time spent writing them.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line. The default is on.
-->
チェックポイントおよびリスタートポイントをサーバログに記録するようにします。
書き出されたバッファ数や書き出しに要した時間など、いくつかの統計情報がこのログメッセージに含まれます。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
デフォルトはonです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-connections" xreflabel="log_connections">
      <term><varname>log_connections</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_connections</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_connections</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Causes aspects of each connection to the server to be logged.
        The default is the empty string, <literal>''</literal>, which
        disables all connection logging. The following options may be
        specified alone or in a comma-separated list:
-->
《機械翻訳》各コネクションのサーバをログに記録します。
デフォルトは空の文字列<literal>''</literal>で、すべてのコネクションロギングを無効にします。
次のオプションは単独で指定するか、カンマで区切ったリストで指定できます:
       </para>

       <table id="log-connections-options">
        <title>Log Connection Options</title>
        <tgroup cols="2">
         <colspec colname="col1" colwidth="1*"/>
         <colspec colname="col2" colwidth="2*"/>
         <thead>
          <row>
<!--
           <entry>Name</entry>
-->
           <entry>名前</entry>
<!--
           <entry>Description</entry>
-->
           <entry>説明</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><literal>receipt</literal></entry>
<!--
           <entry>Logs receipt of a connection.</entry>
-->
           <entry>《機械翻訳》コネクションの受領を記録します。</entry>
          </row>

          <row>
           <entry><literal>authentication</literal></entry>
           <entry>
<!--
            Logs the original identity used by an authentication method
            to identify a user. In most cases, the identity string
            matches the <productname>PostgreSQL</productname> username,
            but some third-party authentication methods may alter the
            original user identifier before the server stores it. Failed
            authentication is always logged regardless of the value of
            this setting.
-->
《機械翻訳》オリジナルメソッドが認証を識別するために使用するユーザIDを記録します。
ほとんどの場合、ID文字列は<productname>PostgreSQL</productname>usernameと一致しますが、一部のサード・パーティ認証メソッドは、サーバが格納するオリジナルユーザ識別子前を変更する場合があります。
失敗した認証は、この設定の値に関係なく常に記録されます。
           </entry>
          </row>

          <row>
           <entry><literal>authorization</literal></entry>
           <entry>
<!--
            Logs successful completion of authorization. At this point
            the connection has been established but the backend is not
            yet fully set up. The log message includes the authorized
            username as well as the database name and application name,
            if applicable.
-->
《機械翻訳》認証が正常に完了したことをログに記録します。
このポイントでは、コネクションは設定されていますが、バックエンドはまだ完全には設定されていません。
ログメッセージには、認証されたユーザ名と、該当する場合はデータベース名前およびアプリケーション名前が含まれます。
           </entry>
          </row>

          <row>
           <entry><literal>setup_durations</literal></entry>
           <entry>
<!--
            Logs the time spent establishing the connection and setting up the
            backend until the connection is ready to execute its first
            query. The log message includes three durations:  the total
            setup duration (starting from the postmaster accepting the
            incoming connection and ending when the connection is ready
            for query), the time it took to fork the new backend, and
            the time it took to authenticate the user.
-->
《機械翻訳》コネクションが最初のバックエンドを実行する準備ができるまでに、コネクションの確立と問い合わせの設定に費やした時間を記録します。
ログメッセージには、合計セットアップ時間（ポストマスタが着信コネクションを受け入れてから、コネクションが問い合わせの準備ができたときに終了するまで）、新バックエンドをフォークするのにかかった時間、ユーザを認証するのにかかった時間の3つの時間が含まれます。
           </entry>
          </row>

          <row>
           <entry><literal>all</literal></entry>
           <entry>
<!--
            A convenience alias equivalent to specifying all options. If
            <literal>all</literal> is specified in a list of other
            options, all connection aspects will be logged.
-->
《機械翻訳》すべての別名を指定することと同等の便宜的オプション。
<literal>all</literal>が他のオプションのリストで指定されている場合、すべてのコネクションの側面がログに記録されます。
           </entry>
          </row>

         </tbody>
        </tgroup>
       </table>

       <para>
<!--
        Disconnection logging is separately controlled by <xref
        linkend="guc-log-disconnections"/>.
-->
《機械翻訳》断路器ロギングは<xref linkend="guc-log-disconnections"/>が別途管理している。
       </para>

       <para>
<!--
        For the purposes of backwards compatibility, <literal>on</literal>,
        <literal>off</literal>, <literal>true</literal>,
        <literal>false</literal>, <literal>yes</literal>,
        <literal>no</literal>, <literal>1</literal>, and <literal>0</literal>
        are still supported. The positive values are equivalent to specifying
        the <literal>receipt</literal>, <literal>authentication</literal>, and
        <literal>authorization</literal> options.
-->
《機械翻訳》後方互換性の目的では、<literal>on</literal>、<literal>off</literal>、<literal>true</literal>、<literal>false</literal>、<literal>yes</literal>、<literal>no</literal>、<literal>1</literal>、および<literal>0</literal>は引き続きサポートされます。
正の値は<literal>receipt</literal>、<literal>authentication</literal>、<literal>authorization</literal>オプションを指定するのと同じです。
       </para>

       <para>
<!--
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this parameter at session start,
        and it cannot be changed at all within a session.
-->
《マッチ度[51.445087]》この設定を変更できるのは、スーパーユーザと適切な<literal>SET</literal>権限を持つユーザだけです。
《機械翻訳》スーパーユーザおよび適切な<literal>SET</literal>権限権限を持つユーザのみが、セッションパラメータでこのスタートを変更することができます。
セッション内で変更することはできません。
       </para>

       <note>
        <para>
<!--
         Some client programs, like <application>psql</application>, attempt
         to connect twice while determining if a password is required, so
         duplicate <quote>connection received</quote> messages do not
         necessarily indicate a problem.
-->
<application>psql</application>などクライアントプログラムは、パスワードが要求されているかどうか確認するまで2回接続を試みるので、二重の<quote>connection received</quote>メッセージは必ずしも問題を示すものではありません。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-disconnections" xreflabel="log_disconnections">
      <term><varname>log_disconnections</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_disconnections</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_disconnections</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Causes session terminations to be logged.  The log output
        provides information similar to <varname>log_connections</varname>,
        plus the duration of the session.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this parameter at session start,
        and it cannot be changed at all within a session.
        The default is <literal>off</literal>.
-->
セッションの終了をログします。
ログ出力の情報は<varname>log_connections</varname>と同様で、更にセッションの経過時間が追加されます。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザだけがセッション開始時にこのパラメータを変更でき、セッションが開始された後は変更できません。
デフォルトは<literal>off</literal>です。
       </para>
      </listitem>
     </varlistentry>


     <varlistentry id="guc-log-duration" xreflabel="log_duration">
      <term><varname>log_duration</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_duration</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_duration</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Causes the duration of every completed statement to be logged.
        The default is <literal>off</literal>.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
すべての完了した文について、その経過時間をログするようにします。
デフォルトは<literal>off</literal>です。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>

       <para>
<!--
        For clients using extended query protocol, durations of the Parse,
        Bind, and Execute steps are logged independently.
-->
拡張問い合わせプロトコルを使用するクライアントでは、Parse、Bind、Executeそれぞれの段階で要した時間が独立して記録されます。
       </para>

       <note>
        <para>
<!--
         The difference between enabling <varname>log_duration</varname> and setting
         <xref linkend="guc-log-min-duration-statement"/> to zero is that
         exceeding <varname>log_min_duration_statement</varname> forces the text of
         the query to be logged, but this option doesn't.  Thus, if
         <varname>log_duration</varname> is <literal>on</literal> and
         <varname>log_min_duration_statement</varname> has a positive value, all
         durations are logged but the query text is included only for
         statements exceeding the threshold.  This behavior can be useful for
         gathering statistics in high-load installations.
-->
<varname>log_duration</varname>を有効にするのと<xref linkend="guc-log-min-duration-statement"/>を0に設定する方法との違いは、<varname>log_min_duration_statement</varname>を超えた場合、テキスト版の問い合わせが強制的に出力されるのに対して、このオプションでは出力されないという点です。
したがって、<varname>log_duration</varname>が<literal>on</literal>、かつ、<varname>log_min_duration_statement</varname>が正の値を持つ場合、すべての経過時間がログに記録されますが、閾値を超えた文のみがテキスト版の問い合わせが含められるようになります。
この動作は、高負荷なインストレーションで統計情報を収集する際に有用です。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-error-verbosity" xreflabel="log_error_verbosity">
      <term><varname>log_error_verbosity</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>log_error_verbosity</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_error_verbosity</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls the amount of detail written in the server log for each
        message that is logged.  Valid values are <literal>TERSE</literal>,
        <literal>DEFAULT</literal>, and <literal>VERBOSE</literal>, each adding more
        fields to displayed messages.  <literal>TERSE</literal> excludes
        the logging of <literal>DETAIL</literal>, <literal>HINT</literal>,
        <literal>QUERY</literal>, and <literal>CONTEXT</literal> error information.
        <literal>VERBOSE</literal> output includes the <symbol>SQLSTATE</symbol> error
        code (see also <xref linkend="errcodes-appendix"/>) and the source code file name, function name,
        and line number that generated the error.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
ログ出力されるそれぞれのメッセージに対し、サーバログに書き込まれる詳細の量を制御します。
有効な値は、<literal>TERSE</literal>、<literal>DEFAULT</literal>、および<literal>VERBOSE</literal>で、それぞれは表示されるメッセージにより多くのフィールドを追加します。
<literal>TERSE</literal>は<literal>DETAIL</literal>、<literal>HINT</literal>、<literal>QUERY</literal>、および<literal>CONTEXT</literal>エラー情報を除外します。
<literal>VERBOSE</literal>出力は、<symbol>SQLSTATE</symbol>エラーコード（<xref linkend="errcodes-appendix"/>も参照）、および、ソースコードファイル名、関数名、そしてエラーを生成した行番号を含みます。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-hostname" xreflabel="log_hostname">
      <term><varname>log_hostname</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_hostname</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_hostname</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        By default, connection log messages only show the IP address of the
        connecting host. Turning this parameter on causes logging of the
        host name as well.  Note that depending on your host name resolution
        setup this might impose a non-negligible performance penalty.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
デフォルトでは、接続ログメッセージは接続元ホストのIPアドレスのみを表示します。
このパラメータを有効にすると、ホスト名もログに残るようになります。
ホスト名解決方法の設定に依存しますが、これが無視できないほどの性能劣化を起こす可能性があることに注意してください。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-line-prefix" xreflabel="log_line_prefix">
      <term><varname>log_line_prefix</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_line_prefix</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_line_prefix</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
         This is a <function>printf</function>-style string that is output at the
         beginning of each log line.
         <literal>%</literal> characters begin <quote>escape sequences</quote>
         that are replaced with status information as outlined below.
         Unrecognized escapes are ignored. Other
         characters are copied straight to the log line. Some escapes are
         only recognized by session processes, and will be treated as empty by
         background processes such as the main server process. Status
         information may be aligned either left or right by specifying a
         numeric literal after the % and before the option. A negative
         value will cause the status information to be padded on the
         right with spaces to give it a minimum width, whereas a positive
         value will pad on the left. Padding can be useful to aid human
         readability in log files.
-->
これは、各ログ行の先頭に出力する<function>printf</function>の書式文字列です。
<literal>%</literal>から始まる<quote>エスケープシーケンス</quote>は、後述の通りのステータス情報で置き換えられます。
この他のエスケープは無視されます。
他の文字はそのままログ行に出力されます。
エスケープの中には、セッションプロセスによってのみ認識可能なものがあり、これらはメインサーバプロセスなどのバックグラウンドプロセスでは空文字として扱われます。
状態情報は%の後かつオプションの前に数字を指定することにより、左寄せまた右寄せにすることができます。
数字が負ならば状態情報を右側に空白を詰めて最小限の幅にし、正の値は左に空白を詰めます。
ログファイルではパディングは人間の視認性を向上させるので有用です。
       </para>

       <para>
<!--
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line. The default is
         <literal>'%m [%p] '</literal> which logs a time stamp and the process ID.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
デフォルトは、タイムスタンプとプロセスIDをログ出力する<literal>'%m [%p] '</literal>です。
       </para>

         <informaltable>
          <tgroup cols="3">
           <thead>
            <row>
<!--
             <entry>Escape</entry>
-->
             <entry>エスケープ</entry>
<!--
             <entry>Effect</entry>
-->
             <entry>効果</entry>
<!--
             <entry>Session only</entry>
-->
             <entry>セッションのみ</entry>
             </row>
            </thead>
           <tbody>
            <row>
             <entry><literal>%a</literal></entry>
<!--
             <entry>Application name</entry>
-->
             <entry>アプリケーション名</entry>
<!--
             <entry>yes</entry>
-->
             <entry>○</entry>
            </row>
            <row>
             <entry><literal>%u</literal></entry>
<!--
             <entry>User name</entry>
-->
             <entry>ユーザ名</entry>
<!--
             <entry>yes</entry>
-->
             <entry>○</entry>
            </row>
            <row>
             <entry><literal>%d</literal></entry>
<!--
             <entry>Database name</entry>
-->
             <entry>データベース名</entry>
<!--
             <entry>yes</entry>
-->
             <entry>○</entry>
            </row>
            <row>
             <entry><literal>%r</literal></entry>
<!--
             <entry>Remote host name or IP address, and remote port</entry>
-->
             <entry>遠隔ホスト名、またはIPアドレス、およびポート番号</entry>
<!--
             <entry>yes</entry>
-->
             <entry>○</entry>
            </row>
            <row>
             <entry><literal>%h</literal></entry>
<!--
             <entry>Remote host name or IP address</entry>
-->
             <entry>遠隔ホスト名、またはIPアドレス</entry>
<!--
             <entry>yes</entry>
-->
             <entry>○</entry>
            </row>
            <row>
             <entry><literal>%L</literal></entry>
             <entry>Local address (the IP address on the server that the
             client connected to)</entry>
<!--
             <entry>yes</entry>
-->
             <entry>○</entry>
            </row>
            <row>
             <entry><literal>%b</literal></entry>
<!--
             <entry>Backend type</entry>
-->
             <entry>バックエンドタイプ</entry>
<!--
             <entry>no</entry>
-->
             <entry>×</entry>
            </row>
            <row>
             <entry><literal>%p</literal></entry>
<!--
             <entry>Process ID</entry>
-->
             <entry>プロセス識別子</entry>
<!--
             <entry>no</entry>
-->
             <entry>×</entry>
            </row>
            <row>
             <entry><literal>%P</literal></entry>
<!--
             <entry>Process ID of the parallel group leader, if this process
              is a parallel query worker</entry>
-->
             <entry>このプロセスがパラレルクエリワーカーである場合に、パラレルグループリーダーのプロセス識別子</entry>
<!--
             <entry>no</entry>
-->
             <entry>×</entry>
            </row>
            <row>
             <entry><literal>%t</literal></entry>
<!--
             <entry>Time stamp without milliseconds</entry>
-->
             <entry>ミリ秒無しのタイムスタンプ</entry>
<!--
             <entry>no</entry>
-->
             <entry>×</entry>
            </row>
            <row>
             <entry><literal>%m</literal></entry>
<!--
             <entry>Time stamp with milliseconds</entry>
-->
             <entry>ミリ秒付きタイムスタンプ</entry>
<!--
             <entry>no</entry>
-->
             <entry>×</entry>
            </row>
            <row>
             <entry><literal>%n</literal></entry>
<!--
             <entry>Time stamp with milliseconds (as a Unix epoch)</entry>
-->
             <entry>ミリ秒付きタイムスタンプ（Unixエポックとして）</entry>
<!--
             <entry>no</entry>
-->
             <entry>×</entry>
            </row>
            <row>
             <entry><literal>%i</literal></entry>
<!--
             <entry>Command tag: type of session's current command</entry>
-->
             <entry>コマンドタグ。セッションの現在のコマンド種類</entry>
<!--
             <entry>yes</entry>
-->
             <entry>○</entry>
            </row>
            <row>
             <entry><literal>%e</literal></entry>
<!--
             <entry>SQLSTATE error code</entry>
-->
             <entry>SQLSTATE エラーコード</entry>
<!--
             <entry>no</entry>
-->
             <entry>×</entry>
            </row>
            <row>
             <entry><literal>%c</literal></entry>
<!--
             <entry>Session ID: see below</entry>
-->
             <entry>セッションID。下記参照</entry>
<!--
             <entry>no</entry>
-->
             <entry>×</entry>
            </row>
            <row>
             <entry><literal>%l</literal></entry>
<!--
             <entry>Number of the log line for each session or process, starting at 1</entry>
-->
             <entry>各セッションまたは各プロセスのログ行の番号。1から始まります。</entry>
<!--
             <entry>no</entry>
-->
             <entry>×</entry>
            </row>
            <row>
             <entry><literal>%s</literal></entry>
<!--
             <entry>Process start time stamp</entry>
-->
             <entry>プロセスの開始タイムスタンプ</entry>
<!--
             <entry>no</entry>
-->
             <entry>×</entry>
            </row>
            <row>
             <entry><literal>%v</literal></entry>
<!--
             <entry>Virtual transaction ID (procNumber/localXID);  see
             <xref linkend="transaction-id"/></entry>
-->
             <entry>仮想トランザクションID(procNumber/localXID)。
             <xref linkend="transaction-id"/>を参照してください</entry>
<!--
             <entry>no</entry>
-->
             <entry>×</entry>
            </row>
            <row>
             <entry><literal>%x</literal></entry>
<!--
             <entry>Transaction ID (0 if none is assigned);  see
             <xref linkend="transaction-id"/></entry>
-->
             <entry>トランザクションID（何もアサインされていない場合0）。
             <xref linkend="transaction-id"/>参照</entry>
<!--
             <entry>no</entry>
-->
             <entry>×</entry>
            </row>
            <row>
             <entry><literal>%q</literal></entry>
<!--
             <entry>Produces no output, but tells non-session
             processes to stop at this point in the string; ignored by
             session processes</entry>
-->
             <entry>何も出力しません。
             非セッションプロセスではこのエスケープ以降の出力を停止します。
             セッションプロセスでは無視されます。</entry>
<!--
             <entry>no</entry>
-->
             <entry>×</entry>
            </row>
            <row>
             <entry><literal>%Q</literal></entry>
<!--
             <entry>Query identifier of the current query.  Query
             identifiers are not computed by default, so this field
             will be zero unless <xref linkend="guc-compute-query-id"/>
             parameter is enabled or a third-party module that computes
             query identifiers is configured.</entry>
-->
             <entry>現在の問い合わせの問い合わせ識別子。問い合わせ識別子はデフォルトでは計算されません。
             ですから<xref linkend="guc-compute-query-id"/>パラメータが有効であるか、あるいは問い合わせ識別子を計算するサードパーティのモジュールが設定されていないければゼロとなります。</entry>
<!--
             <entry>yes</entry>
-->
             <entry>○</entry>
            </row>
            <row>
             <entry><literal>%%</literal></entry>
<!--
             <entry>Literal <literal>%</literal></entry>
-->
             <entry><literal>%</literal>文字そのもの</entry>
<!--
             <entry>no</entry>
-->
             <entry>×</entry>
            </row>
           </tbody>
          </tgroup>
         </informaltable>

         <para>
<!--
          The backend type corresponds to the column
          <structfield>backend_type</structfield> in the view
          <link linkend="monitoring-pg-stat-activity-view">
          <structname>pg_stat_activity</structname></link>,
          but additional types can appear
          in the log that don't show in that view.
-->
バックエンドタイプは<link linkend="monitoring-pg-stat-activity-view"><structname>pg_stat_activity</structname></link>ビューの<structfield>backend_type</structfield>列に関連します。しかし、ビューにない他のタイプがログに現れることがあります。
         </para>

         <para>
<!--
         The <literal>%c</literal> escape prints a quasi-unique session identifier,
         consisting of two 4-byte hexadecimal numbers (without leading zeros)
         separated by a dot.  The numbers are the process start time and the
         process ID, so <literal>%c</literal> can also be used as a space saving way
         of printing those items.  For example, to generate the session
         identifier from <literal>pg_stat_activity</literal>, use this query:
-->
<literal>%c</literal>エスケープは、2つの4バイトの16進数（先頭のゼロは省略）をドットで区切った構成の、準一意なセッション識別子を表示します。
この数値はプロセスの起動時間とそのプロセスIDです。
したがって、<literal>%c</literal>を使用して、これらの項目を出力するための文字数を省略することができます。例として、<literal>pg_stat_activity</literal>からセッション識別子を生成するには以下の問い合わせを行ないます。
<programlisting>
SELECT to_hex(trunc(EXTRACT(EPOCH FROM backend_start))::integer) || '.' ||
       to_hex(pid)
FROM pg_stat_activity;
</programlisting>

       </para>

       <tip>
        <para>
<!--
         If you set a nonempty value for <varname>log_line_prefix</varname>,
         you should usually make its last character be a space, to provide
         visual separation from the rest of the log line.  A punctuation
         character can be used too.
-->
<varname>log_line_prefix</varname>に空白文字以外の値を設定する場合、通常、ログ行の残りとの区切りを明確にするために、その最後の文字を空白文字にすべきです。
句読点用の文字も使用できます。
        </para>
       </tip>

       <tip>
        <para>
<!--
         <application>Syslog</application> produces its own
         time stamp and process ID information, so you probably do not want to
         include those escapes if you are logging to <application>syslog</application>.
-->
<application>Syslog</application>は独自にタイムスタンプとプロセスID情報を生成します。
ですのでおそらく、<application>Syslog</application>にログを保管する場合は、こうしたエスケープを含めるとは考えないでしょう。
        </para>
       </tip>

       <tip>
        <para>
<!--
         The <literal>%q</literal> escape is useful when including information that is
         only available in session (backend) context like user or database
         name.  For example:
-->
<literal>%q</literal>エスケープは、ユーザやデータベース名のように、セッション（バックエンド）コンテキストでのみ存在する情報を含める場合に有用です。
<literal>%q</literal>
<programlisting>
log_line_prefix = '%m [%p] %q%u@%d/%a '
</programlisting>
        </para>
       </tip>

       <note>
        <para>
<!--
         The <literal>%Q</literal> escape always reports a zero identifier
         for lines output by <xref linkend="guc-log-statement"/> because
         <varname>log_statement</varname> generates output before an
         identifier can be calculated, including invalid statements for
         which an identifier cannot be calculated.
-->
識別子が計算できない不正な文も含め、<varname>log_statement</varname>は識別子が計算可能になる前に出力を生成するため、<literal>%Q</literal>エスケープは、<xref linkend="guc-log-statement"/>が生成する行では常にゼロの識別子を報告します。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-lock-waits" xreflabel="log_lock_waits">
      <term><varname>log_lock_waits</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_lock_waits</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_lock_waits</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls whether a log message is produced when a session waits
        longer than <xref linkend="guc-deadlock-timeout"/> to acquire a
        lock.  This is useful in determining if lock waits are causing
        poor performance.  The default is <literal>off</literal>.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
セッションがロックの獲得までの間に<xref linkend="guc-deadlock-timeout"/>より長く待機する場合にログメッセージを生成するかどうかを制御します。
これは、ロック待ちによって性能がでていないのかどうか確認する時に有用です。
デフォルトは<literal>off</literal>です。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-lock-failures" xreflabel="log_lock_failures">
      <term><varname>log_lock_failures</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_lock_failures</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls whether a detailed log message is produced
        when a lock acquisition fails.  This is useful for analyzing
        the causes of lock failures.  Currently, only lock failures
        due to <literal>SELECT NOWAIT</literal> is supported.
        The default is <literal>off</literal>.  Only superusers and
        users with the appropriate <literal>SET</literal> privilege
        can change this setting.
-->
《マッチ度[51.358696]》セッションがロックの獲得までの間に<xref linkend="guc-deadlock-timeout"/>より長く待機する場合にログメッセージを生成するかどうかを制御します。
これは、ロック待ちによって性能がでていないのかどうか確認する時に有用です。
デフォルトは<literal>off</literal>です。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
《機械翻訳》ログの取得に失敗した場合に、詳細なメッセージを生成するかどうかを制御します。
これは、ロックの失敗の原因を分析するのに役立ちます。
現在、<literal>SELECT NOWAIT</literal>によるロックの失敗のみがサポートされています。
ロックは<literal>off</literal>です。
スーパーユーザおよび適切な<literal>SET</literal>デフォルトを持つユーザのみがこの設定を変更できます。
権限
       </para>
      </listitem>
     </varlistentry>


     <varlistentry id="guc-log-recovery-conflict-waits" xreflabel="log_recovery_conflict_waits">
      <term><varname>log_recovery_conflict_waits</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_recovery_conflict_waits</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_recovery_conflict_waits</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls whether a log message is produced when the startup process
        waits longer than <varname>deadlock_timeout</varname>
        for recovery conflicts.  This is useful in determining if recovery
        conflicts prevent the recovery from applying WAL.
-->
スタートアッププロセスが<varname>deadlock_timeout</varname>よりも長くリカバリコンフリクトを待つ場合にログメッセージを出力するかどうかを制御します。
リカバリコンフリクトによってリカバリがWALを適用するのを妨げられているかどうかを決定するのに有用です。
       </para>

       <para>
<!--
        The default is <literal>off</literal>.  This parameter can only be set
        in the <filename>postgresql.conf</filename> file or on the server
        command line.
-->
デフォルトは<literal>off</literal>です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-parameter-max-length" xreflabel="log_parameter_max_length">
      <term><varname>log_parameter_max_length</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_parameter_max_length</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_parameter_max_length</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If greater than zero, each bind parameter value logged with a
        non-error statement-logging message is trimmed to this many bytes.
        Zero disables logging of bind parameters for non-error statement logs.
        <literal>-1</literal> (the default) allows bind parameters to be
        logged in full.
        If this value is specified without units, it is taken as bytes.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
ゼロよりも大きければ、エラーではない時にバインドパラメータ値が、文とともにこの指定バイト数に短縮されて記録されます。
ゼロなら、エラーではない時のバインドパラメータ値と文の記録は行われません。
<literal>-1</literal>（デフォルトです）ならバインドパラメータはすべて記録されます。
この値が単位なしに指定されると、バイト単位と見なされます。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>

       <para>
<!--
        This setting only affects log messages printed as a result of
        <xref linkend="guc-log-statement"/>,
        <xref linkend="guc-log-duration"/>, and related settings.  Non-zero
        values of this setting add some overhead, particularly if parameters
        are sent in binary form, since then conversion to text is required.
-->
この設定は、<xref linkend="guc-log-statement"/>、<xref linkend="guc-log-duration"/>および関連設定の結果を表示するログメッセージにのみ影響します。
ゼロ以外の値の設定は、とりわけパラメータがバイナリ形式で送信される際に多少のオーバーヘッドをもたらします。
テキストへの変換が必要になるからです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-parameter-max-length-on-error" xreflabel="log_parameter_max_length_on_error">
      <term><varname>log_parameter_max_length_on_error</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_parameter_max_length_on_error</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_parameter_max_length_on_error</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If greater than zero, each bind parameter value reported in error
        messages is trimmed to this many bytes.
        Zero (the default) disables including bind parameters in error
        messages.
        <literal>-1</literal> allows bind parameters to be printed in full.
        If this value is specified without units, it is taken as bytes.
-->
ゼロよりも大きければ、エラー時のバインドパラメータ値が、エラーメッセージ中にこの指定バイト数に短縮されて記録されます。
ゼロ（デフォルトです）ならエラーメッセージ中のバインドパラメータは記録されません。
<literal>-1</literal>ならバインドパラメータはすべて記録されます。
この値が単位なしに指定されると、バイト単位と見なされます。
       </para>

       <para>
<!--
        Non-zero values of this setting add overhead, as
        <productname>PostgreSQL</productname> will need to store textual
        representations of parameter values in memory at the start of each
        statement, whether or not an error eventually occurs.  The overhead
        is greater when bind parameters are sent in binary form than when
        they are sent as text, since the former case requires data
        conversion while the latter only requires copying the string.
-->
ゼロ以外の値の設定は多少のオーバーヘッドをもたらします。
エラーが起きるかどうかに関わらず、<productname>PostgreSQL</productname>は文を開始する際にテキスト形式のパラメータ値をメモリに保存する必要があるからです。
パラメータがバイナリ形式で送信される場合にテキスト形式で送信するよりもオーバーヘッドが大きくなります。
前者はデータ変換が必要なのに対し、後者は単に文字列をコピーするだけだからです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-statement" xreflabel="log_statement">
      <term><varname>log_statement</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>log_statement</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_statement</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls which SQL statements are logged. Valid values are
        <literal>none</literal> (off), <literal>ddl</literal>, <literal>mod</literal>, and
        <literal>all</literal> (all statements). <literal>ddl</literal> logs all data definition
        statements, such as <command>CREATE</command>, <command>ALTER</command>, and
        <command>DROP</command> statements. <literal>mod</literal> logs all
        <literal>ddl</literal> statements, plus data-modifying statements
        such as <command>INSERT</command>,
        <command>UPDATE</command>, <command>DELETE</command>, <command>TRUNCATE</command>,
        and <command>COPY FROM</command>.
        <command>PREPARE</command>, <command>EXECUTE</command>, and
        <command>EXPLAIN ANALYZE</command> statements are also logged if their
        contained command is of an appropriate type.  For clients using
        extended query protocol, logging occurs when an Execute message
        is received, and values of the Bind parameters are included
        (with any embedded single-quote marks doubled).
-->
どのSQL文をログに記録するかを制御します。
有効な値は、<literal>none</literal>（off）、<literal>ddl</literal>、<literal>mod</literal>、および<literal>all</literal>（全ての文）です。
<literal>ddl</literal>は、<command>CREATE</command>、<command>ALTER</command>、および<command>DROP</command>文といった、データ定義文を全てログに記録します。
<literal>mod</literal>は、全ての<literal>ddl</literal>文に加え、<command>INSERT</command>、<command>UPDATE</command>、<command>DELETE</command>、<command>TRUNCATE</command>、および<command>COPY FROM</command>といった、データ変更文をログに記録します。
<command>PREPARE</command>、<command>EXECUTE</command>および<command>EXPLAIN ANALYZE</command>コマンドも、そこに含まれるコマンドが適切な種類であればログが録られます。
拡張問い合わせプロトコルを使用するクライアントでは、Executeメッセージを受け取った時にBindパラメータの値が（すべての単一引用符が二重にされた状態で）含まれていた場合、ログに記録されます。
       </para>

       <para>
<!--
        The default is <literal>none</literal>.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
デフォルトは<literal>none</literal>です。
スーパーユーザおよび適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更できます。
       </para>

       <note>
        <para>
<!--
         Statements that contain simple syntax errors are not logged
         even by the <varname>log_statement</varname> = <literal>all</literal> setting,
         because the log message is emitted only after basic parsing has
         been done to determine the statement type.  In the case of extended
         query protocol, this setting likewise does not log statements that
         fail before the Execute phase (i.e., during parse analysis or
         planning).  Set <varname>log_min_error_statement</varname> to
         <literal>ERROR</literal> (or lower) to log such statements.
-->
ログメッセージの発行は、基本解析により文の種類が決まった後に行われますので、<varname>log_statement</varname> = <literal>all</literal>という設定を行ったとしても、単純な構文エラーを持つ文は記録されません。
拡張問い合わせプロトコルの場合も同様に、この設定ではExecute段階以前（つまり、解析や計画作成期間）に失敗した文は記録されません。
こうした文のログを記録するには、<varname>log_min_error_statement</varname>を<literal>ERROR</literal>（以下）に設定してください。
        </para>
        <para>
<!--
         Logged statements might reveal sensitive data and even contain
         plaintext passwords.
-->
ログに記録された文は、機密データを明らかにし、プレーンテキストのパスワードを含むことさえあります。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-replication-commands" xreflabel="log_replication_commands">
      <term><varname>log_replication_commands</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_replication_commands</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_replication_commands</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Causes each replication command and <literal>walsender</literal>
        process's replication slot acquisition/release to be logged in the
        server log. See <xref linkend="protocol-replication"/> for more
        information about replication command. The default value is
        <literal>off</literal>. Only superusers and users with the appropriate
        <literal>SET</literal> privilege can change this setting.
-->
サーバログに各レプリケーションコマンドと、<literal>walsender</literal>プロセスのレプリケーションスロットの獲得／解放を記録します。
レプリケーションコマンドの更なる情報は<xref linkend="protocol-replication"/>をご覧ください。
デフォルト値は<literal>off</literal>です。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-temp-files" xreflabel="log_temp_files">
      <term><varname>log_temp_files</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_temp_files</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_temp_files</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls logging of temporary file names and sizes.
        Temporary files can be
        created for sorts, hashes, and temporary query results.
        If enabled by this setting, a log entry is emitted for each
        temporary file, with the file size specified in bytes, when it is deleted.
        A value of zero logs all temporary file information, while positive
        values log only files whose size is greater than or equal to
        the specified amount of data.
        If this value is specified without units, it is taken as kilobytes.
        The default setting is -1, which disables such logging.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
一時ファイルのファイル名とサイズのログ出力を制御します。
一時ファイルはソート処理やハッシュ処理、一時的な問い合わせの結果のために作成されます。
この設定が有効になると、指定されたファイルのバイト単位の大きさを伴うログの項目が、すべての一時ファイルそれぞれについて削除されたときに生成されます。
0を指定すると、すべての一時ファイル情報のログが残ります。
正の数を指定すると、指定した以上の容量のファイルのみがログに残ります。
この値が単位なしで指定された場合は、キロバイト単位であるとみなします。
デフォルトの設定は-1で、このログ出力を無効にします。
スーパーユーザと、適切なSET権限を持つユーザのみがこの設定を変更することができます。
この設定を変更できるのは、スーパーユーザと適切な<literal>SET</literal>権限を持つユーザだけです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-timezone" xreflabel="log_timezone">
      <term><varname>log_timezone</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_timezone</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_timezone</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the time zone used for timestamps written in the server log.
        Unlike <xref linkend="guc-timezone"/>, this value is cluster-wide,
        so that all sessions will report timestamps consistently.
        The built-in default is <literal>GMT</literal>, but that is typically
        overridden in <filename>postgresql.conf</filename>; <application>initdb</application>
        will install a setting there corresponding to its system environment.
        See <xref linkend="datatype-timezones"/> for more information.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
サーバログに書き出す際に使用される時間帯を設定します。
<xref linkend="guc-timezone"/>と異なり、すべてのセッションで一貫性を持ってタイムスタンプが報告されるようにこの値はクラスタ全体に適用されます。
組み込まれているデフォルトは<literal>GMT</literal>ですが、<filename>postgresql.conf</filename>により通常は上書きされます。<application>initdb</application>によりこれらと関連した設定をシステム環境にインストールされます。
詳細は<xref linkend="datatype-timezones"/>を参照してください。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
     <sect2 id="runtime-config-logging-csvlog">
<!--
     <title>Using CSV-Format Log Output</title>
-->
     <title>CSV書式のログ出力の利用</title>

       <para>
<!--
        Including <literal>csvlog</literal> in the <varname>log_destination</varname> list
        provides a convenient way to import log files into a database table.
        This option emits log lines in comma-separated-values
        (<acronym>CSV</acronym>) format,
        with these columns:
        time stamp with milliseconds,
        user name,
        database name,
        process ID,
        client host:port number,
        session ID,
        per-session line number,
        command tag,
        session start time,
        virtual transaction ID,
        regular transaction ID,
        error severity,
        SQLSTATE code,
        error message,
        error message detail,
        hint,
        internal query that led to the error (if any),
        character count of the error position therein,
        error context,
        user query that led to the error (if any and enabled by
        <varname>log_min_error_statement</varname>),
        character count of the error position therein,
        location of the error in the PostgreSQL source code
        (if <varname>log_error_verbosity</varname> is set to <literal>verbose</literal>),
        application name, backend type, process ID of parallel group leader,
        and query id.
        Here is a sample table definition for storing CSV-format log output:
-->
<varname>log_destination</varname>リストに<literal>csvlog</literal>を含めることは、ログファイルをデータベーステーブルにインポートする簡便な方法を提供します。このオプションはカンマ区切り値書式（<acronym>CSV</acronym>）で以下の列を含むログ行を生成します。
ミリ秒単位のtimestamp、
ユーザ名、
データベース名、
プロセスID、
クライアントホスト：ポート番号、
セッションID、
セッション前行番号、
コマンドタグ、
セッション開始時間、
仮想トランザクションID、
通常トランザクションID、
エラーの深刻度、
SQLSTATEコード、
エラーメッセージ、
詳細エラーメッセージ、
ヒント、
エラーとなった内部的な問い合わせ（もしあれば）、
内部問い合わせにおけるエラー位置の文字数、
エラーの文脈、
エラーの原因となったユーザ問い合わせ(存在し<varname>log_min_error_statement</varname>で有効になっている場合)、
エラー位置の文字数、
PostgreSQLソースコード上のエラー発生場所（<varname>log_error_verbosity</varname>が<literal>verbose</literal>に設定されているならば）、
アプリケーション名、バックエンドタイプ、パラレルグループリーダーのプロセスID、問い合わせID。
以下にcsvlog出力を格納するためのテーブル定義のサンプルを示します。

<programlisting>
CREATE TABLE postgres_log
(
  log_time timestamp(3) with time zone,
  user_name text,
  database_name text,
  process_id integer,
  connection_from text,
  session_id text,
  session_line_num bigint,
  command_tag text,
  session_start_time timestamp with time zone,
  virtual_transaction_id text,
  transaction_id bigint,
  error_severity text,
  sql_state_code text,
  message text,
  detail text,
  hint text,
  internal_query text,
  internal_query_pos integer,
  context text,
  query text,
  query_pos integer,
  location text,
  application_name text,
  backend_type text,
  leader_pid integer,
  query_id bigint,
  PRIMARY KEY (session_id, session_line_num)
);
</programlisting>
       </para>

       <para>
<!--
        To import a log file into this table, use the <command>COPY FROM</command>
        command:
-->
このテーブルにログファイルをインポートするためには、<command>COPY FROM</command>コマンドを使用してください。

<programlisting>
COPY postgres_log FROM '/full/path/to/logfile.csv' WITH csv;
</programlisting>
<!--
        It is also possible to access the file as a foreign table, using
        the supplied <xref linkend="file-fdw"/> module.
-->
提供された<xref linkend="file-fdw"/>モジュールを使って外部テーブルとしてファイルをアクセスすることも可能です。
       </para>

       <para>
<!--
       There are a few things you need to do to simplify importing CSV log
       files:
-->
CSVログファイルをインポートする作業を単純にするためにいくつか必要な作業があります。

       <orderedlist>
         <listitem>
           <para>
<!--
            Set <varname>log_filename</varname> and
            <varname>log_rotation_age</varname> to provide a consistent,
            predictable naming scheme for your log files.  This lets you
            predict what the file name will be and know when an individual log
            file is complete and therefore ready to be imported.
-->
一貫性があり、予測可能なログファイル命名機構を提供するために、<varname>log_filename</varname>および<varname>log_rotation_age</varname>を設定してください。
これによりどのようなファイル名になると、個々のログファイルが完了しインポートする準備が整ったかが推測できるようになります。
         </para>
        </listitem>

        <listitem>
           <para>
<!--
            Set <varname>log_rotation_size</varname> to 0 to disable
            size-based log rotation, as it makes the log file name difficult
            to predict.
-->
ログファイル名の予測が困難になりますので、<varname>log_rotation_size</varname>を0にして容量を基にしたログの回転を無効にしてください。
           </para>
        </listitem>

        <listitem>
          <para>
<!--
           Set <varname>log_truncate_on_rotation</varname> to <literal>on</literal> so
           that old log data isn't mixed with the new in the same file.
-->
同じファイルに古いログデータと新しいログデータが混在しないようにするために、<varname>log_truncate_on_rotation</varname>を<literal>on</literal>に設定してください。
          </para>
        </listitem>

        <listitem>
          <para>
<!--
           The table definition above includes a primary key specification.
           This is useful to protect against accidentally importing the same
           information twice.  The <command>COPY</command> command commits all of the
           data it imports at one time, so any error will cause the entire
           import to fail.  If you import a partial log file and later import
           the file again when it is complete, the primary key violation will
           cause the import to fail.  Wait until the log is complete and
           closed before importing.  This procedure will also protect against
           accidentally importing a partial line that hasn't been completely
           written, which would also cause <command>COPY</command> to fail.
-->
上のテーブル定義には主キーの指定が含まれています。
これにより、同じ情報が2回インポートされる事故を防止するために有用です。
<command>COPY</command>コマンドは、一度にインポートするすべてのデータをコミットしますので、何か1つでもエラーがあればインポート全体が失敗します。
ログファイルの一部をインポートし、そのファイルが完了した後に再度インポートしようとした場合、主キー違反によりインポートが失敗します。
インポートする前に、ログファイルの完了を待ち、閉じるまで待機してください。
この手順は、<command>COPY</command>が失敗する原因となる、完全に書き込まれなかった欠落した行をインポートするという事故も防止します。
          </para>
        </listitem>
        </orderedlist>
      </para>
    </sect2>
     <sect2 id="runtime-config-logging-jsonlog">
<!--
     <title>Using JSON-Format Log Output</title>
-->
     <title>JSON書式のログ出力の利用</title>

     <para>
<!--
      Including <literal>jsonlog</literal> in the
      <varname>log_destination</varname> list provides a convenient way to
      import log files into many different programs. This option emits log
      lines in <acronym>JSON</acronym> format.
-->
<varname>log_destination</varname>リストに<literal>jsonlog</literal>を含めると、ログファイルをさまざまなプログラムにインポートするのに便利です。
このオプションは、<acronym>JSON</acronym>書式のログ行を出力します。
     </para>

     <para>
<!--
      String fields with null values are excluded from output.
      Additional fields may be added in the future. User applications that
      process <literal>jsonlog</literal> output should ignore unknown fields.
-->
NULL値を持つ文字列フィールドは出力から除外されます。
将来、フィールドが追加される可能性があります。
<literal>jsonlog</literal>出力を処理するユーザアプリケーションは不明なフィールドを無視する必要があります。
     </para>

     <para>
<!--
      Each log line is serialized as a JSON object with the set of keys and
      their associated values shown in <xref
      linkend="runtime-config-logging-jsonlog-keys-values"/>.
-->
各ログ行はJSONオブジェクトとしてシリアライズされ、一連のキーとそれに関連する値が<xref linkend="runtime-config-logging-jsonlog-keys-values"/>で示されます。
     </para>

     <table id="runtime-config-logging-jsonlog-keys-values">
<!--
      <title>Keys and Values of JSON Log Entries</title>
-->
      <title>JSONログ項目のキーと値</title>
      <tgroup cols="3">
       <thead>
        <row>
<!--
         <entry>Key name</entry>
-->
         <entry>キー名</entry>
<!--
         <entry>Type</entry>
-->
         <entry>型</entry>
<!--
         <entry>Description</entry>
-->
         <entry>説明</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><literal>timestamp</literal></entry>
         <entry>string</entry>
<!--
         <entry>Time stamp with milliseconds</entry>
-->
         <entry>ミリ秒付きのタイムスタンプ</entry>
        </row>
        <row>
         <entry><literal>user</literal></entry>
         <entry>string</entry>
<!--
         <entry>User name</entry>
-->
         <entry>ユーザ名</entry>
        </row>
        <row>
         <entry><literal>dbname</literal></entry>
         <entry>string</entry>
<!--
         <entry>Database name</entry>
-->
         <entry>データベース名</entry>
        </row>
        <row>
         <entry><literal>pid</literal></entry>
         <entry>number</entry>
<!--
         <entry>Process ID</entry>
-->
         <entry>プロセスID</entry>
        </row>
        <row>
         <entry><literal>remote_host</literal></entry>
         <entry>string</entry>
<!--
         <entry>Client host</entry>
-->
         <entry>クライアントホスト</entry>
        </row>
        <row>
         <entry><literal>remote_port</literal></entry>
         <entry>number</entry>
<!--
         <entry>Client port</entry>
-->
         <entry>クライアントポート</entry>
        </row>
        <row>
         <entry><literal>session_id</literal></entry>
         <entry>string</entry>
<!--
         <entry>Session ID</entry>
-->
         <entry>セッションID</entry>
        </row>
        <row>
         <entry><literal>line_num</literal></entry>
         <entry>number</entry>
<!--
         <entry>Per-session line number</entry>
-->
         <entry>セッション単位の行番号</entry>
        </row>
        <row>
         <entry><literal>ps</literal></entry>
         <entry>string</entry>
<!--
         <entry>Current ps display</entry>
-->
         <entry>現在のps表示</entry>
        </row>
        <row>
         <entry><literal>session_start</literal></entry>
         <entry>string</entry>
<!--
         <entry>Session start time</entry>
-->
         <entry>セッション開始時刻</entry>
        </row>
        <row>
         <entry><literal>vxid</literal></entry>
         <entry>string</entry>
<!--
         <entry>Virtual transaction ID</entry>
-->
         <entry>仮想トランザクションID</entry>
        </row>
        <row>
         <entry><literal>txid</literal></entry>
         <entry>string</entry>
<!--
         <entry>Regular transaction ID</entry>
-->
         <entry>通常トランザクションID</entry>
        </row>
        <row>
         <entry><literal>error_severity</literal></entry>
         <entry>string</entry>
<!--
         <entry>Error severity</entry>
-->
         <entry>エラー深刻度</entry>
        </row>
        <row>
         <entry><literal>state_code</literal></entry>
         <entry>string</entry>
<!--
         <entry>SQLSTATE code</entry>
-->
         <entry>SQLSTATEコード</entry>
        </row>
        <row>
         <entry><literal>message</literal></entry>
         <entry>string</entry>
<!--
         <entry>Error message</entry>
-->
         <entry>エラーメッセージ</entry>
        </row>
        <row>
         <entry><literal>detail</literal></entry>
         <entry>string</entry>
<!--
         <entry>Error message detail</entry>
-->
         <entry>エラーメッセージ詳細</entry>
        </row>
        <row>
         <entry><literal>hint</literal></entry>
         <entry>string</entry>
<!--
         <entry>Error message hint</entry>
-->
         <entry>エラーメッセージヒント</entry>
        </row>
        <row>
         <entry><literal>internal_query</literal></entry>
         <entry>string</entry>
<!--
         <entry>Internal query that led to the error</entry>
-->
         <entry>このエラーの原因となった内部問い合わせ</entry>
        </row>
        <row>
         <entry><literal>internal_position</literal></entry>
         <entry>number</entry>
<!--
         <entry>Cursor index into internal query</entry>
-->
         <entry>内部問い合わせへのカーソルインデックス</entry>
        </row>
        <row>
         <entry><literal>context</literal></entry>
         <entry>string</entry>
<!--
         <entry>Error context</entry>
-->
         <entry>エラーコンテキスト</entry>
        </row>
        <row>
         <entry><literal>statement</literal></entry>
         <entry>string</entry>
<!--
         <entry>Client-supplied query string</entry>
-->
         <entry>クライアント提供の問い合わせ文字列</entry>
        </row>
        <row>
         <entry><literal>cursor_position</literal></entry>
         <entry>number</entry>
<!--
         <entry>Cursor index into query string</entry>
-->
         <entry>問い合わせ文字列へのカーソルインデックス</entry>
        </row>
        <row>
         <entry><literal>func_name</literal></entry>
         <entry>string</entry>
<!--
         <entry>Error location function name</entry>
-->
         <entry>エラー位置関数名</entry>
        </row>
        <row>
         <entry><literal>file_name</literal></entry>
         <entry>string</entry>
<!--
         <entry>File name of error location</entry>
-->
         <entry>エラー位置のファイル名</entry>
        </row>
        <row>
         <entry><literal>file_line_num</literal></entry>
         <entry>number</entry>
<!--
         <entry>File line number of the error location</entry>
-->
         <entry>エラー位置のファイル行番号</entry>
        </row>
        <row>
         <entry><literal>application_name</literal></entry>
         <entry>string</entry>
<!--
         <entry>Client application name</entry>
-->
         <entry>クライアントアプリケーション名</entry>
        </row>
        <row>
         <entry><literal>backend_type</literal></entry>
         <entry>string</entry>
<!--
         <entry>Type of backend</entry>
-->
         <entry>バックエンドの種類</entry>
        </row>
        <row>
         <entry><literal>leader_pid</literal></entry>
         <entry>number</entry>
<!--
         <entry>Process ID of leader for active parallel workers</entry>
-->
         <entry>活動中のパラレルワーカーのリーダーのプロセスID</entry>
        </row>
        <row>
         <entry><literal>query_id</literal></entry>
         <entry>number</entry>
<!--
         <entry>Query ID</entry>
-->
         <entry>問い合わせ識別子</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </sect2>

   <sect2 id="runtime-config-logging-proc-title">
<!--
    <title>Process Title</title>
-->
    <title>プロセスのタイトル</title>

    <para>
<!--
     These settings control how process titles of server processes are
     modified.  Process titles are typically viewed using programs like
     <application>ps</application> or, on Windows, <application>Process Explorer</application>.
     See <xref linkend="monitoring-ps"/> for details.
-->
これらの設定項目は、サーバプロセスのタイトルを変更します。
プロセスのタイトルは、典型的には<application>ps</application>、あるいはWindowsにおいては<application>Process Explorer</application>で見ることができます。
詳細については、<xref linkend="monitoring-ps"/>を参照してください。
    </para>

    <variablelist>
     <varlistentry id="guc-cluster-name" xreflabel="cluster_name">
      <term><varname>cluster_name</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>cluster_name</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>cluster_name</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets a name that identifies this database cluster (instance) for
        various purposes.  The cluster name appears in the process title for
        all server processes in this cluster.  Moreover, it is the default
        application name for a standby connection (see <xref
        linkend="guc-synchronous-standby-names"/>).
-->
様々な目的のために、このデータベースクラスタ（インスタンス）を識別する名前を設定します。
クラスタ名はこのクラスタのすべてのサーバプロセスのプロセスタイトルに現れます。
更に、スタンバイ接続のデフォルトのアプリケーション名となります（<xref linkend="guc-synchronous-standby-names"/>参照）。
       </para>

       <para>
<!--
        The name can be any string of less
        than <symbol>NAMEDATALEN</symbol> characters (64 characters in a standard
        build). Only printable ASCII characters may be used in the
        <varname>cluster_name</varname> value.
        Other characters are replaced with <link
        linkend="sql-syntax-strings-escape">C-style hexadecimal escapes</link>.
        No name is shown if this parameter is set to the empty string
        <literal>''</literal> (which is the default).
        This parameter can only be set at server start.
-->
名前は<symbol>NAMEDATALEN</symbol>文字（標準のビルドでは64文字）より少ない文字列です。
表示可能なASCII文字だけが<varname>cluster_name</varname>の値として設定できます。
他の文字は、<link linkend="sql-syntax-strings-escape">Cスタイルの16進エスケープ文字</link>に置き換えられます。
空文字<literal>''</literal>（これがデフォルト値です）が設定されると、クラスタ名は表示されません。
このパラメータはサーバ起動時にのみ設定できます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-update-process-title" xreflabel="update_process_title">
      <term><varname>update_process_title</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>update_process_title</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>update_process_title</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables updating of the process title every time a new SQL command
        is received by the server.
        This setting defaults to <literal>on</literal> on most platforms, but it
        defaults to <literal>off</literal> on Windows due to that platform's larger
        overhead for updating the process title.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
サーバが新しいSQLコマンドを受け取る時に毎回、プロセスタイトルを更新できるようにします。
この設定値はたいていのプラットフォームで<literal>on</literal>がデフォルトになっていますが、Windowsではプロセスタイトルを更新するオーバーヘッドが大きいため、<literal>off</literal>がデフォルトになっています。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>
  </sect1>

   <sect1 id="runtime-config-statistics">
<!--
    <title>Run-time Statistics</title>
-->
    <title>実行時統計情報</title>

    <sect2 id="runtime-config-cumulative-statistics">
<!--
     <title>Cumulative Query and Index Statistics</title>
-->
     <title>累積的な問い合わせ及びインデックスの統計情報</title>

     <para>
<!--
      These parameters control the server-wide cumulative statistics system.
      When enabled, the data that is collected can be accessed via the
      <structname>pg_stat</structname> and <structname>pg_statio</structname>
      family of system views.  Refer to <xref linkend="monitoring"/> for more
      information.
-->
これらのパラメータは、サーバ全体の累積的な統計情報収集機能を制御します。
統計情報収集が有効ならば、生成されるデータは<structname>pg_stat</structname>と<structname>pg_statio</structname>系のシステムビュー経由でアクセス可能です。
詳細は<xref linkend="monitoring"/>を参照してください。
     </para>

     <variablelist>

     <varlistentry id="guc-track-activities" xreflabel="track_activities">
      <term><varname>track_activities</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>track_activities</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>track_activities</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables the collection of information on the currently
        executing command of each session, along with its identifier and the
        time when that command began execution. This parameter is on by
        default. Note that even when enabled, this information is only
        visible to superusers, roles with privileges of the
        <literal>pg_read_all_stats</literal> role and the user owning the
        sessions being reported on (including sessions belonging to a role they
        have the privileges of), so it should not represent a security risk.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
各セッションで実行中のコマンドに関する情報と、そのコマンドの識別子および実行開始時刻の収集を有効にします。
このパラメータはデフォルトで有効です。
有効な場合であっても、スーパーユーザ、<literal>pg_read_all_stats</literal>ロール権限を持つロール、報告対象のセッション（権限を持つロールに所属するセッションを含みます）の所有者のみから可視である点に注意してください。
このためセキュリティ上の危険性はありません。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-track-activity-query-size" xreflabel="track_activity_query_size">
      <term><varname>track_activity_query_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>track_activity_query_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>track_activity_query_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
       Specifies the amount of memory reserved to store the text of the
       currently executing command for each active session, for the
       <structname>pg_stat_activity</structname>.<structfield>query</structfield> field.
       If this value is specified without units, it is taken as bytes.
       The default value is 1024 bytes.
       This parameter can only be set at server start.
-->
<structname>pg_stat_activity</structname>.<structfield>query</structfield>フィールドに対し、それぞれの活動中のセッションで現在実行されているコマンドを追跡記録するため予約されるメモリ量を指定します。
この値が単位なしで指定された場合は、バイト単位であるとみなします。
デフォルトの値は1024バイトです。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-track-counts" xreflabel="track_counts">
      <term><varname>track_counts</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>track_counts</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>track_counts</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables collection of statistics on database activity.
        This parameter is on by default, because the autovacuum
        daemon needs the collected information.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
データベースの活動についての統計情報の収集を有効にします。
収集される情報を自動バキュームデーモンが必要とするため、このオプションはデフォルトで有効です。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-track-cost-delay-timing" xreflabel="track_cost_delay_timing">
      <term><varname>track_cost_delay_timing</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>track_cost_delay_timing</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
 <!--
        Enables timing of cost-based vacuum delay (see
        <xref linkend="runtime-config-resource-vacuum-cost"/>).  This parameter
        is off by default, as it will repeatedly query the operating system for
        the current time, which may cause significant overhead on some
        platforms.  You can use the <xref linkend="pgtesttiming"/> tool to
        measure the overhead of timing on your system.  Cost-based vacuum delay
        timing information is displayed in
        <link linkend="vacuum-progress-reporting"><structname>pg_stat_progress_vacuum</structname></link>,
        <link linkend="analyze-progress-reporting"><structname>pg_stat_progress_analyze</structname></link>,
        in the output of <xref linkend="sql-vacuum"/> and
        <xref linkend="sql-analyze"/> when the
        <literal>VERBOSE</literal> option is used, and by autovacuum for
        auto-vacuums and auto-analyzes when
        <xref linkend="guc-log-autovacuum-min-duration"/> is set.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
《マッチ度[54.964176]》データベースによるI/O呼び出しの記録を有効にします。
このパラメータはデフォルトで無効になっています。その理由は、現時点の時刻をオペレーティングシステムに繰り返し問い合わせるので、プラットフォームによっては深刻な負荷の原因になるからです。
使用しているシステムにおける記録の負荷を計測するため<xref linkend="pgtesttiming"/>ツールが使用できます。
I/O呼び出し情報は、<link linkend="monitoring-pg-stat-database-view"><structname>pg_stat_database</structname></link>、<link linkend="monitoring-pg-stat-io-view"><structname>pg_stat_io</structname></link>に表示されます。
<literal>BUFFERS</literal>オプションが設定されている時は<xref linkend="sql-explain"/> の出力、<literal>VERBOSE</literal>オプションが設定されている時は<xref linkend="sql-vacuum"/>の出力、<xref linkend="guc-log-autovacuum-min-duration"/>が設定されている時は<xref linkend="pgstatstatements"/>により表示されます。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
《機械翻訳》コストを拠点とするタイミング遅延のバキュームを有効にします（<xref linkend="runtime-config-resource-vacuum-cost"/>を参照）。
このパラメータはデフォルトのオフです。
これは、現在時間の間オペレーティングシステムを繰り返し問い合わせするため、一部のプラットフォームでは重大なオーバーヘッドを引き起こす可能性があります。
<xref linkend="pgtesttiming"/>ツールを使用して、システムのタイミングのオーバーヘッドを測定できます。
コストを拠点とするバキューム遅延タイミングの情報は、<literal>VERBOSE</literal>オプションが使用された場合は<xref linkend="sql-vacuum"/>と<xref linkend="sql-analyze"/>の出力の<link linkend="vacuum-progress-reporting"><structname>pg_stat_progress_vacuum</structname></link>、<link linkend="analyze-progress-reporting"><structname>pg_stat_progress_analyze</structname></link>に表示され、<xref linkend="guc-log-autovacuum-min-duration"/>が設定された場合は自動バキュームと自動分析のオートバキュームに表示されます。
スーパーユーザと適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更できます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-track-io-timing" xreflabel="track_io_timing">
      <term><varname>track_io_timing</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>track_io_timing</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>track_io_timing</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables timing of database I/O waits.  This parameter is off by
        default, as it will repeatedly query the operating system for
        the current time, which may cause significant overhead on some
        platforms.  You can use the <xref linkend="pgtesttiming"/> tool to
        measure the overhead of timing on your system.
        I/O timing information is
        displayed in <link linkend="monitoring-pg-stat-database-view">
        <structname>pg_stat_database</structname></link>,
        <link linkend="monitoring-pg-stat-io-view">
        <structname>pg_stat_io</structname></link> (if <varname>object</varname>
        is not <literal>wal</literal>), in the output of the
        <link linkend="pg-stat-get-backend-io">
        <function>pg_stat_get_backend_io()</function></link> function (if
        <varname>object</varname> is not <literal>wal</literal>), in the
        output of <xref linkend="sql-explain"/> when the <literal>BUFFERS</literal>
        option is used, in the output of <xref linkend="sql-vacuum"/> when
        the <literal>VERBOSE</literal> option is used, by autovacuum
        for auto-vacuums and auto-analyzes, when <xref
        linkend="guc-log-autovacuum-min-duration"/> is set and by
        <xref linkend="pgstatstatements"/>.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
《マッチ度[69.105691]》データベースによるI/O呼び出しの記録を有効にします。
このパラメータはデフォルトで無効になっています。その理由は、現時点の時刻をオペレーティングシステムに繰り返し問い合わせるので、プラットフォームによっては深刻な負荷の原因になるからです。
使用しているシステムにおける記録の負荷を計測するため<xref linkend="pgtesttiming"/>ツールが使用できます。
I/O呼び出し情報は、<link linkend="monitoring-pg-stat-database-view"><structname>pg_stat_database</structname></link>、<link linkend="monitoring-pg-stat-io-view"><structname>pg_stat_io</structname></link>に表示されます。
<literal>BUFFERS</literal>オプションが設定されている時は<xref linkend="sql-explain"/> の出力、<literal>VERBOSE</literal>オプションが設定されている時は<xref linkend="sql-vacuum"/>の出力、<xref linkend="guc-log-autovacuum-min-duration"/>が設定されている時は<xref linkend="pgstatstatements"/>により表示されます。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
《機械翻訳》データベース入出力待機のタイミングを有効にします。
このパラメータはデフォルトのオフです。
現在時間の間、繰り返しオペレーティングシステムを問い合わせするため、一部のプラットフォームでは重大なオーバーヘッドが発生する可能性があります。
<xref linkend="pgtesttiming"/>ツールを使用して、システムのタイミングのオーバーヘッドを測定できます。
入出力タイミング情報は<link linkend="monitoring-pg-stat-database-view"><structname>pg_stat_database</structname></link>、<link linkend="monitoring-pg-stat-io-view"><structname>pg_stat_io</structname></link>（<varname>オブジェクト</varname>が<literal>wal</literal>でない場合、<link linkend="pg-stat-get-backend-io"><function>pg_stat_get_backend_io()</function></link>関数の出力（<varname>オブジェクト</varname>が<literal>wal</literal>でない場合）、<literal>BUFFERS</literal>オプションが使用された場合の<xref linkend="sql-explain"/>の出力、<literal>VERBOSE</literal>オプションが使用された場合の<xref linkend="sql-vacuum"/>の出力、自動バキュームと自動分析の場合のオートバキューム、<xref linkend="guc-log-autovacuum-min-duration"/>が設定されている場合、および<xref linkend="pgstatstatements"/>によって表示されます。
スーパーユーザと適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更できます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-track-wal-io-timing" xreflabel="track_wal_io_timing">
      <term><varname>track_wal_io_timing</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>track_wal_io_timing</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>track_wal_io_timing</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables timing of WAL I/O waits. This parameter is off by default,
        as it will repeatedly query the operating system for the current time,
        which may cause significant overhead on some platforms.
        You can use the <application>pg_test_timing</application> tool to
        measure the overhead of timing on your system.
        I/O timing information is displayed in
        <link linkend="monitoring-pg-stat-io-view">
        <structname>pg_stat_io</structname></link> for the
        <varname>object</varname> <literal>wal</literal> and in the output of
        the <link linkend="pg-stat-get-backend-io">
        <function>pg_stat_get_backend_io()</function></link> function for the
        <varname>object</varname> <literal>wal</literal>.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
《マッチ度[59.563543]》データベースによるWAL I/O呼び出しの記録を有効にします。
このパラメータはデフォルトで無効になっています。その理由は、現時点の時刻をオペレーティングシステムに繰り返し問い合わせるので、プラットフォームによっては深刻な負荷の原因になるからです。
使用しているシステムにおける負荷のタイミングを計測するため<application>pg_test_timing</application>ツールが使用できます。
I/O呼び出し情報は、<link linkend="monitoring-pg-stat-wal-view"><structname>pg_stat_wal</structname></link>に表示されます。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
《機械翻訳》WAL I/O待機のタイミングを有効にします。
このパラメータはデフォルトによるオフで、現在時間の間オペレーティングシステムを繰り返し問い合わせするため、一部のプラットフォームで重大なオーバーヘッドが発生する可能性があります。
<application>pg_test_timing</application>ツールを使用して、システムでタイミングのオーバーヘッドを測定できます。
入出力タイミング情報は、<varname>オブジェクト</varname><literal>wal</literal>の場合は<link linkend="monitoring-pg-stat-io-view"><structname>pg_stat_io</structname></link>に、<varname>オブジェクト</varname><literal>wal</literal>の場合は<link linkend="pg-stat-get-backend-io"><function>pg_stat_get_backend_io()</function></link>関数の出力に表示されます。
スーパーユーザおよび適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更できます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-track-functions" xreflabel="track_functions">
      <term><varname>track_functions</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>track_functions</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>track_functions</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables tracking of function call counts and time used. Specify
        <literal>pl</literal> to track only procedural-language functions,
        <literal>all</literal> to also track SQL and C language functions.
        The default is <literal>none</literal>, which disables function
        statistics tracking.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
関数の呼び出し数と費やされた時間の追跡を有効にします。
手続き言語関数のみを追跡するためには<literal>pl</literal>と指定してください。
SQL関数、C言語関数も追跡するためには<literal>all</literal>と指定してください。
デフォルトは、統計情報追跡機能を無効にする<literal>none</literal>です。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>

       <note>
        <para>
<!--
         SQL-language functions that are simple enough to be <quote>inlined</quote>
         into the calling query will not be tracked, regardless of this
         setting.
-->
呼び出す問い合わせ内に<quote>インライン化</quote>できる位単純なSQL言語関数は、この設定と関係なく、追跡されません。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-stats-fetch-consistency" xreflabel="stats_fetch_consistency">
      <term><varname>stats_fetch_consistency</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>stats_fetch_consistency</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>stats_fetch_consistency</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Determines the behavior when cumulative statistics are accessed
        multiple times within a transaction. When set to
        <literal>none</literal>, each access re-fetches counters from shared
        memory. When set to <literal>cache</literal>, the first access to
        statistics for an object caches those statistics until the end of the
        transaction unless <function>pg_stat_clear_snapshot()</function> is
        called. When set to <literal>snapshot</literal>, the first statistics
        access caches all statistics accessible in the current database, until
        the end of the transaction unless
        <function>pg_stat_clear_snapshot()</function> is called. Changing this
        parameter in a transaction discards the statistics snapshot.
        The default is <literal>cache</literal>.
-->
トランザクション内で累積的統計に複数回アクセスする場合の動作を決定します。
<literal>none</literal>に設定すると、各アクセスは共有メモリからカウンタを再フェッチします。
<literal>cache</literal>に設定すると、オブジェクトの統計への最初のアクセスは、<function>pg_stat_clear_snapshot()</function>が呼び出されない限り、トランザクションが終了するまでこれらの統計をキャッシュします。
<literal>snapshot</literal>に設定すると、最初の統計アクセスは、<function>pg_stat_clear_snapshot()</function>が呼び出されない限り、トランザクションが終了するまで現在のデータベースでアクセス可能なすべての統計をキャッシュします。
トランザクション内でこのパラメータを変更すると、統計情報のスナップショットは破棄されます。
デフォルトは<literal>cache</literal>です。
       </para>
       <note>
        <para>
<!--
         <literal>none</literal> is most suitable for monitoring systems. If
         values are only accessed once, it is the most
         efficient. <literal>cache</literal> ensures repeat accesses yield the
         same values, which is important for queries involving
         e.g. self-joins. <literal>snapshot</literal> can be useful when
         interactively inspecting statistics, but has higher overhead,
         particularly if many database objects exist.
-->
<literal>none</literal>は、システムの監視に最も適しています。
値が一度しかアクセスされない場合、最も効率的です。
<literal>cache</literal>は、繰り返しアクセスによって同じ値が生成されることを保証します。
これは、自己結合などを含むクエリで重要です。
<literal>snapshot</literal>は、統計情報を対話的に検査する場合に便利ですが、特に多くのデータベースオブジェクトが存在する場合にはオーバーヘッドが高くなります。
        </para>
       </note>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-statistics-monitor">
<!--
     <title>Statistics Monitoring</title>
-->
     <title>統計情報の監視</title>
     <variablelist>

     <varlistentry id="guc-compute-query-id" xreflabel="compute_query_id">
      <term><varname>compute_query_id</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>compute_query_id</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>compute_query_id</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables in-core computation of a query identifier.
        Query identifiers can be displayed in the <link
        linkend="monitoring-pg-stat-activity-view"><structname>pg_stat_activity</structname></link>
        view, using <command>EXPLAIN</command>, or emitted in the log if
        configured via the <xref linkend="guc-log-line-prefix"/> parameter.
        The <xref linkend="pgstatstatements"/> extension also requires a query
        identifier to be computed.  Note that an external module can
        alternatively be used if the in-core query identifier computation
        method is not acceptable.  In this case, in-core computation
        must be always disabled.
        Valid values are <literal>off</literal> (always disabled),
        <literal>on</literal> (always enabled), <literal>auto</literal>,
        which lets modules such as <xref linkend="pgstatstatements"/>
        automatically enable it, and <literal>regress</literal> which
        has the same effect as <literal>auto</literal>, except that the
        query identifier is not shown in the <literal>EXPLAIN</literal> output
        in order to facilitate automated regression testing.
        The default is <literal>auto</literal>.
-->
組み込みの問い合わせ識別子の計算を有効にします。
問い合わせ識別子は、<link linkend="monitoring-pg-stat-activity-view"><structname>pg_stat_activity</structname></link>ビュー、<command>EXPLAIN</command>、あるいは<xref linkend="guc-log-line-prefix"/>パラメータが設定されていればログに出力されます。
<xref linkend="pgstatstatements"/>拡張も問い合わせ識別子の計算が必要です。
組み込みの計算が許容できなければ、外部モジュールを代わりに利用することができることに注意してください。
この場合、組み込みの計算は常に無効にしなければなりません。
有効な値は、<literal>off</literal>（常に無効）、<literal>on</literal>（常に有効）、<xref linkend="pgstatstatements"/>のようなモジュールによって自動的に有効になる<literal>auto</literal>、自動リグレッションテストを機能させるために、問い合わせ識別子が<literal>EXPLAIN</literal>出力に表示されないことを除けば<literal>auto</literal>と同じ効果を持つ<literal>regress</literal>です。
デフォルトは<literal>auto</literal>です。
       </para>
       <note>
        <para>
<!--
         To ensure that only one query identifier is calculated and
         displayed, extensions that calculate query identifiers should
         throw an error if a query identifier has already been computed.
-->
一つの問い合わせ識別子のみが計算されて表示されることを確実にするために、問い合わせ識別子を計算する拡張は、問い合わせ識別子がすでに計算済みのときにエラーを生じるようにすべきです。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-statement-stats">
      <term><varname>log_statement_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_statement_stats</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_statement_stats</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <term><varname>log_parser_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_parser_stats</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_parser_stats</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <term><varname>log_planner_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_planner_stats</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_planner_stats</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <term><varname>log_executor_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_executor_stats</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
      <primary><varname>log_executor_stats</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        For each query, output performance statistics of the respective
        module to the server log. This is a crude profiling
        instrument, similar to the Unix <function>getrusage()</function> operating
        system facility.  <varname>log_statement_stats</varname> reports total
        statement statistics, while the others report per-module statistics.
        <varname>log_statement_stats</varname> cannot be enabled together with
        any of the per-module options.  All of these options are disabled by
        default.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change these settings.
-->
各問い合わせに対し、対応するモジュールの性能に関する統計情報をサーバログに出力します。
これは、Unixの<function>getrusage()</function>オペレーティングシステム機能に類似した、雑なプロファイリング手段です。
<varname>log_statement_stats</varname>は文に関する統計情報全体を、この他はモジュール毎の統計情報を報告します。
<varname>log_statement_stats</varname>とモジュール毎のオプションを一緒に有効にすることはできません。
デフォルトでこれらのオプションはすべて無効です。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect2>
   </sect1>

   <sect1 id="runtime-config-vacuum">
    <title>Vacuuming</title>

    <indexterm>
     <primary>vacuum</primary>
     <secondary>configuration parameters</secondary>
    </indexterm>

    <para>
<!--
     These parameters control vacuuming behavior. For more information on the
     purpose and responsibilities of vacuum, see <xref linkend="routine-vacuuming"/>.
-->
《機械翻訳》これらのパラメータは、バキューム処理の動作をコントロールします。
バキュームの目的と責任の詳細は、<xref linkend="routine-vacuuming"/>を参照してください。
    </para>

    <sect2 id="runtime-config-autovacuum">
<!--
     <title>Automatic Vacuuming</title>
-->
    <title>自動Vacuum作業</title>

     <para>
<!--
      These settings control the behavior of the <firstterm>autovacuum</firstterm>
      feature.  Refer to <xref linkend="autovacuum"/> for more information.
      Note that many of these settings can be overridden on a per-table
      basis; see <xref linkend="sql-createtable-storage-parameters"/>.
-->
以下に示す設定は<firstterm>自動バキューム</firstterm>機能の動作を制御します。
詳細は<xref linkend="autovacuum"/>を参照してください。
これらの設定の多くは、テーブル単位で変更できることに注意してください。
<xref linkend="sql-createtable-storage-parameters"/>を参照してください。
     </para>

     <variablelist>

      <varlistentry id="guc-autovacuum" xreflabel="autovacuum">
       <term><varname>autovacuum</varname> (<type>boolean</type>)
       <indexterm>
        <primary><varname>autovacuum</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Controls whether the server should run the
         autovacuum launcher daemon.  This is on by default; however,
         <xref linkend="guc-track-counts"/> must also be enabled for
         autovacuum to work.
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line; however, autovacuuming can be
         disabled for individual tables by changing table storage parameters.
-->
《マッチ度[85.459184]》サーバがautovacuumランチャデーモンを実行すべきかどうかを管理します。
デフォルトでは有効です。
しかしautovacuumを作動させるためには<xref linkend="guc-track-counts"/>も有効でなければなりません。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
ただし、テーブルストレージパラメータを変更することにより、autovacuumは個々のテーブルに対して無効にできます。
《機械翻訳》サーバが自動バキュームランチャデーモンを稼働させるかどうかを制御します。
これはデフォルトによって有効になっていますが、オートバキュームが機能するためには<xref linkend="guc-track-counts"/>も有効になっている必要があります。
このパラメータは<filename>postgresql.conf</filename>ファイルまたはサーバコマンドライン上でのみ設定可能です。
しかし、テーブルストレージパラメータを変更することで個々のテーブルに対して自動バキュームを無効にすることができます。
        </para>
        <para>
<!--
         Note that even when this parameter is disabled, the system
         will launch autovacuum processes if necessary to
         prevent transaction ID wraparound.  See <xref
         linkend="vacuum-for-wraparound"/> for more information.
-->
《マッチ度[84.134615]》このパラメータが無効であったとしてもシステムは、トランザクションIDの周回を防止する必要があれば、autovacuumプロセスを起動することに注意してください。
詳細は<xref linkend="vacuum-for-wraparound"/>を参照してください。
《機械翻訳》このパラメータが無効であったとしてもシステムは、トランザクションIDの周回を防止する必要があれば、autovacuumプロセスを起動することに注意してください。
詳細は<xref linkend="vacuum-for-wraparound"/>を参照してください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-autovacuum-worker-slots" xreflabel="autovacuum_worker_slots">
       <term><varname>autovacuum_worker_slots</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>autovacuum_worker_slots</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies the number of backend slots to reserve for autovacuum worker
         processes.  The default is typically 16 slots, but might be less if
         your kernel settings will not support it (as determined during initdb).
         This parameter can only be set at server start.
-->
《機械翻訳》バックエンドワーカープロセスのために予約するオートバキュームスロットの数を指定します。
デフォルトは通常16スロットですが、カーネル設定がサポートしない場合（initdb時に決定されます）はこれより少なくなる可能性があります。
このパラメータはサーバスタートでのみ設定できます。
        </para>
        <para>
<!--
         When changing this value, consider also adjusting
         <xref linkend="guc-autovacuum-max-workers"/>.
-->
《機械翻訳》この値を変更する場合は、<xref linkend="guc-autovacuum-max-workers"/>の調整も考慮してください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-autovacuum-max-workers" xreflabel="autovacuum_max_workers">
       <term><varname>autovacuum_max_workers</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>autovacuum_max_workers</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies the maximum number of autovacuum processes (other than the
         autovacuum launcher) that may be running at any one time.  The default
         is <literal>3</literal>.  This parameter can only be set in the
         <filename>postgresql.conf</filename> file or on the server command line.
-->
《マッチ度[61.313869]》同時に実行することができるautovacuumプロセス（autovacuumランチャ以外）の最大数を指定します。
デフォルトは3です。
このパラメータはサーバ起動時のみ設定可能です。
《機械翻訳》同時に実行できる自動バキュームプロセス（自動バキュームランチャ以外）の最大数を指定します。
デフォルトは<literal>3</literal>です。
このパラメータは<filename>postgresql.conf</filename>ファイルまたはサーバコマンドラインにのみ設定できます。
        </para>
        <para>
<!--
         Note that a setting for this value which is higher than
         <xref linkend="guc-autovacuum-worker-slots"/> will have no effect,
         since autovacuum workers are taken from the pool of slots established
         by that setting.
-->
《機械翻訳》ノートでは、この値を<xref linkend="guc-autovacuum-worker-slots"/>よりも高く設定しても効果はありません。
これは、オートバキュームワーカーがその設定によって確立されたプールのスロットから取得されるためです。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-autovacuum-naptime" xreflabel="autovacuum_naptime">
       <term><varname>autovacuum_naptime</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>autovacuum_naptime</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies the minimum delay between autovacuum runs on any given
         database.  In each round the daemon examines the
         database and issues <command>VACUUM</command> and <command>ANALYZE</command> commands
         as needed for tables in that database.
         If this value is specified without units, it is taken as seconds.
         The default is one minute (<literal>1min</literal>).
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line.
-->
《マッチ度[86.081370]》あるデータベースについて実行されるautovacuumデーモンの最小遅延を指定します。
それぞれの周期で、デーモンはそのデータベースを試験し、そしてそのデータベース内のテーブルで必要性が認められると、<command>VACUUM</command>および<command>ANALYZE</command>コマンドを発行します。
この値が単位なしで指定された場合は、秒単位であるとみなします。
デフォルトは1分（<literal>1min</literal>）です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
《機械翻訳》任意のデータベースで実行されるオートバキューム間の最小遅延を指定します。
各ラウンドで、デーモンはデータベースを検査し、必要に応じてそのデータベースの表に対して<command>VACUUM</command>および<command>ANALYZE</command>コマンドを発行します。
この値がユニットなしで指定された場合、秒として扱われます。
デフォルトは1分(<literal>1min</literal>)です。
このパラメータは<filename>postgresql.conf</filename>ファイルまたはサーバコマンドラインでのみ設定できます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-autovacuum-vacuum-threshold" xreflabel="autovacuum_vacuum_threshold">
       <term><varname>autovacuum_vacuum_threshold</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>autovacuum_vacuum_threshold</varname></primary>
        <secondary>configuration parameter</secondary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies the minimum number of updated or deleted tuples needed
         to trigger a <command>VACUUM</command> in any one table.
         The default is 50 tuples.
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line;
         but the setting can be overridden for individual tables by
         changing table storage parameters.
-->
《マッチ度[84.090909]》どのテーブルに対しても<command>VACUUM</command>を起動するために必要な、更新もしくは削除されたタプルの最小数を指定します。
デフォルトは50タプルです。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
ただし、この設定はテーブルストレージパラメータの変更により、それぞれのテーブルに対して上書きすることができます。
《機械翻訳》<command>VACUUM</command>任意の1つのテーブルのトリガに必要な更新または削除されたタプルの最小数を指定します。
デフォルトは50タプルです。
このパラメータは<filename>postgresql.conf</filename>ファイルまたはサーバコマンドラインにのみ設定できますが、テーブルストレージパラメータを変更することで個々の表の設定を上書きできます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-autovacuum-vacuum-insert-threshold" xreflabel="autovacuum_vacuum_insert_threshold">
       <term><varname>autovacuum_vacuum_insert_threshold</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>autovacuum_vacuum_insert_threshold</varname></primary>
        <secondary>configuration parameter</secondary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies the number of inserted tuples needed to trigger a
         <command>VACUUM</command> in any one table.
         The default is 1000 tuples.  If -1 is specified, autovacuum will not
         trigger a <command>VACUUM</command> operation on any tables based on
         the number of inserts.
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line;
         but the setting can be overridden for individual tables by
         changing table storage parameters.
-->
《マッチ度[84.401709]》あるテーブルで<command>VACUUM</command>を起動するきっかけとなるのに必要な挿入タプル数を設定します。
デフォルトは1000タプルです。
-1が指定されると、自動VACUUMが挿入タプル数に基づいて<command>VACUUM</command>操作を引き起こすことはなくなります。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
ただし、この設定はテーブルストレージパラメータの変更により、それぞれのテーブルに対して上書きすることができます。
《機械翻訳》<command>VACUUM</command>任意の1つのテーブルのトリガaに必要な挿入タプルの数が指定されます。
デフォルトは1000タプルです。
-1が指定された場合、オートバキュームは挿入の数に基づいて<command>VACUUM</command>任意の表のオペレーションをトリガしません。
このパラメータは<filename>postgresql.conf</filename>ファイルまたはサーバコマンドラインでのみ設定できますが、テーブルストレージパラメータを変更することで個々の表の設定を上書きできます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-autovacuum-analyze-threshold" xreflabel="autovacuum_analyze_threshold">
       <term><varname>autovacuum_analyze_threshold</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>autovacuum_analyze_threshold</varname></primary>
        <secondary>configuration parameter</secondary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies the minimum number of inserted, updated or deleted tuples
         needed to trigger an <command>ANALYZE</command> in any one table.
         The default is 50 tuples.
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line;
         but the setting can be overridden for individual tables by
         changing table storage parameters.
-->
《マッチ度[84.615385]》どのテーブルに対しても<command>ANALYZE</command>を起動するのに必要な、挿入、更新、もしくは削除されたタプルの最小数を指定します。
デフォルトは50タプルです。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
ただし、この設定はテーブルストレージパラメータの変更により、それぞれのテーブルに対して上書きすることができます。
《機械翻訳》<command>ANALYZE</command>任意の1つのテーブルのトリガに必要な挿入、更新または削除されたタプルの最小数を指定します。
デフォルトは50タプルです。
このパラメータは<filename>postgresql.conf</filename>ファイルまたはサーバコマンドラインにのみで設定できますが、テーブルストレージパラメータを変更することで個々の表の設定を上書きできます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-autovacuum-vacuum-scale-factor" xreflabel="autovacuum_vacuum_scale_factor">
       <term><varname>autovacuum_vacuum_scale_factor</varname> (<type>floating point</type>)
       <indexterm>
        <primary><varname>autovacuum_vacuum_scale_factor</varname></primary>
        <secondary>configuration parameter</secondary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies a fraction of the table size to add to
         <varname>autovacuum_vacuum_threshold</varname>
         when deciding whether to trigger a <command>VACUUM</command>.
         The default is <literal>0.2</literal> (20% of table size).
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line;
         but the setting can be overridden for individual tables by
         changing table storage parameters.
-->
《マッチ度[80.285036]》<command>VACUUM</command>を起動するか否かを決定するときに、<varname>autovacuum_vacuum_threshold</varname>に足し算するテーブル容量の割合を指定します。
デフォルトは0.2（テーブルサイズの20%）です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
ただし、この設定はテーブルストレージパラメータの変更により、それぞれのテーブルに対して上書きすることができます。
《機械翻訳》a<command>VACUUM</command>をトリガするかどうかを決定するときに、<varname>autovacuum_vacuum_threshold</varname>に追加するテーブルサイズの割合を指定します。
デフォルトは<literal>0.2</literal>（テーブルサイズの20%です）。
このパラメータは<filename>postgresql.conf</filename>ファイルまたはサーバコマンドラインでのみ設定できますが、テーブルストレージパラメータを変更することで個々の表の設定を上書きできます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-autovacuum-vacuum-insert-scale-factor" xreflabel="autovacuum_vacuum_insert_scale_factor">
       <term><varname>autovacuum_vacuum_insert_scale_factor</varname> (<type>floating point</type>)
       <indexterm>
        <primary><varname>autovacuum_vacuum_insert_scale_factor</varname></primary>
        <secondary>configuration parameter</secondary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies a fraction of the unfrozen pages in the table to add to
         <varname>autovacuum_vacuum_insert_threshold</varname> when deciding
         whether to trigger a <command>VACUUM</command>. The default is
         <literal>0.2</literal> (20% of unfrozen pages in table). This
         parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line; but the setting can be overridden
         for individual tables by changing table storage parameters.
-->
《マッチ度[75.109170]》<command>VACUUM</command>を起動するかどうか決める際の<varname>autovacuum_vacuum_insert_threshold</varname>に追加するテーブルサイズの割合を指定します。
デフォルトは0.2（テーブルサイズの20%）です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
ただし、この設定はテーブルストレージパラメータの変更により、それぞれのテーブルに対して上書きすることができます。
《機械翻訳》a<command>VACUUM</command>をページにするかどうかを決定する場合に、<varname>autovacuum_vacuum_insert_threshold</varname>に追加するテーブルの未凍結トリガの割合を指定します。
デフォルトは<literal>0.2</literal>テーブルの未凍結ページの20%です。
このパラメータは<filename>postgresql.conf</filename>ファイルまたはサーバコマンドラインでのみ設定できますが、テーブルストレージパラメータを変更することで個々の表の設定を上書きできます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-autovacuum-analyze-scale-factor" xreflabel="autovacuum_analyze_scale_factor">
       <term><varname>autovacuum_analyze_scale_factor</varname> (<type>floating point</type>)
       <indexterm>
        <primary><varname>autovacuum_analyze_scale_factor</varname></primary>
        <secondary>configuration parameter</secondary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies a fraction of the table size to add to
         <varname>autovacuum_analyze_threshold</varname>
         when deciding whether to trigger an <command>ANALYZE</command>.
         The default is <literal>0.1</literal> (10% of table size).
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line;
         but the setting can be overridden for individual tables by
         changing table storage parameters.
-->
《マッチ度[80.424528]》<command>ANALYZE</command>を起動するか否かを決定するときに、<varname>autovacuum_analyze_threshold</varname>に足し算するテーブル容量の割合を指定します。
デフォルトは0.1（テーブルサイズの10%）です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
ただし、この設定はテーブルストレージパラメータの変更により、それぞれのテーブルに対して上書きすることができます。
《機械翻訳》<command>ANALYZE</command>をトリガするかどうかを決定するときに、<varname>autovacuum_analyze_threshold</varname>に追加するテーブルサイズの割合を指定します。
デフォルトは<literal>0.1</literal>（テーブルサイズの10%です）。
このパラメータは<filename>postgresql.conf</filename>ファイルまたはサーバコマンドラインでのみ設定できますが、テーブルストレージパラメータを変更することで個々の表の設定を上書きできます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-autovacuum-vacuum-max-threshold" xreflabel="autovacuum_vacuum_max_threshold">
       <term><varname>autovacuum_vacuum_max_threshold</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>autovacuum_vacuum_max_threshold</varname></primary>
        <secondary>configuration parameter</secondary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies the maximum number of updated or deleted tuples needed to
         trigger a <command>VACUUM</command> in any one table, i.e., a limit on
         the value calculated with
         <varname>autovacuum_vacuum_threshold</varname> and
         <varname>autovacuum_vacuum_scale_factor</varname>.  The default is
         100,000,000 tuples.  If -1 is specified, autovacuum will not enforce a
         maximum number of updated or deleted tuples that will trigger a
         <command>VACUUM</command> operation.  This parameter can only be set
         in the <filename>postgresql.conf</filename> file or on the server
         command line; but the setting can be overridden for individual tables
         by changing storage parameters.
-->
《マッチ度[51.766513]》あるテーブルで<command>VACUUM</command>を起動するきっかけとなるのに必要な挿入タプル数を設定します。
デフォルトは1000タプルです。
-1が指定されると、自動VACUUMが挿入タプル数に基づいて<command>VACUUM</command>操作を引き起こすことはなくなります。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
ただし、この設定はテーブルストレージパラメータの変更により、それぞれのテーブルに対して上書きすることができます。
《機械翻訳》トリガaに必要な更新または削除されたタプルの最大数を指定します<command>VACUUM</command>任意の1つのテーブル、つまり<varname>autovacuum_vacuum_threshold</varname>および<varname>autovacuum_vacuum_scale_factor</varname>で計算された値の制限。
デフォルトは100,000,000タプルです。
-1を指定すると、オートバキュームはトリガa<command>VACUUM</command>オペレーションになる更新または削除されたタプルの最大数を強制しません。
このパラメータは<filename>postgresql.conf</filename>ファイルまたはサーバコマンドラインにのみ設定できますが、ストレージパラメータを変更することで個々の表の設定を上書きできます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-autovacuum-freeze-max-age" xreflabel="autovacuum_freeze_max_age">
       <term><varname>autovacuum_freeze_max_age</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>autovacuum_freeze_max_age</varname></primary>
        <secondary>configuration parameter</secondary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies the maximum age (in transactions) that a table's
         <structname>pg_class</structname>.<structfield>relfrozenxid</structfield> field can
         attain before a <command>VACUUM</command> operation is forced
         to prevent transaction ID wraparound within the table.
         Note that the system will launch autovacuum processes to
         prevent wraparound even when autovacuum is otherwise disabled.
-->
《マッチ度[87.335092]》トランザクションID周回を防ぐために<command>VACUUM</command>操作が強制される前までにテーブルの<structname>pg_class</structname>.<structfield>relfrozenxid</structfield> フィールドが到達できる最大（トランザクションにおける）年代を指定します。
自動バキュームが無効であった時でも、システムは周回を防ぐために自動バキューム子プロセスを起動することに注意してください。
《機械翻訳》テーブル<structname>pg_class</structname>の最大有効期間（トランザクション数）を指定します。
<structfield>relfrozenxid</structfield>フィールドは前を獲得することができます。
<command>VACUUM</command>オペレーションはテーブル内のトランザクションIDの周回を防ぐことを強制されます。
オートバキュームが他の障害を負っている場合でも周回を防ぐためにシステムが自動バキュームプロセスを立ち上げるというノート。
        </para>

        <para>
<!--
         Vacuum also allows removal of old files from the
         <filename>pg_xact</filename> subdirectory, which is why the default
         is a relatively low 200 million transactions.
         This parameter can only be set at server start, but the setting
         can be reduced for individual tables by
         changing table storage parameters.
         For more information see <xref linkend="vacuum-for-wraparound"/>.
-->
《マッチ度[84.741144]》vacuumは同時に<filename>pg_xact</filename>サブディレクトリから古いファイルの削除を許可します。
これが、比較的低い2億トランザクションがデフォルトである理由です。
このパラメータはサーバ起動時にのみ設定可能です。
しかし、この設定はテーブルストレージパラメータの変更により、それぞれのテーブルで減らすことができます。
詳細は<xref linkend="vacuum-for-wraparound"/>を参照してください。
《機械翻訳》バキュームでは、<filename>pg_xact</filename>サブディレクトリから古いファイルを削除することもできます。
これが、デフォルトが比較的少ない200,000,000トランザクションである理由です。
このパラメータはサーバスタートでのみ設定できますが、テーブルストレージパラメータを変更することで個々のテーブルの設定を減らすことができます。
詳細については、<xref linkend="vacuum-for-wraparound"/>を参照してください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-autovacuum-multixact-freeze-max-age" xreflabel="autovacuum_multixact_freeze_max_age">
       <term><varname>autovacuum_multixact_freeze_max_age</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>autovacuum_multixact_freeze_max_age</varname></primary>
        <secondary>configuration parameter</secondary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies the maximum age (in multixacts) that a table's
         <structname>pg_class</structname>.<structfield>relminmxid</structfield> field can
         attain before a <command>VACUUM</command> operation is forced to
         prevent multixact ID wraparound within the table.
         Note that the system will launch autovacuum processes to
         prevent wraparound even when autovacuum is otherwise disabled.
-->
《マッチ度[87.131367]》トランザクションID周回を防ぐために<command>VACUUM</command>操作が強制される前までにテーブルの<structname>pg_class</structname>.<structfield>relminmxid</structfield> フィールドが到達できる最大（マルチトランザクションにおける）年代を指定します。
自動バキュームが無効であった時でも、システムは周回を防ぐために自動バキューム子プロセスを起動することに注意してください。
《機械翻訳》テーブル<structname>pg_class</structname>の最大有効期間を(multixacts)で指定します。
<structfield>relminmxid</structfield>フィールドは前を獲得することができます。
<command>VACUUM</command>オペレーションはテーブル内のマルチトランザクションIDの周回を防ぐことを強制されます。
オートバキュームが他の障害を負っている場合でも周回を防ぐためにシステムが自動バキュームプロセスを立ち上げるというノート。
        </para>

        <para>
<!--
         Vacuuming multixacts also allows removal of old files from the
         <filename>pg_multixact/members</filename> and <filename>pg_multixact/offsets</filename>
         subdirectories, which is why the default is a relatively low
         400 million multixacts.
         This parameter can only be set at server start, but the setting can
         be reduced for individual tables by changing table storage parameters.
         For more information see <xref linkend="vacuum-for-multixact-wraparound"/>.
-->
《マッチ度[87.555556]》またマルチトランザクションIDのvacuumは<filename>pg_multixact</filename>と<filename>pg_multixact/offsets</filename>サブディレクトリから古いファイルの削除します。
これがデフォルトが4億トランザクションをやや下回る理由です。
このパラメータはサーバ起動時にのみ設定可能です。
しかし、この設定はテーブルストレージパラメータの変更により、それぞれのテーブルで減らすことができます。
詳細は<xref linkend="vacuum-for-multixact-wraparound"/>を参照してください。
《機械翻訳》バキューム処理マルチxactsでは、<filename>pg_multixact/members</filename>および<filename>pg_multixact/offsets</filename>サブディレクトリから古いファイルを削除することもできます。
これが、デフォルトが比較的少ない400,000,000マルチxactsである理由です。
このパラメータはサーバスタートでのみ設定できますが、テーブルストレージパラメータを変更することで個々のテーブルの設定を減らすことができます。
詳細は、<xref linkend="vacuum-for-multixact-wraparound"/>を参照してください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-autovacuum-vacuum-cost-delay" xreflabel="autovacuum_vacuum_cost_delay">
       <term><varname>autovacuum_vacuum_cost_delay</varname> (<type>floating point</type>)
       <indexterm>
        <primary><varname>autovacuum_vacuum_cost_delay</varname></primary>
        <secondary>configuration parameter</secondary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies the cost delay value that will be used in automatic
         <command>VACUUM</command> operations.  If -1 is specified, the regular
         <xref linkend="guc-vacuum-cost-delay"/> value will be used.
         If this value is specified without units, it is taken as milliseconds.
         The default value is 2 milliseconds.
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line;
         but the setting can be overridden for individual tables by
         changing table storage parameters.
-->
《マッチ度[85.515873]》自動<command>VACUUM</command>操作に使用されるコスト遅延値を指定します。
-1に指定されると、一定の <xref linkend="guc-vacuum-cost-delay"/>の値が使用されます。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
デフォルト値は2ミリ秒です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
ただし、この設定はテーブルストレージパラメータの変更により、それぞれのテーブルに対して上書きすることができます。
《機械翻訳》自動<command>VACUUM</command>操作で使用されるコスト遅延値を指定します。
-1を指定すると、通常の<xref linkend="guc-vacuum-cost-delay"/>値が使用されます。
この値をユニットなしで指定すると、ミリ秒と見なされます。
デフォルト値は2ミリ秒です。
このパラメータは<filename>postgresql.conf</filename>ファイルまたはサーバコマンドライン上でのみ設定できますが、テーブルストレージパラメータを変更することで個々のテーブルの設定を上書きできます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-autovacuum-vacuum-cost-limit" xreflabel="autovacuum_vacuum_cost_limit">
       <term><varname>autovacuum_vacuum_cost_limit</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>autovacuum_vacuum_cost_limit</varname></primary>
        <secondary>configuration parameter</secondary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies the cost limit value that will be used in automatic
         <command>VACUUM</command> operations.  If <literal>-1</literal>
         is specified (which is the default), the regular
         <xref linkend="guc-vacuum-cost-limit"/> value will be used.  Note that
         the value is distributed proportionally among the running autovacuum
         workers, if there is more than one, so that the sum of the limits for
         each worker does not exceed the value of this variable.
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line;
         but the setting can be overridden for individual tables by
         changing table storage parameters.
-->
《マッチ度[83.048212]》自動<command>VACUUM</command>操作に使用されるコスト限界値を指定します。
（デフォルトの）-1が指定されると、一定の <xref linkend="guc-vacuum-cost-limit"/>の値が使用されます。
この値は、実行中の自動バキュームワーカーが複数存在する場合ワーカーすべてに比例分配されることに注意してください。
したがって各ワーカーの制限を足し合わせてもこの変数による制限を超えることはありません。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
ただし、この設定はテーブルストレージパラメータの変更により、それぞれのテーブルに対して上書きすることができます。
《機械翻訳》自動<command>VACUUM</command>コスト操作で使用されるデフォルト制限値を指定します。
<literal>-1</literal>が指定されている場合はノート、通常の<xref linkend="guc-vacuum-cost-limit"/>値が使用されます。
複数のオートバキュームワーカーが存在する場合、各ワーカーの制限の総和がこの変数の値を超えないように、値が実行中のワーカー間で比例的に配分されるパラメータ。
このは<filename>postgresql.conf</filename>ファイルまたはサーバコマンドラインでのみ設定できますが、テーブルストレージパラメータを変更することで個々の表の設定を上書きできます。
        </para>
       </listitem>
      </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-resource-vacuum-cost">
<!--
     <title>Cost-based Vacuum Delay</title>
-->
     <title>コストに基づくVacuum遅延</title>

     <para>
<!--
      During the execution of <xref linkend="sql-vacuum"/>
      and <xref linkend="sql-analyze"/>
      commands, the system maintains an
      internal counter that keeps track of the estimated cost of the
      various I/O operations that are performed.  When the accumulated
      cost reaches a limit (specified by
      <varname>vacuum_cost_limit</varname>), the process performing
      the operation will sleep for a short period of time, as specified by
      <varname>vacuum_cost_delay</varname>. Then it will reset the
      counter and continue execution.
-->
<xref linkend="sql-vacuum"/> および <xref linkend="sql-analyze"/> コマンドの実行中、実行される各種I/O操作の予測コストを追跡し続ける内部カウンタをシステムが保守します。
累積されたコストが（<varname>vacuum_cost_limit</varname>で指定された）限度に達すると、操作を実行しているプロセスは<varname>vacuum_cost_delay</varname>で指定されたちょっとの間スリープします。その後、カウンタをリセットし、実行を継続します。
     </para>

     <para>
<!--
      The intent of this feature is to allow administrators to reduce
      the I/O impact of these commands on concurrent database
      activity. There are many situations where it is not
      important that maintenance commands like
      <command>VACUUM</command> and <command>ANALYZE</command> finish
      quickly; however, it is usually very important that these
      commands do not significantly interfere with the ability of the
      system to perform other database operations. Cost-based vacuum
      delay provides a way for administrators to achieve this.
-->
この機能の目的は、同時に実行されているデータベースの活動に対するこれらコマンドによるI/Oへの影響を、管理者が軽減できるようにすることです。
<command>VACUUM</command> および <command>ANALYZE</command>の様な保守用コマンドが即座に終了することが重要ではない事態が数多くあります。
しかし、他のデータベースの操作を行うに当たって、これらのコマンドがシステムの能力に多大な阻害を与えないことは通常とても重要です。
コストに基づいたvacuum遅延はこれを実現するための方法を管理者に提供します。
     </para>

     <para>
<!--
      This feature is disabled by default for manually issued
      <command>VACUUM</command> commands. To enable it, set the
      <varname>vacuum_cost_delay</varname> variable to a nonzero
      value.
-->
手動で実行した<command>VACUUM</command>コマンドについては、デフォルトでこの機能は無効になっています。
有効にするには、<varname>vacuum_cost_delay</varname>変数をゼロでない値に設定します。
     </para>

     <variablelist>
      <varlistentry id="guc-vacuum-cost-delay" xreflabel="vacuum_cost_delay">
       <term><varname>vacuum_cost_delay</varname> (<type>floating point</type>)
       <indexterm>
        <primary><varname>vacuum_cost_delay</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
       <primary><varname>vacuum_cost_delay</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         The amount of time that the process will sleep when the cost
         limit has been exceeded. If this value is specified without
         units, it is taken as milliseconds. The default value is
         <literal>0</literal>, which disables the cost-based vacuum delay
         feature.  Positive values enable cost-based vacuuming.
-->
《マッチ度[78.378378]》コストの限度を越えた場合、プロセスがスリープする時間の長さです。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
デフォルトの値は0で、コストに基づいたvacuum遅延機能を無効にします。
正の整数はコストに基づいたvacuumを有効にします。
《機械翻訳》コスト制限を超えたときにプロセスがスリープする時間です。
この値がユニットなしで指定された場合、ミリ秒とみなされます。
デフォルト値は<literal>0</literal>で、コストベースのバキューム遅延機能を無効にします。
正の値はコストベースのバキューム処理を有効にします。
        </para>

        <para>
<!--
         When using cost-based vacuuming, appropriate values for
         <varname>vacuum_cost_delay</varname> are usually quite small, perhaps
         less than 1 millisecond.  While <varname>vacuum_cost_delay</varname>
         can be set to fractional-millisecond values, such delays may not be
         measured accurately on older platforms.  On such platforms,
         increasing <command>VACUUM</command>'s throttled resource consumption
         above what you get at 1ms will require changing the other vacuum cost
         parameters.  You should, nonetheless,
         keep <varname>vacuum_cost_delay</varname> as small as your platform
         will consistently measure; large delays are not helpful.
-->
コストに基づいたバキューム処理を使用する場合、<varname>vacuum_cost_delay</varname>の適切な値は通常かなり小さくなり、おそらく1ミリ秒以下になります。
バキュームによるリソース消費の調整は、他のバキュームのコストパラメータを変更して行うことが最善です。
<varname>vacuum_cost_delay</varname>を1ミリ秒以下に設定することは可能ですが、そうした遅延は古いプラットフォームでは正確には計測されないかも知れません。
そうしたプラットフォームでは、<command>VACUUM</command>のリソース消費制限を1ミリ秒のときに得られる値以上にするには、他のVACUUMコストパラメータの変更が必要となるでしょう。
とは言うものの、使用するプラットフォームで常に計測できる範囲で<varname>vacuum_cost_delay</varname>をできるだけ小さくするようにしてください。
大きな遅延は助けになりません。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-cost-page-hit" xreflabel="vacuum_cost_page_hit">
       <term><varname>vacuum_cost_page_hit</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_cost_page_hit</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>vacuum_cost_page_hit</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         The estimated cost for vacuuming a buffer found in the shared
         buffer cache. It represents the cost to lock the buffer pool,
         lookup the shared hash table and scan the content of the page.
         The default value is <literal>1</literal>.
-->
《マッチ度[75.982533]》共有バッファキャッシュの中のバッファにvacuumを掛ける予測コストです。バッファプールのロック、共有ハッシュテーブルの検索、およびページ内容のスキャンのコストを示します。デフォルトの値は1です。
《機械翻訳》共有バッファキャッシュにあるバッファバキューム処理の見積コスト。
バッファプールロックまでのコストを表し、共有ハッシュテーブルを参照し、ページのコンテンツスキャンを参照します。
デフォルト値は<literal>1</literal>です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-cost-page-miss" xreflabel="vacuum_cost_page_miss">
       <term><varname>vacuum_cost_page_miss</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_cost_page_miss</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>vacuum_cost_page_miss</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         The estimated cost for vacuuming a buffer that has to be read from
         disk.  This represents the effort to lock the buffer pool,
         lookup the shared hash table, read the desired block in from
         the disk and scan its content. The default value is
         <literal>2</literal>.
-->
《マッチ度[78.378378]》ディスクから読み込まれなければならないバッファにvacuumを掛ける予測コストです。これが示すものは、バッファプールロックの試み、共有ハッシュテーブルの参照、ディスクから目的ブロックの読み込み、そしてその内容のスキャンです。デフォルトの値は2です。
《機械翻訳》バキューム処理の見積コストディスクから読み取る必要があるバッファ。
これは、バッファプールをロックし、共有ハッシュテーブルを検索し、ディスクから目的のブロックを読み取り、そのコンテンツをスキャンするための労力を表します。
デフォルト値は<literal>2</literal>です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-cost-page-dirty" xreflabel="vacuum_cost_page_dirty">
       <term><varname>vacuum_cost_page_dirty</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_cost_page_dirty</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>vacuum_cost_page_dirty</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         The estimated cost charged when vacuum modifies a block that was
         previously clean. It represents the extra I/O required to
         flush the dirty block out to disk again. The default value is
         <literal>20</literal>.
-->
《マッチ度[77.294686]》vacuumが、先だって掃除したブロックを変更するのに必要な推定コストです。
ダーティブロックを再度ディスクにフラッシュするのに必要な余分なI/Oを表します。デフォルトの値は20です。
《機械翻訳》バキュームが以前はきれいだったブロックを変更したときに請求される推定コスト。
これは、ダーティブロックを再びディスクにフラッシュするために必要な追加の入出力を表します。
デフォルト値は<literal>20</literal>です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-cost-limit" xreflabel="vacuum_cost_limit">
       <term><varname>vacuum_cost_limit</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_cost_limit</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>vacuum_cost_limit</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         This is the accumulated cost that will cause the vacuuming
         process to sleep for <varname>vacuum_cost_delay</varname>.  The
         default is <literal>200</literal>.
-->
《マッチ度[75.641026]》vacuumを掛けるプロセスを<varname>vacuum_cost_delay</varname>の間スリープさせることになる累計されたコストです。
デフォルトの値は200です。
《機械翻訳》これは、<varname>vacuum_cost_delay</varname>のバキューム処理プロセスをスリープにする累積コストです。
デフォルトは<literal>200</literal>です。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <note>
      <para>
<!--
       There are certain operations that hold critical locks and should
       therefore complete as quickly as possible.  Cost-based vacuum
       delays do not occur during such operations.  Therefore it is
       possible that the cost accumulates far higher than the specified
       limit.  To avoid uselessly long delays in such cases, the actual
       delay is calculated as <varname>vacuum_cost_delay</varname> *
       <varname>accumulated_balance</varname> /
       <varname>vacuum_cost_limit</varname> with a maximum of
       <varname>vacuum_cost_delay</varname> * 4.
-->
重要なロックを保有し可能なかぎり早急に完了しなければならないある種の操作があります。コストに基づいたvacuum遅延はこの様な操作では起こりません。
したがって、コストの累計が指定された限度をかなり高く超える可能性があります。
このような場合無駄な長い遅延を防止するため、実際の遅延は<varname>vacuum_cost_delay</varname> * 4 を上限として、以下のように計算されます。
<varname>vacuum_cost_delay</varname> * <varname>accumulated_balance</varname> / <varname>vacuum_cost_limit</varname>
      </para>
     </note>
    </sect2>

    <sect2 id="runtime-config-vacuum-default">
     <title>Default Behavior</title>

     <variablelist>
      <varlistentry id="guc-vacuum-truncate" xreflabel="vacuum_truncate">
       <term><varname>vacuum_truncate</varname> (<type>boolean</type>)
       <indexterm>
        <primary><varname>vacuum_truncate</varname></primary>
        <secondary>configuration parameter</secondary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Enables or disables vacuum to try to truncate off any empty pages at
         the end of the table.  The default value is <literal>true</literal>.
         If <literal>true</literal>, <command>VACUUM</command> and autovacuum
         do the truncation and the disk space for the truncated pages is
         returned to the operating system.  Note that the truncation requires
         an <literal>ACCESS EXCLUSIVE</literal> lock on the table.  The
         <literal>TRUNCATE</literal> parameter of
         <link linkend="sql-vacuum"><command>VACUUM</command></link>, if
         specified, overrides the value of this parameter.  The setting can
         also be overridden for individual tables by changing table storage
         parameters.
-->
《機械翻訳》「バキュームからトライ」を有効または無効にして、オフの最後にある空のページを切り捨てます。
デフォルト値は<literal>true</literal>です。
<literal>true</literal>,<command>VACUUM</command>およびオートバキュームが切り捨てを行うと、切り捨てられたページのディスクスペースがオペレーティングシステムに戻されます。
切捨てにはテーブルの<literal>ACCESS EXCLUSIVE</literal>ロックが必要なノートです。
<link linkend="sql-vacuum"><command>VACUUM</command></link>の<literal>TRUNCATE</literal>パラメータを指定すると、このパラメータの値が上書きされます。
テーブルストレージパラメータを変更すると、個々の表の設定を上書きすることもできます。
テーブル
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </sect2>

    <sect2 id="runtime-config-vacuum-freezing">
     <title>Freezing</title>

     <para>
<!--
      To maintain correctness even after transaction IDs wrap around,
      <productname>PostgreSQL</productname> marks rows that are sufficiently
      old as <emphasis>frozen</emphasis>. These rows are visible to everyone;
      other transactions do not need to examine their inserting XID to
      determine visibility. <command>VACUUM</command> is responsible for
      marking rows as frozen. The following settings control
      <command>VACUUM</command>'s freezing behavior and should be tuned based
      on the XID consumption rate of the system and data access patterns of the
      dominant workloads. See <xref linkend="vacuum-for-wraparound"/> for more
      information on transaction ID wraparound and tuning these parameters.
-->
《機械翻訳》トランザクションIDが循環した後でも正確さを維持するために、<productname>PostgreSQL</productname>は十分に古い行を<emphasis>凍結済</emphasis>としてマークします。
これらの行はすべての人にとって可視です。
他のトランザクションは挿入XIDを検査する必要はありません。
<command>VACUUM</command>はマーキング行を凍結済として扱います。
次の設定はコントロール<command>VACUUM</command>の凍結動作であり、主要なワークロードのシステムとデータアクセスのパターンのXID消費レートに基づいて調整する必要があります。
これらのパラメータのトランザクションIDの周回とチューニングの詳細は<xref linkend="vacuum-for-wraparound"/>を参照してください。
     </para>

     <variablelist>
      <varlistentry id="guc-vacuum-freeze-table-age" xreflabel="vacuum_freeze_table_age">
       <term><varname>vacuum_freeze_table_age</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_freeze_table_age</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         <command>VACUUM</command> performs an aggressive scan if the table's
         <structname>pg_class</structname>.<structfield>relfrozenxid</structfield> field has reached
         the age specified by this setting.  An aggressive scan differs from
         a regular <command>VACUUM</command> in that it visits every page that might
         contain unfrozen XIDs or MXIDs, not just those that might contain dead
         tuples.  The default is 150 million transactions.  Although users can
         set this value anywhere from zero to two billion, <command>VACUUM</command>
         will silently limit the effective value to 95% of
         <xref linkend="guc-autovacuum-freeze-max-age"/>, so that a
         periodic manual <command>VACUUM</command> has a chance to run before an
         anti-wraparound autovacuum is launched for the table. For more
         information see
         <xref linkend="vacuum-for-wraparound"/>.
-->
《マッチ度[86.935287]》テーブルの<structname>pg_class</structname>.<structfield>relfrozenxid</structfield>フィールドがこの設定で指定した時期に達すると、<command>VACUUM</command>は積極的なテーブルスキャンを行います。
積極的なスキャンは、無効タプルを含む可能性のあるページだけではなく、凍結されていないXIDあるいはMXIDを含むすべてのページを読む点で通常の<command>VACUUM</command>とは異なります。
デフォルトは1.5億トランザクションです。
ユーザはこの値をゼロから20億までの任意の値に設定することができますが、<command>VACUUM</command>は警告することなく、周回問題対策のautovacuumがテーブルに対して起動する前に定期的な手動<command>VACUUM</command>が実行する機会を持つように、<xref linkend="guc-autovacuum-freeze-max-age"/>の95%に実効値を制限します。
詳細は<xref linkend="vacuum-for-wraparound"/>を参照してください。
《機械翻訳》<command>VACUUM</command>は、テーブルの<structname>pg_class</structname>.<structfield>relfrozenxid</structfield>スキャンがこの設定で指定された経過時間に達した場合、積極的なクラスを実行します。
積極的なフィールドは、通常の<command>VACUUM</command>不要なタプルを含む可能性のあるページだけでなく、フリーズされていないXIDまたはMXIDを含む可能性のあるすべてのデフォルトを訪問するとは異なります。
デフォルトは150,000,000トランザクションです。
ユーザはこの値をゼロから2,000,000,000までの任意の場所に設定できますが、<command>VACUUM</command>は暗黙的に実効値を<xref linkend="guc-autovacuum-freeze-max-age"/>の95%に制限します。
これにより、テーブルに対して反ラップアラウンドの自動バキュームが起動される前に、定期的な手動<command>VACUUM</command>が実行される可能性があります。
詳細は<xref linkend="vacuum-for-wraparound"/>を参照してください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-freeze-min-age" xreflabel="vacuum_freeze_min_age">
       <term><varname>vacuum_freeze_min_age</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_freeze_min_age</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies the cutoff age (in transactions) that
         <command>VACUUM</command> should use to decide whether to
         trigger freezing of pages that have an older XID.
         The default is 50 million transactions.  Although
         users can set this value anywhere from zero to one billion,
         <command>VACUUM</command> will silently limit the effective value to half
         the value of <xref linkend="guc-autovacuum-freeze-max-age"/>, so
         that there is not an unreasonably short time between forced
         autovacuums.  For more information see <xref
         linkend="vacuum-for-wraparound"/>.
-->
《マッチ度[84.870849]》<command>VACUUM</command>が、古いXIDを持つページをフリーズするきっかけとするかどうかを決定する、カットオフ年代を（トランザクション単位で）指定します。
デフォルトは5千万トランザクションです。
ユーザはこの値を0から10億までの間で任意の値に設定することができますが、<command>VACUUM</command>は警告なく<xref linkend="guc-autovacuum-freeze-max-age"/>の半分までの値に値を制限します。
このため、強制的なautovacuumの間隔が不合理に短くなることはありません。
詳細は<xref linkend="vacuum-for-wraparound"/>を参照してください。
《機械翻訳》古いXIDを持つページの凍結をトリガするかどうかを決定するために<command>VACUUM</command>が使用すべきカットオフの経過時間（トランザクション単位）を指定します。
デフォルトは50,000,000トランザクションです。
ユーザはこの値をゼロから10億までの任意の値に設定することができますが、<command>VACUUM</command>は自動的に実効値を<xref linkend="guc-autovacuum-freeze-max-age"/>の半分の値に制限するので、強制的な自動バキュームの間隔が不当に短くなることがありません。
詳細は<xref linkend="vacuum-for-wraparound"/>を参照してください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-failsafe-age" xreflabel="vacuum_failsafe_age">
       <term><varname>vacuum_failsafe_age</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_failsafe_age</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies the maximum age (in transactions) that a table's
         <structname>pg_class</structname>.<structfield>relfrozenxid</structfield>
         field can attain before <command>VACUUM</command> takes
         extraordinary measures to avoid system-wide transaction ID
         wraparound failure.  This is <command>VACUUM</command>'s
         strategy of last resort.  The failsafe typically triggers
         when an autovacuum to prevent transaction ID wraparound has
         already been running for some time, though it's possible for
         the failsafe to trigger during any <command>VACUUM</command>.
-->
《マッチ度[86.372007]》<command>VACUUM</command>がシステム全体に渡るトランザクションID周回障害を避けるために異例の措置を取るようになる、テーブルの<structname>pg_class</structname>.<structfield>relfrozenxid</structfield>フィールドが到達する最大の（トランザクション数単位での）年齢を指定します。
これは<command>VACUUM</command>の最後の手段となる戦略です。
この安全機構は典型的には、トランザクションID周回を防ぐための自動バキュームがすでに走っているときに起動されます。
しかし、すべての<command>VACUUM</command>の実行中にこの安全機構が起動する可能性があります。
《機械翻訳》テーブル<structname>pg_class</structname>の最大有効期間（トランザクション単位）を指定します。
<structfield>relfrozenxid</structfield>フィールドは前を獲得することができます<command>VACUUM</command>システム全体のトランザクションIDの周回障害を回避するために特別な措置を講じます。
これは<command>VACUUM</command>の最後の手段のストラテジです。
通常、フェイルセーフは、トランザクションIDの周回を回避するためのオートバキュームがすでにしばらく実行されている場合にトリガされますが、<command>VACUUM</command>の間にトリガにフェイルセーフを行うことは可能です。
        </para>
        <para>
<!--
         When the failsafe is triggered, any cost-based delay that is
         in effect will no longer be applied, further non-essential
         maintenance tasks (such as index vacuuming) are bypassed, and any
         <glossterm linkend="glossary-buffer-access-strategy">Buffer Access Strategy</glossterm>
         in use will be disabled resulting in <command>VACUUM</command> being
         free to make use of all of
         <glossterm linkend="glossary-shared-memory">shared buffers</glossterm>.
-->
《マッチ度[87.301587]》この安全機構が起動すると、すべての有効なコストに基づく遅延はもはや適用されず、（インデックスのバキュームのような）必須ではない保守タスクは迂回されます。
使用中の<glossterm linkend="glossary-buffer-access-strategy">バッファアクセスストラテジ</glossterm>は無効になり、その結果<command>VACUUM</command>は<glossterm linkend="glossary-shared-memory">共有バッファ</glossterm>のすべてを自由に使用することになります。
《機械翻訳》フェイルセーフがトリガされると、有効なコストベースの遅延は適用されなくなり、それ以降の重要でないメンテナンスタスク（インデックスバキューム処理など）はバイパスされ、使用中の<glossterm linkend="glossary-buffer-access-strategy">バッファアクセスストラテジ</glossterm>は無効になり、<command>VACUUM</command>フリーは<glossterm linkend="glossary-shared-memory">共有バッファ</glossterm>のすべてをmakeで使用することになる。
        </para>
        <para>
<!--
         The default is 1.6 billion transactions.  Although users can
         set this value anywhere from zero to 2.1 billion,
         <command>VACUUM</command> will silently adjust the effective
         value to no less than 105% of <xref
          linkend="guc-autovacuum-freeze-max-age"/>.
-->
《マッチ度[83.132530]》デフォルトは16億トランザクションです。
ユーザはこの値をゼロから21億までの間で設定できますが、<command>VACUUM</command>は<xref linkend="guc-autovacuum-freeze-max-age"/>の105%よりも小さくならないように実際の値を調整します。
《機械翻訳》デフォルトは1,600,000,000トランザクションです。
ユーザはこの値をゼロから2,100,000,000までの任意の値に設定できますが、<command>VACUUM</command>は暗黙的に実効値をより小さいなし<xref linkend="guc-autovacuum-freeze-max-age"/>の105%に調整します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-multixact-freeze-table-age" xreflabel="vacuum_multixact_freeze_table_age">
       <term><varname>vacuum_multixact_freeze_table_age</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_multixact_freeze_table_age</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         <command>VACUUM</command> performs an aggressive scan if the table's
         <structname>pg_class</structname>.<structfield>relminmxid</structfield> field has reached
         the age specified by this setting.  An aggressive scan differs from
         a regular <command>VACUUM</command> in that it visits every page that might
         contain unfrozen XIDs or MXIDs, not just those that might contain dead
         tuples.  The default is 150 million multixacts.
         Although users can set this value anywhere from zero to two billion,
         <command>VACUUM</command> will silently limit the effective value to 95% of
         <xref linkend="guc-autovacuum-multixact-freeze-max-age"/>, so that a
         periodic manual <command>VACUUM</command> has a chance to run before an
         anti-wraparound is launched for the table.
         For more information see <xref linkend="vacuum-for-multixact-wraparound"/>.
-->
《マッチ度[88.106796]》<structname>pg_class</structname>.<structfield>relminmxid</structfield>フィールドがこの設定値で指定した年代に達すると<command>VACUUM</command>はテーブルの積極的なスキャンを行います。
積極的なスキャンは、無効タプルを含む可能性のあるページだけではなく、凍結XIDあるいはMXIDを含むすべてのページを読む点で通常の<command>VACUUM</command>とは異なります。
デフォルトは1億5千万トランザクションです。
ユーザは0から20億まで任意の値を設定できますが、テーブルに対してラップアラウンド防止処理が起動される前に定期的な手動<command>VACUUM</command>が走ることができるように、<command>VACUUM</command>は<xref linkend="guc-autovacuum-multixact-freeze-max-age"/>の95%に暗黙的に制限します。
詳細は<xref linkend="vacuum-for-multixact-wraparound"/>をご覧ください。
《機械翻訳》<command>VACUUM</command>テーブルの<structname>pg_frozen</structname>.<structfield>relminmxid</structfield>スキャンがこの設定で指定された経過時間に達した場合、積極的なクラスを実行します。
積極的なフィールドは、通常のスキャンとは異なります。
<command>VACUUM</command>通常のページは、デッドタプルを含む可能性のあるものだけでなく、フリーズされていないXIDまたはMXIDを含む可能性のあるすべてのを訪問します。
デフォルトは150,000,000のマルチスケールです。
ユーザはこの値をゼロから2,000,000,000までの任意の場所に設定できますが、<command>VACUUM</command>は暗黙のうちに実効値を<xref linkend="guc-autovacuum-multixact-freeze-max-age"/>の95%に制限します。
これにより、定期的な<command>VACUUM</command>アンチを実行する機会があります。
テーブルに対して-周回が起動されます。
詳細は<xref linkend="vacuum-for-multixact-wraparound"/>を参照してください。
マニュアル前
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-multixact-freeze-min-age" xreflabel="vacuum_multixact_freeze_min_age">
       <term><varname>vacuum_multixact_freeze_min_age</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_multixact_freeze_min_age</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies the cutoff age (in multixacts) that <command>VACUUM</command>
         should use to decide whether to trigger freezing of pages with
         an older multixact ID.  The default is 5 million multixacts.
         Although users can set this value anywhere from zero to one billion,
         <command>VACUUM</command> will silently limit the effective value to half
         the value of <xref linkend="guc-autovacuum-multixact-freeze-max-age"/>,
         so that there is not an unreasonably short time between forced
         autovacuums.
         For more information see <xref linkend="vacuum-for-multixact-wraparound"/>.
-->
《マッチ度[86.987522]》<command>VACUUM</command>がテーブルをスキャンする際に、ページを凍結するきっかけとするかどうかを決める下限値をマルチトランザクション単位で指定します。
デフォルトは500万マルチトランザクションです。
ユーザは0から10億まで任意の値を設定できますが、強制的な自動バキュームの間隔が短くなり過ぎないように、<command>VACUUM</command>は<xref linkend="guc-autovacuum-multixact-freeze-max-age"/>の半分に暗黙的に実効的な値を制限します。
詳細は<xref linkend="vacuum-for-multixact-wraparound"/>をご覧ください。
《機械翻訳》古いトリガのページを凍結するかどうかを決定するために<command>VACUUM</command>が使用すべきカットオフマルチトランザクションID multixactsを指定します。
デフォルトは5,000,000 multixactsです。
ユーザはこの値をゼロから10億までの任意の値に設定することができますが、<command>VACUUM</command>は暗黙のうちに実効値を<xref linkend="guc-autovacuum-multixact-freeze-max-age"/>の半分の値に制限します。
そのため、強制的な自動バキュームの間隔が不当に短くなることはありません。
詳細は<xref linkend="vacuum-for-multixact-wraparound"/>を参照してください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-multixact-failsafe-age" xreflabel="vacuum_multixact_failsafe_age">
       <term><varname>vacuum_multixact_failsafe_age</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_multixact_failsafe_age</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies the maximum age (in multixacts) that a table's
         <structname>pg_class</structname>.<structfield>relminmxid</structfield>
         field can attain before <command>VACUUM</command> takes
         extraordinary measures to avoid system-wide multixact ID
         wraparound failure.  This is <command>VACUUM</command>'s
         strategy of last resort.  The failsafe typically triggers when
         an autovacuum to prevent transaction ID wraparound has already
         been running for some time, though it's possible for the
         failsafe to trigger during any <command>VACUUM</command>.
-->
《マッチ度[86.219739]》<command>VACUUM</command>がシステム全体マルチトランザクションID周回障害を避けるために異例の措置を取るようになる、テーブルの<structname>pg_class</structname>.<structfield>relminmxid</structfield>フィールドが到達する最大の（マルチトランザクション数単位での）年齢を指定します。
これは<command>VACUUM</command>最後の手段となる戦略です。
この安全機構は典型的には、トランザクションID周回を防ぐための自動バキュームがすでに走っているときに起動されます。
しかし、すべての<command>VACUUM</command>の実行中にこの安全機構が起動する可能性があります。
《機械翻訳》テーブル<structname>pg_class</structname>の最大有効期間を（マルチxactsで）指定します。
<structfield>relminmxid</structfield>フィールドは前を獲得することができます<command>VACUUM</command>システム全体のマルチトランザクションIDの周回障害を回避するために特別な措置を講じます。
これは<command>VACUUM</command>の最後の手段のストラテジです。
通常、フェイルセーフは、トランザクションIDの周回を回避するためのオートバキュームがすでにしばらく実行されているときにトリガされますが、<command>VACUUM</command>の間にトリガにフェイルセーフすることは可能です。
        </para>
        <para>
<!--
         When the failsafe is triggered, any cost-based delay that is
         in effect will no longer be applied, and further non-essential
         maintenance tasks (such as index vacuuming) are bypassed.
-->
《マッチ度[86.740331]》この安全機構が起動すると、すべての有効なコストに基づく遅延はもはや適用されず、（インデックスのバキュームのような）必須ではない保守タスクは迂回されます。
《機械翻訳》この安全機構が起動すると、すべての有効なコストに基づく遅延はもはや適用されず、（インデックスのバキュームのような）必須ではない保守タスクは迂回されます。
        </para>
        <para>
<!--
         The default is 1.6 billion multixacts.  Although users can set
         this value anywhere from zero to 2.1 billion,
         <command>VACUUM</command> will silently adjust the effective
         value to no less than 105% of <xref
          linkend="guc-autovacuum-multixact-freeze-max-age"/>.
-->
《マッチ度[83.657588]》デフォルトは16億マルチトランザクションです。
ユーザはこの値をゼロから21億までの間で設定できますが、<command>VACUUM</command>は<xref linkend="guc-autovacuum-multixact-freeze-max-age"/>の105%よりも小さくならないように実際の値を調整します。
《機械翻訳》デフォルトは1,600,000,000マルチトランザクションです。
ユーザはこの値をゼロから2,100,000,000までの任意の場所に設定できますが、<command>VACUUM</command>は暗黙のうちに実効値をより小さいなし<xref linkend="guc-autovacuum-multixact-freeze-max-age"/>の105%に調整します。
        </para>
       </listitem>
      </varlistentry>

     <varlistentry id="guc-vacuum-max-eager-freeze-failure-rate" xreflabel="vacuum_max_eager_freeze_failure_rate">
      <term><varname>vacuum_max_eager_freeze_failure_rate</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>vacuum_max_eager_freeze_failure_rate</varname></primary>
       <secondary>configuration parameter</secondary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the maximum number of pages (as a fraction of total pages in
        the relation) that <command>VACUUM</command> may scan and
        <emphasis>fail</emphasis> to set all-frozen in the visibility map
        before disabling eager scanning. A value of <literal>0</literal>
        disables eager scanning altogether. The default is
        <literal>0.03</literal> (3%).
-->
《機械翻訳》ページの最大数を指定します<command>VACUUM</command>リレーションのページの合計に対する割合として。
可視性マップ前では、早期スキャンを無効にしてオール凍結を設定できます設定できない場合もあります。
値が<literal>0</literal>の場合、早期スキャンが完全に<emphasis>無効</emphasis>になります。
デフォルトは<literal>0.03</literal>(3%)です。
       </para>

       <para>
<!--
        Note that when eager scanning is enabled, only freeze failures
        count against the cap, not successful freezing. Successful page
        freezes are capped internally at 20% of the all-visible but not
        all-frozen pages in the relation. Capping successful page freezes helps
        amortize the overhead across multiple normal vacuums and limits the
        potential downside of wasted eager freezes of pages that are modified
        again before the next aggressive vacuum.
-->
《機械翻訳》ノートでは、Eager Scanningが有効になっている場合、フリーズのみが上限に対してカウントで失敗し、凍結の成功ではありません。
成功したページの凍結は、リレーション内の完全に凍結されたページではなく、完全に凍結されたページの20%に内部的に上限が設定されます。
成功したページの凍結に上限を設定すると、マルチプルの通常のバキューム全体でオーバーヘッドを償却し、次の積極的なバキュームの前で再び変更されるの無駄なEager Freezeの潜在的なマイナス面を制限できます。
可視
       </para>

       <para>
<!--
        This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command
        line; but the setting can be overridden for individual tables by
        changing the
        <link linkend="reloption-vacuum-max-eager-freeze-failure-rate">
        corresponding table storage parameter</link>.
        For more information on tuning vacuum's freezing behavior,
        see <xref linkend="vacuum-for-wraparound"/>.
-->
《機械翻訳》このパラメータは<filename>postgresql.conf</filename>ファイルまたはサーバコマンドラインでのみ設定できますが、<link linkend="reloption-vacuum-max-eager-freeze-failure-rate">対応するテーブルストレージパラメータ</link>を変更することで、個々のテーブルの設定を上書きできます。
チューニングバキュームのフリーズ動作の詳細については、<xref linkend="vacuum-for-wraparound"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-client">
<!--
    <title>Client Connection Defaults</title>
-->
    <title>クライアント接続デフォルト</title>

    <sect2 id="runtime-config-client-statement">
<!--
     <title>Statement Behavior</title>
-->
     <title>文の動作</title>
     <variablelist>

     <varlistentry id="guc-client-min-messages" xreflabel="client_min_messages">
      <term><varname>client_min_messages</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>client_min_messages</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>client_min_messages</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls which
        <link linkend="runtime-config-severity-levels">message levels</link>
        are sent to the client.
        Valid values are <literal>DEBUG5</literal>,
        <literal>DEBUG4</literal>, <literal>DEBUG3</literal>, <literal>DEBUG2</literal>,
        <literal>DEBUG1</literal>, <literal>LOG</literal>, <literal>NOTICE</literal>,
        <literal>WARNING</literal>, and <literal>ERROR</literal>.
        Each level includes all the levels that follow it.  The later the level,
        the fewer messages are sent.  The default is
        <literal>NOTICE</literal>.  Note that <literal>LOG</literal> has a different
        rank here than in <xref linkend="guc-log-min-messages"/>.
-->
どの<link linkend="runtime-config-severity-levels">メッセージレベル</link>をクライアントに送るかを管理します。有効な値は、<literal>DEBUG5</literal>、<literal>DEBUG4</literal>、<literal>DEBUG3</literal>、<literal>DEBUG2</literal>、<literal>DEBUG1</literal>、<literal>LOG</literal>、<literal>NOTICE</literal>、<literal>WARNING</literal>および<literal>ERROR</literal>です。
それぞれのレベルはそれに続く全てのレベルを包含します。
レベルが後の方になるにつれ、より少ないメッセージが送られます。
デフォルトは<literal>NOTICE</literal>です。
ここでの<literal>LOG</literal>の優先順位が<xref linkend="guc-log-min-messages"/>の場合と異なることに注意してください。
       </para>
       <para>
<!--
        <literal>INFO</literal> level messages are always sent to the client.
-->
<literal>INFO</literal>レベルのメッセージは常にクライアントに送られます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-search-path" xreflabel="search_path">
      <term><varname>search_path</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>search_path</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>search_path</varname>設定パラメータ</primary>
      </indexterm>
      <indexterm><primary>path</primary><secondary>for schemas</secondary></indexterm>
      <indexterm><primary>パス</primary><secondary>スキーマへの</secondary></indexterm>
      </term>
      <listitem>
       <para>
<!--
        This variable specifies the order in which schemas are searched
        when an object (table, data type, function, etc.) is referenced by a
        simple name with no schema specified.  When there are objects of
        identical names in different schemas, the one found first
        in the search path is used.  An object that is not in any of the
        schemas in the search path can only be referenced by specifying
        its containing schema with a qualified (dotted) name.
-->
この変数は、オブジェクト（テーブル、データ型、関数など）がスキーマを指定されていない単純な名前で参照されている場合に、スキーマを検索する順番を指定します。
異なるスキーマに同じ名前のオブジェクトがある場合、検索パスで最初に見つかったものが使用されます。
検索パス内のどのスキーマにも存在しないオブジェクトを参照するには、修飾名（ドット付き）でそのオブジェクトが含まれるスキーマを指定する必要があります。
       </para>

       <para>
<!--
        The value for <varname>search_path</varname> must be a comma-separated
        list of schema names.  Any name that is not an existing schema, or is
        a schema for which the user does not have <literal>USAGE</literal>
        permission, is silently ignored.
-->
<varname>search_path</varname>の値は、スキーマの名前をカンマで区切った一覧でなければなりません。
存在していないスキーマ、またはユーザが<literal>USAGE</literal>権限を所有していないスキーマは警告なしに無視されます。
       </para>

       <para>
<!--
        If one of the list items is the special name
        <literal>$user</literal>, then the schema having the name returned by
        <function>CURRENT_USER</function> is substituted, if there is such a schema
        and the user has <literal>USAGE</literal> permission for it.
        (If not, <literal>$user</literal> is ignored.)
-->
もしそのようなスキーマが存在し、ユーザがそれにたいして<literal>USAGE</literal>権限を所有している場合、一覧内の項目の1つが特別な名前である<literal>$user</literal>の場合、<function>CURRENT_USER</function>と同じ名前を持つスキーマがあれば、そのスキーマが置換されます。
（このような名前空間がない場合は<literal>$user</literal>は無視されます。）
       </para>

       <para>
<!--
        The system catalog schema, <literal>pg_catalog</literal>, is always
        searched, whether it is mentioned in the path or not.  If it is
        mentioned in the path then it will be searched in the specified
        order.  If <literal>pg_catalog</literal> is not in the path then it will
        be searched <emphasis>before</emphasis> searching any of the path items.
-->
システムカタログのスキーマである<literal>pg_catalog</literal>は、パスでの指定の有無にかかわらず、常に検索されます。
パスで指定されている場合は、指定された順序で検索されます。
<literal>pg_catalog</literal>がパスに含まれていない場合、パスに含まれる項目を検索する<emphasis>前に</emphasis>検索が行われます
       </para>

       <!-- To further split hairs, funcname('foo') does not use the temporary
            schema, even when it considers typname='funcname'.  This paragraph
            refers to function names in a loose sense, "pg_proc.proname or
            func_name grammar production". -->
       <!-- 細かい話ですが、typnameが'funcname'である場合でも、funcname('foo')は一時スキーマを使いません。
            この段落では、関数名とは「pg_proc.pronameあるいは文法生成物のfunc_name」のどちらでも良いという意味で使用しています。-->
       <para>
<!--
        Likewise, the current session's temporary-table schema,
        <literal>pg_temp_<replaceable>nnn</replaceable></literal>, is always searched if it
        exists.  It can be explicitly listed in the path by using the
        alias <literal>pg_temp</literal><indexterm><primary>pg_temp</primary></indexterm>.  If it is not listed in the path then
        it is searched first (even before <literal>pg_catalog</literal>).  However,
        the temporary schema is only searched for relation (table, view,
        sequence, etc.) and data type names.  It is never searched for
        function or operator names.
-->
同様に、現在のセッションの一時テーブルスキーマ<literal>pg_temp_<replaceable>nnn</replaceable></literal>も、存在すれば常に検索されます。
これは<literal>pg_temp</literal><indexterm><primary>pg_temp</primary></indexterm>という別名を使用してパスに明示的に列挙させることができます。
パスに列挙されていない場合、最初に（<literal>pg_catalog</literal>よりも前であっても）検索されます。
しかし、一時スキーマはリレーション（テーブル、ビュー、シーケンスなど）とデータ型名に対してのみ検索されます。
関数や演算子名に対してはまったく検索されません。
       </para>

       <para>
<!--
        When objects are created without specifying a particular target
        schema, they will be placed in the first valid schema named in
        <varname>search_path</varname>.  An error is reported if the search
        path is empty.
-->
対象となる特定のスキーマを指定せずにオブジェクトが作成された場合、それらのオブジェクトは<varname>search_path</varname>で名前を付けられた最初に有効となっているスキーマに配置されます。
検索パスが空の場合、エラーが報告されます。
       </para>

       <para>
<!--
        The default value for this parameter is
        <literal>"$user", public</literal>.
        This setting supports shared use of a database (where no users
        have private schemas, and all share use of <literal>public</literal>),
        private per-user schemas, and combinations of these.  Other
        effects can be obtained by altering the default search path
        setting, either globally or per-user.
-->
このパラメータのデフォルト値は<literal>"$user", public</literal>です。
この設定はデータベースの共有（どのユーザも非公開のスキーマを持たず、全員が<literal>public</literal>を共有）、ユーザごとの非公開のスキーマ、およびこれらの組み合わせがサポートします。
デフォルトの検索パスの設定を全体的またはユーザごとに変更することで、その他の効果を得ることもできます。
       </para>

       <para>
<!--
        For more information on schema handling, see
        <xref linkend="ddl-schemas"/>.  In particular, the default
        configuration is suitable only when the database has a single user or
        a few mutually-trusting users.
-->
スキーマの扱いについての詳細は、<xref linkend="ddl-schemas"/>をご覧ください。
とりわけ、デフォルトの設定はデータベースのユーザが、一人あるいはお互いに信頼できる少数のユーザだけである場合にのみ適切です。
       </para>

       <para>
<!--
        The current effective value of the search path can be examined
        via the <acronym>SQL</acronym> function
        <function>current_schemas</function>
        (see <xref linkend="functions-info"/>).
        This is not quite the same as
        examining the value of <varname>search_path</varname>, since
        <function>current_schemas</function> shows how the items
        appearing in <varname>search_path</varname> were resolved.
-->
<acronym>SQL</acronym>関数の<function>current_schemas</function> によって、検索パスの現在の有効な値を調べることができます（<xref linkend="functions-info"/>を参照してください）。
これは、<varname>search_path</varname> の値を調べるのとは異なります。
<function>current_schemas</function>は、<varname>search_path</varname>に現れる項目がどのように解決されたかを表すからです。
       </para>

      </listitem>
     </varlistentry>

     <varlistentry id="guc-row-security" xreflabel="row_security">
      <term><varname>row_security</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>row_security</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>row_security</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This variable controls whether to raise an error in lieu of applying a
        row security policy.  When set to <literal>on</literal>, policies apply
        normally.  When set to <literal>off</literal>, queries fail which would
        otherwise apply at least one policy.  The default is <literal>on</literal>.
        Change to <literal>off</literal> where limited row visibility could cause
        incorrect results; for example, <application>pg_dump</application> makes that
        change by default.  This variable has no effect on roles which bypass
        every row security policy, to wit, superusers and roles with
        the <literal>BYPASSRLS</literal> attribute.
-->
この設定値は、行セキュリティポリシーの適用によってエラーを生じさせるかどうかを制御します。
<literal>on</literal>に設定すると、通常通りポリシーが適用されます。
<literal>off</literal>にすると、少なくともひとつのポリシーが適用されたクエリは失敗します。
デフォルトは<literal>on</literal>です。
行の可視性が制限されている場合、<literal>off</literal>にすると不正な結果を招くことがあります。
たとえば、<application>pg_dump</application>はデフォルトで<literal>off</literal>にしています。
この設定値は、行セキュリティポリシーを迂回するロールには効果がありません。
それはすなわち、<literal>BYPASSRLS</literal>アトリビュートを持つスーパーユーザです。
       </para>

       <para>
<!--
        For more information on row security policies,
        see <xref linkend="sql-createpolicy"/>.
-->
行セキュリティポリシーについての更なる情報は<xref linkend="sql-createpolicy"/>をご覧ください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-table-access-method" xreflabel="default_table_access_method">
      <term><varname>default_table_access_method</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>default_table_access_method</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>default_table_access_method</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter specifies the default table access method to use when
        creating tables or materialized views if the <command>CREATE</command>
        command does not explicitly specify an access method, or when
        <command>SELECT ... INTO</command> is used, which does not allow
        specifying a table access method. The default is <literal>heap</literal>.
-->
このパラメータは、テーブルあるいはマテリアライズドビューの作成時に<command>CREATE</command>コマンドが明示的にアクセスメソッドを指定しないか、あるいはテーブルアクセスメソッドを指定できない<command>SELECT ... INTO</command>が利用された時に使われるデフォルトのテーブルアクセスメソッドを指定します。
デフォルトは<literal>heap</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-tablespace" xreflabel="default_tablespace">
      <term><varname>default_tablespace</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>default_tablespace</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>default_tablespace</varname>設定パラメータ</primary>
      </indexterm>
      <indexterm><primary>tablespace</primary><secondary>default</secondary></indexterm>
      <indexterm><primary>テーブル空間</primary><secondary>デフォルト</secondary></indexterm>
      </term>
      <listitem>
       <para>
<!--
        This variable specifies the default tablespace in which to create
        objects (tables and indexes) when a <command>CREATE</command> command does
        not explicitly specify a tablespace.
-->
この変数は、<command>CREATE</command>コマンドで明示的にテーブル空間を指定していない場合にオブジェクト（テーブルとインデックス）の作成先となるデフォルトのテーブル空間を指定します。
       </para>

       <para>
<!--
        The value is either the name of a tablespace, or an empty string
        to specify using the default tablespace of the current database.
        If the value does not match the name of any existing tablespace,
        <productname>PostgreSQL</productname> will automatically use the default
        tablespace of the current database.  If a nondefault tablespace
        is specified, the user must have <literal>CREATE</literal> privilege
        for it, or creation attempts will fail.
-->
値はテーブル空間名、もしくは現在のデータベースのデフォルトのテーブル空間を使用することを意味する空文字列です。
この値が既存のテーブル空間名と一致しない場合、<productname>PostgreSQL</productname>は自動的に現在のデータベースのデフォルトのテーブル空間を使用します。
デフォルト以外のテーブル空間が指定された場合、ユーザはそのテーブル空間で<literal>CREATE</literal>権限を持たなければなりません。
さもなくば作成に失敗します。
       </para>

       <para>
<!--
        This variable is not used for temporary tables; for them,
        <xref linkend="guc-temp-tablespaces"/> is consulted instead.
-->
この変数は一時テーブル向けには使用されません。
一時テーブル向けには代わりに<xref linkend="guc-temp-tablespaces"/>が考慮されます。
       </para>

       <para>
<!--
        This variable is also not used when creating databases.
        By default, a new database inherits its tablespace setting from
        the template database it is copied from.
-->
また、この変数はデータベース作成時には使用されません。
デフォルトでは、新しいデータベースはコピー元のテンプレートデータベースからテーブル空間の設定を引き継ぎます。
       </para>

       <para>
<!--
        If this parameter is set to a value other than the empty string
        when a partitioned table is created, the partitioned table's
        tablespace will be set to that value, which will be used as
        the default tablespace for partitions created in the future,
        even if <varname>default_tablespace</varname> has changed since then.
-->
パーティションテーブルが作られたときにこのパラメータが空文字以外に設定されていると、<varname>default_tablespace</varname>がその後変更されたとしても、パーティションテーブルのテーブル空間はその値になり、今後作られるパーティションのデフォルトテーブル空間として使われます。
       </para>

       <para>
<!--
        For more information on tablespaces,
        see <xref linkend="manage-ag-tablespaces"/>.
-->
テーブル空間に付いてより詳細な情報は<xref linkend="manage-ag-tablespaces"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-toast-compression" xreflabel="default_toast_compression">
      <term><varname>default_toast_compression</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>default_toast_compression</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>default_toast_compression</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This variable sets the default
        <link linkend="storage-toast">TOAST</link>
        compression method for values of compressible columns.
        (This can be overridden for individual columns by setting
        the <literal>COMPRESSION</literal> column option in
        <command>CREATE TABLE</command> or
        <command>ALTER TABLE</command>.)
        The supported compression methods are <literal>pglz</literal> and
        (if <productname>PostgreSQL</productname> was compiled with
        <option>&#45;-with-lz4</option>) <literal>lz4</literal>.
        The default is <literal>pglz</literal>.
-->
この変数は圧縮可能な列の値のデフォルト<link linkend="storage-toast">TOAST</link>圧縮方式を設定します。
（これは<command>CREATE TABLE</command>あるいは<command>ALTER TABLE</command>の<literal>COMPRESSION</literal>列オプションを設定することにより、置き換えることができます。）
サポートされている圧縮方式は、<literal>pglz</literal>と<literal>lz4</literal>（<productname>PostgreSQL</productname>が<option>--with-lz4</option>でコンパイルされている場合）です。
デフォルトは<literal>pglz</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-temp-tablespaces" xreflabel="temp_tablespaces">
      <term><varname>temp_tablespaces</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>temp_tablespaces</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>temp_tablespaces</varname>設定パラメータ</primary>
      </indexterm>
      <indexterm><primary>tablespace</primary><secondary>temporary</secondary></indexterm>
      <indexterm><primary>テーブル空間</primary><secondary>一時的</secondary></indexterm>
      </term>
      <listitem>
       <para>
<!--
        This variable specifies tablespaces in which to create temporary
        objects (temp tables and indexes on temp tables) when a
        <command>CREATE</command> command does not explicitly specify a tablespace.
        Temporary files for purposes such as sorting large data sets
        are also created in these tablespaces.
-->
この変数は、<command>CREATE</command>コマンドで明示的にテーブル空間が指定されない場合に、生成する一時オブジェクト（一時テーブルと一時テーブル上のインデックス）を格納するテーブル空間（複数可）を指定します。
大規模データ集合のソートなどを目的とした一時ファイルもまた、このテーブル空間（複数可）に作成されます。
       </para>

       <para>
<!--
        The value is a list of names of tablespaces.  When there is more than
        one name in the list, <productname>PostgreSQL</productname> chooses a random
        member of the list each time a temporary object is to be created;
        except that within a transaction, successively created temporary
        objects are placed in successive tablespaces from the list.
        If the selected element of the list is an empty string,
        <productname>PostgreSQL</productname> will automatically use the default
        tablespace of the current database instead.
-->
この値はテーブル空間名のリストです。
リストに複数の名前が存在する場合、一時オブジェクトが作成される度に<productname>PostgreSQL</productname>は無作為にリストから要素を選択します。
トランザクションの内側は例外で、連続して作成される一時オブジェクトはそのリストで連続するテーブル空間に格納されます。
リスト内の選択された要素が空文字列だった場合、<productname>PostgreSQL</productname>は自動的に現在のデータベースのデフォルトのテーブル空間を代わりに使用します。
       </para>

       <para>
<!--
        When <varname>temp_tablespaces</varname> is set interactively, specifying a
        nonexistent tablespace is an error, as is specifying a tablespace for
        which the user does not have <literal>CREATE</literal> privilege.  However,
        when using a previously set value, nonexistent tablespaces are
        ignored, as are tablespaces for which the user lacks
        <literal>CREATE</literal> privilege.  In particular, this rule applies when
        using a value set in <filename>postgresql.conf</filename>.
-->
<varname>temp_tablespaces</varname>を対話式に設定する場合、存在しないテーブル空間を指定するとエラーになります。
ユーザが<literal>CREATE</literal>権限を持たないテーブル空間を指定した場合も同様です。
しかし事前に設定された値を使用する場合、存在しないテーブル空間は無視されます。
ユーザが<literal>CREATE</literal>権限を持たないテーブル空間も同様です。
具体的には、この規則は<filename>postgresql.conf</filename>内で設定した値を使用する場合に適用されます。
       </para>

       <para>
<!--
        The default value is an empty string, which results in all temporary
        objects being created in the default tablespace of the current
        database.
-->
デフォルト値は空文字列です。
この結果、すべての一時オブジェクトは現在のデータベースのデフォルトのテーブル空間内に作成されます。
       </para>

       <para>
<!--
        See also <xref linkend="guc-default-tablespace"/>.
-->
<xref linkend="guc-default-tablespace"/>も参照してください
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-check-function-bodies" xreflabel="check_function_bodies">
      <term><varname>check_function_bodies</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>check_function_bodies</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>check_function_bodies</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter is normally on. When set to <literal>off</literal>, it
        disables validation of the routine body string during <xref
        linkend="sql-createfunction"/> and <xref
        linkend="sql-createprocedure"/>.  Disabling validation avoids side
        effects of the validation process, in particular preventing false
        positives due to problems such as forward references.
        Set this parameter
        to <literal>off</literal> before loading functions on behalf of other
        users; <application>pg_dump</application> does so automatically.
-->
このパラメータは通常オンです。
<literal>off</literal>に設定すると、<xref linkend="sql-createfunction"/>と<xref linkend="sql-createprocedure"/>の実行中の関数本体文字列の妥当性検証を無効にします。
妥当性検証を無効にするとその妥当性検証処理の副作用を避け、前方参照による問題から起こる偽陽性(false positive)を避けることができます。
関数をロードする前にこのパラメータを他のユーザとして<literal>off</literal>にします。
<application>pg_dump</application>はこれを自動的に行います。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-transaction-isolation" xreflabel="default_transaction_isolation">
      <term><varname>default_transaction_isolation</varname> (<type>enum</type>)
      <indexterm>
       <primary>transaction isolation level</primary>
       <secondary>setting default</secondary>
      </indexterm>
      <indexterm>
       <primary>トランザクション分離レベル</primary>
       <secondary>デフォルト設定</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_isolation</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_isolation</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Each SQL transaction has an isolation level, which can be
        either <quote>read uncommitted</quote>, <quote>read
        committed</quote>, <quote>repeatable read</quote>, or
        <quote>serializable</quote>.  This parameter controls the
        default isolation level of each new transaction. The default
        is <quote>read committed</quote>.
-->
SQLトランザクションはそれぞれ、<quote>read uncommitted</quote>、<quote>read committed</quote>、<quote>repeatable read</quote>、または<quote>serializable</quote>のいずれかの分離レベルを持ちます。
このパラメータは各新規トランザクションのデフォルトの分離レベルを制御します。
デフォルトは<quote>read committed</quote>です。
       </para>

       <para>
<!--
        Consult <xref linkend="mvcc"/> and <xref
        linkend="sql-set-transaction"/> for more information.
-->
より詳細は <xref linkend="mvcc"/> および <xref linkend="sql-set-transaction"/> を調べてください。
       </para>
      </listitem>
     </varlistentry>

<!-- split-config2-end -->
<!-- split-config3-start -->
     <varlistentry id="guc-default-transaction-read-only" xreflabel="default_transaction_read_only">
      <term><varname>default_transaction_read_only</varname> (<type>boolean</type>)
      <indexterm>
       <primary>read-only transaction</primary>
       <secondary>setting default</secondary>
      </indexterm>
      <indexterm>
       <primary>読み取り専用トランザクション</primary>
       <secondary>デフォルト設定</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_read_only</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_read_only</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        A read-only SQL transaction cannot alter non-temporary tables.
        This parameter controls the default read-only status of each new
        transaction. The default is <literal>off</literal> (read/write).
-->
読み取り専用のSQLトランザクションでは、非一時的テーブルを変更することができません。
このパラメータは、各新規トランザクションのデフォルトの読み取りのみ状況を制御します。
デフォルト<literal>off</literal>（読み書き）です。
       </para>

       <para>
<!--
        Consult <xref linkend="sql-set-transaction"/> for more information.
-->
より詳細な情報は<xref linkend="sql-set-transaction"/>を調べてください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-transaction-deferrable" xreflabel="default_transaction_deferrable">
      <term><varname>default_transaction_deferrable</varname> (<type>boolean</type>)
      <indexterm>
       <primary>deferrable transaction</primary>
       <secondary>setting default</secondary>
      </indexterm>
      <indexterm>
       <primary>遅延トランザクション</primary>
       <secondary>デフォルト設定</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_deferrable</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_deferrable</varname> 設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When running at the <literal>serializable</literal> isolation level,
        a deferrable read-only SQL transaction may be delayed before
        it is allowed to proceed.  However, once it begins executing
        it does not incur any of the overhead required to ensure
        serializability; so serialization code will have no reason to
        force it to abort because of concurrent updates, making this
        option suitable for long-running read-only transactions.
-->
<literal>シリアライザブル</literal>分離レベルで運用されている場合、繰り延べ読み取り専用SQLトランザクションは、その処理の許可の前に遅延されることがあります。
しかし、ひとたび処理が開始されるとシリアライザブル可能性を保障するために必要ないかなるオーバーヘッドも発生させません。
従って、シリアル化（直列化）のコードは、このオプションを長期間にわたる読み取り専用トランザクションに対して適切な処置と位置づけ、同時実行の更新の観点から中断を強制する理由はありません。
        </para>

        <para>
<!--
        This parameter controls the default deferrable status of each
        new transaction.  It currently has no effect on read-write
        transactions or those operating at isolation levels lower
        than <literal>serializable</literal>. The default is <literal>off</literal>.
-->
このパラメータはそれぞれの新規トランザクションのデフォルトでの繰り延べ状態を制御します。
現時点では、読み取り専用トランザクション、または<literal>シリアライザブル</literal>より低位の分離レベルの運用に対して効果はありません。
デフォルトは<literal>off</literal>です。
       </para>

       <para>
<!--
        Consult <xref linkend="sql-set-transaction"/> for more information.
-->
より詳細は<xref linkend="sql-set-transaction"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-transaction-isolation" xreflabel="transaction_isolation">
      <term><varname>transaction_isolation</varname> (<type>enum</type>)
      <indexterm>
       <primary>transaction isolation level</primary>
      </indexterm>
      <indexterm>
       <primary><varname>transaction_isolation</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>transaction_isolation</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter reflects the current transaction's isolation level.
        At the beginning of each transaction, it is set to the current value
        of <xref linkend="guc-default-transaction-isolation"/>.
        Any subsequent attempt to change it is equivalent to a <xref
        linkend="sql-set-transaction"/> command.
-->
このパラメータは現在のトランザクションの隔離レベルを反映します。
個々のトランザクションの開始時、これに<xref linkend="guc-default-transaction-isolation"/>の現在の値が設定されます。
その後のこの変数の値を変更する試みは、<xref linkend="sql-set-transaction"/>と同等です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-transaction-read-only" xreflabel="transaction_read_only">
      <term><varname>transaction_read_only</varname> (<type>boolean</type>)
      <indexterm>
       <primary>read-only transaction</primary>
      </indexterm>
      <indexterm>
       <primary><varname>transaction_read_only</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>transaction_read_only</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter reflects the current transaction's read-only status.
        At the beginning of each transaction, it is set to the current value
        of <xref linkend="guc-default-transaction-read-only"/>.
        Any subsequent attempt to change it is equivalent to a <xref
        linkend="sql-set-transaction"/> command.
-->
このパラメータは現在のトランザクションの読み込み専用状態を反映します。
個々のトランザクションの開始時、これに<xref linkend="guc-default-transaction-read-only"/>の現在の値が設定されます。
その後のこの変数の値を変更する試みは、<xref linkend="sql-set-transaction"/>と同等です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-transaction-deferrable" xreflabel="transaction_deferrable">
      <term><varname>transaction_deferrable</varname> (<type>boolean</type>)
      <indexterm>
       <primary>deferrable transaction</primary>
      </indexterm>
      <indexterm>
       <primary><varname>transaction_deferrable</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>transaction_deferrable</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter reflects the current transaction's deferrability status.
        At the beginning of each transaction, it is set to the current value
        of <xref linkend="guc-default-transaction-deferrable"/>.
        Any subsequent attempt to change it is equivalent to a <xref
        linkend="sql-set-transaction"/> command.
-->
このパラメータは現在のトランザクションの延期状態(deferrable status)を反映します。
個々のトランザクションの開始時、これに<xref linkend="guc-default-transaction-deferrable"/>の現在の値が設定されます。
その後のこの変数の値を変更する試みは、<xref linkend="sql-set-transaction"/>と同等です。
       </para>
      </listitem>
     </varlistentry>


     <varlistentry id="guc-session-replication-role" xreflabel="session_replication_role">
      <term><varname>session_replication_role</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>session_replication_role</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>session_replication_role</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls firing of replication-related triggers and rules for the
        current session.
        Possible values are <literal>origin</literal> (the default),
        <literal>replica</literal> and <literal>local</literal>.
        Setting this parameter results in discarding any previously cached
        query plans.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
現在のセッションに対するレプリケーション関連のトリガおよびルールの起動を制御します。
使用可能な値は、<literal>origin</literal>(デフォルト)、<literal>replica</literal>および<literal>local</literal>です。
このパラメータを設定すると、以前にキャッシュされた問い合わせ計画が破棄されます。
スーパーユーザおよび適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更できます。
       </para>

       <para>
<!--
        The intended use of this setting is that logical replication systems
        set it to <literal>replica</literal> when they are applying replicated
        changes.  The effect of that will be that triggers and rules (that
        have not been altered from their default configuration) will not fire
        on the replica.  See the <link linkend="sql-altertable"><command>ALTER TABLE</command></link> clauses
        <literal>ENABLE TRIGGER</literal> and <literal>ENABLE RULE</literal>
        for more information.
-->
この設定の使い方の趣旨としては、レプリケーションされた更新を適用する際に論理レプリケーションシステムが<literal>replica</literal>に設定するということです。
このことによる効果としては、（デフォルトの設定から変更されていない）トリガとルールはレプリカ上では起動されない、ということです。
更なる情報は、<link linkend="sql-altertable"><command>ALTER TABLE</command></link>節の<literal>ENABLE TRIGGER</literal>と<literal>ENABLE RULE</literal>をご覧ください。
       </para>

       <para>
<!--
        PostgreSQL treats the settings <literal>origin</literal> and
        <literal>local</literal> the same internally.  Third-party replication
        systems may use these two values for their internal purposes, for
        example using <literal>local</literal> to designate a session whose
        changes should not be replicated.
-->
PostgreSQLは<literal>origin</literal>と<literal>local</literal>の設定を内部的に同じものとして扱います。
サードパーティのレプリケーションシステムは内部的な目的、たとえば<literal>local</literal>を使ってレプリケーションされるべきでないセッションを指定するためにこれら2つの値を使って構いません。
       </para>

       <para>
<!--
        Since foreign keys are implemented as triggers, setting this parameter
        to <literal>replica</literal> also disables all foreign key checks,
        which can leave data in an inconsistent state if improperly used.
-->
外部キーはトリガとして実装されているため、このパラメータを<literal>replica</literal>とすることによって同時にすべての外部キー検査が無効になります。
このことにより、正しく使用しないと、データを不整合状態にしてしまう可能性があります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-statement-timeout" xreflabel="statement_timeout">
      <term><varname>statement_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>statement_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>statement_timeout</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Abort any statement that takes more than the specified amount of time.
        If <varname>log_min_error_statement</varname> is set
        to <literal>ERROR</literal> or lower, the statement that timed out
        will also be logged.
        If this value is specified without units, it is taken as milliseconds.
        A value of zero (the default) disables the timeout.
-->
コマンドがクライアントからサーバに届いた時から数えて、実行時間が指定された時間を越えた文を停止します。
<varname>log_min_error_statement</varname>が<literal>ERROR</literal>もしくはそれ以下に設定されている場合は、タイムアウトした文はログに書き込まれます。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
値がゼロ（デフォルト）の場合、これを無効にします。
       </para>

       <para>
<!--
        The timeout is measured from the time a command arrives at the
        server until it is completed by the server.  If multiple SQL
        statements appear in a single simple-query message, the timeout
        is applied to each statement separately.
        (<productname>PostgreSQL</productname> versions before 13 usually
        treated the timeout as applying to the whole query string.)
        In extended query protocol, the timeout starts running when any
        query-related message (Parse, Bind, Execute, Describe) arrives, and
        it is canceled by completion of an Execute or Sync message.
-->
タイムアウトは、コマンドがサーバに到着したときから、サーバがそのコマンドの実行を完了するまでを基準にします。
複数のSQL文が一つの単純問い合わせメッセージに含まれる場合、タイムアウトは個々のSQL文に別々に適用されます。
（13よりも前の<productname>PostgreSQL</productname>バージョンでは、通常SQL文字列全体に対してタイムアウトが適用されていました。）
拡張問い合わせでは、タイムアウトは問い合わせに関するメッセージ（Parse、Bind、Execute、Describe）が到着したときに開始し、ExecuteあるいはSyncメッセージが完了した時にキャンセルされます。
       </para>

       <para>
<!--
        Setting <varname>statement_timeout</varname> in
        <filename>postgresql.conf</filename> is not recommended because it would
        affect all sessions.
-->
すべてのセッションに影響することがあるので、<filename>postgresql.conf</filename>内で<varname>statement_timeout</varname>を設定することは推奨されません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-transaction-timeout" xreflabel="transaction_timeout">
      <term><varname>transaction_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>transaction_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>transaction_timeout</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Terminate any session that spans longer than the specified amount of
        time in a transaction. The limit applies both to explicit transactions
        (started with <command>BEGIN</command>) and to an implicitly started
        transaction corresponding to a single statement.
        If this value is specified without units, it is taken as milliseconds.
        A value of zero (the default) disables the timeout.
-->
トランザクションが指定された時間を超えていた場合に、このセッションを終了します。
この時間制限は、明示的なトランザクション（<command>BEGIN</command>で開始）と、単一の文に対応する暗黙的に開始されたトランザクションの両方に適用されます。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
値がゼロ（デフォルト）の場合はタイムアウトは無効になります。
       </para>

       <para>
<!--
        If <varname>transaction_timeout</varname> is shorter or equal to
        <varname>idle_in_transaction_session_timeout</varname> or <varname>statement_timeout</varname>
        then the longer timeout is ignored.
-->
<varname>transaction_timeout</varname>が<varname>idle_in_transaction_session_timeout</varname>または<varname>statement_timeout</varname>より短いか、等しい場合、長い方のタイムアウトは無視されます。
       </para>

       <para>
<!--
        Setting <varname>transaction_timeout</varname> in
        <filename>postgresql.conf</filename> is not recommended because it would
        affect all sessions.
-->
すべてのセッションに影響することがあるので、<filename>postgresql.conf</filename>内で<varname>transaction_timeout</varname>を設定することは推奨されません。
       </para>

       <note>
        <para>
<!--
         Prepared transactions are not subject to this timeout.
-->
準備されたトランザクションには、このタイムアウトは影響ありません。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lock-timeout" xreflabel="lock_timeout">
      <term><varname>lock_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>lock_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>lock_timeout</varname> 設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Abort any statement that waits longer than the specified amount of
        time while attempting to acquire a lock on a table, index,
        row, or other database object.  The time limit applies separately to
        each lock acquisition attempt.  The limit applies both to explicit
        locking requests (such as <command>LOCK TABLE</command>, or <command>SELECT
        FOR UPDATE</command> without <literal>NOWAIT</literal>) and to implicitly-acquired
        locks.
        If this value is specified without units, it is taken as milliseconds.
        A value of zero (the default) disables the timeout.
-->
テーブル、インデックス、行、またはその他のデータベースオブジェクトに対してロック獲得を試みている最中、指定された時間を超えて待機するいかなる命令も停止されます。
時間制限はそれぞれのロック取得の試みに対し個別に適用されます。
制限は明示的ロック要求（例えば<command>LOCK TABLE</command>、または<command>SELECT FOR UPDATE</command> without <literal>NOWAIT</literal>など）および暗黙的に取得されるロックに適用されます。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
値ゼロ（デフォルト）はこの機能を無効にします。
       </para>

       <para>
<!--
        Unlike <varname>statement_timeout</varname>, this timeout can only occur
        while waiting for locks.  Note that if <varname>statement_timeout</varname>
        is nonzero, it is rather pointless to set <varname>lock_timeout</varname> to
        the same or larger value, since the statement timeout would always
        trigger first.  If <varname>log_min_error_statement</varname> is set to
        <literal>ERROR</literal> or lower, the statement that timed out will be
        logged.
-->
<varname>statement_timeout</varname>と異なり、このタイムアウトはロックを待機しているときのみ発生します。
命令によるタイムアウトは常に第一に起動されるため、もし<varname>statement_timeout</varname>が非ゼロであれば<varname>lock_timeout</varname>を同一、もしくはより大きい値に設定するのは的を射ていません。
<varname>log_min_error_statement</varname>が<literal>ERROR</literal>またはそれより低く設定されると、時間制限を超えた命令はログに記録されます。
       </para>

       <para>
<!--
        Setting <varname>lock_timeout</varname> in
        <filename>postgresql.conf</filename> is not recommended because it would
        affect all sessions.
-->
<varname>lock_timeout</varname>を<filename>postgresql.conf</filename>にて設定することは、すべてのセッションに影響を与える可能性があるため推奨されません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-idle-in-transaction-session-timeout" xreflabel="idle_in_transaction_session_timeout">
      <term><varname>idle_in_transaction_session_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>idle_in_transaction_session_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>idle_in_transaction_session_timeout</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Terminate any session that has been idle (that is, waiting for a
        client query) within an open transaction for longer than the
        specified amount of time.
        If this value is specified without units, it is taken as milliseconds.
        A value of zero (the default) disables the timeout.
-->
開いているトランザクションが、指定された時間を超えてアイドルだった場合（つまりクライアントからの問い合わせを待っている場合）に、セッションを終了します。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
値がゼロ（デフォルト）の場合はタイムアウトは無効になります。
       </para>

       <para>
<!--
        This option can be used to ensure that idle sessions do not hold
        locks for an unreasonable amount of time.  Even when no significant
        locks are held, an open transaction prevents vacuuming away
        recently-dead tuples that may be visible only to this transaction;
        so remaining idle for a long time can contribute to table bloat.
        See <xref linkend="routine-vacuuming"/> for more details.
-->
このオプションにより、アイドル状態のセッションが不合理なほど長い時間ロックを保持することを防ぐことができます。
強いロックが保持されていなくても、開いたトランザクションは、自分にしか可視でない、最近無効になったタプルをvacuumが掃除するのを妨げます。
ですから、長時間アイドルのままになっていると、テーブルの溢れにつながります。
更なる詳細は<xref linkend="routine-vacuuming"/>を見てください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-idle-session-timeout" xreflabel="idle_session_timeout">
      <term><varname>idle_session_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>idle_session_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>idle_session_timeout</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Terminate any session that has been idle (that is, waiting for a
        client query), but not within an open transaction, for longer than
        the specified amount of time.
        If this value is specified without units, it is taken as milliseconds.
        A value of zero (the default) disables the timeout.
-->
トランザクションが開いた状態ではなく、指定した時間よりも長い時間アイドル（すなわちクライアントからの問い合わせを待っている）であるセッションを終了させます。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
値ゼロ（デフォルトです）はタイムアウトを無効にします。
       </para>

       <para>
<!--
        Unlike the case with an open transaction, an idle session without a
        transaction imposes no large costs on the server, so there is less
        need to enable this timeout
        than <varname>idle_in_transaction_session_timeout</varname>.
-->
開いたトランザクションの場合と違って、トランザクションを伴わないアイドルなセッションは、サーバに対して大きなコストにはなりません。
ですからこのタイムアウトを有効にする必要性は、<varname>idle_in_transaction_session_timeout</varname>よりも低いと言えます。
       </para>

       <para>
<!--
        Be wary of enforcing this timeout on connections made through
        connection-pooling software or other middleware, as such a layer
        may not react well to unexpected connection closure.  It may be
        helpful to enable this timeout only for interactive sessions,
        perhaps by applying it only to particular users.
-->
コネクションプーリングソフトウェアその他のミドルウェアを通じたコネクションに対してこのタイムアウトを強制することには慎重になってください。
そのようなレイヤは、突然のコネクション切断に対して好ましくない振る舞いをするかもしれないからです。
おそらく特定のユーザに対してのみ適用し、対話形式のセッションに対してのみこのタイムアウトを有効にするのが助けになるかもしれません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bytea-output" xreflabel="bytea_output">
      <term><varname>bytea_output</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>bytea_output</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>bytea_output</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the output format for values of type <type>bytea</type>.
        Valid values are <literal>hex</literal> (the default)
        and <literal>escape</literal> (the traditional PostgreSQL
        format).  See <xref linkend="datatype-binary"/> for more
        information.  The <type>bytea</type> type always
        accepts both formats on input, regardless of this setting.
-->
<type>bytea</type>型の値の出力形式を設定します。
有効な値は<literal>hex</literal>（デフォルト）、および<literal>escape</literal>（PostgreSQLの伝統的な書式）です。
より詳細は<xref linkend="datatype-binary"/>を参照してください。
<type>bytea</type>型は常にこの設定に係わらず、入力時に双方の書式を受け付けます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-xmlbinary" xreflabel="xmlbinary">
      <term><varname>xmlbinary</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>xmlbinary</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>xmlbinary</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets how binary values are to be encoded in XML.  This applies
        for example when <type>bytea</type> values are converted to
        XML by the functions <function>xmlelement</function> or
        <function>xmlforest</function>.  Possible values are
        <literal>base64</literal> and <literal>hex</literal>, which
        are both defined in the XML Schema standard.  The default is
        <literal>base64</literal>.  For further information about
        XML-related functions, see <xref linkend="functions-xml"/>.
-->
バイナリデータをXMLに符号化する方法を設定します。
例えばこれは、<function>xmlelement</function>や<function>xmlforest</function>関数で<type>bytea</type>値をXMLに変換する際に適用されます。
取り得る値は<literal>base64</literal>と<literal>hex</literal>です。
どちらもXMLスキーマ標準で定義されています。
デフォルトは<literal>base64</literal>です。
XMLに関連した関数については<xref linkend="functions-xml"/>を参照してください。
       </para>

       <para>
<!--
        The actual choice here is mostly a matter of taste,
        constrained only by possible restrictions in client
        applications.  Both methods support all possible values,
        although the hex encoding will be somewhat larger than the
        base64 encoding.
-->
実のところこの選択はほとんど趣味の問題で、クライアントアプリケーションで起こり得る制限のみに制約されます。
どちらの方法もすべての値をサポートしますが、hex符号化方式はbase64符号化方式より少し大きくなります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-xmloption" xreflabel="xmloption">
      <term><varname>xmloption</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>xmloption</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>xmloption</varname>設定パラメータ</primary>
      </indexterm>
      <indexterm>
       <primary><varname>SET XML OPTION</varname></primary>
      </indexterm>
      <indexterm>
       <primary>XML option</primary>
      </indexterm>
      <indexterm>
       <primary>XMLオプション</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets whether <literal>DOCUMENT</literal> or
        <literal>CONTENT</literal> is implicit when converting between
        XML and character string values.  See <xref
        linkend="datatype-xml"/> for a description of this.  Valid
        values are <literal>DOCUMENT</literal> and
        <literal>CONTENT</literal>.  The default is
        <literal>CONTENT</literal>.
-->
XMLと文字列値との変換時に<literal>DOCUMENT</literal>とするか<literal>CONTENT</literal>とするかを設定します。
この説明については<xref linkend="datatype-xml"/>を参照してください。
有効な値は<literal>DOCUMENT</literal>と<literal>CONTENT</literal>です。
デフォルトは<literal>CONTENT</literal>です。
       </para>

       <para>
<!--
        According to the SQL standard, the command to set this option is
-->
標準SQLに従うと、このオプションを設定するコマンドは以下のようになります。
<synopsis>
SET XML OPTION { DOCUMENT | CONTENT };
</synopsis>
<!--
        This syntax is also available in PostgreSQL.
-->
この構文はPostgreSQLでも使用可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-gin-pending-list-limit" xreflabel="gin_pending_list_limit">
      <term><varname>gin_pending_list_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>gin_pending_list_limit</varname></primary>
       <secondary>configuration parameter</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>gin_pending_list_limit</varname></primary>
       <secondary>設定パラメータ</secondary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the maximum size of a GIN index's pending list, which is used
        when <literal>fastupdate</literal> is enabled. If the list grows
        larger than this maximum size, it is cleaned up by moving
        the entries in it to the index's main GIN data structure in bulk.
        If this value is specified without units, it is taken as kilobytes.
        The default is four megabytes (<literal>4MB</literal>). This setting
        can be overridden for individual GIN indexes by changing
        index storage parameters.
         See <xref linkend="gin-fast-update"/> and <xref linkend="gin-tips"/>
         for more information.
-->
<literal>fastupdate</literal>が有効なときに使用されるGINインデックスのペンディングリストの最大サイズを設定します。
リストがこの設定値よりも大きくなったら、エントリをインデックスのGINの主データ構造に一括転送してリストはクリアされます。
この値が単位なしで指定された場合は、キロバイト単位であるとみなします。
デフォルトは4メガバイト(<literal>4MB</literal>)です。
この設定は、個々のGINインデックスに対してインデックスストレージパラメータを変更することにより、上書きできます。
更なる情報については、<xref linkend="gin-fast-update"/>と<xref linkend="gin-tips"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-createrole-self-grant" xreflabel="createrole_self_grant">
      <term><varname>createrole_self_grant</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>createrole_self_grant</varname></primary>
       <secondary>configuration parameter</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>createrole_self_grant</varname></primary>
       <secondary>設定パラメータ</secondary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If a user who has <literal>CREATEROLE</literal> but not
        <literal>SUPERUSER</literal> creates a role, and if this
        is set to a non-empty value, the newly-created role will be granted
        to the creating user with the options specified. The value must be
        <literal>set</literal>, <literal>inherit</literal>, or a
        comma-separated list of these. The default value is an empty string,
        which disables the feature.
-->
<literal>CREATEROLE</literal>を持ち、<literal>SUPERUSER</literal>を持たないユーザがロールを作成し、これが空でない値に設定されている場合、新しく作成されたロールは、この指定されたオプションを持ち、ロールを作成したユーザに付与されます。
値は、<literal>set</literal>、<literal>inherit</literal>、またはこれらのリストをカンマで区切ったものである必要があります。
デフォルト値は空の文字列であるため、この機能は無効になります。
       </para>
       <para>
<!--
        The purpose of this option is to allow a <literal>CREATEROLE</literal>
        user who is not a superuser to automatically inherit, or automatically
        gain the ability to <literal>SET ROLE</literal> to, any created users.
        Since a <literal>CREATEROLE</literal> user is always implicitly granted
        <literal>ADMIN OPTION</literal> on created roles, that user could
        always execute a <literal>GRANT</literal> statement that would achieve
        the same effect as this setting. However, it can be convenient for
        usability reasons if the grant happens automatically. A superuser
        automatically inherits the privileges of every role and can always
        <literal>SET ROLE</literal> to any role, and this setting can be used
        to produce a similar behavior for <literal>CREATEROLE</literal> users
        for users which they create.
-->
このオプションの目的は、<literal>CREATEROLE</literal>が許可されているスーパーユーザではないユーザが、作成されたユーザを自動的に継承するか、または<literal>SET ROLE</literal>権限を自動的に取得できるようにすることです。
<literal>CREATEROLE</literal>ユーザは、作成されたロールに対して常に暗黙的に<literal>ADMIN OPTION</literal>が付与されるため、そのユーザは、この設定と同じ効果を達成する<literal>GRANT</literal>文を常に実行できます。
しかし、権限付与が自動的に行われることは、使用上の理由から便利です。
スーパーユーザは、すべてのロールの権限を自動的に継承し、どのロールに対しても常に<literal>SET ROLE</literal>できます。
また、この設定を使用して、<literal>CREATEROLE</literal>ユーザが作成したユーザに対して同様の動作を生成できます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-event-triggers" xreflabel="event_triggers">
      <term><varname>event_triggers</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>event_triggers</varname></primary>
       <secondary>configuration parameter</secondary>
     </indexterm>
      <indexterm>
       <primary><varname>event_triggers</varname></primary>
       <secondary>設定パラメータ</secondary>
      </indexterm>
     </term>
     <listitem>
      <para>
<!--
       Allow temporarily disabling execution of event triggers in order to
       troubleshoot and repair faulty event triggers. All event triggers will
       be disabled by setting it to <literal>false</literal>. Setting the value
       to <literal>true</literal> allows all event triggers to fire, this
       is the default value. Only superusers and users with the appropriate
       <literal>SET</literal> privilege can change this setting.
-->
イベントトリガの実行を一時的に無効化して、障害のあるイベントトリガのトラブルシューティングおよび修復を可能にします。
<literal>false</literal>に設定することですべてのイベントトリガが無効になります。
値を<literal>true</literal>に設定すると、すべてのイベントトリガが起動します。
これがデフォルト値です。
スーパーユーザおよび適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更できます。
      </para>
     </listitem>
     </varlistentry>

     <varlistentry id="guc-restrict-nonsystem-relation-kind" xreflabel="restrict_nonsystem_relation_kind">
      <term><varname>restrict_nonsystem_relation_kind</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>restrict_nonsystem_relation_kind</varname></primary>
       <secondary>configuration parameter</secondary>
     </indexterm>
      <indexterm>
       <primary><varname>restrict_nonsystem_relation_kind</varname></primary>
       <secondary>設定パラメータ</secondary>
      </indexterm>
     </term>
     <listitem>
      <para>
<!--
       Set relation kinds for which access to non-system relations is prohibited.
       The value takes the form of a comma-separated list of relation kinds.
       Currently, the supported relation kinds are <literal>view</literal> and
       <literal>foreign-table</literal>.
-->
非システムリレーションへのアクセスが禁止されているリレーションの種類を設定します。
値は、カンマで区切られたリレーションの種類のリストのフォームを取ります。
現在サポートされているリレーション種別は<literal>view</literal>と<literal>foreign-table</literal>です。
      </para>
     </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
     <sect2 id="runtime-config-client-format">
<!--
     <title>Locale and Formatting</title>
-->
     <title>ロケールと書式設定</title>

     <variablelist>

     <varlistentry id="guc-datestyle" xreflabel="DateStyle">
      <term><varname>DateStyle</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>DateStyle</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>DateStyle</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the display format for date and time values, as well as the
        rules for interpreting ambiguous date input values. For
        historical reasons, this variable contains two independent
        components: the output format specification (<literal>ISO</literal>,
        <literal>Postgres</literal>, <literal>SQL</literal>, or <literal>German</literal>)
        and the input/output specification for year/month/day ordering
        (<literal>DMY</literal>, <literal>MDY</literal>, or <literal>YMD</literal>). These
        can be set separately or together. The keywords <literal>Euro</literal>
        and <literal>European</literal> are synonyms for <literal>DMY</literal>; the
        keywords <literal>US</literal>, <literal>NonEuro</literal>, and
        <literal>NonEuropean</literal> are synonyms for <literal>MDY</literal>. See
        <xref linkend="datatype-datetime"/> for more information. The
        built-in default is <literal>ISO, MDY</literal>, but
        <application>initdb</application> will initialize the
        configuration file with a setting that corresponds to the
        behavior of the chosen <varname>lc_time</varname> locale.
-->
日付時刻値の表示書式を設定し、曖昧な日付入力の解釈規則を設定します。
歴史的な理由により、この変数には2つの独立した要素が含まれています。
出力書式指定（<literal>ISO</literal>、<literal>Postgres</literal>、<literal>SQL</literal>、<literal>German</literal>）と年/月/日の順序の入出力指定（<literal>DMY</literal>、<literal>MDY</literal>、<literal>YMD</literal>）です。
これらは分けて設定することもまとめて設定することもできます。
<literal>Euro</literal>および<literal>European</literal>キーワードは<literal>DMY</literal>の同義語であり、<literal>US</literal>、<literal>NonEuro</literal>、<literal>NonEuropean</literal>は<literal>MDY</literal>の同義語です。
詳細は<xref linkend="datatype-datetime"/>を参照してください。
組み込みのデフォルトは<literal>ISO, MDY</literal>ですが、<application>initdb</application>により、選択された<varname>lc_time</varname>ロケールの動作に対応した設定で設定ファイルが初期化されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-intervalstyle" xreflabel="IntervalStyle">
      <term><varname>IntervalStyle</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>IntervalStyle</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>IntervalStyle</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the display format for interval values.
        The value <literal>sql_standard</literal> will produce
        output matching <acronym>SQL</acronym> standard interval literals.
        The value <literal>postgres</literal> (which is the default) will produce
        output matching <productname>PostgreSQL</productname> releases prior to 8.4
        when the <xref linkend="guc-datestyle"/>
        parameter was set to <literal>ISO</literal>.
        The value <literal>postgres_verbose</literal> will produce output
        matching <productname>PostgreSQL</productname> releases prior to 8.4
        when the <varname>DateStyle</varname>
        parameter was set to non-<literal>ISO</literal> output.
        The value <literal>iso_8601</literal> will produce output matching the time
        interval <quote>format with designators</quote> defined in section
        4.4.3.2 of ISO 8601.
-->
間隔の値の表示形式を設定します。<literal>sql_standard</literal>値は、標準<acronym>SQL</acronym>間隔リテラルに一致する出力を生成します。
（デフォルトの）値<literal>postgres</literal>は、<xref linkend="guc-datestyle"/>パラメータが<literal>ISO</literal>に設定されている場合、リリース8.4以前の<productname>PostgreSQL</productname>に一致する出力を生成します。
値<literal>postgres_verbose</literal>は、<varname>DateStyle</varname>パラメータが非<literal>ISO</literal>出力に設定されている場合、リリース8.4以前の<productname>PostgreSQL</productname>に一致する出力を生成します。
値<literal>iso_8601</literal>は、ISO 8601の4.4.3.2節で定義されている時間間隔<quote>format with designators</quote>に一致する出力を生成します。
       </para>
       <para>
<!--
        The <varname>IntervalStyle</varname> parameter also affects the
        interpretation of ambiguous interval input.  See
        <xref linkend="datatype-interval-input"/> for more information.
-->
また<varname>IntervalStyle</varname>パラメータはあいまいに入力された時間間隔の解釈に影響を与えます。
詳細については<xref linkend="datatype-interval-input"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-timezone" xreflabel="TimeZone">
      <term><varname>TimeZone</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>TimeZone</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>TimeZone</varname>設定パラメータ</primary>
      </indexterm>
      <indexterm><primary>time zone</primary></indexterm>
      <indexterm><primary>時間帯</primary></indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the time zone for displaying and interpreting time stamps.
        The built-in default is <literal>GMT</literal>, but that is typically
        overridden in <filename>postgresql.conf</filename>; <application>initdb</application>
        will install a setting there corresponding to its system environment.
        See <xref linkend="datatype-timezones"/> for more information.
-->
表示用およびタイムスタンプ解釈用の時間帯を設定します。
組み込まれているデフォルトは<literal>GMT</literal>ですが、通常は<filename>postgresql.conf</filename>により上書きされます。<application>initdb</application>によりこれらと関連した設定をシステム環境にインストールされます。
詳細は<xref linkend="datatype-timezones"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-timezone-abbreviations" xreflabel="timezone_abbreviations">
      <term><varname>timezone_abbreviations</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>timezone_abbreviations</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>timezone_abbreviations</varname>設定パラメータ</primary>
      </indexterm>
      <indexterm><primary>time zone names</primary></indexterm>
      <indexterm><primary>時間帯名</primary></indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the collection of additional time zone abbreviations that
        will be accepted by the server for datetime input (beyond any
        abbreviations defined by the current <varname>TimeZone</varname>
        setting).  The default is <literal>'Default'</literal>,
        which is a collection that works in most of the world; there are
        also <literal>'Australia'</literal> and <literal>'India'</literal>,
        and other collections can be defined for a particular installation.
        See <xref linkend="datetime-config-files"/> for more information.
-->
《マッチ度[71.624266]》サーバで日付時刻の入力として受付け可能となる時間帯省略形の集合を設定します。
デフォルトは<literal>'Default'</literal>です。
これはほぼ全世界で通じる集合です。
また、<literal>Australia</literal>、<literal>India</literal>、その他特定のインストレーションで定義可能な集合が存在します。
詳細は<xref linkend="datetime-config-files"/>を参照してください。
《機械翻訳》(サーバ<varname>タイムゾーン</varname>の設定で定義された略語を超えてその現在で受け入れられる日時入力用の追加タイムゾーン略語のコレクションを設定します。
デフォルトは<literal>'Default'</literal>です。
これは世界のほとんどのインストールで機能するコレクションです。
また、特定の地域に対して<literal>'Australia'</literal>および<literal>'India'</literal>などの他のコレクションも定義できます。
詳細は<xref linkend="datetime-config-files"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-extra-float-digits" xreflabel="extra_float_digits">
      <term><varname>extra_float_digits</varname> (<type>integer</type>)
      <indexterm>
       <primary>significant digits</primary>
      </indexterm>
      <indexterm>
       <primary>有効数字</primary>
      </indexterm>
      <indexterm>
       <primary>floating-point</primary>
       <secondary>display</secondary>
      </indexterm>
      <indexterm>
       <primary>浮動小数点</primary>
       <secondary>表示</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>extra_float_digits</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>extra_float_digits</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter adjusts the number of digits used for textual output of
        floating-point values, including <type>float4</type>, <type>float8</type>,
        and geometric data types.
-->
このパラメータは、<type>float4</type>、<type>float8</type>、幾何データ型などにおいて、浮動小数点数値のテキスト形式の出力で使用される桁数を調整します。
       </para>
       <para>
<!--
        If the value is 1 (the default) or above, float values are output in
        shortest-precise format; see <xref linkend="datatype-float"/>. The
        actual number of digits generated depends only on the value being
        output, not on the value of this parameter. At most 17 digits are
        required for <type>float8</type> values, and 9 for <type>float4</type>
        values. This format is both fast and precise, preserving the original
        binary float value exactly when correctly read. For historical
        compatibility, values up to 3 are permitted.
-->
この値が1（デフォルト）あるいはそれ以上なら、浮動小数点数値の出力は最も短い精度の形式で出力されます。
<xref linkend="datatype-float"/>を参照してください。
生成される実際の桁数は出力される値にのみ依存します。
<type>float8</type>値では最大でも17桁、<type>float4</type>値では最大9桁必要です。
この形式は高速かつ高精度で、正しく読まれる際には元の2進数における浮動小数点値を正確に保存します。
歴史的な互換性の理由により、3までの値が許容されています。
       </para>
       <para>
<!--
        If the value is zero or negative, then the output is rounded to a
        given decimal precision. The precision used is the standard number of
        digits for the type (<literal>FLT_DIG</literal>
        or <literal>DBL_DIG</literal> as appropriate) reduced according to the
        value of this parameter. (For example, specifying -1 will cause
        <type>float4</type> values to be output rounded to 5 significant
        digits, and <type>float8</type> values
        rounded to 14 digits.) This format is slower and does not preserve all
        the bits of the binary float value, but may be more human-readable.
-->
この値がゼロまたは負なら、出力は与えられた10進精度に丸められます。
使用される精度は、各々の型の標準的の桁数（型に応じて<literal>FLT_DIG</literal>あるいは<literal>DBL_DIG</literal>）がこのパラメータの値により制限されたものになります。
（たとえば、-1にすると<type>float4</type>値は5桁に、<type>float8</type>値では14桁に丸められます。）
この形式は低速、かつ元の2進数における浮動小数点値のビットを保存しませんが、人間にとってより読みやすいかも知れません。
       </para>
       <note>
        <para>
<!--
         The meaning of this parameter, and its default value, changed
         in <productname>PostgreSQL</productname> 12;
         see <xref linkend="datatype-float"/> for further discussion.
-->
このパラメータの意味とデフォルト値は<productname>PostgreSQL</productname> 12で変更されました。
更なる説明については<xref linkend="datatype-float"/>をご覧ください。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-client-encoding" xreflabel="client_encoding">
      <term><varname>client_encoding</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>client_encoding</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>client_encoding</varname>設定パラメータ</primary>
      </indexterm>
      <indexterm><primary>character set</primary></indexterm>
      <indexterm><primary>文字集合</primary></indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the client-side encoding (character set).
        The default is to use the database encoding.
        The character sets supported by the <productname>PostgreSQL</productname>
        server are described in <xref linkend="multibyte-charset-supported"/>.
-->
クライアント側符号化方式（文字集合）を設定します。デフォルトはデータベース符号化方式を使用します。
<productname>PostgreSQL</productname>サーバでサポートされている文字集合は<xref linkend="multibyte-charset-supported"/>に記載されています。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-messages" xreflabel="lc_messages">
      <term><varname>lc_messages</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_messages</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>lc_messages</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the language in which messages are displayed.  Acceptable
        values are system-dependent; see <xref linkend="locale"/> for
        more information.  If this variable is set to the empty string
        (which is the default) then the value is inherited from the
        execution environment of the server in a system-dependent way.
-->
メッセージが表示される言語を設定します。使用可能な値はシステムに依存します。詳細については<xref linkend="locale"/>を参照してください。
この変数が空に設定された場合（これがデフォルトです）、値はシステムに依存する方法でサーバの実行環境から継承されます。
       </para>

       <para>
<!--
        On some systems, this locale category does not exist.  Setting
        this variable will still work, but there will be no effect.
        Also, there is a chance that no translated messages for the
        desired language exist.  In that case you will continue to see
        the English messages.
-->
システムによっては、このロケールのカテゴリが存在しません。この変数を設定することはできますが、実効性はありません。
また、指定の言語に翻訳されたメッセージが存在しないこともあります。
その場合は、引き続き英語のメッセージが表示されます。
       </para>

       <para>
<!--
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
この設定を変更できるのは、スーパーユーザと適切な<literal>SET</literal>権限を持つユーザだけです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-monetary" xreflabel="lc_monetary">
      <term><varname>lc_monetary</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_monetary</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>lc_monetary</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the locale to use for formatting monetary amounts, for
        example with the <function>to_char</function> family of
        functions.  Acceptable values are system-dependent; see <xref
        linkend="locale"/> for more information.  If this variable is
        set to the empty string (which is the default) then the value
        is inherited from the execution environment of the server in a
        system-dependent way.
-->
通貨書式で使用するロケールを設定します。
例えば、<function>to_char()</function>系の関数で使用します。
使用可能な値はシステムに依存します。
詳細については<xref linkend="locale"/>を参照してください。
この変数が空に設定された場合（これがデフォルトです）、値はシステムに依存する方法でサーバの実行環境から継承されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-numeric" xreflabel="lc_numeric">
      <term><varname>lc_numeric</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_numeric</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>lc_numeric</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the locale to use for formatting numbers, for example
        with the <function>to_char</function> family of
        functions. Acceptable values are system-dependent; see <xref
        linkend="locale"/> for more information.  If this variable is
        set to the empty string (which is the default) then the value
        is inherited from the execution environment of the server in a
        system-dependent way.
-->
数字の書式で使用するロケールを設定します。
例えば、<function>to_char</function>系の関数で使用します。
使用可能な値はシステムに依存します。
詳細については<xref linkend="locale"/>を参照してください。
この変数が空に設定された場合（これがデフォルトです）、値はシステムに依存する方法でサーバの実行環境から継承されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-time" xreflabel="lc_time">
      <term><varname>lc_time</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_time</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>lc_time</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the locale to use for formatting dates and times, for example
        with the <function>to_char</function> family of
        functions. Acceptable values are system-dependent; see <xref
        linkend="locale"/> for more information.  If this variable is
        set to the empty string (which is the default) then the value
        is inherited from the execution environment of the server in a
        system-dependent way.
-->
例えば<function>to_char</function>系関数における、日付と時間の書式で使用するロケールを設定します。
使用可能な値はシステムに依存します。
詳細については<xref linkend="locale"/>を参照してください。
この変数が空に設定された場合（これがデフォルトです）、値はシステムに依存する方法でサーバの実行環境から継承されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-icu-validation-level" xreflabel="icu_validation_level">
      <term><varname>icu_validation_level</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>icu_validation_level</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>icu_validation_level</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When ICU locale validation problems are encountered, controls which
        <link linkend="runtime-config-severity-levels">message level</link> is
        used to report the problem. Valid values are
        <literal>DISABLED</literal>, <literal>DEBUG5</literal>,
        <literal>DEBUG4</literal>, <literal>DEBUG3</literal>,
        <literal>DEBUG2</literal>, <literal>DEBUG1</literal>,
        <literal>INFO</literal>, <literal>NOTICE</literal>,
        <literal>WARNING</literal>, <literal>ERROR</literal>, and
        <literal>LOG</literal>.
-->
ICUロケール検証の問題が発生した場合、問題を報告するために使用される<link linkend="runtime-config-severity-levels">メッセージレベル</link>を制御します。
有効な値は、<literal>DISABLED</literal>、<literal>DEBUG5</literal>、<literal>DEBUG4</literal>、<literal>DEBUG3</literal>、<literal>DEBUG2</literal>、<literal>DEBUG1</literal>、<literal>INFO</literal>、<literal>NOTICE</literal>、<literal>WARNING</literal>、<literal>ERROR</literal>、および <literal>LOG</literal>です。
       </para>
       <para>
<!--
        If set to <literal>DISABLED</literal>, does not report validation
        problems at all. Otherwise reports problems at the given message
        level. The default is <literal>WARNING</literal>.
-->
<literal>DISABLED</literal>に設定すると、検証で見つかった問題は全く報告されません。
それ以外の場合は、指定したメッセージレベルの問題が報告されます。
デフォルトは<literal>WARNING</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-text-search-config" xreflabel="default_text_search_config">
      <term><varname>default_text_search_config</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>default_text_search_config</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>default_text_search_config</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Selects the text search configuration that is used by those variants
        of the text search functions that do not have an explicit argument
        specifying the configuration.
        See <xref linkend="textsearch"/> for further information.
        The built-in default is <literal>pg_catalog.simple</literal>, but
        <application>initdb</application> will initialize the
        configuration file with a setting that corresponds to the
        chosen <varname>lc_ctype</varname> locale, if a configuration
        matching that locale can be identified.
-->
明示的な設定指定引数を持たないテキスト検索関数の亜種で使用される、テキスト検索設定を選択します。
詳細は<xref linkend="textsearch"/>を参照してください。
組み込みのデフォルトは<literal>pg_catalog.simple</literal>ですが、<application>initdb</application>は、ロケールに合う設定を認識することができれば、選択された<varname>lc_ctype</varname>ロケールに対応した設定で設定ファイルを初期化します。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect2>

    <sect2 id="runtime-config-client-preload">
<!--
     <title>Shared Library Preloading</title>
-->
     <title>共有ライブラリのプリロード</title>

     <para>
<!--
      Several settings are available for preloading shared libraries into the
      server, in order to load additional functionality or achieve performance
      benefits.  For example, a setting of
      <literal>'$libdir/mylib'</literal> would cause
      <literal>mylib.so</literal> (or on some platforms,
      <literal>mylib.sl</literal>) to be preloaded from the installation's standard
      library directory.  The differences between the settings are when they
      take effect and what privileges are required to change them.
-->
追加機能や性能改良の目的で共有ライブラリをプリロードするいくつかの設定があります。
たとえば<literal>'$libdir/mylib'</literal>を設定すると<literal>mylib.so</literal>(あるいは他のプラットフォームでは<literal>mylib.sl</literal>)を導入設定したの標準ディレクトリからプリロードします。
各設定の違いは、設定変更を行うためにいつ、どのような権限が必要かにあります。
     </para>

     <para>
<!--
      <productname>PostgreSQL</productname> procedural language libraries can
      be preloaded in this way, typically by using the
      syntax <literal>'$libdir/plXXX'</literal> where
      <literal>XXX</literal> is <literal>pgsql</literal>, <literal>perl</literal>,
      <literal>tcl</literal>, or <literal>python</literal>.
-->
典型的には<literal>'$libdir/plXXX'</literal>のような構文を用いて<productname>PostgreSQL</productname>手続き言語ライブラリをこの方法でプリロードできます。
<literal>XXX</literal>は<literal>pgsql</literal>、<literal>perl</literal>、<literal>tcl</literal>、<literal>python</literal>です。
     </para>

     <para>
<!--
      Only shared libraries specifically intended to be used with PostgreSQL
      can be loaded this way.  Every PostgreSQL-supported library has
      a <quote>magic block</quote> that is checked to guarantee compatibility.  For
      this reason, non-PostgreSQL libraries cannot be loaded in this way.  You
      might be able to use operating-system facilities such
      as <envar>LD_PRELOAD</envar> for that.
-->
PostgreSQLで使用することを意図したライブラリだけがこの方法でロードできます。
すべてのPostgreSQL用のライブラリは<quote>magic block</quote>を持ち、互換性を保証するためにチェックされます。
ですからPostgreSQL用ではないライブラリはこの方法ではロードできません。
<envar>LD_PRELOAD</envar>のようなOSの機能を使えばあるいは使用できるかもしれません。
     </para>

     <para>
<!--
      In general, refer to the documentation of a specific module for the
      recommended way to load that module.
-->
一般的に言ってモジュールのドキュメントを参照し、推奨される方法でロードしてください。
     </para>

     <variablelist>
     <varlistentry id="guc-local-preload-libraries" xreflabel="local_preload_libraries">
      <term><varname>local_preload_libraries</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>local_preload_libraries</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>local_preload_libraries</varname>設定パラメータ</primary>
      </indexterm>
      <indexterm>
       <primary><filename>$libdir/plugins</filename></primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This variable specifies one or more shared libraries that are to be
        preloaded at connection start.
        It contains a comma-separated list of library names, where each name
        is interpreted as for the <link linkend="sql-load"><command>LOAD</command></link> command.
        Whitespace between entries is ignored; surround a library name with
        double quotes if you need to include whitespace or commas in the name.
        The parameter value only takes effect at the start of the connection.
        Subsequent changes have no effect.  If a specified library is not
        found, the connection attempt will fail.
-->
この変数は、接続時に事前読み込みされる、1つまたは複数の共有ライブラリを指定します。
ここにはカンマ区切りでライブラリ名のリストを格納し、各々の名前は<link linkend="sql-load"><command>LOAD</command></link>コマンドで解釈されます。
項目の間の空白は無視されます。
名前の中に空白あるいはカンマを含める場合は、二重引用符で囲ってください。
このパラメータは、接続の開始時にのみ効果があります。
以降の変更は効果がありません。
もし指定したライブラリが見つからない場合は、接続は失敗します。
       </para>

       <para>
<!--
        This option can be set by any user.  Because of that, the libraries
        that can be loaded are restricted to those appearing in the
        <filename>plugins</filename> subdirectory of the installation's
        standard library directory.  (It is the database administrator's
        responsibility to ensure that only <quote>safe</quote> libraries
        are installed there.)  Entries in <varname>local_preload_libraries</varname>
        can specify this directory explicitly, for example
        <literal>$libdir/plugins/mylib</literal>, or just specify
        the library name &mdash; <literal>mylib</literal> would have
        the same effect as <literal>$libdir/plugins/mylib</literal>.
-->
このオプションはすべてのユーザが設定できます。
この理由で、読み込み可能なライブラリはインストレーションの共有ライブラリディレクトリのサブディレクトリ<filename>plugins</filename>内にあるものに制限されています。
（確実に<quote>安全</quote>なライブラリのみをここにインストールすることはデータベース管理者の責任です。）
<varname>local_preload_libraries</varname>内の項目で、たとえば<literal>$libdir/plugins/mylib</literal>のようにこのディレクトリを明示的に指定することも、単にライブラリ名を指定することも可能です。
<literal>mylib</literal> は<literal>$libdir/plugins/mylib</literal>と同じ効果です。
       </para>

       <para>
<!--
        The intent of this feature is to allow unprivileged users to load
        debugging or performance-measurement libraries into specific sessions
        without requiring an explicit <command>LOAD</command> command.  To that end,
        it would be typical to set this parameter using
        the <envar>PGOPTIONS</envar> environment variable on the client or by
        using
        <command>ALTER ROLE SET</command>.
-->
この機能の意図するところは、明示的な<command>LOAD</command>コマンドを使わずに、特定のセッションにおいて非特権ユーザがデバッグ用あるいは性能計測用のライブラリをロードできるようにすることにあります。
そのためにも、クライアント側で<envar>PGOPTIONS</envar>環境変数を使う、あるいは<command>ALTER ROLE SET</command>を使うことが典型的になるでしょう。
       </para>

       <para>
<!--
        However, unless a module is specifically designed to be used in this way by
        non-superusers, this is usually not the right setting to use.  Look
        at <xref linkend="guc-session-preload-libraries"/> instead.
-->
しかし、モジュールが特にスーパーユーザ以外に使われることを意図しているのでない限り、通常この方法は正しい使い方ではありません。
代わりに<xref linkend="guc-session-preload-libraries"/>を見てください。
       </para>
      </listitem>
     </varlistentry>


     <varlistentry id="guc-session-preload-libraries" xreflabel="session_preload_libraries">
      <term><varname>session_preload_libraries</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>session_preload_libraries</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>session_preload_libraries</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This variable specifies one or more shared libraries that are to be
        preloaded at connection start.
        It contains a comma-separated list of library names, where each name
        is interpreted as for the <link linkend="sql-load"><command>LOAD</command></link> command.
        Whitespace between entries is ignored; surround a library name with
        double quotes if you need to include whitespace or commas in the name.
        The parameter value only takes effect at the start of the connection.
        Subsequent changes have no effect.  If a specified library is not
        found, the connection attempt will fail.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
《マッチ度[73.746313]》この変数は、接続時に事前読み込みされる、1つまたは複数の共有ライブラリを指定します。
ここにはカンマ区切りでライブラリ名のリストを格納し、各々の名前は<link linkend="sql-load"><command>LOAD</command></link>コマンドで解釈されます。
項目の間の空白は無視されます。
名前の中に空白あるいはカンマを含める場合は、二重引用符で囲ってください。
このパラメータは、接続の開始時にのみ効果があります。
以降の変更は効果がありません。
もし指定したライブラリが見つからない場合は、接続は失敗します。
《機械翻訳》この変数は、コネクションスタートでプリロードされる1つ以上の共有ライブラリを指定します。
包含は、カンマで区切られたライブラリ名のリストで、各名前は<link linkend="sql-load"><command>LOAD</command></link>コマンドと同様に解釈されます。
エントリ間の空白は無視されます。
名前にincludeの空白またはカンマが必要な場合は、ライブラリ名前を二重引用符で囲みます。
パラメータの値は、コネクションのスタートでのみ有効になります。
その後の変更は無効です。
指定されたライブラリが見つからない場合、コネクションの試行は失敗します。
スーパーユーザおよび適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更できます。
       </para>

       <para>
<!--
        The intent of this feature is to allow debugging or
        performance-measurement libraries to be loaded into specific sessions
        without an explicit
        <command>LOAD</command> command being given.  For
        example, <xref linkend="auto-explain"/> could be enabled for all
        sessions under a given user name by setting this parameter
        with <command>ALTER ROLE SET</command>.  Also, this parameter can be changed
        without restarting the server (but changes only take effect when a new
        session is started), so it is easier to add new modules this way, even
        if they should apply to all sessions.
-->
この機能は、デバッグや性能測定の目的で<command>LOAD</command>コマンドを使わずに特定のセッションでライブラリをロードする目的で使われます。
たとえば<command>ALTER ROLE SET</command>で設定することにより、特定のユーザが開始するすべてのセッションで<xref linkend="auto-explain"/>が有効になります。
また、このパラメータはサーバを再起動せずに変更できます(しかし変更は新しいセッションが開始するときにのみ有効となります)。すべてのセッションで有効にしたいのであれば、この方法で新しいモジュールを容易に追加できます。
       </para>

       <para>
<!--
        Unlike <xref linkend="guc-shared-preload-libraries"/>, there is no large
        performance advantage to loading a library at session start rather than
        when it is first used.  There is some advantage, however, when
        connection pooling is used.
-->
<xref linkend="guc-shared-preload-libraries"/>と違って、ライブラリがはじめて使われるときにロードする方法と比べてセッションが開始するときにライブラリをロードする方法には大きな性能的な優位性はありません。
しかし、コネクションプーリングを使うのであれば、いくらか優位性があります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-shared-preload-libraries" xreflabel="shared_preload_libraries">
      <term><varname>shared_preload_libraries</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>shared_preload_libraries</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>shared_preload_libraries</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This variable specifies one or more shared libraries to be preloaded at
        server start.
        It contains a comma-separated list of library names, where each name
        is interpreted as for the <link linkend="sql-load"><command>LOAD</command></link> command.
        Whitespace between entries is ignored; surround a library name with
        double quotes if you need to include whitespace or commas in the name.
        This parameter can only be set at server start.  If a specified
        library is not found, the server will fail to start.
-->
この変数はサーバ起動時にプリロードされる一つ以上の共有ライブラリを指定します。
ここにはカンマ区切りでライブラリ名のリストを格納し、各々の名前は<link linkend="sql-load"><command>LOAD</command></link>コマンドで解釈されます。
項目の間の空白は無視されます。
名前の中に空白あるいはカンマを含める場合は、二重引用符で囲ってください。
このパラメータはサーバ起動時のみ設定可能です。
もし指定したライブラリが見つからない場合は、サーバの起動は失敗します。
       </para>

       <para>
<!--
        Some libraries need to perform certain operations that can only take
        place at postmaster start, such as allocating shared memory, reserving
        light-weight locks, or starting background workers.  Those libraries
        must be loaded at server start through this parameter.  See the
        documentation of each library for details.
-->
ライブラリによってはpostmaster起動時にのみ可能な操作を実行する必要があるものがあります。
たとえば、共有メモリの獲得、軽量ロックの予約、バックグラウンドワーカーの起動などです。
このようなライブラリはこのパラメータを使ってサーバ起動時にロードしなければなりません。
詳細は各ライブラリのドキュメントを見てください。
       </para>

       <para>
<!--
        Other libraries can also be preloaded.  By preloading a shared library,
        the library startup time is avoided when the library is first used.
        However, the time to start each new server process might increase
        slightly, even if that process never uses the library.  So this
        parameter is recommended only for libraries that will be used in most
        sessions.  Also, changing this parameter requires a server restart, so
        this is not the right setting to use for short-term debugging tasks,
        say.  Use <xref linkend="guc-session-preload-libraries"/> for that
        instead.
-->
これ以外のライブラリもプリロードできます。
共有ライブラリをプリロードすることにより、最初にライブラリが使われる際にライブラリが起動する時間を避けることができます。
しかし、そのライブラリが使われないとしても、サーバプロセスが起動する時間がわずかに長くなる可能性があります。
したがって、この方法は、ほとんどのセッションで使われるライブラリにのみ使用することを推奨します。
また、パラメータの変更にはサーバの再起動が必要になります。
ですから、たとえば短期のデバッグ仕事にこの設定を使うのは適当とは言えません。
<xref linkend="guc-session-preload-libraries"/>を代わりに使ってください。
       </para>

      <note>
       <para>
<!--
        On Windows hosts, preloading a library at server start will not reduce
        the time required to start each new server process; each server process
        will re-load all preload libraries.  However, <varname>shared_preload_libraries
        </varname> is still useful on Windows hosts for libraries that need to
        perform operations at postmaster start time.
-->
Windowsのホストでは、ライブラリのプリロードは、新しいサーバプロセスの起動に要する時間を短縮しません。
個々のサーバプロセスは、すべてのプリロードライブラリを再読み込みします。
それでもpostmaster起動時に操作を実行しなければならないライブラリを使用するWindowsホストにとっては<varname>shared_preload_libraries</varname>は有用です。
       </para>
      </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-provider" xreflabel="jit_provider">
      <term><varname>jit_provider</varname> (<type>string</type>)
       <indexterm>
        <primary><varname>jit_provider</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>jit_provider</varname>設定パラメータ</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This variable is the name of the JIT provider library to be used
        (see <xref linkend="jit-pluggable"/>).
        The default is <literal>llvmjit</literal>.
        This parameter can only be set at server start.
-->
この変数は、使用するJITプロバイダライブラリ(<xref linkend="jit-pluggable"/>参照)の名前です。
デフォルトは<literal>llvmjit</literal>です。
このパラメータはサーバ起動時のみ設定可能です。
       </para>

       <para>
<!--
        If set to a non-existent library, <acronym>JIT</acronym> will not be
        available, but no error will be raised. This allows JIT support to be
        installed separately from the main
        <productname>PostgreSQL</productname> package.
-->
存在しないライブラリが指定されると、<acronym>JIT</acronym>は利用できませんが、エラーは起こりません。
これにより、<productname>PostgreSQL</productname>パッケージとは別にJITサポートをインストールできるようになります。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect2>

     <sect2 id="runtime-config-client-other">
<!--
     <title>Other Defaults</title>
-->
     <title>その他のデフォルト</title>

     <variablelist>

     <varlistentry id="guc-dynamic-library-path" xreflabel="dynamic_library_path">
      <term><varname>dynamic_library_path</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>dynamic_library_path</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>dynamic_library_path</varname>設定パラメータ</primary>
      </indexterm>
      <indexterm><primary>dynamic loading</primary></indexterm>
      <indexterm><primary>動的ロード</primary></indexterm>
      </term>
      <listitem>
       <para>
<!--
        If a dynamically loadable module needs to be opened and the
        file name specified in the <command>CREATE FUNCTION</command> or
        <command>LOAD</command> command
        does not have a directory component (i.e., the
        name does not contain a slash), the system will search this
        path for the required file.
-->
オープンする必要がある動的ロード可能なモジュールについて、その<command>CREATE FUNCTION</command>や<command>LOAD</command>コマンドで指定されたファイル名にディレクトリ要素がなく（つまり、名前にスラッシュが含まれずに）指定された場合、システムは必要なファイルをこのパスから検索します。
       </para>

       <para>
<!--
        The value for <varname>dynamic_library_path</varname> must be a
        list of absolute directory paths separated by colons (or semi-colons
        on Windows).  If a list element starts
        with the special string <literal>$libdir</literal>, the
        compiled-in <productname>PostgreSQL</productname> package
        library directory is substituted for <literal>$libdir</literal>; this
        is where the modules provided by the standard
        <productname>PostgreSQL</productname> distribution are installed.
        (Use <literal>pg_config &#45;-pkglibdir</literal> to find out the name of
        this directory.) For example:
-->
<varname>dynamic_library_path</varname>の値は、絶対パスのディレクトリ名をコロン（Windowsの場合はセミコロン）で区切った一覧です。
この一覧の要素が特別な<literal>$libdir</literal>という値から始まる場合、コンパイルされた<productname>PostgreSQL</productname>パッケージのライブラリディレクトリで<literal>$libdir</literal>は置換されます。
ここには、<productname>PostgreSQL</productname>の標準配布物により提供されるモジュールがインストールされます。
（このディレクトリ名を表示するには、<literal>pg_config --pkglibdir</literal> を使用してください。）
例を以下に示します。
<programlisting>
dynamic_library_path = '/usr/local/lib/postgresql:/home/my_project/lib:$libdir'
</programlisting>
<!--
        or, in a Windows environment:
-->
Windows環境の場合は以下です。
<programlisting>
dynamic_library_path = 'C:\tools\postgresql;H:\my_project\lib;$libdir'
</programlisting>
       </para>

       <para>
<!--
        The default value for this parameter is
        <literal>'$libdir'</literal>. If the value is set to an empty
        string, the automatic path search is turned off.
-->
このパラメータのデフォルト値は<literal>'$libdir'</literal>です。
この値が空に設定された場合、自動的なパス検索は無効になります。
       </para>

       <para>
<!--
        This parameter can be changed at run time by superusers and users
        with the appropriate <literal>SET</literal> privilege, but a
        setting done that way will only persist until the end of the
        client connection, so this method should be reserved for
        development purposes. The recommended way to set this parameter
        is in the <filename>postgresql.conf</filename> configuration
        file.
-->
このパラメータはスーパーユーザと、適切な<literal>SET</literal>権限を持つユーザによって実行時に変更することができますが、この方法での設定は、そのクライアント接続が終わるまでしか有効になりません。
ですので、この方法は開発目的でのみ使用すべきです。
推奨方法はこのパラメータを<filename>postgresql.conf</filename>設定ファイル内で設定することです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-extension-control-path" xreflabel="extension_control_path">
      <term><varname>extension_control_path</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>extension_control_path</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        A path to search for extensions, specifically extension control files
        (<filename><replaceable>name</replaceable>.control</filename>).  The
        remaining extension script and secondary control files are then loaded
        from the same directory where the primary control file was found.
        See <xref linkend="extend-extensions-files"/> for details.
-->
《機械翻訳》パスから検索への内線番号、特にextensionコントロールファイル(<filename><replaceable>name</replaceable>.control</filename>。
残りのextensionスクリプトおよび二次的なコントロールファイルは、プライマリ制御ファイルが見つかったのと同じディレクトリからロードされます。
詳細は<xref linkend="extend-extensions-files"/>を参照してください。
       </para>

       <para>
<!--
        The value for <varname>extension_control_path</varname> must be a
        list of absolute directory paths separated by colons (or semi-colons
        on Windows).  If a list element starts
        with the special string <literal>$system</literal>, the
        compiled-in <productname>PostgreSQL</productname> extension
        directory is substituted for <literal>$system</literal>; this
        is where the extensions provided by the standard
        <productname>PostgreSQL</productname> distribution are installed.
        (Use <literal>pg_config &#45;-sharedir</literal> to find out the name of
        this directory.) For example:
-->
《マッチ度[75.886525]》<varname>dynamic_library_path</varname>の値は、絶対パスのディレクトリ名をコロン（Windowsの場合はセミコロン）で区切った一覧です。
この一覧の要素が特別な<literal>$libdir</literal>という値から始まる場合、コンパイルされた<productname>PostgreSQL</productname>パッケージのライブラリディレクトリで<literal>$libdir</literal>は置換されます。
ここには、<productname>PostgreSQL</productname>の標準配布物により提供されるモジュールがインストールされます。
（このディレクトリ名を表示するには、<literal>pg_config --pkglibdir</literal> を使用してください。）
例を以下に示します。
《機械翻訳》<varname>extension_control_path</varname>の値は、コロン（またはWindowsのセミコロン）で区切られた絶対ディレクトリ経路のリストである必要があります。
リスト要素が特殊文字列で始まる場合、コンパイルされた<productname>PostgreSQL</productname>extensionディレクトリは<literal>$system</literal>に置き換えられます。
これは標準<productname>PostgreSQL</productname>ディストリビューションによって提供される拡張がインストールされている場所です（このディレクトリの名前を調べるには<literal>pg_config --sharedir</literal>を使用します）。
例の場合:。
<literal>$system</literal>
<programlisting>
extension_control_path = '/usr/local/share/postgresql:/home/my_project/share:$system'
</programlisting>
<!--
        or, in a Windows environment:
-->
Windows環境の場合は以下です。
<programlisting>
extension_control_path = 'C:\tools\postgresql;H:\my_project\share;$system'
</programlisting>
<!--
        Note that the specified paths elements are expected to have a
        subdirectory <filename>extension</filename> which will contain the
        <filename>.control</filename> and <filename>.sql</filename> files; the
        <filename>extension</filename> suffix is automatically appended to
        each path element.
-->
《機械翻訳》指定されたノート要素にサブディレクトリがあると予想される経路<filename>extension</filename>これには<filename>.control</filename>および<filename>.sql</filename>ファイルが含まれます。
<filename>extension</filename>サフィックスは各パス要素に自動的に追加されます。
       </para>

       <para>
<!--
        The default value for this parameter is
        <literal>'$system'</literal>. If the value is set to an empty
        string, the default <literal>'$system'</literal> is also assumed.
-->
《マッチ度[57.485030]》このパラメータのデフォルト値は<literal>'$libdir'</literal>です。
この値が空に設定された場合、自動的なパス検索は無効になります。
《機械翻訳》このパラメータのデフォルト値は<literal>'$system'</literal>です。
値が空の文字列に設定されている場合は、デフォルト<literal>'$system'</literal>も想定されます。
       </para>

       <para>
<!--
        If extensions with equal names are present in multiple directories in
        the configured path, only the instance found first in the path will be
        used.
-->
《機械翻訳》設定されたパスのマルチプルディレクトリに同じ名前の内線番号が存在する場合は、そのパスで最初に見つかったインスタンスだけが使用されます。
       </para>

       <para>
<!--
        This parameter can be changed at run time by superusers and users
        with the appropriate <literal>SET</literal> privilege, but a
        setting done that way will only persist until the end of the
        client connection, so this method should be reserved for
        development purposes. The recommended way to set this parameter
        is in the <filename>postgresql.conf</filename> configuration
        file.
-->
このパラメータはスーパーユーザと、適切な<literal>SET</literal>権限を持つユーザによって実行時に変更することができますが、この方法での設定は、そのクライアント接続が終わるまでしか有効になりません。
ですので、この方法は開発目的でのみ使用すべきです。
推奨方法はこのパラメータを<filename>postgresql.conf</filename>設定ファイル内で設定することです。
       </para>

       <para>
<!--
        Note that if you set this parameter to be able to load extensions from
        nonstandard locations, you will most likely also need to set <xref
        linkend="guc-dynamic-library-path"/> to a correspondent location, for
        example,
-->
《機械翻訳》ノート:このパラメータを非標準のロケーションから内線番号をロードできるように設定した場合は、<xref linkend="guc-dynamic-library-path"/>を例のコルレスロケーションにも設定する必要があります。
<programlisting>
extension_control_path = '/usr/local/share/postgresql:$system'
dynamic_library_path = '/usr/local/lib/postgresql:$libdir'
</programlisting>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-gin-fuzzy-search-limit" xreflabel="gin_fuzzy_search_limit">
      <term><varname>gin_fuzzy_search_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>gin_fuzzy_search_limit</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>gin_fuzzy_search_limit</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Soft upper limit of the size of the set returned by GIN index scans. For more
        information see <xref linkend="gin-tips"/>.
-->
GINインデックススキャンにより返されるセットのソフトな上限サイズです。
詳細は<xref linkend="gin-tips"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-locks">
<!--
    <title>Lock Management</title>
-->
    <title>ロック管理</title>

     <variablelist>

     <varlistentry id="guc-deadlock-timeout" xreflabel="deadlock_timeout">
      <term><varname>deadlock_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary>deadlock</primary>
       <secondary>timeout during</secondary>
      </indexterm>
      <indexterm>
       <primary>デッドロック</primary>
       <secondary>間のタイムアウト</secondary>
      </indexterm>
      <indexterm>
       <primary>timeout</primary>
       <secondary>deadlock</secondary>
      </indexterm>
      <indexterm>
       <primary>タイムアウト</primary>
       <secondary>デッドロック</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>deadlock_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>deadlock_timeout</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This is the amount of time to wait on a lock
        before checking to see if there is a deadlock condition. The
        check for deadlock is relatively expensive, so the server doesn't run
        it every time it waits for a lock. We optimistically assume
        that deadlocks are not common in production applications and
        just wait on the lock for a while before checking for a
        deadlock. Increasing this value reduces the amount of time
        wasted in needless deadlock checks, but slows down reporting of
        real deadlock errors.
        If this value is specified without units, it is taken as milliseconds.
        The default is one second (<literal>1s</literal>),
        which is probably about the smallest value you would want in
        practice. On a heavily loaded server you might want to raise it.
        Ideally the setting should exceed your typical transaction time,
        so as to improve the odds that a lock will be released before
        the waiter decides to check for deadlock.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
これは、デッドロック状態があるかどうかを調べる前にロックを待つ時間です。
デッドロックの検査は比較的高価なので、サーバはロックを待つ度にこれを実行するわけではありません。
楽天的ですがデッドロックは実用レベルのアプリケーションでは頻繁に発生しないと仮定し、デッドロックの検査の前にしばらくはロック待ちをします。
この値を増やすことにより必要のないデッドロックの検査で無駄にされる時間は減りますが、本当にデッドロックがあった場合の報告が遅れます。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
デフォルトは1秒（<literal>1s</literal>）で、おそらく実用の際にはこれ以上は必要でしょう。
負荷の大きいサーバではもっと必要かもしれません。
理想としてはこの設定は通常のトランザクションにかかる時間を超えているべきです。
そうすればロック待ちトランザクションがデッドロックの検査をする前にロックが解除される可能性が改善されます。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>

       <para>
<!--
        When <xref linkend="guc-log-lock-waits"/> is set,
        this parameter also determines the amount of time to wait before
        a log message is issued about the lock wait.  If you are trying
        to investigate locking delays you might want to set a shorter than
        normal <varname>deadlock_timeout</varname>.
-->
<xref linkend="guc-log-lock-waits"/>が設定された場合、このパラメータはロック待機に関するログメッセージを出力する前の待機時間を決定します。
ロック遅延の調査を行う場合は、通常の<varname>deadlock_timeout</varname>よりも短い値を設定することを勧めます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-locks-per-transaction" xreflabel="max_locks_per_transaction">
      <term><varname>max_locks_per_transaction</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_locks_per_transaction</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_locks_per_transaction</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The shared lock table has space for
        <varname>max_locks_per_transaction</varname> objects
        (e.g., tables) per server process or prepared transaction;
        hence, no more than this many distinct objects can be locked at
        any one time.  This parameter limits the average number of object
        locks used by each transaction; individual transactions
        can lock more objects as long as the locks of all transactions
        fit in the lock table.  This is <emphasis>not</emphasis> the number of
        rows that can be locked; that value is unlimited.  The default,
        64, has historically proven sufficient, but you might need to
        raise this value if you have queries that touch many different
        tables in a single transaction, e.g., query of a parent table with
        many children.  This parameter can only be set at server start.
-->
共有ロックテーブルは、プロセスごと、あるいは準備されたトランザクションごとの<varname>max_locks_per_transaction</varname>オブジェクト（たとえばテーブル）空間を持っています。
したがって、ある時点でこの数以上の個々のオブジェクトをロックすることはできません。
このパラメータは各トランザクションで使用するオブジェクトロックの平均値を制限します。
個々のトランザクションでは、このロックテーブルにすべてのトランザクションのロックが収まる限りオブジェクトのロックを獲得できます。
これは、ロックできる行数では<emphasis>ありません</emphasis>。この値には制限がありません。
デフォルトの64は、経験的に十分であると証明されていますが、単一のトランザクションで数多くの異なるテーブルをいじる問い合わせがいる場合、たとえば、数多くの子テーブルを持つ親テーブルの問い合わせなど、この値を大きくする必要があるかも知れません。
このパラメータはサーバ起動時のみ設定可能です。
       </para>

       <para>
<!--
        When running a standby server, you must set this parameter to have the
        same or higher value as on the primary server. Otherwise, queries
        will not be allowed in the standby server.
-->
スタンバイサーバを運用している場合、このパラメータはプライマリサーバでの設定と同じ、もしくはより高い値に設定しなければなりません。そうしないと問い合わせがスタンバイサーバ内で受け入れられません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-pred-locks-per-transaction" xreflabel="max_pred_locks_per_transaction">
      <term><varname>max_pred_locks_per_transaction</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_pred_locks_per_transaction</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_pred_locks_per_transaction</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The shared predicate lock table has space for
        <varname>max_pred_locks_per_transaction</varname> objects
        (e.g., tables) per server process or prepared transaction;
        hence, no more than this many distinct objects can be locked at
        any one time.  This parameter limits the average number of object
        locks used by each transaction; individual transactions
        can lock more objects as long as the locks of all transactions
        fit in the lock table.  This is <emphasis>not</emphasis> the number of
        rows that can be locked; that value is unlimited.  The default,
        64, has historically proven sufficient, but you might need to
        raise this value if you have clients that touch many different
        tables in a single serializable transaction. This parameter can
        only be set at server start.
-->
共有述語ロックテーブルは、プロセスごと、あるいは準備されたトランザクションごとの<varname>max_pred_locks_per_transaction</varname>オブジェクト（たとえばテーブル）空間を持っています。
したがって、ある時点でこの数以上の個々のオブジェクトをロックすることはできません。
このパラメータは各トランザクションで使用するオブジェクトロックの平均値を制限します。
個々のトランザクションでは、このロックテーブルにすべてのトランザクションのロックが収まる限りオブジェクトのロックを獲得できます。
これはロック可能な行数では<emphasis>ありません</emphasis>。その値は無制限です。
デフォルトは64で、過去の経験から十分であることがわかっていますが、単一のシリアライザブルトランザクションで数多くの異なるテーブルに触れるクライアントが存在する場合、この値を大きくする必要があることがあります。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-pred-locks-per-relation" xreflabel="max_pred_locks_per_relation">
      <term><varname>max_pred_locks_per_relation</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_pred_locks_per_relation</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_pred_locks_per_relation</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This controls how many pages or tuples of a single relation can be
        predicate-locked before the lock is promoted to covering the whole
        relation.  Values greater than or equal to zero mean an absolute
        limit, while negative values
        mean <xref linkend="guc-max-pred-locks-per-transaction"/> divided by
        the absolute value of this setting.  The default is -2, which keeps
        the behavior from previous versions of <productname>PostgreSQL</productname>.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
リレーション全体をカバーするロックに昇格する前に、一つリレーションの中で述語ロックできるページ数あるいはタプル数を指定します。
0以上の値は、絶対的な制限を表し、負の数は<xref linkend="guc-max-pred-locks-per-transaction"/>をその絶対値で割ったものを表します。
デフォルトは-2で、以前のバージョンの<productname>PostgreSQL</productname>の振る舞いを維持します。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-pred-locks-per-page" xreflabel="max_pred_locks_per_page">
      <term><varname>max_pred_locks_per_page</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_pred_locks_per_page</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_pred_locks_per_page</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This controls how many rows on a single page can be predicate-locked
        before the lock is promoted to covering the whole page.  The default
        is 2.  This parameter can only be set in
        the <filename>postgresql.conf</filename> file or on the server command line.
-->
ページ全体をカバーするロックに昇格する前に、一つページの中で述語ロックできる行数を指定します。
デフォルトは2です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
   </sect1>

   <sect1 id="runtime-config-compatible">
<!--
    <title>Version and Platform Compatibility</title>
-->
    <title>バージョンとプラットフォーム互換性</title>

    <sect2 id="runtime-config-compatible-version">
<!--
     <title>Previous PostgreSQL Versions</title>
-->
     <title>以前のPostgreSQLバージョン</title>

     <variablelist>

     <varlistentry id="guc-array-nulls" xreflabel="array_nulls">
      <term><varname>array_nulls</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>array_nulls</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>array_nulls</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This controls whether the array input parser recognizes
        unquoted <literal>NULL</literal> as specifying a null array element.
        By default, this is <literal>on</literal>, allowing array values containing
        null values to be entered.  However, <productname>PostgreSQL</productname> versions
        before 8.2 did not support null values in arrays, and therefore would
        treat <literal>NULL</literal> as specifying a normal array element with
        the string value <quote>NULL</quote>.  For backward compatibility with
        applications that require the old behavior, this variable can be
        turned <literal>off</literal>.
-->
これは、配列入力パーサが引用符のない<literal>NULL</literal>をNULL配列要素として認識するかどうかを制御します。
デフォルトでは、これは<literal>on</literal>で、NULL値を持つ配列値を入力することができます。
しかし、8.2より前のバージョンの<productname>PostgreSQL</productname>では、配列内のNULL値をサポートしておらず、<literal>NULL</literal>を<quote>NULL</quote>という値の文字列を持つ通常の配列要素として扱っていました。
古い動作を必要とするアプリケーションの後方互換性のため、この変数を<literal>off</literal>にすることができます。
       </para>

       <para>
<!--
        Note that it is possible to create array values containing null values
        even when this variable is <literal>off</literal>.
-->
この変数が<literal>off</literal>であっても、NULL値を含む配列値を作成することができることに注意してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-backslash-quote" xreflabel="backslash_quote">
      <term><varname>backslash_quote</varname> (<type>enum</type>)
      <indexterm><primary>strings</primary><secondary>backslash quotes</secondary></indexterm>
      <indexterm><primary>文字列</primary><secondary>バックスラッシュによる引用</secondary></indexterm>
      <indexterm>
       <primary><varname>backslash_quote</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>backslash_quote</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This controls whether a quote mark can be represented by
        <literal>\'</literal> in a string literal.  The preferred, SQL-standard way
        to represent a quote mark is by doubling it (<literal>''</literal>) but
        <productname>PostgreSQL</productname> has historically also accepted
        <literal>\'</literal>. However, use of <literal>\'</literal> creates security risks
        because in some client character set encodings, there are multibyte
        characters in which the last byte is numerically equivalent to ASCII
        <literal>\</literal>.  If client-side code does escaping incorrectly then an
        SQL-injection attack is possible.  This risk can be prevented by
        making the server reject queries in which a quote mark appears to be
        escaped by a backslash.
        The allowed values of <varname>backslash_quote</varname> are
        <literal>on</literal> (allow <literal>\'</literal> always),
        <literal>off</literal> (reject always), and
        <literal>safe_encoding</literal> (allow only if client encoding does not
        allow ASCII <literal>\</literal> within a multibyte character).
        <literal>safe_encoding</literal> is the default setting.
-->
文字列リテラルの中で引用符が<literal>\'</literal>で表現されるかどうかを管理します。
引用符の表現として標準SQLの方式では二重化（<literal>''</literal>）ですが、<productname>PostgreSQL</productname>は歴史的に<literal>\'</literal>も受け付けます。
とは言っても、いくつかのクライアント文字集合エンコーディング方式において、最終バイトが数値的にASCIIの<literal>\</literal>に等しいマルチバイト文字があり、<literal>\'</literal>を使用するとセキュリティ上問題を引き起こす可能性があります。
クライアント側のコードが事実上エスケープを正しく扱わない場合、SQLインジェクション攻撃が可能になります。この危険性の回避は、サーバが逆スラッシュでエスケープされた引用符を含む問い合わせを拒絶するようにします。
許可される<varname>backslash_quote</varname>の値は、<literal>on</literal> （常に <literal>\'</literal> を許可）,<literal>off</literal> （常に拒否）、および<literal>safe_encoding</literal> （クライアント符号化方式がASCIIの<literal>\</literal>を許可しないときのみ、マルチバイト文字内で許可）。
<literal>safe_encoding</literal> がデフォルトの設定。
       </para>

       <para>
<!--
        Note that in a standard-conforming string literal, <literal>\</literal> just
        means <literal>\</literal> anyway.  This parameter only affects the handling of
        non-standard-conforming literals, including
        escape string syntax (<literal>E'...'</literal>).
-->
標準に従った文字列リテラルでは、<literal>\</literal>は単に<literal>\</literal>を意味するものです。
このパラメータのみが、エスケープ文字列構文（<literal>E'...'</literal>）を含む標準に従わないリテラルの取り扱いに影響します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-escape-string-warning" xreflabel="escape_string_warning">
      <term><varname>escape_string_warning</varname> (<type>boolean</type>)
      <indexterm><primary>strings</primary><secondary>escape warning</secondary></indexterm>
      <indexterm><primary>文字列</primary><secondary>エスケープに関する警告</secondary></indexterm>
      <indexterm>
       <primary><varname>escape_string_warning</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>escape_string_warning</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When on, a warning is issued if a backslash (<literal>\</literal>)
        appears in an ordinary string literal (<literal>'...'</literal>
        syntax) and <varname>standard_conforming_strings</varname> is off.
        The default is <literal>on</literal>.
-->
有効の場合、通常の文字列リテラル（<literal>'...'</literal>構文）にバックスラッシュ（<literal>\</literal>）があり、<varname>standard_conforming_strings</varname>が無効な場合、警告が発せられます。
デフォルトは<literal>on</literal>です。
       </para>
       <para>
<!--
        Applications that wish to use backslash as escape should be
        modified to use escape string syntax (<literal>E'...'</literal>),
        because the default behavior of ordinary strings is now to treat
        backslash as an ordinary character, per SQL standard.  This variable
        can be enabled to help locate code that needs to be changed.
-->
通常文字列のデフォルトの振る舞いは、標準SQLではバックスラッシュを通常文字として取り扱うため、バックスラッシュをエスケープとして使用したいアプリケーションは、エスケープ文字列構文(<literal>E'...'</literal>)を使用するように変更すべきです。
この変数は変更すべきコードを突き止めるのに役立つよう、有効にすることができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lo-compat-privileges" xreflabel="lo_compat_privileges">
      <term><varname>lo_compat_privileges</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>lo_compat_privileges</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>lo_compat_privileges</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        In <productname>PostgreSQL</productname> releases prior to 9.0, large objects
        did not have access privileges and were, therefore, always readable
        and writable by all users.  Setting this variable to <literal>on</literal>
        disables the new privilege checks, for compatibility with prior
        releases.  The default is <literal>off</literal>.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
9.0以前の<productname>PostgreSQL</productname>リリースでは、ラージオブジェクトはアクセス権限が無く、従って全てのユーザが常に読み込み、書き込みが可能でした。
この変数を<literal>on</literal>にすると、以前のリリースとの互換性のため、新規の権限チェックが無効になります。
デフォルトは<literal>off</literal>です。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
       <para>
<!--
        Setting this variable does not disable all security checks related to
        large objects &mdash; only those for which the default behavior has
        changed in <productname>PostgreSQL</productname> 9.0.
-->
この変数を設定しても、ラージオブジェクトに関連した全ての安全性チェックを無効にする訳ではありません。
<productname>PostgreSQL</productname> 9.0で変更されたデフォルトの動きに対してのみです。
       </para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-quote-all-identifiers" xreflabel="quote-all-identifiers">
      <term><varname>quote_all_identifiers</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>quote_all_identifiers</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>quote_all_identifiers</varname> 設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When the database generates SQL, force all identifiers to be quoted,
        even if they are not (currently) keywords.  This will affect the
        output of <command>EXPLAIN</command> as well as the results of functions
        like <function>pg_get_viewdef</function>.  See also the
        <option>&#45;-quote-all-identifiers</option> option of
        <xref linkend="app-pgdump"/> and <xref linkend="app-pg-dumpall"/>.
-->
データベースがSQLを生成する時、たとえ（現在）キーワードになっていなくても、全ての識別子を引用符で囲むことを強制します。
これは <command>EXPLAIN</command>の出力に影響を与えるのみならず、<function>pg_get_viewdef</function>のような関数の結果にも影響します。
<xref linkend="app-pgdump"/> および <xref linkend="app-pg-dumpall"/>の<option>--quote-all-identifiers</option>オプションも参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-standard-conforming-strings" xreflabel="standard_conforming_strings">
      <term><varname>standard_conforming_strings</varname> (<type>boolean</type>)
      <indexterm><primary>strings</primary><secondary>standard conforming</secondary></indexterm>
      <indexterm><primary>文字列</primary><secondary>標準に従う</secondary></indexterm>
      <indexterm>
       <primary><varname>standard_conforming_strings</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>standard_conforming_strings</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This controls whether ordinary string literals
        (<literal>'...'</literal>) treat backslashes literally, as specified in
        the SQL standard.
        Beginning in <productname>PostgreSQL</productname> 9.1, the default is
        <literal>on</literal> (prior releases defaulted to <literal>off</literal>).
        Applications can check this
        parameter to determine how string literals will be processed.
        The presence of this parameter can also be taken as an indication
        that the escape string syntax (<literal>E'...'</literal>) is supported.
        Escape string syntax (<xref linkend="sql-syntax-strings-escape"/>)
        should be used if an application desires
        backslashes to be treated as escape characters.
-->
標準SQLで規定されたように、通常の文字列リテラル（<literal>'...'</literal>）がバックスラッシュをそのまま取り扱うか否かを制御します。
<productname>PostgreSQL</productname> 9.1からデフォルトは<literal>on</literal>になっています（それ以前のリリースでは<literal>off</literal>がデフォルトでした）。
どのように文字列リテラルが処理されるかを決めるこのパラメータを、アプリケーションで検査することができます。
このパラメータの存在は、エスケープ文字列構文（<literal>E'...'</literal>）がサポートされているかどうかを示すものとも考えられます。
エスケープ文字列構文 (<xref linkend="sql-syntax-strings-escape"/>)は、アプリケーションでバックスラッシュをエスケープ文字として扱いたい場合に使用すべきです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-synchronize-seqscans" xreflabel="synchronize_seqscans">
      <term><varname>synchronize_seqscans</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>synchronize_seqscans</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>synchronize_seqscans</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This allows sequential scans of large tables to synchronize with each
        other, so that concurrent scans read the same block at about the
        same time and hence share the I/O workload.  When this is enabled,
        a scan might start in the middle of the table and then <quote>wrap
        around</quote> the end to cover all rows, so as to synchronize with the
        activity of scans already in progress.  This can result in
        unpredictable changes in the row ordering returned by queries that
        have no <literal>ORDER BY</literal> clause.  Setting this parameter to
        <literal>off</literal> ensures the pre-8.3 behavior in which a sequential
        scan always starts from the beginning of the table.  The default
        is <literal>on</literal>.
-->
これにより、同時実行スキャンがほぼ同じ時間に同じブロックを読み取り、I/Oへの負荷を分散できるように、互いに同期して、大規模テーブルをシーケンシャルスキャンすることができます。
これが有効な場合、スキャンはテーブルの途中から始まり、進行中のスキャンの活動と同期するように、行全体を覆うように終端を<quote>巻き上げる</quote>可能性があります。
これにより、<literal>ORDER BY</literal>句を持たない問い合わせが返す行の順序は予想できない程変わってしまいます。
このパラメータを<literal>off</literal>にすることで、シーケンシャルスキャンが常にテーブルの先頭から始まるという、8.3より前の動作を保証します。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-compatible-clients">
<!--
     <title>Platform and Client Compatibility</title>
-->
     <title>プラットフォームとクライアント互換性</title>
     <variablelist>

     <varlistentry id="guc-transform-null-equals" xreflabel="transform_null_equals">
      <term><varname>transform_null_equals</varname> (<type>boolean</type>)
      <indexterm><primary>IS NULL</primary></indexterm>
      <indexterm>
       <primary><varname>transform_null_equals</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>transform_null_equals</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When on, expressions of the form <literal><replaceable>expr</replaceable> =
        NULL</literal> (or <literal>NULL =
        <replaceable>expr</replaceable></literal>) are treated as
        <literal><replaceable>expr</replaceable> IS NULL</literal>, that is, they
        return true if <replaceable>expr</replaceable> evaluates to the null value,
        and false otherwise. The correct SQL-spec-compliant behavior of
        <literal><replaceable>expr</replaceable> = NULL</literal> is to always
        return null (unknown). Therefore this parameter defaults to
        <literal>off</literal>.
-->
有効の場合、<literal><replaceable>expr</replaceable> = NULL</literal>（もしくは<literal>NULL = <replaceable>expr</replaceable></literal>）形式の式は<literal><replaceable>expr</replaceable> IS NULL</literal>として取り扱われ、それは、もし<replaceable>expr</replaceable>がNULL値と評価すれば真を返し、そうでなければ偽を返します。
<literal><replaceable>expr</replaceable> = NULL</literal>の正しいSQL仕様準拠の動作は常にNULL（判らない）を返すことです。
従って、このパラメータのデフォルトは<literal>off</literal>になっています。
       </para>

       <para>
<!--
        However, filtered forms in <productname>Microsoft
        Access</productname> generate queries that appear to use
        <literal><replaceable>expr</replaceable> = NULL</literal> to test for
        null values, so if you use that interface to access the database you
        might want to turn this option on.  Since expressions of the
        form <literal><replaceable>expr</replaceable> = NULL</literal> always
        return the null value (using the SQL standard interpretation), they are not
        very useful and do not appear often in normal applications so
        this option does little harm in practice.  But new users are
        frequently confused about the semantics of expressions
        involving null values, so this option is off by default.
-->
しかし、<productname>Microsoft Access</productname>のフィルタ形式はNULL値を検査するために<literal><replaceable>expr</replaceable> = NULL</literal>を使用する問い合わせを生成しますので、そのインタフェースを使用してデータベースにアクセスする場合は、このオプションを有効にする方が良いでしょう。
<literal><replaceable>expr</replaceable> = NULL</literal>という形の式は（標準SQL解釈を使用した結果）常にNULL値を返しますので、通常のアプリケーションでは意味がほとんどなく、滅多に使用されません。
ですので、このオプションは実際は害はありません。
しかし、慣れていないユーザはしばしばNULL値に関する式の意味に戸惑いますので、デフォルトでこのオプションはoffです。
       </para>

       <para>
<!--
        Note that this option only affects the exact form <literal>= NULL</literal>,
        not other comparison operators or other expressions
        that are computationally equivalent to some expression
        involving the equals operator (such as <literal>IN</literal>).
        Thus, this option is not a general fix for bad programming.
-->
このオプションは<literal>= NULL</literal>という形式にのみ影響することに注意してください。
他の比較演算子や等価演算子を呼び出す他の（<literal>IN</literal>のような）式と計算する上で等価となる式には影響を与えません。
したがって、このオプションは間違ったプログラミングの汎用的な問題解決を行いません。
       </para>

       <para>
<!--
        Refer to <xref linkend="functions-comparison"/> for related information.
-->
関連する情報は<xref linkend="functions-comparison"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-allow-alter-system" xreflabel="allow_alter_system">
      <term><varname>allow_alter_system</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>allow_alter_system</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>allow_alter_system</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When <literal>allow_alter_system</literal> is set to
        <literal>off</literal>, an error is returned if the <command>ALTER
        SYSTEM</command> command is executed. This parameter can only be set in
        the <filename>postgresql.conf</filename> file or on the server command
        line. The default value is <literal>on</literal>.
-->
<literal>allow_alter_system</literal>が<literal>off</literal>に設定されている場合、<command>ALTER SYSTEM</command>コマンドが実行されるとエラーが返されます。
このパラメータは、<filename>PostgreSQL.conf</filename>ファイルまたはサーバコマンドラインでのみ設定できます。
デフォルト値は<literal>on</literal>です。
       </para>

       <para>
<!--
        Note that this setting must not be regarded as a security feature. It
        only disables the <literal>ALTER SYSTEM</literal> command. It does not
        prevent a superuser from changing the configuration using other SQL
        commands. A superuser has many ways of executing shell commands at
        the operating system level, and can therefore modify
        <literal>postgresql.auto.conf</literal> regardless of the value of
        this setting.
-->
この設定をセキュリティ機能とみなしてはならないことに注意してください。
これは<literal>ALTER SYSTEM</literal>コマンドを無効にするだけです。
スーパーユーザが他のSQLコマンドを使用して設定を変更することを妨げるものではありません。
スーパーユーザにはオペレーティングシステムレベルでシェルコマンドを実行する多くの方法があるため、この設定の値に関係なく<literal>postgresql.auto.conf</literal>を変更できます。
       </para>

       <para>
<!--
        Turning this setting off is intended for environments where the
        configuration of <productname>PostgreSQL</productname> is managed by
        some external tool.
        In such environments, a well-intentioned superuser might
        <emphasis>mistakenly</emphasis> use <command>ALTER SYSTEM</command>
        to change the configuration instead of using the external tool.
        This might result in unintended behavior, such as the external tool
        overwriting the change at some later point in time when it updates the
        configuration.
        Setting this parameter to <literal>off</literal> can
        help avoid such mistakes.
-->
《マッチ度[84.494774]》この設定をオフにすることは、<productname>PostgreSQL</productname>の設定が外部のツールによって管理されている環境を対象としています。
このような環境では、善意のスーパーユーザがツールを使わずに、<emphasis>誤って</emphasis><command>ALTER SYSTEM</command>を使って設定を変更する可能性があります。
これにより、外部ツールを使って後で設定を更新したときに、変更を上書きするなど、意図しない振る舞いとなる可能性があります。
このパラメータを<literal>オフ</literal>に設定すると、そのような間違いを避けるための助けになります。
《機械翻訳》この設定をオフにするのは、<productname>PostgreSQL</productname>の設定が一部の外部ツールによって管理されている環境向けです。
このような環境では、善意のスーパーユーザが<command>ALTER SYSTEM</command><emphasis>誤って</emphasis>外部代わりを使用して設定ツールを変更するために使用する可能性があります。
これにより、後でポイントが設定を更新するときに、外部ツールが変更を上書きするなど、予期しない動作が発生する可能性があります。
このパラメータを<literal>off</literal>に設定すると、ヘルプはこのような間違いを回避できます。
       </para>

       <para>
<!--
        This parameter only controls the use of <command>ALTER SYSTEM</command>.
        The settings stored in <filename>postgresql.auto.conf</filename>
        take effect even if <literal>allow_alter_system</literal> is set to
        <literal>off</literal>.
-->
このパラメータは<command>ALTER SYSTEM</command>の使用のみを制御します。
<filename>postgresql.auto.conf</filename>に保存された設定は、<literal>allow_alter_system</literal>が<literal>off</literal>に設定されていても有効になります。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-error-handling">
<!--
    <title>Error Handling</title>
-->
    <title>エラー処理</title>

    <variablelist>

     <varlistentry id="guc-exit-on-error" xreflabel="exit_on_error">
      <term><varname>exit_on_error</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>exit_on_error</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>exit_on_error</varname> 設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If on, any error will terminate the current session.  By default,
        this is set to off, so that only FATAL errors will terminate the
        session.
-->
onなら、全てのエラーは現在のセッションを中止させます。
デフォルトではこれはoffに設定されているので、 FATALエラーのみがセッションを中止させます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-restart-after-crash" xreflabel="restart_after_crash">
      <term><varname>restart_after_crash</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>restart_after_crash</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>restart_after_crash</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When set to on, which is the default, <productname>PostgreSQL</productname>
        will automatically reinitialize after a backend crash.  Leaving this
        value set to on is normally the best way to maximize the availability
        of the database.  However, in some circumstances, such as when
        <productname>PostgreSQL</productname> is being invoked by clusterware, it may be
        useful to disable the restart so that the clusterware can gain
        control and take any actions it deems appropriate.
-->
デフォルトであるonの場合、<productname>PostgreSQL</productname>はバックエンドのクラッシュの後、自動的に再初期化を行います。
この値を真のままにしておくことが、通常データベースの可用性を最大化する最適の方法です。
しかし、 <productname>PostgreSQL</productname>がクラスタウェアにより起動された時のような状況では、クラスタウェアが制御を獲得して、適切とみなすいかなる振る舞いをも行えるように再起動を無効にすることが有益かもしれません。
       </para>

       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-data-sync-retry" xreflabel="data_sync_retry">
      <term><varname>data_sync_retry</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>data_sync_retry</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>data_sync_retry</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When set to off, which is the default, <productname>PostgreSQL</productname>
        will raise a PANIC-level error on failure to flush modified data files
        to the file system.  This causes the database server to crash.  This
        parameter can only be set at server start.
-->
デフォルトであるoffに設定すると、<productname>PostgreSQL</productname>は変更されたデータファイルのファイルシステムへのフラッシュの失敗に対してPANICレベルのエラーを発生させます。
これによりデータベースサーバのクラッシュが引き起こされます。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
       <para>
<!--
        On some operating systems, the status of data in the kernel's page
        cache is unknown after a write-back failure.  In some cases it might
        have been entirely forgotten, making it unsafe to retry; the second
        attempt may be reported as successful, when in fact the data has been
        lost.  In these circumstances, the only way to avoid data loss is to
        recover from the WAL after any failure is reported, preferably
        after investigating the root cause of the failure and replacing any
        faulty hardware.
-->
オペレーティングシステムによっては、カーネルキャッシュのページ内のデータの状態は、書き戻しの失敗の後は不明です。
完全に忘れられてしまった場合には、再試行することが危険であるかもしれません。
二度目の試行は成功と報告されるかもしれませんが、実際にはデータが失われているかもしれません。
このような状況では、データロスを避ける唯一の方法は、失敗が報告された後、可能ならば失敗の根本原因を調査して故障したハードウェアを交換したのち、WALからの回復することだけです。
       </para>
       <para>
<!--
        If set to on, <productname>PostgreSQL</productname> will instead
        report an error but continue to run so that the data flushing
        operation can be retried in a later checkpoint.  Only set it to on
        after investigating the operating system's treatment of buffered data
        in case of write-back failure.
-->
onに設定すると、代わりに<productname>PostgreSQL</productname>はエラーを報告して実行を継続し、後のチェックポイントでデータのフラッシュをリトライします。
書き戻しの失敗が起きたときのオペレーティングシステムのバッファデータの扱いを調査した後でのみonに設定してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-init-sync-method" xreflabel="recovery_init_sync_method">
      <term><varname>recovery_init_sync_method</varname> (<type>enum</type>)
       <indexterm>
        <primary><varname>recovery_init_sync_method</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>recovery_init_sync_method</varname>設定パラメータ</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When set to <literal>fsync</literal>, which is the default,
        <productname>PostgreSQL</productname> will recursively open and
        synchronize all files in the data directory before crash recovery
        begins.  The search for files will follow symbolic links for the WAL
        directory and each configured tablespace (but not any other symbolic
        links).  This is intended to make sure that all WAL and data files are
        durably stored on disk before replaying changes.  This applies whenever
        starting a database cluster that did not shut down cleanly, including
        copies created with <application>pg_basebackup</application>.
-->
デフォルトである<literal>fsync</literal>に設定すると、<productname>PostgreSQL</productname>はクラッシュリカバリを開始する前に、再帰的にデータディレクトリ内のすべてのファイルを開いて同期します。
ファイルの探索は、WALディレクトリと設定されているテーブル空間へのシンボリックリンクを追跡します（他のシンボリックリンクは追跡しません）。
これはリプレイを開始する前に、すべてのWALとデータファイルをディスクに恒久的に書くことを確実にすることを意図しています。
これは、<application>pg_basebackup</application>で作られた複製も含めて、正しく停止されなかったデータベースクラスタを起動する際には必ず適用されます。
       </para>
       <para>
<!--
        On Linux, <literal>syncfs</literal> may be used instead, to ask the
        operating system to synchronize the file systems that contain the
        data directory, the WAL files and each tablespace (but not any other
        file systems that may be reachable through symbolic links).  This may
        be a lot faster than the <literal>fsync</literal> setting, because it
        doesn't need to open each file one by one.  On the other hand, it may
        be slower if a file system is shared by other applications that
        modify a lot of files, since those files will also be written to disk.
        Furthermore, on versions of Linux before 5.8, I/O errors encountered
        while writing data to disk may not be reported to
        <productname>PostgreSQL</productname>, and relevant error messages may
        appear only in kernel logs.
-->
Linuxでは代わりに、オペレーティングシステムに対して、データディレクトリ、WALファイル、各々のテーブル空間（しかし、シンボリックリンクを通じて到達可能な他のファイルシステムを含みません）を含むファイルシステムを同期することを依頼する<literal>syncfs</literal>が使えるかもしれません。
これは各々のファイルを一つ一つ開けることが必要ないため、<literal>fsync</literal>を設定するよりもずっと速いかもしれません。
一方で、そのファイルシステムが多くのファイルを変更するアプリケーションも利用している場合、これらのファイルもディスクに書かれるので、遅くなるかもしれません。
更に、Linuxのバージョン5.8以前では、ディスクへの書き込み中に発生したI/Oエラーが<productname>PostgreSQL</productname>に報告されないことがあり、関連エラーメッセージはカーネルログにのみ現れるかもしれません。
       </para>
       <para>
<!--
        This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>

   </sect1>

   <sect1 id="runtime-config-preset">
<!--
    <title>Preset Options</title>
-->
    <title>設定済みのオプション</title>

    <para>
<!--
     The following <quote>parameters</quote> are read-only.
     As such, they have been excluded from the sample
     <filename>postgresql.conf</filename> file.  These options report
     various aspects of <productname>PostgreSQL</productname> behavior
     that might be of interest to certain applications, particularly
     administrative front-ends.
     Most of them are determined when <productname>PostgreSQL</productname>
     is compiled or when it is installed.
-->
以下の<quote>パラメータ</quote>は読み取り専用です。
そのため、これらは<filename>postgresql.conf</filename>のサンプルから除かれています。
このオプションは、特定のアプリケーション、特に管理用フロントエンドによって注目される可能性がある<productname>PostgreSQL</productname>の様々な部分の振舞いを報告します。
これらのうち多くは<productname>PostgreSQL</productname>のコンパイル時、もしくはインストール時に決定されます。
    </para>

    <variablelist>

     <varlistentry id="guc-block-size" xreflabel="block_size">
      <term><varname>block_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>block_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>block_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the size of a disk block.  It is determined by the value
        of <literal>BLCKSZ</literal> when building the server. The default
        value is 8192 bytes.  The meaning of some configuration
        variables (such as <xref linkend="guc-shared-buffers"/>) is
        influenced by <varname>block_size</varname>. See <xref
        linkend="runtime-config-resource"/> for information.
-->
ディスクブロックの容量を報告します。
サーバ構築の際に<literal>BLCKSZ</literal>の値で決定されます。デフォルトの値は8192バイトです。
（<xref linkend="guc-shared-buffers"/>の様な）いくつかの構成変数の意味は<varname>block_size</varname>によって影響されます。
これに関しての情報は<xref linkend="runtime-config-resource"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-data-checksums" xreflabel="data_checksums">
      <term><varname>data_checksums</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>data_checksums</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>data_checksums</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports whether data checksums are enabled for this cluster.
        See <xref linkend="app-initdb-data-checksums"/> for more information.
-->
このクラスタでデータチェックサムが有効になっているかどうかを報告します。
詳細は<xref linkend="app-initdb-data-checksums"/>を見てください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-data-directory-mode" xreflabel="data_directory_mode">
      <term><varname>data_directory_mode</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>data_directory_mode</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>data_directory_mode</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        On Unix systems this parameter reports the permissions the data
        directory (defined by <xref linkend="guc-data-directory"/>)
        had at server startup.
        (On Microsoft Windows this parameter will always display
        <literal>0700</literal>.) See
        <link linkend="app-initdb-allow-group-access">the
        <application>initdb</application> <option>-g</option> option</link>
        for more information.
-->
《マッチ度[67.292225]》このパラメータは、Unixシステムでは起動時のデータディレクトリのパーミッション（<xref linkend="guc-data-directory"/>により定義されます）を報告します。
（Microsoft Windowsではこのパラメータは常に<literal>0700</literal>を表示します。）
さらなる情報は<xref linkend="app-initdb-allow-group-access"/>をご覧ください。
《機械翻訳》Unixシステムでは、このパラメータはデータディレクトリ（<xref linkend="guc-data-directory"/>によって定義される）がサーバスタートアップで持っていた権限を報告します(Microsoft Windowsでは、このパラメータは常にディスプレイです。
詳細は<link linkend="app-initdb-allow-group-access"><application>initdb</application><option>-g</option>オプション</link>を参照してください。
<literal>0700</literal>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-assertions" xreflabel="debug_assertions">
      <term><varname>debug_assertions</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_assertions</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>debug_assertions</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports whether <productname>PostgreSQL</productname> has been built
        with assertions enabled. That is the case if the
        macro <symbol>USE_ASSERT_CHECKING</symbol> is defined
        when <productname>PostgreSQL</productname> is built (accomplished
        e.g., by the <command>configure</command> option
        <option>&#45;-enable-cassert</option>). By
        default <productname>PostgreSQL</productname> is built without
        assertions.
-->
<productname>PostgreSQL</productname>がアサーションを有効にしてビルドされているかどうかを報告します。
これは、<symbol>USE_ASSERT_CHECKING</symbol>マクロが<productname>PostgreSQL</productname>をビルドされた際に定義されている場合(つまり、<command>configure</command>オプションの<option>--enable-cassert</option>が適用されている)に該当します。
デフォルトでは<productname>PostgreSQL</productname>は、アサーションなしにビルドされます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-huge-pages-status" xreflabel="huge_pages_status">
      <term><varname>huge_pages_status</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>huge_pages_status</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>huge_pages_status</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the state of huge pages in the current instance:
        <literal>on</literal>, <literal>off</literal>, or
        <literal>unknown</literal> (if displayed with
        <literal>postgres -C</literal>).
        This parameter is useful to determine whether allocation of huge pages
        was successful under <literal>huge_pages=try</literal>.
        See <xref linkend="guc-huge-pages"/> for more information.
-->
現在インスタンスのhuge pagesの状態を報告します:<literal>on</literal>、<literal>off</literal>、または<literal>unknown</literal>のどれかです（<literal>postgres -C</literal>で表示される場合）。
このパラメータは、<literal>huge_pages=try</literal>でhuge pagesのアロケーションが成功したかどうかを判断するのに役立ちます。
詳細については、<xref linkend="guc-huge-pages"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-integer-datetimes" xreflabel="integer_datetimes">
      <term><varname>integer_datetimes</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>integer_datetimes</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>integer_datetimes</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports whether <productname>PostgreSQL</productname> was built with support for
        64-bit-integer dates and times.  As of <productname>PostgreSQL</productname> 10,
        this is always <literal>on</literal>.
-->
<productname>PostgreSQL</productname>が64ビット整数による日付と時刻のサポート付きで構築されたかどうかを報告します。
<productname>PostgreSQL</productname> 10では、これは常に<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-in-hot-standby" xreflabel="in_hot_standby">
      <term><varname>in_hot_standby</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>in_hot_standby</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>in_hot_standby</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports whether the server is currently in hot standby mode.  When
        this is <literal>on</literal>, all transactions are forced to be
        read-only.  Within a session, this can change only if the server is
        promoted to be primary.  See <xref linkend="hot-standby"/> for more
        information.
-->
サーバが現在ホットスタンバイモードかどうかを報告します。
これが<literal>on</literal>の時は、すべてのトランザクションは読み取り専用を強制されます。
セッション中ではこれはサーバがプライマリに昇格するときだけ変更できます。
詳細は<xref linkend="hot-standby"/>をご覧ください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-function-args" xreflabel="max_function_args">
      <term><varname>max_function_args</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_function_args</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_function_args</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the maximum number of function arguments. It is determined by
        the value of <literal>FUNC_MAX_ARGS</literal> when building the server. The
        default value is 100 arguments.
-->
関数の引数の最大数を報告します。
サーバを構築する時、<literal>FUNC_MAX_ARGS</literal>の値で決定されます。
デフォルトの値は100引数です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-identifier-length" xreflabel="max_identifier_length">
      <term><varname>max_identifier_length</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_identifier_length</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_identifier_length</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the maximum identifier length. It is determined as one
        less than the value of <literal>NAMEDATALEN</literal> when building
        the server. The default value of <literal>NAMEDATALEN</literal> is
        64; therefore the default
        <varname>max_identifier_length</varname> is 63 bytes, which
        can be less than 63 characters when using multibyte encodings.
-->
最長の識別子の長さを報告します。
サーバ構築時の<literal>NAMEDATALEN</literal>の値より一つ少なく設定されます。
デフォルトの<literal>NAMEDATALEN</literal>の値は64ですので、デフォルトの<varname>max_identifier_length</varname>は63バイトで、マルチバイト符号化方式を使用している場合、63文字以下になることがあります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-index-keys" xreflabel="max_index_keys">
      <term><varname>max_index_keys</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_index_keys</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_index_keys</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the maximum number of index keys. It is determined by
        the value of <literal>INDEX_MAX_KEYS</literal> when building the server. The
        default value is 32 keys.
-->
インデックスキーの最大数を報告します。サーバをビルドする際に<literal>INDEX_MAX_KEYS</literal>の値で決定されます。デフォルトの値は32キーです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-num-os-semaphores" xreflabel="num_os_semaphores">
      <term><varname>num_os_semaphores</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>num_os_semaphores</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the number of semaphores that are needed for the server based
        on the configured number of allowed connections
        (<xref linkend="guc-max-connections"/>), allowed autovacuum worker
        processes (<xref linkend="guc-autovacuum-max-workers"/>), allowed WAL
        sender processes (<xref linkend="guc-max-wal-senders"/>), allowed
        background processes (<xref linkend="guc-max-worker-processes"/>), etc.
-->
《機械翻訳》許可された接続(<xref linkend="guc-max-connections"/>)、許可されたサーバオートバキュームプロセス(<xref linkend="guc-autovacuum-max-workers"/>)、許可されたWAL送信者プロセス(<xref linkend="guc-max-wal-senders"/>)、許可されたワーカープロセス(<xref linkend="guc-max-worker-processes"/>)などの設定された数に基づいたバックグラウンドで必要とされるセマフォの数を報告します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-segment-size" xreflabel="segment_size">
      <term><varname>segment_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>segment_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>segment_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the number of blocks (pages) that can be stored within a file
        segment.  It is determined by the value of <literal>RELSEG_SIZE</literal>
        when building the server.  The maximum size of a segment file in bytes
        is equal to <varname>segment_size</varname> multiplied by
        <varname>block_size</varname>; by default this is 1GB.
-->
あるファイルセグメントの中に格納できるブロック数（ページ数）を報告します。
サーバ構築時に<literal>RELSEG_SIZE</literal>の値で決定されます。
バイト単位の一セグメントファイルの最大容量は、<varname>block_size</varname>倍の<varname>segment_size</varname>と等しくなります。デフォルトでは1GBです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-server-encoding" xreflabel="server_encoding">
      <term><varname>server_encoding</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>server_encoding</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>server_encoding</varname>設定パラメータ</primary>
      </indexterm>
      <indexterm><primary>character set</primary></indexterm>
      <indexterm><primary>文字集合</primary></indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the database encoding (character set).
        It is determined when the database is created.  Ordinarily,
        clients need only be concerned with the value of <xref
        linkend="guc-client-encoding"/>.
-->
データベース符号化方式（文字集合）を報告します。
データベースが作成された時に決定されます。通常クライアントは<xref linkend="guc-client-encoding"/>の値にのみ注意する必要があります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-server-version" xreflabel="server_version">
      <term><varname>server_version</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>server_version</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>server_version</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the version number of the server. It is determined by the
        value of <literal>PG_VERSION</literal> when building the server.
-->
サーバのバージョン番号を報告します。
サーバ構築の際の<literal>PG_VERSION</literal>の値によって決定されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-server-version-num" xreflabel="server_version_num">
      <term><varname>server_version_num</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>server_version_num</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>server_version_num</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the version number of the server as an integer. It is determined
        by the value of <literal>PG_VERSION_NUM</literal> when building the server.
-->
サーバのバージョン番号を整数として返します。
この値は、サーバ構築時の<literal>PG_VERSION_NUM</literal>の値により決まります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-shared-memory-size" xreflabel="shared_memory_size">
      <term><varname>shared_memory_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>shared_memory_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>shared_memory_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the size of the main shared memory area, rounded up to the
        nearest megabyte.
-->
主共有メモリ領域のサイズを報告します。
最も近いメガバイト単位に切り上げられます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-shared-memory-size-in-huge-pages" xreflabel="shared_memory_size_in_huge_pages">
      <term><varname>shared_memory_size_in_huge_pages</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>shared_memory_size_in_huge_pages</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>shared_memory_size_in_huge_pages</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the number of huge pages that are needed for the main shared
        memory area based on the specified <xref linkend="guc-huge-page-size"/>.
        If huge pages are not supported, this will be <literal>-1</literal>.
-->
指定された<xref linkend="guc-huge-page-size"/>に基づいて、主共有メモリ領域に必要な巨大ページの数を報告します。
巨大ページがサポートされていない場合、<literal>-1</literal>になります。
       </para>
       <para>
<!--
        This setting is supported only on <productname>Linux</productname>.  It
        is always set to <literal>-1</literal> on other platforms.  For more
        details about using huge pages on <productname>Linux</productname>, see
        <xref linkend="linux-huge-pages"/>.
-->
この設定は<productname>Linux</productname>でのみサポートされています。
他のプラットフォームでは常に<literal>-1</literal>に設定されます。
<productname>Linux</productname>で巨大なページを使うための詳細は<xref linkend="linux-huge-pages"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-library" xreflabel="ssl_library">
      <term><varname>ssl_library</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_library</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ssl_library</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the name of the SSL library that this
        <productname>PostgreSQL</productname> server was built with (even if
        SSL is not currently configured or in use on this instance), for
        example <literal>OpenSSL</literal>, or an empty string if none.
-->
（このインスタンスでSSLが設定あるいは使用されていなくても）この<productname>PostgreSQL</productname>サーバの構築時に使用されたSSLライブラリの名前、たとえば<literal>OpenSSL</literal>あるいは空文字列、を報告します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-block-size" xreflabel="wal_block_size">
      <term><varname>wal_block_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_block_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_block_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the size of a WAL disk block.  It is determined by the value
        of <literal>XLOG_BLCKSZ</literal> when building the server. The default value
        is 8192 bytes.
-->
WALディスクブロックの容量を報告します。
サーバ構築時に<literal>XLOG_BLCKSZ</literal>の値で決定されます。デフォルトの値は8192バイトです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-segment-size" xreflabel="wal_segment_size">
      <term><varname>wal_segment_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_segment_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_segment_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Reports the size of write ahead log segments.  The default value is
        16MB. See <xref linkend="wal-configuration"/> for more information.
-->
先行書き込みログ（WAL）のセグメントの大きさを報告します。
デフォルト値は16MBです。
さらなる詳細については<xref linkend="wal-configuration"/>をご覧ください。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect1>

   <sect1 id="runtime-config-custom">
<!--
    <title>Customized Options</title>
-->
    <title>独自のオプション</title>

    <para>
<!--
     This feature was designed to allow parameters not normally known to
     <productname>PostgreSQL</productname> to be added by add-on modules
     (such as procedural languages).  This allows extension modules to be
     configured in the standard ways.
-->
この機能は追加モジュール（手続き言語など）によって追加される<productname>PostgreSQL</productname>が識別できないパラメータを使えるように設計されたものです。
これにより拡張モジュールは標準の方法で構成されます。
    </para>

    <para>
<!--
     Custom options have two-part names: an extension name, then a dot, then
     the parameter name proper, much like qualified names in SQL.  An example
     is <literal>plpgsql.variable_conflict</literal>.
-->
カスタムオプションには２つに分かれた名称があります。拡張名につづいてドット、そして特定のパラメータ名です。SQLの修飾名に良く似ています。
例として<literal>plpgsql.variable_conflict</literal>が挙げられます。
    </para>

    <para>
<!--
     Because custom options may need to be set in processes that have not
     loaded the relevant extension module, <productname>PostgreSQL</productname>
     will accept a setting for any two-part parameter name.  Such variables
     are treated as placeholders and have no function until the module that
     defines them is loaded. When an extension module is loaded, it will add
     its variable definitions and convert any placeholder values according to
     those definitions.  If there are any unrecognized placeholders
     that begin with its extension name, warnings are issued and those
     placeholders are removed.
-->
カスタムオプションは読み込まれていない関連性のある拡張モジュールのプロセスに設定される必要がある場合があるので、<productname>PostgreSQL</productname>はどんな２つの部分のパラメータ名による設定を受け付けます。これらの変数は代替物として取り扱われ、それらを定義したモジュールが読み込まれるまで機能しません。
拡張モジュールが読み込まれた時、その変数定義が追加され、それら定義に基づいてプレースホルダ値が変換されます。
拡張名で始まる認識できないプレースホルダに対しては警告が発せられ、そのプレースホルダは削除されます。
    </para>
   </sect1>

   <sect1 id="runtime-config-developer">
<!--
    <title>Developer Options</title>
-->
    <title>開発者向けオプション</title>

    <para>
<!--
     The following parameters are intended for developer testing, and
     should never be used on a production database.  However, some of
     them can be used to assist with the recovery of severely damaged
     databases.  As such, they have been excluded from the sample
     <filename>postgresql.conf</filename> file.  Note that many of these
     parameters require special source compilation flags to work at all.
-->
以下のパラメータは、開発者のテスト用であり、決して実運用のデータベースに使わないでください。
しかし、中には深刻な損傷を負ったデータベースの復旧に役立つものもあります。
したがって、これらはサンプルの<filename>postgresql.conf</filename>からは除外されています。
これらのパラメータの多くは、それを動作させるために特殊なソースコンパイルを必要としていることに注意してください。
    </para>

    <variablelist>
     <varlistentry id="guc-allow-in-place-tablespaces" xreflabel="allow_in_place_tablespaces">
      <term><varname>allow_in_place_tablespaces</varname> (<type>boolean</type>)
      <indexterm>
        <primary><varname>allow_in_place_tablespaces</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>allow_in_place_tablespaces</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Allows tablespaces to be created as directories inside
        <filename>pg_tblspc</filename>, when an empty location string
        is provided to the <command>CREATE TABLESPACE</command> command.  This
        is intended to allow testing replication scenarios where primary and
        standby servers are running on the same machine.  Such directories
        are likely to confuse backup tools that expect to find only symbolic
        links in that location.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
<command>CREATE TABLESPACE</command>コマンドに空の位置文字列が渡された時に、<filename>pg_tblspc</filename>内にテーブル空間をディレクトリとして作ることを可能にします。
これは、プライマリとスタンバイサーバが同じマシン上で実行されるレプリケーションシナリオをテストするために使用することを意図しています。
このようなディレクトリは、その場所にシンボリックリンクだけが見つかることを期待しているバックアップツールを混乱させる可能性が高いでしょう。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-allow-system-table-mods" xreflabel="allow_system_table_mods">
      <term><varname>allow_system_table_mods</varname> (<type>boolean</type>)
      <indexterm>
        <primary><varname>allow_system_table_mods</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>allow_system_table_mods</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Allows modification of the structure of system tables as well as
        certain other risky actions on system tables.  This is otherwise not
        allowed even for superusers.  Ill-advised use of this setting can
        cause irretrievable data loss or seriously corrupt the database
        system.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
システムテーブルの構造変更とその他の危険性の高いシステムテーブルに対するアクションを許可します。
これは通常スーパーユーザにさえ許可されません。
この設定の無分別な使用は回復不能なデータ喪失やデータベースシステムの重大な破損を招きます。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-backtrace-functions" xreflabel="backtrace_functions">
      <term><varname>backtrace_functions</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>backtrace_functions</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>backtrace_functions</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter contains a comma-separated list of C function names.
        If an error is raised and the name of the internal C function where
        the error happens matches a value in the list, then a backtrace is
        written to the server log together with the error message.  This can
        be used to debug specific areas of the source code.
-->
このパラメータはカンマ区切りのC関数名を含みます。
エラーが発生し、エラー発生箇所の内部C関数がこのリストの値と一致すると、エラーメッセージとともにバックトレースが一緒にサーバログに書かれます。
これはソースコードの特定箇所をデバッグするのに役立ちます。
       </para>

       <para>
<!--
        Backtrace support is not available on all platforms, and the quality
        of the backtraces depends on compilation options.
-->
バックトレースのサポートはすべてのプラットフォームで提供されているわけではありませんし、バックトレースの品質はコンパイルオプションに依存します。
       </para>

       <para>
<!--
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
この設定を変更できるのは、スーパーユーザと適切な<literal>SET</literal>権限を持つユーザだけです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-copy-parse-plan-trees" xreflabel="debug_copy_parse_plan_trees">
      <term><varname>debug_copy_parse_plan_trees</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_copy_parse_plan_trees</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enabling this forces all parse and plan trees to be passed through
        <function>copyObject()</function>, to facilitate catching errors and
        omissions in <function>copyObject()</function>.  The default is off.
-->
《機械翻訳》これを有効にすると、すべての解析と計画の木が強制的に通過され<function>copyObject()</function>、<function>copyObject()</function>のエラーや脱落を見つけやすくなります。
デフォルトはオフです。
       </para>

       <para>
<!--
        This parameter is only available when
        <symbol>DEBUG_NODE_TESTS_ENABLED</symbol> was defined at compile time
        (which happens automatically when using the
        <application>configure</application> option
        <option>&#45;-enable-cassert</option>).
-->
《機械翻訳》このパラメータは、<symbol>DEBUG_NODE_TESTS_ENABLED</symbol>がコンパイル時間に定義された場合にのみ使用できます。
これは<application>configure</application>オプション<option>--enable-cassert</option>を使用すると自動的に行われます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-discard-caches" xreflabel="debug_discard_caches">
      <term><varname>debug_discard_caches</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>debug_discard_caches</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>debug_discard_caches</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When set to <literal>1</literal>, each system catalog cache entry is
        invalidated at the first possible opportunity, whether or not
        anything that would render it invalid really occurred.  Caching of
        system catalogs is effectively disabled as a result, so the server
        will run extremely slowly.  Higher values run the cache invalidation
        recursively, which is even slower and only useful for testing
        the caching logic itself.  The default value of <literal>0</literal>
        selects normal catalog caching behavior.
-->
<literal>1</literal>なら、可能な最初の機会にシステムカタログのキャッシュ項目が破棄されます。
すべてのキャッシュ項目を無効にするすべてのことが実際に起きます。
結果としてシステムカタログのキャッシュが無効になり、サーバは極めて低速に動作します。
1より大きければ、再帰的にキャッシュを削除します。
これは更に遅くなり、キャッシュのロジック自体をテストするときにだけ役に立ちます。
デフォルト値の<literal>0</literal>で正常なカタログキャッシュは通常の動作になります。
       </para>

       <para>
<!--
        This parameter can be very helpful when trying to trigger
        hard-to-reproduce bugs involving concurrent catalog changes, but it
        is otherwise rarely needed.  See the source code files
        <filename>inval.c</filename> and
        <filename>pg_config_manual.h</filename> for details.
-->
このパラメータは並行的なカタログの変更を伴う再現しにくいバグを引き起こす際にとても役に立ちますが、それ以外にはめったに必要になりません。
詳細は<filename>inval.c</filename>と<filename>pg_config_manual.h</filename>のソースコードファイルを見てください。
       </para>

       <para>
<!--
        This parameter is supported when
        <symbol>DISCARD_CACHES_ENABLED</symbol> was defined at compile time
        (which happens automatically when using the
        <application>configure</application> option
        <option>&#45;-enable-cassert</option>).  In production builds, its value
        will always be <literal>0</literal> and attempts to set it to another
        value will raise an error.
-->
このパラメータはコンパイル時に<symbol>DISCARD_CACHES_ENABLED</symbol>が定義されたとき（これは<application>configure</application>オプションの<option>--enable-cassert</option>が使われたときに自動的に起こります）にサポートされます。
実運用のビルドでは<literal>0</literal>となり、それ以外の値に設定しようとするとエラーが起こります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-io-direct" xreflabel="debug_io_direct">
      <term><varname>debug_io_direct</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>debug_io_direct</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>debug_io_direct</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Ask the kernel to minimize caching effects for relation data and WAL
        files using <literal>O_DIRECT</literal> (most Unix-like systems),
        <literal>F_NOCACHE</literal> (macOS) or
        <literal>FILE_FLAG_NO_BUFFERING</literal> (Windows).
-->
リレーションデータとWALファイルに対して、<literal>O_DIRECT</literal>（ほとんどのUnixライクなシステム）、<literal>F_NOCACHE</literal>（macOS）、<literal>FILE_FLAG_NO_BUFFERING</literal> （Windows）を使って、キャッシュ効果を最小にするようカーネルに依頼します。
       </para>
       <para>
<!--
        May be set to an empty string (the default) to disable use of direct
        I/O, or a comma-separated list of operations that should use direct I/O.
        The valid options are <literal>data</literal> for
        main data files, <literal>wal</literal> for WAL files, and
        <literal>wal_init</literal> for WAL files when being initially
        allocated.
-->
空文字列（デフォルト）を設定してダイレクトI/Oの使用を無効にすることも、カンマで区切られたリストを設定してダイレクトI/Oを使用するようにすることもできます。
有効なオプションは、メインデータファイルの場合は<literal>data</literal>、WALファイルの場合は<literal>wal</literal>、最初に割り当てられたWALファイルの場合は<literal>wal_init</literal>です。
       </para>
       <para>
<!--
        Some operating systems and file systems do not support direct I/O, so
        non-default settings may be rejected at startup or cause errors.
-->
一部のオペレーティングシステムおよびファイルシステムでは、ダイレクトI/Oが行われないため、デフォルト以外の設定が起動時に拒否されたり、エラーが発生したりする場合があります。
       </para>
       <para>
<!--
        Currently this feature reduces performance, and is intended for
        developer testing only.
-->
今の所、この機能はパフォーマンスを悪くするので、開発者のテストのみを目的としています。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-parallel-query" xreflabel="debug_parallel_query">
      <term><varname>debug_parallel_query</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>debug_parallel_query</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>debug_parallel_query</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Allows the use of parallel queries for testing purposes even in cases
        where no performance benefit is expected.
        The allowed values of <varname>debug_parallel_query</varname> are
        <literal>off</literal> (use parallel mode only when it is expected to improve
        performance), <literal>on</literal> (force parallel query for all queries
        for which it is thought to be safe), and <literal>regress</literal> (like
        <literal>on</literal>, but with additional behavior changes as explained
        below).
-->
性能改善が期待できなくても、テスト目的のためにパラレルクエリを利用できるようにします。
<varname>debug_parallel_query</varname>に設定できる値は、<literal>off</literal>（性能改善が期待できるときにだけパラレルクエリを使用する）、<literal>on</literal>（安全なクエリに対しては常にパラレルクエリを強制する）、<literal>regress</literal>（<literal>on</literal>と同様だが、下記のような振る舞いの変更を伴う）です。
       </para>

       <para>
<!--
        More specifically, setting this value to <literal>on</literal> will add
        a <literal>Gather</literal> node to the top of any query plan for which this
        appears to be safe, so that the query runs inside of a parallel worker.
        Even when a parallel worker is not available or cannot be used,
        operations such as starting a subtransaction that would be prohibited
        in a parallel query context will be prohibited unless the planner
        believes that this will cause the query to fail.  If failures or
        unexpected results occur when this option is set, some functions used
        by the query may need to be marked <literal>PARALLEL UNSAFE</literal>
        (or, possibly, <literal>PARALLEL RESTRICTED</literal>).
-->
正確に言えば、この値を<literal>on</literal>にすると、安全と見なされるすべての問い合わせ計画の上に<literal>Gather</literal>ノードを追加し、クエリをパラレルワーカー上で実行するようにします。
プランナがこれによってクエリが失敗すると思わない限り、パラレルワーカーが利用できない、あるいは使用できないような場合でも、たとえばサブトランザクションの開始のように、パラレルクエリコンテキストでは許可されない操作は不許可となります。
このオプションを設定することによって、エラーとなったり、あるいは期待していなかった結果がもたらされる場合には、クエリで使用されている関数は<literal>PARALLEL UNSAFE</literal>（もしくは、<literal>PARALLEL RESTRICTED</literal>）と印を付ける必要があるかもしません。
       </para>

       <para>
<!--
        Setting this value to <literal>regress</literal> has all of the same effects
        as setting it to <literal>on</literal> plus some additional effects that are
        intended to facilitate automated regression testing.  Normally,
        messages from a parallel worker include a context line indicating that,
        but a setting of <literal>regress</literal> suppresses this line so that the
        output is the same as in non-parallel execution.  Also,
        the <literal>Gather</literal> nodes added to plans by this setting are hidden
        in <literal>EXPLAIN</literal> output so that the output matches what
        would be obtained if this setting were turned <literal>off</literal>.
-->
この設定値を<literal>regress</literal>とすると、<literal>on</literal>とするのに加え、自動リグレッションテストを助けるための付加的な効果が現れます。
通常パラレルワーカーからのメッセージは、そのことを表すコンテキスト行を表示しますが、<literal>regress</literal>と設定すると、非パラレル実行と同じ出力になるように、これを抑止します。
また、プランに追加された<literal>Gather</literal>ノードは、<literal>EXPLAIN</literal>出力から隠され、<literal>off</literal>に設定したときと同じ出力が得られるようにします。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-raw-expression-coverage-test" xreflabel="debug_raw_expression_coverage_test">
      <term><varname>debug_raw_expression_coverage_test</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_raw_expression_coverage_test</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enabling this forces all raw parse trees for DML statements to be
        scanned by <function>raw_expression_tree_walker()</function>, to
        facilitate catching errors and omissions in that function.  The
        default is off.
-->
《機械翻訳》これを有効にすると、DML文のすべての未処理の解析が強制的に<function>raw_expression_tree_walker()</function>でスキャンされ、その関数のエラーや脱落の検出が容易になります。
デフォルトはオフです。
       </para>

       <para>
<!--
        This parameter is only available when
        <symbol>DEBUG_NODE_TESTS_ENABLED</symbol> was defined at compile time
        (which happens automatically when using the
        <application>configure</application> option
        <option>&#45;-enable-cassert</option>).
-->
《機械翻訳》このパラメータは、<symbol>DEBUG_NODE_TESTS_ENABLED</symbol>がコンパイル時間に定義された場合にのみ使用できます。
これは<application>configure</application>オプション<option>--enable-cassert</option>を使用すると自動的に行われます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-write-read-parse-plan-trees" xreflabel="debug_write_read_parse_plan_trees">
      <term><varname>debug_write_read_parse_plan_trees</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_write_read_parse_plan_trees</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enabling this forces all parse and plan trees to be passed through
        <filename>outfuncs.c</filename>/<filename>readfuncs.c</filename>, to
        facilitate catching errors and omissions in those modules.  The
        default is off.
-->
《機械翻訳》これを有効にすると、すべての解析と計画モジュールが強制的に通過され<filename>outfuncs.c</filename>/<filename>readfuncs.c</filename>、これらのデフォルトのエラーや脱落の検出を容易にします。
樹木はオフです。
       </para>

       <para>
<!--
        This parameter is only available when
        <symbol>DEBUG_NODE_TESTS_ENABLED</symbol> was defined at compile time
        (which happens automatically when using the
        <application>configure</application> option
        <option>&#45;-enable-cassert</option>).
-->
《機械翻訳》このパラメータは、<symbol>DEBUG_NODE_TESTS_ENABLED</symbol>がコンパイル時間に定義された場合にのみ使用できます。
これは<application>configure</application>オプション<option>--enable-cassert</option>を使用すると自動的に行われます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ignore-system-indexes" xreflabel="ignore_system_indexes">
      <term><varname>ignore_system_indexes</varname> (<type>boolean</type>)
      <indexterm>
        <primary><varname>ignore_system_indexes</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ignore_system_indexes</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Ignore system indexes when reading system tables (but still
        update the indexes when modifying the tables).  This is useful
        when recovering from damaged system indexes.
        This parameter cannot be changed after session start.
-->
システムテーブルの読み込み時にシステムインデックスを無視します（しかしテーブルが更新された時はインデックスを更新します）。
障害があるシステムインデックスを復旧する時、これは有用です。
セッションが始まった後に、このパラメータを変更することはできません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-post-auth-delay" xreflabel="post_auth_delay">
      <term><varname>post_auth_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>post_auth_delay</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>post_auth_delay</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The amount of time to delay when a new
        server process is started, after it conducts the
        authentication procedure.  This is intended to give developers an
        opportunity to attach to the server process with a debugger.
        If this value is specified without units, it is taken as seconds.
        A value of zero (the default) disables the delay.
        This parameter cannot be changed after session start.
-->
サーバプロセスが始まり認証手続きが終わった後の遅延時間です。
これは、デバッガを使用してサーバプロセスに接続する機会を開発者に提供することを目的としています。
この値が単位なしで指定された場合は、秒単位であるとみなします。
値がゼロ（デフォルト）の場合、この遅延は無効になります。
セッションが始まった後に、このパラメータを変更することはできません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-pre-auth-delay" xreflabel="pre_auth_delay">
      <term><varname>pre_auth_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>pre_auth_delay</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>pre_auth_delay</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The amount of time to delay just after a
        new server process is forked, before it conducts the
        authentication procedure.  This is intended to give developers an
        opportunity to attach to the server process with a debugger to
        trace down misbehavior in authentication.
        If this value is specified without units, it is taken as seconds.
        A value of zero (the default) disables the delay.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
新しくサーバプロセスがforkした後、認証手続きに入る前の遅延時間です。
これは、認証における誤動作を追跡するために、デバッガを使用してサーバプロセスに接続する機会を開発者に提供することを目的としたものです。
この値が単位なしで指定された場合は、秒単位であるとみなします。
値がゼロ（デフォルト）の場合、この機能は無効になります。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-notify" xreflabel="trace_notify">
      <term><varname>trace_notify</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_notify</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>trace_notify</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Generates a great amount of debugging output for the
        <command>LISTEN</command> and <command>NOTIFY</command>
        commands.  <xref linkend="guc-client-min-messages"/> or
        <xref linkend="guc-log-min-messages"/> must be
        <literal>DEBUG1</literal> or lower to send this output to the
        client or server logs, respectively.
-->
<command>LISTEN</command>と<command>NOTIFY</command>コマンドのための大量なデバッグ出力を生成します。
この出力をクライアントもしくはサーバログに送信するためには、それぞれ、<xref linkend="guc-client-min-messages"/>もしくは<xref linkend="guc-log-min-messages"/>は<literal>DEBUG1</literal>以下でなければなりません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-sort" xreflabel="trace_sort">
      <term><varname>trace_sort</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_sort</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>trace_sort</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If on, emit information about resource usage during sort operations.
-->
《機械翻訳》オンの場合、ソート操作中のリソース使用に関する情報が放出されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-locks" xreflabel="trace_locks">
      <term><varname>trace_locks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_locks</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>trace_locks</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If on, emit information about lock usage.  Information dumped
        includes the type of lock operation, the type of lock and the unique
        identifier of the object being locked or unlocked.  Also included
        are bit masks for the lock types already granted on this object as
        well as for the lock types awaited on this object.  For each lock
        type a count of the number of granted locks and waiting locks is
        also dumped as well as the totals.  An example of the log file output
        is shown here:
-->
有効な場合、ロックの使用状況に関する情報を出力します。
出力される情報には、ロック操作の種類、ロックの種類、ロックまたはロック解除されているオブジェクトの一意な識別子が含まれます。
また、このオブジェクトに既に与えられているロック種類やこのオブジェクトで待機しているロック種類を表すビットマスクも含まれます。
ロック種類それぞれについて、与えられているロック数、待機中のロック数がその総数と共に出力されます。
ログファイル出力例を以下に示します。
<screen>
LOG:  LockAcquire: new: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(AccessShareLock)
LOG:  GrantLock: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(2) req(1,0,0,0,0,0,0)=1 grant(1,0,0,0,0,0,0)=1
      wait(0) type(AccessShareLock)
LOG:  UnGrantLock: updated: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(AccessShareLock)
LOG:  CleanUpLock: deleting: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(INVALID)
</screen>
<!--
        Details of the structure being dumped may be found in
        <filename>src/include/storage/lock.h</filename>.
-->
ダンプされる構造の詳細は、<filename>src/include/storage/lock.h</filename> にあります。
       </para>
       <para>
<!--
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
-->
このパラメータは<productname>PostgreSQL</productname>がコンパイル時に<symbol>LOCK_DEBUG</symbol>マクロが定義された場合のみ有効です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-lwlocks" xreflabel="trace_lwlocks">
      <term><varname>trace_lwlocks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_lwlocks</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>trace_lwlocks</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If on, emit information about lightweight lock usage.  Lightweight
        locks are intended primarily to provide mutual exclusion of access
        to shared-memory data structures.
-->
有効な場合、軽量ロックの使用状況に関する情報を出力します。
軽量ロックは主に、共有メモリ上のデータ構造へのアクセスに関する排他制御機能を提供することを意図したものです。
       </para>
       <para>
<!--
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
-->
このパラメータは<productname>PostgreSQL</productname>がコンパイル時に<symbol>LOCK_DEBUG</symbol>マクロが定義された場合のみ有効です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-userlocks" xreflabel="trace_userlocks">
      <term><varname>trace_userlocks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_userlocks</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>trace_userlocks</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If on, emit information about user lock usage.  Output is the same
        as for <symbol>trace_locks</symbol>, only for advisory locks.
-->
有効な場合、ユーザロックの使用状況に関する情報を出力します。
出力は<symbol>trace_locks</symbol>と同じですが、勧告的ロックに関するもののみを出力します。
       </para>
       <para>
<!--
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
-->
このパラメータは<productname>PostgreSQL</productname>がコンパイル時に<symbol>LOCK_DEBUG</symbol>マクロが定義された場合のみ有効です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-lock-oidmin" xreflabel="trace_lock_oidmin">
      <term><varname>trace_lock_oidmin</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>trace_lock_oidmin</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>trace_lock_oidmin</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If set, do not trace locks for tables below this OID (used to avoid
        output on system tables).
-->
設定すると、このOID未満のテーブルに関するロックの追跡を行いません。
（システムテーブルに関する出力を抑えるために使用します。）
       </para>
       <para>
<!--
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
-->
このパラメータは<productname>PostgreSQL</productname>がコンパイル時に<symbol>LOCK_DEBUG</symbol>マクロが定義された場合のみ有効です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-lock-table" xreflabel="trace_lock_table">
      <term><varname>trace_lock_table</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>trace_lock_table</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>trace_lock_table</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Unconditionally trace locks on this table (OID).
-->
このテーブル（OID）に対し無条件でロックを追跡します。
       </para>
       <para>
<!--
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
-->
このパラメータは<productname>PostgreSQL</productname>がコンパイル時に<symbol>LOCK_DEBUG</symbol>マクロが定義された場合のみ有効です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-deadlocks" xreflabel="debug_deadlocks">
      <term><varname>debug_deadlocks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_deadlocks</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>debug_deadlocks</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If set, dumps information about all current locks when a
        deadlock timeout occurs.
-->
設定すると、デッドロックタイムアウトが発生した時全ての進行中のロックについての情報がダンプされます。
       </para>
       <para>
<!--
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
-->
このパラメータは<productname>PostgreSQL</productname>がコンパイル時に<symbol>LOCK_DEBUG</symbol>マクロが定義された場合のみ有効です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-btree-build-stats" xreflabel="log_btree_build_stats">
      <term><varname>log_btree_build_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_btree_build_stats</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_btree_build_stats</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If set, logs system resource usage statistics (memory and CPU) on
        various B-tree operations.
-->
設定すると、各種B-tree操作に関するシステムリソース（メモリとCPU）の使用についての統計情報をログに出力します。
       </para>
       <para>
<!--
        This parameter is only available if the <symbol>BTREE_BUILD_STATS</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
-->
このパラメータは<productname>PostgreSQL</productname>がコンパイル時に<symbol>BTREE_BUILD_STATS</symbol>マクロが定義された場合のみ有効です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-consistency-checking" xreflabel="wal_consistency_checking">
      <term><varname>wal_consistency_checking</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>wal_consistency_checking</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_consistency_checking</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter is intended to be used to check for bugs in the WAL
        redo routines.  When enabled, full-page images of any buffers modified
        in conjunction with the WAL record are added to the record.
        If the record is subsequently replayed, the system will first apply
        each record and then test whether the buffers modified by the record
        match the stored images.  In certain cases (such as hint bits), minor
        variations are acceptable, and will be ignored.  Any unexpected
        differences will result in a fatal error, terminating recovery.
-->
このパラメータは、WALのREDOルーチンのバグをチェックするために使うことを意図しています。
有効にすると、WALレコードと一緒に変更されたバッファのフルページイメージをレコードに追加します。
後でそのレコードがリプレイされるときは、システムはまず各々のレコードを適用し、次にレコードによって変更されたバッファが、格納したイメージと一致するかどうかをテストします。
ある種のケース（たとえばヒントビット）では、些細な変化は許容され、無視されます。
予期しない差異は、致命的エラーを引き起こし、リカバリが中断されます。
       </para>

       <para>
<!--
        The default value of this setting is the empty string, which disables
        the feature.  It can be set to <literal>all</literal> to check all
        records, or to a comma-separated list of resource managers to check
        only records originating from those resource managers.  Currently,
        the supported resource managers are <literal>heap</literal>,
        <literal>heap2</literal>, <literal>btree</literal>, <literal>hash</literal>,
        <literal>gin</literal>, <literal>gist</literal>, <literal>sequence</literal>,
        <literal>spgist</literal>, <literal>brin</literal>, and <literal>generic</literal>.
        Extensions may define additional resource managers. Only superusers and users with
        the appropriate <literal>SET</literal> privilege can change this setting.
-->
デフォルト値は空文字で、この機能を無効にします。
すべてのレコードをチェックするために、<literal>all</literal>にすることができます。
カンマ区切りのリストにすると、対応するリソースマネージャに由来するレコードのみをチェックします。
今のところ、サポートされているリソースマネージャは、<literal>heap</literal>、<literal>heap2</literal>、<literal>btree</literal>、<literal>hash</literal>、<literal>gin</literal>、<literal>gist</literal>、<literal>sequence</literal>、<literal>spgist</literal>、<literal>brin</literal>、<literal>generic</literal>です。
拡張は追加のリソースマネージャを定義しても構いません。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-debug" xreflabel="wal_debug">
      <term><varname>wal_debug</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_debug</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_debug</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If on, emit WAL-related debugging output. This parameter is
        only available if the <symbol>WAL_DEBUG</symbol> macro was
        defined when <productname>PostgreSQL</productname> was
        compiled.
-->
もしonであれば、WALに関連したデバッグ出力が有効になります。このパラメータは<symbol>WAL_DEBUG</symbol>マクロが <productname>PostgreSQL</productname>のコンパイルの時に定義された場合にのみ有効です。
       </para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-ignore-checksum-failure" xreflabel="ignore_checksum_failure">
      <term><varname>ignore_checksum_failure</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>ignore_checksum_failure</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ignore_checksum_failure</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Only has effect if <xref linkend="app-initdb-data-checksums"/> are enabled.
-->
<xref linkend="app-initdb-data-checksums"/>が有効の時のみ効果があります。
       </para>
       <para>
<!--
        Detection of a checksum failure during a read normally causes
        <productname>PostgreSQL</productname> to report an error, aborting the current
        transaction.  Setting <varname>ignore_checksum_failure</varname> to on causes
        the system to ignore the failure (but still report a warning), and
        continue processing.  This behavior may <emphasis>cause crashes, propagate
        or hide corruption, or other serious problems</emphasis>.  However, it may allow
        you to get past the error and retrieve undamaged tuples that might still be
        present in the table if the block header is still sane. If the header is
        corrupt an error will be reported even if this option is enabled. The
        default setting is <literal>off</literal>.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
読み込み過程でチェックサム障害が検出されると、通常<productname>PostgreSQL</productname>はエラーを報告し、現時点のトランザクションを停止します。
<varname>ignore_checksum_failure</varname>を有効（on）に設定するとシステムはその障害を無視し（しかし警告は報告をします）、処理を継続します。
この振る舞いはたぶん<emphasis>クラッシュの原因、破損の伝播や隠ぺい、もしくはその他の深刻な問題</emphasis>の原因になることがあります。
とは言っても、エラーを切り抜け、ブロックヘッダが健全に存在するテーブルにある障害を受けていないタプルの回収は行えます。
もしヘッダが破損されたら、オプションが有効になっていたとしても報告はなされます。
デフォルトの設定は<literal>off</literal>です。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-zero-damaged-pages" xreflabel="zero_damaged_pages">
      <term><varname>zero_damaged_pages</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>zero_damaged_pages</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>zero_damaged_pages</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Detection of a damaged page header normally causes
        <productname>PostgreSQL</productname> to report an error, aborting the current
        transaction.  Setting <varname>zero_damaged_pages</varname> to on causes
        the system to instead report a warning, zero out the damaged
        page in memory, and continue processing.  This behavior <emphasis>will destroy data</emphasis>,
        namely all the rows on the damaged page.  However, it does allow you to get
        past the error and retrieve rows from any undamaged pages that might
        be present in the table.  It is useful for recovering data if
        corruption has occurred due to a hardware or software error.  You should
        generally not set this on until you have given up hope of recovering
        data from the damaged pages of a table.  Zeroed-out pages are not
        forced to disk so it is recommended to recreate the table or
        the index before turning this parameter off again.  The
        default setting is <literal>off</literal>.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
ページヘッダの障害がわかると、通常<productname>PostgreSQL</productname>はエラーの報告を行い、現在のトランザクションを中断させます。
<varname>zero_damaged_pages</varname>をonに設定することにより、システムは代わりに警告を報告し、障害のあるメモリ内のページをゼロで埋め、処理を継続します。
この動作により、障害のあったページ上にある全ての行の<emphasis>データが破壊</emphasis>されます。
しかし、これによりエラーを確実に無視し、正常なページに存在するテーブル内の行を取り出すことができます。
ハードウェアまたはソフトウェアのエラーによって破損が発生した場合のデータの復旧時に有用です。
障害のあるページからのテーブルのデータの復旧をあきらめた場合を除き、通常はこれをonにしてはいけません。
ゼロで埋められたページはディスクに書き込みを強要されないため、このパラメータを再び無効にする以前にテーブル、またはインデックスを再作成することを勧めます。
デフォルトは<literal>off</literal>です。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ignore-invalid-pages" xreflabel="ignore_invalid_pages">
      <term><varname>ignore_invalid_pages</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>ignore_invalid_pages</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>ignore_invalid_pages</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If set to <literal>off</literal> (the default), detection of
        WAL records having references to invalid pages during
        recovery causes <productname>PostgreSQL</productname> to
        raise a PANIC-level error, aborting the recovery. Setting
        <varname>ignore_invalid_pages</varname> to <literal>on</literal>
        causes the system to ignore invalid page references in WAL records
        (but still report a warning), and continue the recovery.
        This behavior may <emphasis>cause crashes, data loss,
        propagate or hide corruption, or other serious problems</emphasis>.
        However, it may allow you to get past the PANIC-level error,
        to finish the recovery, and to cause the server to start up.
        The parameter can only be set at server start. It only has effect
        during recovery or in standby mode.
-->
<literal>off</literal>（デフォルトです）に設定すると、無効なページを参照しているWALレコードは<productname>PostgreSQL</productname>に対してPANICレベルのエラーを引き起こし、リカバリをアボートします。
<varname>ignore_invalid_pages</varname>を<literal>on</literal>に設定すると、WALレコードの無効なページへの参照を無視し（しかしワーニングは報告されます）、リカバリを継続します。
この振る舞いにより、<emphasis>クラッシュ、データロス、破壊を増長したり見えなくするなどの深刻な問題</emphasis>を被るかもしれません。
しかし、これによってPANICレベルのエラーを回避してリカバリを完了し、サーバを起動できるかもしれません。
このパラメータはサーバ起動時にのみ設定できます。
リカバリ中、あるいはスタンバイモードでのみ効果があります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-debugging-support" xreflabel="jit_debugging_support">
      <term><varname>jit_debugging_support</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>jit_debugging_support</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>jit_debugging_support</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If LLVM has the required functionality, register generated functions
        with <productname>GDB</productname>.  This makes debugging easier.
        The default setting is <literal>off</literal>.
        This parameter can only be set at server start.
-->
LLVMに要求された機能がある場合は、生成した関数を<productname>GDB</productname>用に登録します。
これにより、デバッグが容易になります。
デフォルト設定は<literal>off</literal>です。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-dump-bitcode" xreflabel="jit_dump_bitcode">
      <term><varname>jit_dump_bitcode</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>jit_dump_bitcode</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>jit_dump_bitcode</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Writes the generated <productname>LLVM</productname> IR out to the
        file system, inside <xref linkend="guc-data-directory"/>. This is only
        useful for working on the internals of the JIT implementation.
        The default setting is <literal>off</literal>.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
生成された<productname>LLVM</productname> IRを<xref linkend="guc-data-directory"/>内のファイルシステムに出力します。
これはJITコンパイルのインターナルについて作業するときだけ有用です。
デフォルト設定は<literal>off</literal>です。
スーパーユーザと、適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-expressions" xreflabel="jit_expressions">
      <term><varname>jit_expressions</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>jit_expressions</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>jit_expressions</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Determines whether expressions are JIT compiled, when JIT compilation
        is activated (see <xref linkend="jit-decision"/>).  The default is
        <literal>on</literal>.
-->
JITコンパイルが有効な時に式がJITコンパイルされるかどうかを決定します。
（<xref linkend="jit-decision"/>参照。）
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-profiling-support" xreflabel="jit_profiling_support">
      <term><varname>jit_profiling_support</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>jit_profiling_support</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>jit_profiling_support</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If LLVM has the required functionality, emit the data needed to allow
        <productname>perf</productname> to profile functions generated by JIT.
        This writes out files to <filename>~/.debug/jit/</filename>; the
        user is responsible for performing cleanup when desired.
        The default setting is <literal>off</literal>.
        This parameter can only be set at server start.
-->
LLVMに要求された機能がある場合は、JITが生成した関数を<productname>perf</productname>でプロファイルすることができるデータを出力します。
これにより<filename>~/.debug/jit/</filename>にファイルが書き出されます。
ユーザは自分の責任で必要なときに後始末を行わなければなりません。
デフォルト設定は<literal>off</literal>です。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-tuple-deforming" xreflabel="jit_tuple_deforming">
      <term><varname>jit_tuple_deforming</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>jit_tuple_deforming</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>jit_tuple_deforming</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Determines whether tuple deforming is JIT compiled, when JIT
        compilation is activated (see <xref linkend="jit-decision"/>).
        The default is <literal>on</literal>.
-->
JITコンパイルが有効な時にタプルデフォーミングがJITコンパイルされるかどうかを決定します。
（<xref linkend="jit-decision"/>参照。）
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-remove-temp-files-after-crash" xreflabel="remove_temp_files_after_crash">
      <term><varname>remove_temp_files_after_crash</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>remove_temp_files_after_crash</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>remove_temp_files_after_crash</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When set to <literal>on</literal>, which is the default,
        <productname>PostgreSQL</productname> will automatically remove
        temporary files after a backend crash. If disabled, the files will be
        retained and may be used for debugging, for example. Repeated crashes
        may however result in accumulation of useless files. This parameter
        can only be set in the <filename>postgresql.conf</filename> file or on
        the server command line.
-->
デフォルトである<literal>on</literal>に設定すると、<productname>PostgreSQL</productname>はバックエンドがクラッシュした後に自動的に一時ファイルを削除します。
無効にすると、ファイルは保存され、たとえばデバッグ目的で使用できます。
しかしクラッシュを繰り返すと不要なファイルが溜まっていくかもしれません。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-send-abort-for-crash" xreflabel="send_abort_for_crash">
      <term><varname>send_abort_for_crash</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>send_abort_for_crash</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>send_abort_for_crash</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        By default, after a backend crash the postmaster will stop remaining
        child processes by sending them <systemitem>SIGQUIT</systemitem>
        signals, which permits them to exit more-or-less gracefully.  When
        this option is set to <literal>on</literal>,
        <systemitem>SIGABRT</systemitem> is sent instead.  That normally
        results in production of a core dump file for each such child
        process.
        This can be handy for investigating the states of other processes
        after a crash.  It can also consume lots of disk space in the event
        of repeated crashes, so do not enable this on systems you are not
        monitoring carefully.
        Beware that no support exists for cleaning up the core file(s)
        automatically.
        This parameter can only be set in
        the <filename>postgresql.conf</filename> file or on the server
        command line.
-->
デフォルトでは、バックエンドクラッシュの後、postmasterは残りの子プロセスを<systemitem>SIGQUIT</systemitem>シグナルを送ることで停止します。
これにより、子プロセスは多かれ少なかれ礼儀正しく終了することができます。
このオプションが<literal>on</literal>に設定されている場合、代わりに<systemitem>SIGABRT</systemitem>が送信されます。
これにより通常、子プロセスごとにコアダンプファイルを生成します。
これは、クラッシュの後の他のプロセスの状態を調査するのに便利です。
また、クラッシュが繰り返されるイベントで大量のディスクスペースを消費する可能性があるため、注意深く監視していないシステムではこれを有効にしないでください。
自動的にコアファイルを削除する機能は提供されていないことに注意してください。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-send-abort-for-kill" xreflabel="send_abort_for_kill">
      <term><varname>send_abort_for_kill</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>send_abort_for_kill</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>send_abort_for_kill</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        By default, after attempting to stop a child process with
        <systemitem>SIGQUIT</systemitem>, the postmaster will wait five
        seconds and then send <systemitem>SIGKILL</systemitem> to force
        immediate termination.  When this option is set
        to <literal>on</literal>, <systemitem>SIGABRT</systemitem> is sent
        instead of <systemitem>SIGKILL</systemitem>.  That normally results
        in production of a core dump file for each such child process.
        This can be handy for investigating the states
        of <quote>stuck</quote> child processes.  It can also consume lots
        of disk space in the event of repeated crashes, so do not enable
        this on systems you are not monitoring carefully.
        Beware that no support exists for cleaning up the core file(s)
        automatically.
        This parameter can only be set in
        the <filename>postgresql.conf</filename> file or on the server
        command line.
-->
デフォルトでは、<systemitem>SIGQUIT</systemitem>で子プロセスを停止しようとした後、postmasterは5秒間待ってから<systemitem>SIGKILL</systemitem>を送信して即時終了を強制します。
このオプションが<literal>on</literal>に設定されている場合、<systemitem>SIGKILL</systemitem>の代わりに<systemitem>SIGABRT</systemitem>が送信されます。
これにより通常、子プロセスごとにコアダンプファイルを生成します。
これは、<quote>スタックした</quote>子プロセスの状態を調査するのに便利です。
また、クラッシュが繰り返されるイベントで大量のディスクスペースを消費する可能性があるため、注意深く監視していないシステムではこれを有効にしないでください。
自動的にコアファイルを削除する機能は提供されていないことに注意してください。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-logical-replication-streaming" xreflabel="debug_logical_replication_streaming">
      <term><varname>debug_logical_replication_streaming</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>debug_logical_replication_streaming</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>debug_logical_replication_streaming</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The allowed values are <literal>buffered</literal> and
        <literal>immediate</literal>. The default is <literal>buffered</literal>.
        This parameter is intended to be used to test logical decoding and
        replication of large transactions.  The effect of
        <varname>debug_logical_replication_streaming</varname> is different for the
        publisher and subscriber:
-->
指定できる値は、<literal>buffered</literal>および<literal>immediate</literal>です。
デフォルトは<literal>buffered</literal>です。
このパラメータは、大きなトランザクションにおけるロジカルデコーディングおよびレプリケーションのテストに使用することを目的としています。
<varname>debug_logical_replication_streaming</varname>の効果は、パブリッシャーとサブスクライバーで異なります。
       </para>

       <para>
<!--
        On the publisher side, <varname>debug_logical_replication_streaming</varname>
        allows streaming or serializing changes immediately in logical decoding.
        When set to <literal>immediate</literal>, stream each change if the
        <link linkend="sql-createsubscription-params-with-streaming"><literal>streaming</literal></link>
        option of
        <link linkend="sql-createsubscription"><command>CREATE SUBSCRIPTION</command></link>
        is enabled, otherwise, serialize each change.  When set to
        <literal>buffered</literal>, the decoding will stream or serialize
        changes when <varname>logical_decoding_work_mem</varname> is reached.
-->
パブリッシャー側では、<varname>debug_logical_replication_streaming</varname>を使用すると、ロジカルデコーディングでただちに変更をストリーミングまたはシリアル化できます。
<literal>immediate</literal>に設定すると、<link linkend="sql-createsubscription"><command>CREATE SUBSCRIPTION</command></link>の<link linkend="sql-createsubscription-params-with-streaming"><literal>streaming</literal></link>オプションが有効になっている場合は各変更をストリームし、それ以外の場合は各変更をシリアル化します。
<literal>buffered</literal>に設定すると、<varname>logical_decoding_work_mem</varname>に達したときに、デコーディング処理がストリームまたはシリアル化します。
       </para>

       <para>
<!--
        On the subscriber side, if the <literal>streaming</literal> option is set to
        <literal>parallel</literal>, <varname>debug_logical_replication_streaming</varname>
        can be used to direct the leader apply worker to send changes to the
        shared memory queue or to serialize all changes to the file.  When set to
        <literal>buffered</literal>, the leader sends changes to parallel apply
        workers via a shared memory queue.  When set to
        <literal>immediate</literal>, the leader serializes all changes to files
        and notifies the parallel apply workers to read and apply them at the
        end of the transaction.
-->
サブスクライバー側では、<literal>streaming</literal>オプションが<literal>parallel</literal>に設定されている場合、<varname>debug_logical_replication_streaming</varname>を使用して、リーダー適用ワーカーに変更を共有メモリキューに送信するか、すべての変更をファイルにシリアル化するように指示できます。
<literal>buffered</literal>に設定されている場合、リーダーは共有メモリキューを介してパラレル適用ワーカーに変更を送信します。
<literal>immediate</literal>に設定されている場合、リーダーはファイルに対するすべての変更をシリアル化し、パラレル適用ワーカーにファイルを読み取ってトランザクションの最後に適用するように通知します。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
  </sect1>
  <sect1 id="runtime-config-short">
<!--
   <title>Short Options</title>
-->
   <title>短いオプション</title>

   <para>
<!--
    For convenience there are also single letter command-line option
    switches available for some parameters.  They are described in
    <xref linkend="runtime-config-short-table"/>.  Some of these
    options exist for historical reasons, and their presence as a
    single-letter option does not necessarily indicate an endorsement
    to use the option heavily.
-->
簡便性のために、一文字のコマンドラインオプションスイッチも、幾つかのパラメータのために用意されています。
それらは<xref linkend="runtime-config-short-table"/>に解説されています。
一部のオプションは歴史的な理由のために存在します。
また、この一文字オプションが存在することが、このオプションを多く使用することを支持することを示しているわけではありません。
   </para>

    <table id="runtime-config-short-table">
<!--
     <title>Short Option Key</title>
-->
     <title>短いオプションキー</title>
     <tgroup cols="2">
      <colspec colname="col1" colwidth="1*"/>
      <colspec colname="col2" colwidth="2*"/>
      <thead>
       <row>
<!--
        <entry>Short Option</entry>
-->
        <entry>短いオプション</entry>
<!--
        <entry>Equivalent</entry>
-->
        <entry>同義</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><option>-B <replaceable>x</replaceable></option></entry>
        <entry><literal>shared_buffers = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-d <replaceable>x</replaceable></option></entry>
        <entry><literal>log_min_messages = DEBUG<replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-e</option></entry>
        <entry><literal>datestyle = euro</literal></entry>
       </row>
       <row>
        <entry>
          <option>-fb</option>, <option>-fh</option>, <option>-fi</option>,
          <option>-fm</option>, <option>-fn</option>, <option>-fo</option>,
          <option>-fs</option>, <option>-ft</option>
         </entry>
         <entry>
          <literal>enable_bitmapscan = off</literal>,
          <literal>enable_hashjoin = off</literal>,
          <literal>enable_indexscan = off</literal>,
          <literal>enable_mergejoin = off</literal>,
          <literal>enable_nestloop = off</literal>,
          <literal>enable_indexonlyscan = off</literal>,
          <literal>enable_seqscan = off</literal>,
          <literal>enable_tidscan = off</literal>
         </entry>
       </row>
       <row>
        <entry><option>-F</option></entry>
        <entry><literal>fsync = off</literal></entry>
       </row>
       <row>
        <entry><option>-h <replaceable>x</replaceable></option></entry>
        <entry><literal>listen_addresses = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-i</option></entry>
        <entry><literal>listen_addresses = '*'</literal></entry>
       </row>
       <row>
        <entry><option>-k <replaceable>x</replaceable></option></entry>
        <entry><literal>unix_socket_directories = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-l</option></entry>
        <entry><literal>ssl = on</literal></entry>
       </row>
       <row>
        <entry><option>-N <replaceable>x</replaceable></option></entry>
        <entry><literal>max_connections = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-O</option></entry>
        <entry><literal>allow_system_table_mods = on</literal></entry>
       </row>
       <row>
        <entry><option>-p <replaceable>x</replaceable></option></entry>
        <entry><literal>port = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-P</option></entry>
        <entry><literal>ignore_system_indexes = on</literal></entry>
       </row>
       <row>
        <entry><option>-s</option></entry>
        <entry><literal>log_statement_stats = on</literal></entry>
       </row>
       <row>
        <entry><option>-S <replaceable>x</replaceable></option></entry>
        <entry><literal>work_mem = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-tpa</option>, <option>-tpl</option>, <option>-te</option></entry>
        <entry><literal>log_parser_stats = on</literal>,
        <literal>log_planner_stats = on</literal>,
        <literal>log_executor_stats = on</literal></entry>
       </row>
       <row>
        <entry><option>-W <replaceable>x</replaceable></option></entry>
        <entry><literal>post_auth_delay = <replaceable>x</replaceable></literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  </sect1>
<!-- split-config3-end -->
</chapter>
