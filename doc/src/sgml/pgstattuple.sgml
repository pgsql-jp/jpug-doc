<!-- doc/src/sgml/pgstattuple.sgml -->

<sect1 id="pgstattuple" xreflabel="pgstattuple">
 <title>pgstattuple</title>

 <indexterm zone="pgstattuple">
  <primary>pgstattuple</primary>
 </indexterm>

 <para>
<!--
  The <filename>pgstattuple</filename> module provides various functions to
  obtain tuple-level statistics.
-->
<filename>pgstattuple</filename>モジュールはタプルレベルの統計情報を入手するための各種関数を提供します。
 </para>

 <sect2>
<!--
  <title>Functions</title>
-->
  <title>関数</title>

  <variablelist>
   <varlistentry>
    <term>
     <indexterm>
      <primary>pgstattuple</primary>
     </indexterm>
     <function>pgstattuple(regclass) returns record</>
    </term>

    <listitem>
     <para>
<!--
      <function>pgstattuple</function> returns a relation's physical length,
      percentage of <quote>dead</> tuples, and other info. This may help users
      to determine whether vacuum is necessary or not.  The argument is the
      target relation's name (optionally schema-qualified) or OID.
      For example:
-->
<function>pgstattuple</function>はリレーションの物理的な長さ、<quote>不要</>なタプルの割合、およびその他の情報を返します。
これはバキュームが必要かどうかユーザが判断する時に有用かもしれません。
引数は対象とするリレーションの名前（スキーマ修飾可）もしくはOIDです。
以下に例を示します。
<programlisting>
test=> SELECT * FROM pgstattuple('pg_catalog.pg_proc');
-[ RECORD 1 ]------+-------
table_len          | 458752
tuple_count        | 1470
tuple_len          | 438896
tuple_percent      | 95.67
dead_tuple_count   | 11
dead_tuple_len     | 3157
dead_tuple_percent | 0.69
free_space         | 8932
free_percent       | 1.95
</programlisting>
<!--
     The output columns are described in <xref linkend="pgstattuple-columns">.
-->
出力列を<xref linkend="pgstattuple-columns">で説明します。
    </para>

    <table id="pgstattuple-columns">
<!--
     <title><function>pgstattuple</function> Output Columns</title>
-->
     <title><function>pgstattuple</function>の出力列</title>
     <tgroup cols="3">
      <thead>
       <row>
<!--
        <entry>Column</entry>
        <entry>Type</entry>
        <entry>Description</entry>
-->
        <entry>列</entry>
        <entry>型</entry>
        <entry>説明</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><structfield>table_len</structfield></entry>
        <entry><type>bigint</type></entry>
<!--
        <entry>Physical relation length in bytes</entry>
-->
        <entry>リレーションのバイト単位の物理長</entry>
       </row>
       <row>
        <entry><structfield>tuple_count</structfield></entry>
        <entry><type>bigint</type></entry>
<!--
        <entry>Number of live tuples</entry>
-->
        <entry>有効なタプル数</entry>
       </row>
       <row>
        <entry><structfield>tuple_len</structfield></entry>
        <entry><type>bigint</type></entry>
<!--
        <entry>Total length of live tuples in bytes</entry>
-->
        <entry>有効なタプルの物理長（バイト単位）</entry>
       </row>
       <row>
        <entry><structfield>tuple_percent</structfield></entry>
        <entry><type>float8</type></entry>
<!--
        <entry>Percentage of live tuples</entry>
-->
        <entry>有効タプルの割合</entry>
       </row>
       <row>
        <entry><structfield>dead_tuple_count</structfield></entry>
        <entry><type>bigint</type></entry>
<!--
        <entry>Number of dead tuples</entry>
-->
        <entry>無効なタプル数</entry>
       </row>
       <row>
        <entry><structfield>dead_tuple_len</structfield></entry>
        <entry><type>bigint</type></entry>
<!--
        <entry>Total length of dead tuples in bytes</entry>
-->
        <entry>バイト単位の総不要タプル長</entry>
       </row>
       <row>
        <entry><structfield>dead_tuple_percent</structfield></entry>
        <entry><type>float8</type></entry>
<!--
        <entry>Percentage of dead tuples</entry>
-->
        <entry>不要タプルの割合</entry>
       </row>
       <row>
        <entry><structfield>free_space</structfield></entry>
        <entry><type>bigint</type></entry>
<!--
        <entry>Total free space in bytes</entry>
-->
        <entry>バイト単位の総空き領域</entry>
       </row>
       <row>
        <entry><structfield>free_percent</structfield></entry>
        <entry><type>float8</type></entry>
<!--
        <entry>Percentage of free space</entry>
-->
        <entry>空き領域の割合</entry>
       </row>

      </tbody>
     </tgroup>
    </table>

    <para>
<!--
     <function>pgstattuple</function> acquires only a read lock on the
     relation. So the results do not reflect an instantaneous snapshot;
     concurrent updates will affect them.
-->
<function>pgstattuple</function> はリレーション上で読み取りロックのみを獲得します。
ですので、結果はこの瞬間のスナップショットを考慮しません。つまり、同時実行の更新がその結果に影響を与えます。
    </para>

    <para>
<!--
     <function>pgstattuple</function> judges a tuple is <quote>dead</> if
     <function>HeapTupleSatisfiesDirty</> returns false.
-->
<function>pgstattuple</function>は、<function>HeapTupleSatisfiesDirty</>が偽を返すかどうかで、タプルが<quote>不要</>かどうか判定します。
    </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>pgstattuple(text) returns record</>
    </term>

    <listitem>
     <para>
<!--
      This is the same as <function>pgstattuple(regclass)</function>, except
      that the target relation is specified by TEXT. This function is kept
      because of backward-compatibility so far, and will be deprecated in
      the future release.
-->
TEXTで対象リレーションを指定する点を除き、これは<function>pgstattuple(regclass)</function>と同じです。
この関数は今までのところ後方互換のために残されており、将来のリリースでは廃止予定になるでしょう。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
    <indexterm>
     <primary>pgstatindex</primary>
    </indexterm>
     <function>pgstatindex(regclass) returns record</>
    </term>

    <listitem>
     <para>
<!--
      <function>pgstatindex</function> returns a record showing information
      about a B-tree index.  For example:
-->
<function>pgstatindex</function>はB-treeインデックスに関する情報を示すレコードを返します。
以下は例です。
<programlisting>
test=> SELECT * FROM pgstatindex('pg_cast_oid_index');
-[ RECORD 1 ]------+------
version            | 2
tree_level         | 0
index_size         | 8192
root_block_no      | 1
internal_pages     | 0
leaf_pages         | 1
empty_pages        | 0
deleted_pages      | 0
avg_leaf_density   | 50.27
leaf_fragmentation | 0
</programlisting>
     </para>

    <para>
<!--
     The output columns are:
-->
出力列は以下の通りです。

    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
<!--
        <entry>Column</entry>
        <entry>Type</entry>
        <entry>Description</entry>
-->
        <entry>列</entry>
        <entry>型</entry>
        <entry>説明</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><structfield>version</structfield></entry>
        <entry><type>integer</type></entry>
<!--
        <entry>B-tree version number</entry>
-->
        <entry>B-treeバージョン番号</entry>
       </row>

       <row>
        <entry><structfield>tree_level</structfield></entry>
        <entry><type>integer</type></entry>
<!--
        <entry>Tree level of the root page</entry>
-->
        <entry>ルートページのツリーレベル</entry>
       </row>

       <row>
        <entry><structfield>index_size</structfield></entry>
        <entry><type>bigint</type></entry>
<!--
        <entry>Total number of pages in index</entry>
-->
        <entry>インデックス内の総ページ数</entry>
       </row>

       <row>
        <entry><structfield>root_block_no</structfield></entry>
        <entry><type>bigint</type></entry>
<!--
        <entry>Location of root block</entry>
-->
        <entry>ルートブロックの場所</entry>
       </row>

       <row>
        <entry><structfield>internal_pages</structfield></entry>
        <entry><type>bigint</type></entry>
<!--
        <entry>Number of <quote>internal</> (upper-level) pages</entry>
-->
        <entry><quote>内部</>（上位レベル）ページ数</entry>
       </row>

       <row>
        <entry><structfield>leaf_pages</structfield></entry>
        <entry><type>bigint</type></entry>
<!--
        <entry>Number of leaf pages</entry>
-->
        <entry>リーフページ数</entry>
       </row>

       <row>
        <entry><structfield>empty_pages</structfield></entry>
        <entry><type>bigint</type></entry>
<!--
        <entry>Number of empty pages</entry>
-->
        <entry>空ページ数</entry>
       </row>

       <row>
        <entry><structfield>deleted_pages</structfield></entry>
        <entry><type>bigint</type></entry>
<!--
        <entry>Number of deleted pages</entry>
-->
        <entry>削除ページ数</entry>
       </row>

       <row>
        <entry><structfield>avg_leaf_density</structfield></entry>
        <entry><type>float8</type></entry>
<!--
        <entry>Average density of leaf pages</entry>
-->
        <entry>リーフページの平均密度</entry>
       </row>

       <row>
        <entry><structfield>leaf_fragmentation</structfield></entry>
        <entry><type>float8</type></entry>
<!--
        <entry>Leaf page fragmentation</entry>
-->
        <entry>リーフページの断片化</entry>
       </row>

      </tbody>
     </tgroup>
    </informaltable>
    </para>

    <para>
<!--
     As with <function>pgstattuple</>, the results are accumulated
     page-by-page, and should not be expected to represent an
     instantaneous snapshot of the whole index.
-->
<function>pgstattuple</>では、結果はページ毎に累積されます。
この瞬間のインデックス全体のスナップショットが存在すると想定してはいけません。
    </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>pgstatindex(text) returns record</>
    </term>

    <listitem>
     <para>
<!--
      This is the same as <function>pgstatindex(regclass)</function>, except
      that the target index is specified by TEXT. This function is kept
      because of backward-compatibility so far, and will be deprecated in
      the future release.
-->
TEXTで対象インデックスを指定する点を除き、これは<function>pgstatindex(regclass)</function>と同じです。
この関数は今までのところ後方互換のために残されており、将来のリリースでは廃止予定になるでしょう。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <indexterm>
      <primary>pgstatginindex</primary>
     </indexterm>
     <function>pgstatginindex(regclass) returns record</>
    </term>

    <listitem>
     <para>
<!--
      <function>pgstatginindex</function> returns a record showing information
      about a GIN index.  For example:
-->
<function>pgstatginindex</function>は、GINインデックスに関する情報を示すレコードを返します。
以下に例を示します。
<programlisting>
test=> SELECT * FROM pgstatginindex('test_gin_index');
-[ RECORD 1 ]--+--
version        | 1
pending_pages  | 0
pending_tuples | 0
</programlisting>
     </para>

    <para>
<!--
     The output columns are:
-->
出力列は以下の通りです。

    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
<!--
        <entry>Column</entry>
        <entry>Type</entry>
        <entry>Description</entry>
-->
        <entry>列</entry>
        <entry>型</entry>
        <entry>説明</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><structfield>version</structfield></entry>
        <entry><type>integer</type></entry>
<!--
        <entry>GIN version number</entry>
-->
        <entry>GINバージョン番号</entry>
       </row>

       <row>
        <entry><structfield>pending_pages</structfield></entry>
        <entry><type>integer</type></entry>
<!--
        <entry>Number of pages in the pending list</entry>
-->
        <entry>待機中リスト内のページ数</entry>
       </row>

       <row>
        <entry><structfield>pending_tuples</structfield></entry>
        <entry><type>bigint</type></entry>
<!--
        <entry>Number of tuples in the pending list</entry>
-->
        <entry>待機中リスト内のタプル数</entry>
       </row>

      </tbody>
     </tgroup>
    </informaltable>
    </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <indexterm>
      <primary>pg_relpages</primary>
     </indexterm>
     <function>pg_relpages(regclass) returns bigint</>
    </term>

    <listitem>
     <para>
<!--
      <function>pg_relpages</function> returns the number of pages in the
      relation.
-->
<function>pg_relpages</function>はリレーション内のページ数を返します。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>pg_relpages(text) returns bigint</>
    </term>

    <listitem>
     <para>
<!--
      This is the same as <function>pg_relpages(regclass)</function>, except
      that the target relation is specified by TEXT. This function is kept
      because of backward-compatibility so far, and will be deprecated in
      the future release.
-->
TEXTで対象リレーションを指定する点を除き、これは<function>pg_relpages(regclass)</function>と同じです。
この関数は今までのところ後方互換のために残されており、将来のリリースでは廃止予定になるでしょう。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </sect2>

 <sect2>
<!--
  <title>Authors</title>
-->
  <title>作者</title>

  <para>
   Tatsuo IshiiとSatoshi Nagayasu
  </para>
 </sect2>

</sect1>
