<!--
doc/src/sgml/ref/create_trigger.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATETRIGGER">
 <indexterm zone="sql-createtrigger">
  <primary>CREATE TRIGGER</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE TRIGGER</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE TRIGGER</refname>
<!--
  <refpurpose>define a new trigger</refpurpose>
-->
  <refpurpose>新しいトリガを定義する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ CONSTRAINT ] TRIGGER <replaceable class="PARAMETER">name</replaceable> { BEFORE | AFTER | INSTEAD OF } { <replaceable class="PARAMETER">event</replaceable> [ OR ... ] }
    ON <replaceable class="PARAMETER">table_name</replaceable>
    [ FROM <replaceable class="parameter">referenced_table_name</replaceable> ]
    [ NOT DEFERRABLE | [ DEFERRABLE ] { INITIALLY IMMEDIATE | INITIALLY DEFERRED } ]
    [ FOR [ EACH ] { ROW | STATEMENT } ]
    [ WHEN ( <replaceable class="parameter">condition</replaceable> ) ]
    EXECUTE PROCEDURE <replaceable class="PARAMETER">function_name</replaceable> ( <replaceable class="PARAMETER">arguments</replaceable> )

<!--
<phrase>where <replaceable class="parameter">event</replaceable> can be one of:</phrase>
-->
<phrase>
ここで<replaceable class="parameter">event</replaceable>は以下のいずれかを取ることができます。
</phrase>

    INSERT
    UPDATE [ OF <replaceable class="parameter">column_name</replaceable> [, ... ] ]
    DELETE
    TRUNCATE
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>CREATE TRIGGER</command> creates a new trigger.  The
   trigger will be associated with the specified table, view, or foreign table
   and will execute the specified
   function <replaceable class="parameter">function_name</replaceable> when
   certain events occur.
-->
<command>CREATE TRIGGER</command>は新しいトリガを作成します。
作成したトリガは指定したテーブル、ビューまたは外部テーブルと関連付けられ、特定のイベントが発生した時に指定した関数<replaceable class="parameter">function_name</replaceable>を実行します。
  </para>

  <para>
<!--
   The trigger can be specified to fire before the
   operation is attempted on a row (before constraints are checked and
   the <command>INSERT</command>, <command>UPDATE</command>, or
   <command>DELETE</command> is attempted); or after the operation has
   completed (after constraints are checked and the
   <command>INSERT</command>, <command>UPDATE</command>, or
   <command>DELETE</command> has completed); or instead of the operation
   (in the case of inserts, updates or deletes on a view).
   If the trigger fires before or instead of the event, the trigger can skip
   the operation for the current row, or change the row being inserted (for
   <command>INSERT</command> and <command>UPDATE</command> operations
   only). If the trigger fires after the event, all changes, including
   the effects of other triggers, are <quote>visible</quote>
   to the trigger.
-->
トリガでは、起動のタイミングとして、行への操作が開始される前（制約条件のチェックと<command>INSERT</command>、<command>UPDATE</command>または<command>DELETE</command>が行われる前）、操作が完了した後（制約条件がチェックされ、<command>INSERT</command>、<command>UPDATE</command>または<command>DELETE</command>が完了した後）、操作の代わり（ビューにおける挿入、更新、削除の場合）のいずれかを指定することができます。
イベントの前または代わりにトリガが起動する場合、そのトリガは対象行に対する操作を省略したり、（<command>INSERT</command>と<command>UPDATE</command>の操作時のみ）挿入する行を変更したりすることができます。
イベントの後にトリガが起動する場合、他のトリガの影響を含む全ての変更が、トリガに対して<quote>可視</quote>状態となります。
  </para>

  <para>
<!--
   A trigger that is marked <literal>FOR EACH ROW</literal> is called
   once for every row that the operation modifies. For example, a
   <command>DELETE</command> that affects 10 rows will cause any
   <literal>ON DELETE</literal> triggers on the target relation to be
   called 10 separate times, once for each deleted row. In contrast, a
   trigger that is marked <literal>FOR EACH STATEMENT</literal> only
   executes once for any given operation, regardless of how many rows
   it modifies (in particular, an operation that modifies zero rows
   will still result in the execution of any applicable <literal>FOR
   EACH STATEMENT</literal> triggers).
-->
<literal>FOR EACH ROW</literal>付きのトリガは、その操作によって変更される行ごとに1回ずつ呼び出されます。
例えば、10行に影響を与える<command>DELETE</command>操作は、対象リレーション上のすべての<literal>ON DELETE</literal>トリガを、削除される各行について1回ずつ、個別に10回呼び出すことになります。
反対に、<literal>FOR EACH STATEMENT</literal>付きのトリガは、その操作によって何行変更されたかにかかわらず、任意の操作ごとに1回のみ実行されます
（変更対象が0行となる操作でも、適用できるすべての<literal>FOR EACH STATEMENT</literal>トリガが実行されます）。
  </para>

  <para>
<!--
   Triggers that are specified to fire <literal>INSTEAD OF</> the trigger
   event must be marked <literal>FOR EACH ROW</>, and can only be defined
   on views. <literal>BEFORE</> and <literal>AFTER</> triggers on a view
   must be marked as <literal>FOR EACH STATEMENT</>.
-->
トリガイベントの<literal>INSTEAD OF</>として発行されるように指定されたトリガは<literal>FOR EACH ROW</>印を付けなければなりません。
またビュー上にのみ定義することができます。
ビューに対する<literal>BEFORE</>および<literal>AFTER</>トリガは<literal>FOR EACH STATEMENT</>印を付けなければなりません。
  </para>

  <para>
<!--
   In addition, triggers may be defined to fire for
   <command>TRUNCATE</command>, though only
   <literal>FOR EACH STATEMENT</literal>.
-->
さらに、<literal>FOR EACH STATEMENT</literal>のみですが、トリガを<command>TRUNCATE</command>に対して発行するように定義することができます。
  </para>

  <para>
<!--
   The following table summarizes which types of triggers may be used on
   tables, views, and foreign tables:
-->
以下の表にどの種類のトリガがテーブル、ビュー、外部テーブルに対して使用できるかをまとめます。
  </para>

  <informaltable id="supported-trigger-types">
   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>When</entry>
      <entry>Event</entry>
      <entry>Row-level</entry>
      <entry>Statement-level</entry>
-->
      <entry>いつ</entry>
      <entry>イベント</entry>
      <entry>行レベル</entry>
      <entry>文レベル</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry align="center" morerows="1"><literal>BEFORE</></entry>
      <entry align="center"><command>INSERT</>/<command>UPDATE</>/<command>DELETE</></entry>
<!--
      <entry align="center">Tables and foreign tables</entry>
      <entry align="center">Tables, views, and foreign tables</entry>
-->
      <entry align="center">テーブル、および外部テーブル</entry>
      <entry align="center">テーブル、ビューおよび外部テーブル</entry>
     </row>
     <row>
      <entry align="center"><command>TRUNCATE</></entry>
      <entry align="center">&mdash;</entry>
<!--
      <entry align="center">Tables</entry>
-->
      <entry align="center">テーブル</entry>
     </row>
     <row>
      <entry align="center" morerows="1"><literal>AFTER</></entry>
      <entry align="center"><command>INSERT</>/<command>UPDATE</>/<command>DELETE</></entry>
<!--
      <entry align="center">Tables and foreign tables</entry>
      <entry align="center">Tables, views, and foreign tables</entry>
-->
      <entry align="center">テーブルおよび外部テーブル</entry>
      <entry align="center">テーブル、ビューおよび外部テーブル</entry>
     </row>
     <row>
      <entry align="center"><command>TRUNCATE</></entry>
      <entry align="center">&mdash;</entry>
<!--
      <entry align="center">Tables</entry>
-->
      <entry align="center">テーブル</entry>
     </row>
     <row>
      <entry align="center" morerows="1"><literal>INSTEAD OF</></entry>
      <entry align="center"><command>INSERT</>/<command>UPDATE</>/<command>DELETE</></entry>
<!--
      <entry align="center">Views</entry>
-->
      <entry align="center">ビュー</entry>
      <entry align="center">&mdash;</entry>
     </row>
     <row>
      <entry align="center"><command>TRUNCATE</></entry>
      <entry align="center">&mdash;</entry>
      <entry align="center">&mdash;</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>

  <para>
<!--
   Also, a trigger definition can specify a Boolean <literal>WHEN</>
   condition, which will be tested to see whether the trigger should
   be fired.  In row-level triggers the <literal>WHEN</> condition can
   examine the old and/or new values of columns of the row.  Statement-level
   triggers can also have <literal>WHEN</> conditions, although the feature
   is not so useful for them since the condition cannot refer to any values
   in the table.
-->
またトリガ定義では、論理値の<literal>WHEN</>条件を指定することができ、これによってトリガを発行すべきかどうかが判定されます。
行レベルのトリガでは、<literal>WHEN</>条件は行の列の古い値、新しい値、またはその両方で検証することができます。
文レベルのトリガでも<literal>WHEN</>条件を持たせることができますが、条件としてテーブル内のどの値も参照することができませんので、この機能はあまり有用ではありません
  </para>

  <para>
<!--
   If multiple triggers of the same kind are defined for the same event,
   they will be fired in alphabetical order by name.
-->
同一イベントに同じ種類の複数のトリガが定義された場合、名前のアルファベット順で実行されます。
  </para>

  <para>
<!--
   When the <literal>CONSTRAINT</> option is specified, this command creates a
   <firstterm>constraint trigger</>.  This is the same as a regular trigger
   except that the timing of the trigger firing can be adjusted using
   <xref linkend="SQL-SET-CONSTRAINTS">.
   Constraint triggers must be <literal>AFTER ROW</> triggers on tables.  They
   can be fired either at the end of the statement causing the triggering
   event, or at the end of the containing transaction; in the latter case they
   are said to be <firstterm>deferred</>.  A pending deferred-trigger firing
   can also be forced to happen immediately by using <command>SET
   CONSTRAINTS</>.  Constraint triggers are expected to raise an exception
   when the constraints they implement are violated.
-->
<literal>CONSTRAINT</>オプションが指定された場合、このコマンドは<firstterm>制約トリガ</>を作成します。
これは、<xref linkend="SQL-SET-CONSTRAINTS">を使用してトリガを発行するタイミングを調整することができるという点を除き、通常のトリガと同じです。
制約トリガはテーブルの<literal>AFTER ROW</>トリガでなければなりません。
トリガイベントを引き起こした文の最後、またはそれを含むトランザクションの最後のいずれかで発行することができます。
後者の場合、<firstterm>遅延</>と呼ばれます。
<command>SET CONSTRAINTS</>を使用することで、強制的に待機中の遅延トリガの発行を即座に行わせることができます。
制約トリガは、実装する制約に違反した時に例外を発生するものと想定されています。
  </para>

  <para>
<!--
   <command>SELECT</command> does not modify any rows so you cannot
   create <command>SELECT</command> triggers. Rules and views are more
   appropriate in such cases.
-->
<command>SELECT</command>はまったく行を変更しないため、<command>SELECT</command>トリガを作成することはできません。
この場合は、ルールやビューの方が適しています。
  </para>

  <para>
<!--
   Refer to <xref linkend="triggers"> for more information about triggers.
-->
トリガに関するより詳細については、<xref linkend="triggers">を参照してください。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <para>
<!--
      The name to give the new trigger.  This must be distinct from
      the name of any other trigger for the same table.
      The name cannot be schema-qualified &mdash; the trigger inherits the
      schema of its table.  For a constraint trigger, this is also the name to
      use when modifying the trigger's behavior using
      <command>SET CONSTRAINTS</>.
-->
新しいトリガに付与する名前です。
同じテーブルの他のトリガと異なる名前にする必要があります。
名前をスキーマ修飾することはできません。
トリガはそのテーブルのスキーマを引き継ぎます。
制約トリガの場合、この名前が<command>SET CONSTRAINTS</>を使用してトリガの動作を変更する時に使用されます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>BEFORE</literal></term>
    <term><literal>AFTER</literal></term>
    <term><literal>INSTEAD OF</literal></term>
    <listitem>
     <para>
<!--
      Determines whether the function is called before, after, or instead of
      the event.  A constraint trigger can only be specified as
      <literal>AFTER</>.
-->
関数の呼び出しをイベントの前に行うか後に行うか、それとも代替として行うかを決定します。
制約トリガでは<literal>AFTER</>としてしか指定することができません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">event</replaceable></term>
    <listitem>
     <para>
<!--
      One of <literal>INSERT</literal>, <literal>UPDATE</literal>,
      <literal>DELETE</literal>, or <literal>TRUNCATE</literal>;
      this specifies the event that will fire the trigger. Multiple
      events can be specified using <literal>OR</literal>.
-->
<literal>INSERT</literal>、<literal>UPDATE</literal>、<literal>DELETE</literal>、<literal>TRUNCATE</literal>のいずれかが入ります。
このパラメータは、トリガを起動するイベントを指定します。
<literal>OR</literal>を使用して、複数のイベントを指定することができます。
     </para>

     <para>
<!--
      For <literal>UPDATE</literal> events, it is possible to
      specify a list of columns using this syntax:
-->
<literal>UPDATE</literal>イベントでは、以下の構文を使用して列リストを指定することができます。
<synopsis>
UPDATE OF <replaceable>column_name1</replaceable> [, <replaceable>column_name2</replaceable> ... ]
</synopsis>
<!--
      The trigger will only fire if at least one of the listed columns
      is mentioned as a target of the <command>UPDATE</> command.
-->
このトリガは<command>UPDATE</>コマンドの対象として列挙された列のいずれか少なくとも1つの列が指定された場合に発行されます。
     </para>

<!--
     <para><literal>INSTEAD OF UPDATE</> events do not support lists of columns.
-->
<para><literal>INSTEAD OF UPDATE</>イベントは列リストをサポートしません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">table_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name (optionally schema-qualified) of the table, view, or foreign
      table the trigger is for.
-->
トリガを作成するテーブル、ビューまたは外部テーブルの名前です（スキーマ修飾名も可）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">referenced_table_name</replaceable></term>
    <listitem>
     <para>
<!--
      The (possibly schema-qualified) name of another table referenced by the
      constraint.  This option is used for foreign-key constraints and is not
      recommended for general use.  This can only be specified for
      constraint triggers.
-->
制約で参照される他のテーブルの名前（スキーマ修飾可）です。
このオプションは外部キー制約で使用されるものであり、一般利用を推奨しません。
これは制約トリガでのみ指定することができます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFERRABLE</literal></term>
    <term><literal>NOT DEFERRABLE</literal></term>
    <term><literal>INITIALLY IMMEDIATE</literal></term>
    <term><literal>INITIALLY DEFERRED</literal></term>
    <listitem>
     <para>
<!--
      The default timing of the trigger.
      See the <xref linkend="SQL-CREATETABLE"> documentation for details of
      these constraint options.  This can only be specified for constraint
      triggers.
-->
トリガのデフォルトのタイミングです。
これらの制約オプションについては<xref linkend="SQL-CREATETABLE">文書を参照してください。
これは制約トリガでのみ指定することができます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>FOR EACH ROW</literal></term>
    <term><literal>FOR EACH STATEMENT</literal></term>

    <listitem>
     <para>
<!--
      This specifies whether the trigger procedure should be fired
      once for every row affected by the trigger event, or just once
      per SQL statement. If neither is specified, <literal>FOR EACH
      STATEMENT</literal> is the default.  Constraint triggers can only
      be specified <literal>FOR EACH ROW</>.
-->
このパラメータは、トリガプロシージャを、トリガイベントによって影響を受ける行ごとに1回起動するか、SQL文ごとに1回のみ起動するかを指定します。
どちらも指定されない場合は、<literal>FOR EACH STATEMENT</literal>がデフォルトです。
制約トリガは<literal>FOR EACH ROW</>のみ指定することができます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">condition</replaceable></term>
    <listitem>
     <para>
<!--
      A Boolean expression that determines whether the trigger function
      will actually be executed.  If <literal>WHEN</> is specified, the
      function will only be called if the <replaceable
      class="parameter">condition</replaceable> returns <literal>true</>.
      In <literal>FOR EACH ROW</literal> triggers, the <literal>WHEN</>
      condition can refer to columns of the old and/or new row values
      by writing <literal>OLD.<replaceable
      class="parameter">column_name</replaceable></literal> or
      <literal>NEW.<replaceable
      class="parameter">column_name</replaceable></literal> respectively.
      Of course, <literal>INSERT</> triggers cannot refer to <literal>OLD</>
      and <literal>DELETE</> triggers cannot refer to <literal>NEW</>.
-->
トリガ関数を実際に実行するか否かを決定する論理式です。
<literal>WHEN</>が指定された場合、<replaceable class="parameter">condition</replaceable>が<literal>true</>を返す場合のみ関数が呼び出されます。
<literal>FOR EACH ROW</literal>トリガでは、<literal>WHEN</>条件で、それぞれ<literal>OLD.<replaceable class="parameter">column_name</replaceable></literal>、<literal>NEW.<replaceable class="parameter">column_name</replaceable></literal>と記述することで、古い行の値、新しい行の値、またはその両方の列を参照することができます。
当然ながら<literal>INSERT</>トリガでは<literal>OLD</>を参照することはできませんし、<literal>DELETE</>トリガでは<literal>NEW</>を参照することはできません。
     </para>

<!--
     <para><literal>INSTEAD OF</> triggers do not support <literal>WHEN</>
      conditions.
-->
<para><literal>INSTEAD OF</>トリガは<literal>WHEN</>条件をサポートしません。
     </para>

     <para>
<!--
      Currently, <literal>WHEN</literal> expressions cannot contain
      subqueries.
-->
現時点では<literal>WHEN</literal>条件に副問い合わせを含めることはできません。
     </para>

     <para>
<!--
      Note that for constraint triggers, evaluation of the <literal>WHEN</>
      condition is not deferred, but occurs immediately after the row update
      operation is performed. If the condition does not evaluate to true then
      the trigger is not queued for deferred execution.
-->
制約トリガでは、<literal>WHEN</>条件の評価は遅延されず、行の更新操作が行われた直後に発生することに注意してください。
この条件が真と評価されなかった場合、トリガは遅延実行用のキューに入りません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">function_name</replaceable></term>
    <listitem>
     <para>
<!--
      A user-supplied function that is declared as taking no arguments
      and returning type <literal>trigger</>, which is executed when
      the trigger fires.
-->
ユーザが提供する関数です。この関数は、引数を取らず<literal>trigger</>型を返すよう定義されます。トリガが起動した時に実行されます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">arguments</replaceable></term>
    <listitem>
     <para>
<!--
      An optional comma-separated list of arguments to be provided to
      the function when the trigger is executed.  The arguments are
      literal string constants.  Simple names and numeric constants
      can be written here, too, but they will all be converted to
      strings.  Please check the description of the implementation
      language of the trigger function to find out how these arguments
      can be accessed within the function; it might be different from
      normal function arguments.
-->
トリガ実行時に関数に渡される引数をカンマで区切ったリストで、省略可能です。
引数として指定するのは、リテラル文字列定数です。
単純な名前および数値定数を記述できますが、全て文字列に変換されます。
関数内でこれらの引数にアクセスする方法について調べるためには、トリガ関数を実装した言語の説明を参照してください。
通常の関数引数とは異なる場合があります。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 id="SQL-CREATETRIGGER-notes">
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   To create a trigger on a table, the user must have the
   <literal>TRIGGER</literal> privilege on the table.  The user must
   also have <literal>EXECUTE</literal> privilege on the trigger function.
-->
テーブルにトリガを作成するには、ユーザがそのテーブルに対し<literal>TRIGGER</literal>権限を持っている必要があります。
またユーザはトリガ関数に対し<literal>EXECUTE</literal>権限を持たなければなりません。
  </para>

  <para>
<!--
   Use <xref linkend="sql-droptrigger"> to remove a trigger.
-->
トリガを削除するためには<xref linkend="sql-droptrigger">を使用してください。
  </para>

  <para>
<!--
   A column-specific trigger (one defined using the <literal>UPDATE OF
   <replaceable>column_name</replaceable></literal> syntax) will fire when any
   of its columns are listed as targets in the <command>UPDATE</>
   command's <literal>SET</> list.  It is possible for a column's value
   to change even when the trigger is not fired, because changes made to the
   row's contents by <literal>BEFORE UPDATE</> triggers are not considered.
   Conversely, a command such as <literal>UPDATE ... SET x = x ...</>
   will fire a trigger on column <literal>x</>, even though the column's
   value did not change.
-->
列指定のトリガ（<literal>UPDATE OF <replaceable>column_name</replaceable></literal>構文で定義されたトリガ）は、列挙された列のいずれかかが<command>UPDATE</>コマンドの<literal>SET</>リスト内に対象として指定された場合に発行されます。
<literal>BEFORE UPDATE</>トリガにより行の内容になされた変更は考慮されないため、トリガが発行されない場合であっても、列の値が変更されることはあります。
反対に、<literal>UPDATE ... SET x = x ...</>のようなコマンドは、列の値が変更されませんが、<literal>x</>列に対するトリガが発行されます。
  </para>

  <para>
<!--
   In a <literal>BEFORE</> trigger, the <literal>WHEN</> condition is
   evaluated just before the function is or would be executed, so using
   <literal>WHEN</> is not materially different from testing the same
   condition at the beginning of the trigger function.  Note in particular
   that the <literal>NEW</> row seen by the condition is the current value,
   as possibly modified by earlier triggers.  Also, a <literal>BEFORE</>
   trigger's <literal>WHEN</> condition is not allowed to examine the
   system columns of the <literal>NEW</> row (such as <literal>oid</>),
   because those won't have been set yet.
-->
<literal>BEFORE</>トリガにおいて<literal>WHEN</>条件は関数が実行される、またはされそうな直前に評価されます。
このため<literal>WHEN</>の使用はトリガ関数の先頭で同一の条件を試験することと実質的に違いはありません。
この条件で確認できる<literal>NEW</>行が現在の値であり、それまでのトリガで変更されている可能性があることに、特に注意して下さい。
また<literal>BEFORE</>トリガの<literal>WHEN</>条件では、<literal>NEW</>行のシステム列(<literal>oid</>など)はまだ設定されていないので、検査することができません。
  </para>

  <para>
<!--
   In an <literal>AFTER</> trigger, the <literal>WHEN</> condition is
   evaluated just after the row update occurs, and it determines whether an
   event is queued to fire the trigger at the end of statement.  So when an
   <literal>AFTER</> trigger's <literal>WHEN</> condition does not return
   true, it is not necessary to queue an event nor to re-fetch the row at end
   of statement.  This can result in significant speedups in statements that
   modify many rows, if the trigger only needs to be fired for a few of the
   rows.
-->
<literal>AFTER</>トリガにおいて、<literal>WHEN</>条件は行の更新を行った直後に評価され、文の最後でトリガを発行するためにイベントを保持すべきかどうかを決定します。
このため<literal>AFTER</>トリガの<literal>WHEN</>条件は真を返さない場合、イベントを保持する必要もありませんし、文の最後の行を再度取り出す必要もありません。
これにより、トリガをわずかな行のみに対して発行する必要がある場合、多くの行を変更する文を非常に高速にすることができます。
  </para>

  <para>
<!--
   In <productname>PostgreSQL</productname> versions before 7.3, it was
   necessary to declare trigger functions as returning the placeholder
   type <type>opaque</>, rather than <type>trigger</>.  To support loading
   of old dump files, <command>CREATE TRIGGER</> will accept a function
   declared as returning <type>opaque</>, but it will issue a notice and
   change the function's declared return type to <type>trigger</>.
-->
<productname>PostgreSQL</productname> 7.3より前のバージョンでは、トリガ関数の戻り値の型を、<type>trigger</>型ではなくプレースホルダである<type>opaque</>型として宣言する必要がありました。
古いダンプファイルのロードをサポートするため、<command>CREATE TRIGGER</>では<type>opaque</>型を返すよう宣言された関数を受け入れます。
しかし、注意を促すメッセージを表示し、宣言された関数の戻り値型を<type>trigger</>に変換します。
  </para>

 </refsect1>

 <refsect1 id="SQL-CREATETRIGGER-examples">
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   Execute the function <function>check_account_update</> whenever
   a row of the table <literal>accounts</> is about to be updated:
-->
テーブル<literal>accounts</>の行が更新される直前に関数<function>check_account_update</>を実行します。

<programlisting>
CREATE TRIGGER check_update
    BEFORE UPDATE ON accounts
    FOR EACH ROW
    EXECUTE PROCEDURE check_account_update();
</programlisting>

<!--
   The same, but only execute the function if column <literal>balance</>
   is specified as a target in the <command>UPDATE</> command:
-->
上と同じです。
しかし、列<literal>balance</>が<command>UPDATE</>コマンドの対象として指定された場合のみ実行されます。

<programlisting>
CREATE TRIGGER check_update
    BEFORE UPDATE OF balance ON accounts
    FOR EACH ROW
    EXECUTE PROCEDURE check_account_update();
</programlisting>

<!--
   This form only executes the function if column <literal>balance</>
   has in fact changed value:
-->
以下の構文では、列<literal>balance</>が実際に変更された場合のみ関数が実行されます。

<programlisting>
CREATE TRIGGER check_update
    BEFORE UPDATE ON accounts
    FOR EACH ROW
    WHEN (OLD.balance IS DISTINCT FROM NEW.balance)
    EXECUTE PROCEDURE check_account_update();
</programlisting>

<!--
   Call a function to log updates of <literal>accounts</>, but only if
   something changed:
-->
何か変更された場合のみに<literal>accounts</>の更新のログを取る関数を呼び出します。

<programlisting>
CREATE TRIGGER log_update
    AFTER UPDATE ON accounts
    FOR EACH ROW
    WHEN (OLD.* IS DISTINCT FROM NEW.*)
    EXECUTE PROCEDURE log_account_update();
</programlisting>

<!--
   Execute the function <function>view_insert_row</> for each row to insert
   rows into the tables underlying a view:
-->
ビューの背後にあるテーブルに行を挿入するために、各行に対して関数<function>view_insert_row</>を実行します。

<programlisting>
CREATE TRIGGER view_insert
    INSTEAD OF INSERT ON my_view
    FOR EACH ROW
    EXECUTE PROCEDURE view_insert_row();
</programlisting>
  </para>

  <para>
<!--
   <xref linkend="trigger-example"> contains a complete example of a trigger
   function written in C.
-->
<xref linkend="trigger-example">には、C言語で作成されたトリガ関数の完全な例があります。
  </para>
 </refsect1>

 <refsect1 id="SQL-CREATETRIGGER-compatibility">
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <!--
   It's not clear whether SQL/MED contemplates triggers on foreign tables.
   Its <drop basic column definition> General Rules do mention the possibility
   of a reference from a trigger column list.  On the other hand, nothing
   overrides the fact that CREATE TRIGGER only targets base tables.  For now,
   do not document the compatibility status of triggers on foreign tables.
   (訳注：この部分は原文がコメントなので、翻訳しない)
  -->

  <para>
<!--
   The <command>CREATE TRIGGER</command> statement in
   <productname>PostgreSQL</productname> implements a subset of the
   <acronym>SQL</> standard. The following functionalities are currently
   missing:
-->
<productname>PostgreSQL</productname>における<command>CREATE TRIGGER</command>文は標準<acronym>SQL</>のサブセットを実装したものです
現在は、<productname>PostgreSQL</productname>には、次の機能がありません。

   <itemizedlist>
    <listitem>
     <para>
<!--
      SQL allows you to define aliases for the <quote>old</quote>
      and <quote>new</quote> rows or tables for use in the definition
      of the triggered action (e.g., <literal>CREATE TRIGGER ... ON
      tablename REFERENCING OLD ROW AS somename NEW ROW AS othername
      ...</literal>).  Since <productname>PostgreSQL</productname>
      allows trigger procedures to be written in any number of
      user-defined languages, access to the data is handled in a
      language-specific way.
-->
SQLでは、<quote>old</quote>や<quote>new</quote>、トリガによって起動する動作の定義が使用するテーブルに、別名を定義することができます。
（例えば、<literal>CREATE TRIGGER ... ON tablename REFERENCING OLD ROW AS somename NEW ROW AS othername ...</literal>）。
<productname>PostgreSQL</productname>では、複数のユーザ定義言語でトリガプロシージャを作成できるので、データへのアクセスは言語固有の方法で扱われます。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      <productname>PostgreSQL</productname> does not allow the old and new
      tables to be referenced in statement-level triggers, i.e., the tables
      that contain all the old and/or new rows, which are referred to by the
      <literal>OLD TABLE</literal> and <literal>NEW TABLE</literal> clauses in
      the <acronym>SQL</> standard.
-->
<productname>PostgreSQL</productname>では、文レベルのトリガにおいて古いテーブルと新しいテーブル、つまり、古い行のすべて、新しい行のすべてまたはその両方を持つテーブルを参照することができません。
これは標準<acronym>SQL</>では<literal>OLD TABLE</literal>および<literal>NEW TABLE</literal>句により参照されます。
     </para>
    </listitem>

    <listitem>
<!--
     <para><productname>PostgreSQL</productname> only allows the execution
      of a user-defined function for the triggered action.  The standard
      allows the execution of a number of other SQL commands, such as
      <command>CREATE TABLE</command>, as the triggered action.  This
      limitation is not hard to work around by creating a user-defined
      function that executes the desired commands.
-->
<para><productname>PostgreSQL</productname>では、トリガ動作として、ユーザ定義関数の実行しか認めていません。
標準では、多数の他のSQLコマンドを実行させることができます。
例えば、トリガ動作として<command>CREATE TABLE</command>を実行させることも可能です。
この制限を回避する方法は簡単です。必要なコマンドを実行するユーザ定義関数を作成すればよいのです。
     </para>
    </listitem>

   </itemizedlist>
  </para>

  <para>
<!--
   SQL specifies that multiple triggers should be fired in
   time-of-creation order.  <productname>PostgreSQL</productname> uses
   name order, which was judged to be more convenient.
-->
SQLでは、複数のトリガは、作成時刻順に起動すべきであると規定しています。
<productname>PostgreSQL</productname>では名前順です。この方が便利だと考えられるからです。
  </para>

  <para>
<!--
   SQL specifies that <literal>BEFORE DELETE</literal> triggers on cascaded
   deletes fire <emphasis>after</> the cascaded <literal>DELETE</> completes.
   The <productname>PostgreSQL</productname> behavior is for <literal>BEFORE
   DELETE</literal> to always fire before the delete action, even a cascading
   one.  This is considered more consistent.  There is also nonstandard
   behavior if <literal>BEFORE</literal> triggers modify rows or prevent
   updates during an update that is caused by a referential action.  This can
   lead to constraint violations or stored data that does not honor the
   referential constraint.
-->
SQLでは、数珠繋ぎの削除に対する<literal>BEFORE DELETE</literal>は、数珠繋ぎの<literal>DELETE</>が完了した<emphasis>後に</>発行するものと規定しています。
<productname>PostgreSQL</productname>では、<literal>BEFORE DELETE</literal>は常に削除操作よりも前に、それも起点となる削除よりも前に行われます。
この方がより一貫性があると考えられいます。
また、参照整合性に関する動作により引き起こされる更新を実行している間に、<literal>BEFORE</literal>トリガが行を更新し、更新を妨げるような場合の動作も標準に従わないものがあります。
これは、制約違反となるかもしれませんし、参照整合性制約に合わないデータを格納してしまうかもしれません。
  </para>

  <para>
<!--
   The ability to specify multiple actions for a single trigger using
   <literal>OR</literal> is a <productname>PostgreSQL</> extension of
   the SQL standard.
-->
<literal>OR</literal>を使用して単一トリガに複数の動作を指定する機能は、標準SQLに対する<productname>PostgreSQL</productname>の拡張です。
  </para>

  <para>
<!--
   The ability to fire triggers for <command>TRUNCATE</command> is a
   <productname>PostgreSQL</> extension of the SQL standard, as is the
   ability to define statement-level triggers on views.
-->
<command>TRUNCATE</command>でのトリガ発行機能、および、ビューに対する文レベルのトリガの定義機能は標準SQLに対する<productname>PostgreSQL</>の拡張です。
  </para>

  <para>
<!--
   <command>CREATE CONSTRAINT TRIGGER</command> is a
   <productname>PostgreSQL</productname> extension of the <acronym>SQL</>
   standard.
-->
<command>CREATE CONSTRAINT TRIGGER</command>は標準<acronym>SQL</>に対する<productname>PostgreSQL</>の拡張です。
  </para>

 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-altertrigger"></member>
   <member><xref linkend="sql-droptrigger"></member>
   <member><xref linkend="sql-createfunction"></member>
   <member><xref linkend="sql-set-constraints"></member>
  </simplelist>
 </refsect1>
</refentry>
