<!--
doc/src/sgml/ref/create_opclass.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEOPCLASS">
 <indexterm zone="sql-createopclass">
  <primary>CREATE OPERATOR CLASS</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE OPERATOR CLASS</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE OPERATOR CLASS</refname>
<!--
  <refpurpose>define a new operator class</refpurpose>
-->
  <refpurpose>
   新しい演算子クラスを定義する
  </refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE OPERATOR CLASS <replaceable class="parameter">name</replaceable> [ DEFAULT ] FOR TYPE <replaceable class="parameter">data_type</replaceable>
  USING <replaceable class="parameter">index_method</replaceable> [ FAMILY <replaceable class="parameter">family_name</replaceable> ] AS
  {  OPERATOR <replaceable class="parameter">strategy_number</replaceable> <replaceable class="parameter">operator_name</replaceable> [ ( <replaceable class="parameter">op_type</replaceable>, <replaceable class="parameter">op_type</replaceable> ) ] [ FOR SEARCH | FOR ORDER BY <replaceable class="parameter">sort_family_name</replaceable> ]
   | FUNCTION <replaceable class="parameter">support_number</replaceable> [ ( <replaceable class="parameter">op_type</replaceable> [ , <replaceable class="parameter">op_type</replaceable> ] ) ] <replaceable class="parameter">function_name</replaceable> ( <replaceable class="parameter">argument_type</replaceable> [, ...] )
   | STORAGE <replaceable class="parameter">storage_type</replaceable>
  } [, ... ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>CREATE OPERATOR CLASS</command> creates a new operator class.
   An operator class defines how a particular data type can be used with
   an index.  The operator class specifies that certain operators will fill
   particular roles or <quote>strategies</> for this data type and this
   index method.  The operator class also specifies the support procedures to
   be used by
   the index method when the operator class is selected for an
   index column.  All the operators and functions used by an operator
   class must be defined before the operator class can be created.
-->
<command>CREATE OPERATOR CLASS</command>は新しい演算子クラスを作成します。
演算子クラスは、特定のデータ型がインデックスでどのように使用されるかを定義します。
演算子クラスにより、データ型およびインデックスメソッドの特定の役割もしくは<quote>戦略</>に、どの演算子を使用するかが指定されます。
また、インデックスの列に対して演算子クラスが選択される際、演算子クラスによってインデックスメソッドが使用するサポートプロシージャが指定されます。
演算子クラスで使用される全ての演算子および関数は、演算子クラスを作成できるようになる前に定義しておく必要があります。

  </para>

  <para>
<!--
   If a schema name is given then the operator class is created in the
   specified schema.  Otherwise it is created in the current schema.
   Two operator classes in the same schema can have the same name only if they
   are for different index methods.
-->
スキーマ名が与えられている場合、その演算子クラスは指定されたスキーマに作成されます。
スキーマ名がなければ、演算子クラスは現在のスキーマに作成されます。
異なるインデックスメソッドに使用する場合のみ、同じスキーマ内の2つの演算子クラスに同じ名前を付けることができます。
  </para>

  <para>
<!--
   The user who defines an operator class becomes its owner.  Presently,
   the creating user must be a superuser.  (This restriction is made because
   an erroneous operator class definition could confuse or even crash the
   server.)
-->
演算子クラスは、それを定義したユーザが所有者となります。
現在、演算子クラスを作成するには、スーパーユーザである必要があります。
（誤った演算子クラスを定義すると、サーバを混乱させ、サーバクラッシュの原因とさえなり得るため、この制限が付けられています）。
  </para>

  <para>
<!--
   <command>CREATE OPERATOR CLASS</command> does not presently check
   whether the operator class definition includes all the operators and
   functions required by the index method, nor whether the operators and
   functions form a self-consistent set.  It is the user's
   responsibility to define a valid operator class.
-->
現在、<command>CREATE OPERATOR CLASS</command>では、インデックスメソッドに必要な全ての演算子および関数が演算子クラス定義に含まれているかどうか、また、演算子や関数の形式がそれ自身で整合性を持っているかを検査しません。
ユーザの責任において、有効な演算子クラスを定義してください。
  </para>

  <para>
<!--
   Related operator classes can be grouped into <firstterm>operator
   families</>.  To add a new operator class to an existing family,
   specify the <literal>FAMILY</> option in <command>CREATE OPERATOR
   CLASS</command>.  Without this option, the new class is placed into
   a family named the same as the new class (creating that family if
   it doesn't already exist).
-->
関連する演算子クラスを<firstterm>演算子族</>にまとめることができます。
既存の演算子族に新しい演算子クラスを追加するためには、<command>CREATE OPERATOR CLASS</command>で<literal>FAMILY</>オプションを指定してください。
このオプションを指定しないと、新しい演算子クラスはそのクラスと同じ名前の演算子族内に置かれます（この演算子族が存在しない場合は作成します）。
  </para>

  <para>
<!--
   Refer to <xref linkend="xindex"> for further information.
-->
詳細については<xref linkend="xindex">を参照してください。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <para>
<!--
      The name of the operator class to be created.  The name can be
      schema-qualified.
-->
作成する演算子クラスの名前です。
演算子クラス名は、スキーマ修飾することができます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFAULT</></term>
    <listitem>
     <para>
<!--
      If present, the operator class will become the default
      operator class for its data type.  At most one operator class
      can be the default for a specific data type and index method.
-->
<literal>DEFAULT</>を付けると、その演算子クラスが、そのデータ型のデフォルトの演算子クラスになります。
特定のデータ型およびインデックスメソッドのデフォルトにできる演算子クラスは最大1つまでです。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">data_type</replaceable></term>
    <listitem>
     <para>
<!--
      The column data type that this operator class is for.
-->
この演算子クラスを使用する列のデータ型です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">index_method</replaceable></term>
    <listitem>
     <para>
<!--
      The name of the index method this operator class is for.
-->
この演算子クラスを使用するインデックスメソッドの名前です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">family_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name of the existing operator family to add this operator class to.
      If not specified, a family named the same as the operator class is
      used (creating it, if it doesn't already exist).
-->
この演算子クラスの追加先となる既存の演算子族の名前です。
指定されない場合、演算子クラスと同じ名前の演算子族が使用されます（演算子族が存在しない場合は作成します）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">strategy_number</replaceable></term>
    <listitem>
     <para>
<!--
      The index method's strategy number for an operator
      associated with the operator class.
-->
演算子クラスに関連する演算子のインデックスメソッドの戦略番号です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">operator_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name (optionally schema-qualified) of an operator associated
      with the operator class.
-->
演算子クラスに関連する演算子の名前です（スキーマ修飾名でも可）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">op_type</replaceable></term>
    <listitem>
     <para>
<!--
      In an <literal>OPERATOR</> clause,
      the operand data type(s) of the operator, or <literal>NONE</> to
      signify a left-unary or right-unary operator.  The operand data
      types can be omitted in the normal case where they are the same
      as the operator class's data type.
-->
<literal>OPERATOR</>句では、演算子の入力データ型、もしくは、左単項演算子か右単項演算子を表す<literal>NONE</>を指定します。
演算子クラスのデータ型と同じである通常の場合、入力データ型は省略可能です。
     </para>

     <para>
<!--
      In a <literal>FUNCTION</> clause, the operand data type(s) the
      function is intended to support, if different from
      the input data type(s) of the function (for B-tree comparison functions
      and hash functions)
      or the class's data type (for B-tree sort support functions and all
      functions in GiST, SP-GiST and GIN operator classes).  These defaults
      are correct, and so <replaceable
      class="parameter">op_type</replaceable> need not be specified in
      <literal>FUNCTION</> clauses, except for the case of a B-tree sort
      support function that is meant to support cross-data-type comparisons.
-->
<literal>FUNCTION</>句では、関数の入力データ型（B-Tree比較関数およびハッシュ関数用）またはクラスのデータ型（B-treeソートサポート関数とGiST、SP-GiST、GIN演算子クラスのすべての関数用）と異なる場合、関数がサポートする予定の演算対象データ型です。
これらのデフォルトは常に正確です。
このため、しかしデータ型を跨がる比較をサポートする予定のB-treeソートサポート関数は除き、<literal>FUNCTION</>句で<replaceable class="parameter">op_type</replaceable>を指定する必要はありません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">sort_family_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name (optionally schema-qualified) of an existing <literal>btree</literal> operator
      family that describes the sort ordering associated with an ordering
      operator.
-->
順序付け演算子に関連したソート順序を記述する、既存の<literal>btree</literal>演算子族の名前（スキーマ修飾可）です。
     </para>

     <para>
<!--
      If neither <literal>FOR SEARCH</> nor <literal>FOR ORDER BY</> is
      specified, <literal>FOR SEARCH</> is the default.
-->
<literal>FOR SEARCH</>も<literal>FOR ORDER BY</>も指定されていない場合、<literal>FOR SEARCH</>がデフォルトです。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">support_number</replaceable></term>
    <listitem>
     <para>
<!--
      The index method's support procedure number for a
      function associated with the operator class.
-->
演算子クラスに関連する関数用のインデックスメソッドのサポートプロシージャの番号です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">function_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name (optionally schema-qualified) of a function that is an
      index method support procedure for the operator class.
-->
演算子クラス用のインデックスメソッドのサポートプロシージャとなる関数の名前です（スキーマ修飾名でも可）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argument_type</replaceable></term>
    <listitem>
     <para>
<!--
      The parameter data type(s) of the function.
-->
関数のパラメータのデータ型です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">storage_type</replaceable></term>
    <listitem>
     <para>
<!--
      The data type actually stored in the index.  Normally this is
      the same as the column data type, but some index methods
      (currently GiST and GIN) allow it to be different.  The
      <literal>STORAGE</> clause must be omitted unless the index
      method allows a different type to be used.
-->
インデックスに実際に格納されるデータ型です。
通常、このデータ型は列のデータ型と同じです。
しかし、異なるデータ型を許可するインデックスメソッドも存在します（現時点ではGiSTとGIN）。
インデックスメソッドが異なるデータ型の使用を許可していなければ、<literal>STORAGE</>句を指定してはいけません。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
<!--
   The <literal>OPERATOR</>, <literal>FUNCTION</>, and <literal>STORAGE</>
   clauses can appear in any order.
-->
<literal>OPERATOR</>、<literal>FUNCTION</>、<literal>STORAGE</>は任意の順番で記述できます。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   Because the index machinery does not check access permissions on functions
   before using them, including a function or operator in an operator class
   is tantamount to granting public execute permission on it.  This is usually
   not an issue for the sorts of functions that are useful in an operator
   class.
-->
インデックス機構は、使用する前に関数に関するアクセス権限を検査しませんので、
関数や演算子を演算子クラスに含めることは、PUBLICに実行権限を与えることと同じです。
通常、演算子クラスで有用な種類の関数ではこれは問題になりません。
  </para>

  <para>
<!--
   The operators should not be defined by SQL functions.  A SQL function
   is likely to be inlined into the calling query, which will prevent
   the optimizer from recognizing that the query matches an index.
-->
演算子はSQL関数で定義してはなりません。
SQL関数は呼び出し元の問い合わせにインライン化されることが多いので、オプティマイザでその問い合わせがインデックスに一致するかどうかを認識できなくなってしまうからです。
  </para>

  <para>
<!--
   Before <productname>PostgreSQL</productname> 8.4, the <literal>OPERATOR</>
   clause could include a <literal>RECHECK</> option.  This is no longer
   supported because whether an index operator is <quote>lossy</> is now
   determined on-the-fly at run time.  This allows efficient handling of
   cases where an operator might or might not be lossy.
-->
<productname>PostgreSQL</productname> 8.4より前までは、<literal>OPERATOR</>句に<literal>RECHECK</>オプションを含めることができました。
インデックス演算子に<quote>損失がある</>かどうかは実行時にその場で決定されるようになりましたので、これはサポートされなくなりました。
これにより、演算子に損失があるかもしれないしないかもしれないような場合を効率的に扱うことができるようになりました。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   The following example command defines a GiST index operator class
   for the data type <literal>_int4</> (array of <type>int4</type>).  See the
   <xref linkend="intarray"> module for the complete example.
-->
以下のコマンド例では、<literal>_int4</>データ型（<type>int4</type>の配列）のGiSTインデックス演算子クラスを定義しています。
この例の詳細については、<xref linkend="intarray">モジュールを参照してください。
  </para>

<programlisting>
CREATE OPERATOR CLASS gist__int_ops
    DEFAULT FOR TYPE _int4 USING gist AS
        OPERATOR        3       &amp;&amp;,
        OPERATOR        6       = (anyarray, anyarray),
        OPERATOR        7       @&gt;,
        OPERATOR        8       &lt;@,
        OPERATOR        20      @@ (_int4, query_int),
        FUNCTION        1       g_int_consistent (internal, _int4, int, oid, internal),
        FUNCTION        2       g_int_union (internal, internal),
        FUNCTION        3       g_int_compress (internal),
        FUNCTION        4       g_int_decompress (internal),
        FUNCTION        5       g_int_penalty (internal, internal, internal),
        FUNCTION        6       g_int_picksplit (internal, internal),
        FUNCTION        7       g_int_same (_int4, _int4, internal);
</programlisting>
 </refsect1>

 <refsect1>
<!--
  <title>Compatibility</title>
-->
  <title>
互換性
  </title>

  <para>
<!--
   <command>CREATE OPERATOR CLASS</command> is a
   <productname>PostgreSQL</productname> extension.  There is no
   <command>CREATE OPERATOR CLASS</command> statement in the SQL
   standard.
-->
<command>CREATE OPERATOR CLASS</command>は<productname>PostgreSQL</productname>の拡張です。 
標準SQLには<command>CREATE OPERATOR CLASS</command>文はありません。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alteropclass"></member>
   <member><xref linkend="sql-dropopclass"></member>
   <member><xref linkend="sql-createopfamily"></member>
   <member><xref linkend="sql-alteropfamily"></member>
  </simplelist>
 </refsect1>
</refentry>
