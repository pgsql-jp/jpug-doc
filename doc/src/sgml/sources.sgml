<!-- doc/src/sgml/sources.sgml -->

 <chapter id="source">
<!--
  <title>PostgreSQL Coding Conventions</title>
-->
<title>PostgreSQLコーディング規約</title>

  <sect1 id="source-format">
<!--
   <title>Formatting</title>
-->
<title>書式</title>

   <para>
<!--
    Source code formatting uses 4 column tab spacing, with
    tabs preserved (i.e., tabs are not expanded to spaces).
    Each logical indentation level is one additional tab stop.
-->
ソースコードの書式では、タブを4カラムとするスペーシングを使用し、現在はタブを保存しています（つまりタブをスペースに展開しません）。
各論理インデントのレベルは、さらに1つのタブストップです。
   </para>

   <para>
<!--
    Layout rules (brace positioning, etc) follow BSD conventions.  In
    particular, curly braces for the controlled blocks of <literal>if</>,
    <literal>while</>, <literal>switch</>, etc go on their own lines.
-->
配置規則（括弧の位置など）はBSDの慣例に従います。
特に<literal>if</>、<literal>while</>、<literal>switch</>などの制御ブロックのための中括弧はそれ自身を一行で表します。
   </para>

   <para>
<!--
    Limit line lengths so that the code is readable in an 80-column window.
    (This doesn't mean that you must never go past 80 columns.  For instance,
    breaking a long error message string in arbitrary places just to keep the
    code within 80 columns is probably not a net gain in readability.)
-->
コードが80カラムのウィンドウで読み易くなるように1行の長さを制限してください。
（これは80カラムを超えてはならないことを意味していません。
例えば、任意の場所にある長いエラーメッセージ文字列をコードが80カラムに収まるように改行を含めても、おそらく可読性を向上させることはありません。）
   </para>

   <para>
<!--
    Do not use C++ style comments (<literal>//</> comments).  Strict ANSI C
    compilers do not accept them.  For the same reason, do not use C++
    extensions such as declaring new variables mid-block.
-->
C++形式のコメント（<literal>//</>コメント）は使用しないでください。
厳密なANSI Cコンパイラはそれらを受け付けません。
同じ理由で、中間ブロックで新規の変数を宣言するようなC++拡張を使用しないでください。
   </para>

   <para>
<!--
    The preferred style for multi-line comment blocks is
-->
複数行に渡るコメントブロックの推奨書式は以下のようになります。
<!--
<programlisting>
/*
 * comment text begins here
 * and continues here
 */
</programlisting>
-->
<programlisting>
/*
 * コメントテキストはここから始まり
 * ここまで続きます
 */
</programlisting>
<!--
    Note that comment blocks that begin in column 1 will be preserved as-is
    by <application>pgindent</>, but it will re-flow indented comment blocks
    as though they were plain text.  If you want to preserve the line breaks
    in an indented block, add dashes like this:
-->
列1で始まるコメントブロックは<application>pgindent</>によりそのまま維持されますが、字下げされたコメントブロックを、あたかも平文テキストのように還流します。
ある字下げブロックの中で改行を維持したい場合は以下のようにダッシュを追加します。
<programlisting>
    /*----------
     * <!--comment text begins here-->コメントテキストはここから始まり
     * <!--and continues here-->ここまで続きます
     *----------
     */
</programlisting>
   </para>

   <para>
<!--
    While submitted patches do not absolutely have to follow these formatting
    rules, it's a good idea to do so.  Your code will get run through
    <application>pgindent</> before the next release, so there's no point in
    making it look nice under some other set of formatting conventions.
    A good rule of thumb for patches is <quote>make the new code look like
    the existing code around it</>.
-->
登録されたパッチは完全にはこの書式規則に従う必要はありませんが、そのようにすることを勧めます。
登録されるコードは次のリリースの前に<application>pgindent</>を通します。
ですので、他の書式規則に従って作成して、見た目を良くすることに意味がありません。
優れたパッチに関する原則は、<quote>新しいコードがその前後にある既存のコードのように見える</>ことです。
   </para>

   <para>
<!--
    The <filename>src/tools</filename> directory contains sample settings
    files that can be used with the <productname>emacs</productname>,
    <productname>xemacs</productname> or <productname>vim</productname>
    editors to help ensure that they format code according to these
    conventions.
-->
<filename>src/tools</filename>ディレクトリには、確実に上記の規約に従った書式になることを補助する、<productname>emacs</productname>、<productname>xemacs</productname>、<productname>vim</productname>エディタで使用できるサンプルの設定ファイルがあります。
   </para>

   <para>
<!--
    The text browsing tools <application>more</application> and
    <application>less</application> can be invoked as:
-->
テキスト閲覧ツール<application>more</application>と<application>less</application>では以下のようにすればタブを適切に表示させることができます。
<programlisting>
more -x4
less -x4
</programlisting>
<!--
    to make them show tabs appropriately.
-->
   </para>
  </sect1>

  <sect1 id="error-message-reporting">
<!--
   <title>Reporting Errors Within the Server</title>
-->
   <title>サーバ内部からのエラーの報告</title>

   <indexterm>
    <primary>ereport</primary>
   </indexterm>
   <indexterm>
    <primary>elog</primary>
   </indexterm>

   <para>
<!--
    Error, warning, and log messages generated within the server code
    should be created using <function>ereport</>, or its older cousin
    <function>elog</>.  The use of this function is complex enough to
    require some explanation.
-->
サーバコード内から生成されるエラー、警告、ログメッセージは、<function>ereport</>もしくはこれに似た古い<function>elog</>を使用して作成してください。
この関数の使用はいくつか説明が必要なほど複雑です。
   </para>

   <para>
<!--
    There are two required elements for every message: a severity level
    (ranging from <literal>DEBUG</> to <literal>PANIC</>) and a primary
    message text.  In addition there are optional elements, the most
    common of which is an error identifier code that follows the SQL spec's
    SQLSTATE conventions.
    <function>ereport</> itself is just a shell function, that exists
    mainly for the syntactic convenience of making message generation
    look like a function call in the C source code.  The only parameter
    accepted directly by <function>ereport</> is the severity level.
    The primary message text and any optional message elements are
    generated by calling auxiliary functions, such as <function>errmsg</>,
    within the <function>ereport</> call.
-->
すべてのメッセージには、深刻度レベル（<literal>DEBUG</>から<literal>PANIC</>までの範囲）と主メッセージテキストという、2つの必須要素があります。
さらに、省略可能な要素があります。
その中で最もよく使用されるのは、SQL仕様のSQLSTATE規則に従うエラー識別コードです。
<function>ereport</>自身はシェル関数で、主に、メッセージ生成をCソースコード内の関数呼び出しのように行わせる、構文の便宜上存在します。
<function>ereport</>で直接受け付けられる唯一のパラメータは深刻度レベルです。
主メッセージテキストと任意の省略可能なメッセージ要素は、<function>ereport</>呼び出し内で<function>errmsg</>などの補助関数を呼び出すことで生成されます。
   </para>

   <para>
<!--
    A typical call to <function>ereport</> might look like this:
-->
典型的な<function>ereport</>の呼び出しは以下のようなものです。
<programlisting>
ereport(ERROR,
        (errcode(ERRCODE_DIVISION_BY_ZERO),
         errmsg("division by zero")));
</programlisting>
<!--
    This specifies error severity level <literal>ERROR</> (a run-of-the-mill
    error).  The <function>errcode</> call specifies the SQLSTATE error code
    using a macro defined in <filename>src/include/utils/errcodes.h</>.  The
    <function>errmsg</> call provides the primary message text.  Notice the
    extra set of parentheses surrounding the auxiliary function calls &mdash;
    these are annoying but syntactically necessary.
-->
これはエラー深刻度レベル<literal>ERROR</>（普通のエラー）を指定します。
<function>errcode</>呼び出しは、<filename>src/include/utils/errcodes.h</>で定義されたマクロを使用してSQLSTATEエラーコードを指定します。
<function>errmsg</>呼び出しは主メッセージテキストを提供します。
補助関数呼び出しを囲む余計な括弧群に注意してください。
これらはいらいらさせられますが、構文上必要です。
   </para>

   <para>
<!--
    Here is a more complex example:
-->
以下に、より複雑な例を示します。
<programlisting>
ereport(ERROR,
        (errcode(ERRCODE_AMBIGUOUS_FUNCTION),
         errmsg("function %s is not unique",
                func_signature_string(funcname, nargs,
                                      NIL, actual_arg_types)),
         errhint("Unable to choose a best candidate function. "
                 "You might need to add explicit typecasts.")));
</programlisting>
<!--
    This illustrates the use of format codes to embed run-time values into
    a message text.  Also, an optional <quote>hint</> message is provided.
-->
これは、実行時の値をメッセージテキスト内に埋め込むための整形用コードの使用を示します。
また、省略可能な<quote>ヒント</>メッセージも提供されています。
   </para>

   <para>
<!--
    If the severity level is <literal>ERROR</> or higher,
    <function>ereport</> aborts the execution of the user-defined
    function and does not return to the caller. If the severity level is
    lower than <literal>ERROR</>, <function>ereport</> returns normally.
-->
深刻度レベルが<literal>ERROR</>以上であれば、<function>ereport</>はユーザ定義関数の実行を中断し呼び出し元には戻りません。
深刻度レベルが<literal>ERROR</>未満であれば、<function>ereport</>は正常に戻ります。
   </para>

   <para>
<!--
    The available auxiliary routines for <function>ereport</> are:
-->
<function>ereport</>で使用可能な補助ルーチンを以下に示します。
  <itemizedlist>
   <listitem>
    <para>
<!--
     <function>errcode(sqlerrcode)</function> specifies the SQLSTATE error identifier
     code for the condition.  If this routine is not called, the error
     identifier defaults to
     <literal>ERRCODE_INTERNAL_ERROR</> when the error severity level is
     <literal>ERROR</> or higher, <literal>ERRCODE_WARNING</> when the
     error level is <literal>WARNING</>, otherwise (for <literal>NOTICE</>
     and below) <literal>ERRCODE_SUCCESSFUL_COMPLETION</>.
     While these defaults are often convenient, always think whether they
     are appropriate before omitting the <function>errcode()</> call.
-->
<function>errcode(sqlerrcode)</function>は、その条件用のSQLSTATEエラー識別コードを指定します。
このルーチンが呼び出されないと、エラー識別子のデフォルトは、エラー深刻度レベルが<literal>ERROR</>以上の場合には<literal>ERRCODE_INTERNAL_ERROR</>に、エラー深刻度レベルが<literal>WARNING</>の場合には<literal>ERRCODE_WARNING</>に、さもなければ（<literal>NOTICE</>以下）<literal>ERRCODE_SUCCESSFUL_COMPLETION</>になります。
これらのデフォルトはしばしば便利ですが、<function>errcode()</>呼び出しを省略する前に、常に適切かどうかを検討してください。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     <function>errmsg(const char *msg, ...)</function> specifies the primary error
     message text, and possibly run-time values to insert into it.  Insertions
     are specified by <function>sprintf</>-style format codes.  In addition to
     the standard format codes accepted by <function>sprintf</>, the format
     code <literal>%m</> can be used to insert the error message returned
     by <function>strerror</> for the current value of <literal>errno</>.
-->
<function>errmsg(const char *msg, ...)</function>は、主エラーメッセージテキストを指定し、また、実行時の値をそこに挿入することもできます。
挿入は、<function>sprintf</>様式の書式コードで指定されます。
<function>sprintf</>で受け付けられる標準の書式コードに加え、<literal>%m</>書式コードを使用して、現在の<literal>errno</>の値用の<function>strerror</>で返されるエラーメッセージを挿入することができます。
     <footnote>
      <para>
<!--
       That is, the value that was current when the <function>ereport</> call
       was reached; changes of <literal>errno</> within the auxiliary reporting
       routines will not affect it.  That would not be true if you were to
       write <literal>strerror(errno)</> explicitly in <function>errmsg</>'s
       parameter list; accordingly, do not do so.
-->
つまり、<function>ereport</>呼び出しに達した時点の値です。
補助報告ルーチン内で<literal>errno</>を変更しても効果はありません。
<function>errmsg</>内で<literal>strerror(errno)</>を明示的に記述したとしても正確なものにはなりません。
したがって、このようにはしないでください。
      </para>
     </footnote>
<!--
     <literal>%m</> does not require any
     corresponding entry in the parameter list for <function>errmsg</>.
     Note that the message string will be run through <function>gettext</>
     for possible localization before format codes are processed.
-->
<literal>%m</>は<function>errmsg</>のパラメータリスト内に対応する項目を必要としません。
メッセージ文字列は、書式コードの処理を行う前に、地域化のために<function>gettext</>を通ることに注意してください。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     <function>errmsg_internal(const char *msg, ...)</function> is the same as
     <function>errmsg</>, except that the message string will not be
     translated nor included in the internationalization message dictionary.
     This should be used for <quote>cannot happen</> cases that are probably
     not worth expending translation effort on.
-->
<function>errmsg_internal(const char *msg, ...)</function>は、そのメッセージ文字列は変換されず、国際化用メッセージ辞書に含まれない点を除き、<function>errmsg</>と同一です。
これは、おそらく翻訳作業を行う価値がない<quote>発生し得ない</>場合用に使用すべきです。
    </para>
   </listitem>
   <listitem>
    <para>
    <!--
     <function>errmsg_plural(const char *fmt_singular, const char *fmt_plural,
     unsigned long n, ...)</function> is like <function>errmsg</>, but with
     support for various plural forms of the message.
     <replaceable>fmt_singular</> is the English singular format,
     <replaceable>fmt_plural</> is the English plural format,
     <replaceable>n</> is the integer value that determines which plural
     form is needed, and the remaining arguments are formatted according
     to the selected format string.  For more information see
     <xref linkend="nls-guidelines">.
     -->
<function>errmsg_plural(const char *fmt_singular, const char *fmt_plural, unsigned long n, ...)</function>は<function>errmsg</>のようですが、メッセージの各種の複数書式があります。
<replaceable>fmt_singular</>は英語の単数書式、<replaceable>fmt_plural</>は英語の複数書式、<replaceable>n</>はどの複数書式が必要なのかを決定する整数値で、残りの引数は選択された書式文字列に従って書式化されます。
より詳細な情報は<xref linkend="nls-guidelines">を参照してください。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     <function>errdetail(const char *msg, ...)</function> supplies an optional
     <quote>detail</> message; this is to be used when there is additional
     information that seems inappropriate to put in the primary message.
     The message string is processed in just the same way as for
     <function>errmsg</>.
-->
<function>errdetail(const char *msg, ...)</function>は省略可能な<quote>詳細</>メッセージを提供します。
これは、主メッセージ内に記述するには不適切と考えられる追加情報がある場合に使用されます。
このメッセージ文字列は<function>errmsg</>とまったく同じ方法で処理されます。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     <function>errdetail_internal(const char *msg, ...)</function> is the same
     as <function>errdetail</>, except that the message string will not be
     translated nor included in the internationalization message dictionary.
     This should be used for detail messages that are not worth expending
     translation effort on, for instance because they are too technical to be
     useful to most users.
-->
<function>errdetail_internal(const char *msg, ...)</function>は、メッセージが翻訳されない、または、国際化メッセージ辞書内に含まれない点を除き、<function>errdetail</>と同じです。
これは、例えばほとんどのユーザに役に立つにはあまりにも技術的すぎるなど、翻訳する手間をかける価値がない詳細メッセージで有用であるはずです。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     <function>errdetail_plural(const char *fmt_singular, const char *fmt_plural,
     unsigned long n, ...)</function> is like <function>errdetail</>, but with
     support for various plural forms of the message.
     For more information see <xref linkend="nls-guidelines">.
-->
<function>errdetail_plural(const char *fmt_singular, const char *fmt_plural, unsigned long n, ...)</function>は<function>errdetail</>と似ていますが、メッセージの各種の複数書式をサポートします。
より詳細な情報は<xref linkend="nls-guidelines">を参照してください。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     <function>errdetail_log(const char *msg, ...)</function> is the same as
     <function>errdetail</> except that this string goes only to the server
     log, never to the client.  If both <function>errdetail</> (or one of
     its equivalents above) and
     <function>errdetail_log</> are used then one string goes to the client
     and the other to the log.  This is useful for error details that are
     too security-sensitive or too bulky to include in the report
     sent to the client.
-->
この文字列がサーバログのみに渡り、クライアントに渡らない点を除き<function>errdetail_log(const char *msg, ...)</function>は<function>errdetail</>と同一です。
<function>errdetail</>（や上記の等価物の１つ）と<function>errdetail_log</>が共に使用された場合、１つの文字列はクライアントに渡り、もう１つはログに渡ります。
クライアントに送られるレポートに含めるにはセキュリティに対して慎重を期さなければならないもの、あるいは膨大すぎるエラー詳細に対して効果があります。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     <function>errdetail_log_plural(const char *fmt_singuar, const char
     *fmt_plural, unsigned long n, ...)</function> is like
     <function>errdetail_log</>, but with support for various plural forms of
     the message.
     For more information see <xref linkend="nls-guidelines">.
-->
<function>errdetail_log_plural(const char *fmt_singuar, const char *fmt_plural, unsigned long n, ...)</function>は<function>errdetail_log</>と似ていますが、メッセージの各種の複数書式をサポートします。
より詳細な情報は<xref linkend="nls-guidelines">を参照してください。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     <function>errhint(const char *msg, ...)</function> supplies an optional
     <quote>hint</> message; this is to be used when offering suggestions
     about how to fix the problem, as opposed to factual details about
     what went wrong.
     The message string is processed in just the same way as for
     <function>errmsg</>.
-->
<function>errhint(const char *msg, ...)</function>は、省略可能な<quote>ヒント</>メッセージを提供します。
これは、何が悪かったのかについての事実に基づく詳細とは反対で、問題を解決させる方法に関する提言を提供するために使用されます。
このメッセージ文字列は<function>errmsg</>とまったく同じ方法で処理されます。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     <function>errcontext(const char *msg, ...)</function> is not normally called
     directly from an <function>ereport</> message site; rather it is used
     in <literal>error_context_stack</> callback functions to provide
     information about the context in which an error occurred, such as the
     current location in a PL function.
     The message string is processed in just the same way as for
     <function>errmsg</>.  Unlike the other auxiliary functions, this can
     be called more than once per <function>ereport</> call; the successive
     strings thus supplied are concatenated with separating newlines.
-->
<function>errcontext(const char *msg, ...)</function>は通常<function>ereport</>メッセージ側から直接呼び出されません。
エラーが発生したコンテキスト、例えばPL関数の現在位置の情報を提供するために<literal>error_context_stack</>コールバック関数内で使用されます。
メッセージ文字列は<function>errmsg</>とまったく同じ方法で処理されます。
他の補助関数とは異なり、1つの<function>ereport</>呼び出しで何度も呼び出すことができます。
こうして提供される文字列の並びは、改行で区切った形で連結されます。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     <function>errposition(int cursorpos)</function> specifies the textual location
     of an error within a query string.  Currently it is only useful for
     errors detected in the lexical and syntactic analysis phases of
     query processing.
-->
<function>errposition(int cursorpos)</function>は、問い合わせ文字列内でエラーが発生した位置をテキストで指定します。
現在、問い合わせ処理の字句解析および構文解析段階でエラーが検出された場合にのみ役に立ちます。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     <function>errtable(Relation rel)</function> specifies a relation whose
     name and schema name should be included as auxiliary fields in the error
     report.
-->
<function>errtable(Relation rel)</function>はエラーレポートにおいて名前とスキーマ名が外部フィールドとして含まれなければならないリレーションを指定します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     <function>errtablecol(Relation rel, int attnum)</function> specifies
     a column whose name, table name, and schema name should be included as
     auxiliary fields in the error report.
-->
<function>errtablecol(Relation rel, int attnum)</function>はエラーレポートにおいて名前、テーブル名、およびスキーマ名が外部フィールドとして含まれなければならない列を指定します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     <function>errtableconstraint(Relation rel, const char *conname)</function>
     specifies a table constraint whose name, table name, and schema name
     should be included as auxiliary fields in the error report.  Indexes
     should be considered to be constraints for this purpose, whether or
     not they have an associated <structname>pg_constraint</> entry.  Be
     careful to pass the underlying heap relation, not the index itself, as
     <literal>rel</>.
-->
<function>errtableconstraint(Relation rel, const char *conname)</function>はエラーレポートにおいて名前、テーブル名、およびスキーマ名が外部フィールドとして含まれなければならないテーブル制約を指定します。
この目的のため、関連した<structname>pg_constraint</>エントリの有る無しに関わらず、インデックスは制約と見なされなければなりません。進行中のヒープリレーションを受け渡すにはインデックスではなく<literal>rel</>とすることに注意してください。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     <function>errdatatype(Oid datatypeOid)</function> specifies a data
     type whose name and schema name should be included as auxiliary fields
     in the error report.
-->
<function>errdatatype(Oid datatypeOid)</function>はエラーレポートにおいて名前とスキーマ名が外部フィールドとして含まれなければならないデータ型を指定します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     <function>errdomainconstraint(Oid datatypeOid, const char *conname)</function>
     specifies a domain constraint whose name, domain name, and schema name
     should be included as auxiliary fields in the error report.
-->
<function>errdomainconstraint(Oid datatypeOid, const char *conname)</function>はエラーレポートにおいて名前、ドメイン名、およびスキーマ名が外部フィールドとして含まれなければならないドメイン制約を指定します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     <function>errcode_for_file_access()</> is a convenience function that
     selects an appropriate SQLSTATE error identifier for a failure in a
     file-access-related system call.  It uses the saved
     <literal>errno</> to determine which error code to generate.
     Usually this should be used in combination with <literal>%m</> in the
     primary error message text.
-->
<function>errcode_for_file_access()</>は、ファイルアクセス関連のシステムコールでの失敗用のSQLSTATEエラー識別子を適切に選択する、便利な関数です。
保存された<literal>errno</>を使用して、どのエラーコードを生成するかを決定します。
通常、これは主エラーメッセージテキスト内で<literal>%m</>と組み合わせて使用されなければなりません。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     <function>errcode_for_socket_access()</> is a convenience function that
     selects an appropriate SQLSTATE error identifier for a failure in a
     socket-related system call.
-->
<function>errcode_for_socket_access()</>は、ソケット関連のシステムコールでの失敗用のSQLSTATEエラー識別子を適切に選択する、便利な関数です。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     <function>errhidestmt(bool hide_stmt)</function> can be called to specify
     suppression of the <literal>STATEMENT:</> portion of a message in the
     postmaster log.  Generally this is appropriate if the message text
     includes the current statement already.
-->
<function>errhidestmt(bool hide_stmt)</function>は、postmasterのログ内のメッセージにおける<literal>STATEMENT:</>部分を抑制するために呼び出すことができます。
通常これは、メッセージテキスト内にすでに現在の文が含まれている場合に適しています。
    </para>
   </listitem>
  </itemizedlist>
   </para>

   <note>
    <para>
<!--
     At most one of the functions <function>errtable</>,
     <function>errtablecol</>, <function>errtableconstraint</>,
     <function>errdatatype</>, or <function>errdomainconstraint</> should
     be used in an <function>ereport</> call.  These functions exist to
     allow applications to extract the name of a database object associated
     with the error condition without having to examine the
     potentially-localized error message text.
     These functions should be used in error reports for which it's likely
     that applications would wish to have automatic error handling.  As of
     <productname>PostgreSQL</> 9.3, complete coverage exists only for
     errors in SQLSTATE class 23 (integrity constraint violation), but this
     is likely to be expanded in future.
-->
<function>ereport</>呼び出しにおいて、最大限でも<function>errtable</>、<function>errtablecol</>、 <function>errtableconstraint</>、<function>errdatatype</>、または<function>errdomainconstraint</>のうちの一つの関数が使用されなければなりません。
これらの関数は、アプリケーションが自動エラー対応であって欲しいと期待するエラーレポートにおいて使用されるべきです。
<productname>PostgreSQL</> 9.3の時点で、この機能を完璧に保証する範囲はSQLSTATEクラス23（整合性制約違反）のみですが、将来的には十中八九拡張されそうです。
    </para>
   </note>

   <para>
<!--
    There is an older function <function>elog</> that is still heavily used.
    An <function>elog</> call:
-->
まだ頻繁に使用されている、古めの<function>elog</>関数があります。
以下の<function>elog</>呼び出しは、
<programlisting>
elog(level, "format string", ...);
</programlisting>
<!--
    is exactly equivalent to:
-->
以下とまったく同じです。
<programlisting>
ereport(level, (errmsg_internal("format string", ...)));
</programlisting>
<!--
    Notice that the SQLSTATE error code is always defaulted, and the message
    string is not subject to translation.
    Therefore, <function>elog</> should be used only for internal errors and
    low-level debug logging.  Any message that is likely to be of interest to
    ordinary users should go through <function>ereport</>.  Nonetheless,
    there are enough internal <quote>cannot happen</> error checks in the
    system that <function>elog</> is still widely used; it is preferred for
    those messages for its notational simplicity.
-->
SQLSTATEエラーコードが常にデフォルトになること、メッセージ文字列が変換されないことに注意してください。
したがって、<function>elog</>は、内部エラーと低レベルなデバッグ用ログにのみ使用すべきです。
一般ユーザを対象とする任意のメッセージは<function>ereport</>を使用すべきです。
それでもなお、システム内の<quote>発生できなかった</>内部エラーの検査に<function>elog</>がまだ多く使用されています。
これは、こうした単純な表記のメッセージに適しています。
   </para>

   <para>
<!--
    Advice about writing good error messages can be found in
    <xref linkend="error-style-guide">.
-->
<xref linkend="error-style-guide">に推奨するエラーメッセージの作成についての提言を示します。
   </para>
  </sect1>

  <sect1 id="error-style-guide">
<!--
   <title>Error Message Style Guide</title>
-->
   <title>エラーメッセージのスタイルガイド</title>

   <para>
<!--
    This style guide is offered in the hope of maintaining a consistent,
    user-friendly style throughout all the messages generated by
    <productname>PostgreSQL</>.
-->
このスタイルガイドでは、<productname>PostgreSQL</>で生成されるすべてのメッセージに対する、一貫性維持、ユーザに親切なスタイルについての希望を説明します。
   </para>

  <simplesect>
<!--
   <title>What Goes Where</title>
-->
   <title>何がどこで起こったか</title>

   <para>
<!--
    The primary message should be short, factual, and avoid reference to
    implementation details such as specific function names.
    <quote>Short</quote> means <quote>should fit on one line under normal
    conditions</quote>.  Use a detail message if needed to keep the primary
    message short, or if you feel a need to mention implementation details
    such as the particular system call that failed. Both primary and detail
    messages should be factual.  Use a hint message for suggestions about what
    to do to fix the problem, especially if the suggestion might not always be
    applicable.
-->
主メッセージは、簡潔に事実を示すものにすべきです。
特定の関数名など実装の詳細への参照は止めるべきです。
<quote>簡潔</quote>は<quote>ごく普通の条件下で1行に収まる</quote>ことを意味します。
主メッセージを簡潔にするために必要であれば、また、特定のシステムコールが失敗したなど実装の詳細について記載したいのであれば、詳細メッセージを使用してください。
主メッセージ、詳細メッセージの両方は事実を示すものにすべきです。
どうすれば問題を解決できるかに関する提言には、その提言が常に適切とは限らない場合は特に、ヒントメッセージを使用してください。
   </para>

   <para>
<!--
    For example, instead of:
-->
例えば、
<programlisting>
IpcMemoryCreate: shmget(key=%d, size=%u, 0%o) failed: %m
(plus a long addendum that is basically a hint)
</programlisting>
<!--
    write:
-->
ではなく、以下のように記述してください。
<programlisting>
Primary:    could not create shared memory segment: %m
Detail:     Failed syscall was shmget(key=%d, size=%u, 0%o).
Hint:       the addendum
</programlisting>
   </para>

   <para>
<!--
    Rationale: keeping the primary message short helps keep it to the point,
    and lets clients lay out screen space on the assumption that one line is
    enough for error messages.  Detail and hint messages can be relegated to a
    verbose mode, or perhaps a pop-up error-details window.  Also, details and
    hints would normally be suppressed from the server log to save
    space. Reference to implementation details is best avoided since users
    don't know the details anyway.
-->
理論的根拠：
主メッセージを簡潔にすることは、要点を維持することを助けます。
そして、クライアントは、エラーメッセージ用に1行分確保すれば十分であるという仮定の下で画面設計を行うことができます。
詳細メッセージやヒントメッセージを冗長モードに格下げしたり、エラーの詳細を表示するウィンドウをポップアップさせることもできます。
また、詳細メッセージやヒントメッセージは通常ディスク容量を節約するためにサーバログには出力されません。
ユーザはどうやってもその詳細を知りませんので、実装の詳細への参照を避けることが最善です。
   </para>

  </simplesect>

  <simplesect>
<!--
   <title>Formatting</title>
-->
   <title>整形</title>

   <para>
<!--
    Don't put any specific assumptions about formatting into the message
    texts.  Expect clients and the server log to wrap lines to fit their own
    needs.  In long messages, newline characters (\n) can be used to indicate
    suggested paragraph breaks.  Don't end a message with a newline.  Don't
    use tabs or other formatting characters.  (In error context displays,
    newlines are automatically added to separate levels of context such as
    function calls.)
-->
メッセージテキストの整形に関して、特定の前提を行わないでください。
クライアントやサーバログでは、自身の必要性に合わせて行を改行すると想定してください。
長めのメッセージでは、改行文字（\n）を推奨する段落の区切りを示すものとして使用することができます。
メッセージの終わりに改行を付けないでください。
タブや他の整形用文字を使用しないでください。
（エラーの内容の表示では、関数呼び出しなどのコンテキストのレベルを区切るために、改行が自動的に追加されます。）
   </para>

   <para>
<!--
    Rationale: Messages are not necessarily displayed on terminal-type
    displays.  In GUI displays or browsers these formatting instructions are
    at best ignored.
-->
理論的根拠：
メッセージは必ずしも端末型のディスプレイに表示されるとは限りません。
GUIのディスプレイやブラウザでは、こうした書式指示はうまくいったとしても無視されます。
   </para>

  </simplesect>

  <simplesect>
<!--
   <title>Quotation Marks</title>
-->
   <title>引用符</title>

   <para>
<!--
    English text should use double quotes when quoting is appropriate.
    Text in other languages should consistently use one kind of quotes that is
    consistent with publishing customs and computer output of other programs.
-->
英文では、引用が適切な場合には二重引用符を使用すべきです。
他の言語でのテキストは、出版上の慣習や他のプログラムのコンピュータ出力と矛盾しない種類の引用符の1つを一貫して使用してください。
   </para>

   <para>
<!--
    Rationale: The choice of double quotes over single quotes is somewhat
    arbitrary, but tends to be the preferred use.  Some have suggested
    choosing the kind of quotes depending on the type of object according to
    SQL conventions (namely, strings single quoted, identifiers double
    quoted).  But this is a language-internal technical issue that many users
    aren't even familiar with, it won't scale to other kinds of quoted terms,
    it doesn't translate to other languages, and it's pretty pointless, too.
-->
理論的根拠：
二重引用符と単一引用符の選択はどちらかでもよいものですが、推奨する方がよく使われています。
SQL規約（すなわち文字列には単一引用符、識別子には二重引用符）に従って、オブジェクトの種類に応じて引用符を選択することを推奨する人もいます。
しかし、これは言語内部の技術的な事項であり、多くのユーザが理解できるものではありません。
また、他の種類の引用手法には拡張できません。
他の言語へ翻訳できません。
ですので、あまり意味がありません。
   </para>

  </simplesect>

  <simplesect>
<!--
   <title>Use of Quotes</title>
-->
   <title>引用符の使用</title>

   <para>
<!--
    Use quotes always to delimit file names, user-supplied identifiers, and
    other variables that might contain words.  Do not use them to mark up
    variables that will not contain words (for example, operator names).
-->
ファイル名、ユーザ提供の識別子、複数の単語を含む変数を区切るために引用符を使用してください。
複数の単語を含まない変数（例えば演算子名）には引用符を使用しないでください。
   </para>

   <para>
<!--
    There are functions in the backend that will double-quote their own output
    at need (for example, <function>format_type_be()</function>).  Do not put
    additional quotes around the output of such functions.
-->
バックエンドには必要に応じて出力に二重引用符を付与する関数(例えば<function>format_type_be()</>)があります。
こうした関数の出力の前後にさらに引用符を追加しないでください。
   </para>

   <para>
<!--
    Rationale: Objects can have names that create ambiguity when embedded in a
    message.  Be consistent about denoting where a plugged-in name starts and
    ends.  But don't clutter messages with unnecessary or duplicate quote
    marks.
-->
理論的根拠：
オブジェクトの名前をメッセージ内に埋め込む際に曖昧さが生じることがあります。
埋め込む名前がどこから始まりどこで終わるかついての表記には一貫性を持たせてください。
しかし、不必要にメッセージをまとめたり、引用符を二重にすることは止めてください。
   </para>

  </simplesect>

  <simplesect>
<!--
   <title>Grammar and Punctuation</title>
-->
   <title>文法と句読点</title>

   <para>
<!--
    The rules are different for primary error messages and for detail/hint
    messages:
-->
この規則は、主エラーメッセージと詳細/ヒントメッセージとで異なります。
   </para>

   <para>
<!--
    Primary error messages: Do not capitalize the first letter.  Do not end a
    message with a period.  Do not even think about ending a message with an
    exclamation point.
-->
主エラーメッセージ：
最初の文字を大文字にしないでください。
メッセージの最後にピリオドを付けないでください。
メッセージの終わりに感嘆符を付けようとは考えないでください。
   </para>

   <para>
<!--
    Detail and hint messages: Use complete sentences, and end each with
    a period.  Capitalize the first word of sentences.  Put two spaces after
    the period if another sentence follows (for English text; might be
    inappropriate in other languages).
-->
詳細メッセージとヒントメッセージ：
完全な文章を使用し、終わりにピリオドを付けてください。
文章の最初の単語は大文字にしてください。
他の文が続く場合はピリオドの後に空白を2つ入れてください（英文の場合です。他の言語では不適切かもしれません）。
   </para>

   <para>
<!--
    Error context strings: Do not capitalize the first letter and do
    not end the string with a period.  Context strings should normally
    not be complete sentences.
-->
エラー文脈文字列:
先頭文字を大文字にせず、また、終わりにはピリオドを付けないでください。
文脈文字列は通常完全な文章にすべきではありません。
   </para>

   <para>
<!--
    Rationale: Avoiding punctuation makes it easier for client applications to
    embed the message into a variety of grammatical contexts.  Often, primary
    messages are not grammatically complete sentences anyway.  (And if they're
    long enough to be more than one sentence, they should be split into
    primary and detail parts.)  However, detail and hint messages are longer
    and might need to include multiple sentences.  For consistency, they should
    follow complete-sentence style even when there's only one sentence.
-->
理論的根拠：
句読点の禁止により、クライアントアプリケーションでは、そのメッセージを各種文法的なコンテキストに埋め込みやすくなります。
主メッセージはしばしば文法的に完全な文章になっていません。
（そして、1行以上の長さになりそうであれば、主メッセージと詳細メッセージに分割すべきです。）
しかし、詳細メッセージとヒントメッセージは、より長く、かつ複数の文章を持つ必要があるかもしれません。
一貫性のため、これらは、たとえ文章が1つだけであっても、完全な文章形式に従うべきです。
   </para>

  </simplesect>

  <simplesect>
<!--
   <title>Upper Case vs. Lower Case</title>
-->
   <title>大文字と小文字</title>

   <para>
<!--
    Use lower case for message wording, including the first letter of a
    primary error message.  Use upper case for SQL commands and key words if
    they appear in the message.
-->
メッセージの言葉使いでは小文字を使用してください。
主エラーメッセージの場合は先頭文字も含みます。
SQLコマンドとキーワードがメッセージ内に出現する場合は大文字を使用してください。
   </para>

   <para>
<!--
    Rationale: It's easier to make everything look more consistent this
    way, since some messages are complete sentences and some not.
-->
理論的根拠：
メッセージは完全な文章かもしれませんし、そうではないかもしれませんので、この方法は、より簡単にすべての見た目の一貫性を向上します。
   </para>

  </simplesect>

  <simplesect>
<!--
   <title>Avoid Passive Voice</title>
-->
   <title>受動態の禁止</title>

   <para>
<!--
    Use the active voice.  Use complete sentences when there is an acting
    subject (<quote>A could not do B</quote>).  Use telegram style without
    subject if the subject would be the program itself; do not use
    <quote>I</quote> for the program.
-->
能動態を使用してください。
能動的な主語がある（<quote>AはBを行うことができない</quote>）場合は完全な文章を使用してください。
主語がプログラム自体である場合は、主語を付けずに電報様式を使用してください。
プログラムに<quote>I（私）</quote>を使用しないでください。
   </para>

   <para>
<!--
    Rationale: The program is not human.  Don't pretend otherwise.
-->
理論的根拠：
プログラムは人間ではありません。
他を真似ないでください。
   </para>

  </simplesect>

  <simplesect>
<!--
   <title>Present vs. Past Tense</title>
-->
   <title>現在形と過去形</title>

   <para>
<!--
    Use past tense if an attempt to do something failed, but could perhaps
    succeed next time (perhaps after fixing some problem).  Use present tense
    if the failure is certainly permanent.
-->
試行が失敗したが、次は（何らかの問題を修正した後に）成功するかもしれない場合は過去形を使用してください。
失敗が永続するようであれば、現在形を使用してください。
   </para>

   <para>
<!--
    There is a nontrivial semantic difference between sentences of the form:
-->
以下の2つの意味には無視できないほどの違いがあります。
<programlisting>
could not open file "%s": %m
</programlisting>
<!--
and:
-->
および
<programlisting>
cannot open file "%s"
</programlisting>
<!--
    The first one means that the attempt to open the file failed.  The
    message should give a reason, such as <quote>disk full</quote> or
    <quote>file doesn't exist</quote>.  The past tense is appropriate because
    next time the disk might not be full anymore or the file in question might
    exist.
-->
最初のものは、ファイルを開くことに失敗したことを意味します。
メッセージには、<quote>ディスクが一杯</quote>や<quote>ファイルが存在しない</quote>といった、その理由を付けるべきです。
次回はディスクに空きがあるかもしれませんし、問題のファイルが存在するかもしれませんので過去形が適切です。
   </para>

   <para>
<!--
    The second form indicates that the functionality of opening the named file
    does not exist at all in the program, or that it's conceptually
    impossible.  The present tense is appropriate because the condition will
    persist indefinitely.
-->
2番目の形式は、そのプログラム内の指名されたファイルを開く機能が存在しない、あるいは、概念的に不可能であることを示します。
この条件は永遠に続きますので現在形が適切です。
   </para>

   <para>
<!--
    Rationale: Granted, the average user will not be able to draw great
    conclusions merely from the tense of the message, but since the language
    provides us with a grammar we should use it correctly.
-->
理論的根拠：
仮定ですが、一般的なユーザは単なるメッセージの時制から多くの意味を引き出すことはできないでしょう。
しかし、言語が文法を提供してくれますので、それを正確に使用すべきでしょう。
   </para>

  </simplesect>

  <simplesect>
<!--
   <title>Type of the Object</title>
-->
   <title>オブジェクトの種類</title>

   <para>
<!--
    When citing the name of an object, state what kind of object it is.
-->
オブジェクトの名前を引用する時、そのオブジェクトの種類を記載してください。
   </para>

   <para>
<!--
    Rationale: Otherwise no one will know what <quote>foo.bar.baz</>
    refers to.
-->
理論的根拠：
さもないと、<quote>foo.bar.baz</quote>が何なのか誰もわかりません。
   </para>

  </simplesect>

  <simplesect>
<!--
   <title>Brackets</title>
-->
   <title>角括弧</title>

   <para>
<!--
    Square brackets are only to be used (1) in command synopses to denote
    optional arguments, or (2) to denote an array subscript.
-->
角括弧は、（1）コマンドの概要にて省略可能な引数を表す、（2）配列の添字を表す、ためだけに使用されます。
   </para>

   <para>
<!--
    Rationale: Anything else does not correspond to widely-known customary
    usage and will confuse people.
-->
理論的根拠：
広く知られる慣習に対応するものがなく、人々を混乱させることになります。
   </para>

  </simplesect>

  <simplesect>
<!--
   <title>Assembling Error Messages</title>
-->
   <title>エラーメッセージの組み立て</title>

   <para>
<!--
   When a message includes text that is generated elsewhere, embed it in
   this style:
-->
メッセージに、他で生成されるテキストを含める場合、以下の様式で埋め込んでください。
<programlisting>
could not open file %s: %m
</programlisting>
   </para>

   <para>
<!--
    Rationale: It would be difficult to account for all possible error codes
    to paste this into a single smooth sentence, so some sort of punctuation
    is needed.  Putting the embedded text in parentheses has also been
    suggested, but it's unnatural if the embedded text is likely to be the
    most important part of the message, as is often the case.
-->
理論的根拠：
すべての起こり得るエラーコードを単一のなめらかな文章に埋め込むことを考えることは困難です。
ですので、何らかの句読点が必要とされます。
括弧の中にテキストを埋め込むこともまた推奨されていますが、よくあるように埋め込むテキストがそのメッセージの最も重要となる場合は不自然です。
   </para>

  </simplesect>

  <simplesect>
<!--
   <title>Reasons for Errors</title>
-->
   <title>エラーの理由</title>

   <para>
<!--
    Messages should always state the reason why an error occurred.
    For example:
-->
メッセージは常にエラーが発生した理由を記述すべきです。
以下に例を示します。
<programlisting>
BAD:    could not open file %s
BETTER: could not open file %s (I/O failure)
</programlisting>
<!--
    If no reason is known you better fix the code.
-->
理由がわからない場合はコードを直すべきです。
   </para>

  </simplesect>

  <simplesect>
<!--
   <title>Function Names</title>
-->
   <title>関数名</title>

   <para>
<!--
    Don't include the name of the reporting routine in the error text. We have
    other mechanisms for finding that out when needed, and for most users it's
    not helpful information.  If the error text doesn't make as much sense
    without the function name, reword it.
-->
エラーテキストには、それを報告したルーチンの名前を含めないでください。
必要に応じて、そのルーチンを見つける他の機構がありますし、また、ほとんどのユーザにとって役に立つ情報ではありません。
関数名がないと、エラーメッセージにあまり意味がないのであれば、言葉使いを変えてください。
<programlisting>
BAD:    pg_atoi: error in "z": cannot parse "z"
BETTER: invalid input syntax for integer: "z"
</programlisting>
   </para>

   <para>
<!--
    Avoid mentioning called function names, either; instead say what the code
    was trying to do:
-->
同時に呼び出した関数名の記述も止めてください。
代わりにそのコードが何をしようとしたのかを記述してください。
<programlisting>
BAD:    open() failed: %m
BETTER: could not open file %s: %m
</programlisting>
<!--
    If it really seems necessary, mention the system call in the detail
    message.  (In some cases, providing the actual values passed to the
    system call might be appropriate information for the detail message.)
-->
もし本当に必要であれば、詳細メッセージにそのシステムコールを記載してください
（詳細メッセージの情報としてシステムコールに実際に渡した値を与えることが適切な場合もあります）。
   </para>

   <para>
<!--
    Rationale: Users don't know what all those functions do.
-->
理論的根拠：
ユーザはその関数が何を行うのかを知りません。
   </para>

  </simplesect>

  <simplesect>
<!--
   <title>Tricky Words to Avoid</title>
-->
   <title>ややこしい単語の防止</title>

  <formalpara>
    <title>Unable</title>
   <para>
<!--
    <quote>Unable</quote> is nearly the passive voice.  Better use
    <quote>cannot</quote> or <quote>could not</quote>, as appropriate.
-->
<quote>Unable</quote>はほとんど受動態です。
<quote>cannot</quote>または<quote>could not</quote>の適切な方を使用してください。
   </para>
  </formalpara>

  <formalpara>
    <title>Bad</title>
   <para>
<!--
    Error messages like <quote>bad result</quote> are really hard to interpret
    intelligently.  It's better to write why the result is <quote>bad</quote>,
    e.g., <quote>invalid format</quote>.
-->
<quote>bad result</quote>といったエラーメッセージは、知的に解釈することが非常に困難です。
結果が<quote>bad</quote>である理由、例えば<quote>invalid format</quote>を記述してください。
   </para>
  </formalpara>

  <formalpara>
    <title>Illegal</title>
   <para>
<!--
    <quote>Illegal</quote> stands for a violation of the law, the rest is
    <quote>invalid</quote>. Better yet, say why it's invalid.
-->
<quote>Illegal</quote>は規則違反を表します。
他は<quote>invalid</quote>です。
より良くするために、なぜ無効なのかについても記述してください。
   </para>
  </formalpara>

  <formalpara>
    <title>Unknown</title>
   <para>
<!--
    Try to avoid <quote>unknown</quote>.  Consider <quote>error: unknown
    response</quote>.  If you don't know what the response is, how do you know
    it's erroneous? <quote>Unrecognized</quote> is often a better choice.
    Also, be sure to include the value being complained of.
-->
<quote>unknown</quote>は極力使用しないでください。
<quote>error: unknown response</quote>について考えてみましょう。
どんな応答であるかわからなければ、どうやって何がエラーなのかわかるでしょうか。
<quote>Unrecognized</quote>を選んだ方が良い場合がしばしばあります。
また、その警告の中に値が含まれていることを確認してください。
<programlisting>
BAD:    unknown node type
BETTER: unrecognized node type: 42
</programlisting>
   </para>
  </formalpara>

  <formalpara>
<!--
    <title>Find vs. Exists</title>
-->
    <title>Find対Exists</title>
   <para>
<!--
    If the program uses a nontrivial algorithm to locate a resource (e.g., a
    path search) and that algorithm fails, it is fair to say that the program
    couldn't <quote>find</quote> the resource.  If, on the other hand, the
    expected location of the resource is known but the program cannot access
    it there then say that the resource doesn't <quote>exist</quote>.  Using
    <quote>find</quote> in this case sounds weak and confuses the issue.
-->
プログラムがリソースの場所について無視できないアルゴリズム（例えばパスの検索）を使用し、そのアルゴリズムが失敗した場合、プログラムがリソースを<quote>find</quote>できなかったと記述すべきでしょう。
一方、想定したリソースの場所はわかっているが、プログラムがアクセスできなかった場合は、リソースが<quote>exist</quote>しなかったと記述してください。
この場合に<quote>find</quote>を使用すると、弱く取られ、問題が混乱します。
   </para>
  </formalpara>

  <formalpara>
<!--
    <title>May vs. Can vs. Might</title>
-->
    <title>May、Can、Might</title>
   <para>
<!--
    <quote>May</quote> suggests permission (e.g., "You may borrow my rake."),
    and has little use in documentation or error messages.
    <quote>Can</quote> suggests ability (e.g., "I can lift that log."),
    and <quote>might</quote> suggests possibility (e.g., "It might rain
    today.").  Using the proper word clarifies meaning and assists
    translation.
-->
<quote>May</quote>は許可を示し、文書やエラーメッセージではあまり使われません（たとえば、熊手を借りられます）。
<quote>Can</quote>は能力を示し（たとえば、丸太を持ち上げることができます）、<quote>might</quote>は可能性を示します（たとえば、雨が降るかもしれません）。
意味を明確にし、翻訳を補助するために適切に使用してください。
   </para>
  </formalpara>

  <formalpara>
<!--
    <title>Contractions</title>
-->
    <title>短縮</title>
   <para>
<!--
    Avoid contractions, like <quote>can't</quote>;  use
    <quote>cannot</quote> instead.
-->
<quote>can't</quote>などの短縮は避けてください。
代わりに<quote>cannot</quote>を使用してください。
   </para>
  </formalpara>

  </simplesect>

  <simplesect>
<!--
   <title>Proper Spelling</title>
-->
   <title>適切なスペル</title>

   <para>
<!--
    Spell out words in full.  For instance, avoid:
-->
単語の完全なスペルを使用してください。
例えば、以下は止めてください。
  <itemizedlist>
   <listitem>
    <para>
     spec
    </para>
   </listitem>
   <listitem>
    <para>
     stats
    </para>
   </listitem>
   <listitem>
    <para>
     parens
    </para>
   </listitem>
   <listitem>
    <para>
     auth
    </para>
   </listitem>
   <listitem>
    <para>
     xact
    </para>
   </listitem>
  </itemizedlist>
   </para>

   <para>
<!--
    Rationale: This will improve consistency.
-->
理論的根拠：
これは一貫性を向上します。
   </para>

  </simplesect>

  <simplesect>
<!--
   <title>Localization</title>
-->
   <title>地域化</title>

   <para>
<!--
    Keep in mind that error message texts need to be translated into other
    languages.  Follow the guidelines in <xref linkend="nls-guidelines">
    to avoid making life difficult for translators.
-->
エラーメッセージは他の言語に翻訳される必要があることを忘れないでください。
<xref linkend="nls-guidelines">のガイドラインに従い、翻訳者に苦労を強いることを防いでください。
   </para>
  </simplesect>

  </sect1>

 </chapter>
