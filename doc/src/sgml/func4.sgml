<!-- 警告：このファイルは直接編集しないでください！
1. func.sgmlを編集したら、split.shを起動します。
2. するとfunc[0-4].sgmlが生成されます。
3. func.sgmlとともにfunc[0-4].sgmlのうち変更されたファイルをcommit/pushしてpull requestを作成してください。
4. レビューはfunc[0-4].sgmlに対して行います。
5. 指摘された点があればfunc.sgmlに反映し、1に戻ります。
6. func.sgmlの変更がなければ、pull requestをマージして終了です。お疲れ様でした！
-->
<!-- split-func4-start -->
 <sect1 id="functions-subquery">
<!--
  <title>Subquery Expressions</title>
-->
  <title>副問い合わせ式</title>

  <indexterm>
   <primary>EXISTS</primary>
  </indexterm>

  <indexterm>
   <primary>IN</primary>
  </indexterm>

  <indexterm>
   <primary>NOT IN</primary>
  </indexterm>

  <indexterm>
   <primary>ANY</primary>
  </indexterm>

  <indexterm>
   <primary>ALL</primary>
  </indexterm>

  <indexterm>
   <primary>SOME</primary>
  </indexterm>

  <indexterm>
   <primary>subquery</primary>
  </indexterm>

  <para>
<!--
   This section describes the <acronym>SQL</acronym>-compliant subquery
   expressions available in <productname>PostgreSQL</productname>.
   All of the expression forms documented in this section return
   Boolean (true/false) results.
-->
本節では<productname>PostgreSQL</productname>で使用できる<acronym>SQL</acronym>準拠の副問い合わせについて説明します。
本節で記載した全ての式は結果として論理値（真/偽）を返します。
  </para>

  <sect2 id="functions-subquery-exists">
   <title><literal>EXISTS</literal></title>

<synopsis>
EXISTS (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The argument of <token>EXISTS</token> is an arbitrary <command>SELECT</command> statement,
   or <firstterm>subquery</firstterm>.  The
   subquery is evaluated to determine whether it returns any rows.
   If it returns at least one row, the result of <token>EXISTS</token> is
   <quote>true</quote>; if the subquery returns no rows, the result of <token>EXISTS</token>
   is <quote>false</quote>.
-->
<token>EXISTS</token>の引数は、任意の<command>SELECT</command>文、つまり<firstterm>副問い合わせ</firstterm>です。
副問い合わせはそれが何らかの行を返すか否かの決定のために評価されます。
もし1つでも行を返すのであれば、<token>EXISTS</token>の結果は<quote>true（真）</quote>となり、副問い合わせが行を返さない場合、<token>EXISTS</token>の結果は<quote>false（偽）</quote>となります。
  </para>

  <para>
<!--
   The subquery can refer to variables from the surrounding query,
   which will act as constants during any one evaluation of the subquery.
-->
副問い合わせは、取り囲んでいる問い合わせから変数を参照することができ、その値は副問い合わせの評価時には定数として扱われます。
  </para>

  <para>
<!--
   The subquery will generally only be executed long enough to determine
   whether at least one row is returned, not all the way to completion.
   It is unwise to write a subquery that has side effects (such as
   calling sequence functions); whether the side effects occur
   might be unpredictable.
-->
この副問い合わせは通常、最後まで実行されず、少なくとも１つの行が返されたかどうかを判定し得るに足りる時点まで実行されます。
（シーケンス関数を呼び出すような）副作用のある副問い合わせを記述することは配慮不足です。副作用が生じるかどうかは予想できません。
  </para>

  <para>
<!--
   Since the result depends only on whether any rows are returned,
   and not on the contents of those rows, the output list of the
   subquery is normally unimportant.  A common coding convention is
   to write all <literal>EXISTS</literal> tests in the form
   <literal>EXISTS(SELECT 1 WHERE ...)</literal>.  There are exceptions to
   this rule however, such as subqueries that use <token>INTERSECT</token>.
-->
結果は何らかの行が返されるのかのみに依存し、それらの行の内容には依存しないことから、副問い合わせの出力リストは通常重要ではありません。
よく使われるコーディング規約は、全ての<literal>EXISTS</literal>テストを<literal>EXISTS(SELECT 1 WHERE ...)</literal>といった形式で記述することです。
とは言っても、<token>INTERSECT</token>を使う副問い合わせのようにこの規則には例外があります。
  </para>

  <para>
<!--
   This simple example is like an inner join on <literal>col2</literal>, but
   it produces at most one output row for each <literal>tab1</literal> row,
   even if there are several matching <literal>tab2</literal> rows:
-->
以下の簡単な例は<literal>col2</literal>上の内部結合に似ていますが、たとえ<literal>tab2</literal>の行といくつか一致したとしても<literal>tab1</literal>のそれぞれの行に対して最大限１つの出力行を生成します。
<screen>
SELECT col1
FROM tab1
WHERE EXISTS (SELECT 1 FROM tab2 WHERE col2 = tab1.col2);
</screen>
  </para>
  </sect2>

  <sect2 id="functions-subquery-in">
   <title><literal>IN</literal></title>

<synopsis>
<replaceable>expression</replaceable> IN (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The right-hand side is a parenthesized
   subquery, which must return exactly one column.  The left-hand expression
   is evaluated and compared to each row of the subquery result.
   The result of <token>IN</token> is <quote>true</quote> if any equal subquery row is found.
   The result is <quote>false</quote> if no equal row is found (including the
   case where the subquery returns no rows).
-->
右辺は括弧で括られた副問い合わせで、正確に１列を返すものでなければなりません。
左辺式は評価され、副問い合わせの結果行と比較されます。
副問い合わせの行のどれかと等しい場合、<token>IN</token>の結果は<quote>true（真）</quote>です。
（副問い合わせが行を返さない場合を含め）等しい行が見つからない場合、結果は<quote>false（偽）</quote>です。
  </para>

  <para>
<!--
   Note that if the left-hand expression yields null, or if there are
   no equal right-hand values and at least one right-hand row yields
   null, the result of the <token>IN</token> construct will be null, not false.
   This is in accordance with SQL's normal rules for Boolean combinations
   of null values.
-->
左辺の式がNULLを生じる場合、または右側の値に等しいものがなくて少なくとも1つの右辺の行がNULLを持つ場合、<token>IN</token>構文の結果は偽ではなくNULLとなることに注意してください。
これは、NULL値の論理的な組み合わせに対するSQLの標準規則に従うものです。
  </para>

  <para>
<!--
   As with <token>EXISTS</token>, it's unwise to assume that the subquery will
   be evaluated completely.
-->
<token>EXISTS</token>と同様、副問い合わせが完全に評価されることを前提としてはなりません。
  </para>

<synopsis>
<replaceable>row_constructor</replaceable> IN (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The left-hand side of this form of <token>IN</token> is a row constructor,
   as described in <xref linkend="sql-syntax-row-constructors"/>.
   The right-hand side is a parenthesized
   subquery, which must return exactly as many columns as there are
   expressions in the left-hand row.  The left-hand expressions are
   evaluated and compared row-wise to each row of the subquery result.
   The result of <token>IN</token> is <quote>true</quote> if any equal subquery row is found.
   The result is <quote>false</quote> if no equal row is found (including the
   case where the subquery returns no rows).
-->
<token>IN</token>のこの形式の左辺は、<xref linkend="sql-syntax-row-constructors"/>で説明する、行のコンストラクタです。
右辺は括弧で括られた副問い合わせで、左辺の行にある式の数と正確に同じ数の列を返さなければなりません。
左辺の式は副問い合わせの結果のそれぞれの行に対し、行に関して評価、比較が行われます。
副問い合わせの行に等しいものが見つかった場合、<token>IN</token> の結果は<quote>true（真）</quote>となります。
（副問い合わせが行を返さない場合を含め）等しい行が見つからない場合、結果は<quote>false（偽）</quote>です。
  </para>

  <para>
<!--
   As usual, null values in the rows are combined per
   the normal rules of SQL Boolean expressions.  Two rows are considered
   equal if all their corresponding members are non-null and equal; the rows
   are unequal if any corresponding members are non-null and unequal;
   otherwise the result of that row comparison is unknown (null).
   If all the per-row results are either unequal or null, with at least one
   null, then the result of <token>IN</token> is null.
-->
通常通り、行にあるNULL値はSQLの論理式の標準規則で結合されます。
２つの行は対応する全ての構成要素が非NULLかつ等しい場合に等しいとみなされます。
１つでも対応する構成要素が非NULLかつ等しくないものがあれば、２つの行は等しくないとみなされます。
それ以外の場合、その行の比較結果は不明（NULL）です。
行毎の結果すべてが不等もしくはNULLの場合、少なくとも１つのNULLがあると、<token>IN</token>の結果はNULLとなります。
  </para>
  </sect2>

  <sect2 id="functions-subquery-notin">
   <title><literal>NOT IN</literal></title>

<synopsis>
<replaceable>expression</replaceable> NOT IN (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The right-hand side is a parenthesized
   subquery, which must return exactly one column.  The left-hand expression
   is evaluated and compared to each row of the subquery result.
   The result of <token>NOT IN</token> is <quote>true</quote> if only unequal subquery rows
   are found (including the case where the subquery returns no rows).
   The result is <quote>false</quote> if any equal row is found.
-->
右辺は括弧で括られた副問い合わせで、正確に１つの列を返さなければなりません。
左辺の式は副問い合わせ結果の行それぞれに対して評価、比較されます。
等しくない副問い合わせの行だけがある（副問い合わせが行を返さない場合を含む）と、<token>NOT IN</token>の結果は<quote>true（真）</quote>です。
等しい行が1つでもあれば、結果は<quote>false（偽）</quote>です。
  </para>

  <para>
<!--
   Note that if the left-hand expression yields null, or if there are
   no equal right-hand values and at least one right-hand row yields
   null, the result of the <token>NOT IN</token> construct will be null, not true.
   This is in accordance with SQL's normal rules for Boolean combinations
   of null values.
-->
左辺の式でNULLが生じる場合、または右辺の値に等しいものがなく、少なくとも１つの右辺の式がNULLを生み出す場合、<token>NOT IN</token>構文の結果は真ではなくNULLとなることに注意してください。
これは、NULL値の論理的な組み合わせに対するSQLの標準規則に従うものです。
  </para>

  <para>
<!--
   As with <token>EXISTS</token>, it's unwise to assume that the subquery will
   be evaluated completely.
-->
<token>EXISTS</token>と同様、副問い合わせが完全に評価されることを前提としてはなりません。
  </para>

<synopsis>
<replaceable>row_constructor</replaceable> NOT IN (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The left-hand side of this form of <token>NOT IN</token> is a row constructor,
   as described in <xref linkend="sql-syntax-row-constructors"/>.
   The right-hand side is a parenthesized
   subquery, which must return exactly as many columns as there are
   expressions in the left-hand row.  The left-hand expressions are
   evaluated and compared row-wise to each row of the subquery result.
   The result of <token>NOT IN</token> is <quote>true</quote> if only unequal subquery rows
   are found (including the case where the subquery returns no rows).
   The result is <quote>false</quote> if any equal row is found.
-->
<token>NOT IN</token>のこの形式の左辺は、<xref linkend="sql-syntax-row-constructors"/>で説明する行コンストラクタです。
右辺は括弧で括られた副問い合わせで、左辺の行にある式の数と正確に同じ数の列を返さなければなりません。
左辺の式は副問い合わせの結果のそれぞれの行に対し、評価、比較が行われます。
副問い合わせの行に不等のもののみが見つかった場合（副問い合わせが行を返さない場合を含む）、<token>NOT IN</token>の結果は<quote>true（真）</quote>となります。
等しい行が１つでも見つかった場合、結果は<quote>false（偽）</quote>です。
  </para>

  <para>
<!--
   As usual, null values in the rows are combined per
   the normal rules of SQL Boolean expressions.  Two rows are considered
   equal if all their corresponding members are non-null and equal; the rows
   are unequal if any corresponding members are non-null and unequal;
   otherwise the result of that row comparison is unknown (null).
   If all the per-row results are either unequal or null, with at least one
   null, then the result of <token>NOT IN</token> is null.
-->
通常通り、行にあるNULL値はSQLの論理式の標準規則で結合されます。
2つの行は対応する全ての構成要素が非NULLかつ等しい場合に等しいとみなされます。
１つでも構成要素が非NULLかつ等しくない場合、２つの行は等しくないとみなされます。
それ以外の場合、その行の比較結果は不明（NULL）です。
行毎の結果すべてが不等もしくはNULLの場合、少なくとも1つのNULLがあると、<token>NOT IN</token>の結果はNULLとなります。
  </para>
  </sect2>

  <sect2 id="functions-subquery-any-some">
   <title><literal>ANY</literal>/<literal>SOME</literal></title>

<synopsis>
<replaceable>expression</replaceable> <replaceable>operator</replaceable> ANY (<replaceable>subquery</replaceable>)
<replaceable>expression</replaceable> <replaceable>operator</replaceable> SOME (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The right-hand side is a parenthesized
   subquery, which must return exactly one column.  The left-hand expression
   is evaluated and compared to each row of the subquery result using the
   given <replaceable>operator</replaceable>, which must yield a Boolean
   result.
   The result of <token>ANY</token> is <quote>true</quote> if any true result is obtained.
   The result is <quote>false</quote> if no true result is found (including the
   case where the subquery returns no rows).
-->
右辺は括弧で括られた副問い合わせで、正確に1つの列を返さなければなりません。
左辺の式は副問い合わせの結果行それぞれに対して、指定された<replaceable>operator</replaceable>を使用して評価、比較されます。なお、<replaceable>operator</replaceable>は結果として論理値を生成する必要があります。
真の結果が１つでもあると、<token>ANY</token>の結果は<quote>true（真）</quote>です。
真の結果がない（副問い合わせが行を返さない場合を含む）と、結果は<quote>false（偽）</quote>です。
  </para>

  <para>
<!--
   <token>SOME</token> is a synonym for <token>ANY</token>.
   <token>IN</token> is equivalent to <literal>= ANY</literal>.
-->
<token>SOME</token>は<token>ANY</token>の同義語です。
<token>IN</token>は<literal>= ANY</literal>と等価です。
  </para>

  <para>
<!--
   Note that if there are no successes and at least one right-hand row yields
   null for the operator's result, the result of the <token>ANY</token> construct
   will be null, not false.
   This is in accordance with SQL's normal rules for Boolean combinations
   of null values.
-->
成功がなく、右辺の行が演算子の結果として１つでもNULLを生成した場合、<token>ANY</token>構文の結果は偽ではなくNULLになることに注意してください。
これは、NULL値の論理的な組み合わせに対するSQLの標準規則に従うものです。
  </para>

  <para>
<!--
   As with <token>EXISTS</token>, it's unwise to assume that the subquery will
   be evaluated completely.
-->
<token>EXISTS</token>と同様、副問い合わせが完全に評価されることを前提としてはなりません。
  </para>

<synopsis>
<replaceable>row_constructor</replaceable> <replaceable>operator</replaceable> ANY (<replaceable>subquery</replaceable>)
<replaceable>row_constructor</replaceable> <replaceable>operator</replaceable> SOME (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The left-hand side of this form of <token>ANY</token> is a row constructor,
   as described in <xref linkend="sql-syntax-row-constructors"/>.
   The right-hand side is a parenthesized
   subquery, which must return exactly as many columns as there are
   expressions in the left-hand row.  The left-hand expressions are
   evaluated and compared row-wise to each row of the subquery result,
   using the given <replaceable>operator</replaceable>.
   The result of <token>ANY</token> is <quote>true</quote> if the comparison
   returns true for any subquery row.
   The result is <quote>false</quote> if the comparison returns false for every
   subquery row (including the case where the subquery returns no
   rows).
   The result is NULL if no comparison with a subquery row returns true,
   and at least one comparison returns NULL.
-->
<token>ANY</token>のこの形式の左辺は、<xref linkend="sql-syntax-row-constructors"/>で説明されている行コンストラクタです。
右辺は括弧で括られた副問い合わせで、左辺の行にある式の数と正確に同じ数の列を返さなければなりません。
左辺の式は副問い合わせの結果のそれぞれの行に対し、与えられた<replaceable>operator</replaceable>を使用して行に関する評価、比較が行われます。
比較の結果、副問い合わせの行のどれかに対して真となる場合、<token>ANY</token>の結果は<quote>true（真）</quote>です。
比較の結果、副問い合わせの全ての行に対して偽となる場合（副問い合わせが行を返さないという場合も含む）、結果は<quote>false（偽）</quote>です。
いかなる副問合せ行との比較の結果も偽を返さず、かつ、少なくとも１つの比較がNULLを返す場合、結果はNULLになります。
  </para>

  <para>
<!--
   See <xref linkend="row-wise-comparison"/> for details about the meaning
   of a row constructor comparison.
-->
行コンストラクタ比較の意味についての詳細は<xref linkend="row-wise-comparison"/>を参照して下さい。
  </para>
  </sect2>

  <sect2 id="functions-subquery-all">
   <title><literal>ALL</literal></title>

<synopsis>
<replaceable>expression</replaceable> <replaceable>operator</replaceable> ALL (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The right-hand side is a parenthesized
   subquery, which must return exactly one column.  The left-hand expression
   is evaluated and compared to each row of the subquery result using the
   given <replaceable>operator</replaceable>, which must yield a Boolean
   result.
   The result of <token>ALL</token> is <quote>true</quote> if all rows yield true
   (including the case where the subquery returns no rows).
   The result is <quote>false</quote> if any false result is found.
   The result is NULL if no comparison with a subquery row returns false,
   and at least one comparison returns NULL.
-->
右辺は括弧で括られた副問い合わせで、正確に１つの列を返さなければなりません。
左辺の式は副問い合わせの結果行それぞれに対して、指定された<replaceable>operator</replaceable>を使用して評価、比較されます。なお、<replaceable>operator</replaceable>は結果として論理値を生成する必要があります。
全ての行が真になる場合（副問い合わせが行を返さない場合を含む）、<token>ALL</token>の結果は<quote>true（真）</quote>です。
1つでも偽の結果があると、結果は<quote>false（偽）</quote>です。
比較がどの行でも偽を返さず、かつ、少なくとも1つの行でNULLを返した場合、結果はNULLとなります。
  </para>

  <para>
<!--
   <token>NOT IN</token> is equivalent to <literal>&lt;&gt; ALL</literal>.
-->
   <token>NOT IN</token>は<literal>&lt;&gt; ALL</literal>と等価です。
  </para>

  <para>
<!--
   As with <token>EXISTS</token>, it's unwise to assume that the subquery will
   be evaluated completely.
-->
<token>EXISTS</token>と同様、副問い合わせが完全に評価されることを前提としてはなりません。
  </para>

<synopsis>
<replaceable>row_constructor</replaceable> <replaceable>operator</replaceable> ALL (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The left-hand side of this form of <token>ALL</token> is a row constructor,
   as described in <xref linkend="sql-syntax-row-constructors"/>.
   The right-hand side is a parenthesized
   subquery, which must return exactly as many columns as there are
   expressions in the left-hand row.  The left-hand expressions are
   evaluated and compared row-wise to each row of the subquery result,
   using the given <replaceable>operator</replaceable>.
   The result of <token>ALL</token> is <quote>true</quote> if the comparison
   returns true for all subquery rows (including the
   case where the subquery returns no rows).
   The result is <quote>false</quote> if the comparison returns false for any
   subquery row.
   The result is NULL if no comparison with a subquery row returns false,
   and at least one comparison returns NULL.
-->
<token>ALL</token>のこの形式の左辺は、<xref linkend="sql-syntax-row-constructors"/>で説明する行コンストラクタです。
右辺は括弧で括られた副問い合わせで、左辺の行にある式の数と正確に同じ数の列を返さなければなりません。
左辺の式は副問い合わせの結果のそれぞれの行に対し、与えられた<replaceable>operator</replaceable>を使用して行に関する評価、比較が行われます。
比較した結果、すべての副問い合わせ行に対して真を返す場合（副問い合わせが行を返さないという場合も含む）、<token>ALL</token>の結果は<quote>true（真）</quote>となります。
比較した結果、いずれかの副問い合わせ行で偽を返す場合、この結果は<quote>false（偽）</quote>となります。
比較結果がすべての副問い合わせ行に対して偽を返さず、少なくとも１行でNULLを返す場合、結果はNULLとなります。
  </para>

  <para>
<!--
   See <xref linkend="row-wise-comparison"/> for details about the meaning
   of a row constructor comparison.
-->
行コンストラクタに関する比較の意味については<xref linkend="row-wise-comparison"/>を参照してください。
  </para>
  </sect2>

  <sect2 id="functions-subquery-single-row-comp">
<!--
   <title>Single-Row Comparison</title>
-->
   <title>単独行に関する比較</title>

   <indexterm zone="functions-subquery">
    <primary>comparison</primary>
    <secondary>subquery result row</secondary>
   </indexterm>
   <indexterm zone="functions-subquery">
    <primary>比較</primary>
    <secondary>副問い合わせ結果行</secondary>
   </indexterm>

<synopsis>
<replaceable>row_constructor</replaceable> <replaceable>operator</replaceable> (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
<!--
   The left-hand side is a row constructor,
   as described in <xref linkend="sql-syntax-row-constructors"/>.
   The right-hand side is a parenthesized subquery, which must return exactly
   as many columns as there are expressions in the left-hand row. Furthermore,
   the subquery cannot return more than one row.  (If it returns zero rows,
   the result is taken to be null.)  The left-hand side is evaluated and
   compared row-wise to the single subquery result row.
-->
左辺は、<xref linkend="sql-syntax-row-constructors"/>で説明されている行コンストラクタです。
右辺は括弧で括られた副問い合わせで、左辺の行とまったく同じ数の列を返さなければなりません。さらに、副問い合わせは複数行を返すことはできません。
（行をまったく返さない場合、結果はNULLとみなされます。）
左辺は副問い合わせの結果の単一行に対し行全体で評価、比較が行われます。
  </para>

  <para>
<!--
   See <xref linkend="row-wise-comparison"/> for details about the meaning
   of a row constructor comparison.
-->
行コンストラクタに関する比較の意味についての詳細は<xref linkend="row-wise-comparison"/>を参照してください。
  </para>
  </sect2>
 </sect1>


 <sect1 id="functions-comparisons">
<!--
  <title>Row and Array Comparisons</title>
-->
  <title>行と配列の比較</title>

  <indexterm>
   <primary>IN</primary>
  </indexterm>

  <indexterm>
   <primary>NOT IN</primary>
  </indexterm>

  <indexterm>
   <primary>ANY</primary>
  </indexterm>

  <indexterm>
   <primary>ALL</primary>
  </indexterm>

  <indexterm>
   <primary>SOME</primary>
  </indexterm>

  <indexterm>
   <primary>composite type</primary>
   <secondary>comparison</secondary>
  </indexterm>
  <indexterm>
   <primary>複合型</primary>
   <secondary>比較</secondary>
  </indexterm>

  <indexterm>
   <primary>row-wise comparison</primary>
  </indexterm>
  <indexterm>
   <primary>行に関する比較</primary>
  </indexterm>

  <indexterm>
   <primary>comparison</primary>
   <secondary>composite type</secondary>
  </indexterm>
  <indexterm>
   <primary>比較</primary>
   <secondary>複合型</secondary>
  </indexterm>

  <indexterm>
   <primary>comparison</primary>
   <secondary>row constructor</secondary>
  </indexterm>
  <indexterm>
   <primary>比較</primary>
   <secondary>行コンストラクタ</secondary>
  </indexterm>

  <indexterm>
   <primary>IS DISTINCT FROM</primary>
  </indexterm>

  <indexterm>
   <primary>IS NOT DISTINCT FROM</primary>
  </indexterm>

  <para>
<!--
   This section describes several specialized constructs for making
   multiple comparisons between groups of values.  These forms are
   syntactically related to the subquery forms of the previous section,
   but do not involve subqueries.
   The forms involving array subexpressions are
   <productname>PostgreSQL</productname> extensions; the rest are
   <acronym>SQL</acronym>-compliant.
   All of the expression forms documented in this section return
   Boolean (true/false) results.
-->
本節では、値のグループ間で複数の比較を行う、さまざまな特殊化したコンストラクトについて説明します。
この形式は構文的には、前節の副問い合わせ形式と関係しています。しかし、副問い合わせを含みません。
配列副式を含む形式は<productname>PostgreSQL</productname>の拡張ですが、それ以外は<acronym>SQL</acronym>準拠です。
本節で記載した全ての式形式は結果として論理値（真/偽）を返します。
  </para>

  <sect2 id="functions-comparisons-in-scalar">
   <title><literal>IN</literal></title>

<synopsis>
<replaceable>expression</replaceable> IN (<replaceable>value</replaceable> <optional>, ...</optional>)
</synopsis>

  <para>
<!--
   The right-hand side is a parenthesized list
   of expressions.  The result is <quote>true</quote> if the left-hand expression's
   result is equal to any of the right-hand expressions.  This is a shorthand
   notation for
-->
右辺は括弧で括られた式のリストです。
左辺の式の結果が右辺の式のいずれかと等しい場合、結果は<quote>true（真）</quote>になります。
これは以下の省略形です。

<synopsis>
<replaceable>expression</replaceable> = <replaceable>value1</replaceable>
OR
<replaceable>expression</replaceable> = <replaceable>value2</replaceable>
OR
...
</synopsis>
  </para>

  <para>
<!--
   Note that if the left-hand expression yields null, or if there are
   no equal right-hand values and at least one right-hand expression yields
   null, the result of the <token>IN</token> construct will be null, not false.
   This is in accordance with SQL's normal rules for Boolean combinations
   of null values.
-->
左辺の式がNULLを生じる場合、または右側の値に等しいものがなくて少なくとも1つの右辺の行がNULLを持つ場合、<token>IN</token>構文の結果は偽ではなくNULLとなることに注意してください。
これは、NULL値の論理的な組み合わせに対するSQLの標準規則に従うものです。
  </para>
  </sect2>

  <sect2 id="functions-comparisons-not-in">
   <title><literal>NOT IN</literal></title>

<synopsis>
<replaceable>expression</replaceable> NOT IN (<replaceable>value</replaceable> <optional>, ...</optional>)
</synopsis>

  <para>
<!--
   The right-hand side is a parenthesized list
   of expressions.  The result is <quote>true</quote> if the left-hand expression's
   result is unequal to all of the right-hand expressions.  This is a shorthand
   notation for
-->
右辺は括弧で括られた式のリストです。
左辺の式の結果が右辺の式の全てと等しくない場合、結果は<quote>真</quote>です。
これは以下の省略形です。

<synopsis>
<replaceable>expression</replaceable> &lt;&gt; <replaceable>value1</replaceable>
AND
<replaceable>expression</replaceable> &lt;&gt; <replaceable>value2</replaceable>
AND
...
</synopsis>
  </para>

  <para>
<!--
   Note that if the left-hand expression yields null, or if there are
   no equal right-hand values and at least one right-hand expression yields
   null, the result of the <token>NOT IN</token> construct will be null, not true
   as one might naively expect.
   This is in accordance with SQL's normal rules for Boolean combinations
   of null values.
-->
左辺の式でNULLが生じる場合、または右辺の値に左辺の式と等しいものがなく、かつ少なくとも1つの右辺の式がNULLを生じる場合、<token>NOT IN</token>構文の結果は、一部の人が予想する真ではなく、NULLとなることに注意してください。
これは、NULL値の論理的な組み合わせに対するSQLの標準規則に従うものです。
  </para>

  <tip>
  <para>
<!--
   <literal>x NOT IN y</literal> is equivalent to <literal>NOT (x IN y)</literal> in all
   cases.  However, null values are much more likely to trip up the novice when
   working with <token>NOT IN</token> than when working with <token>IN</token>.
   It is best to express your condition positively if possible.
-->
全ての場合において、<literal>x NOT IN y</literal>は<literal>NOT (x IN y)</literal>と等価です。
しかし、<token>IN</token>を使用するよりも<token>NOT IN</token>を使用する方が初心者がNULL値による間違いをしやすくなります。
可能な限り条件を肯定的に表現することが最善です。
  </para>
  </tip>
  </sect2>

  <sect2 id="functions-comparisons-any-some">
<!--
   <title><literal>ANY</literal>/<literal>SOME</literal> (array)</title>
-->
   <title><literal>ANY</literal>/<literal>SOME</literal> (配列)</title>

<synopsis>
<replaceable>expression</replaceable> <replaceable>operator</replaceable> ANY (<replaceable>array expression</replaceable>)
<replaceable>expression</replaceable> <replaceable>operator</replaceable> SOME (<replaceable>array expression</replaceable>)
</synopsis>

  <para>
<!--
   The right-hand side is a parenthesized expression, which must yield an
   array value.
   The left-hand expression
   is evaluated and compared to each element of the array using the
   given <replaceable>operator</replaceable>, which must yield a Boolean
   result.
   The result of <token>ANY</token> is <quote>true</quote> if any true result is obtained.
   The result is <quote>false</quote> if no true result is found (including the
   case where the array has zero elements).
-->
右辺は括弧で括られた式で、配列値を返さなければなりません。
左辺の式は配列要素それぞれに対して、指定された<replaceable>operator</replaceable>を使用して評価、比較されます。なお、<replaceable>operator</replaceable>は結果として論理値を生成する必要があります。
真の結果が１つでもあると、<token>ANY</token>の結果は<quote>true（真）</quote>です。
真の結果がない（配列の要素数がゼロである場合を含む）と、結果は<quote>false（偽）</quote>です。
  </para>

  <para>
<!--
   If the array expression yields a null array, the result of
   <token>ANY</token> will be null.  If the left-hand expression yields null,
   the result of <token>ANY</token> is ordinarily null (though a non-strict
   comparison operator could possibly yield a different result).
   Also, if the right-hand array contains any null elements and no true
   comparison result is obtained, the result of <token>ANY</token>
   will be null, not false (again, assuming a strict comparison operator).
   This is in accordance with SQL's normal rules for Boolean combinations
   of null values.
-->
配列式がNULL配列を生成する場合、<token>ANY</token>の結果はNULLになります。
左辺式がNULLとなる場合、<token>ANY</token>の結果は通常NULLになります（STRICTでない比較演算子では異なる結果になるかもしれません）。
また、右辺の配列にNULL要素が含まれ、かつ、比較の結果、真が得られなかった場合、<token>ANY</token>の結果は偽ではなくNULLになります（ここでも、STRICTな演算子の場合です）。
これは、NULLに対する、SQLの論理値組み合わせに関する標準規則に従うものです。
  </para>

  <para>
<!--
   <token>SOME</token> is a synonym for <token>ANY</token>.
-->
<token>SOME</token>は<token>ANY</token>の同義語です。
  </para>
  </sect2>

  <sect2 id="functions-comparisons-all">
<!--
   <title><literal>ALL</literal> (array)</title>
-->
   <title><literal>ALL</literal> (配列)</title>

<synopsis>
<replaceable>expression</replaceable> <replaceable>operator</replaceable> ALL (<replaceable>array expression</replaceable>)
</synopsis>

  <para>
<!--
   The right-hand side is a parenthesized expression, which must yield an
   array value.
   The left-hand expression
   is evaluated and compared to each element of the array using the
   given <replaceable>operator</replaceable>, which must yield a Boolean
   result.
   The result of <token>ALL</token> is <quote>true</quote> if all comparisons yield true
   (including the case where the array has zero elements).
   The result is <quote>false</quote> if any false result is found.
-->
右辺は括弧で括られた式で、配列値を返さなければなりません。
左辺の式は配列の要素それぞれに対して、指定された<replaceable>operator</replaceable>を使用して評価、比較されます。なお、<replaceable>operator</replaceable>は結果として論理値を生成する必要があります。
全ての比較が真になる場合（配列の要素数がゼロである場合を含む）、<token>ALL</token>の結果は<quote>true（真）</quote>です。
1つでも偽の結果があると、結果は<quote>false（偽）</quote>です。
  </para>

  <para>
<!--
   If the array expression yields a null array, the result of
   <token>ALL</token> will be null.  If the left-hand expression yields null,
   the result of <token>ALL</token> is ordinarily null (though a non-strict
   comparison operator could possibly yield a different result).
   Also, if the right-hand array contains any null elements and no false
   comparison result is obtained, the result of <token>ALL</token>
   will be null, not true (again, assuming a strict comparison operator).
   This is in accordance with SQL's normal rules for Boolean combinations
   of null values.
-->
配列式がNULL配列を生成する場合、<token>ALL</token>の結果はNULLになります。
左辺式がNULLとなる場合、<token>ALL</token>の結果は通常NULLになります（厳格でない比較演算子では異なる結果になるかもしれません）。
また、右辺の配列にNULL要素が含まれ、かつ、比較の結果、偽が得られなかった場合、<token>ALL</token>の結果は真ではなくNULLになります（ここでも、厳格な演算子の場合です）。
これは、NULLに対する、SQLの論理値組み合わせに関する標準規則に従うものです。
  </para>
  </sect2>

  <sect2 id="row-wise-comparison">
<!--
   <title>Row Constructor Comparison</title>
-->
   <title>行コンストラクタの比較</title>

<synopsis>
<replaceable>row_constructor</replaceable> <replaceable>operator</replaceable> <replaceable>row_constructor</replaceable>
</synopsis>

  <para>
<!--
   Each side is a row constructor,
   as described in <xref linkend="sql-syntax-row-constructors"/>.
   The two row constructors must have the same number of fields.
   The given <replaceable>operator</replaceable> is applied to each pair
   of corresponding fields.  (Since the fields could be of different
   types, this means that a different specific operator could be selected
   for each pair.)
   All the selected operators must be members of some B-tree operator
   class, or be the negator of an <literal>=</literal> member of a B-tree
   operator class, meaning that row constructor comparison is only
   possible when the <replaceable>operator</replaceable> is
   <literal>=</literal>,
   <literal>&lt;&gt;</literal>,
   <literal>&lt;</literal>,
   <literal>&lt;=</literal>,
   <literal>&gt;</literal>, or
   <literal>&gt;=</literal>,
   or has semantics similar to one of these.
-->
<xref linkend="sql-syntax-row-constructors"/>で説明されているように、両辺は行コンストラクタです。
2つの行コンストラクタは同じ数のフィールドを持つ必要があります。
指定された<replaceable>演算子</replaceable>は、対応するフィールドの各ペアに適用されます。
（フィールドのタイプが異なる場合があるため、これは、各ペアに対して異なる特定の演算子を選択できることを意味します。）
選択される演算子はすべて、B-ツリー演算子クラスのメンバ、またはB-ツリー演算子クラスの<literal>=</literal>メンバの否定子である必要があります。
つまり、行コンストラクタ比較は、<replaceable>演算子</replaceable>が<literal>=</literal>、<literal>&lt;&gt;</literal>、<literal>&lt;</literal>、<literal>&lt;=</literal>、<literal>&gt;</literal>、<literal>&gt;=</literal>の場合、またはこれらのいずれかに類似したセマンティクスを持つ場合にのみ可能です。
  </para>

  <para>
<!--
   The <literal>=</literal> and <literal>&lt;&gt;</literal> cases work slightly differently
   from the others.  Two rows are considered
   equal if all their corresponding members are non-null and equal; the rows
   are unequal if any corresponding members are non-null and unequal;
   otherwise the result of the row comparison is unknown (null).
-->
<literal>=</literal>と<literal>&lt;&gt;</literal>の場合、他と動作が多少異なります。
2つの行は対応する全ての構成要素が非NULLかつ等しい場合に等しいとみなされます。
１つでも構成要素が非NULLかつ等しくない場合、2つの行は等しくないとみなされます。
それ以外の場合、その行の比較結果は不明（NULL）です。
  </para>

  <para>
<!--
   For the <literal>&lt;</literal>, <literal>&lt;=</literal>, <literal>&gt;</literal> and
   <literal>&gt;=</literal> cases, the row elements are compared left-to-right,
   stopping as soon as an unequal or null pair of elements is found.
   If either of this pair of elements is null, the result of the
   row comparison is unknown (null); otherwise comparison of this pair
   of elements determines the result.  For example,
   <literal>ROW(1,2,NULL) &lt; ROW(1,3,0)</literal>
   yields true, not null, because the third pair of elements are not
   considered.
-->
<literal>&lt;</literal>、<literal>&lt;=</literal>、<literal>&gt;</literal>、<literal>&gt;=</literal>の場合、行の要素は左から右に比較されます。そして、不等またはNULLの組み合わせが見つかったところで停止します。
要素の組み合わせのどちらかがNULLであった場合、行比較の結果は不明（NULL）です。さもなくば、要素の組み合わせの比較により結果が決まります。
例えば、<literal>ROW(1,2,NULL) &lt; ROW(1,3,0)</literal>は、３番目の要素の組み合わせまで進まないため、NULLではなく真を返します。
  </para>

<synopsis>
<replaceable>row_constructor</replaceable> IS DISTINCT FROM <replaceable>row_constructor</replaceable>
</synopsis>

  <para>
<!--
   This construct is similar to a <literal>&lt;&gt;</literal> row comparison,
   but it does not yield null for null inputs.  Instead, any null value is
   considered unequal to (distinct from) any non-null value, and any two
   nulls are considered equal (not distinct).  Thus the result will
   either be true or false, never null.
-->
このコンストラクトは<literal>&lt;&gt;</literal>行比較と類似していますが、NULL入力に対してNULLを生成しない点が異なります。
その代わりに、全てのNULL値は非NULL値と等しくない（DISTINCT FROM）ものとみなされ、また、２つのNULLは等しい（NOT DISTINCT）ものとみなされます。
したがって、結果は真か偽のいずれかで、NULLにはなりません。
  </para>

<synopsis>
<replaceable>row_constructor</replaceable> IS NOT DISTINCT FROM <replaceable>row_constructor</replaceable>
</synopsis>

  <para>
<!--
   This construct is similar to a <literal>=</literal> row comparison,
   but it does not yield null for null inputs.  Instead, any null value is
   considered unequal to (distinct from) any non-null value, and any two
   nulls are considered equal (not distinct).  Thus the result will always
   be either true or false, never null.
-->
このコンストラクトは<literal>=</literal>行比較と類似していますが、NULL入力に対してNULLを生成しません。
代わりに、NULL値を、すべての非NULLの値に対して不等（DISTINCT FROM）とみなし、２つのNULLを等しいもの（NOT DISTINCT）とみなします。
したがって、結果は常に真か偽となり、NULLになることはありません
  </para>

  </sect2>

  <sect2 id="composite-type-comparison">
<!--
   <title>Composite Type Comparison</title>
-->
   <title>複合型の比較</title>

<synopsis>
<replaceable>record</replaceable> <replaceable>operator</replaceable> <replaceable>record</replaceable>
</synopsis>

  <para>
<!--
   The SQL specification requires row-wise comparison to return NULL if the
   result depends on comparing two NULL values or a NULL and a non-NULL.
   <productname>PostgreSQL</productname> does this only when comparing the
   results of two row constructors (as in
   <xref linkend="row-wise-comparison"/>) or comparing a row constructor
   to the output of a subquery (as in <xref linkend="functions-subquery"/>).
   In other contexts where two composite-type values are compared, two
   NULL field values are considered equal, and a NULL is considered larger
   than a non-NULL.  This is necessary in order to have consistent sorting
   and indexing behavior for composite types.
-->
SQL仕様では、結果が2つのNULL値、またはNULLと非NULLの比較に依存するのであれば、行の観点からの比較はNULLを返すことを要求されています。
<productname>PostgreSQL</productname>は、(<xref linkend="row-wise-comparison"/>にあるように)２つの行コンストラクタの出力の比較を行う時、または副問い合わせの出力に対し(<xref linkend="functions-subquery"/>にあるように)行コンストラクタの比較を行う時のみこれを実施します。
２つの複合型の値が比較されるほかの状況では、２つのNULLフィールドの値は等しいと考えられ、NULLは非NULLより大きいとみなされます。
複合型に対して、これは一貫した並べ替えとインデックス付け動作担保のため必要です。
  </para>

  <para>
<!--
   Each side is evaluated and they are compared row-wise.  Composite type
   comparisons are allowed when the <replaceable>operator</replaceable> is
   <literal>=</literal>,
   <literal>&lt;&gt;</literal>,
   <literal>&lt;</literal>,
   <literal>&lt;=</literal>,
   <literal>&gt;</literal> or
   <literal>&gt;=</literal>,
   or has semantics similar to one of these.  (To be specific, an operator
   can be a row comparison operator if it is a member of a B-tree operator
   class, or is the negator of the <literal>=</literal> member of a B-tree operator
   class.)  The default behavior of the above operators is the same as for
   <literal>IS [ NOT ] DISTINCT FROM</literal> for row constructors (see
   <xref linkend="row-wise-comparison"/>).
-->
各辺が評価され、行単位で比較が行なわれます。
複合型の比較は<replaceable>operator</replaceable>が<literal>=</literal>、<literal>&lt;&gt;</literal>、<literal>&lt;</literal>、<literal>&lt;=</literal>、<literal>&gt;</literal>、<literal>&gt;=</literal>またはそのいずれかと類似の意味を持つ場合に許されます。
(正確には、演算子はB-tree演算子クラスのメンバである場合、またはB-tree演算子クラスの<literal>=</literal>メンバの否定子である場合に行比較演算子となり得ます。)
上記の演算子のデフォルトの動作は、行コンストラクタに対する<literal>IS [ NOT ] DISTINCT FROM</literal>と同じです（<xref linkend="row-wise-comparison"/>参照）。
  </para>

  <para>
<!--
   To support matching of rows which include elements without a default
   B-tree operator class, the following operators are defined for composite
   type comparison:
   <literal>*=</literal>,
   <literal>*&lt;&gt;</literal>,
   <literal>*&lt;</literal>,
   <literal>*&lt;=</literal>,
   <literal>*&gt;</literal>, and
   <literal>*&gt;=</literal>.
   These operators compare the internal binary representation of the two
   rows.  Two rows might have a different binary representation even
   though comparisons of the two rows with the equality operator is true.
   The ordering of rows under these comparison operators is deterministic
   but not otherwise meaningful.  These operators are used internally
   for materialized views and might be useful for other specialized
   purposes such as replication and B-Tree deduplication (see <xref
   linkend="btree-deduplication"/>).  They are not intended to be
   generally useful for writing queries, though.
-->
デフォルトのB-tree演算子クラスを持たない要素を含む行の一致をサポートするために、いくつかの演算子が複合型の比較のために定義されています。
それは<literal>*=</literal>、<literal>*&lt;&gt;</literal>、<literal>*&lt;</literal>、<literal>*&lt;=</literal>、<literal>*&gt;</literal>、<literal>*&gt;=</literal>です。
上記の演算子は2つの行の内部バイナリ表現を比較します。
2つの行の等価演算子での比較が真であっても、2つの行はバイナリ表現が異なるかもしれません。
上記の比較演算子での行の順序は決定論的ですが、それ以外は意味がありません。
上記の演算子はマテリアライズドビューで内部的に使われ、レプリケーションやB-Treeの重複除去(<xref linkend="btree-deduplication"/>参照)のような他の特定の目的のためには有用かもしれませんが、問い合わせを書くのに一般的に有用であるようには意図していません。
  </para>
  </sect2>
 </sect1>

 <sect1 id="functions-srf">
<!--
  <title>Set Returning Functions</title>
-->
  <title>集合を返す関数</title>

  <indexterm zone="functions-srf">
   <primary>set returning functions</primary>
   <secondary>functions</secondary>
  </indexterm>
  <indexterm zone="functions-srf">
   <primary>集合を返す関数</primary>
   <secondary>関数</secondary>
  </indexterm>

  <para>
<!--
   This section describes functions that possibly return more than one row.
   The most widely used functions in this class are series generating
   functions, as detailed in <xref linkend="functions-srf-series"/> and
   <xref linkend="functions-srf-subscripts"/>.  Other, more specialized
   set-returning functions are described elsewhere in this manual.
   See <xref linkend="queries-tablefunctions"/> for ways to combine multiple
   set-returning functions.
-->
本節では、場合により複数行を返す関数について説明します。
このクラスで最も広く用いられている関数は、<xref linkend="functions-srf-series"/>、および<xref linkend="functions-srf-subscripts"/>にて詳細が触れられている、連続値生成関数です。
他方、より特化された集合を返す関数の記述がこのマニュアルの他の場所にあります。
集合を返す関数を複数組み合わせる方法については<xref linkend="queries-tablefunctions"/>を参照してください。
  </para>

   <table id="functions-srf-series">
<!--
    <title>Series Generating Functions</title>
-->
    <title>連続値生成関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>generate_series</primary>
        </indexterm>
        <function>generate_series</function> ( <parameter>start</parameter> <type>integer</type>, <parameter>stop</parameter> <type>integer</type> <optional>, <parameter>step</parameter> <type>integer</type> </optional> )
        <returnvalue>setof integer</returnvalue>
       </para>
       <para role="func_signature">
        <function>generate_series</function> ( <parameter>start</parameter> <type>bigint</type>, <parameter>stop</parameter> <type>bigint</type> <optional>, <parameter>step</parameter> <type>bigint</type> </optional> )
        <returnvalue>setof bigint</returnvalue>
       </para>
       <para role="func_signature">
        <function>generate_series</function> ( <parameter>start</parameter> <type>numeric</type>, <parameter>stop</parameter> <type>numeric</type> <optional>, <parameter>step</parameter> <type>numeric</type> </optional> )
        <returnvalue>setof numeric</returnvalue>
       </para>
       <para>
<!--
        Generates a series of values from <parameter>start</parameter>
        to <parameter>stop</parameter>, with a step size
        of <parameter>step</parameter>.  <parameter>step</parameter>
        defaults to 1.
-->
<parameter>start</parameter>から<parameter>stop</parameter>まで、刻み<parameter>step</parameter>で連続する値を生成します。
<parameter>step</parameter>のデフォルトは1です。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>generate_series</function> ( <parameter>start</parameter> <type>timestamp</type>, <parameter>stop</parameter> <type>timestamp</type>, <parameter>step</parameter> <type>interval</type> )
        <returnvalue>setof timestamp</returnvalue>
       </para>
       <para role="func_signature">
        <function>generate_series</function> ( <parameter>start</parameter> <type>timestamp with time zone</type>, <parameter>stop</parameter> <type>timestamp with time zone</type>, <parameter>step</parameter> <type>interval</type> <optional>, <parameter>timezone</parameter> <type>text</type> </optional> )
        <returnvalue>setof timestamp with time zone</returnvalue>
       </para>
       <para>
<!--
        Generates a series of values from <parameter>start</parameter>
        to <parameter>stop</parameter>, with a step size
        of <parameter>step</parameter>.
        In the timezone-aware form, times of day and daylight-savings
        adjustments are computed according to the time zone named by
        the <parameter>timezone</parameter> argument, or the current
        <xref linkend="guc-timezone"/> setting if that is omitted.
-->
<parameter>start</parameter>から<parameter>stop</parameter>まで、刻み<parameter>step</parameter>で連続する値を生成します。
時間帯を認識する形式では、<parameter>timezone</parameter>引数、あるいはもしそれが省略されているなら現在の<xref linkend="guc-timezone"/>設定によって指定される時間帯にしたがって時刻と夏時間調整が計算されます。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
<!--
   When <parameter>step</parameter> is positive, zero rows are returned if
   <parameter>start</parameter> is greater than <parameter>stop</parameter>.
   Conversely, when <parameter>step</parameter> is negative, zero rows are
   returned if <parameter>start</parameter> is less than <parameter>stop</parameter>.
   Zero rows are also returned if any input is <literal>NULL</literal>.
   It is an error
   for <parameter>step</parameter> to be zero. Some examples follow:
-->
<parameter>step</parameter>が正の場合、<parameter>start</parameter>が<parameter>stop</parameter>よりも大きいと０行が返ります。
反対に、<parameter>step</parameter>が負の場合は、<parameter>start</parameter>が<parameter>stop</parameter>よりも小さいと０行が返ります。
また、どれかの入力が<literal>NULL</literal>の場合も０行が返ります。
<parameter>step</parameter>が０の時はエラーになります。
以下にいくつか例を示します。
<programlisting>
SELECT * FROM generate_series(2,4);
 generate_series
-----------------
               2
               3
               4
(3 rows)

SELECT * FROM generate_series(5,1,-2);
 generate_series
-----------------
               5
               3
               1
(3 rows)

SELECT * FROM generate_series(4,3);
 generate_series
-----------------
(0 rows)

SELECT generate_series(1.1, 4, 1.3);
 generate_series
-----------------
             1.1
             2.4
             3.7
(3 rows)

<!--
&#45;- this example relies on the date-plus-integer operator:
-->
-- この例は日付に整数を足し込む演算子に依存します。
SELECT current_date + s.a AS dates FROM generate_series(0,14,7) AS s(a);
   dates
------------
 2004-02-05
 2004-02-12
 2004-02-19
(3 rows)

SELECT * FROM generate_series('2008-03-01 00:00'::timestamp,
                              '2008-03-04 12:00', '10 hours');
   generate_series
---------------------
 2008-03-01 00:00:00
 2008-03-01 10:00:00
 2008-03-01 20:00:00
 2008-03-02 06:00:00
 2008-03-02 16:00:00
 2008-03-03 02:00:00
 2008-03-03 12:00:00
 2008-03-03 22:00:00
 2008-03-04 08:00:00
(9 rows)

-- this example assumes that TimeZone is set to UTC; note the DST transition:
SELECT * FROM generate_series('2001-10-22 00:00 -04:00'::timestamptz,
                              '2001-11-01 00:00 -05:00'::timestamptz,
                              '1 day'::interval, 'America/New_York');
    generate_series
------------------------
 2001-10-22 04:00:00+00
 2001-10-23 04:00:00+00
 2001-10-24 04:00:00+00
 2001-10-25 04:00:00+00
 2001-10-26 04:00:00+00
 2001-10-27 04:00:00+00
 2001-10-28 04:00:00+00
 2001-10-29 05:00:00+00
 2001-10-30 05:00:00+00
 2001-10-31 05:00:00+00
 2001-11-01 05:00:00+00
(11 rows)
</programlisting>
  </para>

   <table id="functions-srf-subscripts">
<!--
    <title>Subscript Generating Functions</title>
-->
    <title>添え字生成関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>generate_subscripts</primary>
        </indexterm>
        <function>generate_subscripts</function> ( <parameter>array</parameter> <type>anyarray</type>, <parameter>dim</parameter> <type>integer</type> )
        <returnvalue>setof integer</returnvalue>
       </para>
       <para>
<!--
        Generates a series comprising the valid subscripts of
        the <parameter>dim</parameter>'th dimension of the given array.
-->
指定した配列の<parameter>dim</parameter>次元で有効な添え字を構成する連番を生成します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>generate_subscripts</function> ( <parameter>array</parameter> <type>anyarray</type>, <parameter>dim</parameter> <type>integer</type>,  <parameter>reverse</parameter> <type>boolean</type> )
        <returnvalue>setof integer</returnvalue>
       </para>
       <para>
<!--
        Generates a series comprising the valid subscripts of
        the <parameter>dim</parameter>'th dimension of the given array.
        When <parameter>reverse</parameter> is true, returns the series in
        reverse order.
-->
指定した配列<parameter>dim</parameter>次元で有効な添え字を構成する連番を生成します。
<parameter>reverse</parameter>が真の場合、連番は逆順に返されます。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
<!--
   <function>generate_subscripts</function> is a convenience function that generates
   the set of valid subscripts for the specified dimension of the given
   array.
   Zero rows are returned for arrays that do not have the requested dimension,
   or if any input is <literal>NULL</literal>.
   Some examples follow:
-->
<function>generate_subscripts</function>は、指定した配列の指定した次数で有効な添え字からなる集合を生成するために便利な関数です。
要求された次数を持たない配列またはどれかの入力が<literal>NULL</literal>なら0行が返ります。
いくつかの例を以下に示します。
<programlisting>
-- basic usage:
SELECT generate_subscripts('{NULL,1,NULL,2}'::int[], 1) AS s;
 s
---
 1
 2
 3
 4
(4 rows)

<!--
&#45;- presenting an array, the subscript and the subscripted
&#45;- value requires a subquery:
-->
-- 配列、添え字とその添え字が示す値を表示するには
-- 副問い合わせが必要です。
SELECT * FROM arrays;
         a
--------------------
 {-1,-2}
 {100,200,300}
(2 rows)

SELECT a AS array, s AS subscript, a[s] AS value
FROM (SELECT generate_subscripts(a, 1) AS s, a FROM arrays) foo;
     array     | subscript | value
---------------+-----------+-------
 {-1,-2}       |         1 |    -1
 {-1,-2}       |         2 |    -2
 {100,200,300} |         1 |   100
 {100,200,300} |         2 |   200
 {100,200,300} |         3 |   300
(5 rows)

<!--
&#45;- unnest a 2D array:
-->
-- 2次元配列の入れ子を解きます。
CREATE OR REPLACE FUNCTION unnest2(anyarray)
RETURNS SETOF anyelement AS $$
select $1[i][j]
   from generate_subscripts($1,1) g1(i),
        generate_subscripts($1,2) g2(j);
$$ LANGUAGE sql IMMUTABLE;
CREATE FUNCTION
SELECT * FROM unnest2(ARRAY[[1,2],[3,4]]);
 unnest2
---------
       1
       2
       3
       4
(4 rows)
</programlisting>
  </para>

  <indexterm>
   <primary>ordinality</primary>
  </indexterm>
  <indexterm>
   <primary>順序性</primary>
  </indexterm>

  <para>
<!--
   When a function in the <literal>FROM</literal> clause is suffixed
   by <literal>WITH ORDINALITY</literal>, a <type>bigint</type> column is
   appended to the function's output column(s), which starts from 1 and
   increments by 1 for each row of the function's output.
   This is most useful in the case of set returning
   functions such as <function>unnest()</function>.
-->
<literal>FROM</literal>句の関数の後に<literal>WITH ORDINALITY</literal>が付いている場合、1から始まり関数の出力の行毎に1増えていく<type>bigint</type>列が関数の出力列に追加されます。
これは<function>unnest()</function>のような集合を返す関数の場合に最も役に立ちます。

<programlisting>
<!--
&#45;- set returning function WITH ORDINALITY:
-->
-- WITH ORDINALITYの付いた集合を返す関数
SELECT * FROM pg_ls_dir('.') WITH ORDINALITY AS t(ls,n);
       ls        | n
-----------------+----
 pg_serial       |  1
 pg_twophase     |  2
 postmaster.opts |  3
 pg_notify       |  4
 postgresql.conf |  5
 pg_tblspc       |  6
 logfile         |  7
 base            |  8
 postmaster.pid  |  9
 pg_ident.conf   | 10
 global          | 11
 pg_xact         | 12
 pg_snapshots    | 13
 pg_multixact    | 14
 PG_VERSION      | 15
 pg_wal          | 16
 pg_hba.conf     | 17
 pg_stat_tmp     | 18
 pg_subtrans     | 19
(19 rows)
</programlisting>
  </para>

 </sect1>

 <sect1 id="functions-info">
<!--
  <title>System Information Functions and Operators</title>
-->
  <title>システム情報関数と演算子</title>

   <para>
<!--
    The functions described in this section are used to obtain various
    information about a <productname>PostgreSQL</productname> installation.
-->
本節で説明する関数は、<productname>PostgreSQL</productname>のインストレーションに関するさまざまな情報を取得するために使用されます。
   </para>

  <sect2 id="functions-info-session">
<!--
   <title>Session Information Functions</title>
-->
   <title>セッション情報関数</title>

  <para>
<!--
   <xref linkend="functions-info-session-table"/> shows several
   functions that extract session and system information.
-->
<xref linkend="functions-info-session-table"/>に、セッションおよびシステムの情報を抽出する関数を示します。
  </para>

  <para>
<!--
   In addition to the functions listed in this section, there are a number of
   functions related to the statistics system that also provide system
   information. See <xref linkend="monitoring-stats-functions"/> for more
   information.
-->
本節で列挙されている関数のほかに、同様にシステム情報を提供する統計システムに関連した数多くの関数があります。
<xref linkend="monitoring-stats-functions"/>にさらに情報があります。
  </para>

   <table id="functions-info-session-table">
<!--
    <title>Session Information Functions</title>
-->
    <title>セッション情報関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>current_catalog</primary>
        </indexterm>
        <function>current_catalog</function>
        <returnvalue>name</returnvalue>
       </para>
       <para role="func_signature">
        <indexterm>
         <primary>current_database</primary>
        </indexterm>
        <function>current_database</function> ()
        <returnvalue>name</returnvalue>
       </para>
       <para>
<!--
        Returns the name of the current database.  (Databases are
        called <quote>catalogs</quote> in the SQL standard,
        so <function>current_catalog</function> is the standard's
        spelling.)
-->
現在のデータベースの名前を返します。
（データベースは標準SQLでは<quote>カタログ</quote>と呼ばれています。ですから標準での記述は<function>current_catalog</function>となります。）
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>current_query</primary>
        </indexterm>
        <function>current_query</function> ()
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Returns the text of the currently executing query, as submitted
        by the client (which might contain more than one statement).
-->
クライアントから送信された現在実行中問い合わせのテキスト（複数の文を含むことあります）を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>current_role</primary>
        </indexterm>
        <function>current_role</function>
        <returnvalue>name</returnvalue>
       </para>
       <para>
<!--
        This is equivalent to <function>current_user</function>.
-->
<function>current_user</function>と同じです。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>current_schema</primary>
        </indexterm>
        <indexterm>
         <primary>schema</primary>
         <secondary>current</secondary>
        </indexterm>
        <function>current_schema</function>
        <returnvalue>name</returnvalue>
       </para>
       <para role="func_signature">
        <function>current_schema</function> ()
        <returnvalue>name</returnvalue>
       </para>
       <para>
<!--
        Returns the name of the schema that is first in the search path (or a
        null value if the search path is empty).  This is the schema that will
        be used for any tables or other named objects that are created without
        specifying a target schema.
-->
検索パスの先頭にあるスキーマの名前を返します。（検索パスが空ならNULL値を返します。）
これはターゲットスキーマを指定せずに作成されるすべてのテーブルあるいは名前付きのオブジェクトで使われるスキーマです。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>current_schemas</primary>
        </indexterm>
        <indexterm>
         <primary>search path</primary>
         <secondary>current</secondary>
        </indexterm>
        <function>current_schemas</function> ( <parameter>include_implicit</parameter> <type>boolean</type> )
        <returnvalue>name[]</returnvalue>
       </para>
       <para>
<!--
        Returns an array of the names of all schemas presently in the
        effective search path, in their priority order.  (Items in the current
        <xref linkend="guc-search-path"/> setting that do not correspond to
        existing, searchable schemas are omitted.)  If the Boolean argument
        is <literal>true</literal>, then implicitly-searched system schemas
        such as <literal>pg_catalog</literal> are included in the result.
-->
現在有効な検索パス中にあるすべてのスキーマの名前を優先順に配列で返します。
（現在の<xref linkend="guc-search-path"/>設定にある項目で、存在する検索可能なスキーマに関連しないものは無視されます。）
論理値引数が<literal>真</literal>なら<literal>pg_catalog</literal>のような暗黙的に検索されるシステムスキーマは結果に含まれます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>current_user</primary>
        </indexterm>
        <indexterm>
         <primary>user</primary>
         <secondary>current</secondary>
        </indexterm>
        <function>current_user</function>
        <returnvalue>name</returnvalue>
       </para>
       <para>
<!--
        Returns the user name of the current execution context.
-->
現在の実行コンテキストのユーザ名を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>inet_client_addr</primary>
        </indexterm>
        <function>inet_client_addr</function> ()
        <returnvalue>inet</returnvalue>
       </para>
       <para>
<!--
        Returns the IP address of the current client,
        or <literal>NULL</literal> if the current connection is via a
        Unix-domain socket.
-->
現在のクライアントのIPアドレスを返します。UNIXドメインソケット経由の接続なら<literal>NULL</literal>が返ります。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>inet_client_port</primary>
        </indexterm>
        <function>inet_client_port</function> ()
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Returns the IP port number of the current client,
        or <literal>NULL</literal> if the current connection is via a
        Unix-domain socket.
-->
現在のクライアントのIPポート番号を返します。UNIXドメインソケット経由の接続なら<literal>NULL</literal>が返ります。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>inet_server_addr</primary>
        </indexterm>
        <function>inet_server_addr</function> ()
        <returnvalue>inet</returnvalue>
       </para>
       <para>
<!--
        Returns the IP address on which the server accepted the current
        connection,
        or <literal>NULL</literal> if the current connection is via a
        Unix-domain socket.
-->
サーバが受け付けている現在の接続のIPアドレスを返します。UNIXドメインソケット経由の接続なら<literal>NULL</literal>が返ります。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>inet_server_port</primary>
        </indexterm>
        <function>inet_server_port</function> ()
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Returns the IP port number on which the server accepted the current
        connection,
        or <literal>NULL</literal> if the current connection is via a
        Unix-domain socket.
-->
サーバが受け付けている現在の接続のIPポート番号を返します。UNIXドメインソケット経由の接続なら<literal>NULL</literal>が返ります。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_backend_pid</primary>
        </indexterm>
        <function>pg_backend_pid</function> ()
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Returns the process ID of the server process attached to the current
        session.
-->
現在のセッションに結びついているサーバプロセスのプロセスIDを返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_blocking_pids</primary>
        </indexterm>
        <function>pg_blocking_pids</function> ( <type>integer</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
<!--
        Returns an array of the process ID(s) of the sessions that are
        blocking the server process with the specified process ID from
        acquiring a lock, or an empty array if there is no such server process
        or it is not blocked.
-->
指定したサーバプロセスIDによるロック取得をブロックしているプロセスIDを配列で返します。そのようなサーバプロセスが存在しないかあるいはブロックしていない場合は空の配列が返ります。
       </para>
       <para>
<!--
        One server process blocks another if it either holds a lock that
        conflicts with the blocked process's lock request (hard block), or is
        waiting for a lock that would conflict with the blocked process's lock
        request and is ahead of it in the wait queue (soft block).  When using
        parallel queries the result always lists client-visible process IDs
        (that is, <function>pg_backend_pid</function> results) even if the
        actual lock is held or awaited by a child worker process.  As a result
        of that, there may be duplicated PIDs in the result.  Also note that
        when a prepared transaction holds a conflicting lock, it will be
        represented by a zero process ID.
-->
あるサーバプロセスが別のサーバプロセスをブロックするのは、ブロックされるプロセスのロック要求と競合するロックを保持している場合（ハードブロック）、あるいは、ブロックされるプロセスのロック要求と競合するロックを待っていて、かつロック待ちキュー内でより前方にいる場合（ソフトブロック）です。
パラレルクエリを使っている場合、実際のロックを子ワーカープロセスが保持または待っている場合であっても、この結果には必ずクライアントから可視のプロセスID（つまり、<function>pg_backend_pid</function>の結果）が示されます。
そのような仕様なので、この結果には重複するPIDが含まれることもあります。
また、プリペアドのトランザクションが競合するロックを保持している場合、この関数の結果ではプロセスIDがゼロとして示されることにも注意して下さい。
       </para>
       <para>
<!--
        Frequent calls to this function could have some impact on database
        performance, because it needs exclusive access to the lock manager's
        shared state for a short time.
-->
頻繁にこの関数を呼び出すとデータベースの性能に影響があるかも知れません。ロックマネージャの共有状態への短期的な排他ロックの取得が必要だからです。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_conf_load_time</primary>
        </indexterm>
        <function>pg_conf_load_time</function> ()
        <returnvalue>timestamp with time zone</returnvalue>
       </para>
       <para>
<!--
        Returns the time when the server configuration files were last loaded.
        If the current session was alive at the time, this will be the time
        when the session itself re-read the configuration files (so the
        reading will vary a little in different sessions).  Otherwise it is
        the time when the postmaster process re-read the configuration files.
-->
サーバ設定ファイルが最後に読み込まれた時の時刻を返します。
現在のセッションがそのときに活動中だった場合、これはそのセッション自身が設定ファイルを再読み込みした時刻になります。（ですからその結果はセッションによって少し異なるかもしれません。）
それ以外の場合は、postmasterプロセスが設定ファイルを再読み込みした時刻になります。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_current_logfile</primary>
        </indexterm>
        <indexterm>
         <primary>Logging</primary>
         <secondary>pg_current_logfile function</secondary>
        </indexterm>
        <indexterm>
         <primary>Logging</primary>
         <secondary>pg_current_logfile関数</secondary>
        </indexterm>
        <indexterm>
          <primary>current_logfiles</primary>
          <secondary>and the pg_current_logfile function</secondary>
        </indexterm>
        <indexterm>
          <primary>current_logfiles</primary>
          <secondary>とpg_current_logfile関数</secondary>
        </indexterm>
        <indexterm>
         <primary>Logging</primary>
         <secondary>current_logfiles file and the pg_current_logfile
         function</secondary>
        </indexterm>
        <indexterm>
         <primary>Logging</primary>
         <secondary>current_logfilesファイルとpg_current_logfile関数</secondary>
        </indexterm>
        <function>pg_current_logfile</function> ( <optional> <type>text</type> </optional> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Returns the path name of the log file currently in use by the logging
        collector.  The path includes the <xref linkend="guc-log-directory"/>
        directory and the individual log file name.  The result
        is <literal>NULL</literal> if the logging collector is disabled.
        When multiple log files exist, each in a different
        format, <function>pg_current_logfile</function> without an argument
        returns the path of the file having the first format found in the
        ordered list: <literal>stderr</literal>,
        <literal>csvlog</literal>, <literal>jsonlog</literal>.
        <literal>NULL</literal> is returned if no log file has any of these
        formats.
        To request information about a specific log file format, supply
        either <literal>csvlog</literal>, <literal>jsonlog</literal> or
        <literal>stderr</literal> as the
        value of the optional parameter. The result is <literal>NULL</literal>
        if the log format requested is not configured in
        <xref linkend="guc-log-destination"/>.
        The result reflects the contents of
        the <filename>current_logfiles</filename> file.
-->
ログ収集機構が現在使用しているログファイルのパス名を返します。
パスには<xref linkend="guc-log-directory"/>ディレクトリとログファイルの名前が含まれます。
ログ収集が無効ならば戻り値は<literal>NULL</literal>になります。
複数のログファイルがそれぞれ異なる形式で存在する場合、引数なしの<function>pg_current_logfile</function>は、順序リスト（<literal>stderr</literal>、<literal>csvlog</literal>、<literal>jsonlog</literal>）の最初に出てくる形式のファイルのパスを返します。
これらの形式のログファイルがないときは<literal>NULL</literal>が返されます。
特定のファイル形式を要求するには、オプションパラメータの値として<literal>csvlog</literal>、<literal>jsonlog</literal>、または<literal>stderr</literal>をオプション引数の値として渡してください。
指定のログ形式が<xref linkend="guc-log-destination"/>で設定されていない場合は、戻り値が<literal>NULL</literal>となります。
結果は<filename>current_logfiles</filename>ファイルの内容を反映します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_my_temp_schema</primary>
        </indexterm>
        <function>pg_my_temp_schema</function> ()
        <returnvalue>oid</returnvalue>
       </para>
       <para>
<!--
        Returns the OID of the current session's temporary schema, or zero if
        it has none (because it has not created any temporary tables).
-->
現在のセッションの一時スキーマのOIDを返します。（一時テーブルをまだ１つも作成しておらず）存在しなければゼロを返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_is_other_temp_schema</primary>
        </indexterm>
        <function>pg_is_other_temp_schema</function> ( <type>oid</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Returns true if the given OID is the OID of another session's
        temporary schema.  (This can be useful, for example, to exclude other
        sessions' temporary tables from a catalog display.)
-->
指定したOIDが他のセッションの一時スキーマのOIDであれば、真を返します。
（例えば、他のセッションの一時テーブルをカタログ表示から除外したい場合などで有用です。）
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_jit_available</primary>
        </indexterm>
        <function>pg_jit_available</function> ()
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Returns true if a <acronym>JIT</acronym> compiler extension is
        available (see <xref linkend="jit"/>) and the
        <xref linkend="guc-jit"/> configuration parameter is set to
        <literal>on</literal>.
-->
<acronym>JIT</acronym>コンパイラ拡張が利用可能で(<xref linkend="jit"/>参照)、<xref linkend="guc-jit"/>設定パラメータが<literal>on</literal>なら真を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_listening_channels</primary>
        </indexterm>
        <function>pg_listening_channels</function> ()
        <returnvalue>setof text</returnvalue>
       </para>
       <para>
<!--
        Returns the set of names of asynchronous notification channels that
        the current session is listening to.
-->
今のセッションにおいて現在待ち受け中の非同期通知チャンネル名の集合を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_notification_queue_usage</primary>
        </indexterm>
        <function>pg_notification_queue_usage</function> ()
        <returnvalue>double precision</returnvalue>
       </para>
       <para>
<!--
        Returns the fraction (0&ndash;1) of the asynchronous notification
        queue's maximum size that is currently occupied by notifications that
        are waiting to be processed.
        See <xref linkend="sql-listen"/> and <xref linkend="sql-notify"/>
        for more information.
-->
非同期通知キューの最大サイズのうち、処理待ちの通知によって占められている現在の割合（0から1まで）を返します。
詳細は<xref linkend="sql-listen"/>と<xref linkend="sql-notify"/>をご覧ください。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_postmaster_start_time</primary>
        </indexterm>
        <function>pg_postmaster_start_time</function> ()
        <returnvalue>timestamp with time zone</returnvalue>
       </para>
       <para>
<!--
        Returns the time when the server started.
-->
サーバの起動時刻を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_safe_snapshot_blocking_pids</primary>
        </indexterm>
        <function>pg_safe_snapshot_blocking_pids</function> ( <type>integer</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
<!--
        Returns an array of the process ID(s) of the sessions that are blocking
        the server process with the specified process ID from acquiring a safe
        snapshot, or an empty array if there is no such server process or it
        is not blocked.
-->
指定のサーバプロセスIDによる安全なスナップショットの取得をブロックしているセッションのサーバプロセスIDの配列を返します。そのようなサーバプロセスがないか、ブロックされていない場合は空の配列が返ります。
       </para>
       <para>
<!--
        A session running a <literal>SERIALIZABLE</literal> transaction blocks
        a <literal>SERIALIZABLE READ ONLY DEFERRABLE</literal> transaction
        from acquiring a snapshot until the latter determines that it is safe
        to avoid taking any predicate locks.  See
        <xref linkend="xact-serializable"/> for more information about
        serializable and deferrable transactions.
-->
<literal>SERIALIZABLE</literal>トランザクションを実行しているセッションは、<literal>SERIALIZABLE READ ONLY DEFERRABLE</literal>トランザクションが述語ロックの取得をすべて回避しても安全であると決定するまで、後者がスナップショットを取得するのをブロックします。
シリアライザブルトランザクションおよび遅延可能トランザクションについてのさらなる情報については<xref linkend="xact-serializable"/>を参照してください。
       </para>
       <para>
<!--
        Frequent calls to this function could have some impact on database
        performance, because it needs access to the predicate lock manager's
        shared state for a short time.
-->
この関数を頻繁に呼び出すと、短時間に述語ロックマネージャの共有状態にアクセスする必要があるため、データベースのパフォーマンスに若干の影響が出るかもしれません。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_trigger_depth</primary>
        </indexterm>
        <function>pg_trigger_depth</function> ()
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Returns the current nesting level
        of <productname>PostgreSQL</productname> triggers (0 if not called,
        directly or indirectly, from inside a trigger).
-->
<productname>PostgreSQL</productname>のトリガの現在の入れ子の深さを返します。(直接的であれ間接的であれ、トリガ内部から呼ばれていなければ0を返します)。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>session_user</primary>
        </indexterm>
        <function>session_user</function>
        <returnvalue>name</returnvalue>
       </para>
       <para>
<!--
        Returns the session user's name.
-->
セッションのユーザ名を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>system_user</primary>
        </indexterm>
        <function>system_user</function>
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Returns the authentication method and the identity (if any) that the
        user presented during the authentication cycle before they were
        assigned a database role. It is represented as
        <literal>auth_method:identity</literal> or
        <literal>NULL</literal> if the user has not been authenticated (for
        example if <link linkend="auth-trust">Trust authentication</link> has
        been used).
-->
認証方式と、データベースロールが割り当てられる前にユーザが認証サイクル中に提示したID(存在する場合)を戻します。
ユーザが認証されている場合は<literal>auth_method:identity</literal>として表示します。ユーザが認証されていない場合（たとえば<link linkend="auth-trust">Trust認証</link>が使用されている場合）は<literal>NULL</literal>として表示します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>user</primary>
        </indexterm>
        <function>user</function>
        <returnvalue>name</returnvalue>
       </para>
       <para>
<!--
        This is equivalent to <function>current_user</function>.
-->
<function>current_user</function>と等価です。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>version</primary>
        </indexterm>
        <function>version</function> ()
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Returns a string describing the <productname>PostgreSQL</productname>
        server's version.  You can also get this information from
        <xref linkend="guc-server-version"/>, or for a machine-readable
        version use <xref linkend="guc-server-version-num"/>.  Software
        developers should use <varname>server_version_num</varname> (available
        since 8.2) or <xref linkend="libpq-PQserverVersion"/> instead of
        parsing the text version.
-->
<productname>PostgreSQL</productname>サーバのバージョンを説明する文字列を返します。
情報は<xref linkend="guc-server-version"/>からも得られます。
機械読み取り可能なバージョンは<xref linkend="guc-server-version-num"/>を使ってください。
ソフトウェア開発者は文字列バージョンを解析するのではなく、<varname>server_version_num</varname> (8.2以降で利用可能)か<xref linkend="libpq-PQserverVersion"/>を使うべきです。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <note>
    <para>
<!--
     <function>current_catalog</function>,
     <function>current_role</function>,
     <function>current_schema</function>,
     <function>current_user</function>,
     <function>session_user</function>,
     and <function>user</function> have special syntactic status
     in <acronym>SQL</acronym>: they must be called without trailing
     parentheses.  In PostgreSQL, parentheses can optionally be used with
     <function>current_schema</function>, but not with the others.
-->
<function>current_catalog</function>、<function>current_role</function>、<function>current_schema</function>、<function>current_user</function>、<function>session_user</function>および<function>user</function>は<acronym>SQL</acronym>において特殊な構文上の地位を持っており、最後に括弧を付けずに呼び出さなければなりません。
PostgreSQLでは<function>current_schema</function>の場合括弧を使用することができますが、他は使えません。
    </para>
   </note>

   <para>
<!--
    The <function>session_user</function> is normally the user who initiated
    the current database connection; but superusers can change this setting
    with <xref linkend="sql-set-session-authorization"/>.
    The <function>current_user</function> is the user identifier
    that is applicable for permission checking. Normally it is equal
    to the session user, but it can be changed with
    <xref linkend="sql-set-role"/>.
    It also changes during the execution of
    functions with the attribute <literal>SECURITY DEFINER</literal>.
    In Unix parlance, the session user is the <quote>real user</quote> and
    the current user is the <quote>effective user</quote>.
    <function>current_role</function> and <function>user</function> are
    synonyms for <function>current_user</function>.  (The SQL standard draws
    a distinction between <function>current_role</function>
    and <function>current_user</function>, but <productname>PostgreSQL</productname>
    does not, since it unifies users and roles into a single kind of entity.)
-->
<function>session_user</function>は、通常、現在のデータベース接続を開始したユーザです。しかし、スーパーユーザはこの設定を<xref linkend="sql-set-session-authorization"/>を使用して変更することができます。
<function>current_user</function>は、権限の検査に適用されるユーザ識別子です。
通常はセッションユーザと同じですが、<xref linkend="sql-set-role"/>を使用して変更可能です。
<literal>SECURITY DEFINER</literal>属性を持つ関数の実行中にも変わります。
Unix用語で言うと、セッションユーザは<quote>実ユーザ</quote>で、現在のユーザは<quote>実効ユーザ</quote>です。
<function>current_role</function>と<function>user</function>は<function>current_user</function>の同義語です。
（標準SQLでは<function>current_role</function>と<function>current_user</function>を区別していますが、<productname>PostgreSQL</productname>ではユーザとロールを1種類のエンティティに統合しているため、両者に区別はありません。）
   </para>

  </sect2>

  <sect2 id="functions-info-access">
<!--
   <title>Access Privilege Inquiry Functions</title>
-->
   <title>アクセス権限照会関数</title>

  <indexterm>
   <primary>privilege</primary>
   <secondary>querying</secondary>
  </indexterm>
  <indexterm>
   <primary>権限</primary>
   <secondary>問い合わせ</secondary>
  </indexterm>

  <para>
<!--
   <xref linkend="functions-info-access-table"/> lists functions that
   allow querying object access privileges programmatically.
   (See <xref linkend="ddl-priv"/> for more information about
   privileges.)
   In these functions, the user whose privileges are being inquired about
   can be specified by name or by OID
   (<structname>pg_authid</structname>.<structfield>oid</structfield>), or if
   the name is given as <literal>public</literal> then the privileges of the
   PUBLIC pseudo-role are checked.  Also, the <parameter>user</parameter>
   argument can be omitted entirely, in which case
   the <function>current_user</function> is assumed.
   The object that is being inquired about can be specified either by name or
   by OID, too.  When specifying by name, a schema name can be included if
   relevant.
   The access privilege of interest is specified by a text string, which must
   evaluate to one of the appropriate privilege keywords for the object's type
   (e.g., <literal>SELECT</literal>).  Optionally, <literal>WITH GRANT
   OPTION</literal> can be added to a privilege type to test whether the
   privilege is held with grant option. Also, multiple privilege types can be
   listed separated by commas, in which case the result will be true if any of
   the listed privileges is held. (Case of the privilege string is not
   significant, and extra whitespace is allowed between but not within
   privilege names.)
   Some examples:
-->
<xref linkend="functions-info-access-table"/>に列挙した関数を使用して、ユーザはオブジェクトのアクセス権限をプログラムから問い合わせることができます。
権限についての詳細は、<xref linkend="ddl-priv"/>を参照してください。
これらの関数では権限を検査されるユーザは名前かOID(<structname>pg_authid</structname>.<structfield>oid</structfield>)で指定できます。
名前が<literal>public</literal>として与えられるとPUBLIC仮想ロールの権限が検査されます。
また、<parameter>user</parameter>引数を完全に省略できます。この場合は<function>current_user</function>を指定したと見なされます。
検査されるオブジェクトも名前かOIDで指定できます。
名前で指定する時は関連するスキーマ名を含んでも構いません。
対象となるアクセス権限はテキスト文字列で指定します。その文字列はオブジェクト型（たとえば<literal>SELECT</literal>）へと評価されなければならない適切なアクセスキーワードで指定します。
その権限が許可オプションで保持されるかどうかをテストするためにオプションで<literal>WITH GRANT OPTION</literal>を権限型に追加できます。
また、複数の権限型をカンマで区切って列挙できます。この場合はどれかの権限が保持されていれば結果は真となります。
（権限文字列は大文字小文字の区別がなく、追加の空白を権限文字列の間に入れることができますが、権限名の中に入れることはできません。）
<programlisting>
SELECT has_table_privilege('myschema.mytable', 'select');
SELECT has_table_privilege('joe', 'mytable', 'INSERT, SELECT WITH GRANT OPTION');
</programlisting>
  </para>

   <table id="functions-info-access-table">
<!--
    <title>Access Privilege Inquiry Functions</title>
-->
    <title>アクセス権限照会関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>has_any_column_privilege</primary>
        </indexterm>
        <function>has_any_column_privilege</function> (
          <optional> <parameter>user</parameter> <type>name</type> or <type>oid</type>, </optional>
          <parameter>table</parameter> <type>text</type> or <type>oid</type>,
          <parameter>privilege</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Does user have privilege for any column of table?
        This succeeds either if the privilege is held for the whole table, or
        if there is a column-level grant of the privilege for at least one
        column.
        Allowable privilege types are
        <literal>SELECT</literal>, <literal>INSERT</literal>,
        <literal>UPDATE</literal>, and <literal>REFERENCES</literal>.
-->
ユーザがテーブルのどれか１つの列に対して権限を所有しているか？
テーブル全体あるいは列レベルの権限が少なくとも１つの列に与えられていれば成功します。
可能な権限型は<literal>SELECT</literal>、<literal>INSERT</literal>、<literal>UPDATE</literal>、<literal>REFERENCES</literal>です。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>has_column_privilege</primary>
        </indexterm>
        <function>has_column_privilege</function> (
          <optional> <parameter>user</parameter> <type>name</type> or <type>oid</type>, </optional>
          <parameter>table</parameter> <type>text</type> or <type>oid</type>,
          <parameter>column</parameter> <type>text</type> or <type>smallint</type>,
          <parameter>privilege</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Does user have privilege for the specified table column?
        This succeeds either if the privilege is held for the whole table, or
        if there is a column-level grant of the privilege for the column.
        The column can be specified by name or by attribute number
        (<structname>pg_attribute</structname>.<structfield>attnum</structfield>).
        Allowable privilege types are
        <literal>SELECT</literal>, <literal>INSERT</literal>,
        <literal>UPDATE</literal>, and <literal>REFERENCES</literal>.
-->
ユーザがテーブルの指定された（１つの）列に対して権限を所有しているか？
テーブル全体あるいはその列に対して列レベルの権限が与えられていれば成功します。
名前かアトリビュート番号(<structname>pg_attribute</structname>.<structfield>attnum</structfield>)で列を指定できます。
可能な権限型は<literal>SELECT</literal>、<literal>INSERT</literal>、<literal>UPDATE</literal>、<literal>REFERENCES</literal>です。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>has_database_privilege</primary>
        </indexterm>
        <function>has_database_privilege</function> (
          <optional> <parameter>user</parameter> <type>name</type> or <type>oid</type>, </optional>
          <parameter>database</parameter> <type>text</type> or <type>oid</type>,
          <parameter>privilege</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Does user have privilege for database?
        Allowable privilege types are
        <literal>CREATE</literal>,
        <literal>CONNECT</literal>,
        <literal>TEMPORARY</literal>, and
        <literal>TEMP</literal> (which is equivalent to
        <literal>TEMPORARY</literal>).
-->
ユーザはデータベースに対する権限があるか？
可能な権限型は<literal>CREATE</literal>、<literal>CONNECT</literal>、<literal>TEMPORARY</literal>、<literal>TEMP</literal> (<literal>TEMPORARY</literal>と同じです)です。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>has_foreign_data_wrapper_privilege</primary>
        </indexterm>
        <function>has_foreign_data_wrapper_privilege</function> (
          <optional> <parameter>user</parameter> <type>name</type> or <type>oid</type>, </optional>
          <parameter>fdw</parameter> <type>text</type> or <type>oid</type>,
          <parameter>privilege</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Does user have privilege for foreign-data wrapper?
        The only allowable privilege type is <literal>USAGE</literal>.
-->
現在のユーザは外部データラッパーに対する権限があるか？
可能な権限型は<literal>USAGE</literal>だけです。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>has_function_privilege</primary>
        </indexterm>
        <function>has_function_privilege</function> (
          <optional> <parameter>user</parameter> <type>name</type> or <type>oid</type>, </optional>
          <parameter>function</parameter> <type>text</type> or <type>oid</type>,
          <parameter>privilege</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Does user have privilege for function?
        The only allowable privilege type is <literal>EXECUTE</literal>.
-->
ユーザは関数に対する権限があるか？
可能な権限型は<literal>EXECUTE</literal>だけです。
       </para>
       <para>
<!--
        When specifying a function by name rather than by OID, the allowed
        input is the same as for the <type>regprocedure</type> data type (see
        <xref linkend="datatype-oid"/>).
        An example is:
-->
関数をOIDではなく名前で指定する場合、<type>regprocedure</type>データ型（<xref linkend="datatype-oid"/>を参照）と同じ入力が可能です。
例を示します。
<programlisting>
SELECT has_function_privilege('joeuser', 'myfunc(int, text)', 'execute');
</programlisting>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>has_language_privilege</primary>
        </indexterm>
        <function>has_language_privilege</function> (
          <optional> <parameter>user</parameter> <type>name</type> or <type>oid</type>, </optional>
          <parameter>language</parameter> <type>text</type> or <type>oid</type>,
          <parameter>privilege</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Does user have privilege for language?
        The only allowable privilege type is <literal>USAGE</literal>.
-->
ユーザは言語に対する権限があるか？
可能な権限型は<literal>USAGE</literal>だけです。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>has_parameter_privilege</primary>
        </indexterm>
        <function>has_parameter_privilege</function> (
          <optional> <parameter>user</parameter> <type>name</type> or <type>oid</type>, </optional>
          <parameter>parameter</parameter> <type>text</type>,
          <parameter>privilege</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Does user have privilege for configuration parameter?
        The parameter name is case-insensitive.
        Allowable privilege types are <literal>SET</literal>
        and <literal>ALTER SYSTEM</literal>.
-->
ユーザに構成パラメータに対する権限があるか?
パラメータ名では大文字と小文字が区別されません。
使用可能な権限タイプは<literal>SET</literal>および<literal>ALTER SYSTEM</literal>です。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>has_schema_privilege</primary>
        </indexterm>
        <function>has_schema_privilege</function> (
          <optional> <parameter>user</parameter> <type>name</type> or <type>oid</type>, </optional>
          <parameter>schema</parameter> <type>text</type> or <type>oid</type>,
          <parameter>privilege</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Does user have privilege for schema?
        Allowable privilege types are
        <literal>CREATE</literal> and
        <literal>USAGE</literal>.
-->
ユーザはスキーマに対する権限があるか？
可能な権限型は<literal>CREATE</literal>と<literal>USAGE</literal>です。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>has_sequence_privilege</primary>
        </indexterm>
        <function>has_sequence_privilege</function> (
          <optional> <parameter>user</parameter> <type>name</type> or <type>oid</type>, </optional>
          <parameter>sequence</parameter> <type>text</type> or <type>oid</type>,
          <parameter>privilege</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Does user have privilege for sequence?
        Allowable privilege types are
        <literal>USAGE</literal>,
        <literal>SELECT</literal>, and
        <literal>UPDATE</literal>.
-->
ユーザはシーケンスに対する権限があるか？
可能な権限型は<literal>USAGE</literal>、<literal>SELECT</literal>、<literal>UPDATE</literal>です。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>has_server_privilege</primary>
        </indexterm>
        <function>has_server_privilege</function> (
          <optional> <parameter>user</parameter> <type>name</type> or <type>oid</type>, </optional>
          <parameter>server</parameter> <type>text</type> or <type>oid</type>,
          <parameter>privilege</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Does user have privilege for foreign server?
        The only allowable privilege type is <literal>USAGE</literal>.
-->
ユーザは外部サーバに対する権限があるか？
可能な権限型は<literal>USAGE</literal>だけです。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>has_table_privilege</primary>
        </indexterm>
        <function>has_table_privilege</function> (
          <optional> <parameter>user</parameter> <type>name</type> or <type>oid</type>, </optional>
          <parameter>table</parameter> <type>text</type> or <type>oid</type>,
          <parameter>privilege</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Does user have privilege for table?
        Allowable privilege types
        are <literal>SELECT</literal>, <literal>INSERT</literal>,
        <literal>UPDATE</literal>, <literal>DELETE</literal>,
        <literal>TRUNCATE</literal>, <literal>REFERENCES</literal>,
        and <literal>TRIGGER</literal>.
-->
ユーザはテーブルに対する権限があるか？
可能な権限型は<literal>SELECT</literal>、<literal>INSERT</literal>、<literal>UPDATE</literal>、<literal>DELETE</literal>、<literal>TRUNCATE</literal>、<literal>REFERENCES</literal>、<literal>TRIGGER</literal>です。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>has_tablespace_privilege</primary>
        </indexterm>
        <function>has_tablespace_privilege</function> (
          <optional> <parameter>user</parameter> <type>name</type> or <type>oid</type>, </optional>
          <parameter>tablespace</parameter> <type>text</type> or <type>oid</type>,
          <parameter>privilege</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Does user have privilege for tablespace?
        The only allowable privilege type is <literal>CREATE</literal>.
-->
ユーザはテーブル空間に対する権限があるか？
可能な権限型は<literal>CREATE</literal>です。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>has_type_privilege</primary>
        </indexterm>
        <function>has_type_privilege</function> (
          <optional> <parameter>user</parameter> <type>name</type> or <type>oid</type>, </optional>
          <parameter>type</parameter> <type>text</type> or <type>oid</type>,
          <parameter>privilege</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Does user have privilege for data type?
        The only allowable privilege type is <literal>USAGE</literal>.
        When specifying a type by name rather than by OID, the allowed input
        is the same as for the <type>regtype</type> data type (see
        <xref linkend="datatype-oid"/>).
-->
ユーザにデータ型に対する権限があるか？
可能な権限型は<literal>USAGE</literal>だけです。
OIDではなく名前で型を指定する際は、可能な入力は<type>regtype</type>データ型に対するのと同じものです（<xref linkend="datatype-oid"/>参照）。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_has_role</primary>
        </indexterm>
        <function>pg_has_role</function> (
          <optional> <parameter>user</parameter> <type>name</type> or <type>oid</type>, </optional>
          <parameter>role</parameter> <type>text</type> or <type>oid</type>,
          <parameter>privilege</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Does user have privilege for role?
        Allowable privilege types are
        <literal>MEMBER</literal>, <literal>USAGE</literal>,
        and <literal>SET</literal>.
        <literal>MEMBER</literal> denotes direct or indirect membership in
        the role without regard to what specific privileges may be conferred.
        <literal>USAGE</literal> denotes whether the privileges of the role
        are immediately available without doing <command>SET ROLE</command>,
        while <literal>SET</literal> denotes whether it is possible to change
        to the role using the <literal>SET ROLE</literal> command.
        This function does not allow the special case of
        setting <parameter>user</parameter> to <literal>public</literal>,
        because the PUBLIC pseudo-role can never be a member of real roles.
-->
ユーザにロールに対する権限があるか？
可能な権限型は<literal>MEMBER</literal>、<literal>USAGE</literal>と<literal>SET</literal>です。
特定の権限が与えられているかどうかにかかわらず、<literal>MEMBER</literal>は直接あるいは間接的にそのロールのメンバであることを示します。（すなわち、<command>SET ROLE</command>を実行する権限です）
<literal>SET</literal>が<literal>SET ROLE</literal>コマンドを用いてロールに変更を加えることができるかどうかを示すのに対し、<literal>USAGE</literal>は、そのロールの権限が<command>SET ROLE</command>を実行することなく、直ちに利用可能であることを示します。
この関数は<parameter>user</parameter>を<literal>public</literal>に設定する特別なケースを許可しません。
PUBLIC仮想ロールは実在するロールのメンバには決してなれないからです。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>row_security_active</primary>
        </indexterm>
        <function>row_security_active</function> (
          <parameter>table</parameter> <type>text</type> or <type>oid</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Is row-level security active for the specified table in the context of
        the current user and current environment?
-->
現在のユーザと環境のコンテキストにおいて、指定のテーブルに対して行単位セキュリティは有効か？
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
<!--
   <xref linkend="functions-aclitem-op-table"/> shows the operators
   available for the <type>aclitem</type> type, which is the catalog
   representation of access privileges.  See <xref linkend="ddl-priv"/>
   for information about how to read access privilege values.
-->
アクセス権限のカタログ表現である<type>aclitem</type>型で利用可能な演算子を<xref linkend="functions-aclitem-op-table"/>に示します。
アクセス権限値を解釈する方法に関する情報は<xref linkend="ddl-priv"/>をご覧ください。
  </para>

    <table id="functions-aclitem-op-table">
<!--
     <title><type>aclitem</type> Operators</title>
-->
     <title><type>aclitem</type>演算子</title>
     <tgroup cols="1">
      <thead>
       <row>
        <entry role="func_table_entry"><para role="func_signature">
<!--
         Operator
-->
演算子
        </para>
        <para>
<!--
         Description
-->
説明
        </para>
        <para>
<!--
         Example(s)
-->
例
        </para></entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry role="func_table_entry"><para role="func_signature">
         <indexterm>
          <primary>aclitemeq</primary>
         </indexterm>
         <type>aclitem</type> <literal>=</literal> <type>aclitem</type>
         <returnvalue>boolean</returnvalue>
        </para>
        <para>
<!--
         Are <type>aclitem</type>s equal?  (Notice that
         type <type>aclitem</type> lacks the usual set of comparison
         operators; it has only equality.  In turn, <type>aclitem</type>
         arrays can only be compared for equality.)
-->
<type>aclitem</type>は等しいか？
（<type>aclitem</type>型には通常の比較演算子の組がありません。等値だけです。
同じように<type>aclitem</type>の配列は等値比較だけが可能です。）
        </para>
        <para>
         <literal>'calvin=r*w/hobbes'::aclitem = 'calvin=r*w*/hobbes'::aclitem</literal>
         <returnvalue>f</returnvalue>
        </para></entry>
       </row>

       <row>
        <entry role="func_table_entry"><para role="func_signature">
         <indexterm>
          <primary>aclcontains</primary>
         </indexterm>
         <type>aclitem[]</type> <literal>@&gt;</literal> <type>aclitem</type>
         <returnvalue>boolean</returnvalue>
        </para>
        <para>
<!--
         Does array contain the specified privileges?  (This is true if there
         is an array entry that matches the <type>aclitem</type>'s grantee and
         grantor, and has at least the specified set of privileges.)
-->
配列は指定した権限を含んでいるか？
（これは<type>aclitem</type>を与えられる側と与える側にマッチする配列のエントリを含んでいて、少なくとも指定した権限の集合を持つ場合に真となります。）
        </para>
        <para>
         <literal>'{calvin=r*w/hobbes,hobbes=r*w*/postgres}'::aclitem[] @&gt; 'calvin=r*/hobbes'::aclitem</literal>
         <returnvalue>t</returnvalue>
        </para></entry>
       </row>

       <row>
        <entry role="func_table_entry"><para role="func_signature">
         <type>aclitem[]</type> <literal>~</literal> <type>aclitem</type>
         <returnvalue>boolean</returnvalue>
        </para>
        <para>
<!--
         This is a deprecated alias for <literal>@&gt;</literal>.
-->
これは<literal>@&gt;</literal>の廃止予定の別名です。
        </para>
        <para>
         <literal>'{calvin=r*w/hobbes,hobbes=r*w*/postgres}'::aclitem[] ~ 'calvin=r*/hobbes'::aclitem</literal>
         <returnvalue>t</returnvalue>
        </para></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
<!--
    <xref linkend="functions-aclitem-fn-table"/> shows some additional
    functions to manage the <type>aclitem</type> type.
-->
<xref linkend="functions-aclitem-fn-table"/>に<type>aclitem</type>型を管理する追加の関数を示します。
   </para>

   <table id="functions-aclitem-fn-table">
<!--
    <title><type>aclitem</type> Functions</title>
-->
    <title><type>aclitem</type>関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>acldefault</primary>
        </indexterm>
        <function>acldefault</function> (
          <parameter>type</parameter> <type>"char"</type>,
          <parameter>ownerId</parameter> <type>oid</type> )
        <returnvalue>aclitem[]</returnvalue>
       </para>
       <para>
<!--
        Constructs an <type>aclitem</type> array holding the default access
        privileges for an object of type <parameter>type</parameter> belonging
        to the role with OID <parameter>ownerId</parameter>.  This represents
        the access privileges that will be assumed when an object's ACL entry
        is null.  (The default access privileges are described in
        <xref linkend="ddl-priv"/>.)
        The <parameter>type</parameter> parameter must be one of
        'c' for <literal>COLUMN</literal>,
        'r' for <literal>TABLE</literal> and table-like objects,
        's' for <literal>SEQUENCE</literal>,
        'd' for <literal>DATABASE</literal>,
        'f' for <literal>FUNCTION</literal> or <literal>PROCEDURE</literal>,
        'l' for <literal>LANGUAGE</literal>,
        'L' for <literal>LARGE OBJECT</literal>,
        'n' for <literal>SCHEMA</literal>,
        'p' for <literal>PARAMETER</literal>,
        't' for <literal>TABLESPACE</literal>,
        'F' for <literal>FOREIGN DATA WRAPPER</literal>,
        'S' for <literal>FOREIGN SERVER</literal>,
        or
        'T' for <literal>TYPE</literal> or <literal>DOMAIN</literal>.
-->
<parameter>ownerId</parameter>のOIDを持つロールに所属する<parameter>type</parameter>型のオブジェクトのデフォルト権限を持つ<type>aclitem</type>配列を作成します。
これはオブジェクトのACL権限がnullであるときに想定されるアクセス権限を示します。
（デフォルトアクセス権限については<xref linkend="ddl-priv"/>で述べています。）
<parameter>type</parameter>パラメータは以下のどれかでなければなりません。
'c'で<literal>COLUMN</literal>、'r'で<literal>TABLE</literal>およびテーブルに見えるオブジェクト、's'で<literal>SEQUENCE</literal>、'd'で<literal>DATABASE</literal>、'f'で<literal>FUNCTION</literal>あるいは<literal>PROCEDURE</literal>、'l'で<literal>LANGUAGE</literal>、'L'で<literal>LARGE OBJECT</literal>、'n'で<literal>SCHEMA</literal>、'p'で<literal>PARAMETER</literal>、't'で<literal>TABLESPACE</literal>、'F'で<literal>FOREIGN DATA WRAPPER</literal>、'S'で<literal>FOREIGN SERVER</literal>、'T'で<literal>TYPE</literal>あるいは<literal>DOMAIN</literal>を表します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>aclexplode</primary>
        </indexterm>
        <function>aclexplode</function> ( <type>aclitem[]</type> )
        <returnvalue>setof record</returnvalue>
        ( <parameter>grantor</parameter> <type>oid</type>,
        <parameter>grantee</parameter> <type>oid</type>,
        <parameter>privilege_type</parameter> <type>text</type>,
        <parameter>is_grantable</parameter> <type>boolean</type> )
       </para>
       <para>
<!--
        Returns the <type>aclitem</type> array as a set of rows.
        If the grantee is the pseudo-role PUBLIC, it is represented by zero in
        the <parameter>grantee</parameter> column.  Each granted privilege is
        represented as <literal>SELECT</literal>, <literal>INSERT</literal>,
        etc (see <xref linkend="privilege-abbrevs-table"/> for a full list).
        Note that each privilege is broken out as a separate row, so
        only one keyword appears in the <parameter>privilege_type</parameter>
        column.
-->
行の集合として<type>aclitem</type>配列を返します。
アクセス権を与えられる側が仮想ロールPUBLICなら、<parameter>grantee</parameter>列で<parameter>grantee</parameter>はゼロで表現されます。
各々の与えられた権限は<literal>SELECT</literal>、<literal>INSERT</literal>などで表現されます。(完全なリストは<xref linkend="privilege-abbrevs-table"/>を参照してください）。
各々の権限は別々の行に分解され、<parameter>privilege_type</parameter>列には一つのキーワードだけが現れることに注意してください。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>makeaclitem</primary>
        </indexterm>
        <function>makeaclitem</function> (
          <parameter>grantee</parameter> <type>oid</type>,
          <parameter>grantor</parameter> <type>oid</type>,
          <parameter>privileges</parameter> <type>text</type>,
          <parameter>is_grantable</parameter> <type>boolean</type> )
        <returnvalue>aclitem</returnvalue>
       </para>
       <para>
<!--
        Constructs an <type>aclitem</type> with the given properties.
        <parameter>privileges</parameter> is a comma-separated list of
        privilege names such as <literal>SELECT</literal>,
        <literal>INSERT</literal>, etc, all of which are set in the
        result.  (Case of the privilege string is not significant, and
        extra whitespace is allowed between but not within privilege
        names.)
-->
与えられた属性で<type>aclitem</type>を作成します。
<parameter>privileges</parameter>は、結果中に設定される<literal>SELECT</literal>、<literal>INSERT</literal>などのカンマで区切られた権限名のリストです。
（権限文字列の大文字小文字の区別は無視されます。権限文字の間に余分な空白が合っても構いませんが、権限文字列中に空白があってはいけません。）
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  </sect2>

  <sect2 id="functions-info-schema">
<!--
   <title>Schema Visibility Inquiry Functions</title>
-->
   <title>スキーマ可視性問い合わせ関数</title>

  <para>
<!--
   <xref linkend="functions-info-schema-table"/> shows functions that
   determine whether a certain object is <firstterm>visible</firstterm> in the
   current schema search path.
   For example, a table is said to be visible if its
   containing schema is in the search path and no table of the same
   name appears earlier in the search path.  This is equivalent to the
   statement that the table can be referenced by name without explicit
   schema qualification.  Thus, to list the names of all visible tables:
-->
<xref linkend="functions-info-schema-table"/>に、特定のオブジェクトが、現行スキーマの検索パスにおいて<firstterm>可視</firstterm>かどうかを判別する関数を示します。
例えば、あるテーブルを含むスキーマが検索パス内に存在し、検索パス内の前方に同じ名前のテーブルがない場合、そのテーブルは可視であると言います。
つまり、これは、テーブルが明示的なスキーマ修飾なしで名前によって参照可能であるということです。
ですから全ての可視テーブルの名前を列挙するには以下のようにします。
<programlisting>
SELECT relname FROM pg_class WHERE pg_table_is_visible(oid);
</programlisting>
<!--
   For functions and operators, an object in the search path is said to be
   visible if there is no object of the same name <emphasis>and argument data
   type(s)</emphasis> earlier in the path.  For operator classes and families,
   both the name and the associated index access method are considered.
-->
関数および演算子では、パスの前方に同じ名前かつ同じ<emphasis>引数のデータ型</emphasis>を持つオブジェクトが存在しなければ、検索パス内のオブジェクトは可視と言えます。
演算子クラスと（演算子）族では、名前と関連するインデックスアクセスメソッドが考慮されます。
  </para>

   <indexterm>
    <primary>search path</primary>
    <secondary>object visibility</secondary>
   </indexterm>
   <indexterm>
    <primary>検索パス</primary>
    <secondary>オブジェクトの可視性</secondary>
   </indexterm>

   <table id="functions-info-schema-table">
<!--
    <title>Schema Visibility Inquiry Functions</title>
-->
    <title>スキーマ可視性照会関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_collation_is_visible</primary>
        </indexterm>
        <function>pg_collation_is_visible</function> ( <parameter>collation</parameter> <type>oid</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Is collation visible in search path?
-->
照合順序が検索パスにおいて可視か？
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_conversion_is_visible</primary>
        </indexterm>
        <function>pg_conversion_is_visible</function> ( <parameter>conversion</parameter> <type>oid</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Is conversion visible in search path?
-->
変換が検索パスにおいて可視か？
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_function_is_visible</primary>
        </indexterm>
        <function>pg_function_is_visible</function> ( <parameter>function</parameter> <type>oid</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Is function visible in search path?
        (This also works for procedures and aggregates.)
-->
関数が検索パスにおいて可視か？
（これはプロシージャと集約にも使えます。）
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_opclass_is_visible</primary>
        </indexterm>
        <function>pg_opclass_is_visible</function> ( <parameter>opclass</parameter> <type>oid</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Is operator class visible in search path?
-->
演算子クラスが検索パスにおいて可視か？
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_operator_is_visible</primary>
        </indexterm>
        <function>pg_operator_is_visible</function> ( <parameter>operator</parameter> <type>oid</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Is operator visible in search path?
-->
演算子が検索パスにおいて可視か？
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_opfamily_is_visible</primary>
        </indexterm>
        <function>pg_opfamily_is_visible</function> ( <parameter>opclass</parameter> <type>oid</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Is operator family visible in search path?
-->
演算子族が検索パスにおいて可視か？
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_statistics_obj_is_visible</primary>
        </indexterm>
        <function>pg_statistics_obj_is_visible</function> ( <parameter>stat</parameter> <type>oid</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Is statistics object visible in search path?
-->
統計情報オブジェクトが検索パスにおいて可視か？
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_table_is_visible</primary>
        </indexterm>
        <function>pg_table_is_visible</function> ( <parameter>table</parameter> <type>oid</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Is table visible in search path?
        (This works for all types of relations, including views, materialized
        views, indexes, sequences and foreign tables.)
-->
テーブルが検索パスにおいて可視か？
（これはビュー、マテリアライズドビュー、インデックス、シーケンス、外部テーブルを含むべての形式のリレーションで使用できます。）
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_ts_config_is_visible</primary>
        </indexterm>
        <function>pg_ts_config_is_visible</function> ( <parameter>config</parameter> <type>oid</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Is text search configuration visible in search path?
-->
テキスト検索設定が検索パスにおいて可視か？
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_ts_dict_is_visible</primary>
        </indexterm>
        <function>pg_ts_dict_is_visible</function> ( <parameter>dict</parameter> <type>oid</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Is text search dictionary visible in search path?
-->
テキスト検索辞書が検索パスにおいて可視か？
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_ts_parser_is_visible</primary>
        </indexterm>
        <function>pg_ts_parser_is_visible</function> ( <parameter>parser</parameter> <type>oid</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Is text search parser visible in search path?
-->
テキスト検索パーサが検索パスにおいて可視か？
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_ts_template_is_visible</primary>
        </indexterm>
        <function>pg_ts_template_is_visible</function> ( <parameter>template</parameter> <type>oid</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Is text search template visible in search path?
-->
テキスト検索テンプレートが検索パスにおいて可視か？
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_type_is_visible</primary>
        </indexterm>
        <function>pg_type_is_visible</function> ( <parameter>type</parameter> <type>oid</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Is type (or domain) visible in search path?
-->
型（またはドメイン）が検索パスにおいて可視か？
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    All these functions require object OIDs to identify the object to be
    checked.  If you want to test an object by name, it is convenient to use
    the OID alias types (<type>regclass</type>, <type>regtype</type>,
    <type>regprocedure</type>, <type>regoperator</type>, <type>regconfig</type>,
    or <type>regdictionary</type>),
    for example:
-->
これらの関数は全て、検査するオブジェクトを識別するために、オブジェクトのOIDを必要とします。
オブジェクトを名前でテストする場合、OID別名型（<type>regclass</type>、<type>regtype</type>、<type>regprocedure</type>、<type>regoperator</type>、<type>regconfig</type>、または<type>regdictionary</type>）を使用すると便利です。
例えば、以下のようにします。
<programlisting>
SELECT pg_type_is_visible('myschema.widget'::regtype);
</programlisting>
<!--
    Note that it would not make much sense to test a non-schema-qualified
    type name in this way &mdash; if the name can be recognized at all, it must be visible.
-->
ただし、このようなやり方でスキーマ修飾されていない型名をテストしても、あまり意味がないことに注意してください。名前が認識されれば、それは必ず可視ということになります。
   </para>

  </sect2>

  <sect2 id="functions-info-catalog">
<!--
   <title>System Catalog Information Functions</title>
-->
   <title>システムカタログ情報関数</title>

  <para>
<!--
   <xref linkend="functions-info-catalog-table"/> lists functions that
   extract information from the system catalogs.
-->
<xref linkend="functions-info-catalog-table"/>に、システムカタログから情報を抽出する関数を列挙します。
  </para>

   <table id="functions-info-catalog-table">
<!--
    <title>System Catalog Information Functions</title>
-->
    <title>システムカタログ情報関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>format_type</primary>
        </indexterm>
        <function>format_type</function> ( <parameter>type</parameter> <type>oid</type>, <parameter>typemod</parameter> <type>integer</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Returns the SQL name for a data type that is identified by its type
        OID and possibly a type modifier.  Pass NULL for the type modifier if
        no specific modifier is known.
-->
型OIDと型修飾子で決まるデータ型のSQL名を返します。
型修飾子が不明な場合はNULLを型修飾子に渡してください。
       </para></entry>
      </row>

      <row>
       <entry id="pg-char-to-encoding" role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_char_to_encoding</primary>
        </indexterm>
        <function>pg_char_to_encoding</function> ( <parameter>encoding</parameter> <type>name</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Converts the supplied encoding name into an integer representing the
        internal identifier used in some system catalog tables.
        Returns <literal>-1</literal> if an unknown encoding name is provided.
-->
指定されたエンコード名を、一部のシステムカタログテーブルで使用されている内部識別子を表す整数に変換します。
不明なエンコード名が指定された場合は<literal>-1</literal>を返します。
       </para></entry>
      </row>

      <row>
       <entry id="pg-encoding-to-char" role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_encoding_to_char</primary>
        </indexterm>
        <function>pg_encoding_to_char</function> ( <parameter>encoding</parameter> <type>integer</type> )
        <returnvalue>name</returnvalue>
       </para>
       <para>
<!--
        Converts the integer used as the internal identifier of an encoding in some
        system catalog tables into a human-readable string.
        Returns an empty string if an invalid encoding number is provided.
-->
システムカタログテーブル内のエンコーディングの内部識別子として使用されている整数を、読み取り可能な文字列に変換します。
無効なエンコーディング番号が指定されている場合は、空の文字列を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_get_catalog_foreign_keys</primary>
        </indexterm>
        <function>pg_get_catalog_foreign_keys</function> ()
        <returnvalue>setof record</returnvalue>
        ( <parameter>fktable</parameter> <type>regclass</type>,
          <parameter>fkcols</parameter> <type>text[]</type>,
          <parameter>pktable</parameter> <type>regclass</type>,
          <parameter>pkcols</parameter> <type>text[]</type>,
          <parameter>is_array</parameter> <type>boolean</type>,
          <parameter>is_opt</parameter> <type>boolean</type> )
       </para>
       <para>
<!--
        Returns a set of records describing the foreign key relationships
        that exist within the <productname>PostgreSQL</productname> system
        catalogs.
        The <parameter>fktable</parameter> column contains the name of the
        referencing catalog, and the <parameter>fkcols</parameter> column
        contains the name(s) of the referencing column(s).  Similarly,
        the <parameter>pktable</parameter> column contains the name of the
        referenced catalog, and the <parameter>pkcols</parameter> column
        contains the name(s) of the referenced column(s).
        If <parameter>is_array</parameter> is true, the last referencing
        column is an array, each of whose elements should match some entry
        in the referenced catalog.
        If <parameter>is_opt</parameter> is true, the referencing column(s)
        are allowed to contain zeroes instead of a valid reference.
-->
<productname>PostgreSQL</productname>システムカタログ中に存在する外部キー関係を記述するレコードの集合を返します。
<parameter>fktable</parameter>列は参照するカタログの名前を示し、<parameter>fkcols</parameter>列は参照する列の名前を示します。
同様に、<parameter>pktable</parameter>は参照されるカタログの名前を示し、<parameter>pkcols</parameter>は参照される列の名前を示します。
<parameter>is_array</parameter>が真なら、最後の参照列は配列で、各要素は参照カタログにマッチします。
<parameter>is_opt</parameter>が真なら、参照される列は有効な参照の代わりにゼロを含んでも構いません。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_get_constraintdef</primary>
        </indexterm>
        <function>pg_get_constraintdef</function> ( <parameter>constraint</parameter> <type>oid</type> <optional>, <parameter>pretty</parameter> <type>boolean</type> </optional> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Reconstructs the creating command for a constraint.
        (This is a decompiled reconstruction, not the original text
        of the command.)
-->
制約を作成したコマンドを再構築します。
（これは逆コンパイルで構成したもので、元のコマンドのテキストではありません。）
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_get_expr</primary>
        </indexterm>
        <function>pg_get_expr</function> ( <parameter>expr</parameter> <type>pg_node_tree</type>, <parameter>relation</parameter> <type>oid</type> <optional>, <parameter>pretty</parameter> <type>boolean</type> </optional> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Decompiles the internal form of an expression stored in the system
        catalogs, such as the default value for a column.  If the expression
        might contain Vars, specify the OID of the relation they refer to as
        the second parameter; if no Vars are expected, passing zero is
        sufficient.
-->
列のデフォルト値のような、システムカタログに格納された内部表現式を逆コンパイルします。
式に変数が含まれている場合は2番目の引数として参照されているリレーションのOIDを指定してください。変数が含まれていない場合は、ゼロを渡しておけば十分です。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_get_functiondef</primary>
        </indexterm>
        <function>pg_get_functiondef</function> ( <parameter>func</parameter> <type>oid</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Reconstructs the creating command for a function or procedure.
        (This is a decompiled reconstruction, not the original text
        of the command.)
        The result is a complete <command>CREATE OR REPLACE FUNCTION</command>
        or <command>CREATE OR REPLACE PROCEDURE</command> statement.
-->
関数あるいはプロシージャの作成コマンドを再構築します。
（これは逆コンパイルによる再構築で、元のコマンドのテキストではありません。）
結果は完全な<command>CREATE OR REPLACE FUNCTION</command>あるいは<command>CREATE OR REPLACE PROCEDURE</command>文です。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_get_function_arguments</primary>
        </indexterm>
        <function>pg_get_function_arguments</function> ( <parameter>func</parameter> <type>oid</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Reconstructs the argument list of a function or procedure, in the form
        it would need to appear in within <command>CREATE FUNCTION</command>
        (including default values).
-->
<command>CREATE FUNCTION</command>中に現れる形で関数あるいはプロシージャの引数のリストを再構築します。
（デフォルト値を含みます。）
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_get_function_identity_arguments</primary>
        </indexterm>
        <function>pg_get_function_identity_arguments</function> ( <parameter>func</parameter> <type>oid</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Reconstructs the argument list necessary to identify a function or
        procedure, in the form it would need to appear in within commands such
        as <command>ALTER FUNCTION</command>.  This form omits default values.
-->
<command>ALTER FUNCTION</command>のようなコマンド中に現れる形で関数あるいはプロシージャの引数のリストを再構築します。
この形式ではデフォルト値は省略します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_get_function_result</primary>
        </indexterm>
        <function>pg_get_function_result</function> ( <parameter>func</parameter> <type>oid</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Reconstructs the <literal>RETURNS</literal> clause of a function, in
        the form it would need to appear in within <command>CREATE
        FUNCTION</command>.  Returns <literal>NULL</literal> for a procedure.
-->
<command>CREATE FUNCTION</command>中に現れる形で関数の<literal>RETURNS</literal>句を再構築します。
プロシージャに対して<literal>NULL</literal>を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_get_indexdef</primary>
        </indexterm>
        <function>pg_get_indexdef</function> ( <parameter>index</parameter> <type>oid</type> <optional>, <parameter>column</parameter> <type>integer</type>, <parameter>pretty</parameter> <type>boolean</type> </optional> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Reconstructs the creating command for an index.
        (This is a decompiled reconstruction, not the original text
        of the command.)  If <parameter>column</parameter> is supplied and is
        not zero, only the definition of that column is reconstructed.
-->
インデックスを作成するコマンドを再構築します。
（これは逆コンパイルによる再構築で、元のコマンドのテキストではありません。）
<parameter>column</parameter>が渡されていてゼロでないなら、その列の定義だけが再構築されます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_get_keywords</primary>
        </indexterm>
        <function>pg_get_keywords</function> ()
        <returnvalue>setof record</returnvalue>
        ( <parameter>word</parameter> <type>text</type>,
        <parameter>catcode</parameter> <type>"char"</type>,
        <parameter>barelabel</parameter> <type>boolean</type>,
        <parameter>catdesc</parameter> <type>text</type>,
        <parameter>baredesc</parameter> <type>text</type> )
       </para>
       <para>
<!--
        Returns a set of records describing the SQL keywords recognized by the
        server.  The <parameter>word</parameter> column contains the
        keyword.  The <parameter>catcode</parameter> column contains a
        category code: <literal>U</literal> for an unreserved
        keyword, <literal>C</literal> for a keyword that can be a column
        name, <literal>T</literal> for a keyword that can be a type or
        function name, or <literal>R</literal> for a fully reserved keyword.
        The <parameter>barelabel</parameter> column
        contains <literal>true</literal> if the keyword can be used as
        a <quote>bare</quote> column label in <command>SELECT</command> lists,
        or <literal>false</literal> if it can only be used
        after <literal>AS</literal>.
        The <parameter>catdesc</parameter> column contains a
        possibly-localized string describing the keyword's category.
        The <parameter>baredesc</parameter> column contains a
        possibly-localized string describing the keyword's column label status.
-->
サーバが認識するSQLキーワードを記述するレコードの集合を返します。
<parameter>word</parameter>列にはキーワードが含まれます。
<parameter>catcode</parameter>列にはカテゴリコードが含まれます。<literal>U</literal>は非予約キーワード、<literal>C</literal>は列名になり得るキーワード、<literal>T</literal>は型あるいは関数名になり得るキーワード、<literal>R</literal>は完全な予約キーワードです。
<parameter>barelabel</parameter>列は、キーワードが<quote>bare</quote>列ラベルとして<command>SELECT</command>リスト中で使えるなら<literal>true</literal>で、<literal>AS</literal>の後にのみ使えるのなら<literal>false</literal>です。
<parameter>catdesc</parameter>列にはキーワードカテゴリを記述する、ローカライズ化されることもある文字列が含まれます。
<parameter>baredesc</parameter>列にはキーワードの列ラベル状態を記述する、ローカライズ化されることもある文字列が含まれます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_get_partkeydef</primary>
        </indexterm>
        <function>pg_get_partkeydef</function> ( <parameter>table</parameter> <type>oid</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Reconstructs the definition of a partitioned table's partition
        key, in the form it would have in the <literal>PARTITION
        BY</literal> clause of <command>CREATE TABLE</command>.
        (This is a decompiled reconstruction, not the original text
        of the command.)
-->
パーティション化テーブルのパーティションキーの定義を、<command>CREATE TABLE</command>の<literal>PARTITION BY</literal>句の形式で再構成します。(これは逆コンパイルされた再構成であり、コマンドのオリジナルテキストではありません。
)
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_get_ruledef</primary>
        </indexterm>
        <function>pg_get_ruledef</function> ( <parameter>rule</parameter> <type>oid</type> <optional>, <parameter>pretty</parameter> <type>boolean</type> </optional> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Reconstructs the creating command for a rule.
        (This is a decompiled reconstruction, not the original text
        of the command.)
-->
ルールを作成するコマンドを再構築します。
（これは逆コンパイルによる再構築で、元のコマンドのテキストではありません。）
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_get_serial_sequence</primary>
        </indexterm>
        <function>pg_get_serial_sequence</function> ( <parameter>table</parameter> <type>text</type>, <parameter>column</parameter> <type>text</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Returns the name of the sequence associated with a column,
        or NULL if no sequence is associated with the column.
        If the column is an identity column, the associated sequence is the
        sequence internally created for that column.
        For columns created using one of the serial types
        (<type>serial</type>, <type>smallserial</type>, <type>bigserial</type>),
        it is the sequence created for that serial column definition.
        In the latter case, the association can be modified or removed
        with <command>ALTER SEQUENCE OWNED BY</command>.
        (This function probably should have been
        called <function>pg_get_owned_sequence</function>; its current name
        reflects the fact that it has historically been used with serial-type
        columns.)  The first parameter is a table name with optional
        schema, and the second parameter is a column name.  Because the first
        parameter potentially contains both schema and table names, it is
        parsed per usual SQL rules, meaning it is lower-cased by default.
        The second parameter, being just a column name, is treated literally
        and so has its case preserved.  The result is suitably formatted
        for passing to the sequence functions (see
        <xref linkend="functions-sequence"/>).
-->
列に関連するシーケンスの名前を返します。
列に関連するシーケンスが存在しなければ、NULLを返します。
列が識別列の場合、関連するシーケンスは識別列に対して内部的に作成されたシーケンスとなります。
SERIAL型（<type>serial</type>、<type>smallserial</type>、<type>bigserial</type>）の一つを使って作られた列については、そのSERIAL列の定義に対して作られたシーケンスとなります。
後者の場合、この関連付けは<command>ALTER SEQUENCE OWNED BY</command>で修正または削除することができます。
（この関数はおそらく<function>pg_get_owned_sequence</function>と呼ばれるべきだったのでしょうが、現在の名前はそれが主に<type>serial</type>列または<type>bigserial</type>列と一緒に使われていたという事実によります。）
最初の入力パラメータはテーブル名で、スキーマを付けることもできます。
２番目のパラメータは列名です。
最初のパラメータは普通はスキーマとテーブルですので、二重引用符付の識別子としては解釈されません。
つまり、デフォルトで小文字に変換されます。
一方２番目のパラメータは単なる列名であり、二重引用符付として解釈され、その大文字小文字は保持されます。
この関数は、シーケンス関数（<xref linkend="functions-sequence"/>を参照）に渡すことができるよう適切な書式で値を返します。
       </para>
       <para>
<!--
        A typical use is in reading the current value of the sequence for an
        identity or serial column, for example:
-->
典型的な使用法は識別列またはSERIAL列のシーケンスの現在値を読み取ることです。例を示します。
<programlisting>
SELECT currval(pg_get_serial_sequence('sometable', 'id'));
</programlisting>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_get_statisticsobjdef</primary>
        </indexterm>
        <function>pg_get_statisticsobjdef</function> ( <parameter>statobj</parameter> <type>oid</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Reconstructs the creating command for an extended statistics object.
        (This is a decompiled reconstruction, not the original text
        of the command.)
-->
拡張統計情報オブジェクトを作成するコマンドを再構築します。
（これは逆コンパイルによる再構築で、元のコマンドのテキストではありません。）
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_get_triggerdef</primary>
        </indexterm>
<function>pg_get_triggerdef</function> ( <parameter>trigger</parameter> <type>oid</type> <optional>, <parameter>pretty</parameter> <type>boolean</type> </optional> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Reconstructs the creating command for a trigger.
        (This is a decompiled reconstruction, not the original text
        of the command.)
-->
トリガを作成するコマンドを再構築します。
（これは逆コンパイルによる再構築で、元のコマンドのテキストではありません。）
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_get_userbyid</primary>
        </indexterm>
        <function>pg_get_userbyid</function> ( <parameter>role</parameter> <type>oid</type> )
        <returnvalue>name</returnvalue>
       </para>
       <para>
<!--
        Returns a role's name given its OID.
-->
OIDで指定されるロール名を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_get_viewdef</primary>
        </indexterm>
        <function>pg_get_viewdef</function> ( <parameter>view</parameter> <type>oid</type> <optional>, <parameter>pretty</parameter> <type>boolean</type> </optional> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Reconstructs the underlying <command>SELECT</command> command for a
        view or materialized view.  (This is a decompiled reconstruction, not
        the original text of the command.)
-->
ビューあるいはマテリアライズドビューの背後にある<command>SELECT</command>コマンドを再構築します。
（これは逆コンパイルによる再構築で、元のコマンドのテキストではありません。）
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>pg_get_viewdef</function> ( <parameter>view</parameter> <type>oid</type>, <parameter>wrap_column</parameter> <type>integer</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Reconstructs the underlying <command>SELECT</command> command for a
        view or materialized view.  (This is a decompiled reconstruction, not
        the original text of the command.)  In this form of the function,
        pretty-printing is always enabled, and long lines are wrapped to try
        to keep them shorter than the specified number of columns.
-->
ビューあるいはマテリアライズドビューの背後にある<command>SELECT</command>コマンドを再構築します。
（これは逆コンパイルによる再構築で、元のコマンドのテキストではありません。）
この関数形式では整形するオプションは常に有効で、列数よりも短く保つように長い行は折り返されます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>pg_get_viewdef</function> ( <parameter>view</parameter> <type>text</type> <optional>, <parameter>pretty</parameter> <type>boolean</type> </optional> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Reconstructs the underlying <command>SELECT</command> command for a
        view or materialized view, working from a textual name for the view
        rather than its OID.  (This is deprecated; use the OID variant
        instead.)
-->
ビューあるいはマテリアライズドビューの背後にある<command>SELECT</command>コマンドを再構築します。ビューのOIDではなく、テキスト形式の名前を使います。
（これは廃止予定です。OIDのバージョンを使ってください。）
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_index_column_has_property</primary>
        </indexterm>
        <function>pg_index_column_has_property</function> ( <parameter>index</parameter> <type>regclass</type>, <parameter>column</parameter> <type>integer</type>, <parameter>property</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Tests whether an index column has the named property.
        Common index column properties are listed in
        <xref linkend="functions-info-index-column-props"/>.
        (Note that extension access methods can define additional property
        names for their indexes.)
        <literal>NULL</literal> is returned if the property name is not known
        or does not apply to the particular object, or if the OID or column
        number does not identify a valid object.
-->
インデックス列が名前付きのプロパティを持つかどうかを検査します。
共通のインデックス列プロパティは<xref linkend="functions-info-index-column-props"/>に列挙されています。
（拡張アクセスメソッドはインデックスに対して追加のプロパティ名を持てることに注意してください。）
プロパティ名が不明あるいは特定のオブジェクトに適用されない場合、OIDあるいは列番号が有効なオブジェクトを特定しない場合は<literal>NULL</literal>が返ります。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_index_has_property</primary>
        </indexterm>
        <function>pg_index_has_property</function> ( <parameter>index</parameter> <type>regclass</type>, <parameter>property</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Tests whether an index has the named property.
        Common index properties are listed in
        <xref linkend="functions-info-index-props"/>.
        (Note that extension access methods can define additional property
        names for their indexes.)
        <literal>NULL</literal> is returned if the property name is not known
        or does not apply to the particular object, or if the OID does not
        identify a valid object.
-->
インデックスが名前付きのプロパティを持つかどうかを検査します。
共通のインデックスプロパティは<xref linkend="functions-info-index-props"/>に列挙されています。
（拡張アクセスメソッドはインデックスに対して追加のプロパティ名を持てることに注意してください。）
プロパティ名が不明あるいは特定のオブジェクトに適用されない場合、OIDが有効なオブジェクトを特定しない場合は<literal>NULL</literal>が返ります。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_indexam_has_property</primary>
        </indexterm>
        <function>pg_indexam_has_property</function> ( <parameter>am</parameter> <type>oid</type>, <parameter>property</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Tests whether an index access method has the named property.
        Access method properties are listed in
        <xref linkend="functions-info-indexam-props"/>.
        <literal>NULL</literal> is returned if the property name is not known
        or does not apply to the particular object, or if the OID does not
        identify a valid object.
-->
インデックスアクセスメソッドが名前付きのプロパティを持つかどうかを検査します。
アクセスメソッドプロパティは<xref linkend="functions-info-indexam-props"/>に列挙されています。
プロパティ名が不明あるいは特定のオブジェクトに適用されない場合、OIDが有効なオブジェクトを特定しない場合は<literal>NULL</literal>が返ります。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_options_to_table</primary>
        </indexterm>
        <function>pg_options_to_table</function> ( <parameter>options_array</parameter> <type>text[]</type> )
        <returnvalue>setof record</returnvalue>
        ( <parameter>option_name</parameter> <type>text</type>,
        <parameter>option_value</parameter> <type>text</type> )
       </para>
       <para>
<!--
        Returns the set of storage options represented by a value from
        <structname>pg_class</structname>.<structfield>reloptions</structfield> or
        <structname>pg_attribute</structname>.<structfield>attoptions</structfield>.
-->
<structname>pg_class</structname>.<structfield>reloptions</structfield>あるいは<structname>pg_attribute</structname>.<structfield>attoptions</structfield>の値で表現されるストレージオプションの集合を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_settings_get_flags</primary>
        </indexterm>
        <function>pg_settings_get_flags</function> ( <parameter>guc</parameter> <type>text</type> )
        <returnvalue>text[]</returnvalue>
       </para>
       <para>
<!--
        Returns an array of the flags associated with the given GUC, or
        <literal>NULL</literal> if it does not exist. The result is
        an empty array if the GUC exists but there are no flags to show.
        Only the most useful flags listed in
        <xref linkend="functions-pg-settings-flags"/> are exposed.
-->
指定されたGUCに関連付けられたフラグの配列を返します。
存在しない場合は<literal>NULL</literal>を返します。
GUCが存在しても表示するフラグがない場合、結果は空の配列になります。
<xref linkend="functions-pg-settings-flags"/>にリストされている最も有用なフラグのみが公開されます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_tablespace_databases</primary>
        </indexterm>
        <function>pg_tablespace_databases</function> ( <parameter>tablespace</parameter> <type>oid</type> )
        <returnvalue>setof oid</returnvalue>
       </para>
       <para>
<!--
        Returns the set of OIDs of databases that have objects stored in the
        specified tablespace.  If this function returns any rows, the
        tablespace is not empty and cannot be dropped.  To identify the specific
        objects populating the tablespace, you will need to connect to the
        database(s) identified by <function>pg_tablespace_databases</function>
        and query their <structname>pg_class</structname> catalogs.
-->
指定したテーブル空間に格納されるオブジェクトを持つデータベースのOIDの集合を返します。
この関数が何らかの行を返すならば、そのテーブル空間は空ではなく、削除できません。
特定のオブジェクトがそのテーブル空間にあるかどうかを確認するには、<function>pg_tablespace_databases</function>で識別されるデータベースに接続して<structname>pg_class</structname>カタログを検索する必要があります。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_tablespace_location</primary>
        </indexterm>
        <function>pg_tablespace_location</function> ( <parameter>tablespace</parameter> <type>oid</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Returns the file system path that this tablespace is located in.
-->
テーブル空間が配置されているファイルシステムのパスを返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_typeof</primary>
        </indexterm>
        <function>pg_typeof</function> ( <type>"any"</type> )
        <returnvalue>regtype</returnvalue>
       </para>
       <para>
<!--
        Returns the OID of the data type of the value that is passed to it.
        This can be helpful for troubleshooting or dynamically constructing
        SQL queries.  The function is declared as
        returning <type>regtype</type>, which is an OID alias type (see
        <xref linkend="datatype-oid"/>); this means that it is the same as an
        OID for comparison purposes but displays as a type name.
-->
渡された値のデータ型のOIDを返します。
これはトラブル解決作業、または動的にSQL問い合わせを生成するのに便利です。
この関数は、OIDの別名型である<type>regtype</type>を返すものとして宣言されます（<xref linkend="datatype-oid"/>を参照）。つまり、比較目的のOIDと同一ですが、型名として表示されます。
       </para>
       <para>
<!--
        For example:
-->
以下に例をあげます。
<programlisting>
SELECT pg_typeof(33);
 pg_typeof
-----------
 integer

SELECT typlen FROM pg_type WHERE oid = pg_typeof(33);
 typlen
--------
      4
</programlisting>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>COLLATION FOR</primary>
        </indexterm>
        <function>COLLATION FOR</function> ( <type>"any"</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Returns the name of the collation of the value that is passed to it.
        The value is quoted and schema-qualified if necessary.  If no
        collation was derived for the argument expression,
        then <literal>NULL</literal> is returned.  If the argument is not of a
        collatable data type, then an error is raised.
-->
渡された値の照合順序の名前を返します。
値は必要ならば引用符付きでスキーマ修飾されます。
引数式から照合順序が生じなければ、<literal>NULL</literal>が返ります。
引数が照合可能なデータ型でなければ、エラーが生じます。
       </para>
       <para>
<!--
        For example:
-->
例を挙げます。
<programlisting>
SELECT collation for (description) FROM pg_description LIMIT 1;
 pg_collation_for
------------------
 "default"

SELECT collation for ('foo' COLLATE "de_DE");
 pg_collation_for
------------------
 "de_DE"
</programlisting>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>to_regclass</primary>
        </indexterm>
        <function>to_regclass</function> ( <type>text</type> )
        <returnvalue>regclass</returnvalue>
       </para>
       <para>
<!--
        Translates a textual relation name to its OID.  A similar result is
        obtained by casting the string to type <type>regclass</type> (see
        <xref linkend="datatype-oid"/>); however, this function will return
        <literal>NULL</literal> rather than throwing an error if the name is
        not found.
-->
テキスト形式のリレーション名をOIDに変換します。
同様の結果はその文字列を<type>regclass</type>型にキャストすることによっても得られます。（<xref linkend="datatype-oid"/>参照。）
しかしこの関数は名前が見つからない場合にエラーを起こすのではなく、<literal>NULL</literal>を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>to_regcollation</primary>
        </indexterm>
        <function>to_regcollation</function> ( <type>text</type> )
        <returnvalue>regcollation</returnvalue>
       </para>
       <para>
<!--
        Translates a textual collation name to its OID.  A similar result is
        obtained by casting the string to type <type>regcollation</type> (see
        <xref linkend="datatype-oid"/>); however, this function will return
        <literal>NULL</literal> rather than throwing an error if the name is
        not found.
-->
テキスト形式の照合順名をOIDに変換します。
同様の結果はその文字列を<type>regcollation</type>型にキャストすることによっても得られます。（<xref linkend="datatype-oid"/>参照。）
しかしこの関数は名前が見つからない場合にエラーを起こすのではなく、<literal>NULL</literal>を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>to_regnamespace</primary>
        </indexterm>
        <function>to_regnamespace</function> ( <type>text</type> )
        <returnvalue>regnamespace</returnvalue>
       </para>
       <para>
<!--
        Translates a textual schema name to its OID.  A similar result is
        obtained by casting the string to type <type>regnamespace</type> (see
        <xref linkend="datatype-oid"/>); however, this function will return
        <literal>NULL</literal> rather than throwing an error if the name is
        not found.
-->
テキスト形式のスキーマ名をOIDに変換します。
同様の結果はその文字列を<type>regnamespace</type>型にキャストすることによっても得られます。（<xref linkend="datatype-oid"/>参照。）
しかしこの関数は名前が見つからない場合にエラーを起こすのではなく、<literal>NULL</literal>を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>to_regoper</primary>
        </indexterm>
        <function>to_regoper</function> ( <type>text</type> )
        <returnvalue>regoper</returnvalue>
       </para>
       <para>
<!--
        Translates a textual operator name to its OID.  A similar result is
        obtained by casting the string to type <type>regoper</type> (see
        <xref linkend="datatype-oid"/>); however, this function will return
        <literal>NULL</literal> rather than throwing an error if the name is
        not found or is ambiguous.
-->
テキスト形式の演算子名をOIDに変換します。
同様の結果はその文字列を<type>regoper</type>型にキャストすることによっても得られます。（<xref linkend="datatype-oid"/>参照。）
しかしこの関数は名前が見つからない、あるいは曖昧な場合にエラーを起こすのではなく、<literal>NULL</literal>を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>to_regoperator</primary>
        </indexterm>
        <function>to_regoperator</function> ( <type>text</type> )
        <returnvalue>regoperator</returnvalue>
       </para>
       <para>
<!--
        Translates a textual operator name (with parameter types) to its OID.  A similar result is
        obtained by casting the string to type <type>regoperator</type> (see
        <xref linkend="datatype-oid"/>); however, this function will return
        <literal>NULL</literal> rather than throwing an error if the name is
        not found.
-->
テキスト形式の演算子名（パラメータ型付き）をOIDに変換します。
同様の結果はその文字列を<type>regoperator</type>型にキャストすることによっても得られます。（<xref linkend="datatype-oid"/>参照。）
しかしこの関数は名前が見つからない場合にエラーを起こすのではなく、<literal>NULL</literal>を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>to_regproc</primary>
        </indexterm>
        <function>to_regproc</function> ( <type>text</type> )
        <returnvalue>regproc</returnvalue>
       </para>
       <para>
<!--
        Translates a textual function or procedure name to its OID.  A similar result is
        obtained by casting the string to type <type>regproc</type> (see
        <xref linkend="datatype-oid"/>); however, this function will return
        <literal>NULL</literal> rather than throwing an error if the name is
        not found or is ambiguous.
-->
テキスト形式の関数名またはプロシージャ名をOIDに変換します。
同様の結果はその文字列を<type>regproc</type>型にキャストすることによっても得られます。（<xref linkend="datatype-oid"/>参照。）
しかしこの関数は名前が見つからない、あるいは曖昧な場合にエラーを起こすのではなく、<literal>NULL</literal>を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>to_regprocedure</primary>
        </indexterm>
        <function>to_regprocedure</function> ( <type>text</type> )
        <returnvalue>regprocedure</returnvalue>
       </para>
       <para>
<!--
        Translates a textual function or procedure name (with argument types) to its OID.  A similar result is
        obtained by casting the string to type <type>regprocedure</type> (see
        <xref linkend="datatype-oid"/>); however, this function will return
        <literal>NULL</literal> rather than throwing an error if the name is
        not found.
-->
テキスト形式の関数名またはプロシージャ名（引数型付き）をOIDに変換します。
同様の結果はその文字列を<type>regprocedure</type>型にキャストすることによっても得られます。（<xref linkend="datatype-oid"/>参照。）
しかしこの関数は名前が見つからない場合にエラーを起こすのではなく、<literal>NULL</literal>を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>to_regrole</primary>
        </indexterm>
        <function>to_regrole</function> ( <type>text</type> )
        <returnvalue>regrole</returnvalue>
       </para>
       <para>
<!--
        Translates a textual role name to its OID.  A similar result is
        obtained by casting the string to type <type>regrole</type> (see
        <xref linkend="datatype-oid"/>); however, this function will return
        <literal>NULL</literal> rather than throwing an error if the name is
        not found.
-->
テキスト形式のロール名をOIDに変換します。
同様の結果はその文字列を<type>regrole</type>型にキャストすることによっても得られます。（<xref linkend="datatype-oid"/>参照。）
しかしこの関数は名前が見つからない場合にエラーを起こすのではなく、<literal>NULL</literal>を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>to_regtype</primary>
        </indexterm>
        <function>to_regtype</function> ( <type>text</type> )
        <returnvalue>regtype</returnvalue>
       </para>
       <para>
<!--
        Translates a textual type name to its OID.  A similar result is
        obtained by casting the string to type <type>regtype</type> (see
        <xref linkend="datatype-oid"/>); however, this function will return
        <literal>NULL</literal> rather than throwing an error if the name is
        not found.
-->
テキスト形式の型名をOIDに変換します。
同様の結果はその文字列を<type>regtype</type>型にキャストすることによっても得られます。（<xref linkend="datatype-oid"/>参照。）
しかしこの関数は名前が見つからない場合にエラーを起こすのではなく、<literal>NULL</literal>を返します。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
<!--
   Most of the functions that reconstruct (decompile) database objects
   have an optional <parameter>pretty</parameter> flag, which
   if <literal>true</literal> causes the result to
   be <quote>pretty-printed</quote>.  Pretty-printing suppresses unnecessary
   parentheses and adds whitespace for legibility.
   The pretty-printed format is more readable, but the default format
   is more likely to be interpreted the same way by future versions of
   <productname>PostgreSQL</productname>; so avoid using pretty-printed output
   for dump purposes.  Passing <literal>false</literal> for
   the <parameter>pretty</parameter> parameter yields the same result as
   omitting the parameter.
-->
データベースオブジェクトを再構築（逆コンパイル）する関数の多くにオプションの<parameter>pretty</parameter>フラグがあり、<literal>true</literal>なら結果が<quote>整形</quote>されるようになっています。
整形によって不必要な括弧が抑止され、見やすさのために空白は追加されます。
整形形式は見やすいですが、デフォルト形式は将来のバージョンの<productname>PostgreSQL</productname>でも同じように解釈される可能性が高いです。
ですから、整形された出力をダンプ目的で使わないでください。
<parameter>pretty</parameter>引数に<literal>false</literal>を渡すとパラメータを省略したとの同じ結果が得られます。
  </para>

  <table id="functions-info-index-column-props">
<!--
   <title>Index Column Properties</title>
-->
   <title>インデックス列の属性</title>
   <tgroup cols="2">
    <thead>
<!--
     <row><entry>Name</entry><entry>Description</entry></row>
-->
     <row><entry>名前</entry><entry>説明</entry></row>
    </thead>
    <tbody>
     <row>
      <entry><literal>asc</literal></entry>
<!--
      <entry>Does the column sort in ascending order on a forward scan?
-->
      <entry>前方スキャンで列は昇順にソートされるか
      </entry>
     </row>
     <row>
      <entry><literal>desc</literal></entry>
<!--
      <entry>Does the column sort in descending order on a forward scan?
-->
      <entry>前方スキャンで列は降順にソートされるか
      </entry>
     </row>
     <row>
      <entry><literal>nulls_first</literal></entry>
<!--
      <entry>Does the column sort with nulls first on a forward scan?
-->
      <entry>前方スキャンで列はNULLを先頭にしてソートするか
      </entry>
     </row>
     <row>
      <entry><literal>nulls_last</literal></entry>
<!--
      <entry>Does the column sort with nulls last on a forward scan?
-->
      <entry>前方スキャンで列はNULLを最後にしてソートするか
      </entry>
     </row>
     <row>
      <entry><literal>orderable</literal></entry>
<!--
      <entry>Does the column possess any defined sort ordering?
-->
      <entry>列は定義済みのソート順を所有しているか
      </entry>
     </row>
     <row>
      <entry><literal>distance_orderable</literal></entry>
<!--
      <entry>Can the column be scanned in order by a <quote>distance</quote>
      operator, for example <literal>ORDER BY col &lt;-&gt; constant</literal> ?
-->
      <entry>列は<quote>距離</quote>の演算子の順序に従ってスキャンできるか、例えば<literal>ORDER BY col &lt;-&gt; 定数</literal>など
      </entry>
     </row>
     <row>
      <entry><literal>returnable</literal></entry>
<!--
      <entry>Can the column value be returned by an index-only scan?
-->
      <entry>列の値をインデックスオンリースキャンで返すことができるか
      </entry>
     </row>
     <row>
      <entry><literal>search_array</literal></entry>
<!--
      <entry>Does the column natively support <literal>col = ANY(array)</literal>
      searches?
-->
      <entry>列は<literal>col = ANY(array)</literal>の検索をネイティブにサポートしているか
      </entry>
     </row>
     <row>
      <entry><literal>search_nulls</literal></entry>
<!--
      <entry>Does the column support <literal>IS NULL</literal> and
      <literal>IS NOT NULL</literal> searches?
-->
      <entry>列は<literal>IS NULL</literal>および<literal>IS NOT NULL</literal>の検索をサポートしているか
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="functions-info-index-props">
<!--
   <title>Index Properties</title>
-->
   <title>インデックスの属性</title>
   <tgroup cols="2">
    <thead>
<!--
     <row><entry>Name</entry><entry>Description</entry></row>
-->
     <row><entry>名前</entry><entry>説明</entry></row>
    </thead>
    <tbody>
     <row>
      <entry><literal>clusterable</literal></entry>
<!--
      <entry>Can the index be used in a <literal>CLUSTER</literal> command?
-->
      <entry>インデックスを<literal>CLUSTER</literal>コマンドで使うことができるか
      </entry>
     </row>
     <row>
      <entry><literal>index_scan</literal></entry>
<!--
      <entry>Does the index support plain (non-bitmap) scans?
-->
      <entry>インデックスは通常の（ビットマップでない）スキャンをサポートしているか
      </entry>
     </row>
     <row>
      <entry><literal>bitmap_scan</literal></entry>
<!--
      <entry>Does the index support bitmap scans?
-->
      <entry>インデックスはビットマップスキャンをサポートしているか
      </entry>
     </row>
     <row>
      <entry><literal>backward_scan</literal></entry>
<!--
      <entry>Can the scan direction be changed in mid-scan (to
             support <literal>FETCH BACKWARD</literal> on a cursor without
             needing materialization)?
-->
      <entry>スキャンの途中でスキャン方向を変更できるか（マテリアライゼーションを必要とせずにカーソルの <literal>FETCH BACKWARD</literal>をサポートするため）
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="functions-info-indexam-props">
<!--
   <title>Index Access Method Properties</title>
-->
   <title>インデックスアクセスメソッドの属性</title>
   <tgroup cols="2">
    <thead>
<!--
     <row><entry>Name</entry><entry>Description</entry></row>
-->
     <row><entry>名前</entry><entry>説明</entry></row>
    </thead>
    <tbody>
     <row>
      <entry><literal>can_order</literal></entry>
<!--
      <entry>Does the access method support <literal>ASC</literal>,
      <literal>DESC</literal> and related keywords in
      <literal>CREATE INDEX</literal>?
-->
      <entry>アクセスメソッドは<literal>CREATE INDEX</literal>において<literal>ASC</literal>、<literal>DESC</literal>および関連するキーワードをサポートしているか
      </entry>
     </row>
     <row>
      <entry><literal>can_unique</literal></entry>
<!--
      <entry>Does the access method support unique indexes?
-->
      <entry>アクセスメソッドは一意インデックスをサポートしているか
      </entry>
     </row>
     <row>
      <entry><literal>can_multi_col</literal></entry>
<!--
      <entry>Does the access method support indexes with multiple columns?
-->
      <entry>アクセスメソッドは複数列にまたがるインデックスをサポートしているか
      </entry>
     </row>
     <row>
      <entry><literal>can_exclude</literal></entry>
<!--
      <entry>Does the access method support exclusion constraints?
-->
      <entry>アクセスメソッドは排他制約をサポートしているか
      </entry>
     </row>
     <row>
      <entry><literal>can_include</literal></entry>
<!--
      <entry>Does the access method support the <literal>INCLUDE</literal>
        clause of <literal>CREATE INDEX</literal>?
      </entry>
-->
      <entry>アクセスメソッドが<literal>CREATE INDEX</literal>の<literal>INCLUDE</literal>句をサポートしているか</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="functions-pg-settings-flags">
   <title>GUC Flags</title>
   <tgroup cols="2">
    <thead>
<!--
     <row><entry>Flag</entry><entry>Description</entry></row>
-->
     <row><entry>フラグ</entry><entry>説明</entry></row>
    </thead>
    <tbody>
     <row>
      <entry><literal>EXPLAIN</literal></entry>
<!--
      <entry>Parameters with this flag are included in
       <command>EXPLAIN (SETTINGS)</command> commands.
-->
      <entry>このフラグを持つパラメータは<command>EXPLAIN (SETTINGS)</command>コマンドに含まれます。
      </entry>
     </row>
     <row>
      <entry><literal>NO_SHOW_ALL</literal></entry>
<!--
      <entry>Parameters with this flag are excluded from
       <command>SHOW ALL</command> commands.
-->
      <entry>このフラグを持つパラメータは<command>SHOW ALL</command>コマンドから除外されます。
      </entry>
     </row>
     <row>
      <entry><literal>NO_RESET</literal></entry>
<!--
      <entry>Parameters with this flag do not support
      <command>RESET</command> commands.
-->
      <entry>このフラグを持つパラメータは<command>RESET</command>コマンドをサポートしません。
      </entry>
     </row>
     <row>
      <entry><literal>NO_RESET_ALL</literal></entry>
<!--
      <entry>Parameters with this flag are excluded from
       <command>RESET ALL</command> commands.
-->
      <entry>このフラグを持つパラメータは<command>RESET ALL</command>コマンドから除外されます。
      </entry>
     </row>
     <row>
      <entry><literal>NOT_IN_SAMPLE</literal></entry>
<!--
      <entry>Parameters with this flag are not included in
       <filename>postgresql.conf</filename> by default.
-->
      <entry>このフラグを持つパラメータはデフォルトでは<filename>postgresql.conf</filename>に含まれません。
      </entry>
     </row>
     <row>
      <entry><literal>RUNTIME_COMPUTED</literal></entry>
<!--
      <entry>Parameters with this flag are runtime-computed ones.
-->
      <entry>このフラグを持つパラメータは実行時に計算されます。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  </sect2>

  <sect2 id="functions-info-object">
<!--
   <title>Object Information and Addressing Functions</title>
-->
   <title>オブジェクトの情報とアドレス付関数</title>

  <para>
<!--
   <xref linkend="functions-info-object-table"/> lists functions related to
   database object identification and addressing.
-->
<xref linkend="functions-info-object-table"/>にデータベースオブジェクトの識別とアドレスに関連する関数を示します。
  </para>

   <table id="functions-info-object-table">
<!--
    <title>Object Information and Addressing Functions</title>
-->
    <title>オブジェクト情報とアドレスの関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_describe_object</primary>
        </indexterm>
        <function>pg_describe_object</function> ( <parameter>classid</parameter> <type>oid</type>, <parameter>objid</parameter> <type>oid</type>, <parameter>objsubid</parameter> <type>integer</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Returns a textual description of a database object identified by
        catalog OID, object OID, and sub-object ID (such as a column number
        within a table; the sub-object ID is zero when referring to a whole
        object).  This description is intended to be human-readable, and might
        be translated, depending on server configuration.  This is especially
        useful to determine the identity of an object referenced in the
        <structname>pg_depend</structname> catalog. This function returns
        <literal>NULL</literal> values for undefined objects.
-->
カタログOID、オブジェクトOID、もしくはサブオブジェクトOID（たとえばテーブル中の列番号。オブジェクト全体を参照している場合は0）で指定されたデータベースオブジェクトのテキストによる説明を返します。
この説明はサーバの設定に依存しますが、人が読んでわかる、そして翻訳も可能になることを目的としたのもです。
これは<structname>pg_depend</structname>カタログに格納されたオブジェクトの識別判断の際に有用です。
この関数は、未定義オブジェクトに対して<literal>NULL</literal>値を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_identify_object</primary>
        </indexterm>
        <function>pg_identify_object</function> ( <parameter>classid</parameter> <type>oid</type>, <parameter>objid</parameter> <type>oid</type>, <parameter>objsubid</parameter> <type>integer</type> )
        <returnvalue>record</returnvalue>
        ( <parameter>type</parameter> <type>text</type>,
        <parameter>schema</parameter> <type>text</type>,
        <parameter>name</parameter> <type>text</type>,
        <parameter>identity</parameter> <type>text</type> )
       </para>
       <para>
<!--
        Returns a row containing enough information to uniquely identify the
        database object specified by catalog OID, object OID and sub-object
        ID.
        This information is intended to be machine-readable, and is never
        translated.
        <parameter>type</parameter> identifies the type of database object;
        <parameter>schema</parameter> is the schema name that the object
        belongs in, or <literal>NULL</literal> for object types that do not
        belong to schemas;
        <parameter>name</parameter> is the name of the object, quoted if
        necessary, if the name (along with schema name, if pertinent) is
        sufficient to uniquely identify the object,
        otherwise <literal>NULL</literal>;
        <parameter>identity</parameter> is the complete object identity, with
        the precise format depending on object type, and each name within the
        format being schema-qualified and quoted as necessary. Undefined
        objects are identified with <literal>NULL</literal> values.
-->
カタログOID、オブジェクトOID、そしてサブオブジェクトIDにより指定されるデータベースオブジェクトを一意に特定するために十分な情報を含む行を返します。
この情報は機械による読み取りを目的としており、決して翻訳されません。
<parameter>type</parameter>はデータベースオブジェクトの型を識別するものです。
<parameter>schema</parameter>はオブジェクトが所属するスキーマの名前ですが、スキーマに所属しないオブジェクト型の場合は<literal>NULL</literal>になります。
<parameter>name</parameter>は（必要なら引用符で括った）オブジェクトの名前ですが、（適切ならスキーマ名と合わせて）オブジェクトの一意識別子として使用できる場合にのみ指定し、それ以外の場合は<literal>NULL</literal>にします。
<parameter>identity</parameter>は完全なオブジェクトの識別で、オブジェクトの型に依存した正確なフォーマットを持っています。
フォーマット内の各部分はスキーマ修飾されており、必要に応じて引用符で括られます。
未定義オブジェクトは<literal>NULL</literal>値で識別されます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_identify_object_as_address</primary>
        </indexterm>
        <function>pg_identify_object_as_address</function> ( <parameter>classid</parameter> <type>oid</type>, <parameter>objid</parameter> <type>oid</type>, <parameter>objsubid</parameter> <type>integer</type> )
        <returnvalue>record</returnvalue>
        ( <parameter>type</parameter> <type>text</type>,
        <parameter>object_names</parameter> <type>text[]</type>,
        <parameter>object_args</parameter> <type>text[]</type> )
       </para>
       <para>
<!--
        Returns a row containing enough information to uniquely identify the
        database object specified by catalog OID, object OID and sub-object
        ID.
        The returned information is independent of the current server, that
        is, it could be used to identify an identically named object in
        another server.
        <parameter>type</parameter> identifies the type of database object;
        <parameter>object_names</parameter> and
        <parameter>object_args</parameter>
        are text arrays that together form a reference to the object.
        These three values can be passed
        to <function>pg_get_object_address</function> to obtain the internal
        address of the object.
-->
カタログOID、オブジェクトOID、そしてサブオブジェクトIDにより指定されるデータベースオブジェクトを一意に特定するために充分な情報を含む行を返します。
返される情報は現在のサーバに依存しません。
つまり、他のサーバで全く同じ名前を付けられたオブジェクトを識別するために使うことができます。
<parameter>type</parameter>はデータベースオブジェクトの型を識別するものです。
<parameter>object_names</parameter>と<parameter>object_args</parameter>は文字列の配列で、それらが組み合わされてオブジェクトへの参照を構成します。
これらの3つの値は、オブジェクトの内部アドレスを取得するために<function>pg_get_object_address</function>に渡すことができます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_get_object_address</primary>
        </indexterm>
        <function>pg_get_object_address</function> ( <parameter>type</parameter> <type>text</type>, <parameter>object_names</parameter> <type>text[]</type>, <parameter>object_args</parameter> <type>text[]</type> )
        <returnvalue>record</returnvalue>
        ( <parameter>classid</parameter> <type>oid</type>,
        <parameter>objid</parameter> <type>oid</type>,
        <parameter>objsubid</parameter> <type>integer</type> )
       </para>
       <para>
<!--
        Returns a row containing enough information to uniquely identify the
        database object specified by a type code and object name and argument
        arrays.
        The returned values are the ones that would be used in system catalogs
        such as <structname>pg_depend</structname>; they can be passed to
        other system functions such as <function>pg_describe_object</function>
        or <function>pg_identify_object</function>.
        <parameter>classid</parameter> is the OID of the system catalog
        containing the object;
        <parameter>objid</parameter> is the OID of the object itself, and
        <parameter>objsubid</parameter> is the sub-object ID, or zero if none.
        This function is the inverse
        of <function>pg_identify_object_as_address</function>.
        Undefined objects are identified with <literal>NULL</literal> values.
-->
型、オブジェクト名および引数の配列で指定されたデータベースオブジェクトを一意に特定するために十分な情報を含む行を返します。
返される値は、<structname>pg_depend</structname>などのシステムカタログで使用されるもので、<function>pg_identify_object</function>や<function>pg_describe_object</function>など他のシステム関数に渡すことができます。
<parameter>classid</parameter>はオブジェクトを含むシステムカタログのOIDです。
<parameter>objid</parameter>はオブジェクト自体のOIDです。
<parameter>objsubid</parameter>はオブジェクトのサブID、なければ0です。
この関数は<function>pg_identify_object_as_address</function>の逆関数です。
未定義オブジェクトは<literal>NULL</literal>値で識別されます。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  </sect2>

  <sect2 id="functions-info-comment">
<!--
   <title>Comment Information Functions</title>
-->
   <title>コメント情報関数</title>

   <indexterm>
    <primary>comment</primary>
    <secondary sortas="database objects">about database objects</secondary>
   </indexterm>
   <indexterm>
    <primary>コメント</primary>
    <secondary sortas="database objects">データベースオブジェクトについて</secondary>
   </indexterm>

   <para>
<!--
    The functions shown in <xref linkend="functions-info-comment-table"/>
    extract comments previously stored with the <xref linkend="sql-comment"/>
    command.  A null value is returned if no
    comment could be found for the specified parameters.
-->
<xref linkend="functions-info-comment-table"/>に示される関数は、<xref linkend="sql-comment"/>コマンドによって以前に保存されたコメントを抽出します。
指定されたパラメータに対するコメントが存在しない場合、NULL値が返されます。
   </para>

   <table id="functions-info-comment-table">
<!--
    <title>Comment Information Functions</title>
-->
    <title>コメント情報関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>col_description</primary>
        </indexterm>
        <function>col_description</function> ( <parameter>table</parameter> <type>oid</type>, <parameter>column</parameter> <type>integer</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Returns the comment for a table column, which is specified by the OID
        of its table and its column number.
        (<function>obj_description</function> cannot be used for table
        columns, since columns do not have OIDs of their own.)
-->
テーブルのOIDと列番号で指定されたテーブル列のコメントを返します。
（<function>obj_description</function>はテーブル列には使えません。列は自身のOIDを持たないからです。）
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>obj_description</primary>
        </indexterm>
        <function>obj_description</function> ( <parameter>object</parameter> <type>oid</type>, <parameter>catalog</parameter> <type>name</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Returns the comment for a database object specified by its OID and the
        name of the containing system catalog.  For
        example, <literal>obj_description(123456, 'pg_class')</literal> would
        retrieve the comment for the table with OID 123456.
-->
OIDとそれを含むシステム型で指定されるデータベースオブジェクトのコメントを返します。
たとえば<literal>obj_description(123456, 'pg_class')</literal>はOID 123456のテーブルのコメントを返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>obj_description</function> ( <parameter>object</parameter> <type>oid</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Returns the comment for a database object specified by its OID alone.
        This is <emphasis>deprecated</emphasis> since there is no guarantee
        that OIDs are unique across different system catalogs; therefore, the
        wrong comment might be returned.
-->
OIDだけで指定されるデータベースオブジェクトのコメントを返します。
これは<emphasis>廃止予定</emphasis>です。異なるシステムカタログに渡ってOIDが一意であるという保証はないからです。ですから、間違ったコメントが返されるかも知れません。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>shobj_description</primary>
        </indexterm>
        <function>shobj_description</function> ( <parameter>object</parameter> <type>oid</type>, <parameter>catalog</parameter> <type>name</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Returns the comment for a shared database object specified by its OID
        and the name of the containing system catalog.  This is just
        like <function>obj_description</function> except that it is used for
        retrieving comments on shared objects (that is, databases, roles, and
        tablespaces).  Some system catalogs are global to all databases within
        each cluster, and the descriptions for objects in them are stored
        globally as well.
-->
OIDとそれを含むシステム型で指定されるデータベース共有オブジェクトのコメントを返します。
これは共有オブジェクト（すなわちデータベース、ロール、テーブル空間）のコメントを取り出すために使うのを除くと<function>obj_description</function>と同じです。
システムカタログによってはクラスタ内ですべてのデータベースに対して広域的で、その中のオブジェクトの説明も広域的に格納されています。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  </sect2>

  <sect2 id="functions-info-validity">
<!--
   <title>Data Validity Checking Functions</title>
-->
   <title>データ有効性検証関数</title>

   <para>
<!--
    The functions shown in <xref linkend="functions-info-validity-table"/>
    can be helpful for checking validity of proposed input data.
-->
<xref linkend="functions-info-validity-table"/>で示した関数は、与えられた入力データの有効性をチェックするのに役立ちます。
   </para>

   <table id="functions-info-validity-table">
<!--
    <title>Data Validity Checking Functions</title>
-->
    <title>データ有効性検証関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para>
       <para>
<!--
        Example(s)
-->
例
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_input_is_valid</primary>
        </indexterm>
        <function>pg_input_is_valid</function> (
          <parameter>string</parameter> <type>text</type>,
          <parameter>type</parameter> <type>text</type>
        )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Tests whether the given <parameter>string</parameter> is valid
        input for the specified data type, returning true or false.
-->
指定された<parameter>文字列</parameter>が指定されたデータ型に対して有効な入力かどうかをテストし、真または偽を返します。
       </para>
       <para>
<!--
        This function will only work as desired if the data type's input
        function has been updated to report invalid input as
        a <quote>soft</quote> error.  Otherwise, invalid input will abort
        the transaction, just as if the string had been cast to the type
        directly.
-->
この関数は、データ型の入力関数が無効な入力を<quote>ソフト</quote>エラーとして報告するように更新されている場合にのみ、機能します。
そうでない場合、無効な入力は、文字列が直接その型にキャストされたかのように、トランザクションを中断します。
        </para>
        <para>
         <literal>pg_input_is_valid('42', 'integer')</literal>
         <returnvalue>t</returnvalue>
        </para>
        <para>
         <literal>pg_input_is_valid('42000000000', 'integer')</literal>
         <returnvalue>f</returnvalue>
        </para>
        <para>
         <literal>pg_input_is_valid('1234.567', 'numeric(7,4)')</literal>
         <returnvalue>f</returnvalue>
       </para></entry>
      </row>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_input_error_info</primary>
        </indexterm>
        <function>pg_input_error_info</function> (
          <parameter>string</parameter> <type>text</type>,
          <parameter>type</parameter> <type>text</type>
        )
        <returnvalue>record</returnvalue>
        ( <parameter>message</parameter> <type>text</type>,
        <parameter>detail</parameter> <type>text</type>,
        <parameter>hint</parameter> <type>text</type>,
        <parameter>sql_error_code</parameter> <type>text</type> )
       </para>
       <para>
<!--
        Tests whether the given <parameter>string</parameter> is valid
        input for the specified data type; if not, return the details of
        the error that would have been thrown.  If the input is valid, the
        results are NULL.  The inputs are the same as
        for <function>pg_input_is_valid</function>.
-->
指定された<parameter>文字列</parameter>が指定されたデータタイプに対して有効な入力かどうかをテストします。
有効でない場合は、スローされたであろうエラーの詳細を結果します。
入力が有効な場合、結果はNULLになります。
入力は<function>pg_input_is_valid</function>と同じです。
       </para>
       <para>
<!--
        This function will only work as desired if the data type's input
        function has been updated to report invalid input as
        a <quote>soft</quote> error.  Otherwise, invalid input will abort
        the transaction, just as if the string had been cast to the type
        directly.
-->
この関数は、データ型の入力関数が無効な入力を<quote>ソフト</quote>エラーとして報告するように更新されている場合にのみ、機能します。
そうでない場合、無効な入力は、文字列が直接その型にキャストされたかのように、トランザクションを中断します。
       </para>
       <para>
        <literal>select * from pg_input_error_info('42000000000', 'integer')</literal>
        <returnvalue></returnvalue>
<programlisting>
                       message                        | detail | hint | sql_error_code
------------------------------------------------------+--------+------+----------------
 value "42000000000" is out of range for type integer |        |      | 22003
</programlisting>
       </para>
       <para>
        <literal>select message, detail from pg_input_error_info('1234.567', 'numeric(7,4)')</literal>
        <returnvalue></returnvalue>
<programlisting>
        message         |                                      detail
------------------------+----------------------------------&zwsp;-------------------------------------------------
 numeric field overflow | A field with precision 7, scale 4 must round to an absolute value less than 10^3.
</programlisting>
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  </sect2>

  <sect2 id="functions-info-snapshot">
<!--
   <title>Transaction ID and Snapshot Information Functions</title>
-->
   <title>トランザクションIDとスナップショット情報関数</title>

   <para>
<!--
    The functions shown in <xref linkend="functions-pg-snapshot"/>
    provide server transaction information in an exportable form.  The main
    use of these functions is to determine which transactions were committed
    between two snapshots.
-->
<xref linkend="functions-pg-snapshot"/>で示される関数はサーバトランザクション情報をエクスポートできる形式で提供します。
これら関数の主な使用目的は２つのスナップショット間でどのトランザクションがコミットされたのかを特定するためです。
   </para>

   <table id="functions-pg-snapshot">
<!--
    <title>Transaction ID and Snapshot Information Functions</title>
-->
    <title>トランザクションIDとスナップショット情報関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_current_xact_id</primary>
        </indexterm>
        <function>pg_current_xact_id</function> ()
        <returnvalue>xid8</returnvalue>
       </para>
       <para>
<!--
        Returns the current transaction's ID.  It will assign a new one if the
        current transaction does not have one already (because it has not
        performed any database updates);  see <xref
        linkend="transaction-id"/> for details.  If executed in a
        subtransaction, this will return the top-level transaction ID;
        see <xref linkend="subxacts"/> for details.
-->
現在のトランザクションのIDを返します。
現在トランザクションにIDがない場合(データベースの更新を実行していないため)、新しいIDが割り当てられます。
詳細は<xref linkend="transaction-id"/>を参照してください。
サブトランザクションで実行された場合、トップ-レベルトランザクションIDが返却されます。
詳細は<xref linkend="subxacts"/>を参照してください。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_current_xact_id_if_assigned</primary>
        </indexterm>
        <function>pg_current_xact_id_if_assigned</function> ()
        <returnvalue>xid8</returnvalue>
       </para>
       <para>
<!--
        Returns the current transaction's ID, or <literal>NULL</literal> if no
        ID is assigned yet.  (It's best to use this variant if the transaction
        might otherwise be read-only, to avoid unnecessary consumption of an
        XID.)
        If executed in a subtransaction, this will return the top-level
        transaction ID.
-->
現在のトランザクションIDを返します。もしまだ割り当てられていなければ<literal>NULL</literal>を返します。
（トランザクションが読み取り専用なら、無駄なXIDの消費を避けるためにこの関数を使うのが最良です。）
サブトランザクションで実行された場合、トップ-レベルトランザクションIDが返却されます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_xact_status</primary>
        </indexterm>
        <function>pg_xact_status</function> ( <type>xid8</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Reports the commit status of a recent transaction.
        The result is one of <literal>in progress</literal>,
        <literal>committed</literal>, or <literal>aborted</literal>,
        provided that the transaction is recent enough that the system retains
        the commit status of that transaction.
        If it is old enough that no references to the transaction survive in
        the system and the commit status information has been discarded, the
        result is <literal>NULL</literal>.
        Applications might use this function, for example, to determine
        whether their transaction committed or aborted after the application
        and database server become disconnected while
        a <literal>COMMIT</literal> is in progress.
        Note that prepared transactions are reported as <literal>in
        progress</literal>; applications must check <link
        linkend="view-pg-prepared-xacts"><structname>pg_prepared_xacts</structname></link>
        if they need to determine whether a transaction ID belongs to a
        prepared transaction.
-->
最近のトランザクションのコミット状態について報告します。
トランザクションが最近のもので、システムがそのトランザクションのコミット状態を保持している場合は、トランザクションの状態は<literal>in progress</literal>、<literal>committed</literal>あるいは<literal>aborted</literal>として報告されます。
トランザクションが古く、その参照がシステムに残っておらず、コミット状態の情報が破棄されている場合は、この関数は<literal>NULL</literal>を返します。
<literal>COMMIT</literal>の進行中にアプリケーションとデータベースが切断されたときに、アプリケーションはトランザクションがコミットされたか中断されたかを知るためにこれを使うことができます。
プリペアドのトランザクションは<literal>in progress</literal>として報告されること、そして指定のIDがプリペアドのトランザクションかどうかを確認する必要がある場合は、アプリケーションは<link linkend="view-pg-prepared-xacts"><structname>pg_prepared_xacts</structname></link>を調べなければならないことに注意してください。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_current_snapshot</primary>
        </indexterm>
        <function>pg_current_snapshot</function> ()
        <returnvalue>pg_snapshot</returnvalue>
       </para>
       <para>
<!--
        Returns a current <firstterm>snapshot</firstterm>, a data structure
        showing which transaction IDs are now in-progress.
        Only top-level transaction IDs are included in the snapshot;
        subtransaction IDs are not shown;  see <xref linkend="subxacts"/>
        for details.
-->
どのトランザクションIDがin-progressなのかを表示するデータ構造である現在の<firstterm>snapshot</firstterm>を返します。
スナップショットにはトップレベルのトランザクションIDだけが含まれます。
サブトランザクションIDは表示されません。詳細は<xref linkend="subxacts"/>をご覧ください。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_snapshot_xip</primary>
        </indexterm>
        <function>pg_snapshot_xip</function> ( <type>pg_snapshot</type> )
        <returnvalue>setof xid8</returnvalue>
       </para>
       <para>
<!--
        Returns the set of in-progress transaction IDs contained in a snapshot.
-->
スナップショットに含まれるin-progressのトランザクションIDの集合を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_snapshot_xmax</primary>
        </indexterm>
        <function>pg_snapshot_xmax</function> ( <type>pg_snapshot</type> )
        <returnvalue>xid8</returnvalue>
       </para>
       <para>
<!--
        Returns the <structfield>xmax</structfield> of a snapshot.
-->
スナップショットの<structfield>xmax</structfield>を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_snapshot_xmin</primary>
        </indexterm>
        <function>pg_snapshot_xmin</function> ( <type>pg_snapshot</type> )
        <returnvalue>xid8</returnvalue>
       </para>
       <para>
<!--
        Returns the <structfield>xmin</structfield> of a snapshot.
-->
スナップショットの<structfield>xmin</structfield>を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_visible_in_snapshot</primary>
        </indexterm>
        <function>pg_visible_in_snapshot</function> ( <type>xid8</type>, <type>pg_snapshot</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Is the given transaction ID <firstterm>visible</firstterm> according
        to this snapshot (that is, was it completed before the snapshot was
        taken)?  Note that this function will not give the correct answer for
        a subtransaction ID (subxid);  see <xref linkend="subxacts"/> for
        details.
-->
このスナップショットによると与えられたトランザクションIDが<firstterm>可視</firstterm>か（すなわちスナップショットが取得される前に完了していたか）？
この関数は副トランザクションID（subxid）に対しては正しい答えを返さないことに注意してください。
詳細は<xref linkend="subxacts"/>を参照してください。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    The internal transaction ID type <type>xid</type> is 32 bits wide and
    wraps around every 4 billion transactions.  However,
    the functions shown in <xref linkend="functions-pg-snapshot"/> use a
    64-bit type <type>xid8</type> that does not wrap around during the life
    of an installation and can be converted to <type>xid</type> by casting if
    required;  see <xref linkend="transaction-id"/> for details.
    The data type <type>pg_snapshot</type> stores information about
    transaction ID visibility at a particular moment in time.  Its components
    are described in <xref linkend="functions-pg-snapshot-parts"/>.
    <type>pg_snapshot</type>'s textual representation is
    <literal><replaceable>xmin</replaceable>:<replaceable>xmax</replaceable>:<replaceable>xip_list</replaceable></literal>.
    For example <literal>10:20:10,14,15</literal> means
    <literal>xmin=10, xmax=20, xip_list=10, 14, 15</literal>.
-->
内部トランザクションID型（<type>xid</type>）は32ビット幅なので40億トランザクション毎にラップします。
とは言っても、<xref linkend="functions-pg-snapshot"/>に示される関数はインストレーションの生涯にわたってラップしない<type>xid8</type>型の64ビット形式を使用しており、必要に応じて<type>xid</type>にキャストして変換できます。
詳細は<xref linkend="transaction-id"/>を参照してください。
これらの関数で使用されるデータ型、<type>pg_snapshot</type>はある特定の時間におけるトランザクションIDの可視性に関する情報を格納します。
構成要素は<xref linkend="functions-pg-snapshot-parts"/>に記載されています。
<type>pg_snapshot</type>のテキスト表現は<literal><replaceable>xmin</replaceable>:<replaceable>xmax</replaceable>:<replaceable>xip_list</replaceable></literal>です。
たとえば<literal>10:20:10,14,15</literal>は<literal>xmin=10, xmax=20, xip_list=10, 14, 15</literal>であることを意味します。
   </para>

   <table id="functions-pg-snapshot-parts">
<!--
    <title>Snapshot Components</title>
-->
    <title>スナップショット構成要素</title>
    <tgroup cols="2">
     <thead>
      <row>
<!--
       <entry>Name</entry>
-->
       <entry>名前</entry>
<!--
       <entry>Description</entry>
-->
       <entry>説明</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><structfield>xmin</structfield></entry>
       <entry>
<!--
         Lowest transaction ID that was still active.  All transaction IDs
         less than <structfield>xmin</structfield> are either committed and visible,
         or rolled back and dead.
-->
現在実行中で最も小さいトランザクションID。
<structfield>xmin</structfield>より小さい全てのトランザクションはコミットされて可視となっているか、またはロールバックされて消滅しています。
       </entry>
      </row>

      <row>
       <entry><structfield>xmax</structfield></entry>
       <entry>
<!--
         One past the highest completed transaction ID.  All transaction IDs
         greater than or equal to <structfield>xmax</structfield> had not yet
         completed as of the time of the snapshot, and thus are invisible.
-->
完了した最も大きなトランザクションIDの一つ大きなID。
<structfield>xmax</structfield>と等しいかより大きい全てのトランザクションIDはスナップショットの時点で未完了であり、従って不可視です。
       </entry>
      </row>

      <row>
       <entry><structfield>xip_list</structfield></entry>
       <entry>
<!--
        Transactions in progress at the time of the snapshot.  A transaction
        ID that is <literal>xmin &lt;= <replaceable>X</replaceable> &lt;
        xmax</literal> and not in this list was already completed at the time
        of the snapshot, and thus is either visible or dead according to its
        commit status.  This list does not include the transaction IDs of
        subtransactions (subxids).
-->
スナップショット時の実行中のトランザクションです。
<literal>xmin &lt;= <replaceable>X</replaceable> &lt;xmax</literal>で、このリストにないトランザクションIDはスナップショット時点ですでに完了しており、コミット状態によって可視あるいはデッドのどちらかです。
リストには副トランザクションのトランザクションID（subxids）は含まれません。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    In releases of <productname>PostgreSQL</productname> before 13 there was
    no <type>xid8</type> type, so variants of these functions were provided
    that used <type>bigint</type> to represent a 64-bit XID, with a
    correspondingly distinct snapshot data type <type>txid_snapshot</type>.
    These older functions have <literal>txid</literal> in their names.  They
    are still supported for backward compatibility, but may be removed from a
    future release. See <xref linkend="functions-txid-snapshot"/>.
-->
<productname>PostgreSQL</productname>リリースの13より前では<type>xid8</type>型がなく、これらの関数の変種は、64ビットのXIDを表現するために<type>bigint</type>を、スナップショットデータ型に対応する別の<type>txid_snapshot</type>型を使っていました。
これらの古い関数では<literal>txid</literal>が名前に含まれています。
過去互換性のためにこれらはまだサポートされていますが、将来のリリースでは削除されるかも知れません。
<xref linkend="functions-txid-snapshot"/>を参照してください。
   </para>

   <table id="functions-txid-snapshot">
<!--
    <title>Deprecated Transaction ID and Snapshot Information Functions</title>
-->
    <title>廃止予定のトランザクションIDとスナップショット情報関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>txid_current</primary>
        </indexterm>
        <function>txid_current</function> ()
        <returnvalue>bigint</returnvalue>
       </para>
       <para>
<!--
        See <function>pg_current_xact_id()</function>.
-->
<function>pg_current_xact_id()</function>参照。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>txid_current_if_assigned</primary>
        </indexterm>
        <function>txid_current_if_assigned</function> ()
        <returnvalue>bigint</returnvalue>
       </para>
       <para>
<!--
        See <function>pg_current_xact_id_if_assigned()</function>.
-->
<function>pg_current_xact_id_if_assigned()</function>参照。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>txid_current_snapshot</primary>
        </indexterm>
        <function>txid_current_snapshot</function> ()
        <returnvalue>txid_snapshot</returnvalue>
       </para>
       <para>
<!--
        See <function>pg_current_snapshot()</function>.
-->
<function>pg_current_snapshot()</function>参照。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>txid_snapshot_xip</primary>
        </indexterm>
        <function>txid_snapshot_xip</function> ( <type>txid_snapshot</type> )
        <returnvalue>setof bigint</returnvalue>
       </para>
       <para>
<!--
        See <function>pg_snapshot_xip()</function>.
-->
<function>pg_snapshot_xip()</function>参照。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>txid_snapshot_xmax</primary>
        </indexterm>
        <function>txid_snapshot_xmax</function> ( <type>txid_snapshot</type> )
        <returnvalue>bigint</returnvalue>
       </para>
       <para>
<!--
        See <function>pg_snapshot_xmax()</function>.
-->
<function>pg_snapshot_xmax()</function>参照。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>txid_snapshot_xmin</primary>
        </indexterm>
        <function>txid_snapshot_xmin</function> ( <type>txid_snapshot</type> )
        <returnvalue>bigint</returnvalue>
       </para>
       <para>
<!--
        See <function>pg_snapshot_xmin()</function>.
-->
<function>pg_snapshot_xmin()</function>参照。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>txid_visible_in_snapshot</primary>
        </indexterm>
        <function>txid_visible_in_snapshot</function> ( <type>bigint</type>, <type>txid_snapshot</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        See <function>pg_visible_in_snapshot()</function>.
-->
<function>pg_visible_in_snapshot()</function>参照。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>txid_status</primary>
        </indexterm>
        <function>txid_status</function> ( <type>bigint</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        See <function>pg_xact_status()</function>.
-->
<function>pg_xact_status()</function>参照。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  </sect2>

  <sect2 id="functions-info-commit-timestamp">
<!--
   <title>Committed Transaction Information Functions</title>
-->
   <title>コミット済みトランザクション情報関数</title>

   <para>
<!--
    The functions shown in <xref linkend="functions-commit-timestamp"/>
    provide information about when past transactions were committed.
    They only provide useful data when the
    <xref linkend="guc-track-commit-timestamp"/> configuration option is
    enabled, and only for transactions that were committed after it was
    enabled.  Commit timestamp information is routinely removed during
    vacuum.
-->
<xref linkend="functions-commit-timestamp"/>に示す関数はいつ過去のトランザクションがコミットされたかの情報を提供します。
<xref linkend="guc-track-commit-timestamp"/>設定オプションが有効のときにだけ、かつそれが有効になった後にコミットされたトランザクションについてのみ意味のある情報を提供します。
コミット時刻情報は通常、バキューム時に削除されます。
   </para>

   <table id="functions-commit-timestamp">
<!--
    <title>Committed Transaction Information Functions</title>
-->
    <title>コミットされたトランザクションに関する情報関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_xact_commit_timestamp</primary>
        </indexterm>
        <function>pg_xact_commit_timestamp</function> ( <type>xid</type> )
        <returnvalue>timestamp with time zone</returnvalue>
       </para>
       <para>
<!--
        Returns the commit timestamp of a transaction.
-->
トランザクションのコミットタイムスタンプを返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_xact_commit_timestamp_origin</primary>
        </indexterm>
        <function>pg_xact_commit_timestamp_origin</function> ( <type>xid</type> )
        <returnvalue>record</returnvalue>
        ( <parameter>timestamp</parameter> <type>timestamp with time zone</type>,
         <parameter>roident</parameter> <type>oid</type>)
       </para>
       <para>
<!--
         Returns the commit timestamp and replication origin of a transaction.
-->
トランザクションのコミットタイムスタンプとレプリケーション原点を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_last_committed_xact</primary>
        </indexterm>
        <function>pg_last_committed_xact</function> ()
        <returnvalue>record</returnvalue>
        ( <parameter>xid</parameter> <type>xid</type>,
        <parameter>timestamp</parameter> <type>timestamp with time zone</type>,
        <parameter>roident</parameter> <type>oid</type> )
       </para>
       <para>
<!--
        Returns the transaction ID, commit timestamp and replication origin
        of the latest committed transaction.
-->
直近にコミットしたトランザクションのトランザクションID、コミットタイムスタンプ、レプリケーション原点を返します。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  </sect2>

  <sect2 id="functions-info-controldata">
<!--
   <title>Control Data Functions</title>
-->
   <title>コントロールデータ関数</title>

   <para>
<!--
    The functions shown in <xref linkend="functions-controldata"/>
    print information initialized during <command>initdb</command>, such
    as the catalog version. They also show information about write-ahead
    logging and checkpoint processing. This information is cluster-wide,
    not specific to any one database. These functions provide most of the same
    information, from the same source, as the
    <xref linkend="app-pgcontroldata"/> application.
-->
<xref linkend="functions-controldata"/>に示す関数は、カタログのバージョンなどといった<command>initdb</command>の実行時に初期化される情報を表示します。
それらはまた、先行書き込みログ（WAL）とチェックポイント処理についての情報も示します。
この情報はクラスタ全体に渡るもので、どれか１つのデータベースに特有のものではありません。
これらの関数は<xref linkend="app-pgcontroldata"/>アプリケーションと同じ情報源から、ほぼ同じ情報を提供します。
   </para>

   <table id="functions-controldata">
<!--
    <title>Control Data Functions</title>
-->
    <title>制御データ関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>age</primary>
        </indexterm>
        <function>age</function>  ( <type>xid</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Returns the number of transactions between the supplied
        transaction id and the current transaction counter.
-->
指定されたトランザクションIDと現在のトランザクションカウンタの間のトランザクション数を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>mxid_age</primary>
        </indexterm>
        <function>mxid_age</function>  ( <type>xid</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Returns the number of multixacts IDs between the supplied
        multixact ID and the current multixacts counter.
-->
指定されたマルチトランザクションIDと現在のマルチトランザクションカウンタの間のマルチトランザクションIDの数を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_control_checkpoint</primary>
        </indexterm>
        <function>pg_control_checkpoint</function> ()
        <returnvalue>record</returnvalue>
       </para>
       <para>
<!--
        Returns information about current checkpoint state, as shown in
        <xref linkend="functions-pg-control-checkpoint"/>.
-->
<xref linkend="functions-pg-control-checkpoint"/>に示すように現在のチェックポイントの状態に関する情報を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_control_system</primary>
        </indexterm>
        <function>pg_control_system</function> ()
        <returnvalue>record</returnvalue>
       </para>
       <para>
<!--
        Returns information about current control file state, as shown in
        <xref linkend="functions-pg-control-system"/>.
-->
<xref linkend="functions-pg-control-system"/>に示すように現在の制御ファイルの状態に関する情報を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_control_init</primary>
        </indexterm>
        <function>pg_control_init</function> ()
        <returnvalue>record</returnvalue>
       </para>
       <para>
<!--
        Returns information about cluster initialization state, as shown in
        <xref linkend="functions-pg-control-init"/>.
-->
<xref linkend="functions-pg-control-init"/>に示すようにクラスタの初期化状態に関する情報を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_control_recovery</primary>
        </indexterm>
        <function>pg_control_recovery</function> ()
        <returnvalue>record</returnvalue>
       </para>
       <para>
<!--
        Returns information about recovery state, as shown in
        <xref linkend="functions-pg-control-recovery"/>.
-->
<xref linkend="functions-pg-control-recovery"/>に示すようにリカバリ状態に関する情報を返します。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <table id="functions-pg-control-checkpoint">
<!--
    <title><function>pg_control_checkpoint</function> Output Columns</title>
-->
    <title><function>pg_control_checkpoint</function>の出力列</title>
    <tgroup cols="2">
     <thead>
      <row>
<!--
       <entry>Column Name</entry>
-->
       <entry>列名</entry>
<!--
       <entry>Data Type</entry>
-->
       <entry>データ型</entry>
      </row>
     </thead>

     <tbody>

      <row>
       <entry><structfield>checkpoint_lsn</structfield></entry>
       <entry><type>pg_lsn</type></entry>
      </row>

      <row>
       <entry><structfield>redo_lsn</structfield></entry>
       <entry><type>pg_lsn</type></entry>
      </row>

      <row>
       <entry><structfield>redo_wal_file</structfield></entry>
       <entry><type>text</type></entry>
      </row>

      <row>
       <entry><structfield>timeline_id</structfield></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><structfield>prev_timeline_id</structfield></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><structfield>full_page_writes</structfield></entry>
       <entry><type>boolean</type></entry>
      </row>

      <row>
       <entry><structfield>next_xid</structfield></entry>
       <entry><type>text</type></entry>
      </row>

      <row>
       <entry><structfield>next_oid</structfield></entry>
       <entry><type>oid</type></entry>
      </row>

      <row>
       <entry><structfield>next_multixact_id</structfield></entry>
       <entry><type>xid</type></entry>
      </row>

      <row>
       <entry><structfield>next_multi_offset</structfield></entry>
       <entry><type>xid</type></entry>
      </row>

      <row>
       <entry><structfield>oldest_xid</structfield></entry>
       <entry><type>xid</type></entry>
      </row>

      <row>
       <entry><structfield>oldest_xid_dbid</structfield></entry>
       <entry><type>oid</type></entry>
      </row>

      <row>
       <entry><structfield>oldest_active_xid</structfield></entry>
       <entry><type>xid</type></entry>
      </row>

      <row>
       <entry><structfield>oldest_multi_xid</structfield></entry>
       <entry><type>xid</type></entry>
      </row>

      <row>
       <entry><structfield>oldest_multi_dbid</structfield></entry>
       <entry><type>oid</type></entry>
      </row>

      <row>
       <entry><structfield>oldest_commit_ts_xid</structfield></entry>
       <entry><type>xid</type></entry>
      </row>

      <row>
       <entry><structfield>newest_commit_ts_xid</structfield></entry>
       <entry><type>xid</type></entry>
      </row>

      <row>
       <entry><structfield>checkpoint_time</structfield></entry>
       <entry><type>timestamp with time zone</type></entry>
      </row>

     </tbody>
    </tgroup>
   </table>

   <table id="functions-pg-control-system">
<!--
    <title><function>pg_control_system</function> Output Columns</title>
-->
    <title><function>pg_control_system</function>の出力列</title>
    <tgroup cols="2">
     <thead>
      <row>
<!--
       <entry>Column Name</entry>
-->
       <entry>列名</entry>
<!--
       <entry>Data Type</entry>
-->
       <entry>データ型</entry>
      </row>
     </thead>

     <tbody>

      <row>
       <entry><structfield>pg_control_version</structfield></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><structfield>catalog_version_no</structfield></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><structfield>system_identifier</structfield></entry>
       <entry><type>bigint</type></entry>
      </row>

      <row>
       <entry><structfield>pg_control_last_modified</structfield></entry>
       <entry><type>timestamp with time zone</type></entry>
      </row>

     </tbody>
    </tgroup>
   </table>

   <table id="functions-pg-control-init">
    <title><function>pg_control_init</function> Output Columns</title>
    <tgroup cols="2">
     <thead>
      <row>
<!--
       <entry>Column Name</entry>
-->
       <entry>列名</entry>
<!--
       <entry>Data Type</entry>
-->
       <entry>データ型</entry>
      </row>
     </thead>

     <tbody>

      <row>
       <entry><structfield>max_data_alignment</structfield></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><structfield>database_block_size</structfield></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><structfield>blocks_per_segment</structfield></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><structfield>wal_block_size</structfield></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><structfield>bytes_per_wal_segment</structfield></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><structfield>max_identifier_length</structfield></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><structfield>max_index_columns</structfield></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><structfield>max_toast_chunk_size</structfield></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><structfield>large_object_chunk_size</structfield></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><structfield>float8_pass_by_value</structfield></entry>
       <entry><type>boolean</type></entry>
      </row>

      <row>
       <entry><structfield>data_page_checksum_version</structfield></entry>
       <entry><type>integer</type></entry>
      </row>

     </tbody>
    </tgroup>
   </table>

   <table id="functions-pg-control-recovery">
<!--
    <title><function>pg_control_recovery</function> Output Columns</title>
-->
    <title><function>pg_control_recovery</function>の出力列</title>
    <tgroup cols="2">
     <thead>
      <row>
<!--
       <entry>Column Name</entry>
-->
       <entry>列名</entry>
<!--
       <entry>Data Type</entry>
-->
       <entry>データ型</entry>
      </row>
     </thead>

     <tbody>

      <row>
       <entry><structfield>min_recovery_end_lsn</structfield></entry>
       <entry><type>pg_lsn</type></entry>
      </row>

      <row>
       <entry><structfield>min_recovery_end_timeline</structfield></entry>
       <entry><type>integer</type></entry>
      </row>

      <row>
       <entry><structfield>backup_start_lsn</structfield></entry>
       <entry><type>pg_lsn</type></entry>
      </row>

      <row>
       <entry><structfield>backup_end_lsn</structfield></entry>
       <entry><type>pg_lsn</type></entry>
      </row>

      <row>
       <entry><structfield>end_of_backup_record_required</structfield></entry>
       <entry><type>boolean</type></entry>
      </row>

     </tbody>
    </tgroup>
   </table>

  </sect2>

  </sect1>

  <sect1 id="functions-admin">
<!--
   <title>System Administration Functions</title>
-->
   <title>システム管理関数</title>

   <para>
<!--
    The functions described in this section are used to control and
    monitor a <productname>PostgreSQL</productname> installation.
-->
本節で説明する関数は、<productname>PostgreSQL</productname>インストレーションの制御と監視を行うために使用されます。
   </para>

  <sect2 id="functions-admin-set">
<!--
   <title>Configuration Settings Functions</title>
-->
   <title>構成設定関数</title>

   <indexterm>
    <primary>SET</primary>
   </indexterm>

   <indexterm>
    <primary>SHOW</primary>
   </indexterm>

   <indexterm>
    <primary>configuration</primary>
    <secondary sortas="server">of the server</secondary>
    <tertiary>functions</tertiary>
   </indexterm>
   <indexterm>
    <primary>設定</primary>
    <secondary sortas="server">サーバの</secondary>
    <tertiary>関数</tertiary>
   </indexterm>

   <para>
<!--
    <xref linkend="functions-admin-set-table"/> shows the functions
    available to query and alter run-time configuration parameters.
-->
<xref linkend="functions-admin-set-table"/>は、実行時設定パラメータの問い合わせや変更に使用できる関数を示しています。
   </para>

   <table id="functions-admin-set-table">
<!--
    <title>Configuration Settings Functions</title>
-->
    <title>構成設定関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para>
       <para>
<!--
        Example(s)
-->
例
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>current_setting</primary>
        </indexterm>
        <function>current_setting</function> ( <parameter>setting_name</parameter> <type>text</type> <optional>, <parameter>missing_ok</parameter> <type>boolean</type> </optional> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Returns the current value of the
        setting <parameter>setting_name</parameter>.  If there is no such
        setting, <function>current_setting</function> throws an error
        unless <parameter>missing_ok</parameter> is supplied and
        is <literal>true</literal> (in which case NULL is returned).
        This function corresponds to
        the <acronym>SQL</acronym> command <xref linkend="sql-show"/>.
-->
現在の<parameter>setting_name</parameter>の設定値を返します。
そのような設定がなければ、<parameter>missing_ok</parameter>が渡され、それが<literal>true</literal>でない限り<function>current_setting</function>はエラーを引き起こします（この場合はNULLが返ります）。
この関数は<acronym>SQL</acronym>コマンドの<xref linkend="sql-show"/>に関連します。
       </para>
       <para>
        <literal>current_setting('datestyle')</literal>
        <returnvalue>ISO, MDY</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>set_config</primary>
        </indexterm>
        <function>set_config</function> (
          <parameter>setting_name</parameter> <type>text</type>,
          <parameter>new_value</parameter> <type>text</type>,
          <parameter>is_local</parameter> <type>boolean</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Sets the parameter <parameter>setting_name</parameter>
        to <parameter>new_value</parameter>, and returns that value.
        If <parameter>is_local</parameter> is <literal>true</literal>, the new
        value will only apply during the current transaction. If you want the
        new value to apply for the rest of the current session,
        use <literal>false</literal> instead. This function corresponds to
        the SQL command <xref linkend="sql-set"/>.
-->
<parameter>setting_name</parameter>パラメータに<parameter>new_value</parameter>を設定し、その値を返します。
<parameter>is_local</parameter>が渡され、それが<literal>true</literal>なら新しい値は現在のトランザクションの間にのみ適用されます。
現在のセッションで以降に新しい値を適用したければ、代わりに<literal>false</literal>としてください。
このコマンドはSQLコマンドの<xref linkend="sql-set"/>に関連します。
       </para>
       <para>
        <literal>set_config('log_statement_stats', 'off', false)</literal>
        <returnvalue>off</returnvalue>
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  </sect2>

  <sect2 id="functions-admin-signal">
<!--
   <title>Server Signaling Functions</title>
-->
   <title>サーバシグナル送信関数</title>

   <indexterm>
    <primary>signal</primary>
    <secondary sortas="backend">backend processes</secondary>
   </indexterm>
   <indexterm>
    <primary>シグナル</primary>
    <secondary sortas="backend">バックエンドプロセス</secondary>
   </indexterm>

   <para>
<!--
    The functions shown in <xref
    linkend="functions-admin-signal-table"/> send control signals to
    other server processes.  Use of these functions is restricted to
    superusers by default but access may be granted to others using
    <command>GRANT</command>, with noted exceptions.
-->
<xref linkend="functions-admin-signal-table"/>に示す関数は、制御用シグナルを他のサーバプロセスに送信します。
これらの関数の使用は、デフォルトでスーパーユーザのみに制限されていますが、注記された例外を除き、<command>GRANT</command>を使用して他のユーザにアクセスを許可できます。
   </para>

   <para>
<!--
    Each of these functions returns <literal>true</literal> if
    the signal was successfully sent and <literal>false</literal>
    if sending the signal failed.
-->
これらのそれぞれの関数はシグナルの送付が成功の場合<literal>true</literal>を返し、シグナルの送付に失敗したときには<literal>false</literal>を返します。
   </para>

   <table id="functions-admin-signal-table">
<!--
    <title>Server Signaling Functions</title>
-->
    <title>サーバシグナル送信関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_cancel_backend</primary>
        </indexterm>
        <function>pg_cancel_backend</function> ( <parameter>pid</parameter> <type>integer</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Cancels the current query of the session whose backend process has the
        specified process ID.  This is also allowed if the
        calling role is a member of the role whose backend is being canceled or
        the calling role has privileges of <literal>pg_signal_backend</literal>,
        however only superusers can cancel superuser backends.
-->
指定したプロセスIDを持つバックエンドプロセスの現在のセッションの問い合わせを取り消します。
呼び出し側のロールがキャンセルされるバックエンドのロールのメンバであるか、<literal>pg_signal_backend</literal>の権限を与えられている場合に実行できます。
ただし、スーパーユーザのバックエンドはスーパーユーザのみが取り消せます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_log_backend_memory_contexts</primary>
        </indexterm>
        <function>pg_log_backend_memory_contexts</function> ( <parameter>pid</parameter> <type>integer</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Requests to log the memory contexts of the backend with the
        specified process ID.  This function can send the request to
        backends and auxiliary processes except logger.  These memory contexts
        will be logged at
        <literal>LOG</literal> message level. They will appear in
        the server log based on the log configuration set
        (see <xref linkend="runtime-config-logging"/> for more information),
        but will not be sent to the client regardless of
        <xref linkend="guc-client-min-messages"/>.
-->
指定プロセスIDのバックエンドのメモリコンテキストを記録することを要求します。
この関数はバックエンドとロガー以外の外部プロセスに要求を送ることができます。
メモリコンテキストは<literal>LOG</literal>メッセージレベルでログされます。
ログは、ログ設定（詳細は<xref linkend="runtime-config-logging"/>を参照）に基づきサーバログに現れますが、<xref linkend="guc-client-min-messages"/>に関わらずクライアントには送られません。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_reload_conf</primary>
        </indexterm>
        <function>pg_reload_conf</function> ()
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Causes all processes of the <productname>PostgreSQL</productname>
        server to reload their configuration files.  (This is initiated by
        sending a <systemitem>SIGHUP</systemitem> signal to the postmaster
        process, which in turn sends <systemitem>SIGHUP</systemitem> to each
        of its children.) You can use the
        <link linkend="view-pg-file-settings"><structname>pg_file_settings</structname></link>,
        <link linkend="view-pg-hba-file-rules"><structname>pg_hba_file_rules</structname></link> and
        <link linkend="view-pg-ident-file-mappings"><structname>pg_ident_file_mappings</structname></link> views
        to check the configuration files for possible errors, before reloading.
-->
<productname>PostgreSQL</productname>のすべてのサーバプロセスに構成ファイルの再読み込みをさせます。
（これは<systemitem>SIGHUP</systemitem>シグナルをpostmasterプロセスに送ることによって始まり、postmasterは続いて<systemitem>SIGHUP</systemitem>を子に送ります。）
再ロードする前に、<link linkend="view-pg-file-settings"><structname>pg_file_settings</structname></link>、<link linkend="view-pg-hba-file-rules"><structname>pg_hba_file_rules</structname></link>、<link linkend="view-pg-ident-file-mappings"><structname>pg_ident_file_mappings</structname></link>ビューを使用して、構成ファイルにエラーがないか確認することができます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_rotate_logfile</primary>
        </indexterm>
        <function>pg_rotate_logfile</function> ()
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Signals the log-file manager to switch to a new output file
        immediately.  This works only when the built-in log collector is
        running, since otherwise there is no log-file manager subprocess.
-->
ログファイルマネージャにシグナルを送って新しいファイルに直ちに切り替えさせます。
これは組み込みのログ収集機構が実行中のみ動作します。でないとログマネージャサブプロセスが存在しないからです。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_terminate_backend</primary>
        </indexterm>
        <function>pg_terminate_backend</function> ( <parameter>pid</parameter> <type>integer</type>, <parameter>timeout</parameter> <type>bigint</type> <literal>DEFAULT</literal> <literal>0</literal> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Terminates the session whose backend process has the
        specified process ID.  This is also allowed if the calling role
        is a member of the role whose backend is being terminated or the
        calling role has privileges of <literal>pg_signal_backend</literal>,
        however only superusers can terminate superuser backends.
-->
バックエンドが指定したプロセスIDを持つセッションを終了させます。
呼び出し側のロールが終了されるバックエンドのロールのメンバであるか、<literal>pg_signal_backend</literal>の権限を与えられている場合に実行できます。
ただし、スーパーユーザのバックエンドはスーパーユーザのみが終了できます。
       </para>
       <para>
<!--
        If <parameter>timeout</parameter> is not specified or zero, this
        function returns <literal>true</literal> whether the process actually
        terminates or not, indicating only that the sending of the signal was
        successful.  If the <parameter>timeout</parameter> is specified (in
        milliseconds) and greater than zero, the function waits until the
        process is actually terminated or until the given time has passed. If
        the process is terminated, the function
        returns <literal>true</literal>.  On timeout, a warning is emitted and
        <literal>false</literal> is returned.
-->
<parameter>timeout</parameter>が与えられないか、ゼロなら、この関数はプロセスが実際に終了したかどうかに関わらず、この関数はシグナルの送付が成功したことのみを意味する<literal>true</literal>を返します。
<parameter>timeout</parameter>が指定され、ゼロよりも大きければ、この関数はプロセスが実際に終了するか、指定時間が経過するまで待ちます。
プロセスが終了したら、この関数は<literal>true</literal>を返します。
タイムアウトの場合は、警告が出力され、<literal>false</literal>が返ります。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    <function>pg_cancel_backend</function> and <function>pg_terminate_backend</function>
    send signals (<systemitem>SIGINT</systemitem> or <systemitem>SIGTERM</systemitem>
    respectively) to backend processes identified by process ID.
    The process ID of an active backend can be found from
    the <structfield>pid</structfield> column of the
    <structname>pg_stat_activity</structname> view, or by listing the
    <command>postgres</command> processes on the server (using
    <application>ps</application> on Unix or the <application>Task
    Manager</application> on <productname>Windows</productname>).
    The role of an active backend can be found from the
    <structfield>usename</structfield> column of the
    <structname>pg_stat_activity</structname> view.
-->
<function>pg_cancel_backend</function>と<function>pg_terminate_backend</function>は（それぞれ、<systemitem>SIGINT</systemitem>または<systemitem>SIGTERM</systemitem>）シグナルをプロセス識別子で特定されたバックエンドプロセスに送ります。
使用中のバックエンドのプロセス識別子は<structname>pg_stat_activity</structname>ビューの<structfield>pid</structfield>列から、もしくは、（Unixでは<application>ps</application>、<productname>Windows</productname>では<application>Task Manager</application>により）サーバ上の<command>postgres</command>プロセスをリストすることで見つけられます。
実行中のバックエンドのロールは<structname>pg_stat_activity</structname>の<structfield>usename</structfield>列から確認することができます。
   </para>

   <para>
<!--
    <function>pg_log_backend_memory_contexts</function> can be used
    to log the memory contexts of a backend process. For example:
-->
バックエンドプロセスのメモリコンテキストのログを取るために<function>pg_log_backend_memory_contexts</function>を利用できます。
例を示します。
<programlisting>
postgres=# SELECT pg_log_backend_memory_contexts(pg_backend_pid());
 pg_log_backend_memory_contexts
--------------------------------
 t
(1 row)
</programlisting>
<!--
One message for each memory context will be logged. For example:
-->
各々のメモリコンテキストについて一つのメッセージがログされます。例を示します。
<screen>
LOG:  logging memory contexts of PID 10377
STATEMENT:  SELECT pg_log_backend_memory_contexts(pg_backend_pid());
LOG:  level: 0; TopMemoryContext: 80800 total in 6 blocks; 14432 free (5 chunks); 66368 used
LOG:  level: 1; pgstat TabStatusArray lookup hash table: 8192 total in 1 blocks; 1408 free (0 chunks); 6784 used
LOG:  level: 1; TopTransactionContext: 8192 total in 1 blocks; 7720 free (1 chunks); 472 used
LOG:  level: 1; RowDescriptionContext: 8192 total in 1 blocks; 6880 free (0 chunks); 1312 used
LOG:  level: 1; MessageContext: 16384 total in 2 blocks; 5152 free (0 chunks); 11232 used
LOG:  level: 1; Operator class cache: 8192 total in 1 blocks; 512 free (0 chunks); 7680 used
LOG:  level: 1; smgr relation table: 16384 total in 2 blocks; 4544 free (3 chunks); 11840 used
LOG:  level: 1; TransactionAbortContext: 32768 total in 1 blocks; 32504 free (0 chunks); 264 used
...
LOG:  level: 1; ErrorContext: 8192 total in 1 blocks; 7928 free (3 chunks); 264 used
LOG:  Grand total: 1651920 bytes in 201 blocks; 622360 free (88 chunks); 1029560 used
</screen>
<!--
    If there are more than 100 child contexts under the same parent, the first
    100 child contexts are logged, along with a summary of the remaining contexts.
    Note that frequent calls to this function could incur significant overhead,
    because it may generate a large number of log messages.
-->
同じ親に100よりも多い子コンテキストがあると、最初の100子コンテキストがログされ、残りのコンテキストについてはサマリが付加されます。
この関数を頻繁に呼び出すと、大きなオーバーヘッドを引き起こす可能性があることに注意してください。
大量のログメッセージが生成される可能性があるからです。
   </para>

  </sect2>

  <sect2 id="functions-admin-backup">
<!--
   <title>Backup Control Functions</title>
-->
   <title>バックアップ制御関数</title>

   <indexterm>
    <primary>backup</primary>
   </indexterm>
   <indexterm>
    <primary>バックアップ</primary>
   </indexterm>

   <para>
<!--
    The functions shown in <xref
    linkend="functions-admin-backup-table"/> assist in making on-line backups.
    These functions cannot be executed during recovery (except
    <function>pg_backup_start</function>,
    <function>pg_backup_stop</function>,
    and <function>pg_wal_lsn_diff</function>).
-->
<xref linkend="functions-admin-backup-table"/>に示されている関数はオンラインバックアップの作成を支援します。
これらの関数はリカバリ中には実行できません(<function>pg_backup_start</function>、<function>pg_backup_stop</function>、<function>pg_wal_lsn_diff</function>を除きます)。
   </para>

   <para>
<!--
    For details about proper usage of these functions, see
    <xref linkend="continuous-archiving"/>.
-->
これらの関数の正しい使用方法については、<xref linkend="continuous-archiving"/>を参照してください。
   </para>

   <table id="functions-admin-backup-table">
<!--
    <title>Backup Control Functions</title>
-->
    <title>バックアップ制御関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_create_restore_point</primary>
        </indexterm>
        <function>pg_create_restore_point</function> ( <parameter>name</parameter> <type>text</type> )
        <returnvalue>pg_lsn</returnvalue>
       </para>
       <para>
<!--
        Creates a named marker record in the write-ahead log that can later be
        used as a recovery target, and returns the corresponding write-ahead
        log location.  The given name can then be used with
        <xref linkend="guc-recovery-target-name"/> to specify the point up to
        which recovery will proceed.  Avoid creating multiple restore points
        with the same name, since recovery will stop at the first one whose
        name matches the recovery target.
-->
先行書き込みログ（WAL）中に後でリカバリターゲットとして使用できる名前付けされたマーカーレコードを作成し、関連する先行書き込みログ（WAL）の位置を返します。
与えられた名前はリカバリをどこまで進めるかを指定するために<xref linkend="guc-recovery-target-name"/>とともに利用できます。
同じ名前で複数のリストアポイントを作成するのは避けてください。リカバリターゲットが一致した最初のところでリカバリが停止するからです。
       </para>
       <para>
<!--
        This function is restricted to superusers by default, but other users
        can be granted EXECUTE to run the function.
-->
この関数はデフォルトではスーパーユーザのみ実施可能ですが、他のユーザにも関数を実行するEXECUTE権限を与えることができます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_current_wal_flush_lsn</primary>
        </indexterm>
        <function>pg_current_wal_flush_lsn</function> ()
        <returnvalue>pg_lsn</returnvalue>
       </para>
       <para>
<!--
        Returns the current write-ahead log flush location (see notes below).
-->
先行書き込みログ（WAL）の現在のフラッシュ位置を取得します。（下の注釈を参照してください。）
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_current_wal_insert_lsn</primary>
        </indexterm>
        <function>pg_current_wal_insert_lsn</function> ()
        <returnvalue>pg_lsn</returnvalue>
       </para>
       <para>
<!--
        Returns the current write-ahead log insert location (see notes below).
-->
現在の先行書き込みログ（WAL）の挿入位置を取得します。（下の注釈を参照してください。）
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_current_wal_lsn</primary>
        </indexterm>
        <function>pg_current_wal_lsn</function> ()
        <returnvalue>pg_lsn</returnvalue>
       </para>
       <para>
<!--
        Returns the current write-ahead log write location (see notes below).
-->
現在の先行書き込みログ（WAL）の書き込み位置を取得します。（下の注釈を参照してください。）
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_backup_start</primary>
        </indexterm>
        <function>pg_backup_start</function> (
          <parameter>label</parameter> <type>text</type>
          <optional>, <parameter>fast</parameter> <type>boolean</type>
          </optional> )
        <returnvalue>pg_lsn</returnvalue>
       </para>
       <para>
<!--
        Prepares the server to begin an on-line backup.  The only required
        parameter is an arbitrary user-defined label for the backup.
        (Typically this would be the name under which the backup dump file
        will be stored.)
        If the optional second parameter is given as <literal>true</literal>,
        it specifies executing <function>pg_backup_start</function> as quickly
        as possible.  This forces an immediate checkpoint which will cause a
        spike in I/O operations, slowing any concurrently executing queries.
-->
サーバがオンラインバックアップを開始するのを準備します。
必須パラメータはユーザが任意に定義したバックアップラベルだけです。
（通常、格納に使用するバックアップダンプファイルにちなんだ名前が付けられます。）
オプションの2番目のパラメータが<literal>true</literal>として与えられると、<function>pg_backup_start</function>を可能な限り素早く実行することが指定されます。
これによりI/O操作の急上昇をもたらして同時に実行中のすべての問い合わせを遅くする即時チェックポイントが強制されます。
       </para>
       <para>
<!--
        This function is restricted to superusers by default, but other users
        can be granted EXECUTE to run the function.
-->
この関数はデフォルトではスーパーユーザのみ実施可能ですが、他のユーザにも関数を実行するEXECUTE権限を与えることができます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_backup_stop</primary>
        </indexterm>
        <function>pg_backup_stop</function> (
          <optional><parameter>wait_for_archive</parameter> <type>boolean</type>
          </optional> )
        <returnvalue>record</returnvalue>
        ( <parameter>lsn</parameter> <type>pg_lsn</type>,
        <parameter>labelfile</parameter> <type>text</type>,
        <parameter>spcmapfile</parameter> <type>text</type> )
       </para>
       <para>
<!--
        Finishes performing an on-line backup.  The desired contents of the
        backup label file and the tablespace map file are returned as part of
        the result of the function and must be written to files in the
        backup area.  These files must not be written to the live data directory
        (doing so will cause PostgreSQL to fail to restart in the event of a
        crash).
-->
オンラインバックアップの実行を終了します。
バックアップラベルファイルとテーブル空間マップファイルの必要な内容は関数の結果の一部として返され、バックアップ領域内のファイルに書き込まれなければなりません。
これらのファイルはライブデータディレクトリに書き込まれてはなりません（ライブデータディレクトリに書き込まれるとクラッシュ時にPostgreSQLの再起動に失敗します）。
       </para>
       <para>
<!--
        There is an optional parameter of type <type>boolean</type>.
        If false, the function will return immediately after the backup is
        completed, without waiting for WAL to be archived.  This behavior is
        only useful with backup software that independently monitors WAL
        archiving.  Otherwise, WAL required to make the backup consistent might
        be missing and make the backup useless.  By default or when this
        parameter is true, <function>pg_backup_stop</function> will wait for
        WAL to be archived when archiving is enabled.  (On a standby, this
        means that it will wait only when <varname>archive_mode</varname> =
        <literal>always</literal>.  If write activity on the primary is low,
        it may be useful to run <function>pg_switch_wal</function> on the
        primary in order to trigger an immediate segment switch.)
-->
オプションで<type>boolean</type>型パラメータがあります。
falseの場合、この関数はバックアップの完了後、WALがアーカイブされるのを待たずに、即座に戻ります。
この動作はWALのアーカイブを独立して監視するバックアップソフトウェアに対してのみ有用です。
それ以外の場合、バックアップを一貫性のあるものにするために必要なWALが欠けるためにバックアップが役立たなくなるかもしれません。
デフォルトあるいはこのパラメータがtrueのとき、アーカイブが有効なら、<function>pg_backup_stop</function>はWALがアーカイブされるまで待機します。
（スタンバイでは、これはつまり<varname>archive_mode</varname> = <literal>always</literal>のときのみ待機するということです。
プライマリでの書き込み活動が少ないときは、セグメントの変更を即座に起こさせるためにプライマリで<function>pg_switch_wal</function>を実行するのが有効かもしれません。）
       </para>
       <para>
<!--
        When executed on a primary, this function also creates a backup
        history file in the write-ahead log archive area.  The history file
        includes the label given to <function>pg_backup_start</function>, the
        starting and ending write-ahead log locations for the backup, and the
        starting and ending times of the backup.  After recording the ending
        location, the current write-ahead log insertion point is automatically
        advanced to the next write-ahead log file, so that the ending
        write-ahead log file can be archived immediately to complete the
        backup.
-->
プライマリで実行された場合、この関数はまた、先行書き込みログ（WAL）の格納領域にバックアップ履歴ファイルを作成します。
履歴ファイルには<function>pg_backup_start</function>で付与されたラベル、バックアップの先行書き込みログ（WAL）の位置の開始位置、終了位置、バックアップ開始時刻、終了時刻が含まれます。
終了位置を記録した後、現在の先行書き込みログ（WAL）の挿入位置は自動的に、次の先行書き込みログ（WAL）ファイルに進みます。
従って、終了先行書き込みログ（WAL）ファイルをすぐにアーカイブし、バックアップを完了させることができます。
       </para>
       <para>
<!--
        The result of the function is a single record.
        The <parameter>lsn</parameter> column holds the backup's ending
        write-ahead log location (which again can be ignored).  The second
        column returns the contents of the backup label file, and the third
        column returns the contents of the tablespace map file.  These must be
        stored as part of the backup and are required as part of the restore
        process.
-->
この関数の結果は単一レコードです。
<parameter>lsn</parameter>列はバックアップの終了先行書き込みログ（WAL）の位置です（これもまた無視可能です）。
2番目の列はバックアップラベルファイルの内容を返し、3番目の列はテーブル空間マップファイルの内容を返します。
これらはバックアップの一部として保存されなければならず、リストアプロセスの一部で必要となるものです。
       </para>
       <para>
<!--
        This function is restricted to superusers by default, but other users
        can be granted EXECUTE to run the function.
-->
この関数はデフォルトではスーパーユーザのみ実施可能ですが、他のユーザにも関数を実行するEXECUTE権限を与えることができます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_switch_wal</primary>
        </indexterm>
        <function>pg_switch_wal</function> ()
        <returnvalue>pg_lsn</returnvalue>
       </para>
       <para>
<!--
        Forces the server to switch to a new write-ahead log file, which
        allows the current file to be archived (assuming you are using
        continuous archiving).  The result is the ending write-ahead log
        location plus 1 within the just-completed write-ahead log file.  If
        there has been no write-ahead log activity since the last write-ahead
        log switch, <function>pg_switch_wal</function> does nothing and
        returns the start location of the write-ahead log file currently in
        use.
-->
サーバに対して新しい先行書き込みログ（WAL）ファイルへ強制スイッチを行い、それによってその現在のファイルがアーカイブされるようにします。
（継続的アーカイブを利用中だと仮定します。）
結果は今ちょうど終了した先行書き込みログ（WAL）ファイル内の終了先行書き込みログ（WAL）ファイルの場所プラス1です。
最後の先行書き込みログ（WAL）ファイルのスイッチ以降先行書き込みログ（WAL）ファイル活動がなければ、<function>pg_switch_wal</function>は何もせず、現在使用中の先行書き込みログ（WAL）ファイルの先頭位置を返します。
       </para>
       <para>
<!--
        This function is restricted to superusers by default, but other users
        can be granted EXECUTE to run the function.
-->
この関数はデフォルトではスーパーユーザのみ実施可能ですが、他のユーザにも関数を実行するEXECUTE権限を与えることができます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_walfile_name</primary>
        </indexterm>
        <function>pg_walfile_name</function> ( <parameter>lsn</parameter> <type>pg_lsn</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Converts a write-ahead log location to the name of the WAL file
        holding that location.
-->
先行書き込みログ（WAL）ファイルの位置を、その位置を保持しているWALファイルの名前に変換します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_walfile_name_offset</primary>
        </indexterm>
        <function>pg_walfile_name_offset</function> ( <parameter>lsn</parameter> <type>pg_lsn</type> )
        <returnvalue>record</returnvalue>
        ( <parameter>file_name</parameter> <type>text</type>,
        <parameter>file_offset</parameter> <type>integer</type> )
       </para>
       <para>
<!--
        Converts a write-ahead log location to a WAL file name and byte offset
        within that file.
-->
先行書き込みログ（WAL）の位置を、その位置を保持しているWALファイルの名前とそのファイル内のバイトオフセットに変換します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_split_walfile_name</primary>
        </indexterm>
        <function>pg_split_walfile_name</function> ( <parameter>file_name</parameter> <type>text</type> )
        <returnvalue>record</returnvalue>
        ( <parameter>segment_number</parameter> <type>numeric</type>,
        <parameter>timeline_id</parameter> <type>bigint</type> )
       </para>
       <para>
<!--
        Extracts the sequence number and timeline ID from a WAL file
        name.
-->
WALファイル名からシーケンス番号とタイムラインIDを抽出します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_wal_lsn_diff</primary>
        </indexterm>
        <function>pg_wal_lsn_diff</function> ( <parameter>lsn1</parameter> <type>pg_lsn</type>, <parameter>lsn2</parameter> <type>pg_lsn</type> )
        <returnvalue>numeric</returnvalue>
       </para>
       <para>
<!--
        Calculates the difference in bytes (<parameter>lsn1</parameter> - <parameter>lsn2</parameter>) between two write-ahead log
        locations.  This can be used
        with <structname>pg_stat_replication</structname> or some of the
        functions shown in <xref linkend="functions-admin-backup-table"/> to
        get the replication lag.
-->
2つの先行書き込みログ（WAL）の位置のバイト単位の差分(<parameter>lsn1</parameter> - <parameter>lsn2</parameter>)を計算します。
これは<structname>pg_stat_replication</structname>や<xref linkend="functions-admin-backup-table"/>内の関数でレプリケーションの遅延を取得するために使用することができます。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    <function>pg_current_wal_lsn</function> displays the current write-ahead
    log write location in the same format used by the above functions.
    Similarly, <function>pg_current_wal_insert_lsn</function> displays the
    current write-ahead log insertion location
    and <function>pg_current_wal_flush_lsn</function> displays the current
    write-ahead log flush location. The insertion location is
    the <quote>logical</quote> end of the write-ahead log at any instant,
    while the write location is the end of what has actually been written out
    from the server's internal buffers, and the flush location is the last
    location known to be written to durable storage. The write location is the
    end of what can be examined from outside the server, and is usually what
    you want if you are interested in archiving partially-complete write-ahead
    log files.  The insertion and flush locations are made available primarily
    for server debugging purposes.  These are all read-only operations and do
    not require superuser permissions.
-->
<function>pg_current_wal_lsn</function>は、上記の関数で使用されるのと同じ書式で現在の先行書き込みログ（WAL）の書き込み位置を表示します。
同様に<function>pg_current_wal_insert_lsn</function>は、現在の先行書き込みログ（WAL）の挿入位置を表示し、<function>pg_current_wal_flush_lsn</function>はトランザクションログの現在のフラッシュ位置を表示します。
挿入位置は <quote>論理的</quote>な任意の時点の先行書き込みログ（WAL）の終了位置です。
一方、書き込み位置は、サーバの内部バッファから書き出された実際の終了位置、またフラッシュ位置は永続的ストレージへの書き込みが保証される位置です。
書き込み位置はサーバ外部から検証可能なものの終端です。通常は、部分的に完了した先行書き込みログ（WAL）ファイルのアーカイブ処理を行いたい場合に必要とされるものです。
挿入およびフラッシュ位置はサーバをデバッグする際に主に使用されます。
これらはどちらも読み取りのみの操作であり、スーパーユーザ権限を必要としません。
   </para>

   <para>
<!--
    You can use <function>pg_walfile_name_offset</function> to extract the
    corresponding write-ahead log file name and byte offset from
    a <type>pg_lsn</type> value.  For example:
-->
<function>pg_walfile_name_offset</function>を使用して、<type>pg_lsn</type>値から、対応する先行書き込みログ（WAL）ファイル名とバイトオフセットを取り出すことができます。
以下に例を示します。
<programlisting>
postgres=# SELECT * FROM pg_walfile_name_offset((pg_backup_stop()).lsn);
        file_name         | file_offset
--------------------------+-------------
 00000001000000000000000D |     4039624
(1 row)
</programlisting>
<!--
    Similarly, <function>pg_walfile_name</function> extracts just the write-ahead log file name.
    When the given write-ahead log location is exactly at a write-ahead log file boundary, both
    these functions return the name of the preceding write-ahead log file.
    This is usually the desired behavior for managing write-ahead log archiving
    behavior, since the preceding file is the last one that currently
    needs to be archived.
-->
同様に、<function>pg_walfile_name</function>は、先行書き込みログ（WAL）ファイル名のみを取り出します。
指定した先行書き込みログ（WAL）の位置が正確に先行書き込みログ（WAL）ファイルの境界であった場合、これらの両関数は前の先行書き込みログ（WAL）ファイルの名前を返します。
通常これは、先行書き込みログ（WAL）ファイルのアーカイブ動作では好まれる動作です。
前のファイルが現在のアーカイブで必要とする最後のファイルであるからです。
   </para>

   <para>
<!--
    <function>pg_split_walfile_name</function> is useful to compute a
    <acronym>LSN</acronym> from a file offset and WAL file name, for example:
-->
<function>pg_split_walfile_name</function>は、ファイルオフセットとWALファイル名から<acronym>LSN</acronym>を計算するのに有用です。例を示します。
<programlisting>
postgres=# \set file_name '000000010000000100C000AB'
postgres=# \set offset 256
postgres=# SELECT '0/0'::pg_lsn + pd.segment_number * ps.setting::int + :offset AS lsn
  FROM pg_split_walfile_name(:'file_name') pd,
       pg_show_all_settings() ps
  WHERE ps.name = 'wal_segment_size';
      lsn
---------------
 C001/AB000100
(1 row)
</programlisting>
   </para>

  </sect2>

  <sect2 id="functions-recovery-control">
<!--
   <title>Recovery Control Functions</title>
-->
   <title>リカバリ制御関数</title>

   <para>
<!--
    The functions shown in <xref
    linkend="functions-recovery-info-table"/> provide information
    about the current status of a standby server.
    These functions may be executed both during recovery and in normal running.
-->
<xref linkend="functions-recovery-info-table"/>に示される関数は、スタンバイサーバの現在のステータス情報を提供します。
これらの関数はリカバリ中、および通常稼働時に実行することができるでしょう。
   </para>

   <table id="functions-recovery-info-table">
<!--
    <title>Recovery Information Functions</title>
-->
    <title>リカバリ情報関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_is_in_recovery</primary>
        </indexterm>
        <function>pg_is_in_recovery</function> ()
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Returns true if recovery is still in progress.
-->
まだリカバリ実施中であれば真を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_last_wal_receive_lsn</primary>
        </indexterm>
        <function>pg_last_wal_receive_lsn</function> ()
        <returnvalue>pg_lsn</returnvalue>
       </para>
       <para>
<!--
        Returns the last write-ahead log location that has been received and
        synced to disk by streaming replication. While streaming replication
        is in progress this will increase monotonically. If recovery has
        completed then this will remain static at the location of the last WAL
        record received and synced to disk during recovery. If streaming
        replication is disabled, or if it has not yet started, the function
        returns <literal>NULL</literal>.
-->
ストリーミングレプリケーションにより受信されディスクに同期書き込みされた、先行書き込みログ（WAL）の最後の位置を返します。
ストリーミングレプリケーションがまだ実行中の場合、この関数の戻り値は単調に増加します。
リカバリが完了した場合は、受信されディスクに書き込まれた最後のWALレコードの位置の値のまま変化しません。
ストリーミングレプリケーションが無効、もしくは開始されていない場合、この関数は<literal>NULL</literal>を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_last_wal_replay_lsn</primary>
        </indexterm>
        <function>pg_last_wal_replay_lsn</function> ()
        <returnvalue>pg_lsn</returnvalue>
       </para>
       <para>
<!--
        Returns the last write-ahead log location that has been replayed
        during recovery.  If recovery is still in progress this will increase
        monotonically.  If recovery has completed then this will remain
        static at the location of the last WAL record applied during recovery.
        When the server has been started normally without recovery, the
        function returns <literal>NULL</literal>.
-->
リカバリ中に再生された最後の先行書き込みログ（WAL）の位置を返します。
リカバリがまだ実行中の場合、この関数の戻り値は単調に増加します。
リカバリが完了した場合は、リカバリ時に適用された最後のWALレコードの値のまま変化しません。
サーバがリカバリ処理無しに正常に開始された場合、この関数は<literal>NULL</literal>を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_last_xact_replay_timestamp</primary>
        </indexterm>
        <function>pg_last_xact_replay_timestamp</function> ()
        <returnvalue>timestamp with time zone</returnvalue>
       </para>
       <para>
<!--
        Returns the time stamp of the last transaction replayed during
        recovery.  This is the time at which the commit or abort WAL record
        for that transaction was generated on the primary.  If no transactions
        have been replayed during recovery, the function
        returns <literal>NULL</literal>.  Otherwise, if recovery is still in
        progress this will increase monotonically.  If recovery has completed
        then this will remain static at the time of the last transaction
        applied during recovery.  When the server has been started normally
        without recovery, the function returns <literal>NULL</literal>.
-->
リカバリ中に再生された最後のトランザクションのタイムスタンプを返します。
このタイムスタンプは、プライマリにて該当するトランザクションがコミット、もしくはアボートされた際のWALレコードが生成された時刻です。
リカバリ中に何のトランザクションも再生されていない場合、この関数は<literal>NULL</literal>を返します。
リカバリがまだ実行中の場合、この関数の戻り値は単調に増加します。
リカバリが完了している場合、この関数の戻り値はリカバリ中に再生した最後のトランザクションの時間のまま変化しません。
サーバがリカバリ処理無しに正常に開始された場合、この関数は<literal>NULL</literal>を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_get_wal_resource_managers</primary>
        </indexterm>
        <function>pg_get_wal_resource_managers</function> ()
        <returnvalue>setof record</returnvalue>
        ( <parameter>rm_id</parameter> <type>integer</type>,
        <parameter>rm_name</parameter> <type>text</type>,
        <parameter>rm_builtin</parameter> <type>boolean</type> )
       </para>
       <para>
<!--
        Returns the currently-loaded WAL resource managers in the system. The
        column <parameter>rm_builtin</parameter> indicates whether it's a
        built-in resource manager, or a custom resource manager loaded by an
        extension.
-->
システムに現在ロードされているWALリソースマネージャを返します。
列<parameter>rm_builtin</parameter>は、それが組み込みのリソースマネージャか、拡張によってロードされたカスタムリソースマネージャかを示します。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    The functions shown in <xref
    linkend="functions-recovery-control-table"/> control the progress of recovery.
    These functions may be executed only during recovery.
-->
<xref linkend="functions-recovery-control-table"/>に示す関数は、リカバリの進行を制御する関数です。
これらの関数はリカバリ中のみ実行することが可能です。
   </para>

   <table id="functions-recovery-control-table">
<!--
    <title>Recovery Control Functions</title>
-->
    <title>リカバリ制御関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_is_wal_replay_paused</primary>
        </indexterm>
        <function>pg_is_wal_replay_paused</function> ()
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Returns true if recovery pause is requested.
-->
リカバリの中断が要求された場合は真を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_get_wal_replay_pause_state</primary>
        </indexterm>
        <function>pg_get_wal_replay_pause_state</function> ()
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Returns recovery pause state.  The return values are <literal>
        not paused</literal> if pause is not requested, <literal>
        pause requested</literal> if pause is requested but recovery is
        not yet paused, and <literal>paused</literal> if the recovery is
        actually paused.
-->
リカバリの休止状態を返します。
休止が要求されていないければ、返り値は<literal>not paused</literal>です。
休止が要求されていてリカバリがまだ休止していなければ、返り値は<literal>pause requested</literal>です。
リカバリが実際に休止していれば、返り値は<literal>paused</literal>です。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_promote</primary>
        </indexterm>
        <function>pg_promote</function> ( <parameter>wait</parameter> <type>boolean</type> <literal>DEFAULT</literal> <literal>true</literal>, <parameter>wait_seconds</parameter> <type>integer</type> <literal>DEFAULT</literal> <literal>60</literal> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Promotes a standby server to primary status.
        With <parameter>wait</parameter> set to <literal>true</literal> (the
        default), the function waits until promotion is completed
        or <parameter>wait_seconds</parameter> seconds have passed, and
        returns <literal>true</literal> if promotion is successful
        and <literal>false</literal> otherwise.
        If <parameter>wait</parameter> is set to <literal>false</literal>, the
        function returns <literal>true</literal> immediately after sending a
        <literal>SIGUSR1</literal> signal to the postmaster to trigger
        promotion.
-->
スタンバイサーバをプライマリ状態に昇格します。
<parameter>wait</parameter>に<literal>true</literal>（デフォルト）を設定すると、この関数は昇格が完了するか、<parameter>wait_seconds</parameter>秒が経過するまで待ち、昇格に成功すれば<literal>true</literal>、さもなければ<literal>false</literal>を返します。
<parameter>wait</parameter>に<literal>false</literal>を設定すると、この関数は昇格を起こすためにpostmasterに<literal>SIGUSR1</literal>を送信した後、直ちに<literal>true</literal>を返します。
       </para>
       <para>
<!--
        This function is restricted to superusers by default, but other users
        can be granted EXECUTE to run the function.
-->
この関数はデフォルトではスーパーユーザのみ実施可能ですが、他のユーザにも関数を実行するEXECUTE権限を与えることができます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_wal_replay_pause</primary>
        </indexterm>
        <function>pg_wal_replay_pause</function> ()
        <returnvalue>void</returnvalue>
       </para>
       <para>
<!--
        Request to pause recovery.  A request doesn't mean that recovery stops
        right away.  If you want a guarantee that recovery is actually paused,
        you need to check for the recovery pause state returned by
        <function>pg_get_wal_replay_pause_state()</function>.  Note that
        <function>pg_is_wal_replay_paused()</function> returns whether a request
        is made.  While recovery is paused, no further database changes are applied.
        If hot standby is active, all new queries will see the same consistent
        snapshot of the database, and no further query conflicts will be generated
        until recovery is resumed.
-->
リカバリの中断を要求します。
要求しても、それは直ちにリカバリが中断することを意味しません。
リカバリが実際に中断していることを保証したければ、 <function>pg_get_wal_replay_pause_state()</function>が返すリカバリ中断状態をチェックする必要があります。
<function>pg_is_wal_replay_paused()</function>は要求が行われたかどうかを返すことに注意してください。
リカバリが中断している間、データベースへの変更は適用されません。
ホットスタンバイが動作中はすべての新しい問い合わせはデータベースの一貫した同じスナップショットを参照することになり、リカバリが再開するまでそれ以上の問い合わせの衝突は起きません。
       </para>
       <para>
<!--
        This function is restricted to superusers by default, but other users
        can be granted EXECUTE to run the function.
-->
デフォルトではこの関数の実行はスーパーユーザに限定されますが、他のユーザに関数を実行するEXECUTE権限を与えることができます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_wal_replay_resume</primary>
        </indexterm>
        <function>pg_wal_replay_resume</function> ()
        <returnvalue>void</returnvalue>
       </para>
       <para>
<!--
        Restarts recovery if it was paused.
-->
リカバリが中断中なら再開します。
       </para>
       <para>
<!--
        This function is restricted to superusers by default, but other users
        can be granted EXECUTE to run the function.
-->
デフォルトではこの関数の実行はスーパーユーザに限定されますが、他のユーザに関数を実行するEXECUTE権限を与えることができます。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    <function>pg_wal_replay_pause</function> and
    <function>pg_wal_replay_resume</function> cannot be executed while
    a promotion is ongoing. If a promotion is triggered while recovery
    is paused, the paused state ends and promotion continues.
-->
<function>pg_wal_replay_pause</function>と<function>pg_wal_replay_resume</function>は昇格が進行中は実行できません。
リカバリ中断中に昇格が引き起こされると中断状態は終了し、昇格が継続します。
   </para>

   <para>
<!--
    If streaming replication is disabled, the paused state may continue
    indefinitely without a problem. If streaming replication is in
    progress then WAL records will continue to be received, which will
    eventually fill available disk space, depending upon the duration of
    the pause, the rate of WAL generation and available disk space.
-->
ストリーミングレプリケーションが無効の場合、停止状態は特に問題なく永久に継続します。
ストリーミングレプリケーションの進行中は、WALレコードの受信が継続され、停止時間、WALの生成速度、ディスクの残存容量によりますが、ディスク溢れが発生する可能性があります。
   </para>

  </sect2>

  <sect2 id="functions-snapshot-synchronization">
<!--
   <title>Snapshot Synchronization Functions</title>
-->
   <title>スナップショット同期関数</title>

   <para>
<!--
    <productname>PostgreSQL</productname> allows database sessions to synchronize their
    snapshots. A <firstterm>snapshot</firstterm> determines which data is visible to the
    transaction that is using the snapshot. Synchronized snapshots are
    necessary when two or more sessions need to see identical content in the
    database. If two sessions just start their transactions independently,
    there is always a possibility that some third transaction commits
    between the executions of the two <command>START TRANSACTION</command> commands,
    so that one session sees the effects of that transaction and the other
    does not.
-->
<productname>PostgreSQL</productname>はデータベースのセッションに対して、それらのスナップショットを同期させることが可能です。
<firstterm>スナップショット</firstterm>は、そのスナップショットを使用しているトランザクションにどのデータが可視かを決定します。
同期スナップショットは、2つ以上のセッションにおいて、全く同じデータベース内容を見たい場合に必要となります。
単に2つのセッションが独立してそれぞれのトランザクションを開始するだけでは、第3のトランザクションのコミットが、2つのトランザクションの<command>START TRANSACTION</command>の狭間で実行され、そのため一方のトランザクションではそのコミット結果が見え、他方では見えないという可能性が常にあります。
   </para>

   <para>
<!--
    To solve this problem, <productname>PostgreSQL</productname> allows a transaction to
    <firstterm>export</firstterm> the snapshot it is using.  As long as the exporting
    transaction remains open, other transactions can <firstterm>import</firstterm> its
    snapshot, and thereby be guaranteed that they see exactly the same view
    of the database that the first transaction sees.  But note that any
    database changes made by any one of these transactions remain invisible
    to the other transactions, as is usual for changes made by uncommitted
    transactions.  So the transactions are synchronized with respect to
    pre-existing data, but act normally for changes they make themselves.
-->
このような問題を解決するため、<productname>PostgreSQL</productname>ではトランザクションが使用しているスナップショットを<firstterm>エクスポート</firstterm>できるようになっています。エクスポートしたトランザクションが開かれ続けている限り、他のトランザクションがそれを<firstterm>インポート</firstterm>することができ、
そしてこれにより最初のトランザクションと正確に同じとなるデータベースの可視性を保証されます。ただし、これらの(スナップショットを共有している)トランザクションによって発生したデータベースへの変更は、コミットされていないトランザクションによる変更と同様に、(スナップショットを共有している)他のトランザクションには見えないままです。
つまり、既存データに対しては同期されますが、それら自身による変更については通常の振る舞いをします。
   </para>

   <para>
<!--
    Snapshots are exported with the <function>pg_export_snapshot</function> function,
    shown in <xref linkend="functions-snapshot-synchronization-table"/>, and
    imported with the <xref linkend="sql-set-transaction"/> command.
-->
スナップショットは、<xref linkend="functions-snapshot-synchronization-table"/>に示す<function>pg_export_snapshot</function>関数を用いてエクスポートされ、<xref linkend="sql-set-transaction"/>コマンドを用いてインポートされます。
   </para>

   <table id="functions-snapshot-synchronization-table">
<!--
    <title>Snapshot Synchronization Functions</title>
-->
    <title>スナップショット同期関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_export_snapshot</primary>
        </indexterm>
        <function>pg_export_snapshot</function> ()
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Saves the transaction's current snapshot and returns
        a <type>text</type> string identifying the snapshot.  This string must
        be passed (outside the database) to clients that want to import the
        snapshot.  The snapshot is available for import only until the end of
        the transaction that exported it.
-->
現在のトランザクションのスナップショットを保存し、それを識別する<type>text</type>文字列を返します。
この文字列は（データベースの外側で）スナップショットを取り込みたいクライアントに渡さなければなりません。
エクスポートしたトランザクションが終わるまでの間のみ、そのスナップショットをインポートすることができます。
       </para>
       <para>
<!--
        A transaction can export more than one snapshot, if needed.  Note that
        doing so is only useful in <literal>READ COMMITTED</literal>
        transactions, since in <literal>REPEATABLE READ</literal> and higher
        isolation levels, transactions use the same snapshot throughout their
        lifetime.  Once a transaction has exported any snapshots, it cannot be
        prepared with <xref linkend="sql-prepare-transaction"/>.
-->
必要ならばトランザクションは複数のスナップショットをエクスポートできます。
これは<literal>READ COMMITTED</literal>のトランザクションにおいてのみ有用であることに注意してください。
<literal>REPEATABLE READ</literal>およびそれ以上の分離レベルのトランザクションでは終了まで同じスナップショットを使うからです。
一旦スナップショットをエクスポートしたトランザクションでは、<xref linkend="sql-prepare-transaction"/>による準備を使用することができなくなります。
       </para></entry>
      </row>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_log_standby_snapshot</primary>
        </indexterm>
        <function>pg_log_standby_snapshot</function> ()
        <returnvalue>pg_lsn</returnvalue>
       </para>
       <para>
<!--
        Take a snapshot of running transactions and write it to WAL, without
        having to wait for bgwriter or checkpointer to log one. This is useful
        for logical decoding on standby, as logical slot creation has to wait
        until such a record is replayed on the standby.
-->
bgwriterやcheckpointerがログするのを待たずに、実行中のトランザクションのスナップショットを取得し、それをWALに書き込みます。
これは、ロジカルデコーディングのスタンバイに対して便利です。ロジカルのスロットの作成は、このようなレコードがスタンバイで再生されるまで待たなければならないからです。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  </sect2>

  <sect2 id="functions-replication">
<!--
   <title>Replication Management Functions</title>
-->
   <title>レプリケーション管理関数</title>

   <para>
<!--
    The functions shown
    in <xref linkend="functions-replication-table"/> are for
    controlling and interacting with replication features.
    See <xref linkend="streaming-replication"/>,
    <xref linkend="streaming-replication-slots"/>, and
    <xref linkend="replication-origins"/>
    for information about the underlying features.
    Use of functions for replication origin is only allowed to the
    superuser by default, but may be allowed to other users by using the
    <literal>GRANT</literal> command.
    Use of functions for replication slots is restricted to superusers
    and users having <literal>REPLICATION</literal> privilege.
-->
<xref linkend="functions-replication-table"/>に示す関数はレプリケーション機能を制御したり、情報を取得したりするためのものです。
基盤となっている機能の情報に関しては<xref linkend="streaming-replication"/>、<xref linkend="streaming-replication-slots"/>、<xref linkend="replication-origins"/>を参照してください。
これらの関数のレプリケーションオリジンでの使用はデフォルトでスーパーユーザにのみ許可されていますが、<literal>GRANT</literal>コマンドを使って他のユーザに許可することもできます。
これらの関数のレプリケーションスロットでの使用はスーパーユーザと<literal>REPLICATION</literal>権限を持つユーザに限定されています。
   </para>

   <para>
<!--
    Many of these functions have equivalent commands in the replication
    protocol; see <xref linkend="protocol-replication"/>.
-->
これらの関数の多くには、レプリケーションプロトコルに等価なコマンドがあります。
<xref linkend="protocol-replication"/>を参照してください。
   </para>

   <para>
<!--
    The functions described in
    <xref linkend="functions-admin-backup"/>,
    <xref linkend="functions-recovery-control"/>, and
    <xref linkend="functions-snapshot-synchronization"/>
    are also relevant for replication.
-->
<xref linkend="functions-admin-backup"/>、<xref linkend="functions-recovery-control"/>、<xref linkend="functions-snapshot-synchronization"/>に書かれている関数もレプリケーションに関係するものです。
   </para>

   <table id="functions-replication-table">
<!--
    <title>Replication Management Functions</title>
-->
    <title>レプリケーション管理関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_create_physical_replication_slot</primary>
        </indexterm>
        <function>pg_create_physical_replication_slot</function> ( <parameter>slot_name</parameter> <type>name</type> <optional>, <parameter>immediately_reserve</parameter> <type>boolean</type>, <parameter>temporary</parameter> <type>boolean</type> </optional> )
        <returnvalue>record</returnvalue>
        ( <parameter>slot_name</parameter> <type>name</type>,
        <parameter>lsn</parameter> <type>pg_lsn</type> )
       </para>
       <para>
<!--
        Creates a new physical replication slot named
        <parameter>slot_name</parameter>. The optional second parameter,
        when <literal>true</literal>, specifies that the <acronym>LSN</acronym> for this
        replication slot be reserved immediately; otherwise
        the <acronym>LSN</acronym> is reserved on first connection from a streaming
        replication client. Streaming changes from a physical slot is only
        possible with the streaming-replication protocol &mdash;
        see <xref linkend="protocol-replication"/>. The optional third
        parameter, <parameter>temporary</parameter>, when set to true, specifies that
        the slot should not be permanently stored to disk and is only meant
        for use by the current session. Temporary slots are also
        released upon any error. This function corresponds
        to the replication protocol command <literal>CREATE_REPLICATION_SLOT
        ... PHYSICAL</literal>.
-->
<parameter>slot_name</parameter>という名前の新しい物理レプリケーションスロットを作成します。
2番目のパラメータはオプションで、<literal>true</literal>の場合、このレプリケーションスロットの<acronym>LSN</acronym>が即座に予約されることを指定します。
それ以外の場合は<acronym>LSN</acronym>はストリーミングレプリケーションのクライアントから最初に接続された時に予約されます。
物理スロットからのストリーミングの変更はストリーミングレプリケーションプロトコルでのみ可能です。<xref linkend="protocol-replication"/>を参照してください。
3番目のパラメータ<parameter>temporary</parameter>はオプションで、trueに設定されるとそのスロットは永続的にディスクに保存されるものではなく、現在のセッションによってのみ用いられることを意図していることを指定します。
一時的なスロットはエラーが発生したときも解放されます。
この関数の呼び出しは、レプリケーションプロトコルコマンド<literal>CREATE_REPLICATION_SLOT ... PHYSICAL</literal>と同じ効果があります。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_drop_replication_slot</primary>
        </indexterm>
        <function>pg_drop_replication_slot</function> ( <parameter>slot_name</parameter> <type>name</type> )
        <returnvalue>void</returnvalue>
       </para>
       <para>
<!--
        Drops the physical or logical replication slot
        named <parameter>slot_name</parameter>. Same as replication protocol
        command <literal>DROP_REPLICATION_SLOT</literal>. For logical slots, this must
        be called while connected to the same database the slot was created on.
-->
<parameter>slot_name</parameter>という名前の物理もしくは論理レプリケーションスロットを削除します。
レプリケーションプロトコルコマンド<literal>DROP_REPLICATION_SLOT</literal>と同じです。
論理スロットの場合、この関数はスロットが作成されたのと同じデータベースに接続している時に呼ばなければなりません。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_create_logical_replication_slot</primary>
        </indexterm>
        <function>pg_create_logical_replication_slot</function> ( <parameter>slot_name</parameter> <type>name</type>, <parameter>plugin</parameter> <type>name</type> <optional>, <parameter>temporary</parameter> <type>boolean</type>, <parameter>twophase</parameter> <type>boolean</type> </optional> )
        <returnvalue>record</returnvalue>
        ( <parameter>slot_name</parameter> <type>name</type>,
        <parameter>lsn</parameter> <type>pg_lsn</type> )
       </para>
       <para>
<!--
        Creates a new logical (decoding) replication slot named
        <parameter>slot_name</parameter> using the output plugin
        <parameter>plugin</parameter>. The optional third
        parameter, <parameter>temporary</parameter>, when set to true, specifies that
        the slot should not be permanently stored to disk and is only meant
        for use by the current session. Temporary slots are also
        released upon any error. The optional fourth parameter,
        <parameter>twophase</parameter>, when set to true, specifies
        that the decoding of prepared transactions is enabled for this
        slot. A call to this function has the same effect as the replication
        protocol command <literal>CREATE_REPLICATION_SLOT ... LOGICAL</literal>.
-->
出力プラグイン<parameter>plugin</parameter>を使って<parameter>slot_name</parameter>という名前の新しい論理（デコーディング）レプリケーションスロットを作ります。
3番目のオプションパラメータ<parameter>temporary</parameter>をtrueに設定すると、このスロットを永続的にディスクに保存するべきではなく、現在のセッションでのみ使われることを意図します。
また、一時スロットはエラーが起きると解放されます。
オプションの4つ目の引数<parameter>twophase</parameter>がtrueならば、準備されたトランザクションのデコードがこのスロットで可能になります。
この関数の呼び出しはレプリケーションプロトコルコマンドの<literal>CREATE_REPLICATION_SLOT ... LOGICAL</literal>と同じ効果があります。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_copy_physical_replication_slot</primary>
        </indexterm>
        <function>pg_copy_physical_replication_slot</function> ( <parameter>src_slot_name</parameter> <type>name</type>, <parameter>dst_slot_name</parameter> <type>name</type> <optional>, <parameter>temporary</parameter> <type>boolean</type> </optional> )
        <returnvalue>record</returnvalue>
        ( <parameter>slot_name</parameter> <type>name</type>,
        <parameter>lsn</parameter> <type>pg_lsn</type> )
       </para>
       <para>
<!--
        Copies an existing physical replication slot named <parameter>src_slot_name</parameter>
        to a physical replication slot named <parameter>dst_slot_name</parameter>.
        The copied physical slot starts to reserve WAL from the same <acronym>LSN</acronym> as the
        source slot.
        <parameter>temporary</parameter> is optional. If <parameter>temporary</parameter>
        is omitted, the same value as the source slot is used.
-->
<parameter>src_slot_name</parameter>という名前の既存の物理レプリケーションスロットを<parameter>dst_slot_name</parameter>という名前の物理レプリケーションスロットにコピーします。
コピーされた物理スロットはソーススロットと同じ<acronym>LSN</acronym>からWALの保存を開始します。
<parameter>temporary</parameter>はオプションです。
<parameter>temporary</parameter>を省略すると、ソーススロットと同じ値を使用します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_copy_logical_replication_slot</primary>
        </indexterm>
        <function>pg_copy_logical_replication_slot</function> ( <parameter>src_slot_name</parameter> <type>name</type>, <parameter>dst_slot_name</parameter> <type>name</type> <optional>, <parameter>temporary</parameter> <type>boolean</type> <optional>, <parameter>plugin</parameter> <type>name</type> </optional></optional> )
        <returnvalue>record</returnvalue>
        ( <parameter>slot_name</parameter> <type>name</type>,
        <parameter>lsn</parameter> <type>pg_lsn</type> )
       </para>
       <para>
<!--
        Copies an existing logical replication slot
        named <parameter>src_slot_name</parameter> to a logical replication
        slot named <parameter>dst_slot_name</parameter>, optionally changing
        the output plugin and persistence.  The copied logical slot starts
        from the same <acronym>LSN</acronym> as the source logical slot.  Both
        <parameter>temporary</parameter> and <parameter>plugin</parameter> are
        optional; if they are omitted, the values of the source slot are used.
-->
<parameter>src_slot_name</parameter>という名前の既存の論理レプリケーションスロットを<parameter>dst_slot_name</parameter>という名前の論理レプリケーションスロットにコピーします。オプションで出力プラグインと永続性を変更します。
コピーされた論理スロットはソース論理スロットと同じ<acronym>LSN</acronym>から開始します。
<parameter>temporary</parameter>と<parameter>plugin</parameter>はどちらもオプションです。
省略するとソース論理スロットと同じ値が使用されます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_logical_slot_get_changes</primary>
        </indexterm>
        <function>pg_logical_slot_get_changes</function> ( <parameter>slot_name</parameter> <type>name</type>, <parameter>upto_lsn</parameter> <type>pg_lsn</type>, <parameter>upto_nchanges</parameter> <type>integer</type>, <literal>VARIADIC</literal> <parameter>options</parameter> <type>text[]</type> )
        <returnvalue>setof record</returnvalue>
        ( <parameter>lsn</parameter> <type>pg_lsn</type>,
        <parameter>xid</parameter> <type>xid</type>,
        <parameter>data</parameter> <type>text</type> )
       </para>
       <para>
<!--
        Returns changes in the slot <parameter>slot_name</parameter>, starting
        from the point from which changes have been consumed last.  If
        <parameter>upto_lsn</parameter>
        and <parameter>upto_nchanges</parameter> are NULL,
        logical decoding will continue until end of WAL.  If
        <parameter>upto_lsn</parameter> is non-NULL, decoding will include only
        those transactions which commit prior to the specified LSN.  If
        <parameter>upto_nchanges</parameter> is non-NULL, decoding will
        stop when the number of rows produced by decoding exceeds
        the specified value.  Note, however, that the actual number of
        rows returned may be larger, since this limit is only checked after
        adding the rows produced when decoding each new transaction commit.
-->
変更が最後に消費された時点から開始して、スロット<parameter>slot_name</parameter>の変更を返します。
<parameter>upto_lsn</parameter>と<parameter>upto_nchanges</parameter>がNULLならばロジカルデコーディングはWALの最後まで続きます。
<parameter>upto_lsn</parameter>が非NULLであれば、デコードは指定されたLSNより前にコミットされたトランザクションのみを含みます。
<parameter>upto_nchanges</parameter>が非NULLであれば、デコードにより生成された行の数が指定された値を越えたときに、デコードは止まります。
しかしながら、新しいトランザクションの各コミットをデコードして生成された行を追加した後でしかこの制限は確認されませんので、実際に返される行の数は大きいかもしれないことに注意してください。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_logical_slot_peek_changes</primary>
        </indexterm>
        <function>pg_logical_slot_peek_changes</function> ( <parameter>slot_name</parameter> <type>name</type>, <parameter>upto_lsn</parameter> <type>pg_lsn</type>, <parameter>upto_nchanges</parameter> <type>integer</type>, <literal>VARIADIC</literal> <parameter>options</parameter> <type>text[]</type> )
        <returnvalue>setof record</returnvalue>
        ( <parameter>lsn</parameter> <type>pg_lsn</type>,
        <parameter>xid</parameter> <type>xid</type>,
         <parameter>data</parameter> <type>text</type> )
       </para>
       <para>
<!--
        Behaves just like
        the <function>pg_logical_slot_get_changes()</function> function,
        except that changes are not consumed; that is, they will be returned
        again on future calls.
-->
変更が消費されないということを除いて、<function>pg_logical_slot_get_changes()</function>関数と同じように振る舞います。すなわち、将来の呼び出しでは再び同じものが返ります。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_logical_slot_get_binary_changes</primary>
        </indexterm>
        <function>pg_logical_slot_get_binary_changes</function> ( <parameter>slot_name</parameter> <type>name</type>, <parameter>upto_lsn</parameter> <type>pg_lsn</type>, <parameter>upto_nchanges</parameter> <type>integer</type>, <literal>VARIADIC</literal> <parameter>options</parameter> <type>text[]</type> )
        <returnvalue>setof record</returnvalue>
        ( <parameter>lsn</parameter> <type>pg_lsn</type>,
        <parameter>xid</parameter> <type>xid</type>,
        <parameter>data</parameter> <type>bytea</type> )
       </para>
       <para>
<!--
        Behaves just like
        the <function>pg_logical_slot_get_changes()</function> function,
        except that changes are returned as <type>bytea</type>.
-->
変更は<type>bytea</type>として返されるということを除いて<function>pg_logical_slot_get_changes()</function>関数と同じように振る舞います。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_logical_slot_peek_binary_changes</primary>
        </indexterm>
        <function>pg_logical_slot_peek_binary_changes</function> ( <parameter>slot_name</parameter> <type>name</type>, <parameter>upto_lsn</parameter> <type>pg_lsn</type>, <parameter>upto_nchanges</parameter> <type>integer</type>, <literal>VARIADIC</literal> <parameter>options</parameter> <type>text[]</type> )
        <returnvalue>setof record</returnvalue>
        ( <parameter>lsn</parameter> <type>pg_lsn</type>,
        <parameter>xid</parameter> <type>xid</type>,
        <parameter>data</parameter> <type>bytea</type> )
       </para>
       <para>
<!--
        Behaves just like
        the <function>pg_logical_slot_peek_changes()</function> function,
        except that changes are returned as <type>bytea</type>.
-->
変更は<type>bytea</type>として返されることを除いて<function>pg_logical_slot_peek_changes()</function>関数と同じように振る舞います。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_replication_slot_advance</primary>
        </indexterm>
        <function>pg_replication_slot_advance</function> ( <parameter>slot_name</parameter> <type>name</type>, <parameter>upto_lsn</parameter> <type>pg_lsn</type> )
        <returnvalue>record</returnvalue>
        ( <parameter>slot_name</parameter> <type>name</type>,
        <parameter>end_lsn</parameter> <type>pg_lsn</type> )
       </para>
       <para>
<!--
        Advances the current confirmed position of a replication slot named
        <parameter>slot_name</parameter>. The slot will not be moved backwards,
        and it will not be moved beyond the current insert location. Returns
        the name of the slot and the actual position that it was advanced to.
        The updated slot position information is written out at the next
        checkpoint if any advancing is done. So in the event of a crash, the
        slot may return to an earlier position.
-->
<parameter>slot_name</parameter>という名前のレプリケーションスロットの現在の確認された位置を進めます。
スロットは後方には動きませんし、現在の挿入位置を超えて進むこともありません。
スロットの名前と前に進んだ実際の位置を返します。
前に進んだ場合は更新されたスロットに関する情報がこの後のチェックポイントで書き出されます。
クラッシュが発生すると、そのスロットは以前の位置に戻るかもしれません。
       </para></entry>
      </row>

      <row>
       <entry id="pg-replication-origin-create" role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_replication_origin_create</primary>
        </indexterm>
        <function>pg_replication_origin_create</function> ( <parameter>node_name</parameter> <type>text</type> )
        <returnvalue>oid</returnvalue>
       </para>
       <para>
<!--
        Creates a replication origin with the given external
        name, and returns the internal ID assigned to it.
-->
指定した外部名でレプリケーション起点を作成し、割り当てられた内部IDを返します。
       </para></entry>
      </row>

      <row>
       <entry id="pg-replication-origin-drop" role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_replication_origin_drop</primary>
        </indexterm>
        <function>pg_replication_origin_drop</function> ( <parameter>node_name</parameter> <type>text</type> )
        <returnvalue>void</returnvalue>
       </para>
       <para>
<!--
        Deletes a previously-created replication origin, including any
        associated replay progress.
-->
以前に作成されたレプリケーション起点を、それに関連するすべての再生の進捗も含めて削除します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_replication_origin_oid</primary>
        </indexterm>
        <function>pg_replication_origin_oid</function> ( <parameter>node_name</parameter> <type>text</type> )
        <returnvalue>oid</returnvalue>
       </para>
       <para>
<!--
        Looks up a replication origin by name and returns the internal ID. If
        no such replication origin is found, <literal>NULL</literal> is
        returned.
-->
レプリケーション起点を名前で検索し、内部IDを返します。
相当するレプリケーション起点が見つからない場合は<literal>NULL</literal>を返します。
       </para></entry>
      </row>

      <row>
       <entry id="pg-replication-origin-session-setup" role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_replication_origin_session_setup</primary>
        </indexterm>
        <function>pg_replication_origin_session_setup</function> ( <parameter>node_name</parameter> <type>text</type> )
        <returnvalue>void</returnvalue>
       </para>
       <para>
<!--
        Marks the current session as replaying from the given
        origin, allowing replay progress to be tracked.
        Can only be used if no origin is currently selected.
        Use <function>pg_replication_origin_session_reset</function> to undo.
-->
現在のセッションに、指定の起点から再生中であると印を付け、再生の進捗が追跡できるようにします。
起点が選択されていない場合にのみ使うことができます。
元に戻すには<function>pg_replication_origin_session_reset</function>を使って下さい。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_replication_origin_session_reset</primary>
        </indexterm>
        <function>pg_replication_origin_session_reset</function> ()
        <returnvalue>void</returnvalue>
       </para>
       <para>
<!--
        Cancels the effects
        of <function>pg_replication_origin_session_setup()</function>.
-->
<function>pg_replication_origin_session_setup()</function>の効果を取り消します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_replication_origin_session_is_setup</primary>
        </indexterm>
        <function>pg_replication_origin_session_is_setup</function> ()
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Returns true if a replication origin has been selected in the
        current session.
-->
現在のセッションでレプリケーション起点が選択されていれば真を返します。
       </para></entry>
      </row>

      <row>
       <entry id="pg-replication-origin-session-progress" role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_replication_origin_session_progress</primary>
        </indexterm>
        <function>pg_replication_origin_session_progress</function> ( <parameter>flush</parameter> <type>boolean</type> )
        <returnvalue>pg_lsn</returnvalue>
       </para>
       <para>
<!--
        Returns the replay location for the replication origin selected in
        the current session. The parameter <parameter>flush</parameter>
        determines whether the corresponding local transaction will be
        guaranteed to have been flushed to disk or not.
-->
現在のセッションで設定されたレプリケーション起点の再生位置を返します。
パラメータ<parameter>flush</parameter>により、対応するローカルトランザクションがディスクにフラッシュされていることが保証されるかどうかを決定します。
       </para></entry>
      </row>

      <row>
       <entry id="pg-replication-origin-xact-setup" role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_replication_origin_xact_setup</primary>
        </indexterm>
        <function>pg_replication_origin_xact_setup</function> ( <parameter>origin_lsn</parameter> <type>pg_lsn</type>, <parameter>origin_timestamp</parameter> <type>timestamp with time zone</type> )
        <returnvalue>void</returnvalue>
       </para>
       <para>
<!--
        Marks the current transaction as replaying a transaction that has
        committed at the given <acronym>LSN</acronym> and timestamp. Can
        only be called when a replication origin has been selected
        using <function>pg_replication_origin_session_setup</function>.
-->
現在のトランザクションに、指定の<acronym>LSN</acronym>およびタイムスタンプでコミットしたトランザクションを再生中であると印をつけます。
事前にレプリケーション起点が<function>pg_replication_origin_session_setup</function>を使って選択されている場合にのみ呼び出せます。
       </para></entry>
      </row>

      <row>
       <entry id="pg-replication-origin-xact-reset" role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_replication_origin_xact_reset</primary>
        </indexterm>
        <function>pg_replication_origin_xact_reset</function> ()
        <returnvalue>void</returnvalue>
       </para>
       <para>
<!--
        Cancels the effects of
        <function>pg_replication_origin_xact_setup()</function>.
-->
<function>pg_replication_origin_xact_setup()</function>の効果を取り消します。
       </para></entry>
      </row>

      <row>
       <entry id="pg-replication-origin-advance" role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_replication_origin_advance</primary>
        </indexterm>
        <function>pg_replication_origin_advance</function> ( <parameter>node_name</parameter> <type>text</type>, <parameter>lsn</parameter> <type>pg_lsn</type> )
        <returnvalue>void</returnvalue>
       </para>
       <para>
<!--
        Sets replication progress for the given node to the given
        location. This is primarily useful for setting up the initial
        location, or setting a new location after configuration changes and
        similar. Be aware that careless use of this function can lead to
        inconsistently replicated data.
-->
指定したノードのレプリケーションの進捗を、指定の位置に設定します。
これは主に設定変更の後で初期位置や新しい位置を設定するときなどに役立ちます。
この関数を不注意に使うと、レプリケーションデータが一貫性を失うかもしれないことに注意して下さい。
       </para></entry>
      </row>

      <row>
       <entry id="pg-replication-origin-progress" role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_replication_origin_progress</primary>
        </indexterm>
        <function>pg_replication_origin_progress</function> ( <parameter>node_name</parameter> <type>text</type>, <parameter>flush</parameter> <type>boolean</type> )
        <returnvalue>pg_lsn</returnvalue>
       </para>
       <para>
<!--
        Returns the replay location for the given replication origin. The
        parameter <parameter>flush</parameter> determines whether the
        corresponding local transaction will be guaranteed to have been
        flushed to disk or not.
-->
指定したレプリケーション起点の再生位置を返します。
パラメータ<parameter>flush</parameter>により、対応するローカルトランザクションがディスクにフラッシュされていることが保証されるかどうかを決定します。
       </para></entry>
      </row>

      <row>
       <entry id="pg-logical-emit-message" role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_logical_emit_message</primary>
        </indexterm>
        <function>pg_logical_emit_message</function> ( <parameter>transactional</parameter> <type>boolean</type>, <parameter>prefix</parameter> <type>text</type>, <parameter>content</parameter> <type>text</type> )
        <returnvalue>pg_lsn</returnvalue>
       </para>
       <para role="func_signature">
        <function>pg_logical_emit_message</function> ( <parameter>transactional</parameter> <type>boolean</type>, <parameter>prefix</parameter> <type>text</type>, <parameter>content</parameter> <type>bytea</type> )
        <returnvalue>pg_lsn</returnvalue>
       </para>
       <para>
<!--
        Emits a logical decoding message. This can be used to pass generic
        messages to logical decoding plugins through
        WAL. The <parameter>transactional</parameter> parameter specifies if
        the message should be part of the current transaction, or if it should
        be written immediately and decoded as soon as the logical decoder
        reads the record. The <parameter>prefix</parameter> parameter is a
        textual prefix that can be used by logical decoding plugins to easily
        recognize messages that are interesting for them.
        The <parameter>content</parameter> parameter is the content of the
        message, given either in text or binary form.
-->
ロジカルデコーディングのメッセージを送出します。
これは汎用的なメッセージをWALを通してロジカルデコーディングのプラグインに渡すのに使うことができます。
パラメータ<parameter>transactional</parameter>は、メッセージが現在のトランザクションの一部なのか、あるいはすぐに書き込み、ロジカルデコーディングがレコードを読んだらすぐにデコードされるべきものなのかを指定します。
<parameter>prefix</parameter>パラメータは文字通りの接頭辞で、ロジカルデコーディングのプラグインが、自分にとって関心のあるメッセージを容易に認識できるように使われます。
<parameter>content</parameter>パラメータはメッセージの内容で、テキストまたはバイナリ形式で与えられます。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  </sect2>

  <sect2 id="functions-admin-dbobject">
<!--
   <title>Database Object Management Functions</title>
-->
   <title>データベースオブジェクト管理関数</title>

   <para>
<!--
    The functions shown in <xref linkend="functions-admin-dbsize"/> calculate
    the disk space usage of database objects, or assist in presentation
    or understanding of usage results.  <literal>bigint</literal> results
    are measured in bytes.  If an OID that does
    not represent an existing object is passed to one of these
    functions, <literal>NULL</literal> is returned.
-->
<xref linkend="functions-admin-dbsize"/>で示された関数はデータベースオブジェクトのディスク領域の使用状況を計算したり、使用結果の表示あるいは理解を補助します。
<literal>bigint</literal>の結果はバイト単位の大きさです。
関数に存在するオブジェクト以外のOIDが渡されると<literal>NULL</literal>が返ります。
   </para>

   <table id="functions-admin-dbsize">
<!--
    <title>Database Object Size Functions</title>
-->
    <title>データベースオブジェクトサイズ関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_column_size</primary>
        </indexterm>
        <function>pg_column_size</function> ( <type>"any"</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Shows the number of bytes used to store any individual data value.  If
        applied directly to a table column value, this reflects any
        compression that was done.
-->
個々のデータ値を格納するのに使用されるバイト数を表示します。
テーブルの列の値に直接適用すると、圧縮が行われていればそれを反映します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_column_compression</primary>
        </indexterm>
        <function>pg_column_compression</function> ( <type>"any"</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Shows the compression algorithm that was used to compress
        an individual variable-length value. Returns <literal>NULL</literal>
        if the value is not compressed.
-->
個々の可変長値で使われた圧縮アルゴリズムを表示します。
値が圧縮されていなければ、<literal>NULL</literal>を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_database_size</primary>
        </indexterm>
        <function>pg_database_size</function> ( <type>name</type> )
        <returnvalue>bigint</returnvalue>
       </para>
       <para role="func_signature">
        <function>pg_database_size</function> ( <type>oid</type> )
        <returnvalue>bigint</returnvalue>
       </para>
       <para>
<!--
        Computes the total disk space used by the database with the specified
        name or OID.  To use this function, you must
        have <literal>CONNECT</literal> privilege on the specified database
        (which is granted by default) or have privileges of
        the <literal>pg_read_all_stats</literal> role.
-->
名前あるいはOIDで指定したデータベースによって使われている全ディスクスペースを計算します。
この関数を使うには、指定したデータベースに<literal>CONNECT</literal>権限（デフォルトで付与されています）を持っているか、<literal>pg_read_all_stats</literal>ロールの権限を持っていなければいけません。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_indexes_size</primary>
        </indexterm>
        <function>pg_indexes_size</function> ( <type>regclass</type> )
        <returnvalue>bigint</returnvalue>
       </para>
       <para>
<!--
        Computes the total disk space used by indexes attached to the
        specified table.
-->
指定したテーブルに付与されたインデックスで使用されている全ディスクスペースを計算します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_relation_size</primary>
        </indexterm>
        <function>pg_relation_size</function> ( <parameter>relation</parameter> <type>regclass</type> <optional>, <parameter>fork</parameter> <type>text</type> </optional> )
        <returnvalue>bigint</returnvalue>
       </para>
       <para>
<!--
        Computes the disk space used by one <quote>fork</quote> of the
        specified relation.  (Note that for most purposes it is more
        convenient to use the higher-level
        functions <function>pg_total_relation_size</function>
        or <function>pg_table_size</function>, which sum the sizes of all
        forks.)  With one argument, this returns the size of the main data
        fork of the relation.  The second argument can be provided to specify
        which fork to examine:
-->
指定したリレーションの一つの<quote>fork</quote>で使用されているディスクスペースを計算します。
（大抵の目的には、すべてのフォークのサイズを合計する高レベルの<function>pg_total_relation_size</function>あるいは<function>pg_table_size</function>を使う方が便利です。）
引数1つではリレーションの主データフォークのサイズを返します。
2番目の引数で対象となるのがどのフォークであるかを指定できます。
        <itemizedlist spacing="compact">
         <listitem>
          <para>
<!--
           <literal>main</literal> returns the size of the main
           data fork of the relation.
-->
<literal>main</literal>はリレーションの主データフォークのサイズを返します。
          </para>
         </listitem>
         <listitem>
          <para>
<!--
           <literal>fsm</literal> returns the size of the Free Space Map
           (see <xref linkend="storage-fsm"/>) associated with the relation.
-->
<literal>fsm</literal>を指定すると、リレーションに関連した空き領域マップ(<xref linkend="storage-fsm"/>を参照)のサイズを返します。
          </para>
         </listitem>
         <listitem>
          <para>
<!--
           <literal>vm</literal> returns the size of the Visibility Map
           (see <xref linkend="storage-vm"/>) associated with the relation.
-->
<literal>vm</literal>を指定すると、リレーションに関連した可視性マップ(<xref linkend="storage-vm"/>を参照)のサイズを返します。
          </para>
         </listitem>
         <listitem>
          <para>
<!--
           <literal>init</literal> returns the size of the initialization
           fork, if any, associated with the relation.
-->
<literal>init</literal>を指定すると、あれば、リレーションに関連した初期化フォークのサイズを返します。
          </para>
         </listitem>
        </itemizedlist>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_size_bytes</primary>
        </indexterm>
        <function>pg_size_bytes</function> ( <type>text</type> )
        <returnvalue>bigint</returnvalue>
       </para>
       <para>
<!--
        Converts a size in human-readable format (as returned
        by <function>pg_size_pretty</function>) into bytes.  Valid units are
        <literal>bytes</literal>, <literal>B</literal>, <literal>kB</literal>,
        <literal>MB</literal>, <literal>GB</literal>, <literal>TB</literal>,
        and <literal>PB</literal>.
-->
（<function>pg_size_pretty</function>が返す）人間が読めるフォーマットのサイズをバイトに変換します。
有効な値は、<literal>bytes</literal>、<literal>B</literal>、<literal>kB</literal>、<literal>MB</literal>、<literal>GB</literal>、<literal>TB</literal>、<literal>PB</literal>です。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_size_pretty</primary>
        </indexterm>
        <function>pg_size_pretty</function> ( <type>bigint</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para role="func_signature">
        <function>pg_size_pretty</function> ( <type>numeric</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Converts a size in bytes into a more easily human-readable format with
        size units (bytes, kB, MB, GB, TB, or PB as appropriate).  Note that the
        units are powers of 2 rather than powers of 10, so 1kB is 1024 bytes,
        1MB is 1024<superscript>2</superscript> = 1048576 bytes, and so on.
-->
バイトサイズを、サイズ単位(バイト、kB、MB、GB、TB、PBのうちの適切なもの)を使った、より人間が読みやすい形式に変換します。
単位は10のべき乗ではなく、2のべき乗であることに注意してください。ですから1kBは1024バイトで、1MBは1024<superscript>2</superscript> = 1048576バイト、などとなります。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_table_size</primary>
        </indexterm>
        <function>pg_table_size</function> ( <type>regclass</type> )
        <returnvalue>bigint</returnvalue>
       </para>
       <para>
<!--
        Computes the disk space used by the specified table, excluding indexes
        (but including its TOAST table if any, free space map, and visibility
        map).
-->
指定テーブルが使用している、インデックスを含まないディスクスペースを計算します。（ただしあればTOASTテーブル、空き領域マップ、可視性マップを含みます。）
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_tablespace_size</primary>
        </indexterm>
        <function>pg_tablespace_size</function> ( <type>name</type> )
        <returnvalue>bigint</returnvalue>
       </para>
       <para role="func_signature">
        <function>pg_tablespace_size</function> ( <type>oid</type> )
        <returnvalue>bigint</returnvalue>
       </para>
       <para>
<!--
        Computes the total disk space used in the tablespace with the
        specified name or OID. To use this function, you must
        have <literal>CREATE</literal> privilege on the specified tablespace
        or have privileges of the <literal>pg_read_all_stats</literal> role,
        unless it is the default tablespace for the current database.
-->
名前あるいはOIDで指定されたテーブル空間で使用されているディスクスペースを計算します。
現在のデータベースのデフォルトテーブル空間でない限り、この関数を使うには、指定したテーブル空間に<literal>CREATE</literal>権限を持っているか、<literal>pg_read_all_stats</literal>ロールの権限を持っていなければいけません。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_total_relation_size</primary>
        </indexterm>
        <function>pg_total_relation_size</function> ( <type>regclass</type> )
        <returnvalue>bigint</returnvalue>
       </para>
       <para>
<!--
        Computes the total disk space used by the specified table, including
        all indexes and <acronym>TOAST</acronym> data.  The result is
        equivalent to <function>pg_table_size</function>
        <literal>+</literal> <function>pg_indexes_size</function>.
-->
指定テーブルが使用している、インデックスと<acronym>TOAST</acronym>データを含む全ディスクスペースを計算します。
結果は<function>pg_table_size</function> <literal>+</literal> <function>pg_indexes_size</function>と等価です。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    The functions above that operate on tables or indexes accept a
    <type>regclass</type> argument, which is simply the OID of the table or index
    in the <structname>pg_class</structname> system catalog.  You do not have to look up
    the OID by hand, however, since the <type>regclass</type> data type's input
    converter will do the work for you.  See <xref linkend="datatype-oid"/>
    for details.
-->
上記の関数において、テーブルやインデックスを<type>regclass</type>引数として受け取って処理するものがありますが、この引数は単に<structname>pg_class</structname>システムカタログにあるテーブルやインデックスのOIDです。
ただし、<type>regclass</type>データ型が自動で入力変換を行うため、ユーザが手動で該当するOIDを調べる必要はありません。
詳細は<xref linkend="datatype-oid"/>を参照してください。
   </para>

   <para>
<!--
    The functions shown in <xref linkend="functions-admin-dblocation"/> assist
    in identifying the specific disk files associated with database objects.
-->
<xref linkend="functions-admin-dblocation"/> に示される関数は、データベースオブジェクトに関連する特定のディスクファイルを確認する際の手助けとなります。
   </para>

   <table id="functions-admin-dblocation">
<!--
    <title>Database Object Location Functions</title>
-->
    <title>データベースオブジェクト位置関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_relation_filenode</primary>
        </indexterm>
        <function>pg_relation_filenode</function> ( <parameter>relation</parameter> <type>regclass</type> )
        <returnvalue>oid</returnvalue>
       </para>
       <para>
<!--
        Returns the <quote>filenode</quote> number currently assigned to the
        specified relation.  The filenode is the base component of the file
        name(s) used for the relation (see
        <xref linkend="storage-file-layout"/> for more information).
        For most relations the result is the same as
        <structname>pg_class</structname>.<structfield>relfilenode</structfield>,
        but for certain system catalogs <structfield>relfilenode</structfield>
        is zero and this function must be used to get the correct value.  The
        function returns NULL if passed a relation that does not have storage,
        such as a view.
-->
指定されたリレーションに現在割り当てられている<quote>ファイルノード</quote>番号を返します。
ファイルノードは、リレーションに使用しているファイル名の基本要素です。(詳しくは<xref linkend="storage-file-layout"/>を参照して下さい。)
ほとんどのリレーションについては、結果は<structname>pg_class</structname>.<structfield>relfilenode</structfield>と同じになります。ただし、いくつかのシステムカタログでは<structfield>relfilenode</structfield>がゼロになるため、これらのシステムカタログの正しいファイルノードを取得するには、この関数を使用しなければなりません。
この関数は、ビューの様にストレージに格納されないリレーションが指定された場合はNULLを返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_relation_filepath</primary>
        </indexterm>
        <function>pg_relation_filepath</function> ( <parameter>relation</parameter> <type>regclass</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Returns the entire file path name (relative to the database cluster's
        data directory, <varname>PGDATA</varname>) of the relation.
-->
リレーションのファイルパス名全体（データベースクラスタのデータディレクトリ、<varname>PGDATA</varname>からの相対）を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_filenode_relation</primary>
        </indexterm>
        <function>pg_filenode_relation</function> ( <parameter>tablespace</parameter> <type>oid</type>, <parameter>filenode</parameter> <type>oid</type> )
        <returnvalue>regclass</returnvalue>
       </para>
       <para>
<!--
        Returns a relation's OID given the tablespace OID and filenode it is
        stored under.  This is essentially the inverse mapping of
        <function>pg_relation_filepath</function>.  For a relation in the
        database's default tablespace, the tablespace can be specified as zero.
        Returns <literal>NULL</literal> if no relation in the current database
        is associated with the given values.
-->
与えられたテーブル空間OIDとファイルノードに格納されているリレーションのOIDを返します。
これは本質的に<function>pg_relation_filepath</function>の逆マッピングです。
データベースのデフォルトテーブル空間内のテーブルに対しては、テーブル空間は0と指定できます。
当たられた値に対応する現在のデータベースにリレーションがなければ<literal>NULL</literal>を返します。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    <xref linkend="functions-admin-collation"/> lists functions used to manage
    collations.
-->
<xref linkend="functions-admin-collation"/>に照合順序の管理に使用される関数の一覧を示します。
   </para>

   <table id="functions-admin-collation">
<!--
    <title>Collation Management Functions</title>
-->
    <title>照合順序管理関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_collation_actual_version</primary>
        </indexterm>
        <function>pg_collation_actual_version</function> ( <type>oid</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Returns the actual version of the collation object as it is currently
        installed in the operating system.  If this is different from the
        value in
        <structname>pg_collation</structname>.<structfield>collversion</structfield>,
        then objects depending on the collation might need to be rebuilt.  See
        also <xref linkend="sql-altercollation"/>.
-->
オペレーティングシステムに現在インストールされている照合順序オブジェクトの実際のバージョンを返します。
これが<structname>pg_collation</structname>.<structfield>collversion</structfield>と異なると、その照合順序に依存しているオブジェクトは再構築の必要があるかも知れません。
<xref linkend="sql-altercollation"/>も参照してください。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_database_collation_actual_version</primary>
        </indexterm>
        <function>pg_database_collation_actual_version</function> ( <type>oid</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Returns the actual version of the database's collation as it is currently
        installed in the operating system.  If this is different from the
        value in
        <structname>pg_database</structname>.<structfield>datcollversion</structfield>,
        then objects depending on the collation might need to be rebuilt.  See
        also <xref linkend="sql-alterdatabase"/>.
-->
オペレーティングシステムに現在インストールされている照合順序オブジェクトの実際のバージョンを返します。
これが<structname>pg_database</structname>.<structfield>datcollversion</structfield>と異なると、その照合順序に依存しているオブジェクトは再構築の必要があるかも知れません。
<xref linkend="sql-alterdatabase"/>も参照してください。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_import_system_collations</primary>
        </indexterm>
        <function>pg_import_system_collations</function> ( <parameter>schema</parameter> <type>regnamespace</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Adds collations to the system
        catalog <structname>pg_collation</structname> based on all the locales
        it finds in the operating system.  This is
        what <command>initdb</command> uses; see
        <xref linkend="collation-managing"/> for more details.  If additional
        locales are installed into the operating system later on, this
        function can be run again to add collations for the new locales.
        Locales that match existing entries
        in <structname>pg_collation</structname> will be skipped.  (But
        collation objects based on locales that are no longer present in the
        operating system are not removed by this function.)
        The <parameter>schema</parameter> parameter would typically
        be <literal>pg_catalog</literal>, but that is not a requirement; the
        collations could be installed into some other schema as well.  The
        function returns the number of new collation objects it created.
        Use of this function is restricted to superusers.
-->
オペレーティングシステム上にあるすべてのロケールに基づき、システムカタログ<structname>pg_collation</structname>に照合順序を追加します。
これは<command>initdb</command>が使用しているもので、より詳細については<xref linkend="collation-managing"/>を参照してください。
その後にオペレーティングシステムに追加のロケールをインストールした場合、この関数を再度実行して、その新しいロケールの照合順序を追加することができます。
<structname>pg_collation</structname>の既存のエントリにマッチするロケールはスキップされます。
（しかし、オペレーティングシステム上にもはや存在しなくなったロケールに基づく照合順序オブジェクトはこの関数では削除されません。）
<parameter>schema</parameter>パラメータは通常は<literal>pg_catalog</literal>ですが、必ずしもそうでなければならないわけではなく、照合順序をどれか他のスキーマにインストールすることもできます。
この関数は新しく作成された照合順序オブジェクトの数を返します。
この関数の利用はスーパーユーザにのみ限定されています。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    <xref linkend="functions-info-partition"/> lists functions that provide
    information about the structure of partitioned tables.
-->
<xref linkend="functions-info-partition"/>にパーティション化テーブルの構造に関する情報を提供する関数を示します。
   </para>

   <table id="functions-info-partition">
<!--
    <title>Partitioning Information Functions</title>
-->
    <title>パーティション情報関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_partition_tree</primary>
        </indexterm>
        <function>pg_partition_tree</function> ( <type>regclass</type> )
        <returnvalue>setof record</returnvalue>
        ( <parameter>relid</parameter> <type>regclass</type>,
        <parameter>parentrelid</parameter> <type>regclass</type>,
        <parameter>isleaf</parameter> <type>boolean</type>,
        <parameter>level</parameter> <type>integer</type> )
       </para>
       <para>
<!--
        Lists the tables or indexes in the partition tree of the
        given partitioned table or partitioned index, with one row for each
        partition.  Information provided includes the OID of the partition,
        the OID of its immediate parent, a boolean value telling if the
        partition is a leaf, and an integer telling its level in the hierarchy.
        The level value is 0 for the input table or index, 1 for its
        immediate child partitions, 2 for their partitions, and so on.
        Returns no rows if the relation does not exist or is not a partition
        or partitioned table.
-->
1行1パーティションで与えられたパーティション化テーブルあるいはパーティション化インデックスのパーティションツリー内のテーブルあるいはインデックスの情報を表示します。
提供される情報にはパーティションOID、その直接の親のOID、パーティションが葉かどうかを示す真偽値、階層内のレベルを表す整数が含まれます。
レベル値は与えられたテーブルあるいはインデックスがパーティションツリーの根としての役割を持つことを表す0で始まり、1ならその直下のパーティション、2ならそのまた下のパーティションなどとなります。
リレーションが存在しない、あるいはパーティションでない、もしくはパーティション化テーブルでない場合は行を返しません。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_partition_ancestors</primary>
        </indexterm>
        <function>pg_partition_ancestors</function> ( <type>regclass</type> )
        <returnvalue>setof regclass</returnvalue>
       </para>
       <para>
<!--
        Lists the ancestor relations of the given partition,
        including the relation itself.  Returns no rows if the relation
        does not exist or is not a partition or partitioned table.
-->
パーティション自身を含む、与えられたパーティションの先祖リレーションを列挙します。
リレーションが存在しない、あるいはパーティションでない、もしくはパーティション化テーブルでない場合は行を返しません。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_partition_root</primary>
        </indexterm>
        <function>pg_partition_root</function> ( <type>regclass</type> )
        <returnvalue>regclass</returnvalue>
       </para>
       <para>
<!--
        Returns the top-most parent of the partition tree to which the given
        relation belongs.  Returns <literal>NULL</literal> if the relation
        does not exist or is not a partition or partitioned table.
-->
与えられたリレーションが所属するパーティションツリーの最上位の親を返します。
リレーションが存在しない、あるいはパーティションでない、もしくはパーティション化テーブルでない場合は<literal>NULL</literal>を返します。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    For example, to check the total size of the data contained in a
    partitioned table <structname>measurement</structname>, one could use the
    following query:
-->
たとえばパーティション化テーブル<structname>measurement</structname>に含まれるデータの全体サイズを確認するには、次の問い合わせが利用できます。
<programlisting>
SELECT pg_size_pretty(sum(pg_relation_size(relid))) AS total_size
  FROM pg_partition_tree('measurement');
</programlisting>
   </para>

  </sect2>

  <sect2 id="functions-admin-index">
<!--
   <title>Index Maintenance Functions</title>
-->
   <title>インデックス保守関数</title>

   <para>
<!--
    <xref linkend="functions-admin-index-table"/> shows the functions
    available for index maintenance tasks.  (Note that these maintenance
    tasks are normally done automatically by autovacuum; use of these
    functions is only required in special cases.)
    These functions cannot be executed during recovery.
    Use of these functions is restricted to superusers and the owner
    of the given index.
-->
<xref linkend="functions-admin-index-table"/>にインデックスの保守タスクに使用可能な関数を示します。
（これらの保守業務は通常自動バキュームが自動的に行うことに注意してください。これらの関数は特別な場合にのみ必要になります。）
これらの関数はリカバリ中は実行できません。
これらの関数の使用はスーパーユーザと対象のインデックスの所有者に限定されます。
   </para>

   <table id="functions-admin-index-table">
<!--
    <title>Index Maintenance Functions</title>
-->
    <title>インデックス保守関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>brin_summarize_new_values</primary>
        </indexterm>
        <function>brin_summarize_new_values</function> ( <parameter>index</parameter> <type>regclass</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Scans the specified BRIN index to find page ranges in the base table
        that are not currently summarized by the index; for any such range it
        creates a new summary index tuple by scanning those table pages.
        Returns the number of new page range summaries that were inserted
        into the index.
-->
指定されたBRINインデックスを検査してベーステーブル内のインデックスによって現在要約されていないページ範囲を探します。
そのような範囲があれば、テーブルのページをスキャンして新しい要約インデックスタプルを作成します。
インデックスに挿入された新しいページ範囲要約の数を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>brin_summarize_range</primary>
        </indexterm>
        <function>brin_summarize_range</function> ( <parameter>index</parameter> <type>regclass</type>, <parameter>blockNumber</parameter> <type>bigint</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Summarizes the page range covering the given block, if not already
        summarized.  This is
        like <function>brin_summarize_new_values</function> except that it
        only processes the page range that covers the given table block number.
-->
指定のブロックを含むページ範囲が、まだ要約されていなければ、要約します。
これは<function>brin_summarize_new_values</function>と似ていますが、指定されたテーブルブロック番号のみを対象としてページ範囲を処理するところだけが異なります。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>brin_desummarize_range</primary>
        </indexterm>
        <function>brin_desummarize_range</function> ( <parameter>index</parameter> <type>regclass</type>, <parameter>blockNumber</parameter> <type>bigint</type> )
        <returnvalue>void</returnvalue>
       </para>
       <para>
<!--
        Removes the BRIN index tuple that summarizes the page range covering
        the given table block, if there is one.
-->
指定のブロックを含むページ範囲が要約されていれば、それを含むページ範囲を要約するBRINインデックスタプルを削除します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>gin_clean_pending_list</primary>
        </indexterm>
        <function>gin_clean_pending_list</function> ( <parameter>index</parameter> <type>regclass</type> )
        <returnvalue>bigint</returnvalue>
       </para>
       <para>
<!--
        Cleans up the <quote>pending</quote> list of the specified GIN index
        by moving entries in it, in bulk, to the main GIN data structure.
        Returns the number of pages removed from the pending list.
        If the argument is a GIN index built with
        the <literal>fastupdate</literal> option disabled, no cleanup happens
        and the result is zero, because the index doesn't have a pending list.
        See <xref linkend="gin-fast-update"/> and <xref linkend="gin-tips"/>
        for details about the pending list and <literal>fastupdate</literal>
        option.
-->
指定GINインデックスの<quote>処理待ち</quote>リストのエントリをメインのインデックスデータ構造に一括で移動します。
処理待ちリストから削除されたページ数を返します。
<literal>fastupdate</literal>オプションが無効で作成されたGINインデックスが引数なら、削除は起こらず結果がゼロになります。そのインデックスには処理待ちリストがないからです。
処理待ちリストと<literal>fastupdate</literal>オプションの詳細については<xref linkend="gin-fast-update"/>と<xref linkend="gin-tips"/>をご覧ください。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  </sect2>

  <sect2 id="functions-admin-genfile">
<!--
   <title>Generic File Access Functions</title>
-->
   <title>汎用ファイルアクセス関数</title>

   <para>
<!--
    The functions shown in <xref
    linkend="functions-admin-genfile-table"/> provide native access to
    files on the machine hosting the server. Only files within the
    database cluster directory and the <varname>log_directory</varname> can be
    accessed, unless the user is a superuser or is granted the role
    <literal>pg_read_server_files</literal>.  Use a relative path for files in
    the cluster directory, and a path matching the <varname>log_directory</varname>
    configuration setting for log files.
-->
<xref linkend="functions-admin-genfile-table"/>で示されている関数はサーバをホスティングしているマシン上のファイルに対し、ネイティブのアクセスを提供します。
ユーザがスーパーユーザか、<literal>pg_read_server_files</literal>ロールを与えられていない限り、データベースクラスタディレクトリと<varname>log_directory</varname>に存在するファイルのみがアクセス可能です。
クラスタディレクトリ内のファイルに対して相対パスを、そしてログファイルに対しては<varname>log_directory</varname>構成設定に一致するパスを使用してください。
   </para>

   <para>
<!--
    Note that granting users the EXECUTE privilege on
    <function>pg_read_file()</function>, or related functions, allows them the
    ability to read any file on the server that the database server process can
    read; these functions bypass all in-database privilege checks.  This means
    that, for example, a user with such access is able to read the contents of
    the <structname>pg_authid</structname> table where authentication
    information is stored, as well as read any table data in the database.
    Therefore, granting access to these functions should be carefully
    considered.
-->
ユーザに対してEXECUTE権限を<function>pg_read_file()</function>あるいは関連する関数に与えることは、サーバの上データベースサーバプロセスが読めるすべてのファイルを読めるようにすることになることに注意してください。これらの関数はデータベース内のすべての権限チェックをすり抜けます。
このことは、たとえばそのようなアクセス権を持つユーザは、認証情報が格納された<structname>pg_authid</structname>テーブルの中身を読むことができますし、同様にデータベース内のすべてのテーブルデータを読むことができるということを意味します。
ですからこれらの関数にアクセス権限を与えるのは慎重に考慮したほうが良いでしょう。
   </para>

   <para>
<!--
    When granting privilege on these functions, note that the table entries
    showing optional parameters are mostly implemented as several physical
    functions with different parameter lists.  Privilege must be granted
    separately on each such function, if it is to be
    used.  <application>psql</application>'s <command>\df</command> command
    can be useful to check what the actual function signatures are.
-->
これらの関数に権限を付与する場合、オプションパラメータを示すテーブルエントリは、ほとんどの場合、異なるパラメータリストを持つ複数の物理的な関数として実装されることに注意してください。
使用する場合は、各関数に対して個別に権限を付与する必要があります。
<application>psql</application>の<command>\df</command>コマンドは、実際の関数シグネチャが何であるかをチェックするのに役立ちます。
   </para>

   <para>
<!--
    Some of these functions take an optional <parameter>missing_ok</parameter>
    parameter, which specifies the behavior when the file or directory does
    not exist.  If <literal>true</literal>, the function
    returns <literal>NULL</literal> or an empty result set, as appropriate.
    If <literal>false</literal>, an error is raised.  (Failure conditions
    other than <quote>file not found</quote> are reported as errors in any
    case.)  The default is <literal>false</literal>.
-->
これらの関数の一部はオプションで<parameter>missing_ok</parameter>パラメータをとり、ファイルまたはディレクトリが存在しない場合の動作を指定できます。
<literal>true</literal>の場合、関数は<literal>NULL</literal>を返すか、適切な場合には空の結果集合を返します。
<literal>false</literal>の場合はエラーが発生します。
（<quote>ファイルが見つかりません</quote>以外の失敗条件は、どのケースでもエラーとして報告されます。）
デフォルトは<literal>false</literal>です。
   </para>

   <table id="functions-admin-genfile-table">
<!--
    <title>Generic File Access Functions</title>
-->
    <title>汎用ファイルアクセス関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_ls_dir</primary>
        </indexterm>
        <function>pg_ls_dir</function> ( <parameter>dirname</parameter> <type>text</type> <optional>, <parameter>missing_ok</parameter> <type>boolean</type>, <parameter>include_dot_dirs</parameter> <type>boolean</type> </optional> )
        <returnvalue>setof text</returnvalue>
       </para>
       <para>
<!--
        Returns the names of all files (and directories and other special
        files) in the specified
        directory. The <parameter>include_dot_dirs</parameter> parameter
        indicates whether <quote>.</quote> and <quote>..</quote> are to be
        included in the result set; the default is to exclude them.  Including
        them can be useful when <parameter>missing_ok</parameter>
        is <literal>true</literal>, to distinguish an empty directory from a
        non-existent directory.
-->
指定されたディレクトリ内のすべてのファイル（およびディレクトリと他の特殊ファイル）の名前を返します。
<parameter>include_dot_dirs</parameter>は<quote>.</quote>と<quote>..</quote>が結果集合に含まれるかどうかを指定します。
デフォルト(<literal>false</literal>)ではそれらを除外しますが、それらを含めると、<parameter>missing_ok</parameter>が<literal>true</literal>の場合は、空のディレクトリと存在しないディレクトリを区別するために役立つでしょう。
       </para>
       <para>
<!--
        This function is restricted to superusers by default, but other users
        can be granted EXECUTE to run the function.
-->
デフォルトではこの関数の実行はスーパーユーザに限定されますが、他のユーザに関数を実行するEXECUTE権限を与えることができます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_ls_logdir</primary>
        </indexterm>
        <function>pg_ls_logdir</function> ()
        <returnvalue>setof record</returnvalue>
        ( <parameter>name</parameter> <type>text</type>,
        <parameter>size</parameter> <type>bigint</type>,
        <parameter>modification</parameter> <type>timestamp with time zone</type> )
       </para>
       <para>
<!--
        Returns the name, size, and last modification time (mtime) of each
        ordinary file in the server's log directory.  Filenames beginning with
        a dot, directories, and other special files are excluded.
-->
サーバのログディレクトリ内の各通常ファイルについて、名前、サイズ、最終更新時刻（mtime）を返します。
ドットで始まるファイル名、ディレクトリ名その他の特殊なファイルは含まれません。
       </para>
       <para>
<!--
        This function is restricted to superusers and roles with privileges of
        the <literal>pg_monitor</literal> role by default, but other users can
        be granted EXECUTE to run the function.
-->
デフォルトではこの関数の実行はスーパーユーザと<literal>pg_monitor</literal>ロールの権限を持つロールに限定されますが、他のユーザに関数を実行するEXECUTE権限を与えることができます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_ls_waldir</primary>
        </indexterm>
        <function>pg_ls_waldir</function> ()
        <returnvalue>setof record</returnvalue>
        ( <parameter>name</parameter> <type>text</type>,
        <parameter>size</parameter> <type>bigint</type>,
        <parameter>modification</parameter> <type>timestamp with time zone</type> )
       </para>
       <para>
<!--
        Returns the name, size, and last modification time (mtime) of each
        ordinary file in the server's write-ahead log (WAL) directory.
        Filenames beginning with a dot, directories, and other special files
        are excluded.
-->
先行書き込みログ（WAL）ディレクトリ内の各ファイルについて、名前、サイズ、最終更新時刻（mtime）を返します。
ドットで始まるファイル名、ディレクトリ名その他の特殊なファイルは含まれません。
       </para>
       <para>
<!--
        This function is restricted to superusers and roles with privileges of
        the <literal>pg_monitor</literal> role by default, but other users can
        be granted EXECUTE to run the function.
-->
デフォルトではこの関数の実行はスーパーユーザと<literal>pg_monitor</literal>ロールの権限を持つロールに限定されますが、他のユーザに関数を実行するEXECUTE権限を与えることができます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_ls_logicalmapdir</primary>
        </indexterm>
        <function>pg_ls_logicalmapdir</function> ()
        <returnvalue>setof record</returnvalue>
        ( <parameter>name</parameter> <type>text</type>,
        <parameter>size</parameter> <type>bigint</type>,
        <parameter>modification</parameter> <type>timestamp with time zone</type> )
       </para>
       <para>
<!--
        Returns the name, size, and last modification time (mtime) of each
        ordinary file in the server's <filename>pg_logical/mappings</filename>
        directory. Filenames beginning with a dot, directories, and other
        special files are excluded.
-->
サーバの<filename>pg_logical/mappings</filename>ディレクトリ内の各通常ファイルについて、名前、サイズ、最終更新時刻（mtime）を返します。
ドットで始まるファイル名、ディレクトリ名その他の特殊なファイルは含まれません。
       </para>
       <para>
<!--
        This function is restricted to superusers and members of
        the <literal>pg_monitor</literal> role by default, but other users can
        be granted EXECUTE to run the function.
-->
デフォルトではこの関数の実行はスーパーユーザと<literal>pg_monitor</literal>ロールのメンバに限定されますが、他のユーザに関数を実行するEXECUTE権限を与えることができます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_ls_logicalsnapdir</primary>
        </indexterm>
        <function>pg_ls_logicalsnapdir</function> ()
        <returnvalue>setof record</returnvalue>
        ( <parameter>name</parameter> <type>text</type>,
        <parameter>size</parameter> <type>bigint</type>,
        <parameter>modification</parameter> <type>timestamp with time zone</type> )
       </para>
       <para>
<!--
        Returns the name, size, and last modification time (mtime) of each
        ordinary file in the server's <filename>pg_logical/snapshots</filename>
        directory. Filenames beginning with a dot, directories, and other
        special files are excluded.
-->
サーバの<filename>pg_logical/snapshots</filename>ディレクトリ内の各通常ファイルについて、名前、サイズ、最終更新時刻（mtime）を返します。
ドットで始まるファイル名、ディレクトリ名その他の特殊なファイルは含まれません。
       </para>
       <para>
<!--
        This function is restricted to superusers and members of
        the <literal>pg_monitor</literal> role by default, but other users can
        be granted EXECUTE to run the function.
-->
デフォルトではこの関数の実行はスーパーユーザと<literal>pg_monitor</literal>ロールのメンバに限定されますが、他のユーザに関数を実行するEXECUTE権限を与えることができます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_ls_replslotdir</primary>
        </indexterm>
        <function>pg_ls_replslotdir</function> ( <parameter>slot_name</parameter> <type>text</type> )
        <returnvalue>setof record</returnvalue>
        ( <parameter>name</parameter> <type>text</type>,
        <parameter>size</parameter> <type>bigint</type>,
        <parameter>modification</parameter> <type>timestamp with time zone</type> )
       </para>
       <para>
<!--
        Returns the name, size, and last modification time (mtime) of each
        ordinary file in the server's <filename>pg_replslot/slot_name</filename>
        directory, where <parameter>slot_name</parameter> is the name of the
        replication slot provided as input of the function. Filenames beginning
        with a dot, directories, and other special files are excluded.
-->
サーバの<filename>pg_replslot/slot_name</filename>内の各ファイルについて、名前、サイズ、最終更新時刻（mtime）を返します。
<parameter>slot_name</parameter>は、関数の入力として提供されているレプリケーションスロットの名前です。
ドットで始まるファイル名、ディレクトリ名その他の特殊なファイルは含まれません。
       </para>
       <para>
<!--
        This function is restricted to superusers and members of
        the <literal>pg_monitor</literal> role by default, but other users can
        be granted EXECUTE to run the function.
-->
デフォルトではこの関数の実行はスーパーユーザと<literal>pg_monitor</literal>ロールに限定されますが、他のユーザに関数を実行するEXECUTE権限を与えることができます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_ls_archive_statusdir</primary>
        </indexterm>
        <function>pg_ls_archive_statusdir</function> ()
        <returnvalue>setof record</returnvalue>
        ( <parameter>name</parameter> <type>text</type>,
        <parameter>size</parameter> <type>bigint</type>,
        <parameter>modification</parameter> <type>timestamp with time zone</type> )
       </para>
       <para>
<!--
        Returns the name, size, and last modification time (mtime) of each
        ordinary file in the server's WAL archive status directory
        (<filename>pg_wal/archive_status</filename>).  Filenames beginning
        with a dot, directories, and other special files are excluded.
-->
WALアーカイブステータスディレクトリ(<filename>pg_wal/archive_status</filename>)内の各ファイルについて、名前、サイズ、最終更新時刻（mtime）を返します。
ドットで始まるファイル名、ディレクトリ名その他の特殊なファイルは含まれません。
       </para>
       <para>
<!--
        This function is restricted to superusers and members of
        the <literal>pg_monitor</literal> role by default, but other users can
        be granted EXECUTE to run the function.
-->
デフォルトではこの関数の実行はスーパーユーザと<literal>pg_monitor</literal>ロールのメンバに限定されますが、他のユーザに関数を実行するEXECUTE権限を与えることができます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">

        <indexterm>
         <primary>pg_ls_tmpdir</primary>
        </indexterm>
        <function>pg_ls_tmpdir</function> ( <optional> <parameter>tablespace</parameter> <type>oid</type> </optional> )
        <returnvalue>setof record</returnvalue>
        ( <parameter>name</parameter> <type>text</type>,
        <parameter>size</parameter> <type>bigint</type>,
        <parameter>modification</parameter> <type>timestamp with time zone</type> )
       </para>
       <para>
<!--
        Returns the name, size, and last modification time (mtime) of each
        ordinary file in the temporary file directory for the
        specified <parameter>tablespace</parameter>.
        If <parameter>tablespace</parameter> is not provided,
        the <literal>pg_default</literal> tablespace is examined.  Filenames
        beginning with a dot, directories, and other special files are
        excluded.
-->
指定された<parameter>tablespace</parameter>内の一時ファイルディレクトリ内の各ファイルについて、名前、サイズ、最終更新時刻（mtime）を返します。
<parameter>tablespace</parameter>が与えられなければ<literal>pg_default</literal>テーブル空間が検査されます。
ドットで始まるファイル名、ディレクトリ名その他の特殊なファイルは含まれません。
       </para>
       <para>
<!--
        This function is restricted to superusers and members of
        the <literal>pg_monitor</literal> role by default, but other users can
        be granted EXECUTE to run the function.
-->
デフォルトではこの関数の実行はスーパーユーザと<literal>pg_monitor</literal>ロールのメンバに限定されますが、他のユーザに関数を実行するEXECUTE権限を与えることができます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_read_file</primary>
        </indexterm>
        <function>pg_read_file</function> ( <parameter>filename</parameter> <type>text</type> <optional>, <parameter>offset</parameter> <type>bigint</type>, <parameter>length</parameter> <type>bigint</type> </optional> <optional>, <parameter>missing_ok</parameter> <type>boolean</type> </optional> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
<!--
        Returns all or part of a text file, starting at the
        given byte <parameter>offset</parameter>, returning at
        most <parameter>length</parameter> bytes (less if the end of file is
        reached first).  If <parameter>offset</parameter> is negative, it is
        relative to the end of the file.  If <parameter>offset</parameter>
        and <parameter>length</parameter> are omitted, the entire file is
        returned.  The bytes read from the file are interpreted as a string in
        the database's encoding; an error is thrown if they are not valid in
        that encoding.
-->
与えられた<parameter>offset</parameter>から始まり、最大<parameter>length</parameter>バイト（先にファイルの終りに到達すればこれより少なくなります）テキストファイルの全部または一部分を返します。
<parameter>offset</parameter>が負の場合にはファイルの終りから数えた位置から読み出します。
<parameter>offset</parameter>と<parameter>length</parameter>が省略された場合、ファイル全体が返されます。
ファイルから読み込まれたバイトは、そのサーバの符号化方式での文字列として解釈されます。
読み込んだバイト列がその符号化方式において有効でない場合にはエラーが投げられます。
       </para>
       <para>
<!--
        This function is restricted to superusers by default, but other users
        can be granted EXECUTE to run the function.
-->
デフォルトではこの関数の実行はスーパーユーザに限定されますが、他のユーザに関数を実行するEXECUTE権限を与えることができます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_read_binary_file</primary>
        </indexterm>
        <function>pg_read_binary_file</function> ( <parameter>filename</parameter> <type>text</type> <optional>, <parameter>offset</parameter> <type>bigint</type>, <parameter>length</parameter> <type>bigint</type> </optional> <optional>, <parameter>missing_ok</parameter> <type>boolean</type> </optional> )
        <returnvalue>bytea</returnvalue>
       </para>
       <para>
<!--
        Returns all or part of a file.  This function is identical to
        <function>pg_read_file</function> except that it can read arbitrary
        binary data, returning the result as <type>bytea</type>
        not <type>text</type>; accordingly, no encoding checks are performed.
-->
ファイルの一部あるいは全部を返します。
結果が<type>text</type>ではなくて<type>bytea</type>値となり、任意のバイナリデータを読み出すことができることを除き、<function>pg_read_file</function>と同じです。
従って符号化方式の検査は行われません。
       </para>
       <para>
<!--
        This function is restricted to superusers by default, but other users
        can be granted EXECUTE to run the function.
-->
デフォルトではこの関数の実行はスーパーユーザに限定されますが、他のユーザに関数を実行するEXECUTE権限を与えることができます。
       </para>
       <para>
<!--
        In combination with the <function>convert_from</function> function,
        this function can be used to read a text file in a specified encoding
        and convert to the database's encoding:
-->
<function>convert_from</function>関数と組み合わせることで、この関数を、指定した符号化方式でファイルを読み込んでデータベース符号化方式に変換することができます。
<programlisting>
SELECT convert_from(pg_read_binary_file('file_in_utf8.txt'), 'UTF8');
</programlisting>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_file</primary>
        </indexterm>
        <function>pg_stat_file</function> ( <parameter>filename</parameter> <type>text</type> <optional>, <parameter>missing_ok</parameter> <type>boolean</type> </optional> )
        <returnvalue>record</returnvalue>
        ( <parameter>size</parameter> <type>bigint</type>,
        <parameter>access</parameter> <type>timestamp with time zone</type>,
        <parameter>modification</parameter> <type>timestamp with time zone</type>,
        <parameter>change</parameter> <type>timestamp with time zone</type>,
        <parameter>creation</parameter> <type>timestamp with time zone</type>,
        <parameter>isdir</parameter> <type>boolean</type> )
       </para>
       <para>
<!--
        Returns a record containing the file's size, last access time stamp,
        last modification time stamp, last file status change time stamp (Unix
        platforms only), file creation time stamp (Windows only), and a flag
        indicating if it is a directory.
-->
ファイル容量、最終アクセス時刻、最終更新時刻、最後にファイルステータスを変更した時刻（これはUnixプラットフォームのみ）、ファイル作成時刻（Windowsのみ）および、ディレクトリかどうかを示すフラグを返します。
       </para>
       <para>
<!--
        This function is restricted to superusers by default, but other users
        can be granted EXECUTE to run the function.
-->
デフォルトではこの関数の実行はスーパーユーザに限定されますが、他のユーザに関数を実行するEXECUTE権限を与えることができます。
       </para></entry>
      </row>

     </tbody>
    </tgroup>
   </table>

  </sect2>

  <sect2 id="functions-advisory-locks">
<!--
   <title>Advisory Lock Functions</title>
-->
   <title>勧告的ロック用関数</title>

   <para>
<!--
    The functions shown in <xref linkend="functions-advisory-locks-table"/>
    manage advisory locks.  For details about proper use of these functions,
    see <xref linkend="advisory-locks"/>.
-->
<xref linkend="functions-advisory-locks-table"/>に示す関数は勧告的ロックを管理します。
これらの関数の適切な使用方法についての詳細は、<xref linkend="advisory-locks"/>を参照してください。
   </para>

   <para>
<!--
    All these functions are intended to be used to lock application-defined
    resources, which can be identified either by a single 64-bit key value or
    two 32-bit key values (note that these two key spaces do not overlap).
    If another session already holds a conflicting lock on the same resource
    identifier, the functions will either wait until the resource becomes
    available, or return a <literal>false</literal> result, as appropriate for
    the function.
    Locks can be either shared or exclusive: a shared lock does not conflict
    with other shared locks on the same resource, only with exclusive locks.
    Locks can be taken at session level (so that they are held until released
    or the session ends) or at transaction level (so that they are held until
    the current transaction ends; there is no provision for manual release).
    Multiple session-level lock requests stack, so that if the same resource
    identifier is locked three times there must then be three unlock requests
    to release the resource in advance of session end.
-->
これらの関数はすべて単一の64ビットキー値か2つの32ビットキー値（これらのキー空間は重なり合わないことに注意してください）で識別されるアプリケーション定義のリソースをロックするために使うことを意図しています。
他のセッションがすでに同じリソース識別子とコンフリクトするロックを保持していたら、関数はリソースが利用可能になるまで待つか、その関数にとって適切ならば<literal>false</literal>を結果として返します。
ロックは共有はあるいは排他のどちらも可能です。共有ロックは同じリソースに対して他の共有ロックとコンフリクトしません。排他ロックとだけコンフリクトします。
ロックはセッションレベル（ロックは解放されるまで保持するかセッションの終了まで保持します）あるいはトランザクションレベル（ロックは現在のトランザクションが終了するまで保持します。手動で解放する方法はありません）で取得できます。
複数のセッションレベルロック要求は積み重ねられます。これにより、同じリソース識別子が3回ロックされると、セッション終了前にそのリソースを解放するアンロック要求が3回発行されなければならなくなります。
   </para>

   <table id="functions-advisory-locks-table">
<!--
    <title>Advisory Lock Functions</title>
-->
    <title>勧告的ロック用関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_advisory_lock</primary>
        </indexterm>
        <function>pg_advisory_lock</function> ( <parameter>key</parameter> <type>bigint</type> )
        <returnvalue>void</returnvalue>
       </para>
       <para role="func_signature">
        <function>pg_advisory_lock</function> ( <parameter>key1</parameter> <type>integer</type>, <parameter>key2</parameter> <type>integer</type> )
        <returnvalue>void</returnvalue>
       </para>
       <para>
<!--
        Obtains an exclusive session-level advisory lock, waiting if necessary.
-->
必要なら待ってからセッションレベルの排他勧告的ロックを獲得します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_advisory_lock_shared</primary>
        </indexterm>
        <function>pg_advisory_lock_shared</function> ( <parameter>key</parameter> <type>bigint</type> )
        <returnvalue>void</returnvalue>
       </para>
       <para role="func_signature">
        <function>pg_advisory_lock_shared</function> ( <parameter>key1</parameter> <type>integer</type>, <parameter>key2</parameter> <type>integer</type> )
        <returnvalue>void</returnvalue>
       </para>
       <para>
<!--
        Obtains a shared session-level advisory lock, waiting if necessary.
-->
必要なら待ってからセッションレベルの共有勧告的ロックを獲得します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_advisory_unlock</primary>
        </indexterm>
        <function>pg_advisory_unlock</function> ( <parameter>key</parameter> <type>bigint</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <function>pg_advisory_unlock</function> ( <parameter>key1</parameter> <type>integer</type>, <parameter>key2</parameter> <type>integer</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Releases a previously-acquired exclusive session-level advisory lock.
        Returns <literal>true</literal> if the lock is successfully released.
        If the lock was not held, <literal>false</literal> is returned, and in
        addition, an SQL warning will be reported by the server.
-->
事前に獲得したセッションレベルの排他的勧告ロックを解放します。
ロックの解放に成功した場合、<literal>true</literal>を返します。
ロックを保持していない場合、<literal>false</literal>を返し、さらに、SQL警告がサーバから報告されます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_advisory_unlock_all</primary>
        </indexterm>
        <function>pg_advisory_unlock_all</function> ()
        <returnvalue>void</returnvalue>
       </para>
       <para>
<!--
        Releases all session-level advisory locks held by the current session.
        (This function is implicitly invoked at session end, even if the
        client disconnects ungracefully.)
-->
現在のセッションで保持するセッションレベルの勧告的ロックをすべて解放します。
（この関数は、クライアントとの接続が不用意に切れた場合でも、セッション終了時に暗黙的に呼び出されます。）
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_advisory_unlock_shared</primary>
        </indexterm>
        <function>pg_advisory_unlock_shared</function> ( <parameter>key</parameter> <type>bigint</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <function>pg_advisory_unlock_shared</function> ( <parameter>key1</parameter> <type>integer</type>, <parameter>key2</parameter> <type>integer</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Releases a previously-acquired shared session-level advisory lock.
        Returns <literal>true</literal> if the lock is successfully released.
        If the lock was not held, <literal>false</literal> is returned, and in
        addition, an SQL warning will be reported by the server.
-->
事前に獲得したセッションレベルの共有勧告的ロックを解放します。
ロックの解放に成功した場合、<literal>true</literal>を返します。
ロックを保持していない場合、<literal>false</literal>を返し、さらに、SQL警告がサーバから報告されます。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_advisory_xact_lock</primary>
        </indexterm>
        <function>pg_advisory_xact_lock</function> ( <parameter>key</parameter> <type>bigint</type> )
        <returnvalue>void</returnvalue>
       </para>
       <para role="func_signature">
        <function>pg_advisory_xact_lock</function> ( <parameter>key1</parameter> <type>integer</type>, <parameter>key2</parameter> <type>integer</type> )
        <returnvalue>void</returnvalue>
       </para>
       <para>
<!--
        Obtains an exclusive transaction-level advisory lock, waiting if
        necessary.
-->
必要なら待ってからトランザクションレベルの排他勧告的ロックを獲得します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_advisory_xact_lock_shared</primary>
        </indexterm>
        <function>pg_advisory_xact_lock_shared</function> ( <parameter>key</parameter> <type>bigint</type> )
        <returnvalue>void</returnvalue>
       </para>
       <para role="func_signature">
        <function>pg_advisory_xact_lock_shared</function> ( <parameter>key1</parameter> <type>integer</type>, <parameter>key2</parameter> <type>integer</type> )
        <returnvalue>void</returnvalue>
       </para>
       <para>
<!--
        Obtains a shared transaction-level advisory lock, waiting if
        necessary.
-->
必要なら待ってからトランザクションレベルの共有勧告的ロックを獲得します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_try_advisory_lock</primary>
        </indexterm>
        <function>pg_try_advisory_lock</function> ( <parameter>key</parameter> <type>bigint</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <function>pg_try_advisory_lock</function> ( <parameter>key1</parameter> <type>integer</type>, <parameter>key2</parameter> <type>integer</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Obtains an exclusive session-level advisory lock if available.
        This will either obtain the lock immediately and
        return <literal>true</literal>, or return <literal>false</literal>
        without waiting if the lock cannot be acquired immediately.
-->
可能ならセッションレベルの排他勧告的ロックを獲得します。
これは直ちにロックを取得して<literal>true</literal>を返すか、直ちにロックを取得できない場合は待たずに<literal>false</literal>を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_try_advisory_lock_shared</primary>
        </indexterm>
        <function>pg_try_advisory_lock_shared</function> ( <parameter>key</parameter> <type>bigint</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <function>pg_try_advisory_lock_shared</function> ( <parameter>key1</parameter> <type>integer</type>, <parameter>key2</parameter> <type>integer</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Obtains a shared session-level advisory lock if available.
        This will either obtain the lock immediately and
        return <literal>true</literal>, or return <literal>false</literal>
        without waiting if the lock cannot be acquired immediately.
-->
可能ならセッションレベルの共有勧告的ロックを獲得します。
これは直ちにロックを取得して<literal>true</literal>を返すか、直ちにロックを取得できない場合は待たずに<literal>false</literal>を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_try_advisory_xact_lock</primary>
        </indexterm>
        <function>pg_try_advisory_xact_lock</function> ( <parameter>key</parameter> <type>bigint</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <function>pg_try_advisory_xact_lock</function> ( <parameter>key1</parameter> <type>integer</type>, <parameter>key2</parameter> <type>integer</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Obtains an exclusive transaction-level advisory lock if available.
        This will either obtain the lock immediately and
        return <literal>true</literal>, or return <literal>false</literal>
        without waiting if the lock cannot be acquired immediately.
-->
可能ならトランザクションレベルの排他勧告的ロックを獲得します。
これは直ちにロックを取得して<literal>true</literal>を返すか、直ちにロックを取得できない場合は待たずに<literal>false</literal>を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_try_advisory_xact_lock_shared</primary>
        </indexterm>
        <function>pg_try_advisory_xact_lock_shared</function> ( <parameter>key</parameter> <type>bigint</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <function>pg_try_advisory_xact_lock_shared</function> ( <parameter>key1</parameter> <type>integer</type>, <parameter>key2</parameter> <type>integer</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Obtains a shared transaction-level advisory lock if available.
        This will either obtain the lock immediately and
        return <literal>true</literal>, or return <literal>false</literal>
        without waiting if the lock cannot be acquired immediately.
-->
可能ならトランザクションレベルの共有勧告的ロックを獲得します。
これは直ちにロックを取得して<literal>true</literal>を返すか、直ちにロックを取得できない場合は待たずに<literal>false</literal>を返します。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  </sect2>

  </sect1>

  <sect1 id="functions-trigger">
<!--
   <title>Trigger Functions</title>
-->
   <title>トリガ関数</title>

  <para>
<!--
   While many uses of triggers involve user-written trigger functions,
   <productname>PostgreSQL</productname> provides a few built-in trigger
   functions that can be used directly in user-defined triggers.  These
   are summarized in <xref linkend="builtin-triggers-table"/>.
   (Additional built-in trigger functions exist, which implement foreign
   key constraints and deferred index constraints.  Those are not documented
   here since users need not use them directly.)
-->
多くの場合トリガにはユーザ記述のトリガ関数が必要になりますが、<productname>PostgreSQL</productname>はユーザ定義トリガで直接使用できる小数の組み込みの取り化関数を提供しています。
これらは<xref linkend="builtin-triggers-table"/>にまとめられています。
（追加の組み込みトリガ関数があり、外部キー制約と遅延インデックス制約を実装しています。
ユーザがこれらを直接必要とすることはないので、ここには記述されていません。）
  </para>

  <para>
<!--
   For more information about creating triggers, see
   <xref linkend="sql-createtrigger"/>.
-->
トリガ作成についてのより詳細は<xref linkend="sql-createtrigger"/>を参照してください。
  </para>

   <table id="builtin-triggers-table">
<!--
    <title>Built-In Trigger Functions</title>
-->
    <title>組み込みトリガ関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para>
       <para>
<!--
        Example Usage
-->
使用例
       </para></entry>
      </row>
     </thead>

     <tbody>
       <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>suppress_redundant_updates_trigger</primary>
        </indexterm>
        <function>suppress_redundant_updates_trigger</function> ( )
        <returnvalue>trigger</returnvalue>
       </para>
       <para>
<!--
        Suppresses do-nothing update operations.  See below for details.
-->
do-nothing更新操作を抑止します。
詳細は以下を参照してください。
       </para>
       <para>
        <literal>CREATE TRIGGER ... suppress_redundant_updates_trigger()</literal>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>tsvector_update_trigger</primary>
        </indexterm>
        <function>tsvector_update_trigger</function> ( )
        <returnvalue>trigger</returnvalue>
       </para>
       <para>
<!--
        Automatically updates a <type>tsvector</type> column from associated
        plain-text document column(s).  The text search configuration to use
        is specified by name as a trigger argument.  See
        <xref linkend="textsearch-update-triggers"/> for details.
-->
関連付けされた平文文書列から自動的に<type>tsvector</type>列を更新します。
使用するテキスト検索設定はトリガ引数で指定します。
詳細は<xref linkend="textsearch-update-triggers"/>をご覧ください。
       </para>
       <para>
        <literal>CREATE TRIGGER ... tsvector_update_trigger(tsvcol, 'pg_catalog.swedish', title, body)</literal>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>tsvector_update_trigger_column</primary>
        </indexterm>
        <function>tsvector_update_trigger_column</function> ( )
        <returnvalue>trigger</returnvalue>
       </para>
       <para>
<!--
        Automatically updates a <type>tsvector</type> column from associated
        plain-text document column(s).  The text search configuration to use
        is taken from a <type>regconfig</type> column of the table.  See
        <xref linkend="textsearch-update-triggers"/> for details.
-->
関連付けされた平文文書列から自動的に<type>tsvector</type>列を更新します。
使用するテキスト検索設定はテーブルの<type>regconfig</type>列が用いられます。
詳細は<xref linkend="textsearch-update-triggers"/>をご覧ください。
       </para>
       <para>
        <literal>CREATE TRIGGER ... tsvector_update_trigger_column(tsvcol, tsconfigcol, title, body)</literal>
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
      The <function>suppress_redundant_updates_trigger</function> function,
      when applied as a row-level <literal>BEFORE UPDATE</literal> trigger,
      will prevent any update that does not actually change the data in the
      row from taking place.  This overrides the normal behavior which always
      performs a physical row update
      regardless of whether or not the data has changed. (This normal behavior
      makes updates run faster, since no checking is required, and is also
      useful in certain cases.)
-->
行レベル<literal>BEFORE UPDATE</literal>トリガとして<function>suppress_redundant_updates_trigger</function>関数が適用されると、実際には行の中でデータを変更しない更新が行われるのを防ぎます。
これはデータが変更されるかどうかに関わらず、物理的に行の更新を行う通常の振る舞いを置き換えます。
（この通常の動作は、検査を必要としないため更新をより迅速に行い、場合によっては便利です。）
    </para>

    <para>
<!--
      Ideally, you should avoid running updates that don't actually
      change the data in the record. Redundant updates can cost considerable
      unnecessary time, especially if there are lots of indexes to alter,
      and space in dead rows that will eventually have to be vacuumed.
      However, detecting such situations in client code is not
      always easy, or even possible, and writing expressions to detect
      them can be error-prone. An alternative is to use
      <function>suppress_redundant_updates_trigger</function>, which will skip
      updates that don't change the data. You should use this with care,
      however. The trigger takes a small but non-trivial time for each record,
      so if most of the records affected by updates do actually change,
      use of this trigger will make updates run slower on average.
-->
理想的には、通常実際レコード内のデータを変更しない更新の実行を避けるべきです。
冗長な更新により、特に変更対象の多くのインデックスが存在する場合、無視できない不要な時間にかかるコストが発生することがあります。
また、最後にはバキュームしなければならなくなる不要行が場所を取ることになります。
しかし、こうした状況をクライアント側で判定することは常に簡単ではありません。
また、可能であったとしても、それを検知するための式の記述はエラーを招きがちです。
他の方法として、<function>suppress_redundant_updates_trigger</function>を使用することがあります。
これはデータを変更しない更新をスキップします。
しかしこの関数は注意して使用しなければなりません。
このトリガはレコードごとに小さな、しかし僅かではない時間がかかります。
このため、更新が影響するレコードのほとんどが実際に変更された場合、このトリガは平均すると更新の実行を低速にします。
    </para>

    <para>
<!--
      The <function>suppress_redundant_updates_trigger</function> function can be
      added to a table like this:
-->
<function>suppress_redundant_updates_trigger</function>関数は以下のようにテーブルに追加できます。
<programlisting>
CREATE TRIGGER z_min_update
BEFORE UPDATE ON tablename
FOR EACH ROW EXECUTE FUNCTION suppress_redundant_updates_trigger();
</programlisting>
<!--
      In most cases, you need to fire this trigger last for each row, so that
      it does not override other triggers that might wish to alter the row.
      Bearing in mind that triggers fire in name order, you would therefore
      choose a trigger name that comes after the name of any other trigger
      you might have on the table.  (Hence the <quote>z</quote> prefix in the
      example.)
-->
ほとんどの場合、行を変更するかも知れない他のトリガを置き換えないために、それぞれの行に対しこのトリガを最後に起動させる必要があります。
トリガは名前順に起動されることを判っているとして、テーブル上に存在する可能性のある他のトリガの名前の後に続くようトリガ名を選択できます。
（それで例中に<quote>z</quote>接頭辞があります。）
    </para>
  </sect1>

  <sect1 id="functions-event-triggers">
<!--
   <title>Event Trigger Functions</title>
-->
   <title>イベントトリガ関数</title>

   <para>
<!--
    <productname>PostgreSQL</productname> provides these helper functions
    to retrieve information from event triggers.
-->
<productname>PostgreSQL</productname>はイベントトリガについての情報を取得するために以下のヘルパ関数を提供しています。
   </para>

   <para>
<!--
    For more information about event triggers,
    see <xref linkend="event-triggers"/>.
-->
イベントトリガについての詳細は<xref linkend="event-triggers"/>を参照して下さい。
   </para>

  <sect2 id="pg-event-trigger-ddl-command-end-functions">
<!--
   <title>Capturing Changes at Command End</title>
-->
   <title>コマンド側での変更を捕らえる</title>

   <indexterm>
    <primary>pg_event_trigger_ddl_commands</primary>
   </indexterm>

<synopsis>
<function>pg_event_trigger_ddl_commands</function> () <returnvalue>setof record</returnvalue>
</synopsis>

   <para>
<!--
    <function>pg_event_trigger_ddl_commands</function> returns a list of
    <acronym>DDL</acronym> commands executed by each user action,
    when invoked in a function attached to a
    <literal>ddl_command_end</literal> event trigger.  If called in any other
    context, an error is raised.
    <function>pg_event_trigger_ddl_commands</function> returns one row for each
    base command executed; some commands that are a single SQL sentence
    may return more than one row.  This function returns the following
    columns:
-->
<function>pg_event_trigger_ddl_commands</function>が<literal>ddl_command_end</literal>イベントトリガに付与された関数から起動されると、各ユーザの操作によって実行された<acronym>DDL</acronym>コマンドの一覧を返します。
それ以外の環境から呼び出された場合はエラーが発生します。
<function>pg_event_trigger_ddl_commands</function>は、実行された基となるコマンドのそれぞれについて1行を返します。
1つのSQL文として実行されるいくつかのコマンドに対して、複数の行が返されることもあります。
この関数は以下の列を返します。

    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
<!--
        <entry>Name</entry>
-->
        <entry>名前</entry>
<!--
        <entry>Type</entry>
-->
        <entry>型</entry>
<!--
        <entry>Description</entry>
-->
        <entry>説明</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><literal>classid</literal></entry>
        <entry><type>oid</type></entry>
<!--
        <entry>OID of catalog the object belongs in</entry>
-->
        <entry>オブジェクトが属するカタログのOID</entry>
       </row>
       <row>
        <entry><literal>objid</literal></entry>
        <entry><type>oid</type></entry>
<!--
        <entry>OID of the object itself</entry>
-->
        <entry>カタログ内のオブジェクトのOID</entry>
       </row>
       <row>
        <entry><literal>objsubid</literal></entry>
        <entry><type>integer</type></entry>
<!--
        <entry>Sub-object ID (e.g., attribute number for a column)</entry>
-->
        <entry>オブジェクトのサブID（例えば、列の列番号）</entry>
       </row>
       <row>
        <entry><literal>command_tag</literal></entry>
        <entry><type>text</type></entry>
<!--
        <entry>Command tag</entry>
-->
        <entry>コマンドのタグ</entry>
       </row>
       <row>
        <entry><literal>object_type</literal></entry>
        <entry><type>text</type></entry>
<!--
        <entry>Type of the object</entry>
-->
        <entry>オブジェクトの型</entry>
       </row>
       <row>
        <entry><literal>schema_name</literal></entry>
        <entry><type>text</type></entry>
        <entry>
<!--
         Name of the schema the object belongs in, if any; otherwise <literal>NULL</literal>.
         No quoting is applied.
-->
オブジェクトが属するスキーマの名前（あれば）。
なければ<literal>NULL</literal>。
引用符づけされない。
        </entry>
       </row>
       <row>
        <entry><literal>object_identity</literal></entry>
        <entry><type>text</type></entry>
        <entry>
<!--
         Text rendering of the object identity, schema-qualified. Each
         identifier included in the identity is quoted if necessary.
-->
オブジェクトの識別をテキスト表現したもので、スキーマ修飾される。
識別内に存在する各識別子は、必要なら引用符で括られる。
        </entry>
       </row>
       <row>
        <entry><literal>in_extension</literal></entry>
        <entry><type>boolean</type></entry>
<!--
        <entry>True if the command is part of an extension script</entry>
-->
        <entry>コマンドが拡張のスクリプトの一部なら真</entry>
       </row>
       <row>
        <entry><literal>command</literal></entry>
        <entry><type>pg_ddl_command</type></entry>
        <entry>
<!--
         A complete representation of the command, in internal format.
         This cannot be output directly, but it can be passed to other
         functions to obtain different pieces of information about the
         command.
-->
コマンドを内部形式で完全に表現したもの。
これを直接出力することはできないが、コマンドについて他の情報を得るために、他の関数に渡すことができる。
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </para>
  </sect2>

  <sect2 id="pg-event-trigger-sql-drop-functions">
<!--
   <title>Processing Objects Dropped by a DDL Command</title>
-->
   <title>DDLコマンドで削除されたオブジェクトの処理</title>

   <indexterm>
     <primary>pg_event_trigger_dropped_objects</primary>
   </indexterm>

<synopsis>
<function>pg_event_trigger_dropped_objects</function> () <returnvalue>setof record</returnvalue>
</synopsis>

   <para>
<!--
    <function>pg_event_trigger_dropped_objects</function> returns a list of all objects
    dropped by the command in whose <literal>sql_drop</literal> event it is called.
    If called in any other context, an error is raised.
    This function returns the following columns:
-->
関数<function>pg_event_trigger_dropped_objects</function>は、それが呼ばれた<literal>sql_drop</literal>イベントのコマンドにより削除された全てのオブジェクトのリストを返します。
それ以外の状況で呼ばれた場合、エラーが生じます。
この関数は以下の列を返します。

    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
<!--
        <entry>Name</entry>
-->
        <entry>名前</entry>
<!--
        <entry>Type</entry>
-->
        <entry>型</entry>
<!--
        <entry>Description</entry>
-->
        <entry>説明</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><literal>classid</literal></entry>
        <entry><type>oid</type></entry>
<!--
        <entry>OID of catalog the object belonged in</entry>
-->
        <entry>オブジェクトが所属するカタログのOID</entry>
       </row>
       <row>
        <entry><literal>objid</literal></entry>
        <entry><type>oid</type></entry>
<!--
        <entry>OID of the object itself</entry>
-->
        <entry>カタログ内に所有するオブジェクトのOID</entry>
       </row>
       <row>
        <entry><literal>objsubid</literal></entry>
        <entry><type>integer</type></entry>
<!--
        <entry>Sub-object ID (e.g., attribute number for a column)</entry>
-->
        <entry>オブジェクトのサブID（例えば、列の列番号）</entry>
       </row>
       <row>
        <entry><literal>original</literal></entry>
        <entry><type>boolean</type></entry>
<!--
        <entry>True if this was one of the root object(s) of the deletion</entry>
-->
        <entry>これが削除のルートオブジェクトの一つなら真</entry>
       </row>
       <row>
        <entry><literal>normal</literal></entry>
        <entry><type>boolean</type></entry>
        <entry>
<!--
         True if there was a normal dependency relationship
         in the dependency graph leading to this object
-->
このオブジェクトへと至る依存関係グラフで、通常の依存があるなら真
        </entry>
       </row>
       <row>
        <entry><literal>is_temporary</literal></entry>
        <entry><type>boolean</type></entry>
        <entry>
<!--
         True if this was a temporary object
-->
オブジェクトが一時オブジェクトであったなら真
        </entry>
       </row>
       <row>
        <entry><literal>object_type</literal></entry>
        <entry><type>text</type></entry>
<!--
        <entry>Type of the object</entry>
-->
        <entry>オブジェクトの型</entry>
       </row>
       <row>
        <entry><literal>schema_name</literal></entry>
        <entry><type>text</type></entry>
        <entry>
<!--
         Name of the schema the object belonged in, if any; otherwise <literal>NULL</literal>.
         No quoting is applied.
-->
オブジェクトが所属しているスキーマの名前（あれば）。
なければ<literal>NULL</literal>。
引用符づけされない。
        </entry>
       </row>
       <row>
        <entry><literal>object_name</literal></entry>
        <entry><type>text</type></entry>
        <entry>
<!--
         Name of the object, if the combination of schema and name can be
         used as a unique identifier for the object; otherwise <literal>NULL</literal>.
         No quoting is applied, and name is never schema-qualified.
-->
スキーマと名前の組み合わせがオブジェクトに対する一意の識別子として使用可能な場合はオブジェクトの名前。そうでないときは<literal>NULL</literal>。
引用符は適用されず、名前は決してスキーマで修飾されない。
        </entry>
       </row>
       <row>
        <entry><literal>object_identity</literal></entry>
        <entry><type>text</type></entry>
        <entry>
<!--
         Text rendering of the object identity, schema-qualified. Each
         identifier included in the identity is quoted if necessary.
-->
オブジェクト識別のテキスト表現で、スキーマ修飾される。
識別内に存在する各識別子は必要であれば引用符で括られる。
        </entry>
       </row>
       <row>
        <entry><literal>address_names</literal></entry>
        <entry><type>text[]</type></entry>
        <entry>
<!--
         An array that, together with <literal>object_type</literal> and
         <literal>address_args</literal>, can be used by
         the <function>pg_get_object_address</function> function to
         recreate the object address in a remote server containing an
         identically named object of the same kind.
-->
<literal>object_type</literal>および<literal>address_args</literal>と一緒に<function>pg_get_object_address()</function>で使うことで、同じ種類で全く同じ名前のオブジェクトを含むリモートサーバ内のオブジェクトアドレスを再作成できる配列。
        </entry>
       </row>
       <row>
        <entry><literal>address_args</literal></entry>
        <entry><type>text[]</type></entry>
        <entry>
<!--
         Complement for <literal>address_names</literal>
-->
<literal>address_names</literal>の補足。
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </para>

   <para>
<!--
    The <function>pg_event_trigger_dropped_objects</function> function can be used
    in an event trigger like this:
-->
関数<function>pg_event_trigger_dropped_objects</function>は以下のようにイベントトリガとして使用可能です。
<programlisting>
CREATE FUNCTION test_event_trigger_for_drops()
        RETURNS event_trigger LANGUAGE plpgsql AS $$
DECLARE
    obj record;
BEGIN
    FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
    LOOP
        RAISE NOTICE '% dropped object: % %.% %',
                     tg_tag,
                     obj.object_type,
                     obj.schema_name,
                     obj.object_name,
                     obj.object_identity;
    END LOOP;
END;
$$;
CREATE EVENT TRIGGER test_event_trigger_for_drops
   ON sql_drop
   EXECUTE FUNCTION test_event_trigger_for_drops();
</programlisting>
    </para>
  </sect2>

  <sect2 id="pg-event-trigger-table-rewrite-functions">
<!--
   <title>Handling a Table Rewrite Event</title>
-->
   <title>テーブル書き換えイベントの処理</title>

   <para>
<!--
    The functions shown in
    <xref linkend="functions-event-trigger-table-rewrite"/>
    provide information about a table for which a
    <literal>table_rewrite</literal> event has just been called.
    If called in any other context, an error is raised.
-->
<xref linkend="functions-event-trigger-table-rewrite"/>に示す関数は、<literal>table_rewrite</literal>イベントが呼び出されたばかりのテーブルについての情報を提供します。
それ以外の状況で呼び出された場合はエラーが発生します。
   </para>

   <table id="functions-event-trigger-table-rewrite">
<!--
    <title>Table Rewrite Information Functions</title>
-->
    <title>テーブル書き換え情報関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->
関数
       </para>
       <para>
<!--
        Description
-->
説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_event_trigger_table_rewrite_oid</primary>
        </indexterm>
        <function>pg_event_trigger_table_rewrite_oid</function> ()
        <returnvalue>oid</returnvalue>
       </para>
       <para>
<!--
        Returns the OID of the table about to be rewritten.
-->
書き換えようとされているテーブルのOIDを返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_event_trigger_table_rewrite_reason</primary>
        </indexterm>
        <function>pg_event_trigger_table_rewrite_reason</function> ()
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Returns a code explaining the reason(s) for rewriting.  The exact
        meaning of the codes is release dependent.
-->
書き換えの理由を説明する理由コードを返します。
コードの正確な意味はリリースに依存します。
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<!--
    These functions can be used in an event trigger like this:
-->
これらの関数はイベントトリガ中で次のように使用できます。
<programlisting>
CREATE FUNCTION test_event_trigger_table_rewrite_oid()
 RETURNS event_trigger
 LANGUAGE plpgsql AS
$$
BEGIN
  RAISE NOTICE 'rewriting table % for reason %',
                pg_event_trigger_table_rewrite_oid()::regclass,
                pg_event_trigger_table_rewrite_reason();
END;
$$;

CREATE EVENT TRIGGER test_table_rewrite_oid
                  ON table_rewrite
   EXECUTE FUNCTION test_event_trigger_table_rewrite_oid();
</programlisting>
    </para>
  </sect2>
  </sect1>

  <sect1 id="functions-statistics">
<!--
   <title>Statistics Information Functions</title>
-->
   <title>統計情報関数</title>

   <indexterm zone="functions-statistics">
    <primary>function</primary>
    <secondary>statistics</secondary>
   </indexterm>
   <indexterm zone="functions-statistics">
    <primary>関数</primary>
    <secondary>統計</secondary>
   </indexterm>

   <para>
<!--
    <productname>PostgreSQL</productname> provides a function to inspect complex
    statistics defined using the <command>CREATE STATISTICS</command> command.
-->
<productname>PostgreSQL</productname>は<command>CREATE STATISTICS</command>コマンドを使って定義した複雑な統計を調べる関数を提供しています。
   </para>

  <sect2 id="functions-statistics-mcv">
<!--
   <title>Inspecting MCV Lists</title>
-->
   <title>MCVリストの検査</title>

   <indexterm>
    <primary>pg_mcv_list_items</primary>
   </indexterm>

<synopsis>
<function>pg_mcv_list_items</function> ( <type>pg_mcv_list</type> ) <returnvalue>setof record</returnvalue>
</synopsis>

   <para>
<!--
    <function>pg_mcv_list_items</function> returns a set of records describing
    all items stored in a multi-column <acronym>MCV</acronym> list.  It
    returns the following columns:
-->
<function>pg_mcv_list_items</function>は複数列<acronym>MCV</acronym>リストに格納されたすべての項目を列挙します。
この関数は次の列を返します。

    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
<!--
        <entry>Name</entry>
-->
        <entry>名前</entry>
<!--
        <entry>Type</entry>
-->
        <entry>型</entry>
<!--
        <entry>Description</entry>
-->
        <entry>説明</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><literal>index</literal></entry>
        <entry><type>integer</type></entry>
<!--
        <entry>index of the item in the <acronym>MCV</acronym> list</entry>
-->
        <entry><acronym>MCV</acronym>リスト内の項目のインデックス</entry>
       </row>
       <row>
        <entry><literal>values</literal></entry>
        <entry><type>text[]</type></entry>
<!--
        <entry>values stored in the MCV item</entry>
-->
        <entry>MCV項目に格納された値</entry>
       </row>
       <row>
        <entry><literal>nulls</literal></entry>
        <entry><type>boolean[]</type></entry>
<!--
        <entry>flags identifying <literal>NULL</literal> values</entry>
-->
        <entry><literal>NULL</literal>値を識別するフラグ</entry>
       </row>
       <row>
        <entry><literal>frequency</literal></entry>
        <entry><type>double precision</type></entry>
<!--
        <entry>frequency of this <acronym>MCV</acronym> item</entry>
-->
        <entry>この<acronym>MCV</acronym>項目の頻度</entry>
       </row>
       <row>
        <entry><literal>base_frequency</literal></entry>
        <entry><type>double precision</type></entry>
<!--
        <entry>base frequency of this <acronym>MCV</acronym> item</entry>
-->
        <entry>この<acronym>MCV</acronym>項目のベース頻度</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </para>

   <para>
<!--
    The <function>pg_mcv_list_items</function> function can be used like this:
-->
<function>pg_mcv_list_items</function>関数は次のように使用することができます。

<programlisting>
SELECT m.* FROM pg_statistic_ext join pg_statistic_ext_data on (oid = stxoid),
                pg_mcv_list_items(stxdmcv) m WHERE stxname = 'stts';
</programlisting>

<!--
    Values of the <type>pg_mcv_list</type> type can be obtained only from the
    <structname>pg_statistic_ext_data</structname>.<structfield>stxdmcv</structfield>
    column.
-->
<type>pg_mcv_list</type>型の値は<structname>pg_statistic_ext_data</structname>.<structfield>stxdmcv</structfield>列からのみ得られます。
   </para>
  </sect2>

  </sect1>

</chapter>
<!-- split-func4-end -->
