<!-- 警告：このファイルは直接編集しないでください！
1. config.sgmlを編集したら、split-config.shを起動します。
2. するとconfig[0-3].sgmlが生成されます。
3. config.sgmlとともにconfig[0-3].sgmlのうち変更されたファイルをcommit/pushしてpull requestを作成してください。
4. レビューはconfig[0-3].sgmlに対して行います。
5. 指摘された点があればconfig.sgmlに反映し、1に戻ります。
6. config.sgmlの変更がなければ、pull requestをマージして終了です。お疲れ様でした！
-->
<!-- split-config1-start -->

   <sect1 id="runtime-config-wal">
<!--
    <title>Write Ahead Log</title>
-->
    <title>先行書き込みログ（WAL）</title>

   <para>
<!--
    For additional information on tuning these settings,
    see <xref linkend="wal-configuration"/>.
-->
これらの設定をチューニングする追加情報は<xref linkend="wal-configuration"/>を参照してください。
   </para>

    <sect2 id="runtime-config-wal-settings">
<!--
     <title>Settings</title>
-->
     <title>諸設定</title>
     <variablelist>

     <varlistentry id="guc-wal-level" xreflabel="wal_level">
      <term><varname>wal_level</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>wal_level</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_level</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        <varname>wal_level</varname> determines how much information is written to
        the WAL. The default value is <literal>replica</literal>, which writes enough
        data to support WAL archiving and replication, including running
        read-only queries on a standby server. <literal>minimal</literal> removes all
        logging except the information required to recover from a crash or
        immediate shutdown.  Finally,
        <literal>logical</literal> adds information necessary to support logical
        decoding.  Each level includes the information logged at all lower
        levels.  This parameter can only be set at server start.
-->
<varname>wal_level</varname>はどれだけの情報がWALに書かれるかを決定します。
デフォルト値は<literal>replica</literal>で、WALアーカイビングおよびレプリケーションをサポートするために十分なデータを書き出し、これにはスタンバイサーバで読み取り専用の問い合わせを実行することも含みます。
<literal>minimal</literal>はクラッシュまたは即時停止から回復するのに必要な情報を除き、すべてのログを削除します。
最後に、<literal>logical</literal>は、更にロジカルデコーディングをサポートするのに必要な情報を追加します。
それぞれのレベルは、下位のレベルのログ出力を含んでいます。
このパラメータはサーバ起動時のみ設定可能です。
       </para>
       <para>
<!--
        The <literal>minimal</literal> level generates the least WAL
        volume.  It logs no row information for permanent relations
        in transactions that create or
        rewrite them.  This can make operations much faster (see
        <xref linkend="populate-pitr"/>).  Operations that initiate this
        optimization include:
-->
<literal>minimal</literal>レベルでは、最小限のWALの量しか生成されません。
永続リレーションを作成あるいは書き換えるトランザクションの差分に関する情報は記録されません。
これにより、それらの操作が大幅に高速になります（<xref linkend="populate-pitr"/>を参照してください）。
この最適化が適用される操作には以下のものがあげられます。
        <simplelist>
         <member><command>ALTER ... SET TABLESPACE</command></member>
         <member><command>CLUSTER</command></member>
         <member><command>CREATE TABLE</command></member>
         <member><command>REFRESH MATERIALIZED VIEW</command>
<!--
         (without <option>CONCURRENTLY</option>)</member>
-->
         (<option>CONCURRENTLY</option>なし)</member>
         <member><command>REINDEX</command></member>
         <member><command>TRUNCATE</command></member>
        </simplelist>
<!--
        However, minimal WAL does not contain sufficient information for
        point-in-time recovery, so <literal>replica</literal> or
        higher must be used to enable continuous archiving
        (<xref linkend="guc-archive-mode"/>) and streaming binary replication.
        In fact, the server will not even start in this mode if
        <varname>max_wal_senders</varname> is non-zero.
        Note that changing <varname>wal_level</varname> to
        <literal>minimal</literal> makes previous base backups unusable
        for point-in-time recovery and standby servers.
-->
しかし、minimal WALにはポイントインタイムリカバリのための十分な情報が含まれていないので、<literal>replica</literal>以上を使って継続的アーカイブ(<xref linkend="guc-archive-mode"/>)とストリーミングバイナリレプリケーションを可能にしなければなりません。
実際、<varname>max_wal_senders</varname>が0以外の場合、サーバはこのモードで起動することさえありません。
<varname>wal_level</varname>を<literal>minimal</literal>に変更すると、以前のベースバックアップがポイントインタイムリカバリとスタンバイサーバで使用できなくなることに注意してください。
       </para>
       <para>
<!--
        In <literal>logical</literal> level, the same information is logged as
        with <literal>replica</literal>, plus information needed to
        extract logical change sets from the WAL. Using a level of
        <literal>logical</literal> will increase the WAL volume, particularly if many
        tables are configured for <literal>REPLICA IDENTITY FULL</literal> and
        many <command>UPDATE</command> and <command>DELETE</command> statements are
        executed.
-->
<literal>logical</literal>レベルでは、<literal>replica</literal>と同じ情報が記録されるのに加え、ロジカルチェンジセットをWALから取り出すのに必要な情報が追加されます。
<literal>logical</literal>を使うとWALの量が増えます。
とりわけ、多数のテーブルが<literal>REPLICA IDENTITY FULL</literal>と設定されていて(訳注: ALTER TABLE参照)、多くの<command>UPDATE</command>と<command>DELETE</command>文が実行される場合はこのことが言えます。
       </para>
       <para>
<!--
        In releases prior to 9.6, this parameter also allowed the
        values <literal>archive</literal> and <literal>hot_standby</literal>.
        These are still accepted but mapped to <literal>replica</literal>.
-->
9.6よりも前のリリースでは、このパラメータは<literal>archive</literal>と<literal>hot_standby</literal>という設定値も可能でした。
引き続きこれらも受け付けられますが、<literal>replica</literal>へとマップされます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-fsync" xreflabel="fsync">
      <term><varname>fsync</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>fsync</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>fsync</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If this parameter is on, the <productname>PostgreSQL</productname> server
        will try to make sure that updates are physically written to
        disk, by issuing <function>fsync()</function> system calls or various
        equivalent methods (see <xref linkend="guc-wal-sync-method"/>).
        This ensures that the database cluster can recover to a
        consistent state after an operating system or hardware crash.
-->
このパラメータがオンの場合、<productname>PostgreSQL</productname>サーバは<function>fsync()</function>システムコールを発行するか、もしくはこれに相当する方法（<xref linkend="guc-wal-sync-method"/>を参照）で、更新が物理的にディスクに確実に書き込まれるように試みます。
これは、オペレーティングシステムもしくはハードウェアがクラッシュした後、データベースクラスタを一貫した状態に復旧させることを確実にします。
       </para>

       <para>
<!--
        While turning off <varname>fsync</varname> is often a performance
        benefit, this can result in unrecoverable data corruption in
        the event of a power failure or system crash.  Thus it
        is only advisable to turn off <varname>fsync</varname> if
        you can easily recreate your entire database from external
        data.
-->
<varname>fsync</varname>を停止することはしばしば性能上の利益になるとは言っても、停電やクラッシュの際に回復不可能なデータ破壊になることがあります。
従って外部データから全てのデータベースを簡単に再構築できる場合のみ<varname>fsync</varname>を停止してください。
       </para>

       <para>
<!--
        Examples of safe circumstances for turning off
        <varname>fsync</varname> include the initial loading of a new
        database cluster from a backup file, using a database cluster
        for processing a batch of data after which the database
        will be thrown away and recreated,
        or for a read-only database clone which
        gets recreated frequently and is not used for failover.  High
        quality hardware alone is not a sufficient justification for
        turning off <varname>fsync</varname>.
-->
<varname>fsync</varname>を停止しても安全な状況の例としては、以下があげられます。
バックアップファイルから新しいデータベースクラスタにデータの初期読み込みを行う場合、バッチデータの処理のためにデータベースクラスタを使用し、その後データベースを削除して再構築する場合、読み込み専用のデータベースのクローンを頻繁に再作成するが、それをフェイルオーバーに使用しない場合、などです。
高性能なハードウェアであるからと言って、<varname>fsync</varname>を停止することは正当性を主張する十分な理由とはなりません。
       </para>

       <para>
<!--
        For reliable recovery when changing <varname>fsync</varname>
        off to on, it is necessary to force all modified buffers in the
        kernel to durable storage.  This can be done while the cluster
        is shutdown or while <varname>fsync</varname> is on by running <command>initdb
        &#45;-sync-only</command>, running <command>sync</command>, unmounting the
        file system, or rebooting the server.
-->
<varname>fsync</varname>を無効(off)から有効(on)に変更したときの信頼できるリカバリのためには、カーネル内の全ての変更されたバッファを恒久的ストレージに強制的に吐き出させることが必要です。
これは、クラスタがシャットダウンしている間、または<varname>fsync</varname>が有効のときに、<command>initdb --sync-only</command>を実行する、<command>sync</command>を実行する、ファイルシステムをアンマウントする、またはサーバを再起動することによって可能となります。
       </para>

       <para>
<!--
        In many situations, turning off <xref linkend="guc-synchronous-commit"/>
        for noncritical transactions can provide much of the potential
        performance benefit of turning off <varname>fsync</varname>, without
        the attendant risks of data corruption.
-->
多くの場合、重要でないトランザクションに対して<xref linkend="guc-synchronous-commit"/>を無効にすることにより、データ破壊という付随的危険性を伴うことなく、<varname>fsync</varname>を無効にすることで得られるであろう性能上のメリットの多くを得ることができます。
       </para>

       <para>
<!--
        <varname>fsync</varname> can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
        If you turn this parameter off, also consider turning off
        <xref linkend="guc-full-page-writes"/>.
-->
<varname>fsync</varname> は<filename>postgresql.conf</filename>ファイル、または、サーバのコマンドラインでのみ設定可能です。
このパラメータを無効にする場合、<xref linkend="guc-full-page-writes"/>も同時に無効にすることを検討してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-synchronous-commit" xreflabel="synchronous_commit">
      <term><varname>synchronous_commit</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>synchronous_commit</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>synchronous_commit</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies how much WAL processing must complete before
        the database server returns a <quote>success</quote>
        indication to the client.  Valid values are
        <literal>remote_apply</literal>, <literal>on</literal>
        (the default), <literal>remote_write</literal>,
        <literal>local</literal>, and <literal>off</literal>.
-->
トランザクションのコミットがクライアントに<quote>成功</quote>の報告を返す前に、どれだけのWAL処理を完了しなければならないかを指定をします。
有効な値は<literal>remote_apply</literal>、<literal>on</literal>(デフォルト)、<literal>remote_write</literal>、<literal>local</literal>、<literal>off</literal>です。
       </para>

       <para>
<!--
        If <varname>synchronous_standby_names</varname> is empty,
        the only meaningful settings are <literal>on</literal> and
        <literal>off</literal>;  <literal>remote_apply</literal>,
        <literal>remote_write</literal> and <literal>local</literal>
        all provide the same local synchronization level
        as <literal>on</literal>.  The local behavior of all
        non-<literal>off</literal> modes is to wait for local flush of WAL
        to disk.  In <literal>off</literal> mode, there is no waiting,
        so there can be a delay between when success is reported to the
        client and when the transaction is later guaranteed to be safe
        against a server crash.  (The maximum
        delay is three times <xref linkend="guc-wal-writer-delay"/>.)  Unlike
        <xref linkend="guc-fsync"/>, setting this parameter to <literal>off</literal>
        does not create any risk of database inconsistency: an operating
        system or database crash might
        result in some recent allegedly-committed transactions being lost, but
        the database state will be just the same as if those transactions had
        been aborted cleanly.  So, turning <varname>synchronous_commit</varname> off
        can be a useful alternative when performance is more important than
        exact certainty about the durability of a transaction.  For more
        discussion see <xref linkend="wal-async-commit"/>.
-->
<varname>synchronous_standby_names</varname>が空文字なら、意味のある設定は<literal>on</literal>と<literal>off</literal>だけです。
<literal>remote_apply</literal>、<literal>remote_write</literal>、<literal>local</literal>はすべて<literal>on</literal>と同じ同期レベルを提供します。
<literal>off</literal>モード以外のローカルの振る舞いは、WALがディスクにローカルにフラッシュされるのを待ちます。
<literal>off</literal>モードでは待ちはありません。
ですから、クライアントに成功が報告されてから、トランザクションが後でサーバクラッシュに対して安全が保証されるまでの間に遅延が生じる可能性があります。
（遅延は最大で<xref linkend="guc-wal-writer-delay"/>の3倍です。）
<xref linkend="guc-fsync"/>と違って、このパラメータを<literal>off</literal>にすることでデータベースの一貫性が損なわれるリスクはありません。
オペレーティングシステムやデータベースのクラッシュにより最近コミットされたということになっているトランザクションの一部が失われる可能性がありますが、これらのトランザクションが正常にアボートされた時とデータベースの状態は変わりません。
したがって、<varname>synchronous_commit</varname>のオフによる調整は、トランザクションの耐障害性を確実にするよりも性能が重要な場合の有用な代替案となるかも知れません。
詳細は<xref linkend="wal-async-commit"/>を参照してください。
       </para>

       <para>
<!--
        If <xref linkend="guc-synchronous-standby-names"/> is non-empty,
        <varname>synchronous_commit</varname> also controls whether
        transaction commits will wait for their WAL records to be
        processed on the standby server(s).
-->
<xref linkend="guc-synchronous-standby-names"/>が空文字でない場合は、<varname>synchronous_commit</varname>は、WALレコードが、スタンバイサーバに複製されるまでトランザクションコミットを待機するか否かも制御します。
       </para>

       <para>
<!--
        When set to <literal>remote_apply</literal>, commits will wait
        until replies from the current synchronous standby(s) indicate they
        have received the commit record of the transaction and applied
        it, so that it has become visible to queries on the standby(s),
        and also written to durable storage on the standbys.  This will
        cause much larger commit delays than previous settings since
        it waits for WAL replay.  When set to <literal>on</literal>,
        commits wait until replies
        from the current synchronous standby(s) indicate they have received
        the commit record of the transaction and flushed it to durable storage.  This
        ensures the transaction will not be lost unless both the primary and
        all synchronous standbys suffer corruption of their database storage.
        When set to <literal>remote_write</literal>, commits will wait until replies
        from the current synchronous standby(s) indicate they have
        received the commit record of the transaction and written it to
        their file systems. This setting ensures data preservation if a standby instance of
        <productname>PostgreSQL</productname> crashes, but not if the standby
        suffers an operating-system-level crash because the data has not
        necessarily reached durable storage on the standby.
        The setting <literal>local</literal> causes commits to wait for
        local flush to disk, but not for replication.  This is usually not
        desirable when synchronous replication is in use, but is provided for
        completeness.
-->
<literal>remote_apply</literal>に設定すると、現在の同期スタンバイがトランザクションのコミットレコードを受け取って適用し、スタンバイ上で発行されたクエリから見えるようになり、スタンバイ上の永続的な記憶装置に書き込まれたことを報告するまでコミットは待機します。
WALのリプレイを待つので、今までの設定に比べるとこの設定によってずっと大きなコミットの遅延が発生します。
<literal>on</literal>に設定すると、現在の同期スタンバイがトランザクションのコミットレコードを受け取り、永続的な記憶装置にフラッシュしたことを報告するまでコミットは待機します。
このモードでは、プライマリおよびすべての同期スタンバイがデータベース記憶装置の故障を被った場合を除いて、トランザクションが失われないことが保証されます。
<literal>remote_write</literal>に設定すると、現在の同期スタンバイがトランザクションのコミットレコードを受け取り、スタンバイのファイルシステムに書き出したことを報告するまでコミットは待機します。
この設定は仮に<productname>PostgreSQL</productname>のスタンバイインスタンスがクラッシュしたとしても、データ保護を保証するのに充分です。
しかし、スタンバイがオペレーティングシステムのレベルでクラッシュした場合はこの限りではありません。
データが必ずしもスタンバイの永続的な記憶装置に到達したとは言えないからです。
最後に、<literal>local</literal>設定は、コミットがローカルにディスクにフラッシュされるまで待機しますが、レプリケーションされるまでは待機しません。
これは通常同期レプリケーションが使用されている場合は望ましい設定ではありませんが、完全さのために提供されています。
       </para>

       <para>
<!--
        This parameter can be changed at any time; the behavior for any
        one transaction is determined by the setting in effect when it
        commits.  It is therefore possible, and useful, to have some
        transactions commit synchronously and others asynchronously.
        For example, to make a single multistatement transaction commit
        asynchronously when the default is the opposite, issue <command>SET
        LOCAL synchronous_commit TO OFF</command> within the transaction.
-->
このパラメータはいつでも変更可能です。
どのトランザクションの動作も、コミット時に有効であった設定によって決まります。
したがって、一部のトランザクションのコミットを同期的に、その他を非同期的にすることが可能で、かつ、有用です。
例えば、デフォルトが同期コミットの場合に複数文トランザクションを一つだけ非同期にコミットさせるためには、トランザクション内で<command>SET LOCAL synchronous_commit TO OFF</command>を発行します。
       </para>

       <para>
<!--
        <xref linkend="synchronous-commit-matrix"/> summarizes the
        capabilities of the <varname>synchronous_commit</varname> settings.
-->
<varname>synchronous_commit</varname>設定の機能のまとめが<xref linkend="synchronous-commit-matrix"/>にあります。
       </para>

       <table id="synchronous-commit-matrix">
<!--
        <title>synchronous_commit Modes</title>
-->
        <title>synchronous_commitモード</title>
        <tgroup cols="5">
         <colspec colname="col1" colwidth="1.5*"/>
         <colspec colname="col2" colwidth="1*"/>
         <colspec colname="col3" colwidth="1*"/>
         <colspec colname="col4" colwidth="1*"/>
         <colspec colname="col5" colwidth="1*"/>
         <thead>
          <row>
<!--
           <entry>synchronous_commit setting</entry>
-->
           <entry>synchronous_commit設定</entry>
<!--
           <entry>local durable commit</entry>
-->
           <entry>localの永続的なコミット</entry>
<!--
           <entry>standby durable commit after PG crash</entry>
-->
           <entry>PGがクラッシュした後のスタンバイの永続的なコミット</entry>
<!--
           <entry>standby durable commit after OS crash</entry>
-->
           <entry>OSがクラッシュした後のスタンバイの永続的なコミット</entry>
<!--
           <entry>standby query consistency</entry>
-->
           <entry>スタンバイのクエリの一貫性</entry>
          </row>
         </thead>

         <tbody>

          <row>
           <entry>remote_apply</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
          </row>

          <row>
           <entry>on</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
           <entry align="center"></entry>
          </row>

          <row>
           <entry>remote_write</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
           <entry align="center"></entry>
           <entry align="center"></entry>
          </row>

          <row>
           <entry>local</entry>
<!--
           <entry align="center">&bull;</entry>
-->
           <entry align="center">○</entry>
           <entry align="center"></entry>
           <entry align="center"></entry>
           <entry align="center"></entry>
          </row>

          <row>
           <entry>off</entry>
           <entry align="center"></entry>
           <entry align="center"></entry>
           <entry align="center"></entry>
           <entry align="center"></entry>
          </row>

         </tbody>
        </tgroup>
       </table>

      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-sync-method" xreflabel="wal_sync_method">
      <term><varname>wal_sync_method</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>wal_sync_method</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_sync_method</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Method used for forcing WAL updates out to disk.
        If <varname>fsync</varname> is off then this setting is irrelevant,
        since WAL file updates will not be forced out at all.
        Possible values are:
-->
WALの更新をディスクへ強制するのに使用される方法です。
<varname>fsync</varname>がオフの場合この設定は役に立ちません。と言うのはWALファイルの更新が全く強制されないからです。取り得る値は以下のものです。
       </para>
       <itemizedlist>
        <listitem>
        <para>
<!--
         <literal>open_datasync</literal> (write WAL files with <function>open()</function> option <symbol>O_DSYNC</symbol>)
-->
<literal>open_datasync</literal>（<function>open()</function>のオプション<symbol>O_DSYNC</symbol>でWALファイルに書き込む）
        </para>
        </listitem>
        <listitem>
        <para>
<!--
         <literal>fdatasync</literal> (call <function>fdatasync()</function> at each commit)
-->
<literal>fdatasync</literal>（コミット毎に<function>fdatasync()</function>を呼び出す）
        </para>
        </listitem>
        <listitem>
        <para>
<!--
         <literal>fsync</literal> (call <function>fsync()</function> at each commit)
-->
<literal>fsync</literal>（コミット毎に<function>fsync()</function>を呼び出す）
        </para>
        </listitem>
        <listitem>
        <para>
<!--
         <literal>fsync_writethrough</literal> (call <function>fsync()</function> at each commit, forcing write-through of any disk write cache)
-->
<literal>fsync_writethrough</literal>（すべてのディスク書き込みキャッシュをライトスルーさせるため、コミット毎に<function>fsync()</function>を呼び出す）
        </para>
        </listitem>
        <listitem>
        <para>
<!--
         <literal>open_sync</literal> (write WAL files with <function>open()</function> option <symbol>O_SYNC</symbol>)
-->
<literal>open_sync</literal>（<function>open()</function>のオプション<symbol>O_SYNC</symbol>でWALファイルに書き込む）
        </para>
        </listitem>
       </itemizedlist>
       <para>
<!--
        Not all of these choices are available on all platforms.
        The default is the first method in the above list that is supported
        by the platform, except that <literal>fdatasync</literal> is the default on
        Linux and FreeBSD.  The default is not necessarily ideal; it might be
        necessary to change this setting or other aspects of your system
        configuration in order to create a crash-safe configuration or
        achieve optimal performance.
        These aspects are discussed in <xref linkend="wal-reliability"/>.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
全てのプラットフォームでこれら全ての選択肢が使えるわけではありません。
デフォルトは、上のリストのプラットフォームでサポートされるものの最初に列挙されているものです。
ただしLinuxとFreeBSDでは<literal>fdatasync</literal>がデフォルトです。
デフォルトは必ずしも理想的なものではありません。
クラッシュに適応した構成にする、あるいはアーカイブの最適性能を導くためには、この設定あるいはシステム構成の他の部分を変更することが必要かもしれません。
これらの側面は <xref linkend="wal-reliability"/>で解説されます。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-full-page-writes" xreflabel="full_page_writes">
      <term><varname>full_page_writes</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>full_page_writes</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>full_page_writes</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When this parameter is on, the <productname>PostgreSQL</productname> server
        writes the entire content of each disk page to WAL during the
        first modification of that page after a checkpoint.
        This is needed because
        a page write that is in process during an operating system crash might
        be only partially completed, leading to an on-disk page
        that contains a mix of old and new data.  The row-level change data
        normally stored in WAL will not be enough to completely restore
        such a page during post-crash recovery.  Storing the full page image
        guarantees that the page can be correctly restored, but at the price
        of increasing the amount of data that must be written to WAL.
        (Because WAL replay always starts from a checkpoint, it is sufficient
        to do this during the first change of each page after a checkpoint.
        Therefore, one way to reduce the cost of full-page writes is to
        increase the checkpoint interval parameters.)
-->
このパラメータが有効の場合、<productname>PostgreSQL</productname>サーバは、チェックポイントの後にそのページが最初に変更された過程で、ディスクページの全ての内容をWALに書き込みます。
オペレーティングシステムがクラッシュした時に進行中のページ書き込みは途中までしか終わっていない可能性があり、ディスク上のページが古いデータと新しいデータが混在する状態になるため、この機能が必要です。
通常WAL内に保存される行レベルの変更データは、クラッシュ後のリカバリ時にこうしたページを完全に復旧させるには不十分です。
完全なページイメージを保存することにより、ページを正しく復旧できることを保証しますが、その代わりに、WALに書き込まなければならないデータ量が増加することになります。
（WAL再生は常にチェックポイントから始まるため、チェックポイント後のそれぞれのページの最初の変更時にこれを行えば十分です。
従って、完全ページ書き出しのコストを低減する方法の1つは、チェックポイント間隔パラメータを大きくすることです。）
       </para>

       <para>
<!--
        Turning this parameter off speeds normal operation, but
        might lead to either unrecoverable data corruption, or silent
        data corruption, after a system failure. The risks are similar to turning off
        <varname>fsync</varname>, though smaller, and it should be turned off
        only based on the same circumstances recommended for that parameter.
-->
このパラメータを無効にすると、通常の操作速度が上がりますが、システム障害後に、回復不能なデータ破損、あるいは警告なしのデータ損壊をもたらすかもしれません。
このリスクは小さいながら<varname>fsync</varname>を無効にした場合と似ています。そしてその<varname>fsync</varname>に対して推奨されている同一の状況に基づく限りにおいて停止されなければなりません。
       </para>

       <para>
<!--
        Turning off this parameter does not affect use of
        WAL archiving for point-in-time recovery (PITR)
        (see <xref linkend="continuous-archiving"/>).
-->
このパラメータを無効にしてもポイントインタイムリカバリ（PITR）用のWALアーカイブの使用に影響ありません（ <xref linkend="continuous-archiving"/>を参照してください）。
       </para>

       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
        The default is <literal>on</literal>.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-log-hints" xreflabel="wal_log_hints">
      <term><varname>wal_log_hints</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_log_hints</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_log_hints</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When this parameter is <literal>on</literal>, the <productname>PostgreSQL</productname>
        server writes the entire content of each disk page to WAL during the
        first modification of that page after a checkpoint, even for
        non-critical modifications of so-called hint bits.
-->
このパラメータが<literal>on</literal>の場合、<productname>PostgreSQL</productname>サーバはチェックポイント後にはじめてページを変更する際に、ディスクページの全内容をWALに書き出します。
これは、あまり重要でない、ヒントビットと呼ばれるものに対する変更にさえ当てはまります。
       </para>

       <para>
<!--
        If data checksums are enabled, hint bit updates are always WAL-logged
        and this setting is ignored. You can use this setting to test how much
        extra WAL-logging would occur if your database had data checksums
        enabled.
-->
データチェックサムが有効であると、ヒントビットの更新は常にWALにログされ、この設定パラメータは無視されます。この設定パラメータを使って、データチェックサムが有効なときにどれだけのWALログは余計に書きだされるかをテストすることができます。
       </para>

       <para>
<!--
        This parameter can only be set at server start. The default value is <literal>off</literal>.
-->
このパラメータはサーバ起動時のみ設定可能です。
デフォルト値は<literal>off</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-compression" xreflabel="wal_compression">
      <term><varname>wal_compression</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>wal_compression</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_compression</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter enables compression of WAL using the specified
        compression method.
        When enabled, the <productname>PostgreSQL</productname>
        server compresses full page images written to WAL (e.g. when
        <xref linkend="guc-full-page-writes"/> is on, during a base backup,
        etc.).
        A compressed page image will be decompressed during WAL replay.
        The supported methods are <literal>pglz</literal>,
        <literal>lz4</literal> (if <productname>PostgreSQL</productname>
        was compiled with <option>&#45;-with-lz4</option>) and
        <literal>zstd</literal> (if <productname>PostgreSQL</productname>
        was compiled with <option>&#45;-with-zstd</option>).
        The default value is <literal>off</literal>.
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
《マッチ度[84.785436]》このパラメータは、指定された圧縮方式を使用したWALの圧縮を有効にします。
有効にすると、<productname>PostgreSQL</productname>サーバは<xref linkend="guc-full-page-writes"/>がオンの時またはベースバックアップ中にWALに書き込まれた全ページイメージを圧縮します。
圧縮されたページイメージはWAL再生中に伸長されます。
サポートされている方法は<literal>pglz</literal>、<literal>lz4</literal>(<productname>PostgreSQL</productname>が<option>--with-lz4</option>でコンパイルされた場合)および<literal>zstd</literal>(<productname>PostgreSQL</productname>が<option>--with-zstd</option>でコンパイルされた場合)です。
デフォルト値は<literal>off</literal>です。
スーパーユーザと適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更できます。
《機械翻訳》このパラメータは指定された圧縮メソッドを使用したWALの圧縮を有効にします。
有効になっている場合、<productname>PostgreSQL</productname>サーバはWALに書き込まれたフルページイメージを圧縮します。
例えば<xref linkend="guc-full-page-writes"/>が有効な場合やベースバックアップ中など。
圧縮されたページイメージはWALリプレイ中に展開されます。
サポートされている方法は<literal>pglz</literal>,<literal>lz4</literal><productname>PostgreSQL</productname><option>--with-lz4</option>でコンパイルされた場合と<literal>zstd</literal><productname>PostgreSQL</productname><option>--with-zstd</option>でコンパイルされた場合です。
デフォルト値は<literal>off</literal>です。
スーパーユーザと適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更することができます。
       </para>

       <para>
<!--
        Enabling compression can reduce the WAL volume without
        increasing the risk of unrecoverable data corruption,
        but at the cost of some extra CPU spent on the compression during
        WAL logging and on the decompression during WAL replay.
-->
このパラメータを有効にすると、回復不可能なデータ破壊のリスクを増やすこと無しにWALの量を減らすことができます。
しかし、WALロギングの際の圧縮のため、またWALリプレイの際には伸張のために余分なCPUを使用するというコストが発生します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-init-zero" xreflabel="wal_init_zero">
      <term><varname>wal_init_zero</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_init_zero</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_init_zero</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If set to <literal>on</literal> (the default), this option causes new
        WAL files to be filled with zeroes.  On some file systems, this ensures
        that space is allocated before we need to write WAL records.  However,
        <firstterm>Copy-On-Write</firstterm> (COW) file systems may not benefit
        from this technique, so the option is given to skip the unnecessary
        work.  If set to <literal>off</literal>, only the final byte is written
        when the file is created so that it has the expected size.
-->
このオプションが<literal>on</literal>（デフォルト）に設定されると、新しいWALファイルはゼロで初期化されます。
システムによっては、このことによってWALレコードを書く必要が出てくる前にスペースが割り当てられることを保証します。
しかし、<firstterm>Copy-On-Write</firstterm> (COW)ファイルシステムではこの技術は利点がないかもしれず、このオプションはスキップできるようになっています。
<literal>off</literal>に設定すると、ファイルを作る時に期待する大きさになるように最後のバイトだけが書かれます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-recycle" xreflabel="wal_recycle">
      <term><varname>wal_recycle</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_recycle</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_recycle</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        If set to <literal>on</literal> (the default), this option causes WAL
        files to be recycled by renaming them, avoiding the need to create new
        ones.  On COW file systems, it may be faster to create new ones, so the
        option is given to disable this behavior.
-->
このオプションが<literal>on</literal>（デフォルト）に設定されると、新しくファイルを作るのを避けるために、名前を変えてWALファイルが再利用されます。
COWファイルシステムでは、新しいファイルを作るほうが速いかも知れないので、この挙動を無効にできるようにオプションとなっています。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-buffers" xreflabel="wal_buffers">
      <term><varname>wal_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_buffers</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_buffers</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The amount of shared memory used for WAL data that has not yet been
        written to disk.  The default setting of -1 selects a size equal to
        1/32nd (about 3%) of <xref linkend="guc-shared-buffers"/>, but not less
        than <literal>64kB</literal> nor more than the size of one WAL
        segment, typically <literal>16MB</literal>.  This value can be set
        manually if the automatic choice is too large or too small,
        but any positive value less than <literal>32kB</literal> will be
        treated as <literal>32kB</literal>.
        If this value is specified without units, it is taken as WAL blocks,
        that is <symbol>XLOG_BLCKSZ</symbol> bytes, typically 8kB.
        This parameter can only be set at server start.
-->
未だディスクに書き込まれていないWALデータに対して使用される共有メモリ容量です。
デフォルトの設定である-1は、<xref linkend="guc-shared-buffers"/>の1/32（約3%）の容量に等しい大きさを選択します。
しかし、<literal>64kB</literal>未満ではなく、かつ典型的に<literal>16MB</literal>であるWALセグメントの大きさを超えることはありません。
もし、自動設定による選択が大きすぎたり、小さすぎる場合この値は手作業で設定可能です。
しかし、<literal>32kB</literal>未満のどんな正の値であっても、<literal>32kB</literal>として取り扱われます。
この値が単位なしで指定された場合は、WALブロック単位であるとみなします。すなわち、<symbol>XLOG_BLCKSZ</symbol>バイト、一般的には8kBです。
このパラメータはサーバ起動時のみ設定可能です。
       </para>

       <para>
<!--
        The contents of the WAL buffers are written out to disk at every
        transaction commit, so extremely large values are unlikely to
        provide a significant benefit.  However, setting this value to at
        least a few megabytes can improve write performance on a busy
        server where many clients are committing at once.  The auto-tuning
        selected by the default setting of -1 should give reasonable
        results in most cases.
-->
WALバッファの内容はトランザクションのコミット毎にディスクに書き込まれます。
したがって、極端に大きな値は有意な効果を期待できません。
しかし、この値を数メガバイトに設定することにより、多くのクライアントが同時にコミットするトラフィック量の多いサーバでは書き込み性能が向上します。
デフォルト設定の-1で選択される自動チューニングによると、ほとんどの場合妥当な結果が得られます。
       </para>

      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-writer-delay" xreflabel="wal_writer_delay">
      <term><varname>wal_writer_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_writer_delay</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_writer_delay</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
      <para>
<!--
        Specifies how often the WAL writer flushes WAL, in time terms.
        After flushing WAL the writer sleeps for the length of time given
        by <varname>wal_writer_delay</varname>, unless woken up sooner
        by an asynchronously committing transaction. If the last flush
        happened less than <varname>wal_writer_delay</varname> ago and less
        than <varname>wal_writer_flush_after</varname> worth of WAL has been
        produced since, then WAL is only written to the operating system, not
        flushed to disk.
        If this value is specified without units, it is taken as milliseconds.
        The default value is 200 milliseconds (<literal>200ms</literal>).  Note that
        on some systems, the effective resolution of sleep delays is 10
        milliseconds; setting <varname>wal_writer_delay</varname> to a value that is
        not a multiple of 10 might have the same results as setting it to the
        next higher multiple of 10. This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
-->
WALライタがWALをフラッシュする頻度を時間で指定します。
WALをフラッシュしたあと、非同期コミットしているトランザクションに起こされない限り、<varname>wal_writer_delay</varname>ミリ秒待機します。
最後のフラッシュが過去<varname>wal_writer_delay</varname>以内に行われ、かつそれ以降<varname>wal_writer_flush_after</varname>相当のWALが生成されていない場合は、WALはオペレーティングシステムに書き込まれますが、ディスクにはフラッシュされません。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
デフォルト値は200ミリ秒（<literal>200ms</literal>）です。
ある種のシステムでは、待機間隔の実質的な分解能は10ミリ秒です。
10の倍数以外の値を<varname>wal_writer_delay</varname>に設定しても、その次に大きい10の倍数を設定した場合と同じ結果となります。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-writer-flush-after" xreflabel="wal_writer_flush_after">
      <term><varname>wal_writer_flush_after</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_writer_flush_after</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_writer_flush_after</varname> 設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
      <para>
<!--
        Specifies how often the WAL writer flushes WAL, in volume terms.
        If the last flush happened less
        than <varname>wal_writer_delay</varname> ago and less
        than <varname>wal_writer_flush_after</varname> worth of WAL has been
        produced since, then WAL is only written to the operating system, not
        flushed to disk.  If <varname>wal_writer_flush_after</varname> is set
        to <literal>0</literal> then WAL data is always flushed immediately.
        If this value is specified without units, it is taken as WAL blocks,
        that is <symbol>XLOG_BLCKSZ</symbol> bytes, typically 8kB.
        The default is <literal>1MB</literal>.
        This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
-->
WALライタがWALをフラッシュする頻度を量で指定します。
最後のフラッシュが過去<varname>wal_writer_delay</varname>以内に行われ、かつそれ以降<varname>wal_writer_flush_after</varname>相当のWALが生成されていない場合は、WALはオペレーティングシステムに書き込まれますが、ディスクにはフラッシュされません。
<varname>wal_writer_flush_after</varname>が<literal>0</literal>に設定されている場合は、WALデータが書かれるたびにWALが即時にフラッシュされます。
この値が単位なしで指定された場合は、WALブロック単位であるとみなします。すなわち、<symbol>XLOG_BLCKSZ</symbol>バイト、一般的には8kBです。
デフォルト値は<literal>1MB</literal>です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-skip-threshold" xreflabel="wal_skip_threshold">
      <term><varname>wal_skip_threshold</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_skip_threshold</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_skip_threshold</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When <varname>wal_level</varname> is <literal>minimal</literal> and a
        transaction commits after creating or rewriting a permanent relation,
        this setting determines how to persist the new data.  If the data is
        smaller than this setting, write it to the WAL log; otherwise, use an
        fsync of affected files.  Depending on the properties of your storage,
        raising or lowering this value might help if such commits are slowing
        concurrent transactions.  If this value is specified without units, it
        is taken as kilobytes.  The default is two megabytes
        (<literal>2MB</literal>).
-->
<varname>wal_level</varname>が<literal>minimal</literal>で、トランザクションのコミットが永続リレーションを作るかあるいは書き換えた場合に、この設定は新しいデータをどのように永続させるかを決定します。
データがこの設定よりも少なければ、WALログに書きます。そうでなければ、影響のあるファイルに対してfsyncを使用します。
そのようなコミットが現在のトランザクションを低速化しているようであれば、使用する記憶装置の特性によってはこの値を増減することが役に立つかも知れません。
この値が単位なしに指定されるとキロバイトであると見なします。
デフォルトは2メガバイト(<literal>2MB</literal>)です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-commit-delay" xreflabel="commit_delay">
      <term><varname>commit_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>commit_delay</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>commit_delay</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Setting <varname>commit_delay</varname> adds a time delay
        before a WAL flush is initiated.  This can improve
        group commit throughput by allowing a larger number of transactions
        to commit via a single WAL flush, if system load is high enough
        that additional transactions become ready to commit within the
        given interval.  However, it also increases latency by up to the
        <varname>commit_delay</varname> for each WAL
        flush.  Because the delay is just wasted if no other transactions
        become ready to commit, a delay is only performed if at least
        <varname>commit_siblings</varname> other transactions are active
        when a flush is about to be initiated.  Also, no delays are
        performed if <varname>fsync</varname> is disabled.
        If this value is specified without units, it is taken as microseconds.
        The default <varname>commit_delay</varname> is zero (no delay).
        Only superusers and users with the appropriate <literal>SET</literal>
        privilege can change this setting.
-->
<varname>commit_delay</varname>を設定することにより、WALフラッシュを開始する前の時間遅延が追加されます。
このことにより、もし追加のトランザクションが与えられた時間間隔内でコミットが可能になるほどシステム負荷が充分に高い場合、一回のWALフラッシュでより多くの数のトランザクションをコミットできるようになり、コミット群のスループットを改善できます。
とは言っても、それぞれのWALフラッシュに対して最大<varname>commit_delay</varname>の待ち時間の増加をきたします。
コミットの準備が完了したトランザクションが他に存在しない場合、遅延は無駄になるため、遅延はフラッシュが開始されようとしている時点で少なくとも<varname>commit_siblings</varname>だけのトランザクションが活動している場合にだけ機能します。
同様に、<varname>fsync</varname>が無効の場合も遅延は機能しません。
この値が単位なしで指定された場合は、マイクロ秒単位であるとみなします。
デフォルトの<varname>commit_delay</varname>はゼロ（遅延無し）です。
スーパーユーザと適切な<literal>SET</literal>権限を持つユーザのみがこの設定を変更できます。
       </para>
       <para>
<!--
        In <productname>PostgreSQL</productname> releases prior to 9.3,
        <varname>commit_delay</varname> behaved differently and was much
        less effective: it affected only commits, rather than all WAL flushes,
        and waited for the entire configured delay even if the WAL flush
        was completed sooner.  Beginning in <productname>PostgreSQL</productname> 9.3,
        the first process that becomes ready to flush waits for the configured
        interval, while subsequent processes wait only until the leader
        completes the flush operation.
-->
9.3より前の<productname>PostgreSQL</productname>では、<varname>commit_delay</varname>の振る舞いは異なっており、あまり効果がありませんでした。
全てのWALフラッシュではなく、コミットだけに影響していました。また、そしてWALフラッシュが早めに完了しても設定された遅延分待機していました。
<productname>PostgreSQL</productname> 9.3以降では、フラッシュの準備が整った最初のプロセスが設定値分待機し、後続のプロセスは最初のプロセスがフラッシュ操作を完了するまでの間だけ待機をします。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-commit-siblings" xreflabel="commit_siblings">
      <term><varname>commit_siblings</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>commit_siblings</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>commit_siblings</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Minimum number of concurrent open transactions to require
        before performing the <varname>commit_delay</varname> delay. A larger
        value makes it more probable that at least one other
        transaction will become ready to commit during the delay
        interval. The default is five transactions.
-->
<varname>commit_delay</varname>の遅延を実行するときに必要とされる同時に開いているトランザクションの最小数です。
より大きい値にすると、遅延周期の間に、少なくとも1つの他のトランザクションのコミットの準備が整う確率が高くなります。
デフォルトは5トランザクションです。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-wal-checkpoints">
<!--
     <title>Checkpoints</title>
-->
     <title>チェックポイント</title>

    <variablelist>
     <varlistentry id="guc-checkpoint-timeout" xreflabel="checkpoint_timeout">
      <term><varname>checkpoint_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>checkpoint_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>checkpoint_timeout</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Maximum time between automatic WAL checkpoints.
        If this value is specified without units, it is taken as seconds.
        The valid range is between 30 seconds and one day.
        The default is five minutes (<literal>5min</literal>).
        Increasing this parameter can increase the amount of time needed
        for crash recovery.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
自動的WALチェックポイント間の最大間隔を指定します。
この値が単位なしで指定された場合は、秒単位であるとみなします。
有効な範囲は、30秒から1日の間です。
デフォルトは5分（<literal>5min</literal>）です。
このパラメータを増やすと、クラッシュリカバリで必要となる時間が増加します。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-completion-target" xreflabel="checkpoint_completion_target">
      <term><varname>checkpoint_completion_target</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>checkpoint_completion_target</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>checkpoint_completion_target</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies the target of checkpoint completion, as a fraction of
        total time between checkpoints. The default is 0.9, which spreads the
        checkpoint across almost all of the available interval, providing fairly
        consistent I/O load while also leaving some time for checkpoint
        completion overhead.  Reducing this parameter is not recommended because
        it causes the checkpoint to complete faster.  This results in a higher
        rate of I/O during the checkpoint followed by a period of less I/O between
        the checkpoint completion and the next scheduled checkpoint.  This
        parameter can only be set in the <filename>postgresql.conf</filename> file
        or on the server command line.
-->
チェックポイントの間の時間のうち、どの程度の割合を使うかをチェックポイントの完了目標として指定します。
デフォルトは0.9で、可能な限りの間隔のほとんどにチェックポイントを拡散し、かなり一定のI/O負荷をもたらしますが、チェックポイントが完了するにあたってオーバーヘッドをもたらします。
チェックポイントの完了を早くするので、このパラメータを小さくするのはお勧めできません。
これにより、チェックポイント中はI/Oの割合が大きくなり、チェックポイントの完了から次のチェックポイントまでの間はより少ないI/Oとなります。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-flush-after" xreflabel="checkpoint_flush_after">
      <term><varname>checkpoint_flush_after</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>checkpoint_flush_after</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>checkpoint_flush_after</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Whenever more than this amount of data has been
        written while performing a checkpoint, attempt to force the
        OS to issue these writes to the underlying storage.  Doing so will
        limit the amount of dirty data in the kernel's page cache, reducing
        the likelihood of stalls when an <function>fsync</function> is issued at the end of the
        checkpoint, or when the OS writes data back in larger batches in the
        background.  Often that will result in greatly reduced transaction
        latency, but there also are some cases, especially with workloads
        that are bigger than <xref linkend="guc-shared-buffers"/>, but smaller
        than the OS's page cache, where performance might degrade.  This
        setting may have no effect on some platforms.
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The valid range is
        between <literal>0</literal>, which disables forced writeback,
        and <literal>2MB</literal>.  The default is <literal>256kB</literal> on
        Linux, <literal>0</literal> elsewhere.  (If <symbol>BLCKSZ</symbol> is not
        8kB, the default and maximum values scale proportionally to it.)
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
チェックポイント実行中にこのデータ量よりも多く書く度に、OSが記憶装置に書き込むことを強制しようとします。
このことにより、カーネルのページキャッシュが持つダーティデータの量を一定量に制限し、チェックポイントの最後に<function>fsync</function>が実行される際、あるいはOSがバックグラウンドでデータを大きな塊で書き出す際に性能の急激な低下を招く可能性を減らします。
多くの場合これによってトランザクションの遅延が大幅に少なくなりますが、あるケース、特にワークロードが<xref linkend="guc-shared-buffers"/>よりも大きく、OSのページキャッシュよりも小さい時には性能が低下するかもしれません。
この設定が無効なプラットフォームがあります。
この値が単位なしで指定された場合は、ブロック単位であるとみなします。すなわち、<symbol>BLCKSZ</symbol>バイト、一般的には8kBです。
有効な設定値は、この強制書き込み機能が無効になる<literal>0</literal>から、<literal>2MB</literal>までです。
デフォルト値は、Linuxでは<literal>256kB</literal>で、それ以外は<literal>0</literal>です。
（<symbol>BLCKSZ</symbol>が8kbでなければ、この設定のデフォルト値と最大値が<symbol>BLCKSZ</symbol>に比例して変更されます。）
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-warning" xreflabel="checkpoint_warning">
      <term><varname>checkpoint_warning</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>checkpoint_warning</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>checkpoint_warning</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Write a message to the server log if checkpoints caused by
        the filling of WAL segment files happen closer together
        than this amount of time (which suggests that
        <varname>max_wal_size</varname> ought to be raised).
        If this value is specified without units, it is taken as seconds.
        The default is 30 seconds (<literal>30s</literal>).
        Zero disables the warning.
        No warnings will be generated if <varname>checkpoint_timeout</varname>
        is less than <varname>checkpoint_warning</varname>.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
WALセグメントファイルが溢れることが原因で起きるチェックポイントが、ここで指定した時間よりも短い間隔で発生したとき、サーバログにメッセージを書き出します
（これは、<varname>max_wal_size</varname>を増やす必要があることを示唆しています）。
この値が単位なしで指定された場合は、秒単位であるとみなします。
デフォルトは30秒（<literal>30s</literal>）です。
零の場合は警告を出しません。
<varname>checkpoint_timeout</varname>が<varname>checkpoint_warning</varname>より小さい場合は警告を出しません。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-wal-size" xreflabel="max_wal_size">
      <term><varname>max_wal_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_wal_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_wal_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Maximum size to let the WAL grow during automatic
        checkpoints. This is a soft limit; WAL size can exceed
        <varname>max_wal_size</varname> under special circumstances, such as
        heavy load, a failing <varname>archive_command</varname> or <varname>archive_library</varname>, or a high
        <varname>wal_keep_size</varname> setting.
        If this value is specified without units, it is taken as megabytes.
        The default is 1 GB.
        Increasing this parameter can increase the amount of time needed for
        crash recovery.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
自動WALチェックポイントの際にWALが増加する最大サイズです。
これはソフトリミットです。特別な状況下、たとえば高負荷、<varname>archive_command</varname>の失敗、<varname>archive_library</varname>の失敗、<varname>wal_keep_size</varname>が大きな値に設定されている、などの時には、WALサイズは<varname>max_wal_size</varname>を超えることがあります。
この値が単位なしで指定された場合は、メガバイト単位であるとみなします。
デフォルトは1GBです。
このパラメータを大きくすると、クラッシュリカバリに必要な時間が長くなります。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-min-wal-size" xreflabel="min_wal_size">
      <term><varname>min_wal_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>min_wal_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>min_wal_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        As long as WAL disk usage stays below this setting, old WAL files are
        always recycled for future use at a checkpoint, rather than removed.
        This can be used to ensure that enough WAL space is reserved to
        handle spikes in WAL usage, for example when running large batch
        jobs.
        If this value is specified without units, it is taken as megabytes.
        The default is 80 MB.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
この設定以下にWALのディスク使用量が保たれる限り、古いWALファイルは、消去されることなく今後のチェックポイントで使用するために常にリサイクルされます。
この設定は、たとえば大きなバッチジョブを走らせる際のWALの利用スパイクを取り扱うために、十分なWALのスペースが予約されていることを保証するために使用できます。
この値が単位なしで指定された場合は、メガバイト単位であるとみなします。
デフォルトは80MBです。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-wal-archiving">
<!--
     <title>Archiving</title>
-->
     <title>アーカイビング</title>

    <variablelist>
     <varlistentry id="guc-archive-mode" xreflabel="archive_mode">
      <term><varname>archive_mode</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>archive_mode</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>archive_mode</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When <varname>archive_mode</varname> is enabled, completed WAL segments
        are sent to archive storage by setting
        <xref linkend="guc-archive-command"/> or
        <xref linkend="guc-archive-library"/>. In addition to <literal>off</literal>,
        to disable, there are two modes: <literal>on</literal>, and
        <literal>always</literal>. During normal operation, there is no
        difference between the two modes, but when set to <literal>always</literal>
        the WAL archiver is enabled also during archive recovery or standby
        mode. In <literal>always</literal> mode, all files restored from the archive
        or streamed with streaming replication will be archived (again). See
        <xref linkend="continuous-archiving-in-standby"/> for details.
-->
<varname>archive_mode</varname>が有効な場合、<xref linkend="guc-archive-command"/>あるいは<xref linkend="guc-archive-library"/>を設定することにより、完了したWALセグメントはアーカイブ格納領域に送信されます。
無効にするための<literal>off</literal>に加え、2つのモードがあります。<literal>on</literal>と<literal>always</literal>です。
通常の運用ではこの2つのモードには違いはありませんが、<literal>always</literal>に設定すると、アーカイブリカバリおよびスタンバイモードでWALアーカイバが有効になります。
<literal>always</literal>モードでは、アーカイブからリストアされたファイルや、ストリーミングレプリケーションでストリームされたファイルもすべて(再び)アーカイブされます。
詳細は<xref linkend="continuous-archiving-in-standby"/>を参照してください。
       </para>
       <para>
<!--
        <varname>archive_mode</varname> is a separate setting from
        <varname>archive_command</varname> and
        <varname>archive_library</varname> so that
        <varname>archive_command</varname> and
        <varname>archive_library</varname> can be changed without leaving
        archiving mode.
        This parameter can only be set at server start.
        <varname>archive_mode</varname> cannot be enabled when
        <varname>wal_level</varname> is set to <literal>minimal</literal>.
-->
<varname>archive_command</varname>と<varname>archive_library</varname>がアーカイブモードを停止することなく変更できるように、<varname>archive_mode</varname>は、<varname>archive_command</varname>と<varname>archive_library</varname>とは別の設定項目になっています。
このパラメータはサーバ起動時のみ設定可能です。
<varname>wal_level</varname>が<literal>minimal</literal>に設定されている場合、<varname>archive_mode</varname>を有効にすることはできません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-archive-command" xreflabel="archive_command">
      <term><varname>archive_command</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>archive_command</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>archive_command</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The local shell command to execute to archive a completed WAL file
        segment.  Any <literal>%p</literal> in the string is
        replaced by the path name of the file to archive, and any
        <literal>%f</literal> is replaced by only the file name.
        (The path name is relative to the working directory of the server,
        i.e., the cluster's data directory.)
        Use <literal>%%</literal> to embed an actual <literal>%</literal> character in the
        command.  It is important for the command to return a zero
        exit status only if it succeeds. For more information see
        <xref linkend="backup-archiving-wal"/>.
-->
完了したWALファイルセグメントのアーカイブを実行するローカルのシェルコマンドです。
文字列内のすべての<literal>%p</literal>は、格納されるファイルのパスで置き換えられ、そして、<literal>%f</literal>はファイル名のみ置換します。
（このパス名はサーバの作業用ディレクトリ、つまり、クラスタのデータディレクトリからの相対パスです。）
コマンド内に<literal>%</literal>文字そのものを埋め込むには<literal>%%</literal>を使用します。
コマンドが成功した場合にのみ終了ステータスゼロを返すことが重要です。
詳しくは<xref linkend="backup-archiving-wal"/>を参照ください。
       </para>
       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.  It is only used if
        <varname>archive_mode</varname> was enabled at server start and
        <varname>archive_library</varname> is set to an empty string.  If both
        <varname>archive_command</varname> and <varname>archive_library</varname>
        are set, an error will be raised.
        If <varname>archive_command</varname> is an empty string (the default) while
        <varname>archive_mode</varname> is enabled (and <varname>archive_library</varname>
        is set to an empty string), WAL archiving is temporarily
        disabled, but the server continues to accumulate WAL segment files in
        the expectation that a command will soon be provided.  Setting
        <varname>archive_command</varname> to a command that does nothing but
        return true, e.g., <literal>/bin/true</literal> (<literal>REM</literal> on
        Windows), effectively disables
        archiving, but also breaks the chain of WAL files needed for
        archive recovery, so it should only be used in unusual circumstances.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
サーバ起動時に<varname>archive_mode</varname>が有効で、<varname>archive_library</varname>が空文字の時にのみ使用されます。
<varname>archive_command</varname>と<varname>archive_library</varname>の両方が有効ならばエラーが発生します。
<varname>archive_mode</varname>が有効であるにもかかわらず、<varname>archive_command</varname>が空文字列（デフォルト）、（そして<varname>archive_library</varname>が空文字列）である場合、WALアーカイブ処理は一時的に無効になりますが、コマンドが後で提供されることを見越して、サーバはWALセグメントの蓄積を続けます。
例えば、<literal>/bin/true</literal>（Windowsでは<literal>REM</literal>）のように、真を返すだけで何もしないコマンドを<varname>archive_command</varname>に設定すると、実質的にアーカイブ処理が無効になりますが、アーカイブからの復帰に必要なWALファイルの連鎖も同時に断ち切るため、特別な場合のみ使用するようにしなければなりません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-archive-library" xreflabel="archive_library">
      <term><varname>archive_library</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>archive_library</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The library to use for archiving completed WAL file segments.  If set to
        an empty string (the default), archiving via shell is enabled, and
        <xref linkend="guc-archive-command"/> is used.  If both
        <varname>archive_command</varname> and <varname>archive_library</varname>
        are set, an error will be raised.  Otherwise, the specified
        shared library is used for archiving. The WAL archiver process is
        restarted by the postmaster when this parameter changes. For more
        information, see <xref linkend="backup-archiving-wal"/> and
        <xref linkend="archive-modules"/>.
-->
アーカイビングが完了したWALファイルセグメントに使用するライブラリです。
空文字列（デフォルト）に設定された場合、シェル経由のアーカイビングが有効になり、<xref linkend="guc-archive-command"/>が使用されます。
<varname>archive_command</varname>と<varname>archive_library</varname>の両方が有効ならばエラーが発生します。
それ以外の場合は、指定された共有ライブラリがアーカイブに使用されます。
WALアーカイバプロセスは、このパラメータが変更されたときにpostmasterによって再起動されます。
詳細については、<xref linkend="backup-archiving-wal"/>および<xref linkend="archive-modules"/>を参照してください。
       </para>
       <para>
<!--
        This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-archive-timeout" xreflabel="archive_timeout">
      <term><varname>archive_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>archive_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>archive_timeout</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The <xref linkend="guc-archive-command"/> or <xref linkend="guc-archive-library"/> is only invoked for
        completed WAL segments. Hence, if your server generates little WAL
        traffic (or has slack periods where it does so), there could be a
        long delay between the completion of a transaction and its safe
        recording in archive storage.  To limit how old unarchived
        data can be, you can set <varname>archive_timeout</varname> to force the
        server to switch to a new WAL segment file periodically.  When this
        parameter is greater than zero, the server will switch to a new
        segment file whenever this amount of time has elapsed since the last
        segment file switch, and there has been any database activity,
        including a single checkpoint (checkpoints are skipped if there is
        no database activity).  Note that archived files that are closed
        early due to a forced switch are still the same length as completely
        full files.  Therefore, it is unwise to use a very short
        <varname>archive_timeout</varname> &mdash; it will bloat your archive
        storage.  <varname>archive_timeout</varname> settings of a minute or so are
        usually reasonable.  You should consider using streaming replication,
        instead of archiving, if you want data to be copied off the primary
        server more quickly than that.
        If this value is specified without units, it is taken as seconds.
        This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
-->
<xref linkend="guc-archive-command"/>または<xref linkend="guc-archive-library"/> は、完了したWALセグメントに対してのみ呼び出されます。
したがって、サーバがWALトラフィックをほとんど生成しない場合（あるいはそのような余裕期間がある場合）、トランザクションの完了とアーカイブストレージへの安全な記録との間に長い遅延が発生する可能性があります。
アーカイブされていないデータの古さを制限するために、<varname>archive_timeout</varname>を設定して、サーバに新しいWALセグメントファイルへの定期的な切り替えを強制することができます。
このパラメータが0より大きい場合、サーバは、最後のセグメントファイル切り替えからこの時間が経過し、単一のチェックポイント（データベースアクティビティがない場合はチェックポイントはスキップされます）を含むデータベースアクティビティが発生するたびに新しいセグメントファイルへの切り替えを行います。
強制的な切り替えにより早期に閉じられたアーカイブファイルは、完全に満杯のファイルと同じ長さのままであることに注意してください。
したがって、非常に短い<varname>archive_timeout</varname>を使用することは賢明ではなく、アーカイブストレージを膨張させます。
通常は1分程度の<varname>archive_timeout</varname>設定が妥当です。
プライマリサーバからデータをより迅速にコピーしたい場合は、アーカイブではなくストリーミングレプリケーションを使用することを検討してください。この値が単位なしで指定された場合、秒として取得されます。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

   <sect2 id="runtime-config-wal-recovery">

<!--
    <title>Recovery</title>
-->
    <title>リカバリ</title>

     <indexterm>
      <primary>configuration</primary>
      <secondary>of recovery</secondary>
      <tertiary>general settings</tertiary>
     </indexterm>
     <indexterm>
      <primary>設定</primary>
      <secondary>リカバリの</secondary>
      <tertiary>一般設定</tertiary>
     </indexterm>

    <para>
<!--
     This section describes the settings that apply to recovery in general,
     affecting crash recovery, streaming replication and archive-based
     replication.
-->
この節では、クラッシュリカバリ、ストリーミングレプリケーション、およびアーカイブベースのレプリケーションに影響する一般的なリカバリに適用される設定について説明します。
    </para>


    <variablelist>
     <varlistentry id="guc-recovery-prefetch" xreflabel="recovery_prefetch">
      <term><varname>recovery_prefetch</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>recovery_prefetch</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>recovery_prefetch</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Whether to try to prefetch blocks that are referenced in the WAL that
        are not yet in the buffer pool, during recovery.  Valid values are
        <literal>off</literal>, <literal>on</literal> and
        <literal>try</literal> (the default).  The setting
        <literal>try</literal> enables
        prefetching only if the operating system provides support for issuing
        read-ahead advice.
-->
《機械翻訳》トライからプレフェッチへのブロックで、WALでは被参照であるがバッファプールではないものをリカバリ中に処理するかどうかを指定します。
有効な値は<literal>off</literal>、<literal>on</literal>および<literal>try</literal>デフォルトです。
設定<literal>try</literal>は、オペレーティングシステムが先読みアドバイスを発行するためにサポートを提供する場合にのみプリフェッチを有効にします。
       </para>
       <para>
<!--
        Prefetching blocks that will soon be needed can reduce I/O wait times
        during recovery with some workloads.
        See also the <xref linkend="guc-wal-decode-buffer-size"/> and
        <xref linkend="guc-maintenance-io-concurrency"/> settings, which limit
        prefetching activity.
-->
すぐに必要になるブロックをプリフェッチすると、一部のワークロードでリカバリ中のI/O待機時間を短縮できます。
プリフェッチ・アクティビティを制限する<xref linkend="guc-wal-decode-buffer-size"/>および<xref linkend="guc-maintenance-io-concurrency"/>設定も参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-decode-buffer-size" xreflabel="wal_decode_buffer_size">
      <term><varname>wal_decode_buffer_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_decode_buffer_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_decode_buffer_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        A limit on how far ahead the server can look in the WAL, to find
        blocks to prefetch.  If this value is specified without units, it is
        taken as bytes.
        The default is 512kB.
-->
サーバがプリフェッチするブロックを見つけるためにWAL内をどれだけ先まで見ることができるかの制限です。
この値が単位なしで指定された場合、バイトとして扱われます。
デフォルトは512KBです。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect2>

  <sect2 id="runtime-config-wal-archive-recovery">

<!--
    <title>Archive Recovery</title>
-->
    <title>アーカイブからのリカバリ</title>

    <indexterm>
     <primary>configuration</primary>
     <secondary>of recovery</secondary>
     <tertiary>of a standby server</tertiary>
    </indexterm>
    <indexterm>
     <primary>設定</primary>
     <secondary>リカバリの</secondary>
     <tertiary>スタンバイサーバの</tertiary>
    </indexterm>

    <para>
<!--
     This section describes the settings that apply only for the duration of
     the recovery.  They must be reset for any subsequent recovery you wish to
     perform.
-->
この節では、リカバリの間だけ適用する設定について説明します。
その後実施するリカバリでは、その設定はリセットしなければなりません。
    </para>

    <para>
<!--
     <quote>Recovery</quote> covers using the server as a standby or for
     executing a targeted recovery.  Typically, standby mode would be used to
     provide high availability and/or read scalability, whereas a targeted
     recovery is used to recover from data loss.
-->
<quote>リカバリ</quote>は、サーバをスタンバイとして使用するとき、あるいはターゲットを指定したリカバリで適用されます。
通常、スタンバイモードは、高可用性または読み出しスケーラビリティ、あるいはその両方を提供するために使用します。
一方ターゲットを指定したリカバリは失なわれたデータを回復するために使用します。
    </para>

    <para>
<!--
     To start the server in standby mode, create a file called
     <filename>standby.signal</filename><indexterm><primary>standby.signal</primary></indexterm>
     in the data directory.  The server will enter recovery and will not stop
     recovery when the end of archived WAL is reached, but will keep trying to
     continue recovery by connecting to the sending server as specified by the
     <varname>primary_conninfo</varname> setting and/or by fetching new WAL
     segments using <varname>restore_command</varname>.  For this mode, the
     parameters from this section and <xref
     linkend="runtime-config-replication-standby"/> are of interest.
     Parameters from <xref linkend="runtime-config-wal-recovery-target"/> will
     also be applied but are typically not useful in this mode.
-->
スタンバイモードでサーバを起動するには、<filename>standby.signal</filename><indexterm><primary>standby.signal</primary></indexterm>と呼ばれるファイルをデータディレクトリに作ります。
サーバはリカバリモードに入り、アーカイブWALの終端に到着してもリカバリを止めず、<varname>primary_conninfo</varname>の設定で指定された送信サーバに接続するか、<varname>restore_command</varname>を使って新しいWALセグメントを取得するか、あるいはその両方によってリカバリを継続しようとします。
このモードでは、この節と<xref linkend="runtime-config-replication-standby"/>で説明するパラメータが関係します。
<xref linkend="runtime-config-wal-recovery-target"/>のパラメータも適用できますが、このモードでは通常有用ではありません。
    </para>

    <para>
<!--
     To start the server in targeted recovery mode, create a file called
     <filename>recovery.signal</filename><indexterm><primary>recovery.signal</primary></indexterm>
     in the data directory.  If both <filename>standby.signal</filename> and
     <filename>recovery.signal</filename> files are created, standby mode
     takes precedence.  Targeted recovery mode ends when the archived WAL is
     fully replayed, or when <varname>recovery_target</varname> is reached.
     In this mode, the parameters from both this section and <xref
     linkend="runtime-config-wal-recovery-target"/> will be used.
-->
サーバをターゲットリカバリモードで起動するには、<filename>recovery.signal</filename><indexterm><primary>recovery.signal</primary></indexterm>という名前のファイルをデータディレクトリに作ります。
<filename>standby.signal</filename>と<filename>recovery.signal</filename>の両方が作られた場合は、スタンバイモードが優先します。
ターゲットリカバリモードはアーカイブWALが完全に再生されるか、<varname>recovery_target</varname>に到達した時に終了します。
このモードでは、この節と<xref linkend="runtime-config-wal-recovery-target"/>のパラメータの両方が使用されます。
    </para>

    <variablelist>
     <varlistentry id="guc-restore-command" xreflabel="restore_command">
      <term><varname>restore_command</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>restore_command</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>restore_command</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The local shell command to execute to retrieve an archived segment of
        the WAL file series. This parameter is required for archive recovery,
        but optional for streaming replication.
        Any <literal>%f</literal> in the string is
        replaced by the name of the file to retrieve from the archive,
        and any <literal>%p</literal> is replaced by the copy destination path name
        on the server.
        (The path name is relative to the current working directory,
        i.e., the cluster's data directory.)
        Any <literal>%r</literal> is replaced by the name of the file containing the
        last valid restart point. That is the earliest file that must be kept
        to allow a restore to be restartable, so this information can be used
        to truncate the archive to just the minimum required to support
        restarting from the current restore. <literal>%r</literal> is typically only
        used by warm-standby configurations
        (see <xref linkend="warm-standby"/>).
        Write <literal>%%</literal> to embed an actual <literal>%</literal> character.
-->
一連のWALファイルからアーカイブセグメントを取り出すために実行するローカルのシェルコマンドです。
このパラメータはアーカイブリカバリでは必須ですが、ストリーミングレプリケーションではオプションです。
文字列中の<literal>%f</literal>はアーカイブから取り出すファイルの名前に置換され、<literal>%p</literal>はサーバ上のコピー先のパス名に置換されます。
（パス名は現在の作業ディレクトリの相対パス、つまりクラスタのデータディレクトリです。）
<literal>%r</literal>は有効な最後のリスタートポイントを含むファイル名に置換されます。
これはリストアが再開可能であるために維持しなければならない最古のファイルで、現在のリストアからの再開をサポートするのに最小限必要なアーカイブを残して切り詰めるのに必要な情報として利用できます。
<literal>%r</literal>は通常ウォームスタンバイ構成でのみ使用されます。
（<xref linkend="warm-standby"/>参照。）
<literal>%</literal>文字自体を埋め込むには<literal>%%</literal>と書いてください。
       </para>

       <para>
<!--
        It is important for the command to return a zero exit status
        only if it succeeds.  The command <emphasis>will</emphasis> be asked for file
        names that are not present in the archive; it must return nonzero
        when so asked.  Examples:
-->
コマンドは、成功した時のみ終了コードのゼロを返却することが重要です。
コマンドはアーカイブにないファイル名を聞かれる<emphasis>ことになります</emphasis>。
その場合には、非ゼロの値を返却しなければなりません。以下に例を示します。
<programlisting>
restore_command = 'cp /mnt/server/archivedir/%f "%p"'
restore_command = 'copy "C:\\server\\archivedir\\%f" "%p"'  # Windows
</programlisting>
<!--
        An exception is that if the command was terminated by a signal (other
        than <systemitem>SIGTERM</systemitem>, which is used as part of a
        database server shutdown) or an error by the shell (such as command
        not found), then recovery will abort and the server will not start up.
-->
例外は、データベースサーバのシャットダウンの一部として、<systemitem>SIGTERM</systemitem>以外のシグナルでコマンドが終了させられたり、シェルによってエラーが発生した（コマンドが見つからない場合など）場合で、その場合はリカバリは中断され、サーバはスタートアップしなくなります。
       </para>

       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-archive-cleanup-command" xreflabel="archive_cleanup_command">
      <term><varname>archive_cleanup_command</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>archive_cleanup_command</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>archive_cleanup_command</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This optional parameter specifies a shell command that will be executed
        at every restartpoint.  The purpose of
        <varname>archive_cleanup_command</varname> is to provide a mechanism for
        cleaning up old archived WAL files that are no longer needed by the
        standby server.
        Any <literal>%r</literal> is replaced by the name of the file containing the
        last valid restart point.
        That is the earliest file that must be <emphasis>kept</emphasis> to allow a
        restore to be restartable, and so all files earlier than <literal>%r</literal>
        may be safely removed.
        This information can be used to truncate the archive to just the
        minimum required to support restart from the current restore.
        The <xref linkend="pgarchivecleanup"/> module
        is often used in <varname>archive_cleanup_command</varname> for
        single-standby configurations, for example:
-->
オプションのパラメータは、すべてのリスタートポイントで実行されるシェルコマンドを指定します。
<varname>archive_cleanup_command</varname>の目的は、スタンバイサーバにとって必要とされない古いアーカイブWALファイルをクリーンアップする仕組みを提供することです。
<literal>%r</literal>は最後の有効なリスタートポイントを含むファイル名に置換されます。
これはリストアが再開可能であるために<emphasis>保持</emphasis>しなければならない最古のファイルで、<literal>%r</literal>よりも前のすべてのファイルは安全に削除できます。
これは現在のリストアからの再開をサポートするのに最小限必要なアーカイブを残して切り詰めるのに必要な情報として利用できます。
単一のスタンバイ構成用の<varname>archive_cleanup_command</varname>で、たとえば以下のように、しばしば<xref linkend="pgarchivecleanup"/>モジュールが使われます。
<programlisting>archive_cleanup_command = 'pg_archivecleanup /mnt/server/archivedir %r'</programlisting>
<!--
        Note however that if multiple standby servers are restoring from the
        same archive directory, you will need to ensure that you do not delete
        WAL files until they are no longer needed by any of the servers.
        <varname>archive_cleanup_command</varname> would typically be used in a
        warm-standby configuration (see <xref linkend="warm-standby"/>).
        Write <literal>%%</literal> to embed an actual <literal>%</literal> character in the
        command.
-->
だたし、複数のスタンバイサーバが同じアーカイブディレクトリからリストアしている場合は、どのサーバにおいてももはや必要がなくなるまでWALファイルが削除されることのないようにする必要があることに留意してください。
<varname>archive_cleanup_command</varname>は通常ウォームスタンバイ構成で使用されます。
（<xref linkend="warm-standby"/>参照。）
<literal>%</literal>文字自体を埋め込むには<literal>%%</literal>と書いてください。
       </para>
       <para>
<!--
        If the command returns a nonzero exit status then a warning log
        message will be written.  An exception is that if the command was
        terminated by a signal or an error by the shell (such as command not
        found), a fatal error will be raised.
-->
コマンドが非ゼロの終了ステータスを返した場合、警告ログメッセージが出力されます。
例外は、コマンドがシグナルで終了されたとき、あるいはシェルがエラーを起こしたとき（コマンドが見つからないなど）で、その場合致命的エラーが生じます。
       </para>
       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-end-command" xreflabel="recovery_end_command">
      <term><varname>recovery_end_command</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>recovery_end_command</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_end_command</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter specifies a shell command that will be executed once only
        at the end of recovery. This parameter is optional. The purpose of the
        <varname>recovery_end_command</varname> is to provide a mechanism for cleanup
        following replication or recovery.
        Any <literal>%r</literal> is replaced by the name of the file containing the
        last valid restart point, like in <xref linkend="guc-archive-cleanup-command"/>.
-->
このパラメータは、リカバリの終了時に一度だけ起動されるシェルコマンドを指定します。
このパラメータはオプションです。
<varname>recovery_end_command</varname>の目的はレプリケーションあるいはリカバリの後のクリーンアップのための機構を提供することにあります。
<literal>%r</literal>は、<xref linkend="guc-archive-cleanup-command"/>と同じように、有効な最後のリスタートポイントを含むWALファイル名に置換されます。
       </para>
       <para>
<!--
        If the command returns a nonzero exit status then a warning log
        message will be written and the database will proceed to start up
        anyway.  An exception is that if the command was terminated by a
        signal or an error by the shell (such as command not found), the
        database will not proceed with startup.
-->
コマンドが非ゼロの終了ステータスを返した場合、警告ログメッセージが出力されますが、データベースはスタートアップ処理を続けます。
例外は、コマンドがシグナルによって終了させられたか、シェルによってエラーが発生した（そのようなコマンドは見つからない）場合で、その場合はデータベースはスタートアップ処理を継続させません。
       </para>
       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>

  </sect2>

  <sect2 id="runtime-config-wal-recovery-target">

<!--
    <title>Recovery Target</title>
-->
    <title>リカバリターゲット</title>

     <para>
<!--
      By default, recovery will recover to the end of the WAL log. The
      following parameters can be used to specify an earlier stopping point.
      At most one of <varname>recovery_target</varname>,
      <varname>recovery_target_lsn</varname>, <varname>recovery_target_name</varname>,
      <varname>recovery_target_time</varname>, or <varname>recovery_target_xid</varname>
      can be used; if more than one of these is specified in the configuration
      file, an error will be raised.
      These parameters can only be set at server start.
-->
デフォルトではWALログの最後までリカバリを行います。
次のパラメータがそれより前の時点でリカバリを停止するために利用できます。
次の<varname>recovery_target</varname>、<varname>recovery_target_lsn</varname>、<varname>recovery_target_name</varname>、<varname>recovery_target_time</varname>、<varname>recovery_target_xid</varname>のどれか一つが使えます。
設定ファイルの中で２つ以上指定するとエラーとなります。
これらのパラメータはサーバ起動時のみ設定可能です。
     </para>

     <variablelist>
     <varlistentry id="guc-recovery-target" xreflabel="recovery_target">
      <term><varname>recovery_target</varname><literal> = 'immediate'</literal>
      <indexterm>
        <primary><varname>recovery_target</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_target</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter specifies that recovery should end as soon as a
        consistent state is reached, i.e., as early as possible. When restoring
        from an online backup, this means the point where taking the backup
        ended.
-->
このパラメータは、リカバリが一貫した状態になり次第、すなわちできるだけ早く終了することを指定します。
オンラインバックアップからリストアした場合、これはバックアップが終了した時点を意味します。
       </para>
       <para>
<!--
        Technically, this is a string parameter, but <literal>'immediate'</literal>
        is currently the only allowed value.
-->
技術的にはこれは文字列型のパラメータですが、現時点では<literal>'immediate'</literal>だけが許容されている値です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-name" xreflabel="recovery_target_name">
      <term><varname>recovery_target_name</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>recovery_target_name</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_target_name</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter specifies the named restore point (created with
        <function>pg_create_restore_point()</function>) to which recovery will proceed.
-->
このパラメータは、指定した（<function>pg_create_restore_point()</function>により作成された）名前付きリストアポイントまでリカバリを進行させます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-time" xreflabel="recovery_target_time">
      <term><varname>recovery_target_time</varname> (<type>timestamp</type>)
      <indexterm>
        <primary><varname>recovery_target_time</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_target_time</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter specifies the time stamp up to which recovery
        will proceed.
        The precise stopping point is also influenced by
        <xref linkend="guc-recovery-target-inclusive"/>.
-->
このパラメータは、指定したタイムスタンプまでリカバリを進行させます。
正確な停止点は<xref linkend="guc-recovery-target-inclusive"/>にも影響されます。
       </para>

       <para>
<!--
        The value of this parameter is a time stamp in the same format
        accepted by the <type>timestamp with time zone</type> data type,
        except that you cannot use a time zone abbreviation (unless the
        <xref linkend="guc-timezone-abbreviations"/> variable has been set
        earlier in the configuration file).  Preferred style is to use a
        numeric offset from UTC, or you can write a full time zone name,
        e.g., <literal>Europe/Helsinki</literal> not <literal>EEST</literal>.
-->
（<xref linkend="guc-timezone-abbreviations"/>変数が設定ファイルで先に設定されていない限り）時間帯略語を使えないことを除けば、このパラメータの値は<type>timestamp with time zone</type>データ型が受け付けるのと同じ形式のタイムスタンプです。
おすすめの形式はUTCからのオフセットか、<literal>EEST</literal>ではなく<literal>Europe/Helsinki</literal>のような完全な時間帯名です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-xid" xreflabel="recovery_target_xid">
      <term><varname>recovery_target_xid</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>recovery_target_xid</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_target_xid</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter specifies the transaction ID up to which recovery
        will proceed. Keep in mind
        that while transaction IDs are assigned sequentially at transaction
        start, transactions can complete in a different numeric order.
        The transactions that will be recovered are those that committed
        before (and optionally including) the specified one.
        The precise stopping point is also influenced by
        <xref linkend="guc-recovery-target-inclusive"/>.
-->
このパラメータは、指定したトランザクションIDまでリカバリを進行させます。
トランザクションIDはトランザクション起動時に順番に割り当てられますが、トランザクションは数字順によらず完了することがあることに留意してください。
リカバリされるトランザクションは、指定されたものよりも前 (オプションによっては指定されたものも含まれる) にコミットされたものになります。
正確な停止点は<xref linkend="guc-recovery-target-inclusive"/>にも影響されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-lsn" xreflabel="recovery_target_lsn">
      <term><varname>recovery_target_lsn</varname> (<type>pg_lsn</type>)
      <indexterm>
        <primary><varname>recovery_target_lsn</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_target_lsn</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        This parameter specifies the LSN of the write-ahead log location up
        to which recovery will proceed. The precise stopping point is also
        influenced by <xref linkend="guc-recovery-target-inclusive"/>. This
        parameter is parsed using the system data type
        <link linkend="datatype-pg-lsn"><type>pg_lsn</type></link>.
-->
このパラメータは、指定した先行書き込みログ（WAL）の場所のLSNまでリカバリを進行させます。
正確な停止点は、<xref linkend="guc-recovery-target-inclusive"/>の影響も受けます。
このパラメータは、システムデータ型<link linkend="datatype-pg-lsn"><type>pg_lsn</type></link>を使用して解析されます。
       </para>
      </listitem>
     </varlistentry>
     </variablelist>

     <para>
<!--
       The following options further specify the recovery target, and affect
       what happens when the target is reached:
-->
以下のオプションはリカバリ対象をより詳細に指定し、リカバリが対象に達した時の動作に影響を与えます。
     </para>

     <variablelist>
     <varlistentry id="guc-recovery-target-inclusive"
                   xreflabel="recovery_target_inclusive">
      <term><varname>recovery_target_inclusive</varname> (<type>boolean</type>)
      <indexterm>
        <primary><varname>recovery_target_inclusive</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_target_inclusive</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies whether to stop just after the specified recovery target
        (<literal>on</literal>), or just before the recovery target
        (<literal>off</literal>).
        Applies when <xref linkend="guc-recovery-target-lsn"/>,
        <xref linkend="guc-recovery-target-time"/>, or
        <xref linkend="guc-recovery-target-xid"/> is specified.
        This setting controls whether transactions
        having exactly the target WAL location (LSN), commit time, or transaction ID, respectively, will
        be included in the recovery.  Default is <literal>on</literal>.
-->
指定したリカバリ対象のちょうど後に停止するか(<literal>on</literal>)、ちょうどその前に停止するか(<literal>off</literal>)を指定します。
<xref linkend="guc-recovery-target-lsn"/>、<xref linkend="guc-recovery-target-time"/>、又は<xref linkend="guc-recovery-target-xid"/>が指定されている場合は適用されます。
この設定は、指定した対象のWALの場所(LSN)、コミット時刻、あるいはトランザクションIDが、それぞれ正確に一致するトランザクションをリカバリに含めるかどうかを制御します。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-timeline"
                   xreflabel="recovery_target_timeline">
      <term><varname>recovery_target_timeline</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>recovery_target_timeline</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_target_timeline</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies recovering into a particular timeline.  The value can be a
        numeric timeline ID or a special value.  The value
        <literal>current</literal> recovers along the same timeline that was
        current when the base backup was taken.  The
        value <literal>latest</literal> recovers
        to the latest timeline found in the archive, which is useful in
        a standby server.  <literal>latest</literal> is the default.
-->
リカバリが作成する個別のタイムラインを指定します。
値は数値のタイムラインIDか、特殊な値です。
<literal>current</literal>では、ベースバックアップが取得されたときにカレントだったタイムラインに沿ってリカバリします。
<literal>latest</literal>では、アーカイブ時に見つけた最新のタイムラインにリカバリします。これはスタンバイサーバで有用です。
デフォルトは<literal>latest</literal>です。
       </para>

       <para>
<!--
        To specify a timeline ID in hexadecimal (for example, if extracted
        from a WAL file name or history file), prefix it with a
        <literal>0x</literal>.  For instance, if the WAL file name is
        <filename>00000011000000A10000004F</filename>, then the timeline ID is
        <literal>0x11</literal> (or 17 decimal).
-->
タイムラインIDを16進数で指定するには(たとえば、WALファイル名前または歴史ファイルから抽出した場合)、<literal>0x</literal>を前に置きます。
例として、WALファイル名前が<filename>00000011000000A10000004F</filename>であれば、タイムラインIDは<literal>0x11</literal>(または10進数で17)になります。
       </para>

       <para>
<!--
        You usually only need to set this parameter
        in complex re-recovery situations, where you need to return to
        a state that itself was reached after a point-in-time recovery.
        See <xref linkend="backup-timelines"/> for discussion.
-->
通常このパラメータの設定が必要となるのは、ポイントインタイムリカバリの実施後に到達した状態に戻す場合など、複雑なリカバリの状況のみです。
説明は<xref linkend="backup-timelines"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-action"
                   xreflabel="recovery_target_action">
      <term><varname>recovery_target_action</varname> (<type>enum</type>)
      <indexterm>
        <primary><varname>recovery_target_action</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_target_action</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies what action the server should take once the recovery target is
        reached. The default is <literal>pause</literal>, which means recovery will
        be paused. <literal>promote</literal> means the recovery process will finish
        and the server will start to accept connections.
        Finally <literal>shutdown</literal> will stop the server after reaching the
        recovery target.
-->
リカバリ対象に到達した場合に、サーバがする動作を指定します。
デフォルトは<literal>pause</literal>で、リカバリを休止することを意味します。
<literal>promote</literal>は、リカバリの過程が終われば、サーバは接続の受け付けを始めることを意味します。
最後に、<literal>shutdown</literal>は、リカバリ対象に到達した後にサーバを停止します。
       </para>
       <para>
<!--
        The intended use of the <literal>pause</literal> setting is to allow queries
        to be executed against the database to check if this recovery target
        is the most desirable point for recovery.
        The paused state can be resumed by
        using <function>pg_wal_replay_resume()</function> (see
        <xref linkend="functions-recovery-control-table"/>), which then
        causes recovery to end. If this recovery target is not the
        desired stopping point, then shut down the server, change the
        recovery target settings to a later target and restart to
        continue recovery.
-->
<literal>pause</literal>の設定の意図した使い方は、このリカバリ対象がリカバリのための最も望ましいポイントかどうかチェックするために、データベースに対して問い合わせを実行できるようにすることです。
休止された状態は、<function>pg_wal_replay_resume()</function>(<xref linkend="functions-recovery-control-table"/>参照)の使用により再開することができます。
その後、それはリカバリを終了させます。
このリカバリ対象が希望の止まるポイントでない場合、サーバをシャットダウンし、リカバリ対象の設定をより後の対象に変更し、リカバリを継続するために再起動してください。
       </para>
       <para>
<!--
        The <literal>shutdown</literal> setting is useful to have the instance ready
        at the exact replay point desired.  The instance will still be able to
        replay more WAL records (and in fact will have to replay WAL records
        since the last checkpoint next time it is started).
-->
<literal>shutdown</literal>の設定はインスタンスを正確に望ましい再生ポイントで準備するのに有用です。
インスタンスはさらに多くのWALレコードを再生できます(実際、次に起動するときには最後のチェックポイントからWALレコードを再生しなければなりません)。
       </para>
       <para>
<!--
        Note that because <filename>recovery.signal</filename> will not be
        removed when <varname>recovery_target_action</varname> is set to <literal>shutdown</literal>,
        any subsequent start will end with immediate shutdown unless the
        configuration is changed or the <filename>recovery.signal</filename>
        file is removed manually.
-->
<filename>recovery.signal</filename>は<varname>recovery_target_action</varname>が<literal>shutdown</literal>に設定されていると削除されないことに留意してください。
設定が変更されるか、<filename>recovery.signal</filename>が手動で削除されない限り、以降起動しても直ちに停止されてしまいます。
       </para>
       <para>
<!--
        This setting has no effect if no recovery target is set.
        If <xref linkend="guc-hot-standby"/> is not enabled, a setting of
        <literal>pause</literal> will act the same as <literal>shutdown</literal>.
        If the recovery target is reached while a promotion is ongoing,
        a setting of <literal>pause</literal> will act the same as
        <literal>promote</literal>.
-->
この設定はリカバリ対象が設定されていない場合には効果がありません。
<xref linkend="guc-hot-standby"/>が有効になっていない場合、<literal>pause</literal>の設定は<literal>shutdown</literal>と同じように動作します。
昇格中にリカバリ対象に到達した場合は、<literal>pause</literal>は<literal>promote</literal>と同じように働きます。
       </para>
       <para>
<!--
        In any case, if a recovery target is configured but the archive
        recovery ends before the target is reached, the server will shut down
        with a fatal error.
-->
どのような場合でも、リカバリ対象が設定されていて、アーカイブリカバリがそのリカバリ対象に到達する前に終了すると、サーバはフェイタルエラーで停止します。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect2>

   <sect2 id="runtime-config-wal-summarization">
<!--
    <title>WAL Summarization</title>
-->
    <title>WAL要約</title>

    <para>
<!--
     These settings control WAL summarization, a feature which must be
     enabled in order to perform an
     <link linkend="backup-incremental-backup">incremental backup</link>.
-->
これらの設定は、WAL要約を制御します。この機能は、<link linkend="backup-incremental-backup">インクリメンタルバックアップ</link>を実行するために有効にする必要があります。
    </para>

    <variablelist>
     <varlistentry id="guc-summarize-wal" xreflabel="summarize_wal">
      <term><varname>summarize_wal</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>summarize_wal</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>summarize_wal</varname>設定パラメータ</primary>
      </indexterm>
      </term>
     <listitem>
      <para>
<!--
       Enables the WAL summarizer process. Note that WAL summarization can
       be enabled either on a primary or on a standby.  This parameter can only
       be set in the <filename>postgresql.conf</filename> file or on the server
       command line.  The default is <literal>off</literal>.
-->
WAL要約プロセスを有効にします。
WAL要約はプライマリまたはスタンバイのいずれかで有効にできることに注意してください。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
デフォルトは<literal>off</literal>です。
      </para>
      <para>
<!--
       The server cannot be started with <literal>summarize_wal=on</literal>
       if <literal>wal_level</literal> is set to <literal>minimal</literal>. If
       <literal>summarize_wal=on</literal> is configured after server startup
       while <literal>wal_level=minimal</literal>, the summarizer will run
       but refuse to generate summary files for any WAL generated with
       <literal>wal_level=minimal</literal>.
-->
<literal>wal_level</literal>が<literal>minimal</literal>に設定されている場合、サーバを<literal>summarize_wal=on</literal>で起動することはできません。
<literal>wal_level=minimal</literal>の状態でサーバを起動し、その後<literal>summarize_wal=on</literal>に設定した場合、要約処理は動作しますが、<literal>wal_level=minimal</literal>で生成されたWALの要約ファイルの生成は拒否します。
      </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-summary-keep-time" xreflabel="wal_summary_keep_time">
      <term><varname>wal_summary_keep_time</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_summary_keep_time</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_summary_keep_time</varname>設定パラメータ</primary>
      </indexterm>
      </term>
     <listitem>
      <para>
<!--
       Configures the amount of time after which the WAL summarizer
       automatically removes old WAL summaries. The file timestamp is used to
       determine which files are old enough to remove. Typically, you should set
       this comfortably higher than the time that could pass between a backup
       and a later incremental backup that depends on it.  WAL summaries must
       be available for the entire range of WAL records between the preceding
       backup and the new one being taken; if not, the incremental backup will
       fail. If this parameter is set to zero, WAL summaries will not be
       automatically deleted, but it is safe to manually remove files that you
       know will not be required for future incremental backups.
       This parameter can only be set in the
       <filename>postgresql.conf</filename> file or on the server command line.
       If this value is specified without units, it is taken as minutes.
       The default is 10 days. If <literal>summarize_wal = off</literal>,
       existing WAL summaries will not be removed regardless of the value of
       this parameter, because the WAL summarizer will not run.
-->
WAL要約処理が自動的に古いWAL要約を削除するまでの時間を設定します。
ファイルタイムスタンプは、どのファイルが削除するのに十分な古さであるかを判断するために使用されます。
通常、この値は、バックアップとそれに依存する後のインクリメンタルバックアップとの間で経過する時間よりも余裕を持って高く設定する必要があります。
WAL要約は、先行するバックアップと新しいバックアップの間のWALレコードの全範囲に対して利用可能でなければなりません。そうでない場合、インクリメンタルバックアップは失敗します。
このパラメータがゼロに設定されている場合、WAL要約は自動的には削除されませんが、将来の増分バックアップに必要でないことが分かっているファイルは手動で安全に削除できます。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
この値が単位なしで指定されると、分として解釈されます。
デフォルトは10日間です。
<literal>summarize_wal = off</literal>の場合、WAL要約処理が動作しないため、このパラメータの値に関わらず、既存のWAL要約は削除されません。
      </para>
      </listitem>
     </varlistentry>

    </variablelist>

   </sect2>

   </sect1>

   <sect1 id="runtime-config-replication">
<!--
    <title>Replication</title>
-->
    <title>レプリケーション</title>

    <para>
<!--
     These settings control the behavior of the built-in
     <firstterm>streaming replication</firstterm> feature (see
     <xref linkend="streaming-replication"/>), and the built-in
     <firstterm>logical replication</firstterm> feature (see
     <xref linkend="logical-replication"/>).
-->
これらの設定は、組み込み<firstterm>ストリーミングレプリケーション</firstterm>機能（<xref linkend="streaming-replication"/>参照）および組み込み<firstterm>論理レプリケーション</firstterm>機能（<xref linkend="logical-replication"/>を参照）の動作を制御します。
<xref linkend="streaming-replication"/>
    </para>

    <para>
<!--
     For <emphasis>streaming replication</emphasis>, servers will be either a
     primary or a standby server.  Primaries can send data, while standbys
     are always receivers of replicated data.  When cascading replication
     (see <xref linkend="cascading-replication"/>) is used, standby servers
     can also be senders, as well as receivers.
     Parameters are mainly for sending and standby servers, though some
     parameters have meaning only on the primary server.  Settings may vary
     across the cluster without problems if that is required.
-->
<emphasis>ストリーミングレプリケーション</emphasis>では、サーバ群のサーバはプライマリかスタンバイのいずれかです。
プライマリはデータを送出する一方、複数のスタンバイは複製されたデータを常に受け取ります。
カスケードレプリケーション（<xref linkend="cascading-replication"/>を参照）が使用されている場合、スタンバイサーバ群は受け取り手でもあり、送り手でもあります。
パラメータは主として送出サーバとスタンバイサーバ用ですが、いくつかのパラメータはプライマリサーバのみに効力を発します。
必要とあればクラスタに渡って問題なく設定を変化させることができます。
    </para>

    <para>
<!--
     For <emphasis>logical replication</emphasis>, <firstterm>publishers</firstterm>
     (servers that do <link linkend="sql-createpublication"><command>CREATE PUBLICATION</command></link>)
     replicate data to <firstterm>subscribers</firstterm>
     (servers that do <link linkend="sql-createsubscription"><command>CREATE SUBSCRIPTION</command></link>).
     Servers can also be publishers and subscribers at the same time. Note,
     the following sections refer to publishers as "senders". For more details
     about logical replication configuration settings refer to
     <xref linkend="logical-replication-config"/>.
-->
<emphasis>論理レプリケーション</emphasis>の場合、<firstterm>パブリッシャー（</firstterm><link linkend="sql-createpublication"><command>CREATE PUBLICATION</command></link>を実行するサーバ）は、データを<firstterm>サブスクライバー</firstterm>（<link linkend="sql-createsubscription"><command>CREATE SUBSCRIPTION</command></link>を実行するサーバ）に複製します。
サーバは、パブリッシャーとサブスクライバーを同時に兼ねることもできます。
以降の節でパブリッシャーを「送信者」と呼ぶことに注意してください。
論理レプリケーション設定設定の詳細は、<xref linkend="logical-replication-config"/>を参照してください。
    </para>

    <sect2 id="runtime-config-replication-sender">
<!--
     <title>Sending Servers</title>
-->
     <title>送出サーバ群</title>

     <para>
<!--
      These parameters can be set on any server that is
      to send replication data to one or more standby servers.
      The primary is always a sending server, so these parameters must
      always be set on the primary.
      The role and meaning of these parameters does not change after a
      standby becomes the primary.
-->
これらのパラメータはレプリケーションデータを１つ、またはそれ以上複数のスタンバイサーバに送るすべてのサーバ上で設定することができます。
プライマリは常に送出サーバであるため、パラメータは常にプライマリ上に設定されなければなりません。
これらのパラメータの役割と意味はスタンバイが後にプライマリに昇格しても変わりません。
     </para>

     <variablelist>
      <varlistentry id="guc-max-wal-senders" xreflabel="max_wal_senders">
       <term><varname>max_wal_senders</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_wal_senders</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>max_wal_senders</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
       <para>
<!--
        Specifies the maximum number of concurrent connections from standby
        servers or streaming base backup clients (i.e., the maximum number of
        simultaneously running WAL sender processes). The default is
        <literal>10</literal>.  The value <literal>0</literal> means
        replication is disabled.  Abrupt disconnection of a streaming client might
        leave an orphaned connection slot behind until a timeout is reached,
        so this parameter should be set slightly higher than the maximum
        number of expected clients so disconnected clients can immediately
        reconnect.  This parameter can only be set at server start.  Also,
        <varname>wal_level</varname> must be set to
        <literal>replica</literal> or higher to allow connections from standby
        servers.
-->
複数のスタンバイサーバあるいは、ストリーミングを使ったベースバックアップクライアントからの同時接続を受ける接続最大値を設定します（つまり、同時に稼働するWAL送信プロセスの最大値です）。
デフォルトは<literal>10</literal>です。
<literal>0</literal>ならば、レプリケーションは無効であるという意味になります。
ストリーミングクライアントの突然の切断により、タイムアウトになるまで親のない接続スロットが残ることがあります。
ですから、このパラメータは想定されるクライアント数の最大値よりも少し大きめにして、切断されたクライアントが直ちに再接続できるようにした方が良いでしょう。
このパラメータはサーバ起動時のみ設定可能です。
また、スタンバイサーバからの接続を許可するには、<varname>wal_level</varname>を<literal>replica</literal>以上に設定しておかなければなりません。
       </para>

       <para>
<!--
         When running a standby server, you must set this parameter to the
         same or higher value than on the primary server. Otherwise, queries
         will not be allowed in the standby server.
-->
スタンバイサーバを実行する際は、このパラメータをプライマリサーバと同じか高い値にしなければなりません。
さもなければ、スタンバイサーバでクエリを実行できなくなります。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-max-replication-slots" xreflabel="max_replication_slots">
       <term><varname>max_replication_slots</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_replication_slots</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Specifies the maximum number of replication slots
         (see <xref linkend="streaming-replication-slots"/>) that the server
         can support. The default is 10.  This parameter can only be set at
         server start.
         Setting it to a lower value than the number of currently
         existing replication slots will prevent the server from starting.
         Also, <varname>wal_level</varname> must be set
         to <literal>replica</literal> or higher to allow replication slots to
         be used.
-->
サーバが使用できるレプリケーションスロット(<xref linkend="streaming-replication-slots"/>参照)の最大数を指定します。
デフォルトは10です。
このパラメータはサーバ起動時のみ設定可能です。
現在存在しているレプリケーションスロットの数よりも少ない値を設定すると、サーバは起動しません。
また、レプリケーションスロットが使用できるためには、<varname>wal_level</varname>を<literal>replica</literal>以上に設定しなければなりません。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-wal-keep-size" xreflabel="wal_keep_size">
       <term><varname>wal_keep_size</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>wal_keep_size</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>wal_keep_size</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
       <para>
<!--
        Specifies the minimum size of past WAL files kept in the
        <filename>pg_wal</filename>
        directory, in case a standby server needs to fetch them for streaming
        replication. If a standby
        server connected to the sending server falls behind by more than
        <varname>wal_keep_size</varname> megabytes, the sending server might
        remove a WAL segment still needed by the standby, in which case the
        replication connection will be terminated.  Downstream connections
        will also eventually fail as a result.  (However, the standby
        server can recover by fetching the segment from archive, if WAL
        archiving is in use.)
-->
<filename>pg_wal</filename>ディレクトリに保持する過去のWALファイルの最小サイズを指定します。
もし送出サーバに接続しているスタンバイサーバが<varname>wal_keep_size</varname>メガバイトを越えて遅延した場合、送出サーバはスタンバイサーバが今後とも必要とするWALセグメントを削除する可能性があります。
この場合、レプリケーション接続は終了させられます。結果として下流に対する接続も結局は終了されることがあります。（しかし、WALアーカイブが使用されていれば、スタンバイサーバはアーカイブからセグメントを取り出し、復旧することができます。）
       </para>

       <para>
<!--
        This sets only the minimum size of segments retained in
        <filename>pg_wal</filename>; the system might need to retain more segments
        for WAL archival or to recover from a checkpoint. If
        <varname>wal_keep_size</varname> is zero (the default), the system
        doesn't keep any extra segments for standby purposes, so the number
        of old WAL segments available to standby servers is a function of
        the location of the previous checkpoint and status of WAL
        archiving.
        If this value is specified without units, it is taken as megabytes.
        This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
-->
<filename>pg_wal</filename>に保持され続けるセグメントの最小値のみを設定します。
システムはWALアーカイブのため、またはチェックポイントからの復旧のため、より多くのセグメント保持が必要となることがあります。
もし<varname>wal_keep_size</varname>が（デフォルトの）ゼロの場合、システムはスタンバイサーバのために追加セグメントを保持することはしません。
従って、スタンバイサーバが使用できる古いWALセグメントの数は、直前のチェックポイントの場所とWALアーカイブの状況によって算出されます。
この値が単位無しで指定されると、メガバイトであると見なします。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-max-slot-wal-keep-size" xreflabel="max_slot_wal_keep_size">
       <term><varname>max_slot_wal_keep_size</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_slot_wal_keep_size</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>max_slot_wal_keep_size</varname>設定パラメータ</primary>
       </indexterm>
       </term>
       <listitem>
       <para>
<!--
        Specify the maximum size of WAL files
        that <link linkend="streaming-replication-slots">replication
        slots</link> are allowed to retain in the <filename>pg_wal</filename>
        directory at checkpoint time.
        If <varname>max_slot_wal_keep_size</varname> is -1 (the default),
        replication slots may retain an unlimited amount of WAL files.  Otherwise, if
        restart_lsn of a replication slot falls behind the current LSN by more
        than the given size, the standby using the slot may no longer be able
        to continue replication due to removal of required WAL files. You
        can see the WAL availability of replication slots
        in <link linkend="view-pg-replication-slots">pg_replication_slots</link>.
        If this value is specified without units, it is taken as megabytes.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
チェックポイント時に<link linkend="streaming-replication-slots">レプリケーションスロット</link>が<filename>pg_wal</filename>ディレクトリに残すことのできる
最大のWALファイルのサイズを指定します。
<varname>max_slot_wal_keep_size</varname>が-1 (デフォルトです)なら、レプリケーションスロットは無制限のWALファイルを残すかも知れません。
そうでなければ、レプリケーションスロットのrestart_lsnが現在のLSNよりも与えられたサイズ分遅れると、そのスロットを使っているスタンバイは必要なWALファイルが削除されたためにレプリケーションを継続できなくなります。
レプリケーションスロットのWALが存在するかどうかは<link linkend="view-pg-replication-slots">pg_replication_slots</link>を見て確認できます。
この値が単位無しで指定されると、メガバイトであると見なします。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
       </listitem>
      </varlistentry>

     <varlistentry id="guc-idle-replication-slot-timeout" xreflabel="idle_replication_slot_timeout">
      <term><varname>idle_replication_slot_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>idle_replication_slot_timeout</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Invalidate replication slots that have remained inactive (not used by
        a <link linkend="protocol-replication">replication connection</link>)
        for longer than this duration.
        If this value is specified without units, it is taken as seconds.
        A value of zero (the default) disables the idle timeout
        invalidation mechanism.  This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command
        line.
-->
《機械翻訳》この期間より長く非アクティブのままになっている<link linkend="protocol-replication">レプリケーションレプリケーション</link>によって使用されていないコネクションスロットを無効にします。
この値がユニットなしで指定された場合、秒単位で処理されます。
ゼロ（デフォルト）の値は、アイドル状態のタイムアウト無効化メカニズムを無効にします。
このパラメータは、<filename>postgresql.conf</filename>ファイルまたはサーバコマンドラインでのみ設定できます。
       </para>

       <para>
<!--
        Slot invalidation due to idle timeout occurs during checkpoint.
        Because checkpoints happen at <varname>checkpoint_timeout</varname>
        intervals, there can be some lag between when the
        <varname>idle_replication_slot_timeout</varname> was exceeded and when
        the slot invalidation is triggered at the next checkpoint.
        To avoid such lags, users can force a checkpoint to promptly invalidate
        inactive slots. The duration of slot inactivity is calculated using the
        slot's <link linkend="view-pg-replication-slots">pg_replication_slots</link>.<structfield>inactive_since</structfield>
        value.
-->
《機械翻訳》スロットの空き時間によるタイムアウトの無効化は、チェックポイント中に発生します。
チェックポイントは<varname>checkpoint_timeout</varname>間隔で発生するため、<varname>idle_replication_slot_timeout</varname>を超えた時点と、次のスロットでチェックポイントの無効化がトリガされる時点との間に多少の遅延が発生する可能性があります。
このような遅延を回避するために、ユーザはチェックポイントに対して、すぐに非アクティブなスロットを無効にするように強制できます。
スロットの非アクティブな期間は、スロットの<link linkend="view-pg-replication-slots">pg_replication_slots</link>.<structfield>inactive_since</structfield>値を使用して計算されます。
       </para>

       <para>
<!--
        Note that the idle timeout invalidation mechanism is not applicable
        for slots that do not reserve WAL or for slots on the standby server
        that are being synced from the primary server (i.e., standby slots
        having <link linkend="view-pg-replication-slots">pg_replication_slots</link>.<structfield>synced</structfield>
        value <literal>true</literal>). Synced slots are always considered to
        be inactive because they don't perform logical decoding to produce
        changes.
-->
《機械翻訳》ノートアイドルタイムアウト無効化メカニズムは、WALを予約しないスロットや、スタンバイサーバから同期されるプライマリサーバ上のスロット（すなわち、<link linkend="view-pg-replication-slots">pg_replication_slots</link>.<structfield>synced</structfield>の値<literal>true</literal>を持つレプリケーションスロット）には適用されません。
同期スロットは、変更を生成するロジカルデコーディングを行わないため、常に非アクティブとみなされます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-sender-timeout" xreflabel="wal_sender_timeout">
      <term><varname>wal_sender_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_sender_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_sender_timeout</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Terminate replication connections that are inactive for longer
        than this amount of time. This is useful for
        the sending server to detect a standby crash or network outage.
        If this value is specified without units, it is taken as milliseconds.
        The default value is 60 seconds.
        A value of zero disables the timeout mechanism.
-->
指定された時間より長く非活動であるレプリケーション接続を停止します。
スタンバイサーバのクラッシュ、またはネットワークの停止を送出サーバが検出することにこれが役立ちます。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
デフォルトの値は60秒です。
値ゼロはこのタイムアウト機能を無効にします。
       </para>
       <para>
<!--
        With a cluster distributed across multiple geographic
        locations, using different values per location brings more flexibility
        in the cluster management. A smaller value is useful for faster
        failure detection with a standby having a low-latency network
        connection, and a larger value helps in judging better the health
        of a standby if located on a remote location, with a high-latency
        network connection.
-->
地理的に複数の場所に分散したクラスタでは、場所によって異なる値を使うことでクラスタ管理がより柔軟にできるようになります。
より小さな値は低遅延ネットワーク接続上のスタンバイの障害検知をより高速にするのに役立ちます。
遅延の大きなネットワーク接続に設置されたスタンバイの健全性の判断にはより大きな値が助けになるでしょう。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-track-commit-timestamp" xreflabel="track_commit_timestamp">
      <term><varname>track_commit_timestamp</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>track_commit_timestamp</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>track_commit_timestamp</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Record commit time of transactions. This parameter
        can only be set in <filename>postgresql.conf</filename> file or on the server
        command line. The default value is <literal>off</literal>.
-->
トランザクションのコミットタイムを記録します。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
デフォルトは<literal>off</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-synchronized-standby-slots" xreflabel="synchronized_standby_slots">
      <term><varname>synchronized_standby_slots</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>synchronized_standby_slots</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>synchronized_standby_slots</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        A comma-separated list of streaming replication standby server slot names
        that logical WAL sender processes will wait for. Logical WAL sender processes
        will send decoded changes to plugins only after the specified replication
        slots confirm receiving WAL. This guarantees that logical replication
        failover slots do not consume changes until those changes are received
        and flushed to corresponding physical standbys. If a
        logical replication connection is meant to switch to a physical standby
        after the standby is promoted, the physical replication slot for the
        standby should be listed here. Note that logical replication will not
        proceed if the slots specified in the
        <varname>synchronized_standby_slots</varname> do not exist or are invalidated.
        Additionally, the replication management functions
-->
ロジカルWAL送信プロセスが待機する、カンマで区切られたストリーミングレプリケーションのスタンバイサーバのスロット名です。
ロジカルWAL送信プロセスは、指定されたレプリケーションスロットがWALの受信を確認した後にのみ、デコードされた変更をプラグインに送信します。
これにより、論理レプリケーションフェイルオーバースロットは、変更が受信され、対応する物理的スタンバイに吐き出されるまで、変更を消費しないことが保証されます。
物理スタンバイが昇格した後、論理レプリケーションコネクションがその物理スタンバイに移動した場合は、スタンバイの物理レプリケーションスロットがここに表示されます。
<varname>synchronized_standby_slots</varname>で指定されたスロットが存在しないか、無効になっている場合、論理レプリケーションが続行しないことに注意してください。
また、レプリケーション管理関数である
<!--
        <link linkend="pg-replication-slot-advance">
        <function>pg_replication_slot_advance</function></link>,
        <link linkend="pg-logical-slot-get-changes">
        <function>pg_logical_slot_get_changes</function></link>, and
        <link linkend="pg-logical-slot-peek-changes">
        <function>pg_logical_slot_peek_changes</function></link>,
        when used with logical failover slots, will block until all
        physical slots specified in <varname>synchronized_standby_slots</varname> have
        confirmed WAL receipt.
-->
<link linkend="pg-replication-slot-advance">、<function>pg_replication_slot_advance</function></link>、<link linkend="pg-logical-slot-get-changes">、<function>pg_logical_slot_get_changes</function></link>、<link linkend="pg-logical-slot-peek-changes">、<function>pg_logical_slot_peek_changes</function></link>がロジカルフェイルオーバースロットに使用されると、<varname>synchronized_standby_slots</varname>で指定されたすべての物理スロットでWAL受信が確認されるまでブロックします。
       </para>
       <para>
<!--
        The standbys corresponding to the physical replication slots in
        <varname>synchronized_standby_slots</varname> must configure
        <literal>sync_replication_slots = true</literal> so they can receive
        logical failover slot changes from the primary.
-->
<varname>synchronized_standby_slots</varname>内の物理レプリケーションスロットに対応するスタンバイは、<literal>sync_replication_slots = true</literal>を設定して、プライマリからロジカルフェイルオーバースロットの変更を受信できるようにする必要があります。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-replication-primary">
<!--
     <title>Primary Server</title>
-->
     <title>プライマリサーバ</title>

     <para>
<!--
      These parameters can be set on the primary server that is
      to send replication data to one or more standby servers.
      Note that in addition to these parameters,
      <xref linkend="guc-wal-level"/> must be set appropriately on the primary
      server, and optionally WAL archiving can be enabled as
      well (see <xref linkend="runtime-config-wal-archiving"/>).
      The values of these parameters on standby servers are irrelevant,
      although you may wish to set them there in preparation for the
      possibility of a standby becoming the primary.
-->
これらのパラメータはレプリケーションデータを１つ、またはそれ以上複数のスタンバイサーバに送るプライマリサーバ上で設定することができます。
これらパラメータに加え、<xref linkend="guc-wal-level"/>はプライマリサーバ上で適切に設定される必要があり、オプションとしてWALアーカイブを有効にしてもかまいません（<xref linkend="runtime-config-wal-archiving"/>を参照してください）。
スタンバイサーバがプライマリサーバになるかもしれない状況に備え、それらのパラメータをスタンバイサーバで設定したいと考えたとしても、スタンバイサーバ上でのパラメータの値は意味をなしません。
     </para>

    <variablelist>

     <varlistentry id="guc-synchronous-standby-names" xreflabel="synchronous_standby_names">
      <term><varname>synchronous_standby_names</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>synchronous_standby_names</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>synchronous_standby_names</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies a list of standby servers that can support
        <firstterm>synchronous replication</firstterm>, as described in
        <xref linkend="synchronous-replication"/>.
        There will be one or more active synchronous standbys;
        transactions waiting for commit will be allowed to proceed after
        these standby servers confirm receipt of their data.
        The synchronous standbys will be those whose names appear
        in this list, and
        that are both currently connected and streaming data in real-time
        (as shown by a state of <literal>streaming</literal> in the
        <link linkend="monitoring-pg-stat-replication-view">
        <structname>pg_stat_replication</structname></link> view).
        Specifying more than one synchronous standby can allow for very high
        availability and protection against data loss.
-->
<xref linkend="synchronous-replication"/>で説明されているように、<firstterm>同期レプリケーション</firstterm>をサポート可能なスタンバイサーバのリストを指定します。
活動中の同期スタンバイサーバは1つまたはそれ以上です。
コミットを待機しているトランザクションは、このスタンバイサーバがそのデータの受信を確認してから処理の継続が許可されます。
同期スタンバイサーバはこのリストに名前が挙げられていており、現時点で接続され、そしてデータをリアルタイムでストリーミングしているものです（<link linkend="monitoring-pg-stat-replication-view"><structname>pg_stat_replication</structname></link> ビューにおいて<literal>streaming</literal>状態として示されています）。
このリストの後の方に記載されているその他のスタンバイサーバは潜在的に同期スタンバイサーバになることを示しています。
二つ以上の同期スタンバイサーバ名を指定することで、かなりの高可用性とデータ損失に対する保護が得られます。
       </para>
       <para>
<!--
        The name of a standby server for this purpose is the
        <varname>application_name</varname> setting of the standby, as set in the
        standby's connection information.  In case of a physical replication
        standby, this should be set in the <varname>primary_conninfo</varname>
        setting; the default is the setting of <xref linkend="guc-cluster-name"/>
        if set, else <literal>walreceiver</literal>.
        For logical replication, this can be set in the connection
        information of the subscription, and it defaults to the
        subscription name.  For other replication stream consumers,
        consult their documentation.
-->
この目的のためのスタンバイサーバ名は、スタンバイの接続情報で指定された、スタンバイの<varname>application_name</varname>設定です。
物理レプリケーションスタンバイでは、<varname>primary_conninfo</varname>設定です。
デフォルトは<xref linkend="guc-cluster-name"/>の設定で、さもなければ<literal>walreceiver</literal>です。
論理レプリケーションでは、サブスクリプションの接続情報で設定でき、デフォルトはサブスクリプション名です。
それ以外のレプリケーションストリームの消費者については、それぞれのドキュメントをご覧ください。
       </para>
       <para>
<!--
        This parameter specifies a list of standby servers using
        either of the following syntaxes:
-->
このパラメータは、以下の構文のいずれかを用いてスタンバイサーバのリストを指定します。
<synopsis>
[FIRST] <replaceable class="parameter">num_sync</replaceable> ( <replaceable class="parameter">standby_name</replaceable> [, ...] )
ANY <replaceable class="parameter">num_sync</replaceable> ( <replaceable class="parameter">standby_name</replaceable> [, ...] )
<replaceable class="parameter">standby_name</replaceable> [, ...]
</synopsis>
<!--
        where <replaceable class="parameter">num_sync</replaceable> is
        the number of synchronous standbys that transactions need to
        wait for replies from,
        and <replaceable class="parameter">standby_name</replaceable>
        is the name of a standby server.
        <replaceable class="parameter">num_sync</replaceable>
        must be an integer value greater than zero.
        <literal>FIRST</literal> and <literal>ANY</literal> specify the method to choose
        synchronous standbys from the listed servers.
-->
《マッチ度[70.171674]》ここで、<replaceable class="parameter">num_sync</replaceable>は、トランザクションが応答を待機する必要のある同期スタンバイの数です。
<replaceable class="parameter">standby_name</replaceable>は、スタンバイサーバの名前です。
<literal>FIRST</literal>と<literal>ANY</literal>は、リスト中のサーバから同期スタンバイを選ぶ方法を指定します。
《機械翻訳》ここで、<replaceable class="parameter">num_sync</replaceable>はトランザクションが応答を待機する必要がある同期的スタンバイの数、<replaceable class="parameter">standby_名前</replaceable>はスタンバイサーバの名前です。
<replaceable class="parameter">num_sync</replaceable>は整数の値より大きいゼロである必要があります。
<literal>FIRST</literal>および<literal>ANY</literal>メソッドを指定して、リストされたサーバから同期的スタンバイを選択します。
       </para>
       <para>
<!--
        The keyword <literal>FIRST</literal>, coupled with
        <replaceable class="parameter">num_sync</replaceable>, specifies a
        priority-based synchronous replication and makes transaction commits
        wait until their WAL records are replicated to
        <replaceable class="parameter">num_sync</replaceable> synchronous
        standbys chosen based on their priorities. For example, a setting of
        <literal>FIRST 3 (s1, s2, s3, s4)</literal> will cause each commit to wait for
        replies from three higher-priority standbys chosen from standby servers
        <literal>s1</literal>, <literal>s2</literal>, <literal>s3</literal> and <literal>s4</literal>.
        The standbys whose names appear earlier in the list are given higher
        priority and will be considered as synchronous. Other standby servers
        appearing later in this list represent potential synchronous standbys.
        If any of the current synchronous standbys disconnects for whatever
        reason, it will be replaced immediately with the next-highest-priority
        standby. The keyword <literal>FIRST</literal> is optional.
-->
キーワード<literal>FIRST</literal>を<replaceable class="parameter">num_sync</replaceable>と組み合わせると、優先度に基づく同期レプリケーションを指定し、優先度に基づいて選ばれた<replaceable class="parameter">num_sync</replaceable>個の同期スタンバイにWALレコードがレプリケーションされるまで、トランザクションのコミットは待機します。
たとえば<literal>FIRST 3 (s1, s2, s3, s4)</literal>とすると、<literal>s1</literal>、<literal>s2</literal>、<literal>s3</literal>、<literal>s4</literal>の中から選ばれた優先順位の高い3つのスタンバイサーバが応答を返すまでコミットは待機します。
リストの中で前の方に名前が出現するスタンバイには高い優先度が与えられ、同期と見なされます。
それ以外のリストの中で後の方に名前が上がっているスタンバイサーバは、潜在的な同期スタンバイであることを表しています。
どんな理由であれ、現在の同期スタンバイが切断されると、次に高い優先度を持つスタンバイに直ちに取って代わられます。
キーワード<literal>FIRST</literal>はオプションです。
       </para>
       <para>
<!--
        The keyword <literal>ANY</literal>, coupled with
        <replaceable class="parameter">num_sync</replaceable>, specifies a
        quorum-based synchronous replication and makes transaction commits
        wait until their WAL records are replicated to <emphasis>at least</emphasis>
        <replaceable class="parameter">num_sync</replaceable> listed standbys.
        For example, a setting of <literal>ANY 3 (s1, s2, s3, s4)</literal> will cause
        each commit to proceed as soon as at least any three standbys of
        <literal>s1</literal>, <literal>s2</literal>, <literal>s3</literal> and <literal>s4</literal>
        reply.
-->
キーワード<literal>ANY</literal>を<replaceable class="parameter">num_sync</replaceable>と組み合わせると、クォーラムに基づく同期レプリケーションを指定し、列挙されたスタンバイのうち<emphasis>少なくとも</emphasis><replaceable class="parameter">num_sync</replaceable>個の同期スタンバイにWALレコードがレプリケーションされるまで、トランザクションのコミットを待たせます。
たとえば<literal>ANY 3 (s1, s2, s3, s4)</literal>とすると、<literal>s1</literal>、<literal>s2</literal>、<literal>s3</literal>、<literal>s4</literal>のうちの少なくとも3つが応答を返した時点でコミットが進行します。
       </para>
       <para>
<!--
        <literal>FIRST</literal> and <literal>ANY</literal> are case-insensitive. If these
        keywords are used as the name of a standby server,
        its <replaceable class="parameter">standby_name</replaceable> must
        be double-quoted.
-->
<literal>FIRST</literal>と<literal>ANY</literal>は、大文字小文字を区別しません。
もしこれらのキーワードをスタンバイサーバの名前に使う場合は、<replaceable class="parameter">standby_name</replaceable>は二重引用符で囲わなければなりません。
       </para>
       <para>
<!--
        The third syntax was used before <productname>PostgreSQL</productname>
        version 9.6 and is still supported. It's the same as the first syntax
        with <literal>FIRST</literal> and
        <replaceable class="parameter">num_sync</replaceable> equal to 1.
        For example, <literal>FIRST 1 (s1, s2)</literal> and <literal>s1, s2</literal> have
        the same meaning: either <literal>s1</literal> or <literal>s2</literal> is chosen
        as a synchronous standby.
-->
3番目の構文は、<productname>PostgreSQL</productname> 9.6よりも前のバージョンで用いられていたもので、依然としてサポートされています。
最初の構文で、<literal>FIRST</literal>、<replaceable class="parameter">num_sync</replaceable>を1とした時と同じです。
たとえば、<literal>FIRST 1 (s1, s2)</literal>と<literal>s1, s2</literal>は同じ意味です。
<literal>s1</literal>か<literal>s2</literal>が同期スタンバイとして選ばれます。
       </para>
       <para>
<!--
        The special entry <literal>*</literal> matches any standby name.
-->
特別なエントリ<literal>*</literal>は、すべてのスタンバイ名に一致します。
       </para>
       <para>
<!--
        There is no mechanism to enforce uniqueness of standby names.  In case
        of duplicates one of the matching standbys will be considered as
        higher priority, though exactly which one is indeterminate.
-->
スタンバイの一意性を強制する仕組みはありません。
重複があった場合、一致したスタンバイは優先順位が高いと見なされますが、どれが選ばれるかは非決定的です。
       </para>
       <note>
        <para>
<!--
         Each <replaceable class="parameter">standby_name</replaceable>
         should have the form of a valid SQL identifier, unless it
         is <literal>*</literal>.  You can use double-quoting if necessary.  But note
         that <replaceable class="parameter">standby_name</replaceable>s are
         compared to standby application names case-insensitively, whether
         double-quoted or not.
-->
各々の<replaceable class="parameter">standby_name</replaceable>は、<literal>*</literal>である場合を除き、SQL識別子の形式を取らなければなりません。
二重引用符を用いることもできます。
しかし、二重引用符の有無に関わらず、<replaceable class="parameter">standby_name</replaceable>とスタンバイのアプリケーション名の比較は、大文字小文字の区別なしに行われることに注意してください。
        </para>
       </note>
       <para>
<!--
        If no synchronous standby names are specified here, then synchronous
        replication is not enabled and transaction commits will not wait for
        replication.  This is the default configuration.  Even when
        synchronous replication is enabled, individual transactions can be
        configured not to wait for replication by setting the
        <xref linkend="guc-synchronous-commit"/> parameter to
        <literal>local</literal> or <literal>off</literal>.
-->
ここに同期スタンバイ名が指定されていない場合、同期レプリケーションは有効とはならず、トランザクションコミットはレプリケーションを待機しません。これがデフォルトの設定です。同期レプリケーションが有効であっても、<xref linkend="guc-synchronous-commit"/>パラメータを<literal>local</literal> または <literal>off</literal>に設定することにより、個別のトランザクションをレプリケーションに対して待機しないように設定できます。
       </para>
       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-replication-standby">
<!--
     <title>Standby Servers</title>
-->
     <title>スタンバイサーバ</title>

     <para>
<!--
      These settings control the behavior of a
      <link linkend="standby-server-operation">standby server</link>
      that is
      to receive replication data.  Their values on the primary server
      are irrelevant.
-->
これらの設定はレプリケーションデータを受け取る<link linkend="standby-server-operation">スタンバイサーバ</link>の動作を管理します。
プライマリサーバ上のこれらの値は無意味です。
     </para>

    <variablelist>

       <varlistentry id="guc-primary-conninfo" xreflabel="primary_conninfo">
        <term><varname>primary_conninfo</varname> (<type>string</type>)
        <indexterm>
          <primary><varname>primary_conninfo</varname> configuration parameter</primary>
        </indexterm>
        <indexterm>
          <primary><varname>primary_conninfo</varname>設定パラメータ</primary>
        </indexterm>
        </term>
        <listitem>
         <para>
<!--
          Specifies a connection string to be used for the standby server
          to connect with a sending server. This string is in the format
          described in <xref linkend="libpq-connstring"/>. If any option is
          unspecified in this string, then the corresponding environment
          variable (see <xref linkend="libpq-envars"/>) is checked. If the
          environment variable is not set either, then
          defaults are used.
-->
スタンバイサーバが送信サーバに接続するための接続文字列を指定します。
この文字列は、<xref linkend="libpq-connstring"/>で説明されている書式で記述されます。
この文字列に何のオプションも指定されていない場合、これに対応する環境変数 (<xref linkend="libpq-envars"/> 参照) が確認されます。
環境変数も設定されていなければデフォルトの値が使われます。
         </para>
         <para>
<!--
          The connection string should specify the host name (or address)
          of the sending server, as well as the port number if it is not
          the same as the standby server's default.
          Also specify a user name corresponding to a suitably-privileged role
          on the sending server (see
          <xref linkend="streaming-replication-authentication"/>).
          A password needs to be provided too, if the sender demands password
          authentication.  It can be provided in the
          <varname>primary_conninfo</varname> string, or in a separate
          <filename>~/.pgpass</filename> file on the standby server (use
          <literal>replication</literal> as the database name).
-->
接続文字列では、プライマリサーバのホスト名（またはアドレス）、スタンバイサーバのデフォルトと異なるのであればポート番号も指定する必要があります。
また、送信サーバ上で適切な権限を保有するロールのユーザを指定しなければなりません (<xref linkend="streaming-replication-authentication"/> 参照)。
送信サーバがパスワード認証を要求するのであれば、パスワードも記述される必要があります。
パスワードは <varname>primary_conninfo</varname>に記述することもできますし、スタンバイサーバ上の分離されたファイル<filename>~/.pgpass</filename>に記述することもできます (データベース名には <literal>replication</literal> を使います)。
         </para>
         <para>
<!--
          For replication slot synchronization (see
          <xref linkend="logicaldecoding-replication-slots-synchronization"/>),
          it is also necessary to specify a valid <literal>dbname</literal>
          in the <varname>primary_conninfo</varname> string. This will only be
          used for slot synchronization. It is ignored for streaming.
-->
レプリケーションスロットを同期（<xref linkend="logicaldecoding-replication-slots-synchronization"/>を参照）するために、<varname>primary_conninfo</varname>文字列に有効な<literal>dbname</literal>を指定する必要もあります。
これはスロットの同期にのみ使用されます。
ストリーミングでは無視されます。
         </para>
         <para>
<!--
          This parameter can only be set in the <filename>postgresql.conf</filename>
          file or on the server command line.
          If this parameter is changed while the WAL receiver process is
          running, that process is signaled to shut down and expected to
          restart with the new setting (except if <varname>primary_conninfo</varname>
          is an empty string).
          This setting has no effect if the server is not in standby mode.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
WAL受信プロセスが実行中にこのパラメータが変更されると、そのプロセスにシグナルが送られ、新しい設定で再起動するために停止します（<varname>primary_conninfo</varname>が空文字の場合を除きます。）
サーバがスタンバイモードでなければこの設定は無効となります。
         </para>
        </listitem>
       </varlistentry>
       <varlistentry id="guc-primary-slot-name" xreflabel="primary_slot_name">
        <term><varname>primary_slot_name</varname> (<type>string</type>)
        <indexterm>
          <primary><varname>primary_slot_name</varname> configuration parameter</primary>
        </indexterm>
        <indexterm>
          <primary><varname>primary_slot_name</varname>設定パラメータ</primary>
        </indexterm>
        </term>
        <listitem>
         <para>
<!--
          Optionally specifies an existing replication slot to be used when
          connecting to the sending server via streaming replication to control
          resource removal on the upstream node
          (see <xref linkend="streaming-replication-slots"/>).
          This parameter can only be set in the <filename>postgresql.conf</filename>
          file or on the server command line.
          If this parameter is changed while the WAL receiver process is running,
          that process is signaled to shut down and expected to restart with the
          new setting.
          This setting has no effect if <varname>primary_conninfo</varname> is not
          set or the server is not in standby mode.
-->
上流ノードのリソース削除を制御するためにストリーミングレプリケーション経由でプライマリに接続した場合、既存のレプリケーションスロットを使うように、必要に応じて指定します（<xref linkend="streaming-replication-slots"/>を参照）。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
WAL受信プロセスが実行中にこのパラメータが変更されると、そのプロセスにシグナルが送られ、新しい設定で再起動するために停止します。
<varname>primary_conninfo</varname>が設定されていない場合、この設定は無効です。
         </para>
        </listitem>
       </varlistentry>

     <varlistentry id="guc-hot-standby" xreflabel="hot_standby">
      <term><varname>hot_standby</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>hot_standby</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>hot_standby</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies whether or not you can connect and run queries during
        recovery, as described in <xref linkend="hot-standby"/>.
        The default value is <literal>on</literal>.
        This parameter can only be set at server start. It only has effect
        during archive recovery or in standby mode.
-->
<xref linkend="hot-standby"/>に記載されている通り、リカバリの最中に接続し、そして問い合わせを実行できるか否かを設定します。デフォルト値は<literal>on</literal>です。
このパラメータはサーバ起動時のみ設定可能です。
これは、アーカイブリカバリ期間、又はスタンバイモードにある場合にのみ効果をもたらします。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-standby-archive-delay" xreflabel="max_standby_archive_delay">
      <term><varname>max_standby_archive_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_standby_archive_delay</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_standby_archive_delay</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When hot standby is active, this parameter determines how long the
        standby server should wait before canceling standby queries that
        conflict with about-to-be-applied WAL entries, as described in
        <xref linkend="hot-standby-conflict"/>.
        <varname>max_standby_archive_delay</varname> applies when WAL data is
        being read from WAL archive (and is therefore not current).
        If this value is specified without units, it is taken as milliseconds.
        The default is 30 seconds.
        A value of -1 allows the standby to wait forever for conflicting
        queries to complete.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
ホットスタンバイがアクティブな場合、このパラメータは、<xref linkend="hot-standby-conflict"/>で説明されているように、適用されようとしているWALエントリと競合するスタンバイクエリをキャンセルするまで待機する時間を決定します。
<varname>max_standby_archive_delay</varname>は、WALデータがWALアーカイブから読み取られるときに適用されます（したがって最新ではありません）。
この値が単位なしで指定された場合、ミリ秒単位で取得されます。
デフォルトは30秒です。
値-1を指定すると、スタンバイは競合するクエリが完了するまで永遠に待機します。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
       <para>
<!--
        Note that <varname>max_standby_archive_delay</varname> is not the same as the
        maximum length of time a query can run before cancellation; rather it
        is the maximum total time allowed to apply any one WAL segment's data.
        Thus, if one query has resulted in significant delay earlier in the
        WAL segment, subsequent conflicting queries will have much less grace
        time.
-->
<varname>max_standby_archive_delay</varname>はキャンセル前に問い合わせが実行できる最大の時間の長さと同じでないことに注意してください。
むしろ、任意の１つのWALセグメントのデータの適用のために許される最大合計時間です。
従って、ある問い合わせによりWALセグメント内の前の部分で大幅な遅延となった場合、その後の衝突する問い合わせの猶予時間はずっと短くなります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-standby-streaming-delay" xreflabel="max_standby_streaming_delay">
      <term><varname>max_standby_streaming_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_standby_streaming_delay</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_standby_streaming_delay</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        When hot standby is active, this parameter determines how long the
        standby server should wait before canceling standby queries that
        conflict with about-to-be-applied WAL entries, as described in
        <xref linkend="hot-standby-conflict"/>.
        <varname>max_standby_streaming_delay</varname> applies when WAL data is
        being received via streaming replication.
        If this value is specified without units, it is taken as milliseconds.
        The default is 30 seconds.
        A value of -1 allows the standby to wait forever for conflicting
        queries to complete.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
ホットスタンバイがアクティブな場合、このパラメータは、 <xref linkend="hot-standby-conflict"/>で説明されているように、適用されようとしているWALエントリと競合するスタンバイクエリをキャンセルするまで待機する時間を決定します。
<varname>max_standby_streaming_delay</varname>は、ストリーミングレプリケーションを介してWALデータを受信するときに適用されます。
この値が単位なしで指定された場合、ミリ秒単位で取得されます。
デフォルトは30秒です。
値-1を指定すると、スタンバイは競合するクエリが完了するまで永久に待機します。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
       <para>
<!--
        Note that <varname>max_standby_streaming_delay</varname> is not the same as
        the maximum length of time a query can run before cancellation; rather
        it is the maximum total time allowed to apply WAL data once it has
        been received from the primary server.  Thus, if one query has
        resulted in significant delay, subsequent conflicting queries will
        have much less grace time until the standby server has caught up
        again.
-->
<varname>max_standby_streaming_delay</varname>はキャンセル前に問い合わせが実行できる最大の時間の長さと同じでないことに注意してください。
むしろ、プライマリサーバから一度受け取られたWALデータを適用するために許される最大合計時間です。
従って、ある問い合わせが大幅な遅延を起こした場合、その後の衝突する問い合わせは、スタンバイサーバがふたたび遅れを取り戻すまでの間、猶予時間はずっと短くなります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-receiver-create-temp-slot" xreflabel="wal_receiver_create_temp_slot">
      <term><varname>wal_receiver_create_temp_slot</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_receiver_create_temp_slot</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_receiver_create_temp_slot</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies whether the WAL receiver process should create a temporary replication
        slot on the remote instance when no permanent replication slot to use
        has been configured (using <xref linkend="guc-primary-slot-name"/>).
        The default is off.  This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
        If this parameter is changed while the WAL receiver process is running,
        that process is signaled to shut down and expected to restart with
        the new setting.
-->
永続レプリケーションスロットが(<xref linkend="guc-primary-slot-name"/>を使って)作成されない設定になっている時に、WAL受信プロセスがリモートインスタンス上に一時レプリケーションスロットを作るかどうかを指定します。
デフォルトはoffです。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
WAL受信プロセスが実行中にこのパラメータが変更されると、そのプロセスにシグナルが送られ、新しい設定で再起動するために停止します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-receiver-status-interval" xreflabel="wal_receiver_status_interval">
      <term><varname>wal_receiver_status_interval</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_receiver_status_interval</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_receiver_status_interval</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
      <para>
<!--
       Specifies the minimum frequency for the WAL receiver
       process on the standby to send information about replication progress
       to the primary or upstream standby, where it can be seen using the
       <link linkend="monitoring-pg-stat-replication-view">
       <structname>pg_stat_replication</structname></link>
       view.  The standby will report
       the last write-ahead log location it has written, the last position it
       has flushed to disk, and the last position it has applied.
       This parameter's value is the maximum amount of time between reports.
       Updates are sent each time the write or flush positions change, or as
       often as specified by this parameter if set to a non-zero value.
       There are additional cases where updates are sent while ignoring this
       parameter; for example, when processing of the existing WAL completes
       or when <varname>synchronous_commit</varname> is set to
       <literal>remote_apply</literal>.
       Thus, the apply position may lag slightly behind the true position.
       If this value is specified without units, it is taken as seconds.
       The default value is 10 seconds. This parameter can only be set in
       the <filename>postgresql.conf</filename> file or on the server
       command line.
-->
スタンバイサーバ上のWAL受信プロセスがプライマリ、または上位サーバに対してレプリケーションの進捗情報を送信する最小頻度を指定します。
送信された進捗情報は<link linkend="monitoring-pg-stat-replication-view"><structname>pg_stat_replication</structname></link>ビューにより確認することが可能です。
スタンバイサーバは書き込みがされた直近の先行書き込みログ（WAL）位置、ディスクにフラッシュされた直近のログ位置、およびリカバリ適用された直近のログ位置を報告します。
このパラメータの値がそれぞれの報告間における最大の時間間隔です。
書き込み、またはフラッシュ位置が変更される毎、あるいはこのパラメータがゼロ以外なら、最低でもこのパラメータで設定された頻度で更新情報が送信されます。
他にもこのパラメータを無視して更新情報が送信される場合があります。
たとえば、既存のWALの処理が完了するか、<varname>synchronous_commit</varname>が<literal>remote_apply</literal>に設定されている場合です。
従って、適用位置は真の位置よりも少し後ろにずれることがあります。
この値が単位なしで指定された場合は、秒単位であるとみなします。
デフォルトの値は10秒です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
      </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-hot-standby-feedback" xreflabel="hot_standby_feedback">
      <term><varname>hot_standby_feedback</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>hot_standby_feedback</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>hot_standby_feedback</varname> 設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies whether or not a hot standby will send feedback to the primary
        or upstream standby
        about queries currently executing on the standby. This parameter can
        be used to eliminate query cancels caused by cleanup records, but
        can cause database bloat on the primary for some workloads.
        Feedback messages will not be sent more frequently than once per
        <varname>wal_receiver_status_interval</varname>. The default value is
        <literal>off</literal>. This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
-->
ホットスタンバイがスタンバイサーバ上で現在処理を行っている問い合わせについて、プライマリまたは上位サーバにフィードバックを送るか否かを指定します。
このパラメータはレコードの回収に起因する問い合わせの取り消しを排除するために使用することができます。
しかし、いくつかのワークロードに対してはプライマリサーバ上でのデータベース肥大の原因となります。
フィードバックメッセージは<varname>wal_receiver_status_interval</varname>毎に、2回以上送信されません。
デフォルトの値は<literal>off</literal>です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
       <para>
<!--
        If cascaded replication is in use the feedback is passed upstream
        until it eventually reaches the primary.  Standbys make no other use
        of feedback they receive other than to pass upstream.
-->
カスケードレプリケーションが使用されている場合、フィードバックは最終的にプライマリに到達するまで上位サーバに転送されます。スタンバイは上位に転送する以外、受け取ったフィードバックを他に使用しません。
       </para>
       <para>
<!--
        Note that if the clock on standby is moved ahead or backward, the
        feedback message might not be sent at the required interval.  In
        extreme cases, this can lead to a prolonged risk of not removing dead
        rows on the primary for extended periods, as the feedback mechanism is
        based on timestamps.
-->
《機械翻訳》スタンバイのノートを前後に移動すると、必要なクロックでフィードバックメッセージが送信されない可能性があるインターバル。
極端な場合、フィードバックのリスクはタイムスタンプに基づいているため、拡張期間のプライマリで不要な行が削除されないメカニズムが長くなる可能性があります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-receiver-timeout" xreflabel="wal_receiver_timeout">
      <term><varname>wal_receiver_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_receiver_timeout</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_receiver_timeout</varname> 設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Terminate replication connections that are inactive for longer
        than this amount of time. This is useful for
        the receiving standby server to detect a primary node crash or network
        outage.
        If this value is specified without units, it is taken as milliseconds.
        The default value is 60 seconds.
        A value of zero disables the timeout mechanism.
        This parameter can only be set in
        the <filename>postgresql.conf</filename> file or on the server
        command line.
-->
指定された時間より長い間、活動していないレプリケーション接続は停止します。
このことは受信するスタンバイサーバがプライマリノードの機能停止、またはネットワーク停止を検出するのに便利です。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
デフォルト値は60秒です。
値ゼロは時間切れメカニズムを無効にします。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-retrieve-retry-interval" xreflabel="wal_retrieve_retry_interval">
      <term><varname>wal_retrieve_retry_interval</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_retrieve_retry_interval</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>wal_retrieve_retry_interval</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies how long the standby server should wait when WAL data is not
        available from any sources (streaming replication,
        local <filename>pg_wal</filename> or WAL archive) before trying
        again to retrieve WAL data.
        If this value is specified without units, it is taken as milliseconds.
        The default value is 5 seconds.
        This parameter can only be set in
        the <filename>postgresql.conf</filename> file or on the server
        command line.
-->
WALデータがソース(ストリーミングレプリケーション、ローカルの<filename>pg_wal</filename>、またはWALアーカイブ)から取得できない時に、スタンバイサーバがWALデータ受信をリトライするまでにどの位の時間待つべきかを指定します。
この値が単位なしで指定された場合は、ミリ秒単位であるとみなします。
デフォルト値は5秒です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
       <para>
<!--
        This parameter is useful in configurations where a node in recovery
        needs to control the amount of time to wait for new WAL data to be
        available. For example, in archive recovery, it is possible to
        make the recovery more responsive in the detection of a new WAL
        file by reducing the value of this parameter. On a system with
        low WAL activity, increasing it reduces the amount of requests necessary
        to access WAL archives, something useful for example in cloud
        environments where the number of times an infrastructure is accessed
        is taken into account.
-->
このパラメータは、リカバリ対象のノードにおいて、新しいWALデータが読み込み可能になるまでの待ち時間を制御する必要のある時に有用です。
たとえば、アーカイブリカバリにおいては、このパラメータの値を小さくすることにより、新しいWALファイルを検出する際にリカバリの応答を早くすることができます。
WALの生成頻度が少ないシステムでは、この値を大きくすることにより、WALアーカイブへのアクセス頻度を減らすことができます。
これは、たとえば基盤へのアクセス回数が課金対象になるクラウド環境において、有用です。
       </para>
       <para>
<!--
        In logical replication, this parameter also limits how often a failing
        replication apply worker or table synchronization worker will be
        respawned.
-->
《マッチ度[67.123288]》論理レプリケーションでは、このパラメータによって、失敗したレプリケーション適用ワーカーが再生成される頻度も制限されます。
《機械翻訳》論理レプリケーションでは、このパラメータによって、失敗したレプリケーション適用ワーカーまたはテーブル同期化ワーカーが再生成される頻度も制限されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-min-apply-delay" xreflabel="recovery_min_apply_delay">
      <term><varname>recovery_min_apply_delay</varname> (<type>integer</type>)
      <indexterm>
        <primary><varname>recovery_min_apply_delay</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
        <primary><varname>recovery_min_apply_delay</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        By default, a standby server restores WAL records from the
        sending server as soon as possible. It may be useful to have a time-delayed
        copy of the data, offering opportunities to correct data loss errors.
        This parameter allows you to delay recovery by a specified amount
        of time.  For example, if
        you set this parameter to <literal>5min</literal>, the standby will
        replay each transaction commit only when the system time on the standby
        is at least five minutes past the commit time reported by the primary.
        If this value is specified without units, it is taken as milliseconds.
        The default is zero, adding no delay.
-->
デフォルトでは、スタンバイサーバは可能な限り早くプライマリからWALレコードをリストアします。
時間遅れのデータのコピーを持つことで、データ損失エラーを修正する機会を提供するのは有用かもしれません。
このパラメータを使う事で、決まった時間だけリカバリを遅らせることができます。
例えば、パラメータに<literal>5min</literal>と指定した場合、各トランザクションについて、スタンバイのシステム時刻が、プライマリから報告されたコミット時刻より5分以上経過している場合のみ、スタンバイサーバはコミットを再生します。
単位を指定しない場合、ミリ秒として扱われます。
デフォルトは0で、遅延を与えません。
       </para>
       <para>
<!--
        It is possible that the replication delay between servers exceeds the
        value of this parameter, in which case no delay is added.
        Note that the delay is calculated between the WAL time stamp as written
        on primary and the current time on the standby. Delays in transfer
        because of network lag or cascading replication configurations
        may reduce the actual wait time significantly. If the system
        clocks on primary and standby are not synchronized, this may lead to
        recovery applying records earlier than expected; but that is not a
        major issue because useful settings of this parameter are much larger
        than typical time deviations between servers.
-->
サーバ間のレプリケーション遅延はパラメータの値を上回る可能性があり、その場合には遅延は追加されません。
遅延は、プライマリサーバで書かれたWALのタイムスタンプと、スタンバイサーバの現在時刻を使って計算されていることに注意してください。
ネットワークの遅延やカスケーディングレプリケーション構成によるデータ転送の遅延は、実際の待ち時間を大幅に減らすかもしれません。
もし、プライマリサーバとスタンバイサーバのシステムクロックが同期されていない場合、期待値よりも早くレコードのリカバリを始めるかもしれません。
しかし、このパラメータの有用な設定値は典型的なサーバ間の時間のずれよりもずっと大きいので、それらは大きな問題ではありません。
       </para>
       <para>
<!--
        The delay occurs only on WAL records for transaction commits.
        Other records are replayed as quickly as possible, which
        is not a problem because MVCC visibility rules ensure their effects
        are not visible until the corresponding commit record is applied.
-->
遅延はトランザクションコミットのWALレコードだけで発生します。
他のレコードは可能な限り早く再生されるでしょう。
対応する（トランザクション）コミットレコードが適用されるまではその効果が不可視であることがMVCCの可視ルールによって保証されているため、他のレコードが可能な限り早く再生されることは問題にはなりません。
       </para>
       <para>
<!--
        The delay occurs once the database in recovery has reached a consistent
        state, until the standby is promoted or triggered. After that the standby
        will end recovery without further waiting.
-->
ひとたびリカバリ中のデータベースが整合性のとれた状態になれば、スタンバイサーバが昇格またはトリガになるまで、遅延が発生します。
その後、スタンバイサーバはそれ以上待たずにリカバリを終了します。
       </para>
       <para>
<!--
        WAL records must be kept on the standby until they are ready to be
        applied. Therefore, longer delays will result in a greater accumulation
        of WAL files, increasing disk space requirements for the standby's
        <filename>pg_wal</filename> directory.
-->
WALレコードは、適用される準備が整うまでスタンバイに保持されなければなりません。
したがって、遅延が長くなるとWALファイルの蓄積量が増加し、スタンバイの<filename>pg_wal</filename>ディレクトリに必要なディスク容量が増加します。
       </para>
       <para>
<!--
        This parameter is intended for use with streaming replication deployments;
        however, if the parameter is specified it will be honored in all cases
        except crash recovery.

        <varname>hot_standby_feedback</varname> will be delayed by use of this feature
        which could lead to bloat on the primary; use both together with care.
-->
このパラメータはストリーミングレプリケーション配信で使われることを目的としていますが、パラメータが指定されていると、クラッシュリカバリを除くすべてのケースで使用されます。
この機能を使うことによって<varname>hot_standby_feedback</varname>が遅延され、プライマリサーバの肥大化に繋がる可能性があります。両方同時に使う場合には注意して使ってください。

        <warning>
         <para>
<!--
          Synchronous replication is affected by this setting when <varname>synchronous_commit</varname>
          is set to <literal>remote_apply</literal>; every <literal>COMMIT</literal>
          will need to wait to be applied.
-->
<varname>synchronous_commit</varname>が<literal>remote_apply</literal>に設定されていれば、同期レプリケーションは、この設定に影響を受けます。各<literal>COMMIT</literal>は適用されるのを待つことが必要です。
         </para>
        </warning>
       </para>
       <para>
<!--
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
-->
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-sync-replication-slots" xreflabel="sync_replication_slots">
      <term><varname>sync_replication_slots</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>sync_replication_slots</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>sync_replication_slots</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        It enables a physical standby to synchronize logical failover slots
        from the primary server so that logical subscribers can resume
        replication from the new primary server after failover.
-->
これにより、物理スタンバイはプライマリサーバからのロジカルフェイルオーバースロットの同期が可能となり、ロジカルサブスクライバーはフェイルオーバー後に新しいプライマリサーバからレプリケーションを再開できます。
       </para>
       <para>
<!--
        It is disabled by default. This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
-->
このパラメータはデフォルトで無効です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>
     </variablelist>
    </sect2>

    <sect2 id="runtime-config-replication-subscriber">
<!--
     <title>Subscribers</title>
-->
     <title>サブスクライバー</title>

     <para>
<!--
      These settings control the behavior of a logical replication subscriber.
      Their values on the publisher are irrelevant.
      See <xref linkend="logical-replication-config"/> for more details.
-->
これらの設定項目は、論理レプリケーションのサブスクライバーの挙動を制御します。
パブリッシャーにおける設定値とは無関係です。
詳細については<xref linkend="logical-replication-config"/>を参照してください。
     </para>

     <variablelist>

     <varlistentry id="guc-max-active-replication-origins" xreflabel="max_active_replication_origins">
      <term><varname>max_active_replication_origins</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_active_replication_origins</varname> configuration parameter</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies how many replication origins (see
        <xref linkend="replication-origins"/>) can be tracked simultaneously,
        effectively limiting how many logical replication subscriptions can
        be created on the server. Setting it to a lower value than the current
        number of tracked replication origins (reflected in
        <link linkend="view-pg-replication-origin-status">pg_replication_origin_status</link>)
        will prevent the server from starting. It defaults to 10. This parameter
        can only be set at server start.

        <literal>max_active_replication_origins</literal> must be set to at least the
        number of subscriptions that will be added to the subscriber, plus some
        reserve for table synchronization.
-->
《マッチ度[78.739003]》サブスクライバー側ではレプリケーション原点(origin)（<xref linkend="replication-origins"/>参照）をいくつ並行して追跡できるかを指定します。
これは実質的に論理レプリケーションのサブスクリプションをサーバ上にいくつ作ることができるかを制限します。
現在追跡しているレプリケーション原点の数（<link linkend="view-pg-replication-origin-status">pg_replication_origin_status</link>に反映されます）よりも小さい値を設定すると、サーバが起動しなくなります。
<literal>max_replication_slots</literal>は、少なくともサブスクライバーに追加されるサブスクリプションの数に、テーブル同期用の予備を加えた数に設定する必要があります。
<xref linkend="replication-origins"/>
《機械翻訳》同時に追跡できるレプリケーション起点（<xref linkend="replication-origins"/>を参照）の数を指定し、その論理レプリケーションで作成できるサーバサブスクリプションの数を効果的に制限します。
 <link linkend="view-pg-replication-origin-status">pg_replication_origin_status</link>に反映される追跡される現在のレプリケーション起点番号よりも小さい値に設定すると、サーバは開始できなくなります。
デフォルトは10です。
このパラメータはサーバスタートにのみ設定できます。
<literal>max_active_replication_origins</literal>少なくともサブスクライバーに追加されるサブスクリプションの数に設定する必要があります。
プラスはテーブルの同期化のために予約します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-logical-replication-workers" xreflabel="max_logical_replication_workers">
      <term><varname>max_logical_replication_workers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_logical_replication_workers</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_logical_replication_workers</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Specifies maximum number of logical replication workers. This includes
        leader apply workers, parallel apply workers, and table synchronization
        workers.
-->
論理レプリケーションワーカーの最大数を指定します。
これには、リーダー適用ワーカー、パラレル適用ワーカーおよびテーブル同期ワーカーが含まれます。
       </para>
       <para>
<!--
        Logical replication workers are taken from the pool defined by
        <varname>max_worker_processes</varname>.
-->
論理レプリケーションワーカーは、<varname>max_worker_processes</varname>で定義されたプールから取得されます。
       </para>
       <para>
<!--
        The default value is 4. This parameter can only be set at server
        start.
-->
デフォルト値は4です。
このパラメータはサーバ起動時にのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-sync-workers-per-subscription" xreflabel="max_sync_workers_per_subscription">
      <term><varname>max_sync_workers_per_subscription</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_sync_workers_per_subscription</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_sync_workers_per_subscription</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Maximum number of synchronization workers per subscription. This
        parameter controls the amount of parallelism of the initial data copy
        during the subscription initialization or when new tables are added.
-->
サブスクリプションごとの同期ワーカーの最大数です。
このパラメータは、サブスクリプションの初期化中、あるいは新しいテーブルが追加されたときの初期データコピーの並列度を制御します。
       </para>
       <para>
<!--
        Currently, there can be only one synchronization worker per table.
-->
今のところ、一つのテーブルにつき、同期ワーカーは一つだけです。
       </para>
       <para>
<!--
        The synchronization workers are taken from the pool defined by
        <varname>max_logical_replication_workers</varname>.
-->
同期ワーカーは、<varname>max_logical_replication_workers</varname>で定義されたプールから取得されます。
       </para>
       <para>
<!--
        The default value is 2. This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command
        line.
-->
デフォルト値は2です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-parallel-apply-workers-per-subscription" xreflabel="max_parallel_apply_workers_per_subscription">
      <term><varname>max_parallel_apply_workers_per_subscription</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_parallel_apply_workers_per_subscription</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>max_parallel_apply_workers_per_subscription</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Maximum number of parallel apply workers per subscription. This
        parameter controls the amount of parallelism for streaming of
        in-progress transactions with subscription parameter
        <literal>streaming = parallel</literal>.
-->
サブスクリプションごとのパラレル適用ワーカーの最大数です。
このパラメータは、サブスクリプションパラメータの<literal>streaming = parallel</literal>が指定されている進行中のトランザクションのストリーミングに対する並列度の数を制御します。
       </para>
       <para>
<!--
        The parallel apply workers are taken from the pool defined by
        <varname>max_logical_replication_workers</varname>.
-->
パラレル適用ワーカーは、<varname>max_logical_replication_workers</varname>で定義されたプールから取得されます。
       </para>
       <para>
<!--
        The default value is 2. This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command
        line.
-->
デフォルト値は2です。
このパラメータは、<filename>postgresql.conf</filename>ファイルか、サーバのコマンドラインでのみ設定可能です。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

   </sect1>

   <sect1 id="runtime-config-query">
<!--
    <title>Query Planning</title>
-->
    <title>問い合わせ計画</title>

    <sect2 id="runtime-config-query-enable">
<!--
     <title>Planner Method Configuration</title>
-->
     <title>プランナメソッド設定</title>

      <para>
<!--
       These configuration parameters provide a crude method of
       influencing the query plans chosen by the query optimizer. If
       the default plan chosen by the optimizer for a particular query
       is not optimal, a <emphasis>temporary</emphasis> solution is to use one
       of these configuration parameters to force the optimizer to
       choose a different plan.
       Better ways to improve the quality of the
       plans chosen by the optimizer include adjusting the planner cost
       constants (see <xref linkend="runtime-config-query-constants"/>),
       running <link linkend="sql-analyze"><command>ANALYZE</command></link> manually, increasing
       the value of the <xref
       linkend="guc-default-statistics-target"/> configuration parameter,
       and increasing the amount of statistics collected for
       specific columns using <command>ALTER TABLE SET
       STATISTICS</command>.
-->
以下の設定パラメータは、問い合わせオプティマイザが選択する問い合わせ計画に影響する大雑把な手法を提供します。
ある問い合わせに対してオプティマイザが選択したデフォルト計画が最適でない場合、<emphasis>暫定的な</emphasis>解決策は、これらの設定パラメータの1つを使用し、オプティマイザに異なる計画を選択するように仕向けることです。
オプティマイザが選択する計画の品質を改善するためのより良い方法には、プランナコスト定数を調節する（<xref linkend="runtime-config-query-constants"/>を参照）、<link linkend="sql-analyze"><command>ANALYZE</command></link>を手作業で実行する、<xref linkend="guc-default-statistics-target"/>設定パラメータの値を大きくする、<command>ALTER TABLE SET STATISTICS</command>を使用して、特定の列に対して収集される統計情報を増やす、などがあります。
      </para>

     <variablelist>
     <varlistentry id="guc-enable-async-append" xreflabel="enable_async_append">
      <term><varname>enable_async_append</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_async_append</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_async_append</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of async-aware
        append plan types. The default is <literal>on</literal>.
-->
問い合わせプランナが非同期を意識したアペンド計画型を使うのを可能あるいは不可能にします。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-bitmapscan" xreflabel="enable_bitmapscan">
      <term><varname>enable_bitmapscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary>bitmap scan</primary>
      </indexterm>
      <indexterm>
       <primary>ビットマップスキャン</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_bitmapscan</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_bitmapscan</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of bitmap-scan plan
        types. The default is <literal>on</literal>.
-->
問い合わせプランナがビットマップスキャン計画型を選択することを有効もしくは無効にします。デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-distinct-reordering" xreflabel="enable_distinct_reordering">
      <term><varname>enable_distinct_reordering</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_distinct_reordering</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's ability to reorder DISTINCT
        keys to match the input path's pathkeys. The default is <literal>on</literal>.
-->
《マッチ度[59.589041]》問い合わせプランナがギャザーマージ計画型を選択することを有効もしくは無効にします。
デフォルトは<literal>on</literal>です。
《機械翻訳》入力されたプランナのパスキーをマッチするために、問い合わせパスがDISTINCTキーを並べ替える機能を有効または無効にします。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-gathermerge" xreflabel="enable_gathermerge">
      <term><varname>enable_gathermerge</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_gathermerge</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_gathermerge</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of gather
        merge plan types. The default is <literal>on</literal>.
-->
問い合わせプランナがギャザーマージ計画型を選択することを有効もしくは無効にします。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-groupby-reordering" xreflabel="enable_group_by_reordering">
      <term><varname>enable_group_by_reordering</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_group_by_reordering</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_group_by_reordering</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls if the query planner will produce a plan which will provide
        <literal>GROUP BY</literal> keys sorted in the order of keys of
        a child node of the plan, such as an index scan.  When disabled, the
        query planner will produce a plan with <literal>GROUP BY</literal>
        keys only sorted to match the <literal>ORDER BY</literal> clause,
        if any. When enabled, the planner will try to produce a more
        efficient plan. The default value is <literal>on</literal>.
-->
問い合わせプランナが、インデックススキャンのようなプランの子ノードのキーの順でソートされた<literal>GROUP BY</literal>キーを提供するプランを生成するかどうかを制御します。
無効にすると、問い合わせプランナは、<literal>GROUP BY</literal>句があれば、それに合わせたソート順の<literal>ORDER BY</literal>キーを持つプランを生成します。
有効にすると、プランナはより効率的プランの生成を試みます。
デフォルト値は<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-hashagg" xreflabel="enable_hashagg">
      <term><varname>enable_hashagg</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_hashagg</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_hashagg</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of hashed
        aggregation plan types. The default is <literal>on</literal>.
-->
問い合わせプランナがハッシュ集約計画型を選択することを有効もしくは無効にします。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-hashjoin" xreflabel="enable_hashjoin">
      <term><varname>enable_hashjoin</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_hashjoin</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_hashjoin</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of hash-join plan
        types. The default is <literal>on</literal>.
-->
問い合わせプランナがハッシュ結合計画型を選択することを有効もしくは無効にします。デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-incremental-sort" xreflabel="enable_incremental_sort">
      <term><varname>enable_incremental_sort</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_incremental_sort</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_incremental_sort</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of incremental sort steps.
        The default is <literal>on</literal>.
-->
問い合わせプランナが増分ソートステップを使うのを有効あるいは無効にします。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-indexscan" xreflabel="enable_indexscan">
      <term><varname>enable_indexscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary>index scan</primary>
      </indexterm>
      <indexterm>
       <primary>インデックススキャン</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_indexscan</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_indexscan</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of index-scan and
        index-only-scan plan types.  The default is <literal>on</literal>.
        Also see <xref linkend="guc-enable-indexonlyscan"/>.
-->
問い合わせプランナがインデックススキャン計画型とインデックスオンリースキャン計画型を選択することを有効もしくは無効にします。
デフォルトは<literal>on</literal>です。
<xref linkend="guc-enable-indexonlyscan"/>も参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-indexonlyscan" xreflabel="enable_indexonlyscan">
      <term><varname>enable_indexonlyscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_indexonlyscan</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_indexonlyscan</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of index-only-scan plan
        types (see <xref linkend="indexes-index-only-scans"/>).
        The default is <literal>on</literal>.  The
        <xref linkend="guc-enable-indexscan"/> setting must also be
        enabled to have the query planner consider index-only-scans.
-->
問い合わせプランナがインデックスオンリースキャン計画型を選択することを有効もしくは無効にします（<xref linkend="indexes-index-only-scans"/>を参照）。
デフォルトは<literal>on</literal>です。
問い合わせプランナがインデックスオンリースキャンを考慮するようにするには、<xref linkend="guc-enable-indexscan"/>設定も有効にすることが必要です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-material" xreflabel="enable_material">
      <term><varname>enable_material</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_material</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_material</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of materialization.
        It is impossible to suppress materialization entirely,
        but turning this variable off prevents the planner from inserting
        materialize nodes except in cases where it is required for correctness.
        The default is <literal>on</literal>.
-->
問い合わせプランナの具体化の使用を有効、または無効にします。
全体にわたって具体化を差し止めることはできませんが、この値をoffにすることにより、正確性が要求される場合を除いて、具体化ノードをプランナが挿入することを防止します。デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-memoize" xreflabel="enable_memoize">
      <term><varname>enable_memoize</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_memoize</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_memoize</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of memoize plans for
        caching results from parameterized scans inside nested-loop joins.
        This plan type allows scans to the underlying plans to be skipped when
        the results for the current parameters are already in the cache.  Less
        commonly looked up results may be evicted from the cache when more
        space is required for new entries. The default is
        <literal>on</literal>.
-->
問い合わせプランナが、ネステッドループ結合の中のパラメータ付きスキャンの結果をキャッシュするメモ化計画を使用するのを有効あるいは無効にします。
この計画型は、キャッシュ中に現在のパラメータに対応する結果があれば、配下の計画をスキップすることを可能にします。
新しい項目のためにより多くのスペースが必要な場合は、あまり参照されていない結果は削除されるかもしれません。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-mergejoin" xreflabel="enable_mergejoin">
      <term><varname>enable_mergejoin</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_mergejoin</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_mergejoin</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of merge-join plan
        types. The default is <literal>on</literal>.
-->
問い合わせプランナがマージ結合計画型を選択することを有効もしくは無効にします。デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-nestloop" xreflabel="enable_nestloop">
      <term><varname>enable_nestloop</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_nestloop</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_nestloop</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of nested-loop join
        plans. It is impossible to suppress nested-loop joins entirely,
        but turning this variable off discourages the planner from using
        one if there are other methods available. The default is
        <literal>on</literal>.
-->
問い合わせプランナがネステッドループ結合計画を選択することを有効もしくは無効にします。
ネステッドループ結合を完全に禁止することは不可能ですが、この変数をオフにすると、もし他の方法が利用できるのであれば、プランナはその使用を行わないようになります。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-parallel-append" xreflabel="enable_parallel_append">
      <term><varname>enable_parallel_append</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_parallel_append</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_parallel_append</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of parallel-aware
        append plan types. The default is <literal>on</literal>.
-->
問い合わせプランナによるパラレル認識なアペンド計画型の利用を有効あるいは無効にします。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-parallel-hash" xreflabel="enable_parallel_hash">
      <term><varname>enable_parallel_hash</varname> (<type>boolean</type>)
       <indexterm>
        <primary><varname>enable_parallel_hash</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>enable_parallel_hash</varname>設定パラメータ</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of hash-join plan
        types with parallel hash. Has no effect if hash-join plans are not
        also enabled. The default is <literal>on</literal>.
-->
問い合わせプランナによる、パラレルハッシュを使ったハッシュ結合計画型の利用を有効あるいは無効にします。
ハッシュ結合計画が有効でない場合は無効です。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-partition-pruning" xreflabel="enable_partition_pruning">
      <term><varname>enable_partition_pruning</varname> (<type>boolean</type>)
       <indexterm>
        <primary><varname>enable_partition_pruning</varname> configuration parameter</primary>
       </indexterm>
       <indexterm>
        <primary><varname>enable_partition_pruning</varname>設定パラメータ</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's ability to eliminate a
        partitioned table's partitions from query plans.  This also controls
        the planner's ability to generate query plans which allow the query
        executor to remove (ignore) partitions during query execution.  The
        default is <literal>on</literal>.
        See <xref linkend="ddl-partition-pruning"/> for details.
-->
問い合わせプランナが、クエリプランからパーティション化テーブルのパーティションを除く機能を有効あるいは無効にします。
これはまた、クエリエグゼキュータがクエリ実行中にパーティションを削除（無視）することができるプランを生成するプランナの機能を制御します。
デフォルトは<literal>on</literal>です。
詳細は<xref linkend="ddl-partition-pruning"/>をご覧ください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-partitionwise-join" xreflabel="enable_partitionwise_join">
      <term><varname>enable_partitionwise_join</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_partitionwise_join</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_partitionwise_join</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of partitionwise join,
        which allows a join between partitioned tables to be performed by
        joining the matching partitions.  Partitionwise join currently applies
        only when the join conditions include all the partition keys, which
        must be of the same data type and have one-to-one matching sets of
        child partitions.  With this setting enabled, the number of nodes
        whose memory usage is restricted by <varname>work_mem</varname>
        appearing in the final plan can increase linearly according to the
        number of partitions being scanned.  This can result in a large
        increase in overall memory consumption during the execution of the
        query.  Query planning also becomes significantly more expensive in
        terms of memory and CPU.  The default value is <literal>off</literal>.
-->
パーティション同士の結合(partitionwise join)を問い合わせプランナが使用するのを有効あるいは無効にします。
パーティション同士の結合は、適合するパーティションを結合することによって実行される、パーティション化テーブルにまたがる結合を可能にします。
今の所、パーティション同士の結合は、すべてのパーティションキーを含んでいて、かつパーティションキーの型が同じで、一対一で一致する子パーティションの集合を持つ結合条件のときだけに適用されます。
この設定を有効にすると、最終プランに表示され、<varname>work_mem</varname>によってメモリ使用が制限されるノードの数は、スキャンされるパーティションの数に応じて直線的に増加します。
これにより、問い合わせの実行中の全体的なメモリ消費の大きな増加をもたらす可能性があります。
また、問い合わせ計画の作成が、メモリとCPU使用率の点でも非常に高価になります。
デフォルト値は<literal>off</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-partitionwise-aggregate" xreflabel="enable_partitionwise_aggregate">
      <term><varname>enable_partitionwise_aggregate</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_partitionwise_aggregate</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_partitionwise_aggregate</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of partitionwise grouping
        or aggregation, which allows grouping or aggregation on partitioned
        tables to be performed separately for each partition.  If the
        <literal>GROUP BY</literal> clause does not include the partition
        keys, only partial aggregation can be performed on a per-partition
        basis, and finalization must be performed later.  With this setting
        enabled, the number of nodes whose memory usage is restricted by
        <varname>work_mem</varname> appearing in the final plan can increase
        linearly according to the number of partitions being scanned.  This
        can result in a large increase in overall memory consumption during
        the execution of the query.  Query planning also becomes significantly
        more expensive in terms of memory and CPU.  The default value is
        <literal>off</literal>.
-->
パーティション化されたテーブルに対してグループ化または集約を個別に実行できるように、問い合わせプランナのパーティションごと（partitionwise）のグループ化または集約の使用を有効または無効にします。
<literal>GROUP BY</literal>句がパーティションキーを含まない場合は、パーティション単位で部分集約だけが実行でき、最終結果の算出は後で行われます。
この設定を有効にすると、最終プランに表示され、<varname>work_mem</varname>によってメモリ使用が制限されるノードの数は、スキャンされるパーティションの数に応じて直線的に増加します。
これにより、問い合わせの実行中の全体的なメモリ消費の大きな増加をもたらす可能性があります。
また、問い合わせ計画の作成が、メモリとCPU使用率の点でも非常に高価になります。
デフォルト値は<literal>off</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-presorted-aggregate" xreflabel="enable_presorted_aggregate">
      <term><varname>enable_presorted_aggregate</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_presorted_aggregate</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_presorted_aggregate</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls if the query planner will produce a plan which will provide
        rows which are presorted in the order required for the query's
        <literal>ORDER BY</literal> / <literal>DISTINCT</literal> aggregate
        functions.  When disabled, the query planner will produce a plan which
        will always require the executor to perform a sort before performing
        aggregation of each aggregate function containing an
        <literal>ORDER BY</literal> or <literal>DISTINCT</literal> clause.
        When enabled, the planner will try to produce a more efficient plan
        which provides input to the aggregate functions which is presorted in
        the order they require for aggregation.  The default value is
        <literal>on</literal>.
-->
問い合わせプランナが、問い合わせの<literal>ORDER BY</literal>/<literal>DISTINCT</literal>集約関数に必要なオーダーで事前にソートされた行を生成するかどうかを制御します。
無効の場合、問い合わせプランナは、<literal>ORDER BY</literal>または<literal>DISTINCT</literal>句を含む各集約関数の集計を実行する前に、ソートをエグゼキュータが実行することを常に要求するプランを生成します。
有効な場合、集約に必要とされる事前にソートされた入力を集約関数に提供する、より効率的なプランをプランナは生成します。
デフォルト値は<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-self-join-elimination" xreflabel="enable_self_join_elimination">
      <term><varname>enable_self_join_elimination</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_self_join_elimination</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's optimization which analyses
        the query tree and replaces self joins with semantically equivalent
        single scans.  Takes into consideration only plain tables.
        The default is <literal>on</literal>.
-->
《機械翻訳》プランナを分析し、自己結合を意味的に等価な単一スキャンに置換する問い合わせ「最適化の問い合わせツリー」を有効または無効にします。
プレーン表のみが考慮されます。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-seqscan" xreflabel="enable_seqscan">
      <term><varname>enable_seqscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary>sequential scan</primary>
      </indexterm>
      <indexterm>
       <primary>シーケンシャルスキャン</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_seqscan</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_seqscan</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of sequential scan
        plan types. It is impossible to suppress sequential scans
        entirely, but turning this variable off discourages the planner
        from using one if there are other methods available. The
        default is <literal>on</literal>.
-->
問い合わせプランナがシーケンシャルスキャン計画型を選択することを有効もしくは無効にします。
シーケンシャルスキャンを完全に禁止することは不可能ですが、この変数をオフにすると、もし他の方法が利用できるのであれば、プランナはその使用を行わないようになります。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-sort" xreflabel="enable_sort">
      <term><varname>enable_sort</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_sort</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_sort</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of explicit sort
        steps. It is impossible to suppress explicit sorts entirely,
        but turning this variable off discourages the planner from
        using one if there are other methods available. The default
        is <literal>on</literal>.
-->
問い合わせプランナが明示的並べ替え手順を選択することを有効もしくは無効にします。
明示的並べ替えを完全に禁止することは不可能ですが、この変数をオフにすると、もし他の方法が利用できるのであれば、プランナはその使用を行わないようになります。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-tidscan" xreflabel="enable_tidscan">
      <term><varname>enable_tidscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_tidscan</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_tidscan</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables the query planner's use of <acronym>TID</acronym>
        scan plan types. The default is <literal>on</literal>.
-->
問い合わせプランナが<acronym>TID</acronym>スキャン計画型を選択することを有効もしくは無効にします。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-query-constants">
<!--
     <title>Planner Cost Constants</title>
-->
     <title>プランナコスト定数</title>

    <para>
<!--
     The <firstterm>cost</firstterm> variables described in this section are measured
     on an arbitrary scale.  Only their relative values matter, hence
     scaling them all up or down by the same factor will result in no change
     in the planner's choices.  By default, these cost variables are based on
     the cost of sequential page fetches; that is,
     <varname>seq_page_cost</varname> is conventionally set to <literal>1.0</literal>
     and the other cost variables are set with reference to that.  But
     you can use a different scale if you prefer, such as actual execution
     times in milliseconds on a particular machine.
-->
本節で扱う<firstterm>コスト</firstterm>変数は、任意の尺度で測られます。
これらは相対的な値のみが意味を持つため、それらの値をすべて同じ係数で大きく、あるいは小さくしても、プランナの選択は結果として変わりません。
デフォルトではこれらのコスト変数はシーケンシャルなページ取り込みに基づいています。
つまり、<varname>seq_page_cost</varname>を慣習的に<literal>1.0</literal>とし、他のコスト変数はそれを参考にして設定されています。
しかし望むなら、特定のマシンにおけるミリ秒単位の実行時間など、異なる尺度を使用することができます。
    </para>

   <note>
    <para>
<!--
     Unfortunately, there is no well-defined method for determining ideal
     values for the cost variables.  They are best treated as averages over
     the entire mix of queries that a particular installation will receive.  This
     means that changing them on the basis of just a few experiments is very
     risky.
-->
残念ながら、コスト変数に対する理想的な値を決定する、上手く定義された方法がありません。
特定のインストレーションが受け取る問い合わせ全体を混在させたものの平均として扱うのが最善でしょう。
数回の実験のみを根拠にこの値を変更することは危険であるといえます。
    </para>
   </note>

     <variablelist>

     <varlistentry id="guc-seq-page-cost" xreflabel="seq_page_cost">
      <term><varname>seq_page_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>seq_page_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>seq_page_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the planner's estimate of the cost of a disk page fetch
        that is part of a series of sequential fetches.  The default is 1.0.
        This value can be overridden for tables and indexes in a particular
        tablespace by setting the tablespace parameter of the same name
        (see <xref linkend="sql-altertablespace"/>).
-->
シーケンシャルな一連の取り出しの一部となる、ディスクページ取り出しに関する、プランナの推定コストを設定します。
デフォルトは1.0です。
この値は同じ名前のテーブル空間パラメータを設定することで、特定のテーブル空間の中にあるテーブルとインデックスに対して上書きできます（<xref linkend="sql-altertablespace"/>を参照してください）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-random-page-cost" xreflabel="random_page_cost">
      <term><varname>random_page_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>random_page_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>random_page_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the planner's estimate of the cost of a
        non-sequentially-fetched disk page.  The default is 4.0.
        This value can be overridden for tables and indexes in a particular
        tablespace by setting the tablespace parameter of the same name
        (see <xref linkend="sql-altertablespace"/>).
-->
非シーケンシャル的に取り出されるディスクページのコストに対するプランナの推測を設定します。
デフォルトは4です。
この値は同じ名前のテーブル空間パラメータを設定することで、特定のテーブル空間の中にあるテーブルとインデックスに対して上書きできます（<xref linkend="sql-altertablespace"/>を参照してください）。
       </para>

       <para>
<!--
        Reducing this value relative to <varname>seq_page_cost</varname>
        will cause the system to prefer index scans; raising it will
        make index scans look relatively more expensive.  You can raise
        or lower both values together to change the importance of disk I/O
        costs relative to CPU costs, which are described by the following
        parameters.
-->
この値を<varname>seq_page_cost</varname>と比較して小さくすると、システムはなるべくインデックススキャンを使用するようになります。
大きくすると、インデックススキャンが相対的に高価になります。
両方の値を増減させることで、CPUコストに対するディスクI/Oコストの重要性を変更させることができます。
これについては、後述のパラメータで説明します。
       </para>

       <para>
<!--
        Random access to mechanical disk storage is normally much more expensive
        than four times sequential access.  However, a lower default is used
        (4.0) because the majority of random accesses to disk, such as indexed
        reads, are assumed to be in cache.  The default value can be thought of
        as modeling random access as 40 times slower than sequential, while
        expecting 90% of random reads to be cached.
-->
機械的ディスク記憶装置に対するランダムアクセスは通常はシーケンシャルアクセスの4倍よりもかなり高価です。
しかし、より低いデフォルト（4.0）が使用されます。というのはインデックスのついた読み取りのようなディスクに対するランダムアクセスのほとんどはキャッシュにあると想定されるからです。
このデフォルト値は、ランダムアクセスがシーケンシャルアクセスより40倍遅い一方で、ランダム読み込みの90%はキャッシュされていることが期待されるというモデルとして考えることができます。
       </para>

       <para>
<!--
        If you believe a 90% cache rate is an incorrect assumption
        for your workload, you can increase random_page_cost to better
        reflect the true cost of random storage reads. Correspondingly,
        if your data is likely to be completely in cache, such as when
        the database is smaller than the total server memory, decreasing
        random_page_cost can be appropriate.  Storage that has a low random
        read cost relative to sequential, e.g., solid-state drives, might
        also be better modeled with a lower value for random_page_cost,
        e.g., <literal>1.1</literal>.
-->
自環境の作業負荷において、90％のキャッシュ率は誤った仮定と考えられるのであれば、ランダム記憶装置読み込みのコストをより良く反映するため random_page_cost を大きくすることができます。
反対に、データが完全にキャッシュされていると思われるのであれば、random_page_cost を小さくすることが適切です。例えば、データベースの容量がサーバのメモリより小さい場合などです。
例えばSSDのような、シーケンシャルアクセスに比べてランダム読み込みコストがあまり大きくない記憶装置の場合も、random_page_cost に対し<literal>1.1</literal>のようにより低い値のモデル化の方が良いでしょう。
       </para>

       <tip>
        <para>
<!--
         Although the system will let you set <varname>random_page_cost</varname> to
         less than <varname>seq_page_cost</varname>, it is not physically sensible
         to do so.  However, setting them equal makes sense if the database
         is entirely cached in RAM, since in that case there is no penalty
         for touching pages out of sequence.  Also, in a heavily-cached
         database you should lower both values relative to the CPU parameters,
         since the cost of fetching a page already in RAM is much smaller
         than it would normally be.
-->
システムは<varname>random_page_cost</varname>を<varname>seq_page_cost</varname>よりも小さな値に設定することを許しますが、そのようにすることは物理的にはおかしなことです。
しかし、データベースが完全にRAMにキャッシュされる場合、同じ値に設定することは意味を持ちます。
この場合、順序通りではないページアクセスに対するペナルティが存在しないからです。
また、多くがキャッシュされるデータベースでは、CPUパラメータに対して両値を小さく設定すべきです。
RAM内に存在するページの取り出しコストは通常よりもかなり小さくなるためです。
        </para>
       </tip>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-tuple-cost" xreflabel="cpu_tuple_cost">
      <term><varname>cpu_tuple_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cpu_tuple_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>cpu_tuple_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the planner's estimate of the cost of processing
        each row during a query.
        The default is 0.01.
-->
問い合わせ時のそれぞれの行の処理コストに対するプランナの推測を設定します。
デフォルトは0.01です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-index-tuple-cost" xreflabel="cpu_index_tuple_cost">
      <term><varname>cpu_index_tuple_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cpu_index_tuple_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>cpu_index_tuple_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the planner's estimate of the cost of processing
        each index entry during an index scan.
        The default is 0.005.
-->
インデックススキャン時のそれぞれのインデックス行の処理コストに対するプランナの推測を設定します。
デフォルトは0.005です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-operator-cost" xreflabel="cpu_operator_cost">
      <term><varname>cpu_operator_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cpu_operator_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>cpu_operator_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the planner's estimate of the cost of processing each
        operator or function executed during a query.
        The default is 0.0025.
-->
問い合わせ時に実行される各演算子や関数の処理コストに対するプランナの推測を設定します。デフォルトは0.0025です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-parallel-setup-cost" xreflabel="parallel_setup_cost">
      <term><varname>parallel_setup_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>parallel_setup_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>parallel_setup_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the planner's estimate of the cost of launching parallel worker
        processes.
        The default is 1000.
-->
パラレルワーカープロセスを起動するためのコストに対するプランナの推測値を設定します。
デフォルトは1000です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-parallel-tuple-cost" xreflabel="parallel_tuple_cost">
      <term><varname>parallel_tuple_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>parallel_tuple_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>parallel_tuple_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the planner's estimate of the cost of transferring one tuple
        from a parallel worker process to another process.
        The default is 0.1.
-->
あるパラレルワーカープロセスから、1タプルを他のプロセスに転送するためのコストに対するプランナの推測値を設定します。
デフォルトは0.1です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-min-parallel-table-scan-size" xreflabel="min_parallel_table_scan_size">
      <term><varname>min_parallel_table_scan_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>min_parallel_table_scan_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>min_parallel_table_scan_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the minimum amount of table data that must be scanned in order
        for a parallel scan to be considered.  For a parallel sequential scan,
        the amount of table data scanned is always equal to the size of the
        table, but when indexes are used the amount of table data
        scanned will normally be less.
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The default is 8 megabytes (<literal>8MB</literal>).
-->
パラレルスキャンを考慮する最小のテーブルデータのサイズを指定します。
パラレルシーケンシャルスキャンでは、スキャンされるテーブルのデータ量は、常にテーブルのサイズと同じです。
しかし、インデックスが使われる場合は、スキャンされるテーブルの量は通常少なくなるでしょう。
この値が単位なしで指定された場合は、ブロック単位であるとみなします。すなわち、<symbol>BLCKSZ</symbol>バイト、一般的には8kBです。
デフォルトは8メガバイト（ <literal>8MB</literal>）です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-min-parallel-index-scan-size" xreflabel="min_parallel_index_scan_size">
      <term><varname>min_parallel_index_scan_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>min_parallel_index_scan_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>min_parallel_index_scan_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the minimum amount of index data that must be scanned in order
        for a parallel scan to be considered.  Note that a parallel index scan
        typically won't touch the entire index; it is the number of pages
        which the planner believes will actually be touched by the scan which
        is relevant.  This parameter is also used to decide whether a
        particular index can participate in a parallel vacuum.  See
        <xref linkend="sql-vacuum"/>.
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The default is 512 kilobytes (<literal>512kB</literal>).
-->
パラレルスキャンが考慮されるために、スキャンされなければならないインデックスデータの最小量を設定します。
通常パラレルインデックススキャンは、典型的にはインデックス全体をアクセスしないことに注意してください。
これは、関連するスキャンにより、プランナが実際にアクセスされると信じるページ数です。
またこのパラメータは、あるインデックスがパラレルVACUUMで利用できるかどうかを決定するのにも使われます。
<xref linkend="sql-vacuum"/>をご覧ください。
この値が単位なしで指定された場合は、ブロック単位であるとみなします。すなわち、<symbol>BLCKSZ</symbol>バイト、一般的には8kBです。
デフォルトは512キロバイト（<literal>512kB</literal>）です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-effective-cache-size" xreflabel="effective_cache_size">
      <term><varname>effective_cache_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>effective_cache_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>effective_cache_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the planner's assumption about the effective size of the
        disk cache that is available to a single query.  This is
        factored into estimates of the cost of using an index; a
        higher value makes it more likely index scans will be used, a
        lower value makes it more likely sequential scans will be
        used. When setting this parameter you should consider both
        <productname>PostgreSQL</productname>'s shared buffers and the
        portion of the kernel's disk cache that will be used for
        <productname>PostgreSQL</productname> data files, though some
        data might exist in both places. Also, take
        into account the expected number of concurrent queries on different
        tables, since they will have to share the available
        space.  This parameter has no effect on the size of shared
        memory allocated by <productname>PostgreSQL</productname>, nor
        does it reserve kernel disk cache; it is used only for estimation
        purposes.  The system also does not assume data remains in
        the disk cache between queries.
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The default is 4 gigabytes (<literal>4GB</literal>).
        (If <symbol>BLCKSZ</symbol> is not 8kB, the default value scales
        proportionally to it.)
-->
単一の問い合わせで利用できるディスクキャッシュの実効容量に関するプランナの条件を設定します。
これは、インデックスを使用するコスト推定値の要素となります。
より高い値にすれば、よりインデックススキャンが使用されるようになり、より小さく設定すれば、シーケンシャルスキャンがより使用されるようになります。
このパラメータを設定する時には、<productname>PostgreSQL</productname>の共有バッファと<productname>PostgreSQL</productname>データファイルに使用されるカーネルのディスクキャッシュの量の両方を考慮しなければなりませんが、データは両方に存在することもあります。
また、利用可能な領域を共有しますので、異なるテーブルに対して同時に実行される問い合わせの想定数も考慮してください。
このパラメータは、<productname>PostgreSQL</productname>で割り当てられる共有メモリの大きさには影響を与えません。また、カーネルのディスクキャッシュを予約したりもしません。
これは推定目的のみで使用されます。
同時に、システムは問い合わせの間のディスクキャッシュ内のデータの残滓を想定していません。
この値が単位なしで指定された場合は、ブロック単位であるとみなします。すなわち、<symbol>BLCKSZ</symbol>バイト、一般的には8kBです。
デフォルトは4ギガバイト（<literal>4GB</literal>）です。
（<symbol>BLCKSZ</symbol>が8kbでなければ、この設定のデフォルト値と最大値が<symbol>BLCKSZ</symbol>に比例して変更されます。）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-above-cost" xreflabel="jit_above_cost">
      <term><varname>jit_above_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>jit_above_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>jit_above_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the query cost above which JIT compilation is activated, if
        enabled (see <xref linkend="jit"/>).
        Performing <acronym>JIT</acronym> costs planning time but can
        accelerate query execution.
        Setting this to <literal>-1</literal> disables JIT compilation.
        The default is <literal>100000</literal>.
-->
JITが有効な場合（<xref linkend="jit"/>参照）、それ以上ならJITコンパイルが起動する問い合わせコストを設定します。
<acronym>JIT</acronym>を実行するとプラン時間がかかりますが、問い合わせの実行を高速化することができます。
これを<literal>-1</literal>にすると、JITコンパイルは無効になります。
デフォルトは<literal>100000</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-inline-above-cost" xreflabel="jit_inline_above_cost">
      <term><varname>jit_inline_above_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>jit_inline_above_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>jit_inline_above_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the query cost above which JIT compilation attempts to inline
        functions and operators.  Inlining adds planning time, but can
        improve execution speed.  It is not meaningful to set this to less
        than <varname>jit_above_cost</varname>.
        Setting this to <literal>-1</literal> disables inlining.
        The default is <literal>500000</literal>.
-->
それ以上ならJITコンパイルが関数と演算子のインライン化を試みる問い合わせコストを設定します。
インライン化するとプラン時間がかかりますが、問い合わせの実行速度を改善できます。
これを<varname>jit_above_cost</varname>よりも小さくするのは意味がありません。
これを<literal>-1</literal>にすると、インライン化は無効になります。
デフォルトは<literal>500000</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-optimize-above-cost" xreflabel="jit_optimize_above_cost">
      <term><varname>jit_optimize_above_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>jit_optimize_above_cost</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>jit_optimize_above_cost</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the query cost above which JIT compilation applies expensive
        optimizations.  Such optimization adds planning time, but can improve
        execution speed.  It is not meaningful to set this to less
        than <varname>jit_above_cost</varname>, and it is unlikely to be
        beneficial to set it to more
        than <varname>jit_inline_above_cost</varname>.
        Setting this to <literal>-1</literal> disables expensive optimizations.
        The default is <literal>500000</literal>.
-->
それ以上ならJITコンパイルが高価な最適化を実行する問い合わせコストを設定します。
そうした最適化にはプラン時間がかかりますが、問い合わせの実行速度を改善できます。
これを<varname>jit_above_cost</varname>よりも小さくするのは意味がなく、また<varname>jit_inline_above_cost</varname>よりも大きくしても利益はないでしょう。
これを<literal>-1</literal>にすると、高価な最適化は無効になります。
デフォルトは<literal>500000</literal>です。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect2>
     <sect2 id="runtime-config-query-geqo">
<!--
     <title>Genetic Query Optimizer</title>
-->
     <title>遺伝的問い合わせオプティマイザ</title>

     <para>
<!--
      The genetic query optimizer (GEQO) is an algorithm that does query
      planning using heuristic searching.  This reduces planning time for
      complex queries (those joining many relations), at the cost of producing
      plans that are sometimes inferior to those found by the normal
      exhaustive-search algorithm.
      For more information see <xref linkend="geqo"/>.
-->
遺伝的問い合わせオプティマイザ（GEQO）はヒューリスティック（発見的）検索法を用いた問い合わせ計画を行なう演算手法です。
通常のしらみつぶしの検索演算手法で見いだされる計画よりも時として劣った計画を作成するという代償を払いますが、この手法は（多くのリレーションを結合するような）複雑な問い合わせに対し計画時間を軽減します。
より詳細は<xref linkend="geqo"/>を参照してください。
     </para>

     <variablelist>

     <varlistentry id="guc-geqo" xreflabel="geqo">
      <term><varname>geqo</varname> (<type>boolean</type>)
      <indexterm>
       <primary>genetic query optimization</primary>
      </indexterm>
      <indexterm>
       <primary>遺伝的問い合わせ最適化</primary>
      </indexterm>
      <indexterm>
       <primary>GEQO</primary>
       <see>genetic query optimization</see>
      </indexterm>
      <indexterm>
       <primary>GEQO</primary>
       <see>遺伝的問い合わせ最適化</see>
      </indexterm>
      <indexterm>
       <primary><varname>geqo</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>geqo</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Enables or disables genetic query optimization.
        This is on by default.  It is usually best not to turn it off in
        production; the <varname>geqo_threshold</varname> variable provides
        more granular control of GEQO.
-->
遺伝的問い合わせ最適化を有効もしくは無効にします。デフォルトは有効です。
運用時には無効にしないことが通常最善です。<varname>geqo_threshold</varname>変数は、GEQOを制御するためよりきめ細かな方法を提供します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-threshold" xreflabel="geqo_threshold">
      <term><varname>geqo_threshold</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_threshold</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>geqo_threshold</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Use genetic query optimization to plan queries with at least
        this many <literal>FROM</literal> items involved. (Note that a
        <literal>FULL OUTER JOIN</literal> construct counts as only one <literal>FROM</literal>
        item.) The default is 12. For simpler queries it is usually best
        to use the regular, exhaustive-search planner, but for queries with
        many tables the exhaustive search takes too long, often
        longer than the penalty of executing a suboptimal plan.  Thus,
        a threshold on the size of the query is a convenient way to manage
        use of GEQO.
-->
少なくともこれだけの数の<literal>FROM</literal>項目数があるときに、問い合わせを計画するのに遺伝的問い合わせ最適化を使用します。
（<literal>FULL OUTER JOIN</literal>の生成子は、<literal>FROM</literal>項目が１つだけとして計算することに注意してください。）
デフォルトは12です。
もっと単純な問い合わせでは、通常の、そしてしらみつぶしの検索プランナを使用するのが最善ですが、多くのテーブルを持つ問い合わせでは、しらみつぶしの検索は非常に時間がかかり、しばしば次善の計画を実行する代償より長くなります。
従って、問い合わせの大きさに対する閾値はGEQOの使用を管理するのに便利な方法です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-effort" xreflabel="geqo_effort">
      <term><varname>geqo_effort</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_effort</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>geqo_effort</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls the trade-off between planning time and query plan
        quality in GEQO. This variable must be an integer in the
        range from 1 to 10. The default value is five. Larger values
        increase the time spent doing query planning, but also
        increase the likelihood that an efficient query plan will be
        chosen.
-->
GEQOにおける計画時間と問い合わせ計画の品質間のトレードオフを制御します。この変数は1から10までの範囲の整数でなければなりません。
デフォルトの値は5です。値を大きくすると、問い合わせ計画作成により多くの時間を費すことになりますが、より効率的な問い合わせ計画が選択される可能性が増加します。
       </para>

       <para>
<!--
        <varname>geqo_effort</varname> doesn't actually do anything
        directly; it is only used to compute the default values for
        the other variables that influence GEQO behavior (described
        below). If you prefer, you can set the other parameters by
        hand instead.
-->
実際<varname>geqo_effort</varname>は直接何も行いません。それはGEQOの動作に影響を与える他の変数に対し、デフォルトの値を計算するためにのみ使用されます（以下で説明します）。もしよければ、代わりに手作業で他のパラメータを設定できます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-pool-size" xreflabel="geqo_pool_size">
      <term><varname>geqo_pool_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_pool_size</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>geqo_pool_size</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls the pool size used by GEQO, that is the
        number of individuals in the genetic population.  It must be
        at least two, and useful values are typically 100 to 1000.  If
        it is set to zero (the default setting) then a suitable
        value is chosen based on <varname>geqo_effort</varname> and
        the number of tables in the query.
-->
GEQOで使用されるプール容量を管理します。それは遺伝的個体群内の個体数です。最低でも2つはなければならず、よく100から1000までの値が使用されます。
もし（デフォルトの設定である）零に設定されると、<varname>geqo_effort</varname>および問い合わせの中のテーブル数に基づいて、適切な値が選択されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-generations" xreflabel="geqo_generations">
      <term><varname>geqo_generations</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_generations</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>geqo_generations</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls the number of generations used by GEQO, that is
        the number of iterations of the algorithm.  It must
        be at least one, and useful values are in the same range as
        the pool size.  If it is set to zero (the default setting)
        then a suitable value is chosen based on
        <varname>geqo_pool_size</varname>.
-->
GEQOで使用される世代の数を管理します。それはアルゴリズムの反復数です。最低でも1はなければならず、よくプールサイズと同じ範囲の値が使用されます。
これを0に設定（デフォルトの設定）すると、適切な値が<varname>geqo_pool_size</varname>に基づいて選択されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-selection-bias" xreflabel="geqo_selection_bias">
      <term><varname>geqo_selection_bias</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>geqo_selection_bias</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>geqo_selection_bias</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls the selection bias used by GEQO. The selection bias
        is the selective pressure within the population. Values can be
        from 1.50 to 2.00; the latter is the default.
-->
GEQOで使用される淘汰の偏りを管理します。
淘汰の偏りは個体群内の（遺伝的な）自然淘汰です。値は1.50から2.00で、2.00がデフォルトです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-seed" xreflabel="geqo_seed">
      <term><varname>geqo_seed</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>geqo_seed</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>geqo_seed</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls the initial value of the random number generator used
        by GEQO to select random paths through the join order search space.
        The value can range from zero (the default) to one.  Varying the
        value changes the set of join paths explored, and may result in a
        better or worse best path being found.
-->
結合順序検索空間にわたって、GEQOが無作為のパスを選択するために使用される乱数発生器の初期値を制御します。
値は0（デフォルト）から1までの範囲です。
値を変動させると探査される結合パスの集合が変化するため、見つかる最善のパスが良くなる場合も悪くなる場合もあります。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
     <sect2 id="runtime-config-query-other">
<!--
     <title>Other Planner Options</title>
-->
     <title>その他のプランナオプション</title>

     <variablelist>

     <varlistentry id="guc-default-statistics-target" xreflabel="default_statistics_target">
      <term><varname>default_statistics_target</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>default_statistics_target</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>default_statistics_target</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the default statistics target for table columns without
        a column-specific target set via <command>ALTER TABLE
        SET STATISTICS</command>.  Larger values increase the time needed to
        do <command>ANALYZE</command>, but might improve the quality of the
        planner's estimates. The default is 100. For more information
        on the use of statistics by the <productname>PostgreSQL</productname>
        query planner, refer to <xref linkend="planner-stats"/>.
-->
<command>ALTER TABLE SET STATISTICS</command>で列特定の目標が設定されていないテーブル列に対し、デフォルトの統計情報目標を設定します。
より大きい値は<command>ANALYZE</command>に必要な時間を増加させますが、プランナの予測の品質を向上させます。
デフォルトは100です。
<productname>PostgreSQL</productname>の問い合わせプランナによる統計情報の使用方法に関するより詳細な情報は、<xref linkend="planner-stats"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-constraint-exclusion" xreflabel="constraint_exclusion">
      <term><varname>constraint_exclusion</varname> (<type>enum</type>)
      <indexterm>
       <primary>constraint exclusion</primary>
      </indexterm>
      <indexterm>
       <primary>制約除外</primary>
      </indexterm>
      <indexterm>
       <primary><varname>constraint_exclusion</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>constraint_exclusion</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Controls the query planner's use of table constraints to
        optimize queries.
        The allowed values of <varname>constraint_exclusion</varname> are
        <literal>on</literal> (examine constraints for all tables),
        <literal>off</literal> (never examine constraints), and
        <literal>partition</literal> (examine constraints only for inheritance
        child tables and <literal>UNION ALL</literal> subqueries).
        <literal>partition</literal> is the default setting.
        It is often used with traditional inheritance trees to improve
        performance.
-->
問い合わせプランナが問い合わせを最適化する際のテーブル制約の使用を制御します。
<varname>constraint_exclusion</varname>に許容される値は、<literal>on</literal>（全てのテーブルに対し制約を検査する）、<literal>off</literal>（決して制約を検査しない）、および<literal>partition</literal>（継承された子テーブルおよび<literal>UNION ALL</literal>副問い合わせのみ制約を検査する）です。
<literal>partition</literal>がデフォルトの設定です。
伝統的な継承ツリーでしばしば性能向上のために使用されます。
      </para>

       <para>
<!--
        When this parameter allows it for a particular table, the planner
        compares query conditions with the table's <literal>CHECK</literal>
        constraints, and omits scanning tables for which the conditions
        contradict the constraints.  For example:
-->
このパラメータが特定のテーブルに対して許される時、プランナはそのテーブルの<literal>CHECK</literal>制約で問い合わせ条件を比較し、制約と矛盾する条件のテーブルのスキャンを省きます。
例えば以下のようになります。

<programlisting>
CREATE TABLE parent(key integer, ...);
CREATE TABLE child1000(check (key between 1000 and 1999)) INHERITS(parent);
CREATE TABLE child2000(check (key between 2000 and 2999)) INHERITS(parent);
...
SELECT * FROM parent WHERE key = 2400;
</programlisting>

<!--
        With constraint exclusion enabled, this <command>SELECT</command>
        will not scan <structname>child1000</structname> at all, improving performance.
-->
制約排除が有効であると、この<command>SELECT</command>は全く<structname>child1000</structname>をスキャンせず、性能を向上させます。
       </para>

       <para>
<!--
        Currently, constraint exclusion is enabled by default
        only for cases that are often used to implement table partitioning via
        inheritance trees.  Turning it on for all tables imposes extra
        planning overhead that is quite noticeable on simple queries, and most
        often will yield no benefit for simple queries.  If you have no
        tables that are partitioned using traditional inheritance, you might
        prefer to turn it off entirely.  (Note that the equivalent feature for
        partitioned tables is controlled by a separate parameter,
        <xref linkend="guc-enable-partition-pruning"/>.)
-->
現在、継承ツリーを使ってテーブルパーティショニングを実装するために使用されるよくある場合のことだけを考慮して、制約排除はデフォルトで有効です。
すべてのテーブルに対して有効にするのは、単純な問い合わせにおいて特にはっきりわかる計画作成の余計なオーバーヘッドをもたらし、単純な問い合わせにはメリットがありません。
伝統的な継承を使うパーティショニングされたテーブルがない場合、完全に無効にする方が良いでしょう。
（パーティショニングされたテーブル用の同等の機能は別のパラメータ<xref linkend="guc-enable-partition-pruning"/>で制御します。）
       </para>

       <para>
<!--
        Refer to <xref linkend="ddl-partitioning-constraint-exclusion"/> for
        more information on using constraint exclusion to implement
        partitioning.
-->
パーティショニングを実装するための制約排除の利用についてのより進んだ情報は<xref linkend="ddl-partitioning-constraint-exclusion"/>を参照ください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cursor-tuple-fraction" xreflabel="cursor_tuple_fraction">
      <term><varname>cursor_tuple_fraction</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cursor_tuple_fraction</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>cursor_tuple_fraction</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Sets the planner's estimate of the fraction of a cursor's rows that
        will be retrieved.  The default is 0.1.  Smaller values of this
        setting bias the planner towards using <quote>fast start</quote> plans
        for cursors, which will retrieve the first few rows quickly while
        perhaps taking a long time to fetch all rows.  Larger values
        put more emphasis on the total estimated time.  At the maximum
        setting of 1.0, cursors are planned exactly like regular queries,
        considering only the total estimated time and not how soon the
        first rows might be delivered.
-->
検索されるカーソル行の割合のプランナの見積もりを設定します。
デフォルトは0.1です。
この設定をより小さくすると、プランナはカーソルに対し<quote>起動を高速にする</quote>計画を使用するようになりがちになります。
この場合先頭の数行の取り出しは高速になりますが、行全体を取り出す場合に時間がかかるようになる可能性があります。
この値をより大きくすると、推定時間全体がより強調されるようになります。
最大の設定である1.0の場合、カーソルは通常の問い合わせとまったく同様に計画されます。
つまり、推定時間全体のみが考慮され、先頭の行の取り出しにかかる時間は考慮されなくなります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-from-collapse-limit" xreflabel="from_collapse_limit">
      <term><varname>from_collapse_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>from_collapse_limit</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>from_collapse_limit</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        The planner will merge sub-queries into upper queries if the
        resulting <literal>FROM</literal> list would have no more than
        this many items.  Smaller values reduce planning time but might
        yield inferior query plans.  The default is eight.
        For more information see <xref linkend="explicit-joins"/>.
-->
プランナは、<literal>FROM</literal>リストがこの数の項目より少ない結果の場合、副問い合わせを上位の問い合わせに併合します。
より小さい値は計画時間を縮小させますが、劣った問い合わせ計画をもたらす可能性があります。
デフォルトは8です。
詳細は<xref linkend="explicit-joins"/>を参照してください。
       </para>

       <para>
<!--
        Setting this value to <xref linkend="guc-geqo-threshold"/> or more
        may trigger use of the GEQO planner, resulting in non-optimal
        plans.  See <xref linkend="runtime-config-query-geqo"/>.
-->
この値を<xref linkend="guc-geqo-threshold"/>か、それ以上に設定するとGEQOプランナ使用の誘引となり、最適ではない計画をもたらします。<xref linkend="runtime-config-query-geqo"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit" xreflabel="jit">
      <term><varname>jit</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>jit</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>jit</varname>設定パラメータ</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
<!--
        Determines whether <acronym>JIT</acronym> compilation may be used by
        <productname>PostgreSQL</productname>, if available (see <xref
        linkend="jit"/>).
        The default is <literal>on</literal>.
-->
<productname>PostgreSQL</productname>が、可能ならば<acronym>JIT</acronym>コンパイルを使うかどうかを決定します（<xref linkend="jit"/>を参照）。
デフォルトは<literal>on</literal>です。
       </para>
      </listitem>
     </varlistentry>
<!-- split-config1-end -->
